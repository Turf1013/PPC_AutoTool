
/home/bombe/target-project/powerpc-module/kernel/linux-2.6.38/net/sctp/socket.o:     file format elf32-powerpc


Disassembly of section .text:

00000000 <sctp_enter_memory_pressure>:
static int sctp_memory_pressure;
static atomic_long_t sctp_memory_allocated;
struct percpu_counter sctp_sockets_allocated;

static void sctp_enter_memory_pressure(struct sock *sk)
{
       0:	94 21 ff f0 	stwu    r1,-16(r1)
       4:	90 61 00 08 	stw     r3,8(r1)
	sctp_memory_pressure = 1;
       8:	3c 00 00 00 	lis     r0,0
       c:	39 20 00 01 	li      r9,1
      10:	7c 0b 03 78 	mr      r11,r0
      14:	91 2b 00 00 	stw     r9,0(r11)
}
      18:	38 21 00 10 	addi    r1,r1,16
      1c:	4e 80 00 20 	blr

00000020 <sctp_id2assoc>:

/* Look up the association by its id.  If this is not a UDP-style
 * socket, the ID field is always ignored.
 */
struct sctp_association *sctp_id2assoc(struct sock *sk, sctp_assoc_t id)
{
      20:	94 21 ff c0 	stwu    r1,-64(r1)
      24:	7c 08 02 a6 	mflr    r0
      28:	90 01 00 44 	stw     r0,68(r1)
      2c:	90 61 00 38 	stw     r3,56(r1)
      30:	90 81 00 3c 	stw     r4,60(r1)
	struct sctp_association *asoc = NULL;
      34:	38 00 00 00 	li      r0,0
      38:	90 01 00 08 	stw     r0,8(r1)
      3c:	80 01 00 38 	lwz     r0,56(r1)
      40:	90 01 00 10 	stw     r0,16(r1)
      44:	38 00 00 00 	li      r0,0
      48:	90 01 00 14 	stw     r0,20(r1)
      4c:	80 01 00 10 	lwz     r0,16(r1)
      50:	90 01 00 18 	stw     r0,24(r1)
	struct sk_buff_head pd_lobby;
};

static inline struct sctp_sock *sctp_sk(const struct sock *sk)
{
       return (struct sctp_sock *)sk;
      54:	80 01 00 18 	lwz     r0,24(r1)

/* Is a socket of this style? */
#define sctp_style(sk, style) __sctp_style((sk), (SCTP_SOCKET_##style))
static inline int __sctp_style(const struct sock *sk, sctp_socket_type_t style)
{
	return sctp_sk(sk)->type == style;
      58:	7c 09 03 78 	mr      r9,r0
      5c:	80 09 01 c8 	lwz     r0,456(r9)
      60:	81 21 00 14 	lwz     r9,20(r1)
      64:	7f 89 00 00 	cmpw    cr7,r9,r0
      68:	7c 00 00 26 	mfcr    r0
      6c:	54 00 ff fe 	rlwinm  r0,r0,31,31,31

	/* If this is not a UDP-style socket, assoc id should be ignored. */
	if (!sctp_style(sk, UDP)) {
      70:	2f 80 00 00 	cmpwi   cr7,r0,0
      74:	40 9e 00 b8 	bne-    cr7,12c <sctp_id2assoc+0x10c>
      78:	80 01 00 38 	lwz     r0,56(r1)
      7c:	90 01 00 1c 	stw     r0,28(r1)
      80:	38 00 00 01 	li      r0,1
      84:	90 01 00 20 	stw     r0,32(r1)

/* Is the socket in this state? */
#define sctp_sstate(sk, state) __sctp_sstate((sk), (SCTP_SS_##state))
static inline int __sctp_sstate(const struct sock *sk, sctp_sock_state_t state)
{
	return sk->sk_state == state;
      88:	80 01 00 1c 	lwz     r0,28(r1)
      8c:	7c 0b 03 78 	mr      r11,r0
      90:	88 0b 00 0e 	lbz     r0,14(r11)
      94:	54 00 06 3e 	clrlwi  r0,r0,24
      98:	81 21 00 20 	lwz     r9,32(r1)
      9c:	7f 89 00 00 	cmpw    cr7,r9,r0
      a0:	7c 00 00 26 	mfcr    r0
      a4:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
		/* Return NULL if the socket state is not ESTABLISHED. It
		 * could be a TCP-style listening socket or a socket which
		 * hasn't yet called connect() to establish an association.
		 */
		if (!sctp_sstate(sk, ESTABLISHED))
      a8:	2f 80 00 00 	cmpwi   cr7,r0,0
      ac:	40 9e 00 0c 	bne-    cr7,b8 <sctp_id2assoc+0x98>
			return NULL;
      b0:	38 00 00 00 	li      r0,0
      b4:	48 00 01 18 	b       1cc <sctp_id2assoc+0x1ac>
      b8:	80 01 00 38 	lwz     r0,56(r1)
      bc:	90 01 00 24 	stw     r0,36(r1)
      c0:	80 01 00 24 	lwz     r0,36(r1)

		/* Get the first and the only association from the list. */
		if (!list_empty(&sctp_sk(sk)->ep->asocs))
      c4:	7c 09 03 78 	mr      r9,r0
      c8:	80 09 01 d4 	lwz     r0,468(r9)
      cc:	30 00 00 4c 	addic   r0,r0,76
      d0:	90 01 00 28 	stw     r0,40(r1)
 * list_empty - tests whether a list is empty
 * @head: the list to test.
 */
static inline int list_empty(const struct list_head *head)
{
	return head->next == head;
      d4:	80 01 00 28 	lwz     r0,40(r1)
      d8:	7c 0b 03 78 	mr      r11,r0
      dc:	80 0b 00 00 	lwz     r0,0(r11)
      e0:	81 21 00 28 	lwz     r9,40(r1)
      e4:	7f 89 00 00 	cmpw    cr7,r9,r0
      e8:	7c 00 00 26 	mfcr    r0
      ec:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
      f0:	2f 80 00 00 	cmpwi   cr7,r0,0
      f4:	40 9e 00 30 	bne-    cr7,124 <sctp_id2assoc+0x104>
      f8:	80 01 00 38 	lwz     r0,56(r1)
      fc:	90 01 00 2c 	stw     r0,44(r1)
     100:	80 01 00 2c 	lwz     r0,44(r1)
			asoc = list_entry(sctp_sk(sk)->ep->asocs.next,
     104:	7c 09 03 78 	mr      r9,r0
     108:	80 09 01 d4 	lwz     r0,468(r9)
     10c:	7c 0b 03 78 	mr      r11,r0
     110:	80 0b 00 4c 	lwz     r0,76(r11)
     114:	90 01 00 0c 	stw     r0,12(r1)
     118:	80 01 00 0c 	lwz     r0,12(r1)
     11c:	30 00 ff b4 	addic   r0,r0,-76
     120:	90 01 00 08 	stw     r0,8(r1)
					  struct sctp_association, asocs);
		return asoc;
     124:	80 01 00 08 	lwz     r0,8(r1)
     128:	48 00 00 a4 	b       1cc <sctp_id2assoc+0x1ac>
	}

	/* Otherwise this is a UDP-style socket. */
	if (!id || (id == (sctp_assoc_t)-1))
     12c:	80 01 00 3c 	lwz     r0,60(r1)
     130:	2f 80 00 00 	cmpwi   cr7,r0,0
     134:	41 9e 00 14 	beq-    cr7,148 <sctp_id2assoc+0x128>
     138:	81 21 00 3c 	lwz     r9,60(r1)
     13c:	38 00 ff ff 	li      r0,-1
     140:	7f 89 00 00 	cmpw    cr7,r9,r0
     144:	40 9e 00 0c 	bne-    cr7,150 <sctp_id2assoc+0x130>
		return NULL;
     148:	38 00 00 00 	li      r0,0
     14c:	48 00 00 80 	b       1cc <sctp_id2assoc+0x1ac>
     150:	3c 00 00 00 	lis     r0,0
     154:	30 00 00 00 	addic   r0,r0,0
     158:	90 01 00 30 	stw     r0,48(r1)
	raw_spin_lock(&lock->rlock);
}

static inline void spin_lock_bh(spinlock_t *lock)
{
	raw_spin_lock_bh(&lock->rlock);
     15c:	48 00 00 01 	bl      15c <sctp_id2assoc+0x13c>

	spin_lock_bh(&sctp_assocs_id_lock);
	asoc = (struct sctp_association *)idr_find(&sctp_assocs_id, (int)id);
     160:	3c 00 00 00 	lis     r0,0
     164:	30 60 00 00 	addic   r3,r0,0
     168:	80 81 00 3c 	lwz     r4,60(r1)
     16c:	48 00 00 01 	bl      16c <sctp_id2assoc+0x14c>
     170:	90 61 00 08 	stw     r3,8(r1)
     174:	3c 00 00 00 	lis     r0,0
     178:	30 00 00 00 	addic   r0,r0,0
     17c:	90 01 00 34 	stw     r0,52(r1)
	raw_spin_unlock(&lock->rlock);
}

static inline void spin_unlock_bh(spinlock_t *lock)
{
	raw_spin_unlock_bh(&lock->rlock);
     180:	48 00 00 01 	bl      180 <sctp_id2assoc+0x160>
	spin_unlock_bh(&sctp_assocs_id_lock);

	if (!asoc || (asoc->base.sk != sk) || asoc->base.dead)
     184:	80 01 00 08 	lwz     r0,8(r1)
     188:	2f 80 00 00 	cmpwi   cr7,r0,0
     18c:	41 9e 00 34 	beq-    cr7,1c0 <sctp_id2assoc+0x1a0>
     190:	80 01 00 08 	lwz     r0,8(r1)
     194:	7c 0b 03 78 	mr      r11,r0
     198:	81 2b 00 18 	lwz     r9,24(r11)
     19c:	80 01 00 38 	lwz     r0,56(r1)
     1a0:	7f 89 00 00 	cmpw    cr7,r9,r0
     1a4:	40 9e 00 1c 	bne-    cr7,1c0 <sctp_id2assoc+0x1a0>
     1a8:	80 01 00 08 	lwz     r0,8(r1)
     1ac:	7c 09 03 78 	mr      r9,r0
     1b0:	88 09 00 14 	lbz     r0,20(r9)
     1b4:	54 00 06 3e 	clrlwi  r0,r0,24
     1b8:	2f 80 00 00 	cmpwi   cr7,r0,0
     1bc:	41 9e 00 0c 	beq-    cr7,1c8 <sctp_id2assoc+0x1a8>
		return NULL;
     1c0:	38 00 00 00 	li      r0,0
     1c4:	48 00 00 08 	b       1cc <sctp_id2assoc+0x1ac>

	return asoc;
     1c8:	80 01 00 08 	lwz     r0,8(r1)
}
     1cc:	7c 03 03 78 	mr      r3,r0
     1d0:	80 01 00 44 	lwz     r0,68(r1)
     1d4:	7c 08 03 a6 	mtlr    r0
     1d8:	38 21 00 40 	addi    r1,r1,64
     1dc:	4e 80 00 20 	blr

000001e0 <sctp_addr_id2transport>:
 * the same.
 */
static struct sctp_transport *sctp_addr_id2transport(struct sock *sk,
					      struct sockaddr_storage *addr,
					      sctp_assoc_t id)
{
     1e0:	94 21 ff c0 	stwu    r1,-64(r1)
     1e4:	7c 08 02 a6 	mflr    r0
     1e8:	90 01 00 44 	stw     r0,68(r1)
     1ec:	90 61 00 28 	stw     r3,40(r1)
     1f0:	90 81 00 2c 	stw     r4,44(r1)
     1f4:	90 a1 00 30 	stw     r5,48(r1)
	struct sctp_association *addr_asoc = NULL, *id_asoc = NULL;
     1f8:	38 00 00 00 	li      r0,0
     1fc:	90 01 00 08 	stw     r0,8(r1)
     200:	38 00 00 00 	li      r0,0
     204:	90 01 00 0c 	stw     r0,12(r1)
	struct sctp_transport *transport;
	union sctp_addr *laddr = (union sctp_addr *)addr;
     208:	80 01 00 2c 	lwz     r0,44(r1)
     20c:	90 01 00 10 	stw     r0,16(r1)
     210:	80 01 00 28 	lwz     r0,40(r1)
     214:	90 01 00 14 	stw     r0,20(r1)
     218:	80 01 00 14 	lwz     r0,20(r1)

	addr_asoc = sctp_endpoint_lookup_assoc(sctp_sk(sk)->ep,
     21c:	7c 0b 03 78 	mr      r11,r0
     220:	81 2b 01 d4 	lwz     r9,468(r11)
     224:	38 01 00 1c 	addi    r0,r1,28
     228:	7d 23 4b 78 	mr      r3,r9
     22c:	80 81 00 10 	lwz     r4,16(r1)
     230:	7c 05 03 78 	mr      r5,r0
     234:	48 00 00 01 	bl      234 <sctp_addr_id2transport+0x54>
     238:	90 61 00 08 	stw     r3,8(r1)
					       laddr,
					       &transport);

	if (!addr_asoc)
     23c:	80 01 00 08 	lwz     r0,8(r1)
     240:	2f 80 00 00 	cmpwi   cr7,r0,0
     244:	40 9e 00 0c 	bne-    cr7,250 <sctp_addr_id2transport+0x70>
		return NULL;
     248:	38 00 00 00 	li      r0,0
     24c:	48 00 00 7c 	b       2c8 <sctp_addr_id2transport+0xe8>

	id_asoc = sctp_id2assoc(sk, id);
     250:	80 61 00 28 	lwz     r3,40(r1)
     254:	80 81 00 30 	lwz     r4,48(r1)
     258:	48 00 00 01 	bl      258 <sctp_addr_id2transport+0x78>
     25c:	90 61 00 0c 	stw     r3,12(r1)
	if (id_asoc && (id_asoc != addr_asoc))
     260:	80 01 00 0c 	lwz     r0,12(r1)
     264:	2f 80 00 00 	cmpwi   cr7,r0,0
     268:	41 9e 00 1c 	beq-    cr7,284 <sctp_addr_id2transport+0xa4>
     26c:	81 21 00 0c 	lwz     r9,12(r1)
     270:	80 01 00 08 	lwz     r0,8(r1)
     274:	7f 89 00 00 	cmpw    cr7,r9,r0
     278:	41 9e 00 0c 	beq-    cr7,284 <sctp_addr_id2transport+0xa4>
		return NULL;
     27c:	38 00 00 00 	li      r0,0
     280:	48 00 00 48 	b       2c8 <sctp_addr_id2transport+0xe8>

	sctp_get_pf_specific(sk->sk_family)->addr_v4map(sctp_sk(sk),
     284:	80 01 00 28 	lwz     r0,40(r1)
     288:	7c 09 03 78 	mr      r9,r0
     28c:	a0 09 00 0c 	lhz     r0,12(r9)
     290:	54 00 04 3e 	clrlwi  r0,r0,16
     294:	7c 03 03 78 	mr      r3,r0
     298:	48 00 00 01 	bl      298 <sctp_addr_id2transport+0xb8>
     29c:	7c 60 1b 78 	mr      r0,r3
     2a0:	7c 0b 03 78 	mr      r11,r0
     2a4:	80 0b 00 20 	lwz     r0,32(r11)
     2a8:	81 21 00 28 	lwz     r9,40(r1)
     2ac:	91 21 00 18 	stw     r9,24(r1)
     2b0:	81 21 00 18 	lwz     r9,24(r1)
     2b4:	7d 23 4b 78 	mr      r3,r9
     2b8:	80 81 00 2c 	lwz     r4,44(r1)
     2bc:	7c 09 03 a6 	mtctr   r0
     2c0:	4e 80 04 21 	bctrl
						(union sctp_addr *)addr);

	return transport;
     2c4:	80 01 00 1c 	lwz     r0,28(r1)
}
     2c8:	7c 03 03 78 	mr      r3,r0
     2cc:	80 01 00 44 	lwz     r0,68(r1)
     2d0:	7c 08 03 a6 	mtlr    r0
     2d4:	38 21 00 40 	addi    r1,r1,64
     2d8:	4e 80 00 20 	blr

000002dc <sctp_bind>:
 *   addr    - the address structure (struct sockaddr_in or struct
 *             sockaddr_in6 [RFC 2553]),
 *   addr_len - the size of the address structure.
 */
SCTP_STATIC int sctp_bind(struct sock *sk, struct sockaddr *addr, int addr_len)
{
     2dc:	94 21 ff d0 	stwu    r1,-48(r1)
     2e0:	7c 08 02 a6 	mflr    r0
     2e4:	90 01 00 34 	stw     r0,52(r1)
     2e8:	90 61 00 18 	stw     r3,24(r1)
     2ec:	90 81 00 1c 	stw     r4,28(r1)
     2f0:	90 a1 00 20 	stw     r5,32(r1)
	int retval = 0;
     2f4:	38 00 00 00 	li      r0,0
     2f8:	90 01 00 08 	stw     r0,8(r1)
     2fc:	80 01 00 18 	lwz     r0,24(r1)
     300:	90 01 00 0c 	stw     r0,12(r1)

extern void lock_sock_nested(struct sock *sk, int subclass);

static inline void lock_sock(struct sock *sk)
{
	lock_sock_nested(sk, 0);
     304:	80 61 00 0c 	lwz     r3,12(r1)
     308:	38 80 00 00 	li      r4,0
     30c:	48 00 00 01 	bl      30c <sctp_bind+0x30>
     310:	80 01 00 18 	lwz     r0,24(r1)
     314:	90 01 00 10 	stw     r0,16(r1)
     318:	80 01 00 10 	lwz     r0,16(r1)

	SCTP_DEBUG_PRINTK("sctp_bind(sk: %p, addr: %p, addr_len: %d)\n",
			  sk, addr, addr_len);

	/* Disallow binding twice. */
	if (!sctp_sk(sk)->ep->base.bind_addr.port)
     31c:	7c 09 03 78 	mr      r9,r0
     320:	80 09 01 d4 	lwz     r0,468(r9)
     324:	7c 09 03 78 	mr      r9,r0
     328:	a0 09 00 3c 	lhz     r0,60(r9)
     32c:	54 00 04 3e 	clrlwi  r0,r0,16
     330:	2f 80 00 00 	cmpwi   cr7,r0,0
     334:	40 9e 00 1c 	bne-    cr7,350 <sctp_bind+0x74>
		retval = sctp_do_bind(sk, (union sctp_addr *)addr,
     338:	80 61 00 18 	lwz     r3,24(r1)
     33c:	80 81 00 1c 	lwz     r4,28(r1)
     340:	80 a1 00 20 	lwz     r5,32(r1)
     344:	48 00 01 99 	bl      4dc <sctp_do_bind>
     348:	90 61 00 08 	stw     r3,8(r1)
     34c:	48 00 00 0c 	b       358 <sctp_bind+0x7c>
				      addr_len);
	else
		retval = -EINVAL;
     350:	38 00 ff ea 	li      r0,-22
     354:	90 01 00 08 	stw     r0,8(r1)

	sctp_release_sock(sk);
     358:	80 61 00 18 	lwz     r3,24(r1)
     35c:	48 00 00 01 	bl      35c <sctp_bind+0x80>

	return retval;
     360:	80 01 00 08 	lwz     r0,8(r1)
}
     364:	7c 03 03 78 	mr      r3,r0
     368:	80 01 00 34 	lwz     r0,52(r1)
     36c:	7c 08 03 a6 	mtlr    r0
     370:	38 21 00 30 	addi    r1,r1,48
     374:	4e 80 00 20 	blr

00000378 <sctp_sockaddr_af>:
static long sctp_get_port_local(struct sock *, union sctp_addr *);

/* Verify this is a valid sockaddr. */
static struct sctp_af *sctp_sockaddr_af(struct sctp_sock *opt,
					union sctp_addr *addr, int len)
{
     378:	94 21 ff d0 	stwu    r1,-48(r1)
     37c:	7c 08 02 a6 	mflr    r0
     380:	90 01 00 34 	stw     r0,52(r1)
     384:	90 61 00 18 	stw     r3,24(r1)
     388:	90 81 00 1c 	stw     r4,28(r1)
     38c:	90 a1 00 20 	stw     r5,32(r1)
	struct sctp_af *af;

	/* Check minimum size.  */
	if (len < sizeof (struct sockaddr))
     390:	80 01 00 20 	lwz     r0,32(r1)
     394:	2b 80 00 0f 	cmplwi  cr7,r0,15
     398:	41 9d 00 0c 	bgt-    cr7,3a4 <sctp_sockaddr_af+0x2c>
		return NULL;
     39c:	38 00 00 00 	li      r0,0
     3a0:	48 00 01 28 	b       4c8 <sctp_sockaddr_af+0x150>

	/* V4 mapped address are really of AF_INET family */
	if (addr->sa.sa_family == AF_INET6 &&
     3a4:	80 01 00 1c 	lwz     r0,28(r1)
     3a8:	7c 09 03 78 	mr      r9,r0
     3ac:	a0 09 00 00 	lhz     r0,0(r9)
     3b0:	54 00 04 3e 	clrlwi  r0,r0,16
     3b4:	2f 80 00 0a 	cmpwi   cr7,r0,10
     3b8:	40 9e 00 8c 	bne-    cr7,444 <sctp_sockaddr_af+0xcc>
	    ipv6_addr_v4mapped(&addr->v6.sin6_addr)) {
     3bc:	80 01 00 1c 	lwz     r0,28(r1)
     3c0:	30 00 00 08 	addic   r0,r0,8
     3c4:	90 01 00 0c 	stw     r0,12(r1)
		a->s6_addr32[2] | (a->s6_addr32[3] ^ htonl(1))) == 0;
}

static inline int ipv6_addr_v4mapped(const struct in6_addr *a)
{
	return (a->s6_addr32[0] | a->s6_addr32[1] |
     3c8:	80 01 00 0c 	lwz     r0,12(r1)
     3cc:	7c 0b 03 78 	mr      r11,r0
     3d0:	81 2b 00 00 	lwz     r9,0(r11)
     3d4:	80 01 00 0c 	lwz     r0,12(r1)
     3d8:	7c 0b 03 78 	mr      r11,r0
     3dc:	80 0b 00 04 	lwz     r0,4(r11)
     3e0:	7d 29 03 78 	or      r9,r9,r0
		 (a->s6_addr32[2] ^ htonl(0x0000ffff))) == 0;
     3e4:	80 01 00 0c 	lwz     r0,12(r1)
     3e8:	7c 0b 03 78 	mr      r11,r0
     3ec:	80 0b 00 08 	lwz     r0,8(r11)
     3f0:	68 00 ff ff 	xori    r0,r0,65535
		a->s6_addr32[2] | (a->s6_addr32[3] ^ htonl(1))) == 0;
}

static inline int ipv6_addr_v4mapped(const struct in6_addr *a)
{
	return (a->s6_addr32[0] | a->s6_addr32[1] |
     3f4:	7d 20 03 78 	or      r0,r9,r0
     3f8:	2f 80 00 00 	cmpwi   cr7,r0,0
     3fc:	7c 00 00 26 	mfcr    r0
     400:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
	/* Check minimum size.  */
	if (len < sizeof (struct sockaddr))
		return NULL;

	/* V4 mapped address are really of AF_INET family */
	if (addr->sa.sa_family == AF_INET6 &&
     404:	2f 80 00 00 	cmpwi   cr7,r0,0
     408:	41 9e 00 3c 	beq-    cr7,444 <sctp_sockaddr_af+0xcc>
	    ipv6_addr_v4mapped(&addr->v6.sin6_addr)) {
		if (!opt->pf->af_supported(AF_INET, opt))
     40c:	80 01 00 18 	lwz     r0,24(r1)
     410:	7c 09 03 78 	mr      r9,r0
     414:	80 09 01 cc 	lwz     r0,460(r9)
     418:	7c 0b 03 78 	mr      r11,r0
     41c:	80 0b 00 08 	lwz     r0,8(r11)
     420:	38 60 00 02 	li      r3,2
     424:	80 81 00 18 	lwz     r4,24(r1)
     428:	7c 09 03 a6 	mtctr   r0
     42c:	4e 80 04 21 	bctrl
     430:	7c 60 1b 78 	mr      r0,r3
     434:	2f 80 00 00 	cmpwi   cr7,r0,0
     438:	40 9e 00 50 	bne-    cr7,488 <sctp_sockaddr_af+0x110>
			return NULL;
     43c:	38 00 00 00 	li      r0,0
     440:	48 00 00 88 	b       4c8 <sctp_sockaddr_af+0x150>
	} else {
		/* Does this PF support this AF? */
		if (!opt->pf->af_supported(addr->sa.sa_family, opt))
     444:	80 01 00 18 	lwz     r0,24(r1)
     448:	7c 09 03 78 	mr      r9,r0
     44c:	80 09 01 cc 	lwz     r0,460(r9)
     450:	7c 0b 03 78 	mr      r11,r0
     454:	80 0b 00 08 	lwz     r0,8(r11)
     458:	81 21 00 1c 	lwz     r9,28(r1)
     45c:	a1 29 00 00 	lhz     r9,0(r9)
     460:	55 29 04 3e 	clrlwi  r9,r9,16
     464:	7d 23 4b 78 	mr      r3,r9
     468:	80 81 00 18 	lwz     r4,24(r1)
     46c:	7c 09 03 a6 	mtctr   r0
     470:	4e 80 04 21 	bctrl
     474:	7c 60 1b 78 	mr      r0,r3
     478:	2f 80 00 00 	cmpwi   cr7,r0,0
     47c:	40 9e 00 0c 	bne-    cr7,488 <sctp_sockaddr_af+0x110>
			return NULL;
     480:	38 00 00 00 	li      r0,0
     484:	48 00 00 44 	b       4c8 <sctp_sockaddr_af+0x150>
	}

	/* If we get this far, af is valid. */
	af = sctp_get_af_specific(addr->sa.sa_family);
     488:	80 01 00 1c 	lwz     r0,28(r1)
     48c:	7c 09 03 78 	mr      r9,r0
     490:	a0 09 00 00 	lhz     r0,0(r9)
     494:	54 00 04 3e 	clrlwi  r0,r0,16
     498:	7c 03 03 78 	mr      r3,r0
     49c:	48 00 00 01 	bl      49c <sctp_sockaddr_af+0x124>
     4a0:	90 61 00 08 	stw     r3,8(r1)

	if (len < af->sockaddr_len)
     4a4:	80 01 00 08 	lwz     r0,8(r1)
     4a8:	7c 0b 03 78 	mr      r11,r0
     4ac:	81 2b 00 6c 	lwz     r9,108(r11)
     4b0:	80 01 00 20 	lwz     r0,32(r1)
     4b4:	7f 89 00 00 	cmpw    cr7,r9,r0
     4b8:	40 9d 00 0c 	ble-    cr7,4c4 <sctp_sockaddr_af+0x14c>
		return NULL;
     4bc:	38 00 00 00 	li      r0,0
     4c0:	48 00 00 08 	b       4c8 <sctp_sockaddr_af+0x150>

	return af;
     4c4:	80 01 00 08 	lwz     r0,8(r1)
}
     4c8:	7c 03 03 78 	mr      r3,r0
     4cc:	80 01 00 34 	lwz     r0,52(r1)
     4d0:	7c 08 03 a6 	mtlr    r0
     4d4:	38 21 00 30 	addi    r1,r1,48
     4d8:	4e 80 00 20 	blr

000004dc <sctp_do_bind>:

/* Bind a local address either to an endpoint or to an association.  */
SCTP_STATIC int sctp_do_bind(struct sock *sk, union sctp_addr *addr, int len)
{
     4dc:	94 21 ff b0 	stwu    r1,-80(r1)
     4e0:	7c 08 02 a6 	mflr    r0
     4e4:	90 01 00 54 	stw     r0,84(r1)
     4e8:	90 61 00 38 	stw     r3,56(r1)
     4ec:	90 81 00 3c 	stw     r4,60(r1)
     4f0:	90 a1 00 40 	stw     r5,64(r1)
     4f4:	80 01 00 38 	lwz     r0,56(r1)
     4f8:	90 01 00 20 	stw     r0,32(r1)
     4fc:	80 01 00 20 	lwz     r0,32(r1)
	struct sctp_sock *sp = sctp_sk(sk);
     500:	90 01 00 0c 	stw     r0,12(r1)
	struct sctp_endpoint *ep = sp->ep;
     504:	80 01 00 0c 	lwz     r0,12(r1)
     508:	7c 09 03 78 	mr      r9,r0
     50c:	80 09 01 d4 	lwz     r0,468(r9)
     510:	90 01 00 10 	stw     r0,16(r1)
	struct sctp_bind_addr *bp = &ep->base.bind_addr;
     514:	80 01 00 10 	lwz     r0,16(r1)
     518:	30 00 00 3c 	addic   r0,r0,60
     51c:	90 01 00 14 	stw     r0,20(r1)
	struct sctp_af *af;
	unsigned short snum;
	int ret = 0;
     520:	38 00 00 00 	li      r0,0
     524:	90 01 00 18 	stw     r0,24(r1)

	/* Common sockaddr verification. */
	af = sctp_sockaddr_af(sp, addr, len);
     528:	80 61 00 0c 	lwz     r3,12(r1)
     52c:	80 81 00 3c 	lwz     r4,60(r1)
     530:	80 a1 00 40 	lwz     r5,64(r1)
     534:	4b ff fe 45 	bl      378 <sctp_sockaddr_af>
     538:	90 61 00 1c 	stw     r3,28(r1)
	if (!af) {
     53c:	80 01 00 1c 	lwz     r0,28(r1)
     540:	2f 80 00 00 	cmpwi   cr7,r0,0
     544:	40 9e 00 0c 	bne-    cr7,550 <sctp_do_bind+0x74>
		SCTP_DEBUG_PRINTK("sctp_do_bind(sk: %p, newaddr: %p, len: %d) EINVAL\n",
				  sk, addr, len);
		return -EINVAL;
     548:	38 00 ff ea 	li      r0,-22
     54c:	48 00 01 ec 	b       738 <sctp_do_bind+0x25c>
	}

	snum = ntohs(addr->v4.sin_port);
     550:	80 01 00 3c 	lwz     r0,60(r1)
     554:	7c 0b 03 78 	mr      r11,r0
     558:	a0 0b 00 02 	lhz     r0,2(r11)
     55c:	b0 01 00 08 	sth     r0,8(r1)
				 addr,
				 bp->port, snum,
				 len);

	/* PF specific bind() address verification. */
	if (!sp->pf->bind_verify(sp, addr))
     560:	80 01 00 0c 	lwz     r0,12(r1)
     564:	7c 09 03 78 	mr      r9,r0
     568:	80 09 01 cc 	lwz     r0,460(r9)
     56c:	7c 0b 03 78 	mr      r11,r0
     570:	80 0b 00 10 	lwz     r0,16(r11)
     574:	80 61 00 0c 	lwz     r3,12(r1)
     578:	80 81 00 3c 	lwz     r4,60(r1)
     57c:	7c 09 03 a6 	mtctr   r0
     580:	4e 80 04 21 	bctrl
     584:	7c 60 1b 78 	mr      r0,r3
     588:	2f 80 00 00 	cmpwi   cr7,r0,0
     58c:	40 9e 00 0c 	bne-    cr7,598 <sctp_do_bind+0xbc>
		return -EADDRNOTAVAIL;
     590:	38 00 ff 9d 	li      r0,-99
     594:	48 00 01 a4 	b       738 <sctp_do_bind+0x25c>

	/* We must either be unbound, or bind to the same port.
	 * It's OK to allow 0 ports if we are already bound.
	 * We'll just inhert an already bound port in this case
	 */
	if (bp->port) {
     598:	80 01 00 14 	lwz     r0,20(r1)
     59c:	7c 09 03 78 	mr      r9,r0
     5a0:	a0 09 00 00 	lhz     r0,0(r9)
     5a4:	54 00 04 3e 	clrlwi  r0,r0,16
     5a8:	2f 80 00 00 	cmpwi   cr7,r0,0
     5ac:	41 9e 00 50 	beq-    cr7,5fc <sctp_do_bind+0x120>
		if (!snum)
     5b0:	a0 01 00 08 	lhz     r0,8(r1)
     5b4:	54 00 04 3e 	clrlwi  r0,r0,16
     5b8:	2f 80 00 00 	cmpwi   cr7,r0,0
     5bc:	40 9e 00 18 	bne-    cr7,5d4 <sctp_do_bind+0xf8>
			snum = bp->port;
     5c0:	80 01 00 14 	lwz     r0,20(r1)
     5c4:	7c 0b 03 78 	mr      r11,r0
     5c8:	a0 0b 00 00 	lhz     r0,0(r11)
     5cc:	b0 01 00 08 	sth     r0,8(r1)
     5d0:	48 00 00 2c 	b       5fc <sctp_do_bind+0x120>
		else if (snum != bp->port) {
     5d4:	80 01 00 14 	lwz     r0,20(r1)
     5d8:	7c 09 03 78 	mr      r9,r0
     5dc:	a0 09 00 00 	lhz     r0,0(r9)
     5e0:	54 00 04 3e 	clrlwi  r0,r0,16
     5e4:	a1 21 00 08 	lhz     r9,8(r1)
     5e8:	55 29 04 3e 	clrlwi  r9,r9,16
     5ec:	7f 89 00 00 	cmpw    cr7,r9,r0
     5f0:	41 9e 00 0c 	beq-    cr7,5fc <sctp_do_bind+0x120>
			SCTP_DEBUG_PRINTK("sctp_do_bind:"
				  " New port %d does not match existing port "
				  "%d.\n", snum, bp->port);
			return -EINVAL;
     5f4:	38 00 ff ea 	li      r0,-22
     5f8:	48 00 01 40 	b       738 <sctp_do_bind+0x25c>
		}
	}

	if (snum && snum < PROT_SOCK && !capable(CAP_NET_BIND_SERVICE))
     5fc:	a0 01 00 08 	lhz     r0,8(r1)
     600:	54 00 04 3e 	clrlwi  r0,r0,16
     604:	2f 80 00 00 	cmpwi   cr7,r0,0
     608:	41 9e 00 30 	beq-    cr7,638 <sctp_do_bind+0x15c>
     60c:	a0 01 00 08 	lhz     r0,8(r1)
     610:	54 00 04 3e 	clrlwi  r0,r0,16
     614:	2b 80 03 ff 	cmplwi  cr7,r0,1023
     618:	41 9d 00 20 	bgt-    cr7,638 <sctp_do_bind+0x15c>
     61c:	38 60 00 0a 	li      r3,10
     620:	48 00 00 01 	bl      620 <sctp_do_bind+0x144>
     624:	7c 60 1b 78 	mr      r0,r3
     628:	2f 80 00 00 	cmpwi   cr7,r0,0
     62c:	40 9e 00 0c 	bne-    cr7,638 <sctp_do_bind+0x15c>
		return -EACCES;
     630:	38 00 ff f3 	li      r0,-13
     634:	48 00 01 04 	b       738 <sctp_do_bind+0x25c>

	/* See if the address matches any of the addresses we may have
	 * already bound before checking against other endpoints.
	 */
	if (sctp_bind_addr_match(bp, addr, sp))
     638:	80 61 00 14 	lwz     r3,20(r1)
     63c:	80 81 00 3c 	lwz     r4,60(r1)
     640:	80 a1 00 0c 	lwz     r5,12(r1)
     644:	48 00 00 01 	bl      644 <sctp_do_bind+0x168>
     648:	7c 60 1b 78 	mr      r0,r3
     64c:	2f 80 00 00 	cmpwi   cr7,r0,0
     650:	41 9e 00 0c 	beq-    cr7,65c <sctp_do_bind+0x180>
		return -EINVAL;
     654:	38 00 ff ea 	li      r0,-22
     658:	48 00 00 e0 	b       738 <sctp_do_bind+0x25c>

	/* Make sure we are allowed to bind here.
	 * The function sctp_get_port_local() does duplicate address
	 * detection.
	 */
	addr->v4.sin_port = htons(snum);
     65c:	80 01 00 3c 	lwz     r0,60(r1)
     660:	a1 21 00 08 	lhz     r9,8(r1)
     664:	7c 0b 03 78 	mr      r11,r0
     668:	b1 2b 00 02 	sth     r9,2(r11)
	if ((ret = sctp_get_port_local(sk, addr))) {
     66c:	80 61 00 38 	lwz     r3,56(r1)
     670:	80 81 00 3c 	lwz     r4,60(r1)
     674:	48 00 ef b9 	bl      f62c <sctp_get_port_local>
     678:	90 61 00 18 	stw     r3,24(r1)
     67c:	80 01 00 18 	lwz     r0,24(r1)
     680:	2f 80 00 00 	cmpwi   cr7,r0,0
     684:	41 9e 00 0c 	beq-    cr7,690 <sctp_do_bind+0x1b4>
		return -EADDRINUSE;
     688:	38 00 ff 9e 	li      r0,-98
     68c:	48 00 00 ac 	b       738 <sctp_do_bind+0x25c>
	}

	/* Refresh ephemeral port.  */
	if (!bp->port)
     690:	80 01 00 14 	lwz     r0,20(r1)
     694:	7c 09 03 78 	mr      r9,r0
     698:	a0 09 00 00 	lhz     r0,0(r9)
     69c:	54 00 04 3e 	clrlwi  r0,r0,16
     6a0:	2f 80 00 00 	cmpwi   cr7,r0,0
     6a4:	40 9e 00 28 	bne-    cr7,6cc <sctp_do_bind+0x1f0>
     6a8:	80 01 00 38 	lwz     r0,56(r1)
     6ac:	90 01 00 24 	stw     r0,36(r1)
#define IPCORK_OPT	1	/* ip-options has been held in ipcork.opt */
#define IPCORK_ALLFRAG	2	/* always fragment (for ipv6 for now) */

static inline struct inet_sock *inet_sk(const struct sock *sk)
{
	return (struct inet_sock *)sk;
     6b0:	80 01 00 24 	lwz     r0,36(r1)
		bp->port = inet_sk(sk)->inet_num;
     6b4:	7c 0b 03 78 	mr      r11,r0
     6b8:	a0 0b 01 4e 	lhz     r0,334(r11)
     6bc:	54 09 04 3e 	clrlwi  r9,r0,16
     6c0:	80 01 00 14 	lwz     r0,20(r1)
     6c4:	7c 0b 03 78 	mr      r11,r0
     6c8:	b1 2b 00 00 	sth     r9,0(r11)

	/* Add the address to the bind address list.
	 * Use GFP_ATOMIC since BHs will be disabled.
	 */
	ret = sctp_add_bind_addr(bp, addr, SCTP_ADDR_SRC, GFP_ATOMIC);
     6cc:	80 61 00 14 	lwz     r3,20(r1)
     6d0:	80 81 00 3c 	lwz     r4,60(r1)
     6d4:	38 a0 00 01 	li      r5,1
     6d8:	38 c0 00 20 	li      r6,32
     6dc:	48 00 00 01 	bl      6dc <sctp_do_bind+0x200>
     6e0:	90 61 00 18 	stw     r3,24(r1)

	/* Copy back into socket for getsockname() use. */
	if (!ret) {
     6e4:	80 01 00 18 	lwz     r0,24(r1)
     6e8:	2f 80 00 00 	cmpwi   cr7,r0,0
     6ec:	40 9e 00 48 	bne-    cr7,734 <sctp_do_bind+0x258>
     6f0:	80 01 00 38 	lwz     r0,56(r1)
     6f4:	90 01 00 28 	stw     r0,40(r1)
     6f8:	80 01 00 28 	lwz     r0,40(r1)
		inet_sk(sk)->inet_sport = htons(inet_sk(sk)->inet_num);
     6fc:	81 21 00 38 	lwz     r9,56(r1)
     700:	91 21 00 2c 	stw     r9,44(r1)
     704:	81 21 00 2c 	lwz     r9,44(r1)
     708:	a1 29 01 4e 	lhz     r9,334(r9)
     70c:	55 29 04 3e 	clrlwi  r9,r9,16
     710:	7c 0b 03 78 	mr      r11,r0
     714:	b1 2b 01 58 	sth     r9,344(r11)
		af->to_sk_saddr(addr, sk);
     718:	80 01 00 1c 	lwz     r0,28(r1)
     71c:	7c 09 03 78 	mr      r9,r0
     720:	80 09 00 34 	lwz     r0,52(r9)
     724:	80 61 00 3c 	lwz     r3,60(r1)
     728:	80 81 00 38 	lwz     r4,56(r1)
     72c:	7c 09 03 a6 	mtctr   r0
     730:	4e 80 04 21 	bctrl
	}

	return ret;
     734:	80 01 00 18 	lwz     r0,24(r1)
}
     738:	7c 03 03 78 	mr      r3,r0
     73c:	80 01 00 54 	lwz     r0,84(r1)
     740:	7c 08 03 a6 	mtlr    r0
     744:	38 21 00 50 	addi    r1,r1,80
     748:	4e 80 00 20 	blr

0000074c <sctp_send_asconf>:
 * time two ASCONF may be in-transit on any given association (one sent
 * from each endpoint).
 */
static int sctp_send_asconf(struct sctp_association *asoc,
			    struct sctp_chunk *chunk)
{
     74c:	94 21 ff d0 	stwu    r1,-48(r1)
     750:	7c 08 02 a6 	mflr    r0
     754:	90 01 00 34 	stw     r0,52(r1)
     758:	90 61 00 28 	stw     r3,40(r1)
     75c:	90 81 00 2c 	stw     r4,44(r1)
	int		retval = 0;
     760:	38 00 00 00 	li      r0,0
     764:	90 01 00 08 	stw     r0,8(r1)

	/* If there is an outstanding ASCONF chunk, queue it for later
	 * transmission.
	 */
	if (asoc->addip_last_asconf) {
     768:	80 01 00 28 	lwz     r0,40(r1)
     76c:	7c 09 03 78 	mr      r9,r0
     770:	80 09 04 18 	lwz     r0,1048(r9)
     774:	2f 80 00 00 	cmpwi   cr7,r0,0
     778:	41 9e 00 7c 	beq-    cr7,7f4 <sctp_send_asconf+0xa8>
		list_add_tail(&chunk->list, &asoc->addip_chunk_list);
     77c:	81 21 00 2c 	lwz     r9,44(r1)
     780:	80 01 00 28 	lwz     r0,40(r1)
     784:	30 00 04 24 	addic   r0,r0,1060
     788:	91 21 00 0c 	stw     r9,12(r1)
     78c:	90 01 00 10 	stw     r0,16(r1)
 * Insert a new entry before the specified head.
 * This is useful for implementing queues.
 */
static inline void list_add_tail(struct list_head *new, struct list_head *head)
{
	__list_add(new, head->prev, head);
     790:	80 01 00 10 	lwz     r0,16(r1)
     794:	7c 0b 03 78 	mr      r11,r0
     798:	80 0b 00 04 	lwz     r0,4(r11)
     79c:	81 21 00 0c 	lwz     r9,12(r1)
     7a0:	91 21 00 14 	stw     r9,20(r1)
     7a4:	90 01 00 18 	stw     r0,24(r1)
     7a8:	80 01 00 10 	lwz     r0,16(r1)
     7ac:	90 01 00 1c 	stw     r0,28(r1)
#ifndef CONFIG_DEBUG_LIST
static inline void __list_add(struct list_head *new,
			      struct list_head *prev,
			      struct list_head *next)
{
	next->prev = new;
     7b0:	80 01 00 1c 	lwz     r0,28(r1)
     7b4:	81 21 00 14 	lwz     r9,20(r1)
     7b8:	7c 0b 03 78 	mr      r11,r0
     7bc:	91 2b 00 04 	stw     r9,4(r11)
	new->next = next;
     7c0:	80 01 00 14 	lwz     r0,20(r1)
     7c4:	81 21 00 1c 	lwz     r9,28(r1)
     7c8:	7c 0b 03 78 	mr      r11,r0
     7cc:	91 2b 00 00 	stw     r9,0(r11)
	new->prev = prev;
     7d0:	80 01 00 14 	lwz     r0,20(r1)
     7d4:	81 21 00 18 	lwz     r9,24(r1)
     7d8:	7c 0b 03 78 	mr      r11,r0
     7dc:	91 2b 00 04 	stw     r9,4(r11)
	prev->next = new;
     7e0:	80 01 00 18 	lwz     r0,24(r1)
     7e4:	81 21 00 14 	lwz     r9,20(r1)
     7e8:	7c 0b 03 78 	mr      r11,r0
     7ec:	91 2b 00 00 	stw     r9,0(r11)
		goto out;
     7f0:	48 00 00 44 	b       834 <sctp_send_asconf+0xe8>
	}

	/* Hold the chunk until an ASCONF_ACK is received. */
	sctp_chunk_hold(chunk);
     7f4:	80 61 00 2c 	lwz     r3,44(r1)
     7f8:	48 00 00 01 	bl      7f8 <sctp_send_asconf+0xac>
	retval = sctp_primitive_ASCONF(asoc, chunk);
     7fc:	80 61 00 28 	lwz     r3,40(r1)
     800:	80 81 00 2c 	lwz     r4,44(r1)
     804:	48 00 00 01 	bl      804 <sctp_send_asconf+0xb8>
     808:	90 61 00 08 	stw     r3,8(r1)
	if (retval)
     80c:	80 01 00 08 	lwz     r0,8(r1)
     810:	2f 80 00 00 	cmpwi   cr7,r0,0
     814:	41 9e 00 10 	beq-    cr7,824 <sctp_send_asconf+0xd8>
		sctp_chunk_free(chunk);
     818:	80 61 00 2c 	lwz     r3,44(r1)
     81c:	48 00 00 01 	bl      81c <sctp_send_asconf+0xd0>
     820:	48 00 00 14 	b       834 <sctp_send_asconf+0xe8>
	else
		asoc->addip_last_asconf = chunk;
     824:	80 01 00 28 	lwz     r0,40(r1)
     828:	81 21 00 2c 	lwz     r9,44(r1)
     82c:	7c 0b 03 78 	mr      r11,r0
     830:	91 2b 04 18 	stw     r9,1048(r11)

out:
	return retval;
     834:	80 01 00 08 	lwz     r0,8(r1)
}
     838:	7c 03 03 78 	mr      r3,r0
     83c:	80 01 00 34 	lwz     r0,52(r1)
     840:	7c 08 03 a6 	mtlr    r0
     844:	38 21 00 30 	addi    r1,r1,48
     848:	4e 80 00 20 	blr

0000084c <sctp_bindx_add>:
 * ones that were added will be removed.
 *
 * Only sctp_setsockopt_bindx() is supposed to call this function.
 */
static int sctp_bindx_add(struct sock *sk, struct sockaddr *addrs, int addrcnt)
{
     84c:	94 21 ff c0 	stwu    r1,-64(r1)
     850:	7c 08 02 a6 	mflr    r0
     854:	90 01 00 44 	stw     r0,68(r1)
     858:	90 61 00 28 	stw     r3,40(r1)
     85c:	90 81 00 2c 	stw     r4,44(r1)
     860:	90 a1 00 30 	stw     r5,48(r1)
	int cnt;
	int retval = 0;
     864:	38 00 00 00 	li      r0,0
     868:	90 01 00 0c 	stw     r0,12(r1)
	struct sctp_af *af;

	SCTP_DEBUG_PRINTK("sctp_bindx_add (sk: %p, addrs: %p, addrcnt: %d)\n",
			  sk, addrs, addrcnt);

	addr_buf = addrs;
     86c:	80 01 00 2c 	lwz     r0,44(r1)
     870:	90 01 00 10 	stw     r0,16(r1)
	for (cnt = 0; cnt < addrcnt; cnt++) {
     874:	38 00 00 00 	li      r0,0
     878:	90 01 00 08 	stw     r0,8(r1)
     87c:	48 00 00 b4 	b       930 <sctp_bindx_add+0xe4>
		/* The list may contain either IPv4 or IPv6 address;
		 * determine the address length for walking thru the list.
		 */
		sa_addr = (struct sockaddr *)addr_buf;
     880:	80 01 00 10 	lwz     r0,16(r1)
     884:	90 01 00 14 	stw     r0,20(r1)
		af = sctp_get_af_specific(sa_addr->sa_family);
     888:	80 01 00 14 	lwz     r0,20(r1)
     88c:	7c 09 03 78 	mr      r9,r0
     890:	a0 09 00 00 	lhz     r0,0(r9)
     894:	54 00 04 3e 	clrlwi  r0,r0,16
     898:	7c 03 03 78 	mr      r3,r0
     89c:	48 00 00 01 	bl      89c <sctp_bindx_add+0x50>
     8a0:	90 61 00 18 	stw     r3,24(r1)
		if (!af) {
     8a4:	80 01 00 18 	lwz     r0,24(r1)
     8a8:	2f 80 00 00 	cmpwi   cr7,r0,0
     8ac:	40 9e 00 10 	bne-    cr7,8bc <sctp_bindx_add+0x70>
			retval = -EINVAL;
     8b0:	38 00 ff ea 	li      r0,-22
     8b4:	90 01 00 0c 	stw     r0,12(r1)
			goto err_bindx_add;
     8b8:	48 00 00 3c 	b       8f4 <sctp_bindx_add+0xa8>
		}

		retval = sctp_do_bind(sk, (union sctp_addr *)sa_addr,
				      af->sockaddr_len);
     8bc:	80 01 00 18 	lwz     r0,24(r1)
		if (!af) {
			retval = -EINVAL;
			goto err_bindx_add;
		}

		retval = sctp_do_bind(sk, (union sctp_addr *)sa_addr,
     8c0:	7c 09 03 78 	mr      r9,r0
     8c4:	80 09 00 6c 	lwz     r0,108(r9)
     8c8:	80 61 00 28 	lwz     r3,40(r1)
     8cc:	80 81 00 14 	lwz     r4,20(r1)
     8d0:	7c 05 03 78 	mr      r5,r0
     8d4:	4b ff fc 09 	bl      4dc <sctp_do_bind>
     8d8:	90 61 00 0c 	stw     r3,12(r1)
				      af->sockaddr_len);

		addr_buf += af->sockaddr_len;
     8dc:	80 01 00 18 	lwz     r0,24(r1)
     8e0:	7c 09 03 78 	mr      r9,r0
     8e4:	80 09 00 6c 	lwz     r0,108(r9)
     8e8:	81 21 00 10 	lwz     r9,16(r1)
     8ec:	7c 09 02 14 	add     r0,r9,r0
     8f0:	90 01 00 10 	stw     r0,16(r1)

err_bindx_add:
		if (retval < 0) {
     8f4:	80 01 00 0c 	lwz     r0,12(r1)
     8f8:	2f 80 00 00 	cmpwi   cr7,r0,0
     8fc:	40 9c 00 28 	bge-    cr7,924 <sctp_bindx_add+0xd8>
			/* Failed. Cleanup the ones that have been added */
			if (cnt > 0)
     900:	80 01 00 08 	lwz     r0,8(r1)
     904:	2f 80 00 00 	cmpwi   cr7,r0,0
     908:	40 9d 00 14 	ble-    cr7,91c <sctp_bindx_add+0xd0>
				sctp_bindx_rem(sk, addrs, cnt);
     90c:	80 61 00 28 	lwz     r3,40(r1)
     910:	80 81 00 2c 	lwz     r4,44(r1)
     914:	80 a1 00 08 	lwz     r5,8(r1)
     918:	48 00 03 ad 	bl      cc4 <sctp_bindx_rem>
			return retval;
     91c:	80 01 00 0c 	lwz     r0,12(r1)
     920:	48 00 00 24 	b       944 <sctp_bindx_add+0xf8>

	SCTP_DEBUG_PRINTK("sctp_bindx_add (sk: %p, addrs: %p, addrcnt: %d)\n",
			  sk, addrs, addrcnt);

	addr_buf = addrs;
	for (cnt = 0; cnt < addrcnt; cnt++) {
     924:	80 01 00 08 	lwz     r0,8(r1)
     928:	30 00 00 01 	addic   r0,r0,1
     92c:	90 01 00 08 	stw     r0,8(r1)
     930:	81 21 00 08 	lwz     r9,8(r1)
     934:	80 01 00 30 	lwz     r0,48(r1)
     938:	7f 89 00 00 	cmpw    cr7,r9,r0
     93c:	41 9c ff 44 	blt+    cr7,880 <sctp_bindx_add+0x34>
				sctp_bindx_rem(sk, addrs, cnt);
			return retval;
		}
	}

	return retval;
     940:	80 01 00 0c 	lwz     r0,12(r1)
}
     944:	7c 03 03 78 	mr      r3,r0
     948:	80 01 00 44 	lwz     r0,68(r1)
     94c:	7c 08 03 a6 	mtlr    r0
     950:	38 21 00 40 	addi    r1,r1,64
     954:	4e 80 00 20 	blr

00000958 <sctp_send_asconf_add_ip>:
 * Only sctp_setsockopt_bindx() is supposed to call this function.
 */
static int sctp_send_asconf_add_ip(struct sock		*sk,
				   struct sockaddr	*addrs,
				   int 			addrcnt)
{
     958:	94 21 ff 70 	stwu    r1,-144(r1)
     95c:	7c 08 02 a6 	mflr    r0
     960:	90 01 00 94 	stw     r0,148(r1)
     964:	90 61 00 78 	stw     r3,120(r1)
     968:	90 81 00 7c 	stw     r4,124(r1)
     96c:	90 a1 00 80 	stw     r5,128(r1)
	union sctp_addr			saveaddr;
	void				*addr_buf;
	struct sctp_af			*af;
	struct list_head		*p;
	int 				i;
	int 				retval = 0;
     970:	38 00 00 00 	li      r0,0
     974:	90 01 00 14 	stw     r0,20(r1)

	if (!sctp_addip_enable)
     978:	3c 00 00 00 	lis     r0,0
     97c:	30 00 00 00 	addic   r0,r0,0
     980:	7c 09 03 78 	mr      r9,r0
     984:	80 09 00 68 	lwz     r0,104(r9)
     988:	2f 80 00 00 	cmpwi   cr7,r0,0
     98c:	40 9e 00 0c 	bne-    cr7,998 <sctp_send_asconf_add_ip+0x40>
		return retval;
     990:	80 01 00 14 	lwz     r0,20(r1)
     994:	48 00 03 1c 	b       cb0 <sctp_send_asconf_add_ip+0x358>
     998:	80 01 00 78 	lwz     r0,120(r1)
     99c:	90 01 00 44 	stw     r0,68(r1)
     9a0:	80 01 00 44 	lwz     r0,68(r1)

	sp = sctp_sk(sk);
     9a4:	90 01 00 18 	stw     r0,24(r1)
	ep = sp->ep;
     9a8:	80 01 00 18 	lwz     r0,24(r1)
     9ac:	7c 09 03 78 	mr      r9,r0
     9b0:	80 09 01 d4 	lwz     r0,468(r9)
     9b4:	90 01 00 1c 	stw     r0,28(r1)

	SCTP_DEBUG_PRINTK("%s: (sk: %p, addrs: %p, addrcnt: %d)\n",
			  __func__, sk, addrs, addrcnt);

	list_for_each_entry(asoc, &ep->asocs, asocs) {
     9b8:	80 01 00 1c 	lwz     r0,28(r1)
     9bc:	7c 09 03 78 	mr      r9,r0
     9c0:	80 09 00 4c 	lwz     r0,76(r9)
     9c4:	90 01 00 20 	stw     r0,32(r1)
     9c8:	80 01 00 20 	lwz     r0,32(r1)
     9cc:	30 00 ff b4 	addic   r0,r0,-76
     9d0:	90 01 00 08 	stw     r0,8(r1)
     9d4:	48 00 02 90 	b       c64 <sctp_send_asconf_add_ip+0x30c>

		if (!asoc->peer.asconf_capable)
     9d8:	80 01 00 08 	lwz     r0,8(r1)
     9dc:	7c 09 03 78 	mr      r9,r0
     9e0:	80 09 01 84 	lwz     r0,388(r9)
     9e4:	54 00 01 08 	rlwinm  r0,r0,0,4,4
     9e8:	2f 80 00 00 	cmpwi   cr7,r0,0
     9ec:	41 9e 02 40 	beq-    cr7,c2c <sctp_send_asconf_add_ip+0x2d4>
			continue;

		if (asoc->peer.addip_disabled_mask & SCTP_PARAM_ADD_IP)
     9f0:	80 01 00 08 	lwz     r0,8(r1)
     9f4:	7c 09 03 78 	mr      r9,r0
     9f8:	a0 09 01 8c 	lhz     r0,396(r9)
     9fc:	54 00 04 3e 	clrlwi  r0,r0,16
     a00:	70 00 c0 01 	andi.   r0,r0,49153
     a04:	2f 80 00 00 	cmpwi   cr7,r0,0
     a08:	40 9e 02 2c 	bne-    cr7,c34 <sctp_send_asconf_add_ip+0x2dc>
			continue;
     a0c:	80 01 00 08 	lwz     r0,8(r1)
     a10:	90 01 00 48 	stw     r0,72(r1)
     a14:	38 00 00 04 	li      r0,4
     a18:	90 01 00 4c 	stw     r0,76(r1)
/* Is the association in this state? */
#define sctp_state(asoc, state) __sctp_state((asoc), (SCTP_STATE_##state))
static inline int __sctp_state(const struct sctp_association *asoc,
			       sctp_state_t state)
{
	return asoc->state == state;
     a1c:	80 01 00 48 	lwz     r0,72(r1)
     a20:	7c 09 03 78 	mr      r9,r0
     a24:	80 09 01 b8 	lwz     r0,440(r9)
     a28:	81 21 00 4c 	lwz     r9,76(r1)
     a2c:	7f 89 00 00 	cmpw    cr7,r9,r0
     a30:	7c 00 00 26 	mfcr    r0
     a34:	54 00 ff fe 	rlwinm  r0,r0,31,31,31

		if (!sctp_state(asoc, ESTABLISHED))
     a38:	2f 80 00 00 	cmpwi   cr7,r0,0
     a3c:	41 9e 02 00 	beq-    cr7,c3c <sctp_send_asconf_add_ip+0x2e4>
		/* Check if any address in the packed array of addresses is
		 * in the bind address list of the association. If so,
		 * do not send the asconf chunk to its peer, but continue with
		 * other associations.
		 */
		addr_buf = addrs;
     a40:	80 01 00 7c 	lwz     r0,124(r1)
     a44:	90 01 00 0c 	stw     r0,12(r1)
		for (i = 0; i < addrcnt; i++) {
     a48:	38 00 00 00 	li      r0,0
     a4c:	90 01 00 10 	stw     r0,16(r1)
     a50:	48 00 00 7c 	b       acc <sctp_send_asconf_add_ip+0x174>
			addr = (union sctp_addr *)addr_buf;
     a54:	80 01 00 0c 	lwz     r0,12(r1)
     a58:	90 01 00 24 	stw     r0,36(r1)
			af = sctp_get_af_specific(addr->v4.sin_family);
     a5c:	80 01 00 24 	lwz     r0,36(r1)
     a60:	7c 09 03 78 	mr      r9,r0
     a64:	a0 09 00 00 	lhz     r0,0(r9)
     a68:	54 00 04 3e 	clrlwi  r0,r0,16
     a6c:	7c 03 03 78 	mr      r3,r0
     a70:	48 00 00 01 	bl      a70 <sctp_send_asconf_add_ip+0x118>
     a74:	90 61 00 28 	stw     r3,40(r1)
			if (!af) {
     a78:	80 01 00 28 	lwz     r0,40(r1)
     a7c:	2f 80 00 00 	cmpwi   cr7,r0,0
     a80:	40 9e 00 10 	bne-    cr7,a90 <sctp_send_asconf_add_ip+0x138>
				retval = -EINVAL;
     a84:	38 00 ff ea 	li      r0,-22
     a88:	90 01 00 14 	stw     r0,20(r1)
				goto out;
     a8c:	48 00 02 20 	b       cac <sctp_send_asconf_add_ip+0x354>
			}

			if (sctp_assoc_lookup_laddr(asoc, addr))
     a90:	80 61 00 08 	lwz     r3,8(r1)
     a94:	80 81 00 24 	lwz     r4,36(r1)
     a98:	48 00 00 01 	bl      a98 <sctp_send_asconf_add_ip+0x140>
     a9c:	7c 60 1b 78 	mr      r0,r3
     aa0:	2f 80 00 00 	cmpwi   cr7,r0,0
     aa4:	40 9e 00 3c 	bne-    cr7,ae0 <sctp_send_asconf_add_ip+0x188>
				break;

			addr_buf += af->sockaddr_len;
     aa8:	80 01 00 28 	lwz     r0,40(r1)
     aac:	7c 09 03 78 	mr      r9,r0
     ab0:	80 09 00 6c 	lwz     r0,108(r9)
     ab4:	81 21 00 0c 	lwz     r9,12(r1)
     ab8:	7c 09 02 14 	add     r0,r9,r0
     abc:	90 01 00 0c 	stw     r0,12(r1)
		 * in the bind address list of the association. If so,
		 * do not send the asconf chunk to its peer, but continue with
		 * other associations.
		 */
		addr_buf = addrs;
		for (i = 0; i < addrcnt; i++) {
     ac0:	80 01 00 10 	lwz     r0,16(r1)
     ac4:	30 00 00 01 	addic   r0,r0,1
     ac8:	90 01 00 10 	stw     r0,16(r1)
     acc:	81 21 00 10 	lwz     r9,16(r1)
     ad0:	80 01 00 80 	lwz     r0,128(r1)
     ad4:	7f 89 00 00 	cmpw    cr7,r9,r0
     ad8:	41 9c ff 7c 	blt+    cr7,a54 <sctp_send_asconf_add_ip+0xfc>
     adc:	48 00 00 08 	b       ae4 <sctp_send_asconf_add_ip+0x18c>
				retval = -EINVAL;
				goto out;
			}

			if (sctp_assoc_lookup_laddr(asoc, addr))
				break;
     ae0:	60 00 00 00 	nop

			addr_buf += af->sockaddr_len;
		}
		if (i < addrcnt)
     ae4:	81 21 00 10 	lwz     r9,16(r1)
     ae8:	80 01 00 80 	lwz     r0,128(r1)
     aec:	7f 89 00 00 	cmpw    cr7,r9,r0
     af0:	41 9c 01 54 	blt-    cr7,c44 <sctp_send_asconf_add_ip+0x2ec>
			continue;

		/* Use the first valid address in bind addr list of
		 * association as Address Parameter of ASCONF CHUNK.
		 */
		bp = &asoc->base.bind_addr;
     af4:	80 01 00 08 	lwz     r0,8(r1)
     af8:	30 00 00 3c 	addic   r0,r0,60
     afc:	90 01 00 2c 	stw     r0,44(r1)
		p = bp->address_list.next;
     b00:	80 01 00 2c 	lwz     r0,44(r1)
     b04:	7c 09 03 78 	mr      r9,r0
     b08:	80 09 00 04 	lwz     r0,4(r9)
     b0c:	90 01 00 30 	stw     r0,48(r1)
		laddr = list_entry(p, struct sctp_sockaddr_entry, list);
     b10:	80 01 00 30 	lwz     r0,48(r1)
     b14:	90 01 00 34 	stw     r0,52(r1)
     b18:	80 01 00 34 	lwz     r0,52(r1)
     b1c:	90 01 00 38 	stw     r0,56(r1)
		chunk = sctp_make_asconf_update_ip(asoc, &laddr->a, addrs,
     b20:	80 01 00 38 	lwz     r0,56(r1)
     b24:	30 00 00 10 	addic   r0,r0,16
     b28:	80 61 00 08 	lwz     r3,8(r1)
     b2c:	7c 04 03 78 	mr      r4,r0
     b30:	80 a1 00 7c 	lwz     r5,124(r1)
     b34:	80 c1 00 80 	lwz     r6,128(r1)
     b38:	38 00 00 00 	li      r0,0
     b3c:	60 07 c0 01 	ori     r7,r0,49153
     b40:	48 00 00 01 	bl      b40 <sctp_send_asconf_add_ip+0x1e8>
     b44:	90 61 00 3c 	stw     r3,60(r1)
						   addrcnt, SCTP_PARAM_ADD_IP);
		if (!chunk) {
     b48:	80 01 00 3c 	lwz     r0,60(r1)
     b4c:	2f 80 00 00 	cmpwi   cr7,r0,0
     b50:	40 9e 00 10 	bne-    cr7,b60 <sctp_send_asconf_add_ip+0x208>
			retval = -ENOMEM;
     b54:	38 00 ff f4 	li      r0,-12
     b58:	90 01 00 14 	stw     r0,20(r1)
			goto out;
     b5c:	48 00 01 50 	b       cac <sctp_send_asconf_add_ip+0x354>
		}

		retval = sctp_send_asconf(asoc, chunk);
     b60:	80 61 00 08 	lwz     r3,8(r1)
     b64:	80 81 00 3c 	lwz     r4,60(r1)
     b68:	4b ff fb e5 	bl      74c <sctp_send_asconf>
     b6c:	90 61 00 14 	stw     r3,20(r1)
		if (retval)
     b70:	80 01 00 14 	lwz     r0,20(r1)
     b74:	2f 80 00 00 	cmpwi   cr7,r0,0
     b78:	40 9e 01 30 	bne-    cr7,ca8 <sctp_send_asconf_add_ip+0x350>
			goto out;

		/* Add the new addresses to the bind address list with
		 * use_as_src set to 0.
		 */
		addr_buf = addrs;
     b7c:	80 01 00 7c 	lwz     r0,124(r1)
     b80:	90 01 00 0c 	stw     r0,12(r1)
		for (i = 0; i < addrcnt; i++) {
     b84:	38 00 00 00 	li      r0,0
     b88:	90 01 00 10 	stw     r0,16(r1)
     b8c:	48 00 00 8c 	b       c18 <sctp_send_asconf_add_ip+0x2c0>
			addr = (union sctp_addr *)addr_buf;
     b90:	80 01 00 0c 	lwz     r0,12(r1)
     b94:	90 01 00 24 	stw     r0,36(r1)
			af = sctp_get_af_specific(addr->v4.sin_family);
     b98:	80 01 00 24 	lwz     r0,36(r1)
     b9c:	7c 09 03 78 	mr      r9,r0
     ba0:	a0 09 00 00 	lhz     r0,0(r9)
     ba4:	54 00 04 3e 	clrlwi  r0,r0,16
     ba8:	7c 03 03 78 	mr      r3,r0
     bac:	48 00 00 01 	bl      bac <sctp_send_asconf_add_ip+0x254>
     bb0:	90 61 00 28 	stw     r3,40(r1)
			memcpy(&saveaddr, addr, af->sockaddr_len);
     bb4:	80 01 00 28 	lwz     r0,40(r1)
     bb8:	7c 09 03 78 	mr      r9,r0
     bbc:	80 09 00 6c 	lwz     r0,108(r9)
     bc0:	39 61 00 54 	addi    r11,r1,84
     bc4:	81 21 00 24 	lwz     r9,36(r1)
     bc8:	7d 63 5b 78 	mr      r3,r11
     bcc:	7d 24 4b 78 	mr      r4,r9
     bd0:	7c 05 03 78 	mr      r5,r0
     bd4:	48 00 00 01 	bl      bd4 <sctp_send_asconf_add_ip+0x27c>
			retval = sctp_add_bind_addr(bp, &saveaddr,
     bd8:	38 01 00 54 	addi    r0,r1,84
     bdc:	80 61 00 2c 	lwz     r3,44(r1)
     be0:	7c 04 03 78 	mr      r4,r0
     be4:	38 a0 00 00 	li      r5,0
     be8:	38 c0 00 20 	li      r6,32
     bec:	48 00 00 01 	bl      bec <sctp_send_asconf_add_ip+0x294>
     bf0:	90 61 00 14 	stw     r3,20(r1)
						    SCTP_ADDR_NEW, GFP_ATOMIC);
			addr_buf += af->sockaddr_len;
     bf4:	80 01 00 28 	lwz     r0,40(r1)
     bf8:	7c 09 03 78 	mr      r9,r0
     bfc:	80 09 00 6c 	lwz     r0,108(r9)
     c00:	81 21 00 0c 	lwz     r9,12(r1)
     c04:	7c 09 02 14 	add     r0,r9,r0
     c08:	90 01 00 0c 	stw     r0,12(r1)

		/* Add the new addresses to the bind address list with
		 * use_as_src set to 0.
		 */
		addr_buf = addrs;
		for (i = 0; i < addrcnt; i++) {
     c0c:	80 01 00 10 	lwz     r0,16(r1)
     c10:	30 00 00 01 	addic   r0,r0,1
     c14:	90 01 00 10 	stw     r0,16(r1)
     c18:	81 21 00 10 	lwz     r9,16(r1)
     c1c:	80 01 00 80 	lwz     r0,128(r1)
     c20:	7f 89 00 00 	cmpw    cr7,r9,r0
     c24:	41 9c ff 6c 	blt+    cr7,b90 <sctp_send_asconf_add_ip+0x238>
     c28:	48 00 00 20 	b       c48 <sctp_send_asconf_add_ip+0x2f0>
			  __func__, sk, addrs, addrcnt);

	list_for_each_entry(asoc, &ep->asocs, asocs) {

		if (!asoc->peer.asconf_capable)
			continue;
     c2c:	60 00 00 00 	nop
     c30:	48 00 00 18 	b       c48 <sctp_send_asconf_add_ip+0x2f0>

		if (asoc->peer.addip_disabled_mask & SCTP_PARAM_ADD_IP)
			continue;
     c34:	60 00 00 00 	nop
     c38:	48 00 00 10 	b       c48 <sctp_send_asconf_add_ip+0x2f0>

		if (!sctp_state(asoc, ESTABLISHED))
			continue;
     c3c:	60 00 00 00 	nop
     c40:	48 00 00 08 	b       c48 <sctp_send_asconf_add_ip+0x2f0>
				break;

			addr_buf += af->sockaddr_len;
		}
		if (i < addrcnt)
			continue;
     c44:	60 00 00 00 	nop
	ep = sp->ep;

	SCTP_DEBUG_PRINTK("%s: (sk: %p, addrs: %p, addrcnt: %d)\n",
			  __func__, sk, addrs, addrcnt);

	list_for_each_entry(asoc, &ep->asocs, asocs) {
     c48:	80 01 00 08 	lwz     r0,8(r1)
     c4c:	7c 09 03 78 	mr      r9,r0
     c50:	80 09 00 4c 	lwz     r0,76(r9)
     c54:	90 01 00 40 	stw     r0,64(r1)
     c58:	80 01 00 40 	lwz     r0,64(r1)
     c5c:	30 00 ff b4 	addic   r0,r0,-76
     c60:	90 01 00 08 	stw     r0,8(r1)
     c64:	80 01 00 08 	lwz     r0,8(r1)
     c68:	7c 09 03 78 	mr      r9,r0
     c6c:	80 09 00 4c 	lwz     r0,76(r9)
     c70:	90 01 00 50 	stw     r0,80(r1)
#define ARCH_HAS_PREFETCHW
#define ARCH_HAS_SPINLOCK_PREFETCH

static inline void prefetch(const void *x)
{
	if (unlikely(!x))
     c74:	80 01 00 50 	lwz     r0,80(r1)
     c78:	2f 80 00 00 	cmpwi   cr7,r0,0
     c7c:	7c 00 00 26 	mfcr    r0
     c80:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
     c84:	2f 80 00 00 	cmpwi   cr7,r0,0
     c88:	40 9e 00 0c 	bne-    cr7,c94 <sctp_send_asconf_add_ip+0x33c>
		return;

	__asm__ __volatile__ ("dcbt 0,%0" : : "r" (x));
     c8c:	80 01 00 50 	lwz     r0,80(r1)
     c90:	7c 00 02 2c 	dcbt    r0,r0
     c94:	81 21 00 08 	lwz     r9,8(r1)
     c98:	80 01 00 1c 	lwz     r0,28(r1)
     c9c:	7f 89 00 00 	cmpw    cr7,r9,r0
     ca0:	40 9e fd 38 	bne+    cr7,9d8 <sctp_send_asconf_add_ip+0x80>
     ca4:	48 00 00 08 	b       cac <sctp_send_asconf_add_ip+0x354>
			goto out;
		}

		retval = sctp_send_asconf(asoc, chunk);
		if (retval)
			goto out;
     ca8:	60 00 00 00 	nop
			addr_buf += af->sockaddr_len;
		}
	}

out:
	return retval;
     cac:	80 01 00 14 	lwz     r0,20(r1)
}
     cb0:	7c 03 03 78 	mr      r3,r0
     cb4:	80 01 00 94 	lwz     r0,148(r1)
     cb8:	7c 08 03 a6 	mtlr    r0
     cbc:	38 21 00 90 	addi    r1,r1,144
     cc0:	4e 80 00 20 	blr

00000cc4 <sctp_bindx_rem>:
 * available, the operation will return -EBUSY.
 *
 * Only sctp_setsockopt_bindx() is supposed to call this function.
 */
static int sctp_bindx_rem(struct sock *sk, struct sockaddr *addrs, int addrcnt)
{
     cc4:	94 21 ff b0 	stwu    r1,-80(r1)
     cc8:	7c 08 02 a6 	mflr    r0
     ccc:	90 01 00 54 	stw     r0,84(r1)
     cd0:	90 61 00 38 	stw     r3,56(r1)
     cd4:	90 81 00 3c 	stw     r4,60(r1)
     cd8:	90 a1 00 40 	stw     r5,64(r1)
     cdc:	80 01 00 38 	lwz     r0,56(r1)
     ce0:	90 01 00 28 	stw     r0,40(r1)
     ce4:	80 01 00 28 	lwz     r0,40(r1)
	struct sctp_sock *sp = sctp_sk(sk);
     ce8:	90 01 00 14 	stw     r0,20(r1)
	struct sctp_endpoint *ep = sp->ep;
     cec:	80 01 00 14 	lwz     r0,20(r1)
     cf0:	7c 09 03 78 	mr      r9,r0
     cf4:	80 09 01 d4 	lwz     r0,468(r9)
     cf8:	90 01 00 18 	stw     r0,24(r1)
	int cnt;
	struct sctp_bind_addr *bp = &ep->base.bind_addr;
     cfc:	80 01 00 18 	lwz     r0,24(r1)
     d00:	30 00 00 3c 	addic   r0,r0,60
     d04:	90 01 00 1c 	stw     r0,28(r1)
	int retval = 0;
     d08:	38 00 00 00 	li      r0,0
     d0c:	90 01 00 0c 	stw     r0,12(r1)
	struct sctp_af *af;

	SCTP_DEBUG_PRINTK("sctp_bindx_rem (sk: %p, addrs: %p, addrcnt: %d)\n",
			  sk, addrs, addrcnt);

	addr_buf = addrs;
     d10:	80 01 00 3c 	lwz     r0,60(r1)
     d14:	90 01 00 10 	stw     r0,16(r1)
	for (cnt = 0; cnt < addrcnt; cnt++) {
     d18:	38 00 00 00 	li      r0,0
     d1c:	90 01 00 08 	stw     r0,8(r1)
     d20:	48 00 01 a4 	b       ec4 <sctp_bindx_rem+0x200>
		/* If the bind address list is empty or if there is only one
		 * bind address, there is nothing more to be removed (we need
		 * at least one address here).
		 */
		if (list_empty(&bp->address_list) ||
     d24:	80 01 00 1c 	lwz     r0,28(r1)
     d28:	30 00 00 04 	addic   r0,r0,4
     d2c:	90 01 00 2c 	stw     r0,44(r1)
 * list_empty - tests whether a list is empty
 * @head: the list to test.
 */
static inline int list_empty(const struct list_head *head)
{
	return head->next == head;
     d30:	80 01 00 2c 	lwz     r0,44(r1)
     d34:	7c 0b 03 78 	mr      r11,r0
     d38:	80 0b 00 00 	lwz     r0,0(r11)
     d3c:	81 21 00 2c 	lwz     r9,44(r1)
     d40:	7f 89 00 00 	cmpw    cr7,r9,r0
     d44:	7c 00 00 26 	mfcr    r0
     d48:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
     d4c:	2f 80 00 00 	cmpwi   cr7,r0,0
     d50:	40 9e 00 5c 	bne-    cr7,dac <sctp_bindx_rem+0xe8>
		    (sctp_list_single_entry(&bp->address_list))) {
     d54:	80 01 00 1c 	lwz     r0,28(r1)
     d58:	30 00 00 04 	addic   r0,r0,4
     d5c:	90 01 00 30 	stw     r0,48(r1)
}

/* Tests if the list has one and only one entry. */
static inline int sctp_list_single_entry(struct list_head *head)
{
	return (head->next != head) && (head->next == head->prev);
     d60:	80 01 00 30 	lwz     r0,48(r1)
     d64:	7c 09 03 78 	mr      r9,r0
     d68:	80 09 00 00 	lwz     r0,0(r9)
     d6c:	81 21 00 30 	lwz     r9,48(r1)
     d70:	7f 89 00 00 	cmpw    cr7,r9,r0
     d74:	41 9e 00 2c 	beq-    cr7,da0 <sctp_bindx_rem+0xdc>
     d78:	80 01 00 30 	lwz     r0,48(r1)
     d7c:	7c 0b 03 78 	mr      r11,r0
     d80:	81 2b 00 00 	lwz     r9,0(r11)
     d84:	80 01 00 30 	lwz     r0,48(r1)
     d88:	7c 0b 03 78 	mr      r11,r0
     d8c:	80 0b 00 04 	lwz     r0,4(r11)
     d90:	7f 89 00 00 	cmpw    cr7,r9,r0
     d94:	40 9e 00 0c 	bne-    cr7,da0 <sctp_bindx_rem+0xdc>
     d98:	38 00 00 01 	li      r0,1
     d9c:	48 00 00 08 	b       da4 <sctp_bindx_rem+0xe0>
     da0:	38 00 00 00 	li      r0,0
	for (cnt = 0; cnt < addrcnt; cnt++) {
		/* If the bind address list is empty or if there is only one
		 * bind address, there is nothing more to be removed (we need
		 * at least one address here).
		 */
		if (list_empty(&bp->address_list) ||
     da4:	2f 80 00 00 	cmpwi   cr7,r0,0
     da8:	41 9e 00 10 	beq-    cr7,db8 <sctp_bindx_rem+0xf4>
		    (sctp_list_single_entry(&bp->address_list))) {
			retval = -EBUSY;
     dac:	38 00 ff f0 	li      r0,-16
     db0:	90 01 00 0c 	stw     r0,12(r1)
			goto err_bindx_rem;
     db4:	48 00 00 d4 	b       e88 <sctp_bindx_rem+0x1c4>
		}

		sa_addr = (union sctp_addr *)addr_buf;
     db8:	80 01 00 10 	lwz     r0,16(r1)
     dbc:	90 01 00 20 	stw     r0,32(r1)
		af = sctp_get_af_specific(sa_addr->sa.sa_family);
     dc0:	80 01 00 20 	lwz     r0,32(r1)
     dc4:	7c 09 03 78 	mr      r9,r0
     dc8:	a0 09 00 00 	lhz     r0,0(r9)
     dcc:	54 00 04 3e 	clrlwi  r0,r0,16
     dd0:	7c 03 03 78 	mr      r3,r0
     dd4:	48 00 00 01 	bl      dd4 <sctp_bindx_rem+0x110>
     dd8:	90 61 00 24 	stw     r3,36(r1)
		if (!af) {
     ddc:	80 01 00 24 	lwz     r0,36(r1)
     de0:	2f 80 00 00 	cmpwi   cr7,r0,0
     de4:	40 9e 00 10 	bne-    cr7,df4 <sctp_bindx_rem+0x130>
			retval = -EINVAL;
     de8:	38 00 ff ea 	li      r0,-22
     dec:	90 01 00 0c 	stw     r0,12(r1)
			goto err_bindx_rem;
     df0:	48 00 00 98 	b       e88 <sctp_bindx_rem+0x1c4>
		}

		if (!af->addr_valid(sa_addr, sp, NULL)) {
     df4:	80 01 00 24 	lwz     r0,36(r1)
     df8:	7c 0b 03 78 	mr      r11,r0
     dfc:	80 0b 00 44 	lwz     r0,68(r11)
     e00:	80 61 00 20 	lwz     r3,32(r1)
     e04:	80 81 00 14 	lwz     r4,20(r1)
     e08:	38 a0 00 00 	li      r5,0
     e0c:	7c 09 03 a6 	mtctr   r0
     e10:	4e 80 04 21 	bctrl
     e14:	7c 60 1b 78 	mr      r0,r3
     e18:	2f 80 00 00 	cmpwi   cr7,r0,0
     e1c:	40 9e 00 10 	bne-    cr7,e2c <sctp_bindx_rem+0x168>
			retval = -EADDRNOTAVAIL;
     e20:	38 00 ff 9d 	li      r0,-99
     e24:	90 01 00 0c 	stw     r0,12(r1)
			goto err_bindx_rem;
     e28:	48 00 00 60 	b       e88 <sctp_bindx_rem+0x1c4>
		}

		if (sa_addr->v4.sin_port != htons(bp->port)) {
     e2c:	80 01 00 20 	lwz     r0,32(r1)
     e30:	7c 09 03 78 	mr      r9,r0
     e34:	a0 09 00 02 	lhz     r0,2(r9)
     e38:	54 09 04 3e 	clrlwi  r9,r0,16
     e3c:	80 01 00 1c 	lwz     r0,28(r1)
     e40:	7c 0b 03 78 	mr      r11,r0
     e44:	a0 0b 00 00 	lhz     r0,0(r11)
     e48:	54 00 04 3e 	clrlwi  r0,r0,16
     e4c:	7f 89 00 00 	cmpw    cr7,r9,r0
     e50:	41 9e 00 10 	beq-    cr7,e60 <sctp_bindx_rem+0x19c>
			retval = -EINVAL;
     e54:	38 00 ff ea 	li      r0,-22
     e58:	90 01 00 0c 	stw     r0,12(r1)
			goto err_bindx_rem;
     e5c:	48 00 00 2c 	b       e88 <sctp_bindx_rem+0x1c4>
		 * be removed. This is something which needs to be looked into
		 * when we are fixing the outstanding issues with multi-homing
		 * socket routing and failover schemes. Refer to comments in
		 * sctp_do_bind(). -daisy
		 */
		retval = sctp_del_bind_addr(bp, sa_addr);
     e60:	80 61 00 1c 	lwz     r3,28(r1)
     e64:	80 81 00 20 	lwz     r4,32(r1)
     e68:	48 00 00 01 	bl      e68 <sctp_bindx_rem+0x1a4>
     e6c:	90 61 00 0c 	stw     r3,12(r1)

		addr_buf += af->sockaddr_len;
     e70:	80 01 00 24 	lwz     r0,36(r1)
     e74:	7c 09 03 78 	mr      r9,r0
     e78:	80 09 00 6c 	lwz     r0,108(r9)
     e7c:	81 21 00 10 	lwz     r9,16(r1)
     e80:	7c 09 02 14 	add     r0,r9,r0
     e84:	90 01 00 10 	stw     r0,16(r1)
err_bindx_rem:
		if (retval < 0) {
     e88:	80 01 00 0c 	lwz     r0,12(r1)
     e8c:	2f 80 00 00 	cmpwi   cr7,r0,0
     e90:	40 9c 00 28 	bge-    cr7,eb8 <sctp_bindx_rem+0x1f4>
			/* Failed. Add the ones that has been removed back */
			if (cnt > 0)
     e94:	80 01 00 08 	lwz     r0,8(r1)
     e98:	2f 80 00 00 	cmpwi   cr7,r0,0
     e9c:	40 9d 00 14 	ble-    cr7,eb0 <sctp_bindx_rem+0x1ec>
				sctp_bindx_add(sk, addrs, cnt);
     ea0:	80 61 00 38 	lwz     r3,56(r1)
     ea4:	80 81 00 3c 	lwz     r4,60(r1)
     ea8:	80 a1 00 08 	lwz     r5,8(r1)
     eac:	4b ff f9 a1 	bl      84c <sctp_bindx_add>
			return retval;
     eb0:	80 01 00 0c 	lwz     r0,12(r1)
     eb4:	48 00 00 24 	b       ed8 <sctp_bindx_rem+0x214>

	SCTP_DEBUG_PRINTK("sctp_bindx_rem (sk: %p, addrs: %p, addrcnt: %d)\n",
			  sk, addrs, addrcnt);

	addr_buf = addrs;
	for (cnt = 0; cnt < addrcnt; cnt++) {
     eb8:	80 01 00 08 	lwz     r0,8(r1)
     ebc:	30 00 00 01 	addic   r0,r0,1
     ec0:	90 01 00 08 	stw     r0,8(r1)
     ec4:	81 21 00 08 	lwz     r9,8(r1)
     ec8:	80 01 00 40 	lwz     r0,64(r1)
     ecc:	7f 89 00 00 	cmpw    cr7,r9,r0
     ed0:	41 9c fe 54 	blt+    cr7,d24 <sctp_bindx_rem+0x60>
				sctp_bindx_add(sk, addrs, cnt);
			return retval;
		}
	}

	return retval;
     ed4:	80 01 00 0c 	lwz     r0,12(r1)
}
     ed8:	7c 03 03 78 	mr      r3,r0
     edc:	80 01 00 54 	lwz     r0,84(r1)
     ee0:	7c 08 03 a6 	mtlr    r0
     ee4:	38 21 00 50 	addi    r1,r1,80
     ee8:	4e 80 00 20 	blr

00000eec <sctp_send_asconf_del_ip>:
 * Only sctp_setsockopt_bindx() is supposed to call this function.
 */
static int sctp_send_asconf_del_ip(struct sock		*sk,
				   struct sockaddr	*addrs,
				   int			addrcnt)
{
     eec:	94 21 ff 70 	stwu    r1,-144(r1)
     ef0:	7c 08 02 a6 	mflr    r0
     ef4:	90 01 00 94 	stw     r0,148(r1)
     ef8:	90 61 00 78 	stw     r3,120(r1)
     efc:	90 81 00 7c 	stw     r4,124(r1)
     f00:	90 a1 00 80 	stw     r5,128(r1)
	union sctp_addr		*laddr;
	void			*addr_buf;
	struct sctp_af		*af;
	struct sctp_sockaddr_entry *saddr;
	int 			i;
	int 			retval = 0;
     f04:	38 00 00 00 	li      r0,0
     f08:	90 01 00 1c 	stw     r0,28(r1)

	if (!sctp_addip_enable)
     f0c:	3c 00 00 00 	lis     r0,0
     f10:	30 00 00 00 	addic   r0,r0,0
     f14:	7c 09 03 78 	mr      r9,r0
     f18:	80 09 00 68 	lwz     r0,104(r9)
     f1c:	2f 80 00 00 	cmpwi   cr7,r0,0
     f20:	40 9e 00 0c 	bne-    cr7,f2c <sctp_send_asconf_del_ip+0x40>
		return retval;
     f24:	80 01 00 1c 	lwz     r0,28(r1)
     f28:	48 00 04 24 	b       134c <sctp_send_asconf_del_ip+0x460>
     f2c:	80 01 00 78 	lwz     r0,120(r1)
     f30:	90 01 00 50 	stw     r0,80(r1)
     f34:	80 01 00 50 	lwz     r0,80(r1)

	sp = sctp_sk(sk);
     f38:	90 01 00 20 	stw     r0,32(r1)
	ep = sp->ep;
     f3c:	80 01 00 20 	lwz     r0,32(r1)
     f40:	7c 0b 03 78 	mr      r11,r0
     f44:	80 0b 01 d4 	lwz     r0,468(r11)
     f48:	90 01 00 24 	stw     r0,36(r1)

	SCTP_DEBUG_PRINTK("%s: (sk: %p, addrs: %p, addrcnt: %d)\n",
			  __func__, sk, addrs, addrcnt);

	list_for_each_entry(asoc, &ep->asocs, asocs) {
     f4c:	80 01 00 24 	lwz     r0,36(r1)
     f50:	7c 09 03 78 	mr      r9,r0
     f54:	80 09 00 4c 	lwz     r0,76(r9)
     f58:	90 01 00 28 	stw     r0,40(r1)
     f5c:	80 01 00 28 	lwz     r0,40(r1)
     f60:	30 00 ff b4 	addic   r0,r0,-76
     f64:	90 01 00 08 	stw     r0,8(r1)
     f68:	48 00 03 a0 	b       1308 <sctp_send_asconf_del_ip+0x41c>

		if (!asoc->peer.asconf_capable)
     f6c:	80 01 00 08 	lwz     r0,8(r1)
     f70:	7c 0b 03 78 	mr      r11,r0
     f74:	80 0b 01 84 	lwz     r0,388(r11)
     f78:	54 00 01 08 	rlwinm  r0,r0,0,4,4
     f7c:	2f 80 00 00 	cmpwi   cr7,r0,0
     f80:	41 9e 03 48 	beq-    cr7,12c8 <sctp_send_asconf_del_ip+0x3dc>
			continue;

		if (asoc->peer.addip_disabled_mask & SCTP_PARAM_DEL_IP)
     f84:	80 01 00 08 	lwz     r0,8(r1)
     f88:	7c 09 03 78 	mr      r9,r0
     f8c:	a0 09 01 8c 	lhz     r0,396(r9)
     f90:	54 00 04 3e 	clrlwi  r0,r0,16
     f94:	70 00 c0 02 	andi.   r0,r0,49154
     f98:	2f 80 00 00 	cmpwi   cr7,r0,0
     f9c:	40 9e 03 34 	bne-    cr7,12d0 <sctp_send_asconf_del_ip+0x3e4>
			continue;
     fa0:	80 01 00 08 	lwz     r0,8(r1)
     fa4:	90 01 00 54 	stw     r0,84(r1)
     fa8:	38 00 00 04 	li      r0,4
     fac:	90 01 00 58 	stw     r0,88(r1)
/* Is the association in this state? */
#define sctp_state(asoc, state) __sctp_state((asoc), (SCTP_STATE_##state))
static inline int __sctp_state(const struct sctp_association *asoc,
			       sctp_state_t state)
{
	return asoc->state == state;
     fb0:	80 01 00 54 	lwz     r0,84(r1)
     fb4:	7c 09 03 78 	mr      r9,r0
     fb8:	80 09 01 b8 	lwz     r0,440(r9)
     fbc:	81 21 00 58 	lwz     r9,88(r1)
     fc0:	7f 89 00 00 	cmpw    cr7,r9,r0
     fc4:	7c 00 00 26 	mfcr    r0
     fc8:	54 00 ff fe 	rlwinm  r0,r0,31,31,31

		if (!sctp_state(asoc, ESTABLISHED))
     fcc:	2f 80 00 00 	cmpwi   cr7,r0,0
     fd0:	41 9e 03 08 	beq-    cr7,12d8 <sctp_send_asconf_del_ip+0x3ec>
		/* Check if any address in the packed array of addresses is
		 * not present in the bind address list of the association.
		 * If so, do not send the asconf chunk to its peer, but
		 * continue with other associations.
		 */
		addr_buf = addrs;
     fd4:	80 01 00 7c 	lwz     r0,124(r1)
     fd8:	90 01 00 10 	stw     r0,16(r1)
		for (i = 0; i < addrcnt; i++) {
     fdc:	38 00 00 00 	li      r0,0
     fe0:	90 01 00 18 	stw     r0,24(r1)
     fe4:	48 00 00 7c 	b       1060 <sctp_send_asconf_del_ip+0x174>
			laddr = (union sctp_addr *)addr_buf;
     fe8:	80 01 00 10 	lwz     r0,16(r1)
     fec:	90 01 00 2c 	stw     r0,44(r1)
			af = sctp_get_af_specific(laddr->v4.sin_family);
     ff0:	80 01 00 2c 	lwz     r0,44(r1)
     ff4:	7c 0b 03 78 	mr      r11,r0
     ff8:	a0 0b 00 00 	lhz     r0,0(r11)
     ffc:	54 00 04 3e 	clrlwi  r0,r0,16
    1000:	7c 03 03 78 	mr      r3,r0
    1004:	48 00 00 01 	bl      1004 <sctp_send_asconf_del_ip+0x118>
    1008:	90 61 00 30 	stw     r3,48(r1)
			if (!af) {
    100c:	80 01 00 30 	lwz     r0,48(r1)
    1010:	2f 80 00 00 	cmpwi   cr7,r0,0
    1014:	40 9e 00 10 	bne-    cr7,1024 <sctp_send_asconf_del_ip+0x138>
				retval = -EINVAL;
    1018:	38 00 ff ea 	li      r0,-22
    101c:	90 01 00 1c 	stw     r0,28(r1)
				goto out;
    1020:	48 00 03 28 	b       1348 <sctp_send_asconf_del_ip+0x45c>
			}

			if (!sctp_assoc_lookup_laddr(asoc, laddr))
    1024:	80 61 00 08 	lwz     r3,8(r1)
    1028:	80 81 00 2c 	lwz     r4,44(r1)
    102c:	48 00 00 01 	bl      102c <sctp_send_asconf_del_ip+0x140>
    1030:	7c 60 1b 78 	mr      r0,r3
    1034:	2f 80 00 00 	cmpwi   cr7,r0,0
    1038:	41 9e 00 3c 	beq-    cr7,1074 <sctp_send_asconf_del_ip+0x188>
				break;

			addr_buf += af->sockaddr_len;
    103c:	80 01 00 30 	lwz     r0,48(r1)
    1040:	7c 09 03 78 	mr      r9,r0
    1044:	80 09 00 6c 	lwz     r0,108(r9)
    1048:	81 21 00 10 	lwz     r9,16(r1)
    104c:	7c 09 02 14 	add     r0,r9,r0
    1050:	90 01 00 10 	stw     r0,16(r1)
		 * not present in the bind address list of the association.
		 * If so, do not send the asconf chunk to its peer, but
		 * continue with other associations.
		 */
		addr_buf = addrs;
		for (i = 0; i < addrcnt; i++) {
    1054:	80 01 00 18 	lwz     r0,24(r1)
    1058:	30 00 00 01 	addic   r0,r0,1
    105c:	90 01 00 18 	stw     r0,24(r1)
    1060:	81 21 00 18 	lwz     r9,24(r1)
    1064:	80 01 00 80 	lwz     r0,128(r1)
    1068:	7f 89 00 00 	cmpw    cr7,r9,r0
    106c:	41 9c ff 7c 	blt+    cr7,fe8 <sctp_send_asconf_del_ip+0xfc>
    1070:	48 00 00 08 	b       1078 <sctp_send_asconf_del_ip+0x18c>
				retval = -EINVAL;
				goto out;
			}

			if (!sctp_assoc_lookup_laddr(asoc, laddr))
				break;
    1074:	60 00 00 00 	nop

			addr_buf += af->sockaddr_len;
		}
		if (i < addrcnt)
    1078:	81 21 00 18 	lwz     r9,24(r1)
    107c:	80 01 00 80 	lwz     r0,128(r1)
    1080:	7f 89 00 00 	cmpw    cr7,r9,r0
    1084:	41 9c 02 5c 	blt-    cr7,12e0 <sctp_send_asconf_del_ip+0x3f4>
		/* Find one address in the association's bind address list
		 * that is not in the packed array of addresses. This is to
		 * make sure that we do not delete all the addresses in the
		 * association.
		 */
		bp = &asoc->base.bind_addr;
    1088:	80 01 00 08 	lwz     r0,8(r1)
    108c:	30 00 00 3c 	addic   r0,r0,60
    1090:	90 01 00 34 	stw     r0,52(r1)
		laddr = sctp_find_unmatch_addr(bp, (union sctp_addr *)addrs,
    1094:	80 61 00 34 	lwz     r3,52(r1)
    1098:	80 81 00 7c 	lwz     r4,124(r1)
    109c:	80 a1 00 80 	lwz     r5,128(r1)
    10a0:	80 c1 00 20 	lwz     r6,32(r1)
    10a4:	48 00 00 01 	bl      10a4 <sctp_send_asconf_del_ip+0x1b8>
    10a8:	90 61 00 2c 	stw     r3,44(r1)
					       addrcnt, sp);
		if (!laddr)
    10ac:	80 01 00 2c 	lwz     r0,44(r1)
    10b0:	2f 80 00 00 	cmpwi   cr7,r0,0
    10b4:	41 9e 02 34 	beq-    cr7,12e8 <sctp_send_asconf_del_ip+0x3fc>

		/* We do not need RCU protection throughout this loop
		 * because this is done under a socket lock from the
		 * setsockopt call.
		 */
		chunk = sctp_make_asconf_update_ip(asoc, laddr, addrs, addrcnt,
    10b8:	80 61 00 08 	lwz     r3,8(r1)
    10bc:	80 81 00 2c 	lwz     r4,44(r1)
    10c0:	80 a1 00 7c 	lwz     r5,124(r1)
    10c4:	80 c1 00 80 	lwz     r6,128(r1)
    10c8:	38 00 00 00 	li      r0,0
    10cc:	60 07 c0 02 	ori     r7,r0,49154
    10d0:	48 00 00 01 	bl      10d0 <sctp_send_asconf_del_ip+0x1e4>
    10d4:	90 61 00 38 	stw     r3,56(r1)
						   SCTP_PARAM_DEL_IP);
		if (!chunk) {
    10d8:	80 01 00 38 	lwz     r0,56(r1)
    10dc:	2f 80 00 00 	cmpwi   cr7,r0,0
    10e0:	40 9e 00 10 	bne-    cr7,10f0 <sctp_send_asconf_del_ip+0x204>
			retval = -ENOMEM;
    10e4:	38 00 ff f4 	li      r0,-12
    10e8:	90 01 00 1c 	stw     r0,28(r1)
			goto out;
    10ec:	48 00 02 5c 	b       1348 <sctp_send_asconf_del_ip+0x45c>
		}

		/* Reset use_as_src flag for the addresses in the bind address
		 * list that are to be deleted.
		 */
		addr_buf = addrs;
    10f0:	80 01 00 7c 	lwz     r0,124(r1)
    10f4:	90 01 00 10 	stw     r0,16(r1)
		for (i = 0; i < addrcnt; i++) {
    10f8:	38 00 00 00 	li      r0,0
    10fc:	90 01 00 18 	stw     r0,24(r1)
    1100:	48 00 00 f4 	b       11f4 <sctp_send_asconf_del_ip+0x308>
			laddr = (union sctp_addr *)addr_buf;
    1104:	80 01 00 10 	lwz     r0,16(r1)
    1108:	90 01 00 2c 	stw     r0,44(r1)
			af = sctp_get_af_specific(laddr->v4.sin_family);
    110c:	80 01 00 2c 	lwz     r0,44(r1)
    1110:	7c 0b 03 78 	mr      r11,r0
    1114:	a0 0b 00 00 	lhz     r0,0(r11)
    1118:	54 00 04 3e 	clrlwi  r0,r0,16
    111c:	7c 03 03 78 	mr      r3,r0
    1120:	48 00 00 01 	bl      1120 <sctp_send_asconf_del_ip+0x234>
    1124:	90 61 00 30 	stw     r3,48(r1)
			list_for_each_entry(saddr, &bp->address_list, list) {
    1128:	80 01 00 34 	lwz     r0,52(r1)
    112c:	7c 09 03 78 	mr      r9,r0
    1130:	80 09 00 04 	lwz     r0,4(r9)
    1134:	90 01 00 3c 	stw     r0,60(r1)
    1138:	80 01 00 3c 	lwz     r0,60(r1)
    113c:	90 01 00 14 	stw     r0,20(r1)
    1140:	48 00 00 4c 	b       118c <sctp_send_asconf_del_ip+0x2a0>
				if (sctp_cmp_addr_exact(&saddr->a, laddr))
    1144:	80 01 00 14 	lwz     r0,20(r1)
    1148:	30 00 00 10 	addic   r0,r0,16
    114c:	7c 03 03 78 	mr      r3,r0
    1150:	80 81 00 2c 	lwz     r4,44(r1)
    1154:	48 00 00 01 	bl      1154 <sctp_send_asconf_del_ip+0x268>
    1158:	7c 60 1b 78 	mr      r0,r3
    115c:	2f 80 00 00 	cmpwi   cr7,r0,0
    1160:	41 9e 00 14 	beq-    cr7,1174 <sctp_send_asconf_del_ip+0x288>
					saddr->state = SCTP_ADDR_DEL;
    1164:	80 01 00 14 	lwz     r0,20(r1)
    1168:	39 20 00 02 	li      r9,2
    116c:	7c 0b 03 78 	mr      r11,r0
    1170:	99 2b 00 2c 	stb     r9,44(r11)
		 */
		addr_buf = addrs;
		for (i = 0; i < addrcnt; i++) {
			laddr = (union sctp_addr *)addr_buf;
			af = sctp_get_af_specific(laddr->v4.sin_family);
			list_for_each_entry(saddr, &bp->address_list, list) {
    1174:	80 01 00 14 	lwz     r0,20(r1)
    1178:	7c 09 03 78 	mr      r9,r0
    117c:	80 09 00 00 	lwz     r0,0(r9)
    1180:	90 01 00 40 	stw     r0,64(r1)
    1184:	80 01 00 40 	lwz     r0,64(r1)
    1188:	90 01 00 14 	stw     r0,20(r1)
    118c:	80 01 00 14 	lwz     r0,20(r1)
    1190:	7c 0b 03 78 	mr      r11,r0
    1194:	80 0b 00 00 	lwz     r0,0(r11)
    1198:	90 01 00 5c 	stw     r0,92(r1)
#define ARCH_HAS_PREFETCHW
#define ARCH_HAS_SPINLOCK_PREFETCH

static inline void prefetch(const void *x)
{
	if (unlikely(!x))
    119c:	80 01 00 5c 	lwz     r0,92(r1)
    11a0:	2f 80 00 00 	cmpwi   cr7,r0,0
    11a4:	7c 00 00 26 	mfcr    r0
    11a8:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
    11ac:	2f 80 00 00 	cmpwi   cr7,r0,0
    11b0:	40 9e 00 0c 	bne-    cr7,11bc <sctp_send_asconf_del_ip+0x2d0>
		return;

	__asm__ __volatile__ ("dcbt 0,%0" : : "r" (x));
    11b4:	80 01 00 5c 	lwz     r0,92(r1)
    11b8:	7c 00 02 2c 	dcbt    r0,r0
    11bc:	81 21 00 14 	lwz     r9,20(r1)
    11c0:	80 01 00 34 	lwz     r0,52(r1)
    11c4:	30 00 00 04 	addic   r0,r0,4
    11c8:	7f 89 00 00 	cmpw    cr7,r9,r0
    11cc:	40 9e ff 78 	bne+    cr7,1144 <sctp_send_asconf_del_ip+0x258>
				if (sctp_cmp_addr_exact(&saddr->a, laddr))
					saddr->state = SCTP_ADDR_DEL;
			}
			addr_buf += af->sockaddr_len;
    11d0:	80 01 00 30 	lwz     r0,48(r1)
    11d4:	7c 09 03 78 	mr      r9,r0
    11d8:	80 09 00 6c 	lwz     r0,108(r9)
    11dc:	81 21 00 10 	lwz     r9,16(r1)
    11e0:	7c 09 02 14 	add     r0,r9,r0
    11e4:	90 01 00 10 	stw     r0,16(r1)

		/* Reset use_as_src flag for the addresses in the bind address
		 * list that are to be deleted.
		 */
		addr_buf = addrs;
		for (i = 0; i < addrcnt; i++) {
    11e8:	80 01 00 18 	lwz     r0,24(r1)
    11ec:	30 00 00 01 	addic   r0,r0,1
    11f0:	90 01 00 18 	stw     r0,24(r1)
    11f4:	81 21 00 18 	lwz     r9,24(r1)
    11f8:	80 01 00 80 	lwz     r0,128(r1)
    11fc:	7f 89 00 00 	cmpw    cr7,r9,r0
    1200:	41 9c ff 04 	blt+    cr7,1104 <sctp_send_asconf_del_ip+0x218>

		/* Update the route and saddr entries for all the transports
		 * as some of the addresses in the bind address list are
		 * about to be deleted and cannot be used as source addresses.
		 */
		list_for_each_entry(transport, &asoc->peer.transport_addr_list,
    1204:	80 01 00 08 	lwz     r0,8(r1)
    1208:	7c 0b 03 78 	mr      r11,r0
    120c:	80 0b 00 e8 	lwz     r0,232(r11)
    1210:	90 01 00 44 	stw     r0,68(r1)
    1214:	80 01 00 44 	lwz     r0,68(r1)
    1218:	90 01 00 0c 	stw     r0,12(r1)
    121c:	48 00 00 54 	b       1270 <sctp_send_asconf_del_ip+0x384>
					transports) {
			dst_release(transport->dst);
    1220:	80 01 00 0c 	lwz     r0,12(r1)
    1224:	7c 09 03 78 	mr      r9,r0
    1228:	80 09 00 58 	lwz     r0,88(r9)
    122c:	7c 03 03 78 	mr      r3,r0
    1230:	48 00 00 01 	bl      1230 <sctp_send_asconf_del_ip+0x344>
			sctp_transport_route(transport, NULL,
					     sctp_sk(asoc->base.sk));
    1234:	80 01 00 08 	lwz     r0,8(r1)
    1238:	7c 0b 03 78 	mr      r11,r0
    123c:	80 0b 00 18 	lwz     r0,24(r11)
    1240:	90 01 00 60 	stw     r0,96(r1)
    1244:	80 01 00 60 	lwz     r0,96(r1)
		 * about to be deleted and cannot be used as source addresses.
		 */
		list_for_each_entry(transport, &asoc->peer.transport_addr_list,
					transports) {
			dst_release(transport->dst);
			sctp_transport_route(transport, NULL,
    1248:	80 61 00 0c 	lwz     r3,12(r1)
    124c:	38 80 00 00 	li      r4,0
    1250:	7c 05 03 78 	mr      r5,r0
    1254:	48 00 00 01 	bl      1254 <sctp_send_asconf_del_ip+0x368>

		/* Update the route and saddr entries for all the transports
		 * as some of the addresses in the bind address list are
		 * about to be deleted and cannot be used as source addresses.
		 */
		list_for_each_entry(transport, &asoc->peer.transport_addr_list,
    1258:	80 01 00 0c 	lwz     r0,12(r1)
    125c:	7c 09 03 78 	mr      r9,r0
    1260:	80 09 00 00 	lwz     r0,0(r9)
    1264:	90 01 00 48 	stw     r0,72(r1)
    1268:	80 01 00 48 	lwz     r0,72(r1)
    126c:	90 01 00 0c 	stw     r0,12(r1)
    1270:	80 01 00 0c 	lwz     r0,12(r1)
    1274:	7c 0b 03 78 	mr      r11,r0
    1278:	80 0b 00 00 	lwz     r0,0(r11)
    127c:	90 01 00 64 	stw     r0,100(r1)
#define ARCH_HAS_PREFETCHW
#define ARCH_HAS_SPINLOCK_PREFETCH

static inline void prefetch(const void *x)
{
	if (unlikely(!x))
    1280:	80 01 00 64 	lwz     r0,100(r1)
    1284:	2f 80 00 00 	cmpwi   cr7,r0,0
    1288:	7c 00 00 26 	mfcr    r0
    128c:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
    1290:	2f 80 00 00 	cmpwi   cr7,r0,0
    1294:	40 9e 00 0c 	bne-    cr7,12a0 <sctp_send_asconf_del_ip+0x3b4>
		return;

	__asm__ __volatile__ ("dcbt 0,%0" : : "r" (x));
    1298:	80 01 00 64 	lwz     r0,100(r1)
    129c:	7c 00 02 2c 	dcbt    r0,r0
    12a0:	81 21 00 0c 	lwz     r9,12(r1)
    12a4:	80 01 00 08 	lwz     r0,8(r1)
    12a8:	30 00 00 e8 	addic   r0,r0,232
    12ac:	7f 89 00 00 	cmpw    cr7,r9,r0
    12b0:	40 9e ff 70 	bne+    cr7,1220 <sctp_send_asconf_del_ip+0x334>
			dst_release(transport->dst);
			sctp_transport_route(transport, NULL,
					     sctp_sk(asoc->base.sk));
		}

		retval = sctp_send_asconf(asoc, chunk);
    12b4:	80 61 00 08 	lwz     r3,8(r1)
    12b8:	80 81 00 38 	lwz     r4,56(r1)
    12bc:	4b ff f4 91 	bl      74c <sctp_send_asconf>
    12c0:	90 61 00 1c 	stw     r3,28(r1)
    12c4:	48 00 00 28 	b       12ec <sctp_send_asconf_del_ip+0x400>
			  __func__, sk, addrs, addrcnt);

	list_for_each_entry(asoc, &ep->asocs, asocs) {

		if (!asoc->peer.asconf_capable)
			continue;
    12c8:	60 00 00 00 	nop
    12cc:	48 00 00 20 	b       12ec <sctp_send_asconf_del_ip+0x400>

		if (asoc->peer.addip_disabled_mask & SCTP_PARAM_DEL_IP)
			continue;
    12d0:	60 00 00 00 	nop
    12d4:	48 00 00 18 	b       12ec <sctp_send_asconf_del_ip+0x400>

		if (!sctp_state(asoc, ESTABLISHED))
			continue;
    12d8:	60 00 00 00 	nop
    12dc:	48 00 00 10 	b       12ec <sctp_send_asconf_del_ip+0x400>
				break;

			addr_buf += af->sockaddr_len;
		}
		if (i < addrcnt)
			continue;
    12e0:	60 00 00 00 	nop
    12e4:	48 00 00 08 	b       12ec <sctp_send_asconf_del_ip+0x400>
		 */
		bp = &asoc->base.bind_addr;
		laddr = sctp_find_unmatch_addr(bp, (union sctp_addr *)addrs,
					       addrcnt, sp);
		if (!laddr)
			continue;
    12e8:	60 00 00 00 	nop
	ep = sp->ep;

	SCTP_DEBUG_PRINTK("%s: (sk: %p, addrs: %p, addrcnt: %d)\n",
			  __func__, sk, addrs, addrcnt);

	list_for_each_entry(asoc, &ep->asocs, asocs) {
    12ec:	80 01 00 08 	lwz     r0,8(r1)
    12f0:	7c 09 03 78 	mr      r9,r0
    12f4:	80 09 00 4c 	lwz     r0,76(r9)
    12f8:	90 01 00 4c 	stw     r0,76(r1)
    12fc:	80 01 00 4c 	lwz     r0,76(r1)
    1300:	30 00 ff b4 	addic   r0,r0,-76
    1304:	90 01 00 08 	stw     r0,8(r1)
    1308:	80 01 00 08 	lwz     r0,8(r1)
    130c:	7c 0b 03 78 	mr      r11,r0
    1310:	80 0b 00 4c 	lwz     r0,76(r11)
    1314:	90 01 00 68 	stw     r0,104(r1)
#define ARCH_HAS_PREFETCHW
#define ARCH_HAS_SPINLOCK_PREFETCH

static inline void prefetch(const void *x)
{
	if (unlikely(!x))
    1318:	80 01 00 68 	lwz     r0,104(r1)
    131c:	2f 80 00 00 	cmpwi   cr7,r0,0
    1320:	7c 00 00 26 	mfcr    r0
    1324:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
    1328:	2f 80 00 00 	cmpwi   cr7,r0,0
    132c:	40 9e 00 0c 	bne-    cr7,1338 <sctp_send_asconf_del_ip+0x44c>
		return;

	__asm__ __volatile__ ("dcbt 0,%0" : : "r" (x));
    1330:	80 01 00 68 	lwz     r0,104(r1)
    1334:	7c 00 02 2c 	dcbt    r0,r0
    1338:	81 21 00 08 	lwz     r9,8(r1)
    133c:	80 01 00 24 	lwz     r0,36(r1)
    1340:	7f 89 00 00 	cmpw    cr7,r9,r0
    1344:	40 9e fc 28 	bne+    cr7,f6c <sctp_send_asconf_del_ip+0x80>
		}

		retval = sctp_send_asconf(asoc, chunk);
	}
out:
	return retval;
    1348:	80 01 00 1c 	lwz     r0,28(r1)
}
    134c:	7c 03 03 78 	mr      r3,r0
    1350:	80 01 00 94 	lwz     r0,148(r1)
    1354:	7c 08 03 a6 	mtlr    r0
    1358:	38 21 00 90 	addi    r1,r1,144
    135c:	4e 80 00 20 	blr

00001360 <sctp_setsockopt_bindx>:
 * Returns 0 if ok, <0 errno code on error.
 */
SCTP_STATIC int sctp_setsockopt_bindx(struct sock* sk,
				      struct sockaddr __user *addrs,
				      int addrs_size, int op)
{
    1360:	94 21 ff a0 	stwu    r1,-96(r1)
    1364:	7c 08 02 a6 	mflr    r0
    1368:	90 01 00 64 	stw     r0,100(r1)
    136c:	90 61 00 48 	stw     r3,72(r1)
    1370:	90 81 00 4c 	stw     r4,76(r1)
    1374:	90 a1 00 50 	stw     r5,80(r1)
    1378:	90 c1 00 54 	stw     r6,84(r1)
	struct sockaddr *kaddrs;
	int err;
	int addrcnt = 0;
    137c:	38 00 00 00 	li      r0,0
    1380:	90 01 00 0c 	stw     r0,12(r1)
	int walk_size = 0;
    1384:	38 00 00 00 	li      r0,0
    1388:	90 01 00 10 	stw     r0,16(r1)
	struct sctp_af *af;

	SCTP_DEBUG_PRINTK("sctp_setsocktopt_bindx: sk %p addrs %p"
			  " addrs_size %d opt %d\n", sk, addrs, addrs_size, op);

	if (unlikely(addrs_size <= 0))
    138c:	80 01 00 50 	lwz     r0,80(r1)
    1390:	30 00 ff ff 	addic   r0,r0,-1
    1394:	81 21 00 50 	lwz     r9,80(r1)
    1398:	7c 00 4b 78 	or      r0,r0,r9
    139c:	54 00 0f fe 	rlwinm  r0,r0,1,31,31
    13a0:	2f 80 00 00 	cmpwi   cr7,r0,0
    13a4:	41 9e 00 0c 	beq-    cr7,13b0 <sctp_setsockopt_bindx+0x50>
		return -EINVAL;
    13a8:	38 00 ff ea 	li      r0,-22
    13ac:	48 00 02 a0 	b       164c <sctp_setsockopt_bindx+0x2ec>

	/* Check the user passed a healthy pointer.  */
	if (unlikely(!access_ok(VERIFY_READ, addrs, addrs_size)))
    13b0:	81 21 00 4c 	lwz     r9,76(r1)
    13b4:	7c 40 13 78 	mr      r0,r2
    13b8:	7c 0a 03 78 	mr      r10,r0
    13bc:	80 0a 01 d4 	lwz     r0,468(r10)
    13c0:	7f 89 00 40 	cmplw   cr7,r9,r0
    13c4:	41 9d 00 40 	bgt-    cr7,1404 <sctp_setsockopt_bindx+0xa4>
    13c8:	80 01 00 50 	lwz     r0,80(r1)
    13cc:	2f 80 00 00 	cmpwi   cr7,r0,0
    13d0:	41 9e 00 2c 	beq-    cr7,13fc <sctp_setsockopt_bindx+0x9c>
    13d4:	80 01 00 50 	lwz     r0,80(r1)
    13d8:	30 00 ff ff 	addic   r0,r0,-1
    13dc:	7c 09 03 78 	mr      r9,r0
    13e0:	7c 40 13 78 	mr      r0,r2
    13e4:	7c 0a 03 78 	mr      r10,r0
    13e8:	81 6a 01 d4 	lwz     r11,468(r10)
    13ec:	80 01 00 4c 	lwz     r0,76(r1)
    13f0:	7c 00 58 50 	subf    r0,r0,r11
    13f4:	7f 89 00 40 	cmplw   cr7,r9,r0
    13f8:	41 9d 00 0c 	bgt-    cr7,1404 <sctp_setsockopt_bindx+0xa4>
    13fc:	38 00 00 01 	li      r0,1
    1400:	48 00 00 08 	b       1408 <sctp_setsockopt_bindx+0xa8>
    1404:	38 00 00 00 	li      r0,0
    1408:	2f 80 00 00 	cmpwi   cr7,r0,0
    140c:	7c 00 00 26 	mfcr    r0
    1410:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
    1414:	2f 80 00 00 	cmpwi   cr7,r0,0
    1418:	41 9e 00 0c 	beq-    cr7,1424 <sctp_setsockopt_bindx+0xc4>
		return -EFAULT;
    141c:	38 00 ff f2 	li      r0,-14
    1420:	48 00 02 2c 	b       164c <sctp_setsockopt_bindx+0x2ec>

	/* Alloc space for the address array in kernel memory.  */
	kaddrs = kmalloc(addrs_size, GFP_KERNEL);
    1424:	80 01 00 50 	lwz     r0,80(r1)
    1428:	90 01 00 24 	stw     r0,36(r1)
    142c:	38 00 00 d0 	li      r0,208
    1430:	90 01 00 28 	stw     r0,40(r1)
				return ZERO_SIZE_PTR;

			return kmem_cache_alloc_trace(s, flags, size);
		}
	}
	return __kmalloc(size, flags);
    1434:	80 61 00 24 	lwz     r3,36(r1)
    1438:	80 81 00 28 	lwz     r4,40(r1)
    143c:	48 00 00 01 	bl      143c <sctp_setsockopt_bindx+0xdc>
    1440:	7c 60 1b 78 	mr      r0,r3
    1444:	90 01 00 18 	stw     r0,24(r1)
	if (unlikely(!kaddrs))
    1448:	80 01 00 18 	lwz     r0,24(r1)
    144c:	2f 80 00 00 	cmpwi   cr7,r0,0
    1450:	7c 00 00 26 	mfcr    r0
    1454:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
    1458:	2f 80 00 00 	cmpwi   cr7,r0,0
    145c:	41 9e 00 0c 	beq-    cr7,1468 <sctp_setsockopt_bindx+0x108>
		return -ENOMEM;
    1460:	38 00 ff f4 	li      r0,-12
    1464:	48 00 01 e8 	b       164c <sctp_setsockopt_bindx+0x2ec>

	if (__copy_from_user(kaddrs, addrs, addrs_size)) {
    1468:	80 01 00 50 	lwz     r0,80(r1)
    146c:	81 21 00 18 	lwz     r9,24(r1)
    1470:	91 21 00 2c 	stw     r9,44(r1)
    1474:	81 21 00 4c 	lwz     r9,76(r1)
    1478:	91 21 00 30 	stw     r9,48(r1)
    147c:	90 01 00 34 	stw     r0,52(r1)
    1480:	80 01 00 2c 	lwz     r0,44(r1)
    1484:	90 01 00 38 	stw     r0,56(r1)
    1488:	80 01 00 30 	lwz     r0,48(r1)
    148c:	90 01 00 3c 	stw     r0,60(r1)
    1490:	80 01 00 34 	lwz     r0,52(r1)
    1494:	90 01 00 40 	stw     r0,64(r1)
			break;
		}
		if (ret == 0)
			return 0;
	}
	return __copy_tofrom_user((__force void __user *)to, from, n);
    1498:	80 61 00 38 	lwz     r3,56(r1)
    149c:	80 81 00 3c 	lwz     r4,60(r1)
    14a0:	80 a1 00 40 	lwz     r5,64(r1)
    14a4:	48 00 00 01 	bl      14a4 <sctp_setsockopt_bindx+0x144>
    14a8:	7c 60 1b 78 	mr      r0,r3
    14ac:	2f 80 00 00 	cmpwi   cr7,r0,0
    14b0:	41 9e 00 14 	beq-    cr7,14c4 <sctp_setsockopt_bindx+0x164>
		kfree(kaddrs);
    14b4:	80 61 00 18 	lwz     r3,24(r1)
    14b8:	48 00 00 01 	bl      14b8 <sctp_setsockopt_bindx+0x158>
		return -EFAULT;
    14bc:	38 00 ff f2 	li      r0,-14
    14c0:	48 00 01 8c 	b       164c <sctp_setsockopt_bindx+0x2ec>
	}

	/* Walk through the addrs buffer and count the number of addresses. */
	addr_buf = kaddrs;
    14c4:	80 01 00 18 	lwz     r0,24(r1)
    14c8:	90 01 00 14 	stw     r0,20(r1)
	while (walk_size < addrs_size) {
    14cc:	48 00 00 c4 	b       1590 <sctp_setsockopt_bindx+0x230>
		if (walk_size + sizeof(sa_family_t) > addrs_size) {
    14d0:	80 01 00 10 	lwz     r0,16(r1)
    14d4:	31 20 00 02 	addic   r9,r0,2
    14d8:	80 01 00 50 	lwz     r0,80(r1)
    14dc:	7f 89 00 40 	cmplw   cr7,r9,r0
    14e0:	40 9d 00 14 	ble-    cr7,14f4 <sctp_setsockopt_bindx+0x194>
			kfree(kaddrs);
    14e4:	80 61 00 18 	lwz     r3,24(r1)
    14e8:	48 00 00 01 	bl      14e8 <sctp_setsockopt_bindx+0x188>
			return -EINVAL;
    14ec:	38 00 ff ea 	li      r0,-22
    14f0:	48 00 01 5c 	b       164c <sctp_setsockopt_bindx+0x2ec>
		}

		sa_addr = (struct sockaddr *)addr_buf;
    14f4:	80 01 00 14 	lwz     r0,20(r1)
    14f8:	90 01 00 1c 	stw     r0,28(r1)
		af = sctp_get_af_specific(sa_addr->sa_family);
    14fc:	80 01 00 1c 	lwz     r0,28(r1)
    1500:	7c 0b 03 78 	mr      r11,r0
    1504:	a0 0b 00 00 	lhz     r0,0(r11)
    1508:	54 00 04 3e 	clrlwi  r0,r0,16
    150c:	7c 03 03 78 	mr      r3,r0
    1510:	48 00 00 01 	bl      1510 <sctp_setsockopt_bindx+0x1b0>
    1514:	90 61 00 20 	stw     r3,32(r1)

		/* If the address family is not supported or if this address
		 * causes the address buffer to overflow return EINVAL.
		 */
		if (!af || (walk_size + af->sockaddr_len) > addrs_size) {
    1518:	80 01 00 20 	lwz     r0,32(r1)
    151c:	2f 80 00 00 	cmpwi   cr7,r0,0
    1520:	41 9e 00 24 	beq-    cr7,1544 <sctp_setsockopt_bindx+0x1e4>
    1524:	80 01 00 20 	lwz     r0,32(r1)
    1528:	7c 0a 03 78 	mr      r10,r0
    152c:	81 2a 00 6c 	lwz     r9,108(r10)
    1530:	80 01 00 10 	lwz     r0,16(r1)
    1534:	7d 29 02 14 	add     r9,r9,r0
    1538:	80 01 00 50 	lwz     r0,80(r1)
    153c:	7f 89 00 00 	cmpw    cr7,r9,r0
    1540:	40 9d 00 14 	ble-    cr7,1554 <sctp_setsockopt_bindx+0x1f4>
			kfree(kaddrs);
    1544:	80 61 00 18 	lwz     r3,24(r1)
    1548:	48 00 00 01 	bl      1548 <sctp_setsockopt_bindx+0x1e8>
			return -EINVAL;
    154c:	38 00 ff ea 	li      r0,-22
    1550:	48 00 00 fc 	b       164c <sctp_setsockopt_bindx+0x2ec>
		}
		addrcnt++;
    1554:	80 01 00 0c 	lwz     r0,12(r1)
    1558:	30 00 00 01 	addic   r0,r0,1
    155c:	90 01 00 0c 	stw     r0,12(r1)
		addr_buf += af->sockaddr_len;
    1560:	80 01 00 20 	lwz     r0,32(r1)
    1564:	7c 0b 03 78 	mr      r11,r0
    1568:	80 0b 00 6c 	lwz     r0,108(r11)
    156c:	81 21 00 14 	lwz     r9,20(r1)
    1570:	7c 09 02 14 	add     r0,r9,r0
    1574:	90 01 00 14 	stw     r0,20(r1)
		walk_size += af->sockaddr_len;
    1578:	80 01 00 20 	lwz     r0,32(r1)
    157c:	7c 09 03 78 	mr      r9,r0
    1580:	80 09 00 6c 	lwz     r0,108(r9)
    1584:	81 21 00 10 	lwz     r9,16(r1)
    1588:	7c 09 02 14 	add     r0,r9,r0
    158c:	90 01 00 10 	stw     r0,16(r1)
		return -EFAULT;
	}

	/* Walk through the addrs buffer and count the number of addresses. */
	addr_buf = kaddrs;
	while (walk_size < addrs_size) {
    1590:	81 21 00 10 	lwz     r9,16(r1)
    1594:	80 01 00 50 	lwz     r0,80(r1)
    1598:	7f 89 00 00 	cmpw    cr7,r9,r0
    159c:	41 9c ff 34 	blt+    cr7,14d0 <sctp_setsockopt_bindx+0x170>
		addr_buf += af->sockaddr_len;
		walk_size += af->sockaddr_len;
	}

	/* Do the work. */
	switch (op) {
    15a0:	80 01 00 54 	lwz     r0,84(r1)
    15a4:	2f 80 00 01 	cmpwi   cr7,r0,1
    15a8:	41 9e 00 10 	beq-    cr7,15b8 <sctp_setsockopt_bindx+0x258>
    15ac:	2f 80 00 02 	cmpwi   cr7,r0,2
    15b0:	41 9e 00 40 	beq-    cr7,15f0 <sctp_setsockopt_bindx+0x290>
    15b4:	48 00 00 74 	b       1628 <sctp_setsockopt_bindx+0x2c8>
	case SCTP_BINDX_ADD_ADDR:
		err = sctp_bindx_add(sk, kaddrs, addrcnt);
    15b8:	80 61 00 48 	lwz     r3,72(r1)
    15bc:	80 81 00 18 	lwz     r4,24(r1)
    15c0:	80 a1 00 0c 	lwz     r5,12(r1)
    15c4:	4b ff f2 89 	bl      84c <sctp_bindx_add>
    15c8:	90 61 00 08 	stw     r3,8(r1)
		if (err)
    15cc:	80 01 00 08 	lwz     r0,8(r1)
    15d0:	2f 80 00 00 	cmpwi   cr7,r0,0
    15d4:	40 9e 00 60 	bne-    cr7,1634 <sctp_setsockopt_bindx+0x2d4>
			goto out;
		err = sctp_send_asconf_add_ip(sk, kaddrs, addrcnt);
    15d8:	80 61 00 48 	lwz     r3,72(r1)
    15dc:	80 81 00 18 	lwz     r4,24(r1)
    15e0:	80 a1 00 0c 	lwz     r5,12(r1)
    15e4:	4b ff f3 75 	bl      958 <sctp_send_asconf_add_ip>
    15e8:	90 61 00 08 	stw     r3,8(r1)
		break;
    15ec:	48 00 00 54 	b       1640 <sctp_setsockopt_bindx+0x2e0>

	case SCTP_BINDX_REM_ADDR:
		err = sctp_bindx_rem(sk, kaddrs, addrcnt);
    15f0:	80 61 00 48 	lwz     r3,72(r1)
    15f4:	80 81 00 18 	lwz     r4,24(r1)
    15f8:	80 a1 00 0c 	lwz     r5,12(r1)
    15fc:	4b ff f6 c9 	bl      cc4 <sctp_bindx_rem>
    1600:	90 61 00 08 	stw     r3,8(r1)
		if (err)
    1604:	80 01 00 08 	lwz     r0,8(r1)
    1608:	2f 80 00 00 	cmpwi   cr7,r0,0
    160c:	40 9e 00 30 	bne-    cr7,163c <sctp_setsockopt_bindx+0x2dc>
			goto out;
		err = sctp_send_asconf_del_ip(sk, kaddrs, addrcnt);
    1610:	80 61 00 48 	lwz     r3,72(r1)
    1614:	80 81 00 18 	lwz     r4,24(r1)
    1618:	80 a1 00 0c 	lwz     r5,12(r1)
    161c:	4b ff f8 d1 	bl      eec <sctp_send_asconf_del_ip>
    1620:	90 61 00 08 	stw     r3,8(r1)
		break;
    1624:	48 00 00 1c 	b       1640 <sctp_setsockopt_bindx+0x2e0>

	default:
		err = -EINVAL;
    1628:	38 00 ff ea 	li      r0,-22
    162c:	90 01 00 08 	stw     r0,8(r1)
		break;
    1630:	48 00 00 10 	b       1640 <sctp_setsockopt_bindx+0x2e0>
	/* Do the work. */
	switch (op) {
	case SCTP_BINDX_ADD_ADDR:
		err = sctp_bindx_add(sk, kaddrs, addrcnt);
		if (err)
			goto out;
    1634:	60 00 00 00 	nop
    1638:	48 00 00 08 	b       1640 <sctp_setsockopt_bindx+0x2e0>
		break;

	case SCTP_BINDX_REM_ADDR:
		err = sctp_bindx_rem(sk, kaddrs, addrcnt);
		if (err)
			goto out;
    163c:	60 00 00 00 	nop
		err = -EINVAL;
		break;
	}

out:
	kfree(kaddrs);
    1640:	80 61 00 18 	lwz     r3,24(r1)
    1644:	48 00 00 01 	bl      1644 <sctp_setsockopt_bindx+0x2e4>

	return err;
    1648:	80 01 00 08 	lwz     r0,8(r1)
}
    164c:	7c 03 03 78 	mr      r3,r0
    1650:	80 01 00 64 	lwz     r0,100(r1)
    1654:	7c 08 03 a6 	mtlr    r0
    1658:	38 21 00 60 	addi    r1,r1,96
    165c:	4e 80 00 20 	blr

00001660 <__sctp_connect>:
 */
static int __sctp_connect(struct sock* sk,
			  struct sockaddr *kaddrs,
			  int addrs_size,
			  sctp_assoc_t *assoc_id)
{
    1660:	94 21 ff 30 	stwu    r1,-208(r1)
    1664:	7c 08 02 a6 	mflr    r0
    1668:	90 01 00 d4 	stw     r0,212(r1)
    166c:	90 61 00 b8 	stw     r3,184(r1)
    1670:	90 81 00 bc 	stw     r4,188(r1)
    1674:	90 a1 00 c0 	stw     r5,192(r1)
    1678:	90 c1 00 c4 	stw     r6,196(r1)
	struct sctp_sock *sp;
	struct sctp_endpoint *ep;
	struct sctp_association *asoc = NULL;
    167c:	38 00 00 00 	li      r0,0
    1680:	90 01 00 08 	stw     r0,8(r1)
	struct sctp_transport *transport;
	union sctp_addr to;
	struct sctp_af *af;
	sctp_scope_t scope;
	long timeo;
	int err = 0;
    1684:	38 00 00 00 	li      r0,0
    1688:	90 01 00 0c 	stw     r0,12(r1)
	int addrcnt = 0;
    168c:	38 00 00 00 	li      r0,0
    1690:	90 01 00 10 	stw     r0,16(r1)
	int walk_size = 0;
    1694:	38 00 00 00 	li      r0,0
    1698:	90 01 00 14 	stw     r0,20(r1)
	union sctp_addr *sa_addr = NULL;
    169c:	38 00 00 00 	li      r0,0
    16a0:	90 01 00 18 	stw     r0,24(r1)
	void *addr_buf;
	unsigned short port;
	unsigned int f_flags = 0;
    16a4:	38 00 00 00 	li      r0,0
    16a8:	90 01 00 20 	stw     r0,32(r1)
    16ac:	80 01 00 b8 	lwz     r0,184(r1)
    16b0:	90 01 00 3c 	stw     r0,60(r1)
    16b4:	80 01 00 3c 	lwz     r0,60(r1)

	sp = sctp_sk(sk);
    16b8:	90 01 00 24 	stw     r0,36(r1)
	ep = sp->ep;
    16bc:	80 01 00 24 	lwz     r0,36(r1)
    16c0:	7c 09 03 78 	mr      r9,r0
    16c4:	80 09 01 d4 	lwz     r0,468(r9)
    16c8:	90 01 00 28 	stw     r0,40(r1)
    16cc:	80 01 00 b8 	lwz     r0,184(r1)
    16d0:	90 01 00 40 	stw     r0,64(r1)
    16d4:	38 00 00 01 	li      r0,1
    16d8:	90 01 00 44 	stw     r0,68(r1)

/* Is the socket in this state? */
#define sctp_sstate(sk, state) __sctp_sstate((sk), (SCTP_SS_##state))
static inline int __sctp_sstate(const struct sock *sk, sctp_sock_state_t state)
{
	return sk->sk_state == state;
    16dc:	80 01 00 40 	lwz     r0,64(r1)
    16e0:	7c 0b 03 78 	mr      r11,r0
    16e4:	88 0b 00 0e 	lbz     r0,14(r11)
    16e8:	54 00 06 3e 	clrlwi  r0,r0,24
    16ec:	81 21 00 44 	lwz     r9,68(r1)
    16f0:	7f 89 00 00 	cmpw    cr7,r9,r0
    16f4:	7c 00 00 26 	mfcr    r0
    16f8:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
	/* connect() cannot be done on a socket that is already in ESTABLISHED
	 * state - UDP-style peeled off socket or a TCP-style socket that
	 * is already connected.
	 * It cannot be done even on a TCP-style listening socket.
	 */
	if (sctp_sstate(sk, ESTABLISHED) ||
    16fc:	2f 80 00 00 	cmpwi   cr7,r0,0
    1700:	40 9e 00 78 	bne-    cr7,1778 <__sctp_connect+0x118>
    1704:	80 01 00 b8 	lwz     r0,184(r1)
    1708:	90 01 00 48 	stw     r0,72(r1)
    170c:	38 00 00 02 	li      r0,2
    1710:	90 01 00 4c 	stw     r0,76(r1)
    1714:	80 01 00 48 	lwz     r0,72(r1)
    1718:	90 01 00 50 	stw     r0,80(r1)
    171c:	80 01 00 50 	lwz     r0,80(r1)

/* Is a socket of this style? */
#define sctp_style(sk, style) __sctp_style((sk), (SCTP_SOCKET_##style))
static inline int __sctp_style(const struct sock *sk, sctp_socket_type_t style)
{
	return sctp_sk(sk)->type == style;
    1720:	7c 09 03 78 	mr      r9,r0
    1724:	80 09 01 c8 	lwz     r0,456(r9)
    1728:	81 21 00 4c 	lwz     r9,76(r1)
    172c:	7f 89 00 00 	cmpw    cr7,r9,r0
    1730:	7c 00 00 26 	mfcr    r0
    1734:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
    1738:	2f 80 00 00 	cmpwi   cr7,r0,0
    173c:	41 9e 00 48 	beq-    cr7,1784 <__sctp_connect+0x124>
    1740:	80 01 00 b8 	lwz     r0,184(r1)
    1744:	90 01 00 54 	stw     r0,84(r1)
    1748:	38 00 00 0a 	li      r0,10
    174c:	90 01 00 58 	stw     r0,88(r1)

/* Is the socket in this state? */
#define sctp_sstate(sk, state) __sctp_sstate((sk), (SCTP_SS_##state))
static inline int __sctp_sstate(const struct sock *sk, sctp_sock_state_t state)
{
	return sk->sk_state == state;
    1750:	80 01 00 54 	lwz     r0,84(r1)
    1754:	7c 0b 03 78 	mr      r11,r0
    1758:	88 0b 00 0e 	lbz     r0,14(r11)
    175c:	54 00 06 3e 	clrlwi  r0,r0,24
    1760:	81 21 00 58 	lwz     r9,88(r1)
    1764:	7f 89 00 00 	cmpw    cr7,r9,r0
    1768:	7c 00 00 26 	mfcr    r0
    176c:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
	    (sctp_style(sk, TCP) && sctp_sstate(sk, LISTENING))) {
    1770:	2f 80 00 00 	cmpwi   cr7,r0,0
    1774:	41 9e 00 10 	beq-    cr7,1784 <__sctp_connect+0x124>
		err = -EISCONN;
    1778:	38 00 ff 96 	li      r0,-106
    177c:	90 01 00 0c 	stw     r0,12(r1)
		goto out_free;
    1780:	48 00 05 8c 	b       1d0c <__sctp_connect+0x6ac>
	}

	/* Walk through the addrs buffer and count the number of addresses. */
	addr_buf = kaddrs;
    1784:	80 01 00 bc 	lwz     r0,188(r1)
    1788:	90 01 00 1c 	stw     r0,28(r1)
	while (walk_size < addrs_size) {
    178c:	48 00 03 cc 	b       1b58 <__sctp_connect+0x4f8>
		if (walk_size + sizeof(sa_family_t) > addrs_size) {
    1790:	80 01 00 14 	lwz     r0,20(r1)
    1794:	31 20 00 02 	addic   r9,r0,2
    1798:	80 01 00 c0 	lwz     r0,192(r1)
    179c:	7f 89 00 40 	cmplw   cr7,r9,r0
    17a0:	40 9d 00 10 	ble-    cr7,17b0 <__sctp_connect+0x150>
			err = -EINVAL;
    17a4:	38 00 ff ea 	li      r0,-22
    17a8:	90 01 00 0c 	stw     r0,12(r1)
			goto out_free;
    17ac:	48 00 05 60 	b       1d0c <__sctp_connect+0x6ac>
		}

		sa_addr = (union sctp_addr *)addr_buf;
    17b0:	80 01 00 1c 	lwz     r0,28(r1)
    17b4:	90 01 00 18 	stw     r0,24(r1)
		af = sctp_get_af_specific(sa_addr->sa.sa_family);
    17b8:	80 01 00 18 	lwz     r0,24(r1)
    17bc:	7c 09 03 78 	mr      r9,r0
    17c0:	a0 09 00 00 	lhz     r0,0(r9)
    17c4:	54 00 04 3e 	clrlwi  r0,r0,16
    17c8:	7c 03 03 78 	mr      r3,r0
    17cc:	48 00 00 01 	bl      17cc <__sctp_connect+0x16c>
    17d0:	90 61 00 2c 	stw     r3,44(r1)

		/* If the address family is not supported or if this address
		 * causes the address buffer to overflow return EINVAL.
		 */
		if (!af || (walk_size + af->sockaddr_len) > addrs_size) {
    17d4:	80 01 00 2c 	lwz     r0,44(r1)
    17d8:	2f 80 00 00 	cmpwi   cr7,r0,0
    17dc:	41 9e 00 24 	beq-    cr7,1800 <__sctp_connect+0x1a0>
    17e0:	80 01 00 2c 	lwz     r0,44(r1)
    17e4:	7c 0b 03 78 	mr      r11,r0
    17e8:	81 2b 00 6c 	lwz     r9,108(r11)
    17ec:	80 01 00 14 	lwz     r0,20(r1)
    17f0:	7d 29 02 14 	add     r9,r9,r0
    17f4:	80 01 00 c0 	lwz     r0,192(r1)
    17f8:	7f 89 00 00 	cmpw    cr7,r9,r0
    17fc:	40 9d 00 10 	ble-    cr7,180c <__sctp_connect+0x1ac>
			err = -EINVAL;
    1800:	38 00 ff ea 	li      r0,-22
    1804:	90 01 00 0c 	stw     r0,12(r1)
			goto out_free;
    1808:	48 00 05 04 	b       1d0c <__sctp_connect+0x6ac>
		}

		port = ntohs(sa_addr->v4.sin_port);
    180c:	80 01 00 18 	lwz     r0,24(r1)
    1810:	7c 09 03 78 	mr      r9,r0
    1814:	a0 09 00 02 	lhz     r0,2(r9)
    1818:	b0 01 00 30 	sth     r0,48(r1)

		/* Save current address so we can work with it */
		memcpy(&to, sa_addr, af->sockaddr_len);
    181c:	80 01 00 2c 	lwz     r0,44(r1)
    1820:	7c 0b 03 78 	mr      r11,r0
    1824:	80 0b 00 6c 	lwz     r0,108(r11)
    1828:	39 61 00 8c 	addi    r11,r1,140
    182c:	81 21 00 18 	lwz     r9,24(r1)
    1830:	7d 63 5b 78 	mr      r3,r11
    1834:	7d 24 4b 78 	mr      r4,r9
    1838:	7c 05 03 78 	mr      r5,r0
    183c:	48 00 00 01 	bl      183c <__sctp_connect+0x1dc>

		err = sctp_verify_addr(sk, &to, af->sockaddr_len);
    1840:	80 01 00 2c 	lwz     r0,44(r1)
    1844:	7c 09 03 78 	mr      r9,r0
    1848:	80 09 00 6c 	lwz     r0,108(r9)
    184c:	81 21 00 b8 	lwz     r9,184(r1)
    1850:	91 21 00 5c 	stw     r9,92(r1)
    1854:	39 21 00 8c 	addi    r9,r1,140
    1858:	91 21 00 60 	stw     r9,96(r1)
    185c:	90 01 00 64 	stw     r0,100(r1)
    1860:	80 01 00 5c 	lwz     r0,92(r1)
    1864:	90 01 00 68 	stw     r0,104(r1)
    1868:	80 01 00 68 	lwz     r0,104(r1)
				   int len)
{
	struct sctp_af *af;

	/* Verify basic sockaddr. */
	af = sctp_sockaddr_af(sctp_sk(sk), addr, len);
    186c:	7c 03 03 78 	mr      r3,r0
    1870:	80 81 00 60 	lwz     r4,96(r1)
    1874:	80 a1 00 64 	lwz     r5,100(r1)
    1878:	4b ff eb 01 	bl      378 <sctp_sockaddr_af>
    187c:	90 61 00 6c 	stw     r3,108(r1)
	if (!af)
    1880:	80 01 00 6c 	lwz     r0,108(r1)
    1884:	2f 80 00 00 	cmpwi   cr7,r0,0
    1888:	40 9e 00 0c 	bne-    cr7,1894 <__sctp_connect+0x234>
		return -EINVAL;
    188c:	38 00 ff ea 	li      r0,-22
    1890:	48 00 00 94 	b       1924 <__sctp_connect+0x2c4>

	/* Is this a valid SCTP address?  */
	if (!af->addr_valid(addr, sctp_sk(sk), NULL))
    1894:	80 01 00 6c 	lwz     r0,108(r1)
    1898:	7c 0b 03 78 	mr      r11,r0
    189c:	80 0b 00 44 	lwz     r0,68(r11)
    18a0:	81 21 00 5c 	lwz     r9,92(r1)
    18a4:	91 21 00 70 	stw     r9,112(r1)
    18a8:	81 21 00 70 	lwz     r9,112(r1)
    18ac:	80 61 00 60 	lwz     r3,96(r1)
    18b0:	7d 24 4b 78 	mr      r4,r9
    18b4:	38 a0 00 00 	li      r5,0
    18b8:	7c 09 03 a6 	mtctr   r0
    18bc:	4e 80 04 21 	bctrl
    18c0:	7c 60 1b 78 	mr      r0,r3
    18c4:	2f 80 00 00 	cmpwi   cr7,r0,0
    18c8:	40 9e 00 0c 	bne-    cr7,18d4 <__sctp_connect+0x274>
		return -EINVAL;
    18cc:	38 00 ff ea 	li      r0,-22
    18d0:	48 00 00 54 	b       1924 <__sctp_connect+0x2c4>
    18d4:	80 01 00 5c 	lwz     r0,92(r1)
    18d8:	90 01 00 74 	stw     r0,116(r1)
    18dc:	80 01 00 74 	lwz     r0,116(r1)

	if (!sctp_sk(sk)->pf->send_verify(sctp_sk(sk), (addr)))
    18e0:	7c 09 03 78 	mr      r9,r0
    18e4:	80 09 01 cc 	lwz     r0,460(r9)
    18e8:	7c 0b 03 78 	mr      r11,r0
    18ec:	80 0b 00 14 	lwz     r0,20(r11)
    18f0:	81 21 00 5c 	lwz     r9,92(r1)
    18f4:	91 21 00 78 	stw     r9,120(r1)
    18f8:	81 21 00 78 	lwz     r9,120(r1)
    18fc:	7d 23 4b 78 	mr      r3,r9
    1900:	80 81 00 60 	lwz     r4,96(r1)
    1904:	7c 09 03 a6 	mtctr   r0
    1908:	4e 80 04 21 	bctrl
    190c:	7c 60 1b 78 	mr      r0,r3
    1910:	2f 80 00 00 	cmpwi   cr7,r0,0
    1914:	40 9e 00 0c 	bne-    cr7,1920 <__sctp_connect+0x2c0>
		return -EINVAL;
    1918:	38 00 ff ea 	li      r0,-22
    191c:	48 00 00 08 	b       1924 <__sctp_connect+0x2c4>

	return 0;
    1920:	38 00 00 00 	li      r0,0
		port = ntohs(sa_addr->v4.sin_port);

		/* Save current address so we can work with it */
		memcpy(&to, sa_addr, af->sockaddr_len);

		err = sctp_verify_addr(sk, &to, af->sockaddr_len);
    1924:	90 01 00 0c 	stw     r0,12(r1)
		if (err)
    1928:	80 01 00 0c 	lwz     r0,12(r1)
    192c:	2f 80 00 00 	cmpwi   cr7,r0,0
    1930:	40 9e 03 b8 	bne-    cr7,1ce8 <__sctp_connect+0x688>
			goto out_free;

		/* Make sure the destination port is correctly set
		 * in all addresses.
		 */
		if (asoc && asoc->peer.port && asoc->peer.port != port)
    1934:	80 01 00 08 	lwz     r0,8(r1)
    1938:	2f 80 00 00 	cmpwi   cr7,r0,0
    193c:	41 9e 00 3c 	beq-    cr7,1978 <__sctp_connect+0x318>
    1940:	80 01 00 08 	lwz     r0,8(r1)
    1944:	7c 09 03 78 	mr      r9,r0
    1948:	a0 09 00 f2 	lhz     r0,242(r9)
    194c:	54 00 04 3e 	clrlwi  r0,r0,16
    1950:	2f 80 00 00 	cmpwi   cr7,r0,0
    1954:	41 9e 00 24 	beq-    cr7,1978 <__sctp_connect+0x318>
    1958:	80 01 00 08 	lwz     r0,8(r1)
    195c:	7c 0b 03 78 	mr      r11,r0
    1960:	a0 0b 00 f2 	lhz     r0,242(r11)
    1964:	54 00 04 3e 	clrlwi  r0,r0,16
    1968:	a1 21 00 30 	lhz     r9,48(r1)
    196c:	55 29 04 3e 	clrlwi  r9,r9,16
    1970:	7f 89 00 00 	cmpw    cr7,r9,r0
    1974:	40 9e 03 7c 	bne-    cr7,1cf0 <__sctp_connect+0x690>


		/* Check if there already is a matching association on the
		 * endpoint (other than the one created here).
		 */
		asoc2 = sctp_endpoint_lookup_assoc(ep, &to, &transport);
    1978:	39 21 00 8c 	addi    r9,r1,140
    197c:	38 01 00 88 	addi    r0,r1,136
    1980:	80 61 00 28 	lwz     r3,40(r1)
    1984:	7d 24 4b 78 	mr      r4,r9
    1988:	7c 05 03 78 	mr      r5,r0
    198c:	48 00 00 01 	bl      198c <__sctp_connect+0x32c>
    1990:	90 61 00 34 	stw     r3,52(r1)
		if (asoc2 && asoc2 != asoc) {
    1994:	80 01 00 34 	lwz     r0,52(r1)
    1998:	2f 80 00 00 	cmpwi   cr7,r0,0
    199c:	41 9e 00 40 	beq-    cr7,19dc <__sctp_connect+0x37c>
    19a0:	81 21 00 34 	lwz     r9,52(r1)
    19a4:	80 01 00 08 	lwz     r0,8(r1)
    19a8:	7f 89 00 00 	cmpw    cr7,r9,r0
    19ac:	41 9e 00 30 	beq-    cr7,19dc <__sctp_connect+0x37c>
			if (asoc2->state >= SCTP_STATE_ESTABLISHED)
    19b0:	80 01 00 34 	lwz     r0,52(r1)
    19b4:	7c 09 03 78 	mr      r9,r0
    19b8:	80 09 01 b8 	lwz     r0,440(r9)
    19bc:	2b 80 00 03 	cmplwi  cr7,r0,3
    19c0:	40 9d 00 10 	ble-    cr7,19d0 <__sctp_connect+0x370>
				err = -EISCONN;
    19c4:	38 00 ff 96 	li      r0,-106
    19c8:	90 01 00 0c 	stw     r0,12(r1)
			else
				err = -EALREADY;
			goto out_free;
    19cc:	48 00 03 40 	b       1d0c <__sctp_connect+0x6ac>
		asoc2 = sctp_endpoint_lookup_assoc(ep, &to, &transport);
		if (asoc2 && asoc2 != asoc) {
			if (asoc2->state >= SCTP_STATE_ESTABLISHED)
				err = -EISCONN;
			else
				err = -EALREADY;
    19d0:	38 00 ff 8e 	li      r0,-114
    19d4:	90 01 00 0c 	stw     r0,12(r1)
			goto out_free;
    19d8:	48 00 03 34 	b       1d0c <__sctp_connect+0x6ac>

		/* If we could not find a matching association on the endpoint,
		 * make sure that there is no peeled-off association matching
		 * the peer address even on another socket.
		 */
		if (sctp_endpoint_is_peeled_off(ep, &to)) {
    19dc:	38 01 00 8c 	addi    r0,r1,140
    19e0:	80 61 00 28 	lwz     r3,40(r1)
    19e4:	7c 04 03 78 	mr      r4,r0
    19e8:	48 00 00 01 	bl      19e8 <__sctp_connect+0x388>
    19ec:	7c 60 1b 78 	mr      r0,r3
    19f0:	2f 80 00 00 	cmpwi   cr7,r0,0
    19f4:	41 9e 00 10 	beq-    cr7,1a04 <__sctp_connect+0x3a4>
			err = -EADDRNOTAVAIL;
    19f8:	38 00 ff 9d 	li      r0,-99
    19fc:	90 01 00 0c 	stw     r0,12(r1)
			goto out_free;
    1a00:	48 00 03 0c 	b       1d0c <__sctp_connect+0x6ac>
		}

		if (!asoc) {
    1a04:	80 01 00 08 	lwz     r0,8(r1)
    1a08:	2f 80 00 00 	cmpwi   cr7,r0,0
    1a0c:	40 9e 00 d4 	bne-    cr7,1ae0 <__sctp_connect+0x480>
			/* If a bind() or sctp_bindx() is not called prior to
			 * an sctp_connectx() call, the system picks an
			 * ephemeral port and will choose an address set
			 * equivalent to binding with a wildcard address.
			 */
			if (!ep->base.bind_addr.port) {
    1a10:	80 01 00 28 	lwz     r0,40(r1)
    1a14:	7c 0b 03 78 	mr      r11,r0
    1a18:	a0 0b 00 3c 	lhz     r0,60(r11)
    1a1c:	54 00 04 3e 	clrlwi  r0,r0,16
    1a20:	2f 80 00 00 	cmpwi   cr7,r0,0
    1a24:	40 9e 00 24 	bne-    cr7,1a48 <__sctp_connect+0x3e8>
				if (sctp_autobind(sk)) {
    1a28:	80 61 00 b8 	lwz     r3,184(r1)
    1a2c:	48 00 ee f1 	bl      1091c <sctp_autobind>
    1a30:	7c 60 1b 78 	mr      r0,r3
    1a34:	2f 80 00 00 	cmpwi   cr7,r0,0
    1a38:	41 9e 00 48 	beq-    cr7,1a80 <__sctp_connect+0x420>
					err = -EAGAIN;
    1a3c:	38 00 ff f5 	li      r0,-11
    1a40:	90 01 00 0c 	stw     r0,12(r1)
					goto out_free;
    1a44:	48 00 02 c8 	b       1d0c <__sctp_connect+0x6ac>
				 * style socket with open associations on a
				 * privileged port, it MAY be permitted to
				 * accept new associations, but it SHOULD NOT
				 * be permitted to open new associations.
				 */
				if (ep->base.bind_addr.port < PROT_SOCK &&
    1a48:	80 01 00 28 	lwz     r0,40(r1)
    1a4c:	7c 09 03 78 	mr      r9,r0
    1a50:	a0 09 00 3c 	lhz     r0,60(r9)
    1a54:	54 00 04 3e 	clrlwi  r0,r0,16
    1a58:	2b 80 03 ff 	cmplwi  cr7,r0,1023
    1a5c:	41 9d 00 24 	bgt-    cr7,1a80 <__sctp_connect+0x420>
				    !capable(CAP_NET_BIND_SERVICE)) {
    1a60:	38 60 00 0a 	li      r3,10
    1a64:	48 00 00 01 	bl      1a64 <__sctp_connect+0x404>
    1a68:	7c 60 1b 78 	mr      r0,r3
				 * style socket with open associations on a
				 * privileged port, it MAY be permitted to
				 * accept new associations, but it SHOULD NOT
				 * be permitted to open new associations.
				 */
				if (ep->base.bind_addr.port < PROT_SOCK &&
    1a6c:	2f 80 00 00 	cmpwi   cr7,r0,0
    1a70:	40 9e 00 10 	bne-    cr7,1a80 <__sctp_connect+0x420>
				    !capable(CAP_NET_BIND_SERVICE)) {
					err = -EACCES;
    1a74:	38 00 ff f3 	li      r0,-13
    1a78:	90 01 00 0c 	stw     r0,12(r1)
					goto out_free;
    1a7c:	48 00 02 90 	b       1d0c <__sctp_connect+0x6ac>
				}
			}

			scope = sctp_scope(&to);
    1a80:	38 01 00 8c 	addi    r0,r1,140
    1a84:	7c 03 03 78 	mr      r3,r0
    1a88:	48 00 00 01 	bl      1a88 <__sctp_connect+0x428>
    1a8c:	90 61 00 38 	stw     r3,56(r1)
			asoc = sctp_association_new(ep, sk, scope, GFP_KERNEL);
    1a90:	80 61 00 28 	lwz     r3,40(r1)
    1a94:	80 81 00 b8 	lwz     r4,184(r1)
    1a98:	80 a1 00 38 	lwz     r5,56(r1)
    1a9c:	38 c0 00 d0 	li      r6,208
    1aa0:	48 00 00 01 	bl      1aa0 <__sctp_connect+0x440>
    1aa4:	90 61 00 08 	stw     r3,8(r1)
			if (!asoc) {
    1aa8:	80 01 00 08 	lwz     r0,8(r1)
    1aac:	2f 80 00 00 	cmpwi   cr7,r0,0
    1ab0:	40 9e 00 10 	bne-    cr7,1ac0 <__sctp_connect+0x460>
				err = -ENOMEM;
    1ab4:	38 00 ff f4 	li      r0,-12
    1ab8:	90 01 00 0c 	stw     r0,12(r1)
				goto out_free;
    1abc:	48 00 02 50 	b       1d0c <__sctp_connect+0x6ac>
			}

			err = sctp_assoc_set_bind_addr_from_ep(asoc, scope,
    1ac0:	80 61 00 08 	lwz     r3,8(r1)
    1ac4:	80 81 00 38 	lwz     r4,56(r1)
    1ac8:	38 a0 00 d0 	li      r5,208
    1acc:	48 00 00 01 	bl      1acc <__sctp_connect+0x46c>
    1ad0:	90 61 00 0c 	stw     r3,12(r1)
							      GFP_KERNEL);
			if (err < 0) {
    1ad4:	80 01 00 0c 	lwz     r0,12(r1)
    1ad8:	2f 80 00 00 	cmpwi   cr7,r0,0
    1adc:	41 9c 02 1c 	blt-    cr7,1cf8 <__sctp_connect+0x698>
			}

		}

		/* Prime the peer's transport structures.  */
		transport = sctp_assoc_add_peer(asoc, &to, GFP_KERNEL,
    1ae0:	38 01 00 8c 	addi    r0,r1,140
    1ae4:	80 61 00 08 	lwz     r3,8(r1)
    1ae8:	7c 04 03 78 	mr      r4,r0
    1aec:	38 a0 00 d0 	li      r5,208
    1af0:	38 00 00 00 	li      r0,0
    1af4:	60 06 ff ff 	ori     r6,r0,65535
    1af8:	48 00 00 01 	bl      1af8 <__sctp_connect+0x498>
    1afc:	7c 60 1b 78 	mr      r0,r3
    1b00:	90 01 00 88 	stw     r0,136(r1)
						SCTP_UNKNOWN);
		if (!transport) {
    1b04:	80 01 00 88 	lwz     r0,136(r1)
    1b08:	2f 80 00 00 	cmpwi   cr7,r0,0
    1b0c:	40 9e 00 10 	bne-    cr7,1b1c <__sctp_connect+0x4bc>
			err = -ENOMEM;
    1b10:	38 00 ff f4 	li      r0,-12
    1b14:	90 01 00 0c 	stw     r0,12(r1)
			goto out_free;
    1b18:	48 00 01 f4 	b       1d0c <__sctp_connect+0x6ac>
		}

		addrcnt++;
    1b1c:	80 01 00 10 	lwz     r0,16(r1)
    1b20:	30 00 00 01 	addic   r0,r0,1
    1b24:	90 01 00 10 	stw     r0,16(r1)
		addr_buf += af->sockaddr_len;
    1b28:	80 01 00 2c 	lwz     r0,44(r1)
    1b2c:	7c 0b 03 78 	mr      r11,r0
    1b30:	80 0b 00 6c 	lwz     r0,108(r11)
    1b34:	81 21 00 1c 	lwz     r9,28(r1)
    1b38:	7c 09 02 14 	add     r0,r9,r0
    1b3c:	90 01 00 1c 	stw     r0,28(r1)
		walk_size += af->sockaddr_len;
    1b40:	80 01 00 2c 	lwz     r0,44(r1)
    1b44:	7c 09 03 78 	mr      r9,r0
    1b48:	80 09 00 6c 	lwz     r0,108(r9)
    1b4c:	81 21 00 14 	lwz     r9,20(r1)
    1b50:	7c 09 02 14 	add     r0,r9,r0
    1b54:	90 01 00 14 	stw     r0,20(r1)
		goto out_free;
	}

	/* Walk through the addrs buffer and count the number of addresses. */
	addr_buf = kaddrs;
	while (walk_size < addrs_size) {
    1b58:	81 21 00 14 	lwz     r9,20(r1)
    1b5c:	80 01 00 c0 	lwz     r0,192(r1)
    1b60:	7f 89 00 00 	cmpw    cr7,r9,r0
    1b64:	41 9c fc 2c 	blt+    cr7,1790 <__sctp_connect+0x130>
	}

	/* In case the user of sctp_connectx() wants an association
	 * id back, assign one now.
	 */
	if (assoc_id) {
    1b68:	80 01 00 c4 	lwz     r0,196(r1)
    1b6c:	2f 80 00 00 	cmpwi   cr7,r0,0
    1b70:	41 9e 00 20 	beq-    cr7,1b90 <__sctp_connect+0x530>
		err = sctp_assoc_set_id(asoc, GFP_KERNEL);
    1b74:	80 61 00 08 	lwz     r3,8(r1)
    1b78:	38 80 00 d0 	li      r4,208
    1b7c:	48 00 00 01 	bl      1b7c <__sctp_connect+0x51c>
    1b80:	90 61 00 0c 	stw     r3,12(r1)
		if (err < 0)
    1b84:	80 01 00 0c 	lwz     r0,12(r1)
    1b88:	2f 80 00 00 	cmpwi   cr7,r0,0
    1b8c:	41 9c 01 74 	blt-    cr7,1d00 <__sctp_connect+0x6a0>
			goto out_free;
	}

	err = sctp_primitive_ASSOCIATE(asoc, NULL);
    1b90:	80 61 00 08 	lwz     r3,8(r1)
    1b94:	38 80 00 00 	li      r4,0
    1b98:	48 00 00 01 	bl      1b98 <__sctp_connect+0x538>
    1b9c:	90 61 00 0c 	stw     r3,12(r1)
	if (err < 0) {
    1ba0:	80 01 00 0c 	lwz     r0,12(r1)
    1ba4:	2f 80 00 00 	cmpwi   cr7,r0,0
    1ba8:	41 9c 01 60 	blt-    cr7,1d08 <__sctp_connect+0x6a8>
		goto out_free;
    1bac:	80 01 00 b8 	lwz     r0,184(r1)
    1bb0:	90 01 00 7c 	stw     r0,124(r1)
    1bb4:	80 01 00 7c 	lwz     r0,124(r1)
	}

	/* Initialize sk's dport and daddr for getpeername() */
	inet_sk(sk)->inet_dport = htons(asoc->peer.port);
    1bb8:	81 21 00 08 	lwz     r9,8(r1)
    1bbc:	a1 29 00 f2 	lhz     r9,242(r9)
    1bc0:	55 29 04 3e 	clrlwi  r9,r9,16
    1bc4:	7c 0b 03 78 	mr      r11,r0
    1bc8:	b1 2b 01 4c 	sth     r9,332(r11)
	af = sctp_get_af_specific(sa_addr->sa.sa_family);
    1bcc:	80 01 00 18 	lwz     r0,24(r1)
    1bd0:	7c 09 03 78 	mr      r9,r0
    1bd4:	a0 09 00 00 	lhz     r0,0(r9)
    1bd8:	54 00 04 3e 	clrlwi  r0,r0,16
    1bdc:	7c 03 03 78 	mr      r3,r0
    1be0:	48 00 00 01 	bl      1be0 <__sctp_connect+0x580>
    1be4:	90 61 00 2c 	stw     r3,44(r1)
	af->to_sk_daddr(sa_addr, sk);
    1be8:	80 01 00 2c 	lwz     r0,44(r1)
    1bec:	7c 0b 03 78 	mr      r11,r0
    1bf0:	80 0b 00 38 	lwz     r0,56(r11)
    1bf4:	80 61 00 18 	lwz     r3,24(r1)
    1bf8:	80 81 00 b8 	lwz     r4,184(r1)
    1bfc:	7c 09 03 a6 	mtctr   r0
    1c00:	4e 80 04 21 	bctrl
	sk->sk_err = 0;
    1c04:	80 01 00 b8 	lwz     r0,184(r1)
    1c08:	39 20 00 00 	li      r9,0
    1c0c:	7c 0b 03 78 	mr      r11,r0
    1c10:	91 2b 00 c8 	stw     r9,200(r11)

	/* in-kernel sockets don't generally have a file allocated to them
	 * if all they do is call sock_create_kern().
	 */
	if (sk->sk_socket->file)
    1c14:	80 01 00 b8 	lwz     r0,184(r1)
    1c18:	7c 09 03 78 	mr      r9,r0
    1c1c:	80 09 01 10 	lwz     r0,272(r9)
    1c20:	7c 0b 03 78 	mr      r11,r0
    1c24:	80 0b 00 10 	lwz     r0,16(r11)
    1c28:	2f 80 00 00 	cmpwi   cr7,r0,0
    1c2c:	41 9e 00 24 	beq-    cr7,1c50 <__sctp_connect+0x5f0>
		f_flags = sk->sk_socket->file->f_flags;
    1c30:	80 01 00 b8 	lwz     r0,184(r1)
    1c34:	7c 09 03 78 	mr      r9,r0
    1c38:	80 09 01 10 	lwz     r0,272(r9)
    1c3c:	7c 0b 03 78 	mr      r11,r0
    1c40:	80 0b 00 10 	lwz     r0,16(r11)
    1c44:	7c 09 03 78 	mr      r9,r0
    1c48:	80 09 00 18 	lwz     r0,24(r9)
    1c4c:	90 01 00 20 	stw     r0,32(r1)

	timeo = sock_sndtimeo(sk, f_flags & O_NONBLOCK);
    1c50:	80 01 00 20 	lwz     r0,32(r1)
    1c54:	54 00 05 28 	rlwinm  r0,r0,0,20,20
    1c58:	81 21 00 b8 	lwz     r9,184(r1)
    1c5c:	91 21 00 80 	stw     r9,128(r1)
    1c60:	90 01 00 84 	stw     r0,132(r1)
	return noblock ? 0 : sk->sk_rcvtimeo;
}

static inline long sock_sndtimeo(const struct sock *sk, int noblock)
{
	return noblock ? 0 : sk->sk_sndtimeo;
    1c64:	80 01 00 84 	lwz     r0,132(r1)
    1c68:	2f 80 00 00 	cmpwi   cr7,r0,0
    1c6c:	40 9e 00 14 	bne-    cr7,1c80 <__sctp_connect+0x620>
    1c70:	80 01 00 80 	lwz     r0,128(r1)
    1c74:	7c 0b 03 78 	mr      r11,r0
    1c78:	80 0b 00 e4 	lwz     r0,228(r11)
    1c7c:	48 00 00 08 	b       1c84 <__sctp_connect+0x624>
    1c80:	38 00 00 00 	li      r0,0
    1c84:	90 01 00 a8 	stw     r0,168(r1)

	err = sctp_wait_for_connect(asoc, &timeo);
    1c88:	38 01 00 a8 	addi    r0,r1,168
    1c8c:	80 61 00 08 	lwz     r3,8(r1)
    1c90:	7c 04 03 78 	mr      r4,r0
    1c94:	48 01 01 81 	bl      11e14 <sctp_wait_for_connect>
    1c98:	90 61 00 0c 	stw     r3,12(r1)
	if ((err == 0 || err == -EINPROGRESS) && assoc_id)
    1c9c:	80 01 00 0c 	lwz     r0,12(r1)
    1ca0:	2f 80 00 00 	cmpwi   cr7,r0,0
    1ca4:	41 9e 00 14 	beq-    cr7,1cb8 <__sctp_connect+0x658>
    1ca8:	81 21 00 0c 	lwz     r9,12(r1)
    1cac:	38 00 ff 8d 	li      r0,-115
    1cb0:	7f 89 00 00 	cmpw    cr7,r9,r0
    1cb4:	40 9e 00 28 	bne-    cr7,1cdc <__sctp_connect+0x67c>
    1cb8:	80 01 00 c4 	lwz     r0,196(r1)
    1cbc:	2f 80 00 00 	cmpwi   cr7,r0,0
    1cc0:	41 9e 00 1c 	beq-    cr7,1cdc <__sctp_connect+0x67c>
		*assoc_id = asoc->assoc_id;
    1cc4:	80 01 00 08 	lwz     r0,8(r1)
    1cc8:	7c 0b 03 78 	mr      r11,r0
    1ccc:	81 2b 00 54 	lwz     r9,84(r11)
    1cd0:	80 01 00 c4 	lwz     r0,196(r1)
    1cd4:	7c 0b 03 78 	mr      r11,r0
    1cd8:	91 2b 00 00 	stw     r9,0(r11)

	/* Don't free association on exit. */
	asoc = NULL;
    1cdc:	38 00 00 00 	li      r0,0
    1ce0:	90 01 00 08 	stw     r0,8(r1)
    1ce4:	48 00 00 28 	b       1d0c <__sctp_connect+0x6ac>
		/* Save current address so we can work with it */
		memcpy(&to, sa_addr, af->sockaddr_len);

		err = sctp_verify_addr(sk, &to, af->sockaddr_len);
		if (err)
			goto out_free;
    1ce8:	60 00 00 00 	nop
    1cec:	48 00 00 20 	b       1d0c <__sctp_connect+0x6ac>

		/* Make sure the destination port is correctly set
		 * in all addresses.
		 */
		if (asoc && asoc->peer.port && asoc->peer.port != port)
			goto out_free;
    1cf0:	60 00 00 00 	nop
    1cf4:	48 00 00 18 	b       1d0c <__sctp_connect+0x6ac>
			}

			err = sctp_assoc_set_bind_addr_from_ep(asoc, scope,
							      GFP_KERNEL);
			if (err < 0) {
				goto out_free;
    1cf8:	60 00 00 00 	nop
    1cfc:	48 00 00 10 	b       1d0c <__sctp_connect+0x6ac>
	 * id back, assign one now.
	 */
	if (assoc_id) {
		err = sctp_assoc_set_id(asoc, GFP_KERNEL);
		if (err < 0)
			goto out_free;
    1d00:	60 00 00 00 	nop
    1d04:	48 00 00 08 	b       1d0c <__sctp_connect+0x6ac>
	}

	err = sctp_primitive_ASSOCIATE(asoc, NULL);
	if (err < 0) {
		goto out_free;
    1d08:	60 00 00 00 	nop
out_free:

	SCTP_DEBUG_PRINTK("About to exit __sctp_connect() free asoc: %p"
			  " kaddrs: %p err: %d\n",
			  asoc, kaddrs, err);
	if (asoc)
    1d0c:	80 01 00 08 	lwz     r0,8(r1)
    1d10:	2f 80 00 00 	cmpwi   cr7,r0,0
    1d14:	41 9e 00 0c 	beq-    cr7,1d20 <__sctp_connect+0x6c0>
		sctp_association_free(asoc);
    1d18:	80 61 00 08 	lwz     r3,8(r1)
    1d1c:	48 00 00 01 	bl      1d1c <__sctp_connect+0x6bc>
	return err;
    1d20:	80 01 00 0c 	lwz     r0,12(r1)
}
    1d24:	7c 03 03 78 	mr      r3,r0
    1d28:	80 01 00 d4 	lwz     r0,212(r1)
    1d2c:	7c 08 03 a6 	mtlr    r0
    1d30:	38 21 00 d0 	addi    r1,r1,208
    1d34:	4e 80 00 20 	blr

00001d38 <__sctp_setsockopt_connectx>:
 */
SCTP_STATIC int __sctp_setsockopt_connectx(struct sock* sk,
				      struct sockaddr __user *addrs,
				      int addrs_size,
				      sctp_assoc_t *assoc_id)
{
    1d38:	94 21 ff b0 	stwu    r1,-80(r1)
    1d3c:	7c 08 02 a6 	mflr    r0
    1d40:	90 01 00 54 	stw     r0,84(r1)
    1d44:	90 61 00 38 	stw     r3,56(r1)
    1d48:	90 81 00 3c 	stw     r4,60(r1)
    1d4c:	90 a1 00 40 	stw     r5,64(r1)
    1d50:	90 c1 00 44 	stw     r6,68(r1)
	int err = 0;
    1d54:	38 00 00 00 	li      r0,0
    1d58:	90 01 00 08 	stw     r0,8(r1)
	struct sockaddr *kaddrs;

	SCTP_DEBUG_PRINTK("%s - sk %p addrs %p addrs_size %d\n",
			  __func__, sk, addrs, addrs_size);

	if (unlikely(addrs_size <= 0))
    1d5c:	80 01 00 40 	lwz     r0,64(r1)
    1d60:	30 00 ff ff 	addic   r0,r0,-1
    1d64:	81 21 00 40 	lwz     r9,64(r1)
    1d68:	7c 00 4b 78 	or      r0,r0,r9
    1d6c:	54 00 0f fe 	rlwinm  r0,r0,1,31,31
    1d70:	2f 80 00 00 	cmpwi   cr7,r0,0
    1d74:	41 9e 00 0c 	beq-    cr7,1d80 <__sctp_setsockopt_connectx+0x48>
		return -EINVAL;
    1d78:	38 00 ff ea 	li      r0,-22
    1d7c:	48 00 01 38 	b       1eb4 <__sctp_setsockopt_connectx+0x17c>

	/* Check the user passed a healthy pointer.  */
	if (unlikely(!access_ok(VERIFY_READ, addrs, addrs_size)))
    1d80:	81 21 00 3c 	lwz     r9,60(r1)
    1d84:	7c 40 13 78 	mr      r0,r2
    1d88:	7c 0a 03 78 	mr      r10,r0
    1d8c:	80 0a 01 d4 	lwz     r0,468(r10)
    1d90:	7f 89 00 40 	cmplw   cr7,r9,r0
    1d94:	41 9d 00 40 	bgt-    cr7,1dd4 <__sctp_setsockopt_connectx+0x9c>
    1d98:	80 01 00 40 	lwz     r0,64(r1)
    1d9c:	2f 80 00 00 	cmpwi   cr7,r0,0
    1da0:	41 9e 00 2c 	beq-    cr7,1dcc <__sctp_setsockopt_connectx+0x94>
    1da4:	80 01 00 40 	lwz     r0,64(r1)
    1da8:	30 00 ff ff 	addic   r0,r0,-1
    1dac:	7c 09 03 78 	mr      r9,r0
    1db0:	7c 40 13 78 	mr      r0,r2
    1db4:	7c 0a 03 78 	mr      r10,r0
    1db8:	81 6a 01 d4 	lwz     r11,468(r10)
    1dbc:	80 01 00 3c 	lwz     r0,60(r1)
    1dc0:	7c 00 58 50 	subf    r0,r0,r11
    1dc4:	7f 89 00 40 	cmplw   cr7,r9,r0
    1dc8:	41 9d 00 0c 	bgt-    cr7,1dd4 <__sctp_setsockopt_connectx+0x9c>
    1dcc:	38 00 00 01 	li      r0,1
    1dd0:	48 00 00 08 	b       1dd8 <__sctp_setsockopt_connectx+0xa0>
    1dd4:	38 00 00 00 	li      r0,0
    1dd8:	2f 80 00 00 	cmpwi   cr7,r0,0
    1ddc:	7c 00 00 26 	mfcr    r0
    1de0:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
    1de4:	2f 80 00 00 	cmpwi   cr7,r0,0
    1de8:	41 9e 00 0c 	beq-    cr7,1df4 <__sctp_setsockopt_connectx+0xbc>
		return -EFAULT;
    1dec:	38 00 ff f2 	li      r0,-14
    1df0:	48 00 00 c4 	b       1eb4 <__sctp_setsockopt_connectx+0x17c>

	/* Alloc space for the address array in kernel memory.  */
	kaddrs = kmalloc(addrs_size, GFP_KERNEL);
    1df4:	80 01 00 40 	lwz     r0,64(r1)
    1df8:	90 01 00 10 	stw     r0,16(r1)
    1dfc:	38 00 00 d0 	li      r0,208
    1e00:	90 01 00 14 	stw     r0,20(r1)
    1e04:	80 61 00 10 	lwz     r3,16(r1)
    1e08:	80 81 00 14 	lwz     r4,20(r1)
    1e0c:	48 00 00 01 	bl      1e0c <__sctp_setsockopt_connectx+0xd4>
    1e10:	7c 60 1b 78 	mr      r0,r3
    1e14:	90 01 00 0c 	stw     r0,12(r1)
	if (unlikely(!kaddrs))
    1e18:	80 01 00 0c 	lwz     r0,12(r1)
    1e1c:	2f 80 00 00 	cmpwi   cr7,r0,0
    1e20:	7c 00 00 26 	mfcr    r0
    1e24:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
    1e28:	2f 80 00 00 	cmpwi   cr7,r0,0
    1e2c:	41 9e 00 0c 	beq-    cr7,1e38 <__sctp_setsockopt_connectx+0x100>
		return -ENOMEM;
    1e30:	38 00 ff f4 	li      r0,-12
    1e34:	48 00 00 80 	b       1eb4 <__sctp_setsockopt_connectx+0x17c>

	if (__copy_from_user(kaddrs, addrs, addrs_size)) {
    1e38:	80 01 00 40 	lwz     r0,64(r1)
    1e3c:	81 21 00 0c 	lwz     r9,12(r1)
    1e40:	91 21 00 18 	stw     r9,24(r1)
    1e44:	81 21 00 3c 	lwz     r9,60(r1)
    1e48:	91 21 00 1c 	stw     r9,28(r1)
    1e4c:	90 01 00 20 	stw     r0,32(r1)
    1e50:	80 01 00 18 	lwz     r0,24(r1)
    1e54:	90 01 00 24 	stw     r0,36(r1)
    1e58:	80 01 00 1c 	lwz     r0,28(r1)
    1e5c:	90 01 00 28 	stw     r0,40(r1)
    1e60:	80 01 00 20 	lwz     r0,32(r1)
    1e64:	90 01 00 2c 	stw     r0,44(r1)
    1e68:	80 61 00 24 	lwz     r3,36(r1)
    1e6c:	80 81 00 28 	lwz     r4,40(r1)
    1e70:	80 a1 00 2c 	lwz     r5,44(r1)
    1e74:	48 00 00 01 	bl      1e74 <__sctp_setsockopt_connectx+0x13c>
    1e78:	7c 60 1b 78 	mr      r0,r3
    1e7c:	2f 80 00 00 	cmpwi   cr7,r0,0
    1e80:	41 9e 00 10 	beq-    cr7,1e90 <__sctp_setsockopt_connectx+0x158>
		err = -EFAULT;
    1e84:	38 00 ff f2 	li      r0,-14
    1e88:	90 01 00 08 	stw     r0,8(r1)
    1e8c:	48 00 00 1c 	b       1ea8 <__sctp_setsockopt_connectx+0x170>
	} else {
		err = __sctp_connect(sk, kaddrs, addrs_size, assoc_id);
    1e90:	80 61 00 38 	lwz     r3,56(r1)
    1e94:	80 81 00 0c 	lwz     r4,12(r1)
    1e98:	80 a1 00 40 	lwz     r5,64(r1)
    1e9c:	80 c1 00 44 	lwz     r6,68(r1)
    1ea0:	4b ff f7 c1 	bl      1660 <__sctp_connect>
    1ea4:	90 61 00 08 	stw     r3,8(r1)
	}

	kfree(kaddrs);
    1ea8:	80 61 00 0c 	lwz     r3,12(r1)
    1eac:	48 00 00 01 	bl      1eac <__sctp_setsockopt_connectx+0x174>

	return err;
    1eb0:	80 01 00 08 	lwz     r0,8(r1)
}
    1eb4:	7c 03 03 78 	mr      r3,r0
    1eb8:	80 01 00 54 	lwz     r0,84(r1)
    1ebc:	7c 08 03 a6 	mtlr    r0
    1ec0:	38 21 00 50 	addi    r1,r1,80
    1ec4:	4e 80 00 20 	blr

00001ec8 <sctp_setsockopt_connectx_old>:
 * to the option that doesn't provide association id.
 */
SCTP_STATIC int sctp_setsockopt_connectx_old(struct sock* sk,
				      struct sockaddr __user *addrs,
				      int addrs_size)
{
    1ec8:	94 21 ff e0 	stwu    r1,-32(r1)
    1ecc:	7c 08 02 a6 	mflr    r0
    1ed0:	90 01 00 24 	stw     r0,36(r1)
    1ed4:	90 61 00 08 	stw     r3,8(r1)
    1ed8:	90 81 00 0c 	stw     r4,12(r1)
    1edc:	90 a1 00 10 	stw     r5,16(r1)
	return __sctp_setsockopt_connectx(sk, addrs, addrs_size, NULL);
    1ee0:	80 61 00 08 	lwz     r3,8(r1)
    1ee4:	80 81 00 0c 	lwz     r4,12(r1)
    1ee8:	80 a1 00 10 	lwz     r5,16(r1)
    1eec:	38 c0 00 00 	li      r6,0
    1ef0:	4b ff fe 49 	bl      1d38 <__sctp_setsockopt_connectx>
    1ef4:	7c 60 1b 78 	mr      r0,r3
}
    1ef8:	7c 03 03 78 	mr      r3,r0
    1efc:	80 01 00 24 	lwz     r0,36(r1)
    1f00:	7c 08 03 a6 	mtlr    r0
    1f04:	38 21 00 20 	addi    r1,r1,32
    1f08:	4e 80 00 20 	blr

00001f0c <sctp_setsockopt_connectx>:
 * always positive.
 */
SCTP_STATIC int sctp_setsockopt_connectx(struct sock* sk,
				      struct sockaddr __user *addrs,
				      int addrs_size)
{
    1f0c:	94 21 ff d0 	stwu    r1,-48(r1)
    1f10:	7c 08 02 a6 	mflr    r0
    1f14:	90 01 00 34 	stw     r0,52(r1)
    1f18:	90 61 00 18 	stw     r3,24(r1)
    1f1c:	90 81 00 1c 	stw     r4,28(r1)
    1f20:	90 a1 00 20 	stw     r5,32(r1)
	sctp_assoc_t assoc_id = 0;
    1f24:	38 00 00 00 	li      r0,0
    1f28:	90 01 00 0c 	stw     r0,12(r1)
	int err = 0;
    1f2c:	38 00 00 00 	li      r0,0
    1f30:	90 01 00 08 	stw     r0,8(r1)

	err = __sctp_setsockopt_connectx(sk, addrs, addrs_size, &assoc_id);
    1f34:	38 01 00 0c 	addi    r0,r1,12
    1f38:	80 61 00 18 	lwz     r3,24(r1)
    1f3c:	80 81 00 1c 	lwz     r4,28(r1)
    1f40:	80 a1 00 20 	lwz     r5,32(r1)
    1f44:	7c 06 03 78 	mr      r6,r0
    1f48:	4b ff fd f1 	bl      1d38 <__sctp_setsockopt_connectx>
    1f4c:	90 61 00 08 	stw     r3,8(r1)

	if (err)
    1f50:	80 01 00 08 	lwz     r0,8(r1)
    1f54:	2f 80 00 00 	cmpwi   cr7,r0,0
    1f58:	41 9e 00 0c 	beq-    cr7,1f64 <sctp_setsockopt_connectx+0x58>
		return err;
    1f5c:	80 01 00 08 	lwz     r0,8(r1)
    1f60:	48 00 00 08 	b       1f68 <sctp_setsockopt_connectx+0x5c>
	else
		return assoc_id;
    1f64:	80 01 00 0c 	lwz     r0,12(r1)
}
    1f68:	7c 03 03 78 	mr      r3,r0
    1f6c:	80 01 00 34 	lwz     r0,52(r1)
    1f70:	7c 08 03 a6 	mtlr    r0
    1f74:	38 21 00 30 	addi    r1,r1,48
    1f78:	4e 80 00 20 	blr

00001f7c <sctp_getsockopt_connectx3>:
 * code.
 */
SCTP_STATIC int sctp_getsockopt_connectx3(struct sock* sk, int len,
					char __user *optval,
					int __user *optlen)
{
    1f7c:	94 21 ff a0 	stwu    r1,-96(r1)
    1f80:	7c 08 02 a6 	mflr    r0
    1f84:	90 01 00 64 	stw     r0,100(r1)
    1f88:	93 e1 00 5c 	stw     r31,92(r1)
    1f8c:	90 61 00 48 	stw     r3,72(r1)
    1f90:	90 81 00 4c 	stw     r4,76(r1)
    1f94:	90 a1 00 50 	stw     r5,80(r1)
    1f98:	90 c1 00 54 	stw     r6,84(r1)
	struct sctp_getaddrs_old param;
	sctp_assoc_t assoc_id = 0;
    1f9c:	38 00 00 00 	li      r0,0
    1fa0:	90 01 00 40 	stw     r0,64(r1)
	int err = 0;
    1fa4:	38 00 00 00 	li      r0,0
    1fa8:	90 01 00 0c 	stw     r0,12(r1)

	if (len < sizeof(param))
    1fac:	80 01 00 4c 	lwz     r0,76(r1)
    1fb0:	2b 80 00 0b 	cmplwi  cr7,r0,11
    1fb4:	41 9d 00 0c 	bgt-    cr7,1fc0 <sctp_getsockopt_connectx3+0x44>
		return -EINVAL;
    1fb8:	38 00 ff ea 	li      r0,-22
    1fbc:	48 00 02 c8 	b       2284 <sctp_getsockopt_connectx3+0x308>

	if (copy_from_user(&param, optval, sizeof(param)))
    1fc0:	38 01 00 34 	addi    r0,r1,52
	struct sctp_getaddrs_old param;
	sctp_assoc_t assoc_id = 0;
	int err = 0;

	if (len < sizeof(param))
		return -EINVAL;
    1fc4:	90 01 00 14 	stw     r0,20(r1)
    1fc8:	80 01 00 50 	lwz     r0,80(r1)
    1fcc:	90 01 00 18 	stw     r0,24(r1)
    1fd0:	38 00 00 0c 	li      r0,12
    1fd4:	90 01 00 1c 	stw     r0,28(r1)
static inline unsigned long copy_from_user(void *to,
		const void __user *from, unsigned long n)
{
	unsigned long over;

	if (access_ok(VERIFY_READ, from, n))
    1fd8:	81 21 00 18 	lwz     r9,24(r1)
    1fdc:	7c 40 13 78 	mr      r0,r2
    1fe0:	7c 0a 03 78 	mr      r10,r0
    1fe4:	80 0a 01 d4 	lwz     r0,468(r10)
    1fe8:	7f 89 00 40 	cmplw   cr7,r9,r0
    1fec:	41 9d 00 3c 	bgt-    cr7,2028 <sctp_getsockopt_connectx3+0xac>
    1ff0:	80 01 00 1c 	lwz     r0,28(r1)
    1ff4:	2f 80 00 00 	cmpwi   cr7,r0,0
    1ff8:	41 9e 00 28 	beq-    cr7,2020 <sctp_getsockopt_connectx3+0xa4>
    1ffc:	80 01 00 1c 	lwz     r0,28(r1)
    2000:	31 20 ff ff 	addic   r9,r0,-1
    2004:	7c 40 13 78 	mr      r0,r2
    2008:	7c 0a 03 78 	mr      r10,r0
    200c:	81 6a 01 d4 	lwz     r11,468(r10)
    2010:	80 01 00 18 	lwz     r0,24(r1)
    2014:	7c 00 58 50 	subf    r0,r0,r11
    2018:	7f 89 00 40 	cmplw   cr7,r9,r0
    201c:	41 9d 00 0c 	bgt-    cr7,2028 <sctp_getsockopt_connectx3+0xac>
    2020:	38 00 00 01 	li      r0,1
    2024:	48 00 00 08 	b       202c <sctp_getsockopt_connectx3+0xb0>
    2028:	38 00 00 00 	li      r0,0
    202c:	2f 80 00 00 	cmpwi   cr7,r0,0
    2030:	41 9e 00 1c 	beq-    cr7,204c <sctp_getsockopt_connectx3+0xd0>
		return __copy_tofrom_user((__force void __user *)to, from, n);
    2034:	80 61 00 14 	lwz     r3,20(r1)
    2038:	80 81 00 18 	lwz     r4,24(r1)
    203c:	80 a1 00 1c 	lwz     r5,28(r1)
    2040:	48 00 00 01 	bl      2040 <sctp_getsockopt_connectx3+0xc4>
    2044:	7c 60 1b 78 	mr      r0,r3
    2048:	48 00 00 60 	b       20a8 <sctp_getsockopt_connectx3+0x12c>
	if ((unsigned long)from < TASK_SIZE) {
    204c:	81 21 00 18 	lwz     r9,24(r1)
    2050:	3c 00 bf ff 	lis     r0,-16385
    2054:	60 00 ff ff 	ori     r0,r0,65535
    2058:	7f 89 00 40 	cmplw   cr7,r9,r0
    205c:	41 9d 00 48 	bgt-    cr7,20a4 <sctp_getsockopt_connectx3+0x128>
		over = (unsigned long)from + n - TASK_SIZE;
    2060:	81 21 00 18 	lwz     r9,24(r1)
    2064:	80 01 00 1c 	lwz     r0,28(r1)
    2068:	7c 09 02 14 	add     r0,r9,r0
    206c:	3d 60 40 00 	lis     r11,16384
    2070:	7c 00 5a 14 	add     r0,r0,r11
    2074:	90 01 00 20 	stw     r0,32(r1)
		return __copy_tofrom_user((__force void __user *)to, from,
    2078:	81 21 00 1c 	lwz     r9,28(r1)
    207c:	80 01 00 20 	lwz     r0,32(r1)
    2080:	7c 00 48 50 	subf    r0,r0,r9
    2084:	80 61 00 14 	lwz     r3,20(r1)
    2088:	80 81 00 18 	lwz     r4,24(r1)
    208c:	7c 05 03 78 	mr      r5,r0
    2090:	48 00 00 01 	bl      2090 <sctp_getsockopt_connectx3+0x114>
    2094:	7c 69 1b 78 	mr      r9,r3
    2098:	80 01 00 20 	lwz     r0,32(r1)
    209c:	7c 09 02 14 	add     r0,r9,r0
    20a0:	48 00 00 08 	b       20a8 <sctp_getsockopt_connectx3+0x12c>
				n - over) + over;
	}
	return n;
    20a4:	80 01 00 1c 	lwz     r0,28(r1)

	if (copy_from_user(&param, optval, sizeof(param)))
    20a8:	2f 80 00 00 	cmpwi   cr7,r0,0
    20ac:	41 9e 00 0c 	beq-    cr7,20b8 <sctp_getsockopt_connectx3+0x13c>
		return -EFAULT;
    20b0:	38 00 ff f2 	li      r0,-14
    20b4:	48 00 01 d0 	b       2284 <sctp_getsockopt_connectx3+0x308>

	err = __sctp_setsockopt_connectx(sk,
    20b8:	81 61 00 3c 	lwz     r11,60(r1)
    20bc:	81 21 00 38 	lwz     r9,56(r1)
    20c0:	38 01 00 40 	addi    r0,r1,64
    20c4:	80 61 00 48 	lwz     r3,72(r1)
    20c8:	7d 64 5b 78 	mr      r4,r11
    20cc:	7d 25 4b 78 	mr      r5,r9
    20d0:	7c 06 03 78 	mr      r6,r0
    20d4:	4b ff fc 65 	bl      1d38 <__sctp_setsockopt_connectx>
    20d8:	90 61 00 0c 	stw     r3,12(r1)
			(struct sockaddr __user *)param.addrs,
			param.addr_num, &assoc_id);

	if (err == 0 || err == -EINPROGRESS) {
    20dc:	80 01 00 0c 	lwz     r0,12(r1)
    20e0:	2f 80 00 00 	cmpwi   cr7,r0,0
    20e4:	41 9e 00 14 	beq-    cr7,20f8 <sctp_getsockopt_connectx3+0x17c>
    20e8:	81 21 00 0c 	lwz     r9,12(r1)
    20ec:	38 00 ff 8d 	li      r0,-115
    20f0:	7f 89 00 00 	cmpw    cr7,r9,r0
    20f4:	40 9e 01 8c 	bne-    cr7,2280 <sctp_getsockopt_connectx3+0x304>
    20f8:	80 01 00 50 	lwz     r0,80(r1)
    20fc:	90 01 00 24 	stw     r0,36(r1)
		if (copy_to_user(optval, &assoc_id, sizeof(assoc_id)))
    2100:	38 01 00 40 	addi    r0,r1,64

	err = __sctp_setsockopt_connectx(sk,
			(struct sockaddr __user *)param.addrs,
			param.addr_num, &assoc_id);

	if (err == 0 || err == -EINPROGRESS) {
    2104:	90 01 00 28 	stw     r0,40(r1)
    2108:	38 00 00 04 	li      r0,4
    210c:	90 01 00 2c 	stw     r0,44(r1)
static inline unsigned long copy_to_user(void __user *to,
		const void *from, unsigned long n)
{
	unsigned long over;

	if (access_ok(VERIFY_WRITE, to, n))
    2110:	81 21 00 24 	lwz     r9,36(r1)
    2114:	7c 40 13 78 	mr      r0,r2
    2118:	7c 0a 03 78 	mr      r10,r0
    211c:	80 0a 01 d4 	lwz     r0,468(r10)
    2120:	7f 89 00 40 	cmplw   cr7,r9,r0
    2124:	41 9d 00 3c 	bgt-    cr7,2160 <sctp_getsockopt_connectx3+0x1e4>
    2128:	80 01 00 2c 	lwz     r0,44(r1)
    212c:	2f 80 00 00 	cmpwi   cr7,r0,0
    2130:	41 9e 00 28 	beq-    cr7,2158 <sctp_getsockopt_connectx3+0x1dc>
    2134:	80 01 00 2c 	lwz     r0,44(r1)
    2138:	31 20 ff ff 	addic   r9,r0,-1
    213c:	7c 40 13 78 	mr      r0,r2
    2140:	7c 0a 03 78 	mr      r10,r0
    2144:	81 6a 01 d4 	lwz     r11,468(r10)
    2148:	80 01 00 24 	lwz     r0,36(r1)
    214c:	7c 00 58 50 	subf    r0,r0,r11
    2150:	7f 89 00 40 	cmplw   cr7,r9,r0
    2154:	41 9d 00 0c 	bgt-    cr7,2160 <sctp_getsockopt_connectx3+0x1e4>
    2158:	38 00 00 01 	li      r0,1
    215c:	48 00 00 08 	b       2164 <sctp_getsockopt_connectx3+0x1e8>
    2160:	38 00 00 00 	li      r0,0
    2164:	2f 80 00 00 	cmpwi   cr7,r0,0
    2168:	41 9e 00 1c 	beq-    cr7,2184 <sctp_getsockopt_connectx3+0x208>
		return __copy_tofrom_user(to, (__force void __user *)from, n);
    216c:	80 61 00 24 	lwz     r3,36(r1)
    2170:	80 81 00 28 	lwz     r4,40(r1)
    2174:	80 a1 00 2c 	lwz     r5,44(r1)
    2178:	48 00 00 01 	bl      2178 <sctp_getsockopt_connectx3+0x1fc>
    217c:	7c 60 1b 78 	mr      r0,r3
    2180:	48 00 00 60 	b       21e0 <sctp_getsockopt_connectx3+0x264>
	if ((unsigned long)to < TASK_SIZE) {
    2184:	81 21 00 24 	lwz     r9,36(r1)
    2188:	3c 00 bf ff 	lis     r0,-16385
    218c:	60 00 ff ff 	ori     r0,r0,65535
    2190:	7f 89 00 40 	cmplw   cr7,r9,r0
    2194:	41 9d 00 48 	bgt-    cr7,21dc <sctp_getsockopt_connectx3+0x260>
		over = (unsigned long)to + n - TASK_SIZE;
    2198:	81 21 00 24 	lwz     r9,36(r1)
    219c:	80 01 00 2c 	lwz     r0,44(r1)
    21a0:	7c 09 02 14 	add     r0,r9,r0
    21a4:	3d 60 40 00 	lis     r11,16384
    21a8:	7c 00 5a 14 	add     r0,r0,r11
    21ac:	90 01 00 30 	stw     r0,48(r1)
		return __copy_tofrom_user(to, (__force void __user *)from,
    21b0:	81 21 00 2c 	lwz     r9,44(r1)
    21b4:	80 01 00 30 	lwz     r0,48(r1)
    21b8:	7c 00 48 50 	subf    r0,r0,r9
    21bc:	80 61 00 24 	lwz     r3,36(r1)
    21c0:	80 81 00 28 	lwz     r4,40(r1)
    21c4:	7c 05 03 78 	mr      r5,r0
    21c8:	48 00 00 01 	bl      21c8 <sctp_getsockopt_connectx3+0x24c>
    21cc:	7c 69 1b 78 	mr      r9,r3
    21d0:	80 01 00 30 	lwz     r0,48(r1)
    21d4:	7c 09 02 14 	add     r0,r9,r0
    21d8:	48 00 00 08 	b       21e0 <sctp_getsockopt_connectx3+0x264>
				n - over) + over;
	}
	return n;
    21dc:	80 01 00 2c 	lwz     r0,44(r1)
		if (copy_to_user(optval, &assoc_id, sizeof(assoc_id)))
    21e0:	2f 80 00 00 	cmpwi   cr7,r0,0
    21e4:	41 9e 00 0c 	beq-    cr7,21f0 <sctp_getsockopt_connectx3+0x274>
			return -EFAULT;
    21e8:	38 00 ff f2 	li      r0,-14
    21ec:	48 00 00 98 	b       2284 <sctp_getsockopt_connectx3+0x308>
		if (put_user(sizeof(assoc_id), optlen))
    21f0:	38 00 ff f2 	li      r0,-14
    21f4:	90 01 00 08 	stw     r0,8(r1)
    21f8:	80 01 00 54 	lwz     r0,84(r1)
    21fc:	90 01 00 10 	stw     r0,16(r1)
    2200:	81 21 00 10 	lwz     r9,16(r1)
    2204:	7c 40 13 78 	mr      r0,r2
    2208:	7c 0a 03 78 	mr      r10,r0
    220c:	80 0a 01 d4 	lwz     r0,468(r10)
    2210:	7f 89 00 40 	cmplw   cr7,r9,r0
    2214:	41 9d 00 28 	bgt-    cr7,223c <sctp_getsockopt_connectx3+0x2c0>
    2218:	7c 40 13 78 	mr      r0,r2
    221c:	7c 0b 03 78 	mr      r11,r0
    2220:	81 2b 01 d4 	lwz     r9,468(r11)
    2224:	80 01 00 10 	lwz     r0,16(r1)
    2228:	7c 00 48 50 	subf    r0,r0,r9
    222c:	2b 80 00 02 	cmplwi  cr7,r0,2
    2230:	40 9d 00 0c 	ble-    cr7,223c <sctp_getsockopt_connectx3+0x2c0>
    2234:	38 00 00 01 	li      r0,1
    2238:	48 00 00 08 	b       2240 <sctp_getsockopt_connectx3+0x2c4>
    223c:	38 00 00 00 	li      r0,0
    2240:	2f 80 00 00 	cmpwi   cr7,r0,0
    2244:	41 9e 00 28 	beq-    cr7,226c <sctp_getsockopt_connectx3+0x2f0>
    2248:	38 00 00 00 	li      r0,0
    224c:	90 01 00 08 	stw     r0,8(r1)
    2250:	38 00 00 04 	li      r0,4
    2254:	81 21 00 10 	lwz     r9,16(r1)
    2258:	81 61 00 08 	lwz     r11,8(r1)
    225c:	7d 7f 5b 78 	mr      r31,r11
    2260:	90 09 00 00 	stw     r0,0(r9)
    2264:	93 e1 00 08 	stw     r31,8(r1)
    2268:	60 00 00 00 	nop
    226c:	80 01 00 08 	lwz     r0,8(r1)
    2270:	2f 80 00 00 	cmpwi   cr7,r0,0
    2274:	41 9e 00 0c 	beq-    cr7,2280 <sctp_getsockopt_connectx3+0x304>
			return -EFAULT;
    2278:	38 00 ff f2 	li      r0,-14
    227c:	48 00 00 08 	b       2284 <sctp_getsockopt_connectx3+0x308>
	}

	return err;
    2280:	80 01 00 0c 	lwz     r0,12(r1)
}
    2284:	7c 03 03 78 	mr      r3,r0
    2288:	80 01 00 64 	lwz     r0,100(r1)
    228c:	7c 08 03 a6 	mtlr    r0
    2290:	83 e1 00 5c 	lwz     r31,92(r1)
    2294:	38 21 00 60 	addi    r1,r1,96
    2298:	4e 80 00 20 	blr

0000229c <sctp_close>:
 * close() can be blocked for at most linger_time ms.  If the graceful
 * shutdown phase does not finish during this period, close() will
 * return but the graceful shutdown phase continues in the system.
 */
SCTP_STATIC void sctp_close(struct sock *sk, long timeout)
{
    229c:	94 21 ff 60 	stwu    r1,-160(r1)
    22a0:	7c 08 02 a6 	mflr    r0
    22a4:	90 01 00 a4 	stw     r0,164(r1)
    22a8:	93 e1 00 9c 	stw     r31,156(r1)
    22ac:	90 61 00 88 	stw     r3,136(r1)
    22b0:	90 81 00 8c 	stw     r4,140(r1)
    22b4:	80 01 00 88 	lwz     r0,136(r1)
    22b8:	90 01 00 20 	stw     r0,32(r1)

extern void lock_sock_nested(struct sock *sk, int subclass);

static inline void lock_sock(struct sock *sk)
{
	lock_sock_nested(sk, 0);
    22bc:	80 61 00 20 	lwz     r3,32(r1)
    22c0:	38 80 00 00 	li      r4,0
    22c4:	48 00 00 01 	bl      22c4 <sctp_close+0x28>
	struct list_head *pos, *temp;

	SCTP_DEBUG_PRINTK("sctp_close(sk: 0x%p, timeout:%ld)\n", sk, timeout);

	sctp_lock_sock(sk);
	sk->sk_shutdown = SHUTDOWN_MASK;
    22c8:	81 21 00 88 	lwz     r9,136(r1)
    22cc:	80 09 00 94 	lwz     r0,148(r9)
    22d0:	39 60 00 03 	li      r11,3
    22d4:	51 60 f0 02 	rlwimi  r0,r11,30,0,1
    22d8:	90 09 00 94 	stw     r0,148(r9)
	sk->sk_state = SCTP_SS_CLOSING;
    22dc:	80 01 00 88 	lwz     r0,136(r1)
    22e0:	39 20 00 0b 	li      r9,11
    22e4:	7c 0b 03 78 	mr      r11,r0
    22e8:	99 2b 00 0e 	stb     r9,14(r11)
    22ec:	80 01 00 88 	lwz     r0,136(r1)
    22f0:	90 01 00 24 	stw     r0,36(r1)
    22f4:	80 01 00 24 	lwz     r0,36(r1)

	ep = sctp_sk(sk)->ep;
    22f8:	7c 09 03 78 	mr      r9,r0
    22fc:	80 09 01 d4 	lwz     r0,468(r9)
    2300:	90 01 00 10 	stw     r0,16(r1)

	/* Walk all associations on an endpoint.  */
	list_for_each_safe(pos, temp, &ep->asocs) {
    2304:	80 01 00 10 	lwz     r0,16(r1)
    2308:	7c 0b 03 78 	mr      r11,r0
    230c:	80 0b 00 4c 	lwz     r0,76(r11)
    2310:	90 01 00 08 	stw     r0,8(r1)
    2314:	80 01 00 08 	lwz     r0,8(r1)
    2318:	7c 09 03 78 	mr      r9,r0
    231c:	80 09 00 00 	lwz     r0,0(r9)
    2320:	90 01 00 0c 	stw     r0,12(r1)
    2324:	48 00 01 68 	b       248c <sctp_close+0x1f0>
		asoc = list_entry(pos, struct sctp_association, asocs);
    2328:	80 01 00 08 	lwz     r0,8(r1)
    232c:	90 01 00 14 	stw     r0,20(r1)
    2330:	80 01 00 14 	lwz     r0,20(r1)
    2334:	30 00 ff b4 	addic   r0,r0,-76
    2338:	90 01 00 18 	stw     r0,24(r1)
    233c:	80 01 00 88 	lwz     r0,136(r1)
    2340:	90 01 00 28 	stw     r0,40(r1)
    2344:	38 00 00 02 	li      r0,2
    2348:	90 01 00 2c 	stw     r0,44(r1)
    234c:	80 01 00 28 	lwz     r0,40(r1)
    2350:	90 01 00 30 	stw     r0,48(r1)
    2354:	80 01 00 30 	lwz     r0,48(r1)

/* Is a socket of this style? */
#define sctp_style(sk, style) __sctp_style((sk), (SCTP_SOCKET_##style))
static inline int __sctp_style(const struct sock *sk, sctp_socket_type_t style)
{
	return sctp_sk(sk)->type == style;
    2358:	7c 0b 03 78 	mr      r11,r0
    235c:	80 0b 01 c8 	lwz     r0,456(r11)
    2360:	81 21 00 2c 	lwz     r9,44(r1)
    2364:	7f 89 00 00 	cmpw    cr7,r9,r0
    2368:	7c 00 00 26 	mfcr    r0
    236c:	54 00 ff fe 	rlwinm  r0,r0,31,31,31

		if (sctp_style(sk, TCP)) {
    2370:	2f 80 00 00 	cmpwi   cr7,r0,0
    2374:	41 9e 00 4c 	beq-    cr7,23c0 <sctp_close+0x124>
    2378:	80 01 00 18 	lwz     r0,24(r1)
    237c:	90 01 00 34 	stw     r0,52(r1)
    2380:	38 00 00 01 	li      r0,1
    2384:	90 01 00 38 	stw     r0,56(r1)
/* Is the association in this state? */
#define sctp_state(asoc, state) __sctp_state((asoc), (SCTP_STATE_##state))
static inline int __sctp_state(const struct sctp_association *asoc,
			       sctp_state_t state)
{
	return asoc->state == state;
    2388:	80 01 00 34 	lwz     r0,52(r1)
    238c:	7c 09 03 78 	mr      r9,r0
    2390:	80 09 01 b8 	lwz     r0,440(r9)
    2394:	81 21 00 38 	lwz     r9,56(r1)
    2398:	7f 89 00 00 	cmpw    cr7,r9,r0
    239c:	7c 00 00 26 	mfcr    r0
    23a0:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
			/* A closed association can still be in the list if
			 * it belongs to a TCP-style listening socket that is
			 * not yet accepted. If so, free it. If not, send an
			 * ABORT or SHUTDOWN based on the linger options.
			 */
			if (sctp_state(asoc, CLOSED)) {
    23a4:	2f 80 00 00 	cmpwi   cr7,r0,0
    23a8:	41 9e 00 18 	beq-    cr7,23c0 <sctp_close+0x124>
				sctp_unhash_established(asoc);
    23ac:	80 61 00 18 	lwz     r3,24(r1)
    23b0:	48 00 00 01 	bl      23b0 <sctp_close+0x114>
				sctp_association_free(asoc);
    23b4:	80 61 00 18 	lwz     r3,24(r1)
    23b8:	48 00 00 01 	bl      23b8 <sctp_close+0x11c>
				continue;
    23bc:	48 00 00 b8 	b       2474 <sctp_close+0x1d8>
    23c0:	80 01 00 88 	lwz     r0,136(r1)
    23c4:	90 01 00 3c 	stw     r0,60(r1)
    23c8:	38 00 00 04 	li      r0,4
    23cc:	90 01 00 40 	stw     r0,64(r1)
	__clear_bit(flag, &sk->sk_flags);
}

static inline int sock_flag(struct sock *sk, enum sock_flags flag)
{
	return test_bit(flag, &sk->sk_flags);
    23d0:	81 21 00 40 	lwz     r9,64(r1)
    23d4:	80 01 00 3c 	lwz     r0,60(r1)
    23d8:	30 00 00 74 	addic   r0,r0,116
    23dc:	91 21 00 44 	stw     r9,68(r1)
    23e0:	90 01 00 48 	stw     r0,72(r1)
 * @nr: bit number to test
 * @addr: Address to start counting from
 */
static inline int test_bit(int nr, const volatile unsigned long *addr)
{
	return 1UL & (addr[BIT_WORD(nr)] >> (nr & (BITS_PER_LONG-1)));
    23e4:	80 01 00 44 	lwz     r0,68(r1)
    23e8:	7c 00 2e 70 	srawi   r0,r0,5
    23ec:	7c 00 01 94 	addze   r0,r0
    23f0:	54 00 10 3a 	rlwinm  r0,r0,2,0,29
    23f4:	81 21 00 48 	lwz     r9,72(r1)
    23f8:	7c 09 02 14 	add     r0,r9,r0
    23fc:	7c 0b 03 78 	mr      r11,r0
    2400:	81 2b 00 00 	lwz     r9,0(r11)
    2404:	80 01 00 44 	lwz     r0,68(r1)
    2408:	54 00 06 fe 	clrlwi  r0,r0,27
    240c:	7d 20 04 30 	srw     r0,r9,r0
    2410:	54 00 07 fe 	clrlwi  r0,r0,31
			}
		}

		if (sock_flag(sk, SOCK_LINGER) && !sk->sk_lingertime) {
    2414:	2f 80 00 00 	cmpwi   cr7,r0,0
    2418:	41 9e 00 48 	beq-    cr7,2460 <sctp_close+0x1c4>
    241c:	80 01 00 88 	lwz     r0,136(r1)
    2420:	7c 09 03 78 	mr      r9,r0
    2424:	80 09 00 b4 	lwz     r0,180(r9)
    2428:	2f 80 00 00 	cmpwi   cr7,r0,0
    242c:	40 9e 00 34 	bne-    cr7,2460 <sctp_close+0x1c4>
			struct sctp_chunk *chunk;

			chunk = sctp_make_abort_user(asoc, NULL, 0);
    2430:	80 61 00 18 	lwz     r3,24(r1)
    2434:	38 80 00 00 	li      r4,0
    2438:	38 a0 00 00 	li      r5,0
    243c:	48 00 00 01 	bl      243c <sctp_close+0x1a0>
    2440:	90 61 00 1c 	stw     r3,28(r1)
			if (chunk)
    2444:	80 01 00 1c 	lwz     r0,28(r1)
    2448:	2f 80 00 00 	cmpwi   cr7,r0,0
    244c:	41 9e 00 24 	beq-    cr7,2470 <sctp_close+0x1d4>
				sctp_primitive_ABORT(asoc, chunk);
    2450:	80 61 00 18 	lwz     r3,24(r1)
    2454:	80 81 00 1c 	lwz     r4,28(r1)
    2458:	48 00 00 01 	bl      2458 <sctp_close+0x1bc>
				sctp_association_free(asoc);
				continue;
			}
		}

		if (sock_flag(sk, SOCK_LINGER) && !sk->sk_lingertime) {
    245c:	48 00 00 14 	b       2470 <sctp_close+0x1d4>

			chunk = sctp_make_abort_user(asoc, NULL, 0);
			if (chunk)
				sctp_primitive_ABORT(asoc, chunk);
		} else
			sctp_primitive_SHUTDOWN(asoc, NULL);
    2460:	80 61 00 18 	lwz     r3,24(r1)
    2464:	38 80 00 00 	li      r4,0
    2468:	48 00 00 01 	bl      2468 <sctp_close+0x1cc>
    246c:	48 00 00 08 	b       2474 <sctp_close+0x1d8>
				sctp_association_free(asoc);
				continue;
			}
		}

		if (sock_flag(sk, SOCK_LINGER) && !sk->sk_lingertime) {
    2470:	60 00 00 00 	nop
	sk->sk_state = SCTP_SS_CLOSING;

	ep = sctp_sk(sk)->ep;

	/* Walk all associations on an endpoint.  */
	list_for_each_safe(pos, temp, &ep->asocs) {
    2474:	80 01 00 0c 	lwz     r0,12(r1)
    2478:	90 01 00 08 	stw     r0,8(r1)
    247c:	80 01 00 08 	lwz     r0,8(r1)
    2480:	7c 0b 03 78 	mr      r11,r0
    2484:	80 0b 00 00 	lwz     r0,0(r11)
    2488:	90 01 00 0c 	stw     r0,12(r1)
    248c:	80 01 00 10 	lwz     r0,16(r1)
    2490:	31 20 00 4c 	addic   r9,r0,76
    2494:	80 01 00 08 	lwz     r0,8(r1)
    2498:	7f 89 00 00 	cmpw    cr7,r9,r0
    249c:	40 9e fe 8c 	bne+    cr7,2328 <sctp_close+0x8c>
		} else
			sctp_primitive_SHUTDOWN(asoc, NULL);
	}

	/* Clean up any skbs sitting on the receive queue.  */
	sctp_queue_purge_ulpevents(&sk->sk_receive_queue);
    24a0:	80 01 00 88 	lwz     r0,136(r1)
    24a4:	30 00 00 3c 	addic   r0,r0,60
    24a8:	7c 03 03 78 	mr      r3,r0
    24ac:	48 00 00 01 	bl      24ac <sctp_close+0x210>
    24b0:	80 01 00 88 	lwz     r0,136(r1)
    24b4:	90 01 00 4c 	stw     r0,76(r1)
    24b8:	80 01 00 4c 	lwz     r0,76(r1)
	sctp_queue_purge_ulpevents(&sctp_sk(sk)->pd_lobby);
    24bc:	30 00 02 f8 	addic   r0,r0,760
    24c0:	7c 03 03 78 	mr      r3,r0
    24c4:	48 00 00 01 	bl      24c4 <sctp_close+0x228>
    24c8:	80 01 00 88 	lwz     r0,136(r1)
    24cc:	90 01 00 50 	stw     r0,80(r1)
    24d0:	38 00 00 02 	li      r0,2
    24d4:	90 01 00 54 	stw     r0,84(r1)
    24d8:	80 01 00 50 	lwz     r0,80(r1)
    24dc:	90 01 00 58 	stw     r0,88(r1)
    24e0:	80 01 00 58 	lwz     r0,88(r1)

/* Is a socket of this style? */
#define sctp_style(sk, style) __sctp_style((sk), (SCTP_SOCKET_##style))
static inline int __sctp_style(const struct sock *sk, sctp_socket_type_t style)
{
	return sctp_sk(sk)->type == style;
    24e4:	7c 09 03 78 	mr      r9,r0
    24e8:	80 09 01 c8 	lwz     r0,456(r9)
    24ec:	81 21 00 54 	lwz     r9,84(r1)
    24f0:	7f 89 00 00 	cmpw    cr7,r9,r0
    24f4:	7c 00 00 26 	mfcr    r0
    24f8:	54 00 ff fe 	rlwinm  r0,r0,31,31,31

	/* On a TCP-style socket, block for at most linger_time if set. */
	if (sctp_style(sk, TCP) && timeout)
    24fc:	2f 80 00 00 	cmpwi   cr7,r0,0
    2500:	41 9e 00 1c 	beq-    cr7,251c <sctp_close+0x280>
    2504:	80 01 00 8c 	lwz     r0,140(r1)
    2508:	2f 80 00 00 	cmpwi   cr7,r0,0
    250c:	41 9e 00 10 	beq-    cr7,251c <sctp_close+0x280>
		sctp_wait_for_close(sk, timeout);
    2510:	80 61 00 88 	lwz     r3,136(r1)
    2514:	80 81 00 8c 	lwz     r4,140(r1)
    2518:	48 00 fe a5 	bl      123bc <sctp_wait_for_close>

	/* This will run the backlog queue.  */
	sctp_release_sock(sk);
    251c:	80 61 00 88 	lwz     r3,136(r1)
    2520:	48 00 00 01 	bl      2520 <sctp_close+0x284>

	/* Supposedly, no process has access to the socket, but
	 * the net layers still may.
	 */
	sctp_local_bh_disable();
    2524:	48 00 00 01 	bl      2524 <sctp_close+0x288>
	sctp_bh_lock_sock(sk);
    2528:	80 01 00 88 	lwz     r0,136(r1)
    252c:	30 00 00 30 	addic   r0,r0,48
    2530:	90 01 00 74 	stw     r0,116(r1)
    2534:	80 01 00 88 	lwz     r0,136(r1)
    2538:	90 01 00 5c 	stw     r0,92(r1)
   modifications.
 */

static inline void sock_hold(struct sock *sk)
{
	atomic_inc(&sk->sk_refcnt);
    253c:	80 01 00 5c 	lwz     r0,92(r1)
    2540:	30 00 00 2c 	addic   r0,r0,44
    2544:	90 01 00 60 	stw     r0,96(r1)
	addic	%0,%0,1\n"
	PPC405_ERR77(0,%2)
"	stwcx.	%0,0,%2 \n\
	bne-	1b"
	: "=&r" (t), "+m" (v->counter)
	: "r" (&v->counter)
    2548:	80 01 00 60 	lwz     r0,96(r1)
"1:	lwarx	%0,0,%2		# atomic_inc\n\
	addic	%0,%0,1\n"
	PPC405_ERR77(0,%2)
"	stwcx.	%0,0,%2 \n\
	bne-	1b"
	: "=&r" (t), "+m" (v->counter)
    254c:	81 61 00 60 	lwz     r11,96(r1)
    2550:	81 21 00 60 	lwz     r9,96(r1)

static __inline__ void atomic_inc(atomic_t *v)
{
	int t;

	__asm__ __volatile__(
    2554:	7f e0 00 28 	lwarx   r31,0,r0
    2558:	33 ff 00 01 	addic   r31,r31,1
    255c:	7f e0 01 2d 	stwcx.  r31,0,r0
    2560:	40 a2 ff f4 	bne-    2554 <sctp_close+0x2b8>
    2564:	93 e1 00 64 	stw     r31,100(r1)

	/* Hold the sock, since sk_common_release() will put sock_put()
	 * and we have just a little more cleanup.
	 */
	sock_hold(sk);
	sk_common_release(sk);
    2568:	80 61 00 88 	lwz     r3,136(r1)
    256c:	48 00 00 01 	bl      256c <sctp_close+0x2d0>

	sctp_bh_unlock_sock(sk);
    2570:	80 01 00 88 	lwz     r0,136(r1)
    2574:	30 00 00 30 	addic   r0,r0,48
    2578:	90 01 00 78 	stw     r0,120(r1)
	sctp_local_bh_enable();
    257c:	48 00 00 01 	bl      257c <sctp_close+0x2e0>
    2580:	80 01 00 88 	lwz     r0,136(r1)
    2584:	90 01 00 68 	stw     r0,104(r1)
 */

/* Ungrab socket and destroy it, if it was the last reference. */
static inline void sock_put(struct sock *sk)
{
	if (atomic_dec_and_test(&sk->sk_refcnt))
    2588:	80 01 00 68 	lwz     r0,104(r1)
    258c:	30 00 00 2c 	addic   r0,r0,44
    2590:	90 01 00 6c 	stw     r0,108(r1)
	PPC405_ERR77(0,%1)
"	stwcx.	%0,0,%1\n\
	bne-	1b"
	PPC_ACQUIRE_BARRIER
	: "=&r" (t)
	: "r" (&v->counter)
    2594:	80 01 00 6c 	lwz     r0,108(r1)

static __inline__ int atomic_dec_return(atomic_t *v)
{
	int t;

	__asm__ __volatile__(
    2598:	7f e0 00 28 	lwarx   r31,0,r0
    259c:	33 ff ff ff 	addic   r31,r31,-1
    25a0:	7f e0 01 2d 	stwcx.  r31,0,r0
    25a4:	40 a2 ff f4 	bne-    2598 <sctp_close+0x2fc>
    25a8:	93 e1 00 70 	stw     r31,112(r1)
	PPC_ACQUIRE_BARRIER
	: "=&r" (t)
	: "r" (&v->counter)
	: "cc", "xer", "memory");

	return t;
    25ac:	80 01 00 70 	lwz     r0,112(r1)
    25b0:	2f 80 00 00 	cmpwi   cr7,r0,0
    25b4:	40 9e 00 0c 	bne-    cr7,25c0 <sctp_close+0x324>
		sk_free(sk);
    25b8:	80 61 00 68 	lwz     r3,104(r1)
    25bc:	48 00 00 01 	bl      25bc <sctp_close+0x320>

	sock_put(sk);

	SCTP_DBG_OBJCNT_DEC(sock);
}
    25c0:	80 01 00 a4 	lwz     r0,164(r1)
    25c4:	7c 08 03 a6 	mtlr    r0
    25c8:	83 e1 00 9c 	lwz     r31,156(r1)
    25cc:	38 21 00 a0 	addi    r1,r1,160
    25d0:	4e 80 00 20 	blr

000025d4 <sctp_error>:

/* Handle EPIPE error. */
static int sctp_error(struct sock *sk, int flags, int err)
{
    25d4:	94 21 ff b0 	stwu    r1,-80(r1)
    25d8:	7c 08 02 a6 	mflr    r0
    25dc:	90 01 00 54 	stw     r0,84(r1)
    25e0:	93 e1 00 4c 	stw     r31,76(r1)
    25e4:	90 61 00 38 	stw     r3,56(r1)
    25e8:	90 81 00 3c 	stw     r4,60(r1)
    25ec:	90 a1 00 40 	stw     r5,64(r1)
	if (err == -EPIPE)
    25f0:	81 21 00 40 	lwz     r9,64(r1)
    25f4:	38 00 ff e0 	li      r0,-32
    25f8:	7f 89 00 00 	cmpw    cr7,r9,r0
    25fc:	40 9e 00 c4 	bne-    cr7,26c0 <sctp_error+0xec>
    2600:	80 01 00 38 	lwz     r0,56(r1)
    2604:	90 01 00 08 	stw     r0,8(r1)
 */
 
static inline int sock_error(struct sock *sk)
{
	int err;
	if (likely(!sk->sk_err))
    2608:	80 01 00 08 	lwz     r0,8(r1)
    260c:	7c 09 03 78 	mr      r9,r0
    2610:	80 09 00 c8 	lwz     r0,200(r9)
    2614:	2f 80 00 00 	cmpwi   cr7,r0,0
    2618:	7c 00 00 26 	mfcr    r0
    261c:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
    2620:	2f 80 00 00 	cmpwi   cr7,r0,0
    2624:	41 9e 00 0c 	beq-    cr7,2630 <sctp_error+0x5c>
		return 0;
    2628:	38 00 00 00 	li      r0,0
    262c:	48 00 00 80 	b       26ac <sctp_error+0xd8>
	err = xchg(&sk->sk_err, 0);
    2630:	38 00 00 00 	li      r0,0
    2634:	90 01 00 0c 	stw     r0,12(r1)
    2638:	80 01 00 08 	lwz     r0,8(r1)
    263c:	31 20 00 c8 	addic   r9,r0,200
    2640:	80 01 00 0c 	lwz     r0,12(r1)
    2644:	91 21 00 10 	stw     r9,16(r1)
    2648:	90 01 00 14 	stw     r0,20(r1)
    264c:	38 00 00 04 	li      r0,4
    2650:	90 01 00 18 	stw     r0,24(r1)
extern void __xchg_called_with_bad_pointer(void);

static __always_inline unsigned long
__xchg(volatile void *ptr, unsigned long x, unsigned int size)
{
	switch (size) {
    2654:	80 01 00 18 	lwz     r0,24(r1)
    2658:	2f 80 00 04 	cmpwi   cr7,r0,4
    265c:	40 9e 00 3c 	bne-    cr7,2698 <sctp_error+0xc4>
    2660:	80 01 00 10 	lwz     r0,16(r1)
    2664:	90 01 00 1c 	stw     r0,28(r1)
    2668:	80 01 00 14 	lwz     r0,20(r1)
    266c:	90 01 00 20 	stw     r0,32(r1)
static __always_inline unsigned long
__xchg_u32(volatile void *p, unsigned long val)
{
	unsigned long prev;

	__asm__ __volatile__(
    2670:	81 41 00 1c 	lwz     r10,28(r1)
    2674:	80 01 00 1c 	lwz     r0,28(r1)
    2678:	81 21 00 20 	lwz     r9,32(r1)
    267c:	81 61 00 1c 	lwz     r11,28(r1)
    2680:	7f e0 00 28 	lwarx   r31,0,r0
    2684:	7d 20 01 2d 	stwcx.  r9,0,r0
    2688:	40 a2 ff f8 	bne-    2680 <sctp_error+0xac>
    268c:	93 e1 00 24 	stw     r31,36(r1)
	PPC_ACQUIRE_BARRIER
	: "=&r" (prev), "+m" (*(volatile unsigned int *)p)
	: "r" (p), "r" (val)
	: "cc", "memory");

	return prev;
    2690:	80 01 00 24 	lwz     r0,36(r1)
    2694:	48 00 00 0c 	b       26a0 <sctp_error+0xcc>
#ifdef CONFIG_PPC64
	case 8:
		return __xchg_u64(ptr, x);
#endif
	}
	__xchg_called_with_bad_pointer();
    2698:	48 00 00 01 	bl      2698 <sctp_error+0xc4>
	return x;
    269c:	80 01 00 14 	lwz     r0,20(r1)
    26a0:	90 01 00 28 	stw     r0,40(r1)
	return -err;
    26a4:	80 01 00 28 	lwz     r0,40(r1)
    26a8:	7c 00 00 d0 	neg     r0,r0
		err = sock_error(sk) ? : -EPIPE;
    26ac:	2f 80 00 00 	cmpwi   cr7,r0,0
    26b0:	41 9e 00 08 	beq-    cr7,26b8 <sctp_error+0xe4>
    26b4:	48 00 00 08 	b       26bc <sctp_error+0xe8>
    26b8:	38 00 ff e0 	li      r0,-32
    26bc:	90 01 00 40 	stw     r0,64(r1)
	if (err == -EPIPE && !(flags & MSG_NOSIGNAL))
    26c0:	81 21 00 40 	lwz     r9,64(r1)
    26c4:	38 00 ff e0 	li      r0,-32
    26c8:	7f 89 00 00 	cmpw    cr7,r9,r0
    26cc:	40 9e 00 28 	bne-    cr7,26f4 <sctp_error+0x120>
    26d0:	80 01 00 3c 	lwz     r0,60(r1)
    26d4:	54 00 04 62 	rlwinm  r0,r0,0,17,17
    26d8:	2f 80 00 00 	cmpwi   cr7,r0,0
    26dc:	40 9e 00 18 	bne-    cr7,26f4 <sctp_error+0x120>
		send_sig(SIGPIPE, current, 0);
    26e0:	7c 40 13 78 	mr      r0,r2
    26e4:	38 60 00 0d 	li      r3,13
    26e8:	7c 04 03 78 	mr      r4,r0
    26ec:	38 a0 00 00 	li      r5,0
    26f0:	48 00 00 01 	bl      26f0 <sctp_error+0x11c>
	return err;
    26f4:	80 01 00 40 	lwz     r0,64(r1)
}
    26f8:	7c 03 03 78 	mr      r3,r0
    26fc:	80 01 00 54 	lwz     r0,84(r1)
    2700:	7c 08 03 a6 	mtlr    r0
    2704:	83 e1 00 4c 	lwz     r31,76(r1)
    2708:	38 21 00 50 	addi    r1,r1,80
    270c:	4e 80 00 20 	blr

00002710 <sctp_sendmsg>:

SCTP_STATIC int sctp_msghdr_parse(const struct msghdr *, sctp_cmsgs_t *);

SCTP_STATIC int sctp_sendmsg(struct kiocb *iocb, struct sock *sk,
			     struct msghdr *msg, size_t msg_len)
{
    2710:	94 21 fe 50 	stwu    r1,-432(r1)
    2714:	7c 08 02 a6 	mflr    r0
    2718:	90 01 01 b4 	stw     r0,436(r1)
    271c:	93 e1 01 ac 	stw     r31,428(r1)
    2720:	90 61 01 98 	stw     r3,408(r1)
    2724:	90 81 01 9c 	stw     r4,412(r1)
    2728:	90 a1 01 a0 	stw     r5,416(r1)
    272c:	90 c1 01 a4 	stw     r6,420(r1)
	struct sctp_sock *sp;
	struct sctp_endpoint *ep;
	struct sctp_association *new_asoc=NULL, *asoc=NULL;
    2730:	38 00 00 00 	li      r0,0
    2734:	90 01 00 08 	stw     r0,8(r1)
    2738:	38 00 00 00 	li      r0,0
    273c:	90 01 00 0c 	stw     r0,12(r1)
	struct sctp_transport *transport, *chunk_tp;
	struct sctp_chunk *chunk;
	union sctp_addr to;
	struct sockaddr *msg_name = NULL;
    2740:	38 00 00 00 	li      r0,0
    2744:	90 01 00 18 	stw     r0,24(r1)
	struct sctp_sndrcvinfo default_sinfo = { 0 };
    2748:	38 00 00 00 	li      r0,0
    274c:	90 01 01 6c 	stw     r0,364(r1)
    2750:	38 00 00 00 	li      r0,0
    2754:	90 01 01 70 	stw     r0,368(r1)
    2758:	38 00 00 00 	li      r0,0
    275c:	90 01 01 74 	stw     r0,372(r1)
    2760:	38 00 00 00 	li      r0,0
    2764:	90 01 01 78 	stw     r0,376(r1)
    2768:	38 00 00 00 	li      r0,0
    276c:	90 01 01 7c 	stw     r0,380(r1)
    2770:	38 00 00 00 	li      r0,0
    2774:	90 01 01 80 	stw     r0,384(r1)
    2778:	38 00 00 00 	li      r0,0
    277c:	90 01 01 84 	stw     r0,388(r1)
    2780:	38 00 00 00 	li      r0,0
    2784:	90 01 01 88 	stw     r0,392(r1)
	struct sctp_sndrcvinfo *sinfo;
	struct sctp_initmsg *sinit;
	sctp_assoc_t associd = 0;
    2788:	38 00 00 00 	li      r0,0
    278c:	90 01 00 20 	stw     r0,32(r1)
	sctp_cmsgs_t cmsgs = { NULL };
    2790:	3c 00 00 00 	lis     r0,0
    2794:	30 00 00 0c 	addic   r0,r0,12
    2798:	7c 0b 03 78 	mr      r11,r0
    279c:	81 2b 00 00 	lwz     r9,0(r11)
    27a0:	81 4b 00 04 	lwz     r10,4(r11)
    27a4:	91 21 01 8c 	stw     r9,396(r1)
    27a8:	91 41 01 90 	stw     r10,400(r1)
	int err;
	sctp_scope_t scope;
	long timeo;
	__u16 sinfo_flags = 0;
    27ac:	38 00 00 00 	li      r0,0
    27b0:	b0 01 00 28 	sth     r0,40(r1)
	struct sctp_datamsg *datamsg;
	int msg_flags = msg->msg_flags;
    27b4:	80 01 01 a0 	lwz     r0,416(r1)
    27b8:	7c 09 03 78 	mr      r9,r0
    27bc:	80 09 00 18 	lwz     r0,24(r9)
    27c0:	90 01 00 30 	stw     r0,48(r1)

	SCTP_DEBUG_PRINTK("sctp_sendmsg(sk: %p, msg: %p, msg_len: %zu)\n",
			  sk, msg, msg_len);

	err = 0;
    27c4:	38 00 00 00 	li      r0,0
    27c8:	90 01 00 24 	stw     r0,36(r1)
    27cc:	80 01 01 9c 	lwz     r0,412(r1)
    27d0:	90 01 00 50 	stw     r0,80(r1)
    27d4:	80 01 00 50 	lwz     r0,80(r1)
	sp = sctp_sk(sk);
    27d8:	90 01 00 34 	stw     r0,52(r1)
	ep = sp->ep;
    27dc:	80 01 00 34 	lwz     r0,52(r1)
    27e0:	7c 0a 03 78 	mr      r10,r0
    27e4:	80 0a 01 d4 	lwz     r0,468(r10)
    27e8:	90 01 00 38 	stw     r0,56(r1)
    27ec:	80 01 01 9c 	lwz     r0,412(r1)
    27f0:	90 01 00 54 	stw     r0,84(r1)
    27f4:	38 00 00 02 	li      r0,2
    27f8:	90 01 00 58 	stw     r0,88(r1)
    27fc:	80 01 00 54 	lwz     r0,84(r1)
    2800:	90 01 00 5c 	stw     r0,92(r1)
    2804:	80 01 00 5c 	lwz     r0,92(r1)
    2808:	7c 0b 03 78 	mr      r11,r0
    280c:	80 0b 01 c8 	lwz     r0,456(r11)
    2810:	81 21 00 58 	lwz     r9,88(r1)
    2814:	7f 89 00 00 	cmpw    cr7,r9,r0
    2818:	7c 00 00 26 	mfcr    r0
    281c:	54 00 ff fe 	rlwinm  r0,r0,31,31,31

	SCTP_DEBUG_PRINTK("Using endpoint: %p.\n", ep);

	/* We cannot send a message over a TCP-style listening socket. */
	if (sctp_style(sk, TCP) && sctp_sstate(sk, LISTENING)) {
    2820:	2f 80 00 00 	cmpwi   cr7,r0,0
    2824:	41 9e 00 48 	beq-    cr7,286c <sctp_sendmsg+0x15c>
    2828:	80 01 01 9c 	lwz     r0,412(r1)
    282c:	90 01 00 60 	stw     r0,96(r1)
    2830:	38 00 00 0a 	li      r0,10
    2834:	90 01 00 64 	stw     r0,100(r1)

/* Is the socket in this state? */
#define sctp_sstate(sk, state) __sctp_sstate((sk), (SCTP_SS_##state))
static inline int __sctp_sstate(const struct sock *sk, sctp_sock_state_t state)
{
	return sk->sk_state == state;
    2838:	80 01 00 60 	lwz     r0,96(r1)
    283c:	7c 09 03 78 	mr      r9,r0
    2840:	88 09 00 0e 	lbz     r0,14(r9)
    2844:	54 00 06 3e 	clrlwi  r0,r0,24
    2848:	81 21 00 64 	lwz     r9,100(r1)
    284c:	7f 89 00 00 	cmpw    cr7,r9,r0
    2850:	7c 00 00 26 	mfcr    r0
    2854:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
    2858:	2f 80 00 00 	cmpwi   cr7,r0,0
    285c:	41 9e 00 10 	beq-    cr7,286c <sctp_sendmsg+0x15c>
		err = -EPIPE;
    2860:	38 00 ff e0 	li      r0,-32
    2864:	90 01 00 24 	stw     r0,36(r1)
		goto out_nounlock;
    2868:	48 00 0f 8c 	b       37f4 <sctp_sendmsg+0x10e4>
	}

	/* Parse out the SCTP CMSGs.  */
	err = sctp_msghdr_parse(msg, &cmsgs);
    286c:	38 01 01 8c 	addi    r0,r1,396
    2870:	80 61 01 a0 	lwz     r3,416(r1)
    2874:	7c 04 03 78 	mr      r4,r0
    2878:	48 00 e1 4d 	bl      109c4 <sctp_msghdr_parse>
    287c:	90 61 00 24 	stw     r3,36(r1)

	if (err) {
    2880:	80 01 00 24 	lwz     r0,36(r1)
    2884:	2f 80 00 00 	cmpwi   cr7,r0,0
    2888:	40 9e 0f 68 	bne-    cr7,37f0 <sctp_sendmsg+0x10e0>
		SCTP_DEBUG_PRINTK("msghdr parse err = %x\n", err);
		goto out_nounlock;
    288c:	80 01 01 9c 	lwz     r0,412(r1)
    2890:	90 01 00 68 	stw     r0,104(r1)
    2894:	38 00 00 01 	li      r0,1
    2898:	90 01 00 6c 	stw     r0,108(r1)
    289c:	80 01 00 68 	lwz     r0,104(r1)
    28a0:	90 01 00 70 	stw     r0,112(r1)
    28a4:	80 01 00 70 	lwz     r0,112(r1)

/* Is a socket of this style? */
#define sctp_style(sk, style) __sctp_style((sk), (SCTP_SOCKET_##style))
static inline int __sctp_style(const struct sock *sk, sctp_socket_type_t style)
{
	return sctp_sk(sk)->type == style;
    28a8:	7c 0a 03 78 	mr      r10,r0
    28ac:	80 0a 01 c8 	lwz     r0,456(r10)
    28b0:	81 21 00 6c 	lwz     r9,108(r1)
    28b4:	7f 89 00 00 	cmpw    cr7,r9,r0
    28b8:	7c 00 00 26 	mfcr    r0
    28bc:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
	/* Fetch the destination address for this packet.  This
	 * address only selects the association--it is not necessarily
	 * the address we will send to.
	 * For a peeled-off socket, msg_name is ignored.
	 */
	if (!sctp_style(sk, UDP_HIGH_BANDWIDTH) && msg->msg_name) {
    28c0:	2f 80 00 00 	cmpwi   cr7,r0,0
    28c4:	40 9e 01 6c 	bne-    cr7,2a30 <sctp_sendmsg+0x320>
    28c8:	80 01 01 a0 	lwz     r0,416(r1)
    28cc:	7c 0b 03 78 	mr      r11,r0
    28d0:	80 0b 00 00 	lwz     r0,0(r11)
    28d4:	2f 80 00 00 	cmpwi   cr7,r0,0
    28d8:	41 9e 01 58 	beq-    cr7,2a30 <sctp_sendmsg+0x320>
		int msg_namelen = msg->msg_namelen;
    28dc:	80 01 01 a0 	lwz     r0,416(r1)
    28e0:	7c 09 03 78 	mr      r9,r0
    28e4:	80 09 00 04 	lwz     r0,4(r9)
    28e8:	90 01 00 2c 	stw     r0,44(r1)

		err = sctp_verify_addr(sk, (union sctp_addr *)msg->msg_name,
    28ec:	80 01 01 a0 	lwz     r0,416(r1)
    28f0:	7c 0a 03 78 	mr      r10,r0
    28f4:	80 0a 00 00 	lwz     r0,0(r10)
    28f8:	81 21 01 9c 	lwz     r9,412(r1)
    28fc:	91 21 00 74 	stw     r9,116(r1)
    2900:	90 01 00 78 	stw     r0,120(r1)
    2904:	80 01 00 2c 	lwz     r0,44(r1)
    2908:	90 01 00 7c 	stw     r0,124(r1)
    290c:	80 01 00 74 	lwz     r0,116(r1)
    2910:	90 01 00 80 	stw     r0,128(r1)
    2914:	80 01 00 80 	lwz     r0,128(r1)
				   int len)
{
	struct sctp_af *af;

	/* Verify basic sockaddr. */
	af = sctp_sockaddr_af(sctp_sk(sk), addr, len);
    2918:	7c 03 03 78 	mr      r3,r0
    291c:	80 81 00 78 	lwz     r4,120(r1)
    2920:	80 a1 00 7c 	lwz     r5,124(r1)
    2924:	4b ff da 55 	bl      378 <sctp_sockaddr_af>
    2928:	90 61 00 84 	stw     r3,132(r1)
	if (!af)
    292c:	80 01 00 84 	lwz     r0,132(r1)
    2930:	2f 80 00 00 	cmpwi   cr7,r0,0
    2934:	40 9e 00 0c 	bne-    cr7,2940 <sctp_sendmsg+0x230>
		return -EINVAL;
    2938:	38 00 ff ea 	li      r0,-22
    293c:	48 00 00 94 	b       29d0 <sctp_sendmsg+0x2c0>

	/* Is this a valid SCTP address?  */
	if (!af->addr_valid(addr, sctp_sk(sk), NULL))
    2940:	80 01 00 84 	lwz     r0,132(r1)
    2944:	7c 0b 03 78 	mr      r11,r0
    2948:	80 0b 00 44 	lwz     r0,68(r11)
    294c:	81 21 00 74 	lwz     r9,116(r1)
    2950:	91 21 00 88 	stw     r9,136(r1)
    2954:	81 21 00 88 	lwz     r9,136(r1)
    2958:	80 61 00 78 	lwz     r3,120(r1)
    295c:	7d 24 4b 78 	mr      r4,r9
    2960:	38 a0 00 00 	li      r5,0
    2964:	7c 09 03 a6 	mtctr   r0
    2968:	4e 80 04 21 	bctrl
    296c:	7c 60 1b 78 	mr      r0,r3
    2970:	2f 80 00 00 	cmpwi   cr7,r0,0
    2974:	40 9e 00 0c 	bne-    cr7,2980 <sctp_sendmsg+0x270>
		return -EINVAL;
    2978:	38 00 ff ea 	li      r0,-22
    297c:	48 00 00 54 	b       29d0 <sctp_sendmsg+0x2c0>
    2980:	80 01 00 74 	lwz     r0,116(r1)
    2984:	90 01 00 8c 	stw     r0,140(r1)
    2988:	80 01 00 8c 	lwz     r0,140(r1)

	if (!sctp_sk(sk)->pf->send_verify(sctp_sk(sk), (addr)))
    298c:	7c 09 03 78 	mr      r9,r0
    2990:	80 09 01 cc 	lwz     r0,460(r9)
    2994:	7c 0a 03 78 	mr      r10,r0
    2998:	80 0a 00 14 	lwz     r0,20(r10)
    299c:	81 21 00 74 	lwz     r9,116(r1)
    29a0:	91 21 00 90 	stw     r9,144(r1)
    29a4:	81 21 00 90 	lwz     r9,144(r1)
    29a8:	7d 23 4b 78 	mr      r3,r9
    29ac:	80 81 00 78 	lwz     r4,120(r1)
    29b0:	7c 09 03 a6 	mtctr   r0
    29b4:	4e 80 04 21 	bctrl
    29b8:	7c 60 1b 78 	mr      r0,r3
    29bc:	2f 80 00 00 	cmpwi   cr7,r0,0
    29c0:	40 9e 00 0c 	bne-    cr7,29cc <sctp_sendmsg+0x2bc>
		return -EINVAL;
    29c4:	38 00 ff ea 	li      r0,-22
    29c8:	48 00 00 08 	b       29d0 <sctp_sendmsg+0x2c0>

	return 0;
    29cc:	38 00 00 00 	li      r0,0
	 * For a peeled-off socket, msg_name is ignored.
	 */
	if (!sctp_style(sk, UDP_HIGH_BANDWIDTH) && msg->msg_name) {
		int msg_namelen = msg->msg_namelen;

		err = sctp_verify_addr(sk, (union sctp_addr *)msg->msg_name,
    29d0:	90 01 00 24 	stw     r0,36(r1)
				       msg_namelen);
		if (err)
    29d4:	80 01 00 24 	lwz     r0,36(r1)
    29d8:	2f 80 00 00 	cmpwi   cr7,r0,0
    29dc:	41 9e 00 0c 	beq-    cr7,29e8 <sctp_sendmsg+0x2d8>
			return err;
    29e0:	80 01 00 24 	lwz     r0,36(r1)
    29e4:	48 00 0e 24 	b       3808 <sctp_sendmsg+0x10f8>

		if (msg_namelen > sizeof(to))
    29e8:	80 01 00 2c 	lwz     r0,44(r1)
    29ec:	2b 80 00 1c 	cmplwi  cr7,r0,28
    29f0:	40 9d 00 0c 	ble-    cr7,29fc <sctp_sendmsg+0x2ec>
			msg_namelen = sizeof(to);
    29f4:	38 00 00 1c 	li      r0,28
    29f8:	90 01 00 2c 	stw     r0,44(r1)
		memcpy(&to, msg->msg_name, msg_namelen);
    29fc:	80 01 01 a0 	lwz     r0,416(r1)
    2a00:	7c 0a 03 78 	mr      r10,r0
    2a04:	81 2a 00 00 	lwz     r9,0(r10)
    2a08:	80 01 00 2c 	lwz     r0,44(r1)
    2a0c:	39 61 01 50 	addi    r11,r1,336
    2a10:	7d 63 5b 78 	mr      r3,r11
    2a14:	7d 24 4b 78 	mr      r4,r9
    2a18:	7c 05 03 78 	mr      r5,r0
    2a1c:	48 00 00 01 	bl      2a1c <sctp_sendmsg+0x30c>
		msg_name = msg->msg_name;
    2a20:	80 01 01 a0 	lwz     r0,416(r1)
    2a24:	7c 0b 03 78 	mr      r11,r0
    2a28:	80 0b 00 00 	lwz     r0,0(r11)
    2a2c:	90 01 00 18 	stw     r0,24(r1)
	}

	sinfo = cmsgs.info;
    2a30:	80 01 01 90 	lwz     r0,400(r1)
    2a34:	90 01 00 1c 	stw     r0,28(r1)
	sinit = cmsgs.init;
    2a38:	80 01 01 8c 	lwz     r0,396(r1)
    2a3c:	90 01 00 3c 	stw     r0,60(r1)

	/* Did the user specify SNDRCVINFO?  */
	if (sinfo) {
    2a40:	80 01 00 1c 	lwz     r0,28(r1)
    2a44:	2f 80 00 00 	cmpwi   cr7,r0,0
    2a48:	41 9e 00 24 	beq-    cr7,2a6c <sctp_sendmsg+0x35c>
		sinfo_flags = sinfo->sinfo_flags;
    2a4c:	80 01 00 1c 	lwz     r0,28(r1)
    2a50:	7c 09 03 78 	mr      r9,r0
    2a54:	a0 09 00 04 	lhz     r0,4(r9)
    2a58:	b0 01 00 28 	sth     r0,40(r1)
		associd = sinfo->sinfo_assoc_id;
    2a5c:	80 01 00 1c 	lwz     r0,28(r1)
    2a60:	7c 0a 03 78 	mr      r10,r0
    2a64:	80 0a 00 1c 	lwz     r0,28(r10)
    2a68:	90 01 00 20 	stw     r0,32(r1)
    2a6c:	80 01 01 9c 	lwz     r0,412(r1)
    2a70:	90 01 00 94 	stw     r0,148(r1)
    2a74:	38 00 00 02 	li      r0,2
    2a78:	90 01 00 98 	stw     r0,152(r1)
    2a7c:	80 01 00 94 	lwz     r0,148(r1)
    2a80:	90 01 00 9c 	stw     r0,156(r1)
    2a84:	80 01 00 9c 	lwz     r0,156(r1)
    2a88:	7c 0b 03 78 	mr      r11,r0
    2a8c:	80 0b 01 c8 	lwz     r0,456(r11)
    2a90:	81 21 00 98 	lwz     r9,152(r1)
    2a94:	7f 89 00 00 	cmpw    cr7,r9,r0
    2a98:	7c 00 00 26 	mfcr    r0
    2a9c:	54 00 ff fe 	rlwinm  r0,r0,31,31,31

	SCTP_DEBUG_PRINTK("msg_len: %zu, sinfo_flags: 0x%x\n",
			  msg_len, sinfo_flags);

	/* SCTP_EOF or SCTP_ABORT cannot be set on a TCP-style socket. */
	if (sctp_style(sk, TCP) && (sinfo_flags & (SCTP_EOF | SCTP_ABORT))) {
    2aa0:	2f 80 00 00 	cmpwi   cr7,r0,0
    2aa4:	41 9e 00 24 	beq-    cr7,2ac8 <sctp_sendmsg+0x3b8>
    2aa8:	a0 01 00 28 	lhz     r0,40(r1)
    2aac:	54 00 04 3e 	clrlwi  r0,r0,16
    2ab0:	70 00 02 04 	andi.   r0,r0,516
    2ab4:	2f 80 00 00 	cmpwi   cr7,r0,0
    2ab8:	41 9e 00 10 	beq-    cr7,2ac8 <sctp_sendmsg+0x3b8>
		err = -EINVAL;
    2abc:	38 00 ff ea 	li      r0,-22
    2ac0:	90 01 00 24 	stw     r0,36(r1)
		goto out_nounlock;
    2ac4:	48 00 0d 30 	b       37f4 <sctp_sendmsg+0x10e4>
	/* If SCTP_EOF is set, no data can be sent. Disallow sending zero
	 * length messages when SCTP_EOF|SCTP_ABORT is not set.
	 * If SCTP_ABORT is set, the message length could be non zero with
	 * the msg_iov set to the user abort reason.
	 */
	if (((sinfo_flags & SCTP_EOF) && (msg_len > 0)) ||
    2ac8:	a0 01 00 28 	lhz     r0,40(r1)
    2acc:	54 00 04 3e 	clrlwi  r0,r0,16
    2ad0:	54 00 05 ac 	rlwinm  r0,r0,0,22,22
    2ad4:	2f 80 00 00 	cmpwi   cr7,r0,0
    2ad8:	41 9e 00 10 	beq-    cr7,2ae8 <sctp_sendmsg+0x3d8>
    2adc:	80 01 01 a4 	lwz     r0,420(r1)
    2ae0:	2f 80 00 00 	cmpwi   cr7,r0,0
    2ae4:	40 9e 00 24 	bne-    cr7,2b08 <sctp_sendmsg+0x3f8>
	    (!(sinfo_flags & (SCTP_EOF|SCTP_ABORT)) && (msg_len == 0))) {
    2ae8:	a0 01 00 28 	lhz     r0,40(r1)
    2aec:	54 00 04 3e 	clrlwi  r0,r0,16
    2af0:	70 00 02 04 	andi.   r0,r0,516
	/* If SCTP_EOF is set, no data can be sent. Disallow sending zero
	 * length messages when SCTP_EOF|SCTP_ABORT is not set.
	 * If SCTP_ABORT is set, the message length could be non zero with
	 * the msg_iov set to the user abort reason.
	 */
	if (((sinfo_flags & SCTP_EOF) && (msg_len > 0)) ||
    2af4:	2f 80 00 00 	cmpwi   cr7,r0,0
    2af8:	40 9e 00 1c 	bne-    cr7,2b14 <sctp_sendmsg+0x404>
	    (!(sinfo_flags & (SCTP_EOF|SCTP_ABORT)) && (msg_len == 0))) {
    2afc:	80 01 01 a4 	lwz     r0,420(r1)
    2b00:	2f 80 00 00 	cmpwi   cr7,r0,0
    2b04:	40 9e 00 10 	bne-    cr7,2b14 <sctp_sendmsg+0x404>
		err = -EINVAL;
    2b08:	38 00 ff ea 	li      r0,-22
    2b0c:	90 01 00 24 	stw     r0,36(r1)
		goto out_nounlock;
    2b10:	48 00 0c e4 	b       37f4 <sctp_sendmsg+0x10e4>
	}

	/* If SCTP_ADDR_OVER is set, there must be an address
	 * specified in msg_name.
	 */
	if ((sinfo_flags & SCTP_ADDR_OVER) && (!msg->msg_name)) {
    2b14:	a0 01 00 28 	lhz     r0,40(r1)
    2b18:	54 00 04 3e 	clrlwi  r0,r0,16
    2b1c:	54 00 07 bc 	rlwinm  r0,r0,0,30,30
    2b20:	2f 80 00 00 	cmpwi   cr7,r0,0
    2b24:	41 9e 00 24 	beq-    cr7,2b48 <sctp_sendmsg+0x438>
    2b28:	80 01 01 a0 	lwz     r0,416(r1)
    2b2c:	7c 09 03 78 	mr      r9,r0
    2b30:	80 09 00 00 	lwz     r0,0(r9)
    2b34:	2f 80 00 00 	cmpwi   cr7,r0,0
    2b38:	40 9e 00 10 	bne-    cr7,2b48 <sctp_sendmsg+0x438>
		err = -EINVAL;
    2b3c:	38 00 ff ea 	li      r0,-22
    2b40:	90 01 00 24 	stw     r0,36(r1)
		goto out_nounlock;
    2b44:	48 00 0c b0 	b       37f4 <sctp_sendmsg+0x10e4>
	}

	transport = NULL;
    2b48:	38 00 00 00 	li      r0,0
    2b4c:	90 01 01 4c 	stw     r0,332(r1)
    2b50:	80 01 01 9c 	lwz     r0,412(r1)
    2b54:	90 01 00 a0 	stw     r0,160(r1)

extern void lock_sock_nested(struct sock *sk, int subclass);

static inline void lock_sock(struct sock *sk)
{
	lock_sock_nested(sk, 0);
    2b58:	80 61 00 a0 	lwz     r3,160(r1)
    2b5c:	38 80 00 00 	li      r4,0
    2b60:	48 00 00 01 	bl      2b60 <sctp_sendmsg+0x450>
	SCTP_DEBUG_PRINTK("About to look up association.\n");

	sctp_lock_sock(sk);

	/* If a msg_name has been specified, assume this is to be used.  */
	if (msg_name) {
    2b64:	80 01 00 18 	lwz     r0,24(r1)
    2b68:	2f 80 00 00 	cmpwi   cr7,r0,0
    2b6c:	41 9e 00 c8 	beq-    cr7,2c34 <sctp_sendmsg+0x524>
		/* Look for a matching association on the endpoint. */
		asoc = sctp_endpoint_lookup_assoc(ep, &to, &transport);
    2b70:	39 21 01 50 	addi    r9,r1,336
    2b74:	38 01 01 4c 	addi    r0,r1,332
    2b78:	80 61 00 38 	lwz     r3,56(r1)
    2b7c:	7d 24 4b 78 	mr      r4,r9
    2b80:	7c 05 03 78 	mr      r5,r0
    2b84:	48 00 00 01 	bl      2b84 <sctp_sendmsg+0x474>
    2b88:	90 61 00 0c 	stw     r3,12(r1)
		if (!asoc) {
    2b8c:	80 01 00 0c 	lwz     r0,12(r1)
    2b90:	2f 80 00 00 	cmpwi   cr7,r0,0
    2b94:	40 9e 00 c8 	bne-    cr7,2c5c <sctp_sendmsg+0x54c>
    2b98:	80 01 01 9c 	lwz     r0,412(r1)
    2b9c:	90 01 00 a4 	stw     r0,164(r1)
    2ba0:	38 00 00 02 	li      r0,2
    2ba4:	90 01 00 a8 	stw     r0,168(r1)
    2ba8:	80 01 00 a4 	lwz     r0,164(r1)
    2bac:	90 01 00 ac 	stw     r0,172(r1)
    2bb0:	80 01 00 ac 	lwz     r0,172(r1)
    2bb4:	7c 0a 03 78 	mr      r10,r0
    2bb8:	80 0a 01 c8 	lwz     r0,456(r10)
    2bbc:	81 21 00 a8 	lwz     r9,168(r1)
    2bc0:	7f 89 00 00 	cmpw    cr7,r9,r0
    2bc4:	7c 00 00 26 	mfcr    r0
    2bc8:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
			/* If we could not find a matching association on the
			 * endpoint, make sure that it is not a TCP-style
			 * socket that already has an association or there is
			 * no peeled-off association on another socket.
			 */
			if ((sctp_style(sk, TCP) &&
    2bcc:	2f 80 00 00 	cmpwi   cr7,r0,0
    2bd0:	41 9e 00 3c 	beq-    cr7,2c0c <sctp_sendmsg+0x4fc>
    2bd4:	80 01 01 9c 	lwz     r0,412(r1)
    2bd8:	90 01 00 b0 	stw     r0,176(r1)
    2bdc:	38 00 00 01 	li      r0,1
    2be0:	90 01 00 b4 	stw     r0,180(r1)

/* Is the socket in this state? */
#define sctp_sstate(sk, state) __sctp_sstate((sk), (SCTP_SS_##state))
static inline int __sctp_sstate(const struct sock *sk, sctp_sock_state_t state)
{
	return sk->sk_state == state;
    2be4:	80 01 00 b0 	lwz     r0,176(r1)
    2be8:	7c 0b 03 78 	mr      r11,r0
    2bec:	88 0b 00 0e 	lbz     r0,14(r11)
    2bf0:	54 00 06 3e 	clrlwi  r0,r0,24
    2bf4:	81 21 00 b4 	lwz     r9,180(r1)
    2bf8:	7f 89 00 00 	cmpw    cr7,r9,r0
    2bfc:	7c 00 00 26 	mfcr    r0
    2c00:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
    2c04:	2f 80 00 00 	cmpwi   cr7,r0,0
    2c08:	40 9e 00 20 	bne-    cr7,2c28 <sctp_sendmsg+0x518>
			     sctp_sstate(sk, ESTABLISHED)) ||
			    sctp_endpoint_is_peeled_off(ep, &to)) {
    2c0c:	38 01 01 50 	addi    r0,r1,336
    2c10:	80 61 00 38 	lwz     r3,56(r1)
    2c14:	7c 04 03 78 	mr      r4,r0
    2c18:	48 00 00 01 	bl      2c18 <sctp_sendmsg+0x508>
    2c1c:	7c 60 1b 78 	mr      r0,r3
			 * endpoint, make sure that it is not a TCP-style
			 * socket that already has an association or there is
			 * no peeled-off association on another socket.
			 */
			if ((sctp_style(sk, TCP) &&
			     sctp_sstate(sk, ESTABLISHED)) ||
    2c20:	2f 80 00 00 	cmpwi   cr7,r0,0
    2c24:	41 9e 00 38 	beq-    cr7,2c5c <sctp_sendmsg+0x54c>
			    sctp_endpoint_is_peeled_off(ep, &to)) {
				err = -EADDRNOTAVAIL;
    2c28:	38 00 ff 9d 	li      r0,-99
    2c2c:	90 01 00 24 	stw     r0,36(r1)
				goto out_unlock;
    2c30:	48 00 0b b4 	b       37e4 <sctp_sendmsg+0x10d4>
			}
		}
	} else {
		asoc = sctp_id2assoc(sk, associd);
    2c34:	80 61 01 9c 	lwz     r3,412(r1)
    2c38:	80 81 00 20 	lwz     r4,32(r1)
    2c3c:	48 00 00 01 	bl      2c3c <sctp_sendmsg+0x52c>
    2c40:	90 61 00 0c 	stw     r3,12(r1)
		if (!asoc) {
    2c44:	80 01 00 0c 	lwz     r0,12(r1)
    2c48:	2f 80 00 00 	cmpwi   cr7,r0,0
    2c4c:	40 9e 00 10 	bne-    cr7,2c5c <sctp_sendmsg+0x54c>
			err = -EPIPE;
    2c50:	38 00 ff e0 	li      r0,-32
    2c54:	90 01 00 24 	stw     r0,36(r1)
			goto out_unlock;
    2c58:	48 00 0b 8c 	b       37e4 <sctp_sendmsg+0x10d4>
		}
	}

	if (asoc) {
    2c5c:	80 01 00 0c 	lwz     r0,12(r1)
    2c60:	2f 80 00 00 	cmpwi   cr7,r0,0
    2c64:	41 9e 01 04 	beq-    cr7,2d68 <sctp_sendmsg+0x658>
    2c68:	80 01 00 0c 	lwz     r0,12(r1)
    2c6c:	90 01 00 b8 	stw     r0,184(r1)
    2c70:	38 00 00 01 	li      r0,1
    2c74:	90 01 00 bc 	stw     r0,188(r1)
/* Is the association in this state? */
#define sctp_state(asoc, state) __sctp_state((asoc), (SCTP_STATE_##state))
static inline int __sctp_state(const struct sctp_association *asoc,
			       sctp_state_t state)
{
	return asoc->state == state;
    2c78:	80 01 00 b8 	lwz     r0,184(r1)
    2c7c:	7c 09 03 78 	mr      r9,r0
    2c80:	80 09 01 b8 	lwz     r0,440(r9)
    2c84:	81 21 00 bc 	lwz     r9,188(r1)
    2c88:	7f 89 00 00 	cmpw    cr7,r9,r0
    2c8c:	7c 00 00 26 	mfcr    r0
    2c90:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
		/* We cannot send a message on a TCP-style SCTP_SS_ESTABLISHED
		 * socket that has an association in CLOSED state. This can
		 * happen when an accepted socket has an association that is
		 * already CLOSED.
		 */
		if (sctp_state(asoc, CLOSED) && sctp_style(sk, TCP)) {
    2c94:	2f 80 00 00 	cmpwi   cr7,r0,0
    2c98:	41 9e 00 4c 	beq-    cr7,2ce4 <sctp_sendmsg+0x5d4>
    2c9c:	80 01 01 9c 	lwz     r0,412(r1)
    2ca0:	90 01 00 c0 	stw     r0,192(r1)
    2ca4:	38 00 00 02 	li      r0,2
    2ca8:	90 01 00 c4 	stw     r0,196(r1)
    2cac:	80 01 00 c0 	lwz     r0,192(r1)
    2cb0:	90 01 00 c8 	stw     r0,200(r1)
    2cb4:	80 01 00 c8 	lwz     r0,200(r1)

/* Is a socket of this style? */
#define sctp_style(sk, style) __sctp_style((sk), (SCTP_SOCKET_##style))
static inline int __sctp_style(const struct sock *sk, sctp_socket_type_t style)
{
	return sctp_sk(sk)->type == style;
    2cb8:	7c 0a 03 78 	mr      r10,r0
    2cbc:	80 0a 01 c8 	lwz     r0,456(r10)
    2cc0:	81 21 00 c4 	lwz     r9,196(r1)
    2cc4:	7f 89 00 00 	cmpw    cr7,r9,r0
    2cc8:	7c 00 00 26 	mfcr    r0
    2ccc:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
    2cd0:	2f 80 00 00 	cmpwi   cr7,r0,0
    2cd4:	41 9e 00 10 	beq-    cr7,2ce4 <sctp_sendmsg+0x5d4>
			err = -EPIPE;
    2cd8:	38 00 ff e0 	li      r0,-32
    2cdc:	90 01 00 24 	stw     r0,36(r1)
			goto out_unlock;
    2ce0:	48 00 0b 04 	b       37e4 <sctp_sendmsg+0x10d4>
		}

		if (sinfo_flags & SCTP_EOF) {
    2ce4:	a0 01 00 28 	lhz     r0,40(r1)
    2ce8:	54 00 04 3e 	clrlwi  r0,r0,16
    2cec:	54 00 05 ac 	rlwinm  r0,r0,0,22,22
    2cf0:	2f 80 00 00 	cmpwi   cr7,r0,0
    2cf4:	41 9e 00 1c 	beq-    cr7,2d10 <sctp_sendmsg+0x600>
			SCTP_DEBUG_PRINTK("Shutting down association: %p\n",
					  asoc);
			sctp_primitive_SHUTDOWN(asoc, NULL);
    2cf8:	80 61 00 0c 	lwz     r3,12(r1)
    2cfc:	38 80 00 00 	li      r4,0
    2d00:	48 00 00 01 	bl      2d00 <sctp_sendmsg+0x5f0>
			err = 0;
    2d04:	38 00 00 00 	li      r0,0
    2d08:	90 01 00 24 	stw     r0,36(r1)
			goto out_unlock;
    2d0c:	48 00 0a d8 	b       37e4 <sctp_sendmsg+0x10d4>
		}
		if (sinfo_flags & SCTP_ABORT) {
    2d10:	a0 01 00 28 	lhz     r0,40(r1)
    2d14:	54 00 04 3e 	clrlwi  r0,r0,16
    2d18:	54 00 07 7a 	rlwinm  r0,r0,0,29,29
    2d1c:	2f 80 00 00 	cmpwi   cr7,r0,0
    2d20:	41 9e 00 48 	beq-    cr7,2d68 <sctp_sendmsg+0x658>

			chunk = sctp_make_abort_user(asoc, msg, msg_len);
    2d24:	80 61 00 0c 	lwz     r3,12(r1)
    2d28:	80 81 01 a0 	lwz     r4,416(r1)
    2d2c:	80 a1 01 a4 	lwz     r5,420(r1)
    2d30:	48 00 00 01 	bl      2d30 <sctp_sendmsg+0x620>
    2d34:	90 61 00 14 	stw     r3,20(r1)
			if (!chunk) {
    2d38:	80 01 00 14 	lwz     r0,20(r1)
    2d3c:	2f 80 00 00 	cmpwi   cr7,r0,0
    2d40:	40 9e 00 10 	bne-    cr7,2d50 <sctp_sendmsg+0x640>
				err = -ENOMEM;
    2d44:	38 00 ff f4 	li      r0,-12
    2d48:	90 01 00 24 	stw     r0,36(r1)
				goto out_unlock;
    2d4c:	48 00 0a 98 	b       37e4 <sctp_sendmsg+0x10d4>
			}

			SCTP_DEBUG_PRINTK("Aborting association: %p\n", asoc);
			sctp_primitive_ABORT(asoc, chunk);
    2d50:	80 61 00 0c 	lwz     r3,12(r1)
    2d54:	80 81 00 14 	lwz     r4,20(r1)
    2d58:	48 00 00 01 	bl      2d58 <sctp_sendmsg+0x648>
			err = 0;
    2d5c:	38 00 00 00 	li      r0,0
    2d60:	90 01 00 24 	stw     r0,36(r1)
			goto out_unlock;
    2d64:	48 00 0a 80 	b       37e4 <sctp_sendmsg+0x10d4>
		}
	}

	/* Do we need to create the association?  */
	if (!asoc) {
    2d68:	80 01 00 0c 	lwz     r0,12(r1)
    2d6c:	2f 80 00 00 	cmpwi   cr7,r0,0
    2d70:	40 9e 02 d0 	bne-    cr7,3040 <sctp_sendmsg+0x930>
		SCTP_DEBUG_PRINTK("There is no association yet.\n");

		if (sinfo_flags & (SCTP_EOF | SCTP_ABORT)) {
    2d74:	a0 01 00 28 	lhz     r0,40(r1)
    2d78:	54 00 04 3e 	clrlwi  r0,r0,16
    2d7c:	70 00 02 04 	andi.   r0,r0,516
    2d80:	2f 80 00 00 	cmpwi   cr7,r0,0
    2d84:	41 9e 00 10 	beq-    cr7,2d94 <sctp_sendmsg+0x684>
			err = -EINVAL;
    2d88:	38 00 ff ea 	li      r0,-22
    2d8c:	90 01 00 24 	stw     r0,36(r1)
			goto out_unlock;
    2d90:	48 00 0a 54 	b       37e4 <sctp_sendmsg+0x10d4>
		}

		/* Check for invalid stream against the stream counts,
		 * either the default or the user specified stream counts.
		 */
		if (sinfo) {
    2d94:	80 01 00 1c 	lwz     r0,28(r1)
    2d98:	2f 80 00 00 	cmpwi   cr7,r0,0
    2d9c:	41 9e 00 9c 	beq-    cr7,2e38 <sctp_sendmsg+0x728>
			if (!sinit || (sinit && !sinit->sinit_num_ostreams)) {
    2da0:	80 01 00 3c 	lwz     r0,60(r1)
    2da4:	2f 80 00 00 	cmpwi   cr7,r0,0
    2da8:	41 9e 00 28 	beq-    cr7,2dd0 <sctp_sendmsg+0x6c0>
    2dac:	80 01 00 3c 	lwz     r0,60(r1)
    2db0:	2f 80 00 00 	cmpwi   cr7,r0,0
    2db4:	41 9e 00 50 	beq-    cr7,2e04 <sctp_sendmsg+0x6f4>
    2db8:	80 01 00 3c 	lwz     r0,60(r1)
    2dbc:	7c 09 03 78 	mr      r9,r0
    2dc0:	a0 09 00 00 	lhz     r0,0(r9)
    2dc4:	54 00 04 3e 	clrlwi  r0,r0,16
    2dc8:	2f 80 00 00 	cmpwi   cr7,r0,0
    2dcc:	40 9e 00 38 	bne-    cr7,2e04 <sctp_sendmsg+0x6f4>
				/* Check against the defaults. */
				if (sinfo->sinfo_stream >=
    2dd0:	80 01 00 1c 	lwz     r0,28(r1)
    2dd4:	7c 0a 03 78 	mr      r10,r0
    2dd8:	a0 0a 00 00 	lhz     r0,0(r10)
    2ddc:	54 09 04 3e 	clrlwi  r9,r0,16
				    sp->initmsg.sinit_num_ostreams) {
    2de0:	80 01 00 34 	lwz     r0,52(r1)
    2de4:	7c 0b 03 78 	mr      r11,r0
    2de8:	a0 0b 02 10 	lhz     r0,528(r11)
    2dec:	54 00 04 3e 	clrlwi  r0,r0,16
		 * either the default or the user specified stream counts.
		 */
		if (sinfo) {
			if (!sinit || (sinit && !sinit->sinit_num_ostreams)) {
				/* Check against the defaults. */
				if (sinfo->sinfo_stream >=
    2df0:	7f 89 00 40 	cmplw   cr7,r9,r0
    2df4:	41 9c 00 44 	blt-    cr7,2e38 <sctp_sendmsg+0x728>
				    sp->initmsg.sinit_num_ostreams) {
					err = -EINVAL;
    2df8:	38 00 ff ea 	li      r0,-22
    2dfc:	90 01 00 24 	stw     r0,36(r1)
					goto out_unlock;
    2e00:	48 00 09 e4 	b       37e4 <sctp_sendmsg+0x10d4>
				}
			} else {
				/* Check against the requested.  */
				if (sinfo->sinfo_stream >=
    2e04:	80 01 00 1c 	lwz     r0,28(r1)
    2e08:	7c 09 03 78 	mr      r9,r0
    2e0c:	a0 09 00 00 	lhz     r0,0(r9)
    2e10:	54 09 04 3e 	clrlwi  r9,r0,16
				    sinit->sinit_num_ostreams) {
    2e14:	80 01 00 3c 	lwz     r0,60(r1)
    2e18:	7c 0a 03 78 	mr      r10,r0
    2e1c:	a0 0a 00 00 	lhz     r0,0(r10)
    2e20:	54 00 04 3e 	clrlwi  r0,r0,16
					err = -EINVAL;
					goto out_unlock;
				}
			} else {
				/* Check against the requested.  */
				if (sinfo->sinfo_stream >=
    2e24:	7f 89 00 40 	cmplw   cr7,r9,r0
    2e28:	41 9c 00 10 	blt-    cr7,2e38 <sctp_sendmsg+0x728>
				    sinit->sinit_num_ostreams) {
					err = -EINVAL;
    2e2c:	38 00 ff ea 	li      r0,-22
    2e30:	90 01 00 24 	stw     r0,36(r1)
					goto out_unlock;
    2e34:	48 00 09 b0 	b       37e4 <sctp_sendmsg+0x10d4>
		 * If a bind() or sctp_bindx() is not called prior to a
		 * sendmsg() call that initiates a new association, the
		 * system picks an ephemeral port and will choose an address
		 * set equivalent to binding with a wildcard address.
		 */
		if (!ep->base.bind_addr.port) {
    2e38:	80 01 00 38 	lwz     r0,56(r1)
    2e3c:	7c 0b 03 78 	mr      r11,r0
    2e40:	a0 0b 00 3c 	lhz     r0,60(r11)
    2e44:	54 00 04 3e 	clrlwi  r0,r0,16
    2e48:	2f 80 00 00 	cmpwi   cr7,r0,0
    2e4c:	40 9e 00 24 	bne-    cr7,2e70 <sctp_sendmsg+0x760>
			if (sctp_autobind(sk)) {
    2e50:	80 61 01 9c 	lwz     r3,412(r1)
    2e54:	48 00 da c9 	bl      1091c <sctp_autobind>
    2e58:	7c 60 1b 78 	mr      r0,r3
    2e5c:	2f 80 00 00 	cmpwi   cr7,r0,0
    2e60:	41 9e 00 48 	beq-    cr7,2ea8 <sctp_sendmsg+0x798>
				err = -EAGAIN;
    2e64:	38 00 ff f5 	li      r0,-11
    2e68:	90 01 00 24 	stw     r0,36(r1)
				goto out_unlock;
    2e6c:	48 00 09 78 	b       37e4 <sctp_sendmsg+0x10d4>
			 * style socket with open associations on a privileged
			 * port, it MAY be permitted to accept new associations,
			 * but it SHOULD NOT be permitted to open new
			 * associations.
			 */
			if (ep->base.bind_addr.port < PROT_SOCK &&
    2e70:	80 01 00 38 	lwz     r0,56(r1)
    2e74:	7c 09 03 78 	mr      r9,r0
    2e78:	a0 09 00 3c 	lhz     r0,60(r9)
    2e7c:	54 00 04 3e 	clrlwi  r0,r0,16
    2e80:	2b 80 03 ff 	cmplwi  cr7,r0,1023
    2e84:	41 9d 00 24 	bgt-    cr7,2ea8 <sctp_sendmsg+0x798>
			    !capable(CAP_NET_BIND_SERVICE)) {
    2e88:	38 60 00 0a 	li      r3,10
    2e8c:	48 00 00 01 	bl      2e8c <sctp_sendmsg+0x77c>
    2e90:	7c 60 1b 78 	mr      r0,r3
			 * style socket with open associations on a privileged
			 * port, it MAY be permitted to accept new associations,
			 * but it SHOULD NOT be permitted to open new
			 * associations.
			 */
			if (ep->base.bind_addr.port < PROT_SOCK &&
    2e94:	2f 80 00 00 	cmpwi   cr7,r0,0
    2e98:	40 9e 00 10 	bne-    cr7,2ea8 <sctp_sendmsg+0x798>
			    !capable(CAP_NET_BIND_SERVICE)) {
				err = -EACCES;
    2e9c:	38 00 ff f3 	li      r0,-13
    2ea0:	90 01 00 24 	stw     r0,36(r1)
				goto out_unlock;
    2ea4:	48 00 09 40 	b       37e4 <sctp_sendmsg+0x10d4>
			}
		}

		scope = sctp_scope(&to);
    2ea8:	38 01 01 50 	addi    r0,r1,336
    2eac:	7c 03 03 78 	mr      r3,r0
    2eb0:	48 00 00 01 	bl      2eb0 <sctp_sendmsg+0x7a0>
    2eb4:	90 61 00 40 	stw     r3,64(r1)
		new_asoc = sctp_association_new(ep, sk, scope, GFP_KERNEL);
    2eb8:	80 61 00 38 	lwz     r3,56(r1)
    2ebc:	80 81 01 9c 	lwz     r4,412(r1)
    2ec0:	80 a1 00 40 	lwz     r5,64(r1)
    2ec4:	38 c0 00 d0 	li      r6,208
    2ec8:	48 00 00 01 	bl      2ec8 <sctp_sendmsg+0x7b8>
    2ecc:	90 61 00 08 	stw     r3,8(r1)
		if (!new_asoc) {
    2ed0:	80 01 00 08 	lwz     r0,8(r1)
    2ed4:	2f 80 00 00 	cmpwi   cr7,r0,0
    2ed8:	40 9e 00 10 	bne-    cr7,2ee8 <sctp_sendmsg+0x7d8>
			err = -ENOMEM;
    2edc:	38 00 ff f4 	li      r0,-12
    2ee0:	90 01 00 24 	stw     r0,36(r1)
			goto out_unlock;
    2ee4:	48 00 09 00 	b       37e4 <sctp_sendmsg+0x10d4>
		}
		asoc = new_asoc;
    2ee8:	80 01 00 08 	lwz     r0,8(r1)
    2eec:	90 01 00 0c 	stw     r0,12(r1)
		err = sctp_assoc_set_bind_addr_from_ep(asoc, scope, GFP_KERNEL);
    2ef0:	80 61 00 0c 	lwz     r3,12(r1)
    2ef4:	80 81 00 40 	lwz     r4,64(r1)
    2ef8:	38 a0 00 d0 	li      r5,208
    2efc:	48 00 00 01 	bl      2efc <sctp_sendmsg+0x7ec>
    2f00:	90 61 00 24 	stw     r3,36(r1)
		if (err < 0) {
    2f04:	80 01 00 24 	lwz     r0,36(r1)
    2f08:	2f 80 00 00 	cmpwi   cr7,r0,0
    2f0c:	40 9c 00 10 	bge-    cr7,2f1c <sctp_sendmsg+0x80c>
			err = -ENOMEM;
    2f10:	38 00 ff f4 	li      r0,-12
    2f14:	90 01 00 24 	stw     r0,36(r1)
			goto out_free;
    2f18:	48 00 08 b8 	b       37d0 <sctp_sendmsg+0x10c0>
		}

		/* If the SCTP_INIT ancillary data is specified, set all
		 * the association init values accordingly.
		 */
		if (sinit) {
    2f1c:	80 01 00 3c 	lwz     r0,60(r1)
    2f20:	2f 80 00 00 	cmpwi   cr7,r0,0
    2f24:	41 9e 00 e0 	beq-    cr7,3004 <sctp_sendmsg+0x8f4>
			if (sinit->sinit_num_ostreams) {
    2f28:	80 01 00 3c 	lwz     r0,60(r1)
    2f2c:	7c 0a 03 78 	mr      r10,r0
    2f30:	a0 0a 00 00 	lhz     r0,0(r10)
    2f34:	54 00 04 3e 	clrlwi  r0,r0,16
    2f38:	2f 80 00 00 	cmpwi   cr7,r0,0
    2f3c:	41 9e 00 20 	beq-    cr7,2f5c <sctp_sendmsg+0x84c>
				asoc->c.sinit_num_ostreams =
					sinit->sinit_num_ostreams;
    2f40:	80 01 00 3c 	lwz     r0,60(r1)
    2f44:	7c 0b 03 78 	mr      r11,r0
    2f48:	a0 0b 00 00 	lhz     r0,0(r11)
    2f4c:	54 09 04 3e 	clrlwi  r9,r0,16
		/* If the SCTP_INIT ancillary data is specified, set all
		 * the association init values accordingly.
		 */
		if (sinit) {
			if (sinit->sinit_num_ostreams) {
				asoc->c.sinit_num_ostreams =
    2f50:	80 01 00 0c 	lwz     r0,12(r1)
    2f54:	7c 0a 03 78 	mr      r10,r0
    2f58:	b1 2a 00 74 	sth     r9,116(r10)
					sinit->sinit_num_ostreams;
			}
			if (sinit->sinit_max_instreams) {
    2f5c:	80 01 00 3c 	lwz     r0,60(r1)
    2f60:	7c 0b 03 78 	mr      r11,r0
    2f64:	a0 0b 00 02 	lhz     r0,2(r11)
    2f68:	54 00 04 3e 	clrlwi  r0,r0,16
    2f6c:	2f 80 00 00 	cmpwi   cr7,r0,0
    2f70:	41 9e 00 20 	beq-    cr7,2f90 <sctp_sendmsg+0x880>
				asoc->c.sinit_max_instreams =
					sinit->sinit_max_instreams;
    2f74:	80 01 00 3c 	lwz     r0,60(r1)
    2f78:	7c 09 03 78 	mr      r9,r0
    2f7c:	a0 09 00 02 	lhz     r0,2(r9)
    2f80:	54 09 04 3e 	clrlwi  r9,r0,16
			if (sinit->sinit_num_ostreams) {
				asoc->c.sinit_num_ostreams =
					sinit->sinit_num_ostreams;
			}
			if (sinit->sinit_max_instreams) {
				asoc->c.sinit_max_instreams =
    2f84:	80 01 00 0c 	lwz     r0,12(r1)
    2f88:	7c 0a 03 78 	mr      r10,r0
    2f8c:	b1 2a 00 76 	sth     r9,118(r10)
					sinit->sinit_max_instreams;
			}
			if (sinit->sinit_max_attempts) {
    2f90:	80 01 00 3c 	lwz     r0,60(r1)
    2f94:	7c 0b 03 78 	mr      r11,r0
    2f98:	a0 0b 00 04 	lhz     r0,4(r11)
    2f9c:	54 00 04 3e 	clrlwi  r0,r0,16
    2fa0:	2f 80 00 00 	cmpwi   cr7,r0,0
    2fa4:	41 9e 00 20 	beq-    cr7,2fc4 <sctp_sendmsg+0x8b4>
				asoc->max_init_attempts
					= sinit->sinit_max_attempts;
    2fa8:	80 01 00 3c 	lwz     r0,60(r1)
    2fac:	7c 09 03 78 	mr      r9,r0
    2fb0:	a0 09 00 04 	lhz     r0,4(r9)
    2fb4:	54 09 04 3e 	clrlwi  r9,r0,16
			if (sinit->sinit_max_instreams) {
				asoc->c.sinit_max_instreams =
					sinit->sinit_max_instreams;
			}
			if (sinit->sinit_max_attempts) {
				asoc->max_init_attempts
    2fb8:	80 01 00 0c 	lwz     r0,12(r1)
					= sinit->sinit_max_attempts;
    2fbc:	7c 0a 03 78 	mr      r10,r0
    2fc0:	b1 2a 01 dc 	sth     r9,476(r10)
			}
			if (sinit->sinit_max_init_timeo) {
    2fc4:	80 01 00 3c 	lwz     r0,60(r1)
    2fc8:	7c 0b 03 78 	mr      r11,r0
    2fcc:	a0 0b 00 06 	lhz     r0,6(r11)
    2fd0:	54 00 04 3e 	clrlwi  r0,r0,16
    2fd4:	2f 80 00 00 	cmpwi   cr7,r0,0
    2fd8:	41 9e 00 2c 	beq-    cr7,3004 <sctp_sendmsg+0x8f4>
				asoc->max_init_timeo =
				 msecs_to_jiffies(sinit->sinit_max_init_timeo);
    2fdc:	80 01 00 3c 	lwz     r0,60(r1)
    2fe0:	7c 09 03 78 	mr      r9,r0
    2fe4:	a0 09 00 06 	lhz     r0,6(r9)
    2fe8:	54 00 04 3e 	clrlwi  r0,r0,16
    2fec:	7c 03 03 78 	mr      r3,r0
    2ff0:	48 00 00 01 	bl      2ff0 <sctp_sendmsg+0x8e0>
    2ff4:	7c 69 1b 78 	mr      r9,r3
			if (sinit->sinit_max_attempts) {
				asoc->max_init_attempts
					= sinit->sinit_max_attempts;
			}
			if (sinit->sinit_max_init_timeo) {
				asoc->max_init_timeo =
    2ff8:	80 01 00 0c 	lwz     r0,12(r1)
    2ffc:	7c 0a 03 78 	mr      r10,r0
    3000:	91 2a 01 e0 	stw     r9,480(r10)
				 msecs_to_jiffies(sinit->sinit_max_init_timeo);
			}
		}

		/* Prime the peer's transport structures.  */
		transport = sctp_assoc_add_peer(asoc, &to, GFP_KERNEL, SCTP_UNKNOWN);
    3004:	38 01 01 50 	addi    r0,r1,336
    3008:	80 61 00 0c 	lwz     r3,12(r1)
    300c:	7c 04 03 78 	mr      r4,r0
    3010:	38 a0 00 d0 	li      r5,208
    3014:	38 00 00 00 	li      r0,0
    3018:	60 06 ff ff 	ori     r6,r0,65535
    301c:	48 00 00 01 	bl      301c <sctp_sendmsg+0x90c>
    3020:	7c 60 1b 78 	mr      r0,r3
    3024:	90 01 01 4c 	stw     r0,332(r1)
		if (!transport) {
    3028:	80 01 01 4c 	lwz     r0,332(r1)
    302c:	2f 80 00 00 	cmpwi   cr7,r0,0
    3030:	40 9e 00 10 	bne-    cr7,3040 <sctp_sendmsg+0x930>
			err = -ENOMEM;
    3034:	38 00 ff f4 	li      r0,-12
    3038:	90 01 00 24 	stw     r0,36(r1)
			goto out_free;
    303c:	48 00 07 94 	b       37d0 <sctp_sendmsg+0x10c0>
	}

	/* ASSERT: we have a valid association at this point.  */
	SCTP_DEBUG_PRINTK("We have a valid association.\n");

	if (!sinfo) {
    3040:	80 01 00 1c 	lwz     r0,28(r1)
    3044:	2f 80 00 00 	cmpwi   cr7,r0,0
    3048:	40 9e 00 90 	bne-    cr7,30d8 <sctp_sendmsg+0x9c8>
		/* If the user didn't specify SNDRCVINFO, make up one with
		 * some defaults.
		 */
		default_sinfo.sinfo_stream = asoc->default_stream;
    304c:	80 01 00 0c 	lwz     r0,12(r1)
    3050:	7c 0b 03 78 	mr      r11,r0
    3054:	a0 0b 03 94 	lhz     r0,916(r11)
    3058:	54 00 04 3e 	clrlwi  r0,r0,16
    305c:	b0 01 01 6c 	sth     r0,364(r1)
		default_sinfo.sinfo_flags = asoc->default_flags;
    3060:	80 01 00 0c 	lwz     r0,12(r1)
    3064:	7c 09 03 78 	mr      r9,r0
    3068:	a0 09 03 96 	lhz     r0,918(r9)
    306c:	54 00 04 3e 	clrlwi  r0,r0,16
    3070:	b0 01 01 70 	sth     r0,368(r1)
		default_sinfo.sinfo_ppid = asoc->default_ppid;
    3074:	80 01 00 0c 	lwz     r0,12(r1)
    3078:	7c 0a 03 78 	mr      r10,r0
    307c:	80 0a 03 98 	lwz     r0,920(r10)
    3080:	90 01 01 74 	stw     r0,372(r1)
		default_sinfo.sinfo_context = asoc->default_context;
    3084:	80 01 00 0c 	lwz     r0,12(r1)
    3088:	7c 0b 03 78 	mr      r11,r0
    308c:	80 0b 03 9c 	lwz     r0,924(r11)
    3090:	90 01 01 78 	stw     r0,376(r1)
		default_sinfo.sinfo_timetolive = asoc->default_timetolive;
    3094:	80 01 00 0c 	lwz     r0,12(r1)
    3098:	7c 09 03 78 	mr      r9,r0
    309c:	80 09 03 a0 	lwz     r0,928(r9)
    30a0:	90 01 01 7c 	stw     r0,380(r1)
    30a4:	80 01 00 0c 	lwz     r0,12(r1)
    30a8:	90 01 00 cc 	stw     r0,204(r1)


/* Map an association to an assoc_id. */
static inline sctp_assoc_t sctp_assoc2id(const struct sctp_association *asoc)
{
	return asoc ? asoc->assoc_id : 0;
    30ac:	80 01 00 cc 	lwz     r0,204(r1)
    30b0:	2f 80 00 00 	cmpwi   cr7,r0,0
    30b4:	41 9e 00 14 	beq-    cr7,30c8 <sctp_sendmsg+0x9b8>
    30b8:	80 01 00 cc 	lwz     r0,204(r1)
    30bc:	7c 0a 03 78 	mr      r10,r0
    30c0:	80 0a 00 54 	lwz     r0,84(r10)
    30c4:	48 00 00 08 	b       30cc <sctp_sendmsg+0x9bc>
    30c8:	38 00 00 00 	li      r0,0
		default_sinfo.sinfo_assoc_id = sctp_assoc2id(asoc);
    30cc:	90 01 01 88 	stw     r0,392(r1)
		sinfo = &default_sinfo;
    30d0:	38 01 01 6c 	addi    r0,r1,364
    30d4:	90 01 00 1c 	stw     r0,28(r1)
	}

	/* API 7.1.7, the sndbuf size per association bounds the
	 * maximum size of data that can be sent in a single send call.
	 */
	if (msg_len > sk->sk_sndbuf) {
    30d8:	80 01 01 9c 	lwz     r0,412(r1)
    30dc:	7c 0b 03 78 	mr      r11,r0
    30e0:	80 0b 00 84 	lwz     r0,132(r11)
    30e4:	7c 09 03 78 	mr      r9,r0
    30e8:	80 01 01 a4 	lwz     r0,420(r1)
    30ec:	7f 89 00 40 	cmplw   cr7,r9,r0
    30f0:	40 9c 00 10 	bge-    cr7,3100 <sctp_sendmsg+0x9f0>
		err = -EMSGSIZE;
    30f4:	38 00 ff a6 	li      r0,-90
    30f8:	90 01 00 24 	stw     r0,36(r1)
		goto out_free;
    30fc:	48 00 06 d4 	b       37d0 <sctp_sendmsg+0x10c0>
	}

	if (asoc->pmtu_pending)
    3100:	80 01 00 0c 	lwz     r0,12(r1)
    3104:	7c 09 03 78 	mr      r9,r0
    3108:	88 09 01 ea 	lbz     r0,490(r9)
    310c:	54 00 06 3e 	clrlwi  r0,r0,24
    3110:	2f 80 00 00 	cmpwi   cr7,r0,0
    3114:	41 9e 00 24 	beq-    cr7,3138 <sctp_sendmsg+0xa28>
    3118:	80 01 00 0c 	lwz     r0,12(r1)
    311c:	90 01 00 d0 	stw     r0,208(r1)
}

static inline void sctp_assoc_pending_pmtu(struct sctp_association *asoc)
{

	sctp_assoc_sync_pmtu(asoc);
    3120:	80 61 00 d0 	lwz     r3,208(r1)
    3124:	48 00 00 01 	bl      3124 <sctp_sendmsg+0xa14>
	asoc->pmtu_pending = 0;
    3128:	80 01 00 d0 	lwz     r0,208(r1)
    312c:	39 20 00 00 	li      r9,0
    3130:	7c 0a 03 78 	mr      r10,r0
    3134:	99 2a 01 ea 	stb     r9,490(r10)
    3138:	80 01 01 9c 	lwz     r0,412(r1)
    313c:	90 01 00 d4 	stw     r0,212(r1)
    3140:	80 01 00 d4 	lwz     r0,212(r1)
	/* If fragmentation is disabled and the message length exceeds the
	 * association fragmentation point, return EMSGSIZE.  The I-D
	 * does not specify what this error is, but this looks like
	 * a great fit.
	 */
	if (sctp_sk(sk)->disable_fragments && (msg_len > asoc->frag_point)) {
    3144:	7c 0b 03 78 	mr      r11,r0
    3148:	88 0b 02 e9 	lbz     r0,745(r11)
    314c:	54 00 06 3e 	clrlwi  r0,r0,24
    3150:	2f 80 00 00 	cmpwi   cr7,r0,0
    3154:	41 9e 00 28 	beq-    cr7,317c <sctp_sendmsg+0xa6c>
    3158:	80 01 00 0c 	lwz     r0,12(r1)
    315c:	7c 0a 03 78 	mr      r10,r0
    3160:	81 2a 03 84 	lwz     r9,900(r10)
    3164:	80 01 01 a4 	lwz     r0,420(r1)
    3168:	7f 89 00 40 	cmplw   cr7,r9,r0
    316c:	40 9c 00 10 	bge-    cr7,317c <sctp_sendmsg+0xa6c>
		err = -EMSGSIZE;
    3170:	38 00 ff a6 	li      r0,-90
    3174:	90 01 00 24 	stw     r0,36(r1)
		goto out_free;
    3178:	48 00 06 58 	b       37d0 <sctp_sendmsg+0x10c0>
	}

	if (sinfo) {
    317c:	80 01 00 1c 	lwz     r0,28(r1)
    3180:	2f 80 00 00 	cmpwi   cr7,r0,0
    3184:	41 9e 00 38 	beq-    cr7,31bc <sctp_sendmsg+0xaac>
		/* Check for invalid stream. */
		if (sinfo->sinfo_stream >= asoc->c.sinit_num_ostreams) {
    3188:	80 01 00 1c 	lwz     r0,28(r1)
    318c:	7c 0b 03 78 	mr      r11,r0
    3190:	a0 0b 00 00 	lhz     r0,0(r11)
    3194:	54 09 04 3e 	clrlwi  r9,r0,16
    3198:	80 01 00 0c 	lwz     r0,12(r1)
    319c:	7c 0a 03 78 	mr      r10,r0
    31a0:	a0 0a 00 74 	lhz     r0,116(r10)
    31a4:	54 00 04 3e 	clrlwi  r0,r0,16
    31a8:	7f 89 00 40 	cmplw   cr7,r9,r0
    31ac:	41 9c 00 10 	blt-    cr7,31bc <sctp_sendmsg+0xaac>
			err = -EINVAL;
    31b0:	38 00 ff ea 	li      r0,-22
    31b4:	90 01 00 24 	stw     r0,36(r1)
			goto out_free;
    31b8:	48 00 06 18 	b       37d0 <sctp_sendmsg+0x10c0>
		}
	}

	timeo = sock_sndtimeo(sk, msg->msg_flags & MSG_DONTWAIT);
    31bc:	80 01 01 a0 	lwz     r0,416(r1)
    31c0:	7c 0b 03 78 	mr      r11,r0
    31c4:	80 0b 00 18 	lwz     r0,24(r11)
    31c8:	54 00 06 72 	rlwinm  r0,r0,0,25,25
    31cc:	81 21 01 9c 	lwz     r9,412(r1)
    31d0:	91 21 00 d8 	stw     r9,216(r1)
    31d4:	90 01 00 dc 	stw     r0,220(r1)
	return noblock ? 0 : sk->sk_rcvtimeo;
}

static inline long sock_sndtimeo(const struct sock *sk, int noblock)
{
	return noblock ? 0 : sk->sk_sndtimeo;
    31d8:	80 01 00 dc 	lwz     r0,220(r1)
    31dc:	2f 80 00 00 	cmpwi   cr7,r0,0
    31e0:	40 9e 00 14 	bne-    cr7,31f4 <sctp_sendmsg+0xae4>
    31e4:	80 01 00 d8 	lwz     r0,216(r1)
    31e8:	7c 09 03 78 	mr      r9,r0
    31ec:	80 09 00 e4 	lwz     r0,228(r9)
    31f0:	48 00 00 08 	b       31f8 <sctp_sendmsg+0xae8>
    31f4:	38 00 00 00 	li      r0,0
    31f8:	90 01 01 94 	stw     r0,404(r1)
    31fc:	80 01 00 0c 	lwz     r0,12(r1)
    3200:	90 01 00 e0 	stw     r0,224(r1)
/* Get the sndbuf space available at the time on the association.  */
static inline int sctp_wspace(struct sctp_association *asoc)
{
	int amt;

	if (asoc->ep->sndbuf_policy)
    3204:	80 01 00 e0 	lwz     r0,224(r1)
    3208:	7c 0a 03 78 	mr      r10,r0
    320c:	80 0a 00 58 	lwz     r0,88(r10)
    3210:	7c 0b 03 78 	mr      r11,r0
    3214:	80 0b 00 a4 	lwz     r0,164(r11)
    3218:	2f 80 00 00 	cmpwi   cr7,r0,0
    321c:	41 9e 00 18 	beq-    cr7,3234 <sctp_sendmsg+0xb24>
		amt = asoc->sndbuf_used;
    3220:	80 01 00 e0 	lwz     r0,224(r1)
    3224:	7c 09 03 78 	mr      r9,r0
    3228:	80 09 03 74 	lwz     r0,884(r9)
    322c:	90 01 00 e4 	stw     r0,228(r1)
    3230:	48 00 00 3c 	b       326c <sctp_sendmsg+0xb5c>
	else
		amt = sk_wmem_alloc_get(asoc->base.sk);
    3234:	80 01 00 e0 	lwz     r0,224(r1)
    3238:	7c 0a 03 78 	mr      r10,r0
    323c:	80 0a 00 18 	lwz     r0,24(r10)
    3240:	90 01 00 e8 	stw     r0,232(r1)
 *
 * Returns sk_wmem_alloc minus initial offset of one
 */
static inline int sk_wmem_alloc_get(const struct sock *sk)
{
	return atomic_read(&sk->sk_wmem_alloc) - 1;
    3244:	80 01 00 e8 	lwz     r0,232(r1)
    3248:	30 00 00 7c 	addic   r0,r0,124
    324c:	90 01 00 ec 	stw     r0,236(r1)

static __inline__ int atomic_read(const atomic_t *v)
{
	int t;

	__asm__ __volatile__("lwz%U1%X1 %0,%1" : "=r"(t) : "m"(v->counter));
    3250:	80 01 00 ec 	lwz     r0,236(r1)
    3254:	7c 0b 03 78 	mr      r11,r0
    3258:	83 eb 00 00 	lwz     r31,0(r11)
    325c:	93 e1 00 f0 	stw     r31,240(r1)

	return t;
    3260:	80 01 00 f0 	lwz     r0,240(r1)
    3264:	30 00 ff ff 	addic   r0,r0,-1
    3268:	90 01 00 e4 	stw     r0,228(r1)

	if (amt >= asoc->base.sk->sk_sndbuf) {
    326c:	80 01 00 e0 	lwz     r0,224(r1)
    3270:	7c 09 03 78 	mr      r9,r0
    3274:	80 09 00 18 	lwz     r0,24(r9)
    3278:	7c 0a 03 78 	mr      r10,r0
    327c:	81 2a 00 84 	lwz     r9,132(r10)
    3280:	80 01 00 e4 	lwz     r0,228(r1)
    3284:	7f 89 00 00 	cmpw    cr7,r9,r0
    3288:	41 9d 00 88 	bgt-    cr7,3310 <sctp_sendmsg+0xc00>
		if (asoc->base.sk->sk_userlocks & SOCK_SNDBUF_LOCK)
    328c:	80 01 00 e0 	lwz     r0,224(r1)
    3290:	7c 0b 03 78 	mr      r11,r0
    3294:	80 0b 00 18 	lwz     r0,24(r11)
    3298:	7c 09 03 78 	mr      r9,r0
    329c:	80 09 00 94 	lwz     r0,148(r9)
    32a0:	54 00 46 3e 	rlwinm  r0,r0,8,24,31
    32a4:	54 00 07 3e 	clrlwi  r0,r0,28
    32a8:	54 00 06 3e 	clrlwi  r0,r0,24
    32ac:	54 00 07 fe 	clrlwi  r0,r0,31
    32b0:	54 00 06 3e 	clrlwi  r0,r0,24
    32b4:	2f 80 00 00 	cmpwi   cr7,r0,0
    32b8:	41 9e 00 10 	beq-    cr7,32c8 <sctp_sendmsg+0xbb8>
			amt = 0;
    32bc:	38 00 00 00 	li      r0,0
    32c0:	90 01 00 e4 	stw     r0,228(r1)
    32c4:	48 00 00 6c 	b       3330 <sctp_sendmsg+0xc20>
		else {
			amt = sk_stream_wspace(asoc->base.sk);
    32c8:	80 01 00 e0 	lwz     r0,224(r1)
    32cc:	7c 0a 03 78 	mr      r10,r0
    32d0:	80 0a 00 18 	lwz     r0,24(r10)
    32d4:	90 01 00 f4 	stw     r0,244(r1)
	return sk->sk_wmem_queued >> 1;
}

static inline int sk_stream_wspace(struct sock *sk)
{
	return sk->sk_sndbuf - sk->sk_wmem_queued;
    32d8:	80 01 00 f4 	lwz     r0,244(r1)
    32dc:	7c 0b 03 78 	mr      r11,r0
    32e0:	81 2b 00 84 	lwz     r9,132(r11)
    32e4:	80 01 00 f4 	lwz     r0,244(r1)
    32e8:	7c 0a 03 78 	mr      r10,r0
    32ec:	80 0a 00 98 	lwz     r0,152(r10)
    32f0:	7c 00 48 50 	subf    r0,r0,r9
    32f4:	90 01 00 e4 	stw     r0,228(r1)
			if (amt < 0)
    32f8:	80 01 00 e4 	lwz     r0,228(r1)
    32fc:	2f 80 00 00 	cmpwi   cr7,r0,0
    3300:	40 9c 00 30 	bge-    cr7,3330 <sctp_sendmsg+0xc20>
				amt = 0;
    3304:	38 00 00 00 	li      r0,0
    3308:	90 01 00 e4 	stw     r0,228(r1)
    330c:	48 00 00 24 	b       3330 <sctp_sendmsg+0xc20>
		}
	} else {
		amt = asoc->base.sk->sk_sndbuf - amt;
    3310:	80 01 00 e0 	lwz     r0,224(r1)
    3314:	7c 0b 03 78 	mr      r11,r0
    3318:	80 0b 00 18 	lwz     r0,24(r11)
    331c:	7c 0a 03 78 	mr      r10,r0
    3320:	81 2a 00 84 	lwz     r9,132(r10)
    3324:	80 01 00 e4 	lwz     r0,228(r1)
    3328:	7c 00 48 50 	subf    r0,r0,r9
    332c:	90 01 00 e4 	stw     r0,228(r1)
	}
	return amt;
    3330:	80 01 00 e4 	lwz     r0,228(r1)
			goto out_free;
		}
	}

	timeo = sock_sndtimeo(sk, msg->msg_flags & MSG_DONTWAIT);
	if (!sctp_wspace(asoc)) {
    3334:	2f 80 00 00 	cmpwi   cr7,r0,0
    3338:	40 9e 00 28 	bne-    cr7,3360 <sctp_sendmsg+0xc50>
		err = sctp_wait_for_sndbuf(asoc, &timeo, msg_len);
    333c:	38 01 01 94 	addi    r0,r1,404
    3340:	80 61 00 0c 	lwz     r3,12(r1)
    3344:	7c 04 03 78 	mr      r4,r0
    3348:	80 a1 01 a4 	lwz     r5,420(r1)
    334c:	48 00 e4 55 	bl      117a0 <sctp_wait_for_sndbuf>
    3350:	90 61 00 24 	stw     r3,36(r1)
		if (err)
    3354:	80 01 00 24 	lwz     r0,36(r1)
    3358:	2f 80 00 00 	cmpwi   cr7,r0,0
    335c:	40 9e 04 60 	bne-    cr7,37bc <sctp_sendmsg+0x10ac>
			goto out_free;
    3360:	80 01 01 9c 	lwz     r0,412(r1)
    3364:	90 01 00 f8 	stw     r0,248(r1)
    3368:	38 00 00 02 	li      r0,2
    336c:	90 01 00 fc 	stw     r0,252(r1)
    3370:	80 01 00 f8 	lwz     r0,248(r1)
    3374:	90 01 01 00 	stw     r0,256(r1)
    3378:	80 01 01 00 	lwz     r0,256(r1)

/* Is a socket of this style? */
#define sctp_style(sk, style) __sctp_style((sk), (SCTP_SOCKET_##style))
static inline int __sctp_style(const struct sock *sk, sctp_socket_type_t style)
{
	return sctp_sk(sk)->type == style;
    337c:	7c 0b 03 78 	mr      r11,r0
    3380:	80 0b 01 c8 	lwz     r0,456(r11)
    3384:	81 21 00 fc 	lwz     r9,252(r1)
    3388:	7f 89 00 00 	cmpw    cr7,r9,r0
    338c:	7c 00 00 26 	mfcr    r0
    3390:	54 00 ff fe 	rlwinm  r0,r0,31,31,31

	/* If an address is passed with the sendto/sendmsg call, it is used
	 * to override the primary destination address in the TCP model, or
	 * when SCTP_ADDR_OVER flag is set in the UDP model.
	 */
	if ((sctp_style(sk, TCP) && msg_name) ||
    3394:	2f 80 00 00 	cmpwi   cr7,r0,0
    3398:	41 9e 00 10 	beq-    cr7,33a8 <sctp_sendmsg+0xc98>
    339c:	80 01 00 18 	lwz     r0,24(r1)
    33a0:	2f 80 00 00 	cmpwi   cr7,r0,0
    33a4:	40 9e 00 18 	bne-    cr7,33bc <sctp_sendmsg+0xcac>
	    (sinfo_flags & SCTP_ADDR_OVER)) {
    33a8:	a0 01 00 28 	lhz     r0,40(r1)
    33ac:	54 00 04 3e 	clrlwi  r0,r0,16
    33b0:	54 00 07 bc 	rlwinm  r0,r0,0,30,30

	/* If an address is passed with the sendto/sendmsg call, it is used
	 * to override the primary destination address in the TCP model, or
	 * when SCTP_ADDR_OVER flag is set in the UDP model.
	 */
	if ((sctp_style(sk, TCP) && msg_name) ||
    33b4:	2f 80 00 00 	cmpwi   cr7,r0,0
    33b8:	41 9e 00 30 	beq-    cr7,33e8 <sctp_sendmsg+0xcd8>
	    (sinfo_flags & SCTP_ADDR_OVER)) {
		chunk_tp = sctp_assoc_lookup_paddr(asoc, &to);
    33bc:	38 01 01 50 	addi    r0,r1,336
    33c0:	80 61 00 0c 	lwz     r3,12(r1)
    33c4:	7c 04 03 78 	mr      r4,r0
    33c8:	48 00 00 01 	bl      33c8 <sctp_sendmsg+0xcb8>
    33cc:	90 61 00 10 	stw     r3,16(r1)
		if (!chunk_tp) {
    33d0:	80 01 00 10 	lwz     r0,16(r1)
    33d4:	2f 80 00 00 	cmpwi   cr7,r0,0
    33d8:	40 9e 00 18 	bne-    cr7,33f0 <sctp_sendmsg+0xce0>
			err = -EINVAL;
    33dc:	38 00 ff ea 	li      r0,-22
    33e0:	90 01 00 24 	stw     r0,36(r1)
			goto out_free;
    33e4:	48 00 03 ec 	b       37d0 <sctp_sendmsg+0x10c0>
		}
	} else
		chunk_tp = NULL;
    33e8:	38 00 00 00 	li      r0,0
    33ec:	90 01 00 10 	stw     r0,16(r1)
    33f0:	80 01 00 0c 	lwz     r0,12(r1)
    33f4:	90 01 01 04 	stw     r0,260(r1)
    33f8:	38 00 00 01 	li      r0,1
    33fc:	90 01 01 08 	stw     r0,264(r1)
/* Is the association in this state? */
#define sctp_state(asoc, state) __sctp_state((asoc), (SCTP_STATE_##state))
static inline int __sctp_state(const struct sctp_association *asoc,
			       sctp_state_t state)
{
	return asoc->state == state;
    3400:	80 01 01 04 	lwz     r0,260(r1)
    3404:	7c 09 03 78 	mr      r9,r0
    3408:	80 09 01 b8 	lwz     r0,440(r9)
    340c:	81 21 01 08 	lwz     r9,264(r1)
    3410:	7f 89 00 00 	cmpw    cr7,r9,r0
    3414:	7c 00 00 26 	mfcr    r0
    3418:	54 00 ff fe 	rlwinm  r0,r0,31,31,31

	/* Auto-connect, if we aren't connected already. */
	if (sctp_state(asoc, CLOSED)) {
    341c:	2f 80 00 00 	cmpwi   cr7,r0,0
    3420:	41 9e 00 20 	beq-    cr7,3440 <sctp_sendmsg+0xd30>
		err = sctp_primitive_ASSOCIATE(asoc, NULL);
    3424:	80 61 00 0c 	lwz     r3,12(r1)
    3428:	38 80 00 00 	li      r4,0
    342c:	48 00 00 01 	bl      342c <sctp_sendmsg+0xd1c>
    3430:	90 61 00 24 	stw     r3,36(r1)
		if (err < 0)
    3434:	80 01 00 24 	lwz     r0,36(r1)
    3438:	2f 80 00 00 	cmpwi   cr7,r0,0
    343c:	41 9c 03 88 	blt-    cr7,37c4 <sctp_sendmsg+0x10b4>
			goto out_free;
		SCTP_DEBUG_PRINTK("We associated primitively.\n");
	}

	/* Break the message into multiple chunks of maximum size. */
	datamsg = sctp_datamsg_from_user(asoc, sinfo, msg, msg_len);
    3440:	80 01 01 a4 	lwz     r0,420(r1)
    3444:	80 61 00 0c 	lwz     r3,12(r1)
    3448:	80 81 00 1c 	lwz     r4,28(r1)
    344c:	80 a1 01 a0 	lwz     r5,416(r1)
    3450:	7c 06 03 78 	mr      r6,r0
    3454:	48 00 00 01 	bl      3454 <sctp_sendmsg+0xd44>
    3458:	90 61 00 44 	stw     r3,68(r1)
	if (!datamsg) {
    345c:	80 01 00 44 	lwz     r0,68(r1)
    3460:	2f 80 00 00 	cmpwi   cr7,r0,0
    3464:	40 9e 00 10 	bne-    cr7,3474 <sctp_sendmsg+0xd64>
		err = -ENOMEM;
    3468:	38 00 ff f4 	li      r0,-12
    346c:	90 01 00 24 	stw     r0,36(r1)
		goto out_free;
    3470:	48 00 03 60 	b       37d0 <sctp_sendmsg+0x10c0>
	}

	/* Now send the (possibly) fragmented message. */
	list_for_each_entry(chunk, &datamsg->chunks, frag_list) {
    3474:	80 01 00 44 	lwz     r0,68(r1)
    3478:	7c 0a 03 78 	mr      r10,r0
    347c:	80 0a 00 00 	lwz     r0,0(r10)
    3480:	90 01 00 48 	stw     r0,72(r1)
    3484:	80 01 00 48 	lwz     r0,72(r1)
    3488:	30 00 ff ec 	addic   r0,r0,-20
    348c:	90 01 00 14 	stw     r0,20(r1)
    3490:	48 00 02 a0 	b       3730 <sctp_sendmsg+0x1020>
		sctp_chunk_hold(chunk);
    3494:	80 61 00 14 	lwz     r3,20(r1)
    3498:	48 00 00 01 	bl      3498 <sctp_sendmsg+0xd88>
    349c:	80 01 00 14 	lwz     r0,20(r1)
    34a0:	90 01 01 0c 	stw     r0,268(r1)
 * destructor in the data chunk skb for the purpose of the sndbuf space
 * tracking.
 */
static inline void sctp_set_owner_w(struct sctp_chunk *chunk)
{
	struct sctp_association *asoc = chunk->asoc;
    34a4:	80 01 01 0c 	lwz     r0,268(r1)
    34a8:	7c 0b 03 78 	mr      r11,r0
    34ac:	80 0b 00 54 	lwz     r0,84(r11)
    34b0:	90 01 01 10 	stw     r0,272(r1)
	struct sock *sk = asoc->base.sk;
    34b4:	80 01 01 10 	lwz     r0,272(r1)
    34b8:	7c 09 03 78 	mr      r9,r0
    34bc:	80 09 00 18 	lwz     r0,24(r9)
    34c0:	90 01 01 14 	stw     r0,276(r1)

	/* The sndbuf space is tracked per association.  */
	sctp_association_hold(asoc);
    34c4:	80 61 01 10 	lwz     r3,272(r1)
    34c8:	48 00 00 01 	bl      34c8 <sctp_sendmsg+0xdb8>

	skb_set_owner_w(chunk->skb, sk);
    34cc:	80 01 01 0c 	lwz     r0,268(r1)
    34d0:	7c 0a 03 78 	mr      r10,r0
    34d4:	80 0a 00 1c 	lwz     r0,28(r10)
    34d8:	90 01 01 18 	stw     r0,280(r1)
    34dc:	80 01 01 14 	lwz     r0,276(r1)
    34e0:	90 01 01 1c 	stw     r0,284(r1)
    34e4:	80 01 01 18 	lwz     r0,280(r1)
    34e8:	90 01 01 20 	stw     r0,288(r1)
 *	destructor function and make the @skb unowned. The buffer continues
 *	to exist but is no longer charged to its former owner.
 */
static inline void skb_orphan(struct sk_buff *skb)
{
	if (skb->destructor)
    34ec:	80 01 01 20 	lwz     r0,288(r1)
    34f0:	7c 0b 03 78 	mr      r11,r0
    34f4:	80 0b 00 68 	lwz     r0,104(r11)
    34f8:	2f 80 00 00 	cmpwi   cr7,r0,0
    34fc:	41 9e 00 1c 	beq-    cr7,3518 <sctp_sendmsg+0xe08>
		skb->destructor(skb);
    3500:	80 01 01 20 	lwz     r0,288(r1)
    3504:	7c 09 03 78 	mr      r9,r0
    3508:	80 09 00 68 	lwz     r0,104(r9)
    350c:	80 61 01 20 	lwz     r3,288(r1)
    3510:	7c 09 03 a6 	mtctr   r0
    3514:	4e 80 04 21 	bctrl
	skb->destructor = NULL;
    3518:	80 01 01 20 	lwz     r0,288(r1)
    351c:	39 20 00 00 	li      r9,0
    3520:	7c 0a 03 78 	mr      r10,r0
    3524:	91 2a 00 68 	stw     r9,104(r10)
	skb->sk		= NULL;
    3528:	80 01 01 20 	lwz     r0,288(r1)
    352c:	39 20 00 00 	li      r9,0
    3530:	7c 0b 03 78 	mr      r11,r0
    3534:	91 2b 00 10 	stw     r9,16(r11)
 */

static inline void skb_set_owner_w(struct sk_buff *skb, struct sock *sk)
{
	skb_orphan(skb);
	skb->sk = sk;
    3538:	80 01 01 18 	lwz     r0,280(r1)
    353c:	81 21 01 1c 	lwz     r9,284(r1)
    3540:	7c 0a 03 78 	mr      r10,r0
    3544:	91 2a 00 10 	stw     r9,16(r10)
	skb->destructor = sock_wfree;
    3548:	80 01 01 18 	lwz     r0,280(r1)
    354c:	3d 20 00 00 	lis     r9,0
    3550:	39 29 00 00 	addi    r9,r9,0
    3554:	7c 0b 03 78 	mr      r11,r0
    3558:	91 2b 00 68 	stw     r9,104(r11)
	/*
	 * We used to take a refcount on sk, but following operation
	 * is enough to guarantee sk_free() wont free this sock until
	 * all in-flight packets are completed
	 */
	atomic_add(skb->truesize, &sk->sk_wmem_alloc);
    355c:	80 01 01 18 	lwz     r0,280(r1)
    3560:	7c 09 03 78 	mr      r9,r0
    3564:	80 09 00 9c 	lwz     r0,156(r9)
    3568:	7c 09 03 78 	mr      r9,r0
    356c:	80 01 01 1c 	lwz     r0,284(r1)
    3570:	30 00 00 7c 	addic   r0,r0,124
    3574:	91 21 01 24 	stw     r9,292(r1)
    3578:	90 01 01 28 	stw     r0,296(r1)
	add	%0,%2,%0\n"
	PPC405_ERR77(0,%3)
"	stwcx.	%0,0,%3 \n\
	bne-	1b"
	: "=&r" (t), "+m" (v->counter)
	: "r" (a), "r" (&v->counter)
    357c:	81 21 01 28 	lwz     r9,296(r1)
"1:	lwarx	%0,0,%3		# atomic_add\n\
	add	%0,%2,%0\n"
	PPC405_ERR77(0,%3)
"	stwcx.	%0,0,%3 \n\
	bne-	1b"
	: "=&r" (t), "+m" (v->counter)
    3580:	81 41 01 28 	lwz     r10,296(r1)

static __inline__ void atomic_add(int a, atomic_t *v)
{
	int t;

	__asm__ __volatile__(
    3584:	80 01 01 24 	lwz     r0,292(r1)
"1:	lwarx	%0,0,%3		# atomic_add\n\
	add	%0,%2,%0\n"
	PPC405_ERR77(0,%3)
"	stwcx.	%0,0,%3 \n\
	bne-	1b"
	: "=&r" (t), "+m" (v->counter)
    3588:	81 61 01 28 	lwz     r11,296(r1)

static __inline__ void atomic_add(int a, atomic_t *v)
{
	int t;

	__asm__ __volatile__(
    358c:	7f e0 48 28 	lwarx   r31,0,r9
    3590:	7f e0 fa 14 	add     r31,r0,r31
    3594:	7f e0 49 2d 	stwcx.  r31,0,r9
    3598:	40 a2 ff f4 	bne-    358c <sctp_sendmsg+0xe7c>
    359c:	93 e1 01 2c 	stw     r31,300(r1)

	chunk->skb->destructor = sctp_wfree;
    35a0:	80 01 01 0c 	lwz     r0,268(r1)
    35a4:	7c 0a 03 78 	mr      r10,r0
    35a8:	80 0a 00 1c 	lwz     r0,28(r10)
    35ac:	3d 20 00 01 	lis     r9,1
    35b0:	39 29 15 24 	addi    r9,r9,5412
    35b4:	7c 0b 03 78 	mr      r11,r0
    35b8:	91 2b 00 68 	stw     r9,104(r11)
	/* Save the chunk pointer in skb for sctp_wfree to use later.  */
	*((struct sctp_chunk **)(chunk->skb->cb)) = chunk;
    35bc:	80 01 01 0c 	lwz     r0,268(r1)
    35c0:	7c 09 03 78 	mr      r9,r0
    35c4:	80 09 00 1c 	lwz     r0,28(r9)
    35c8:	30 00 00 18 	addic   r0,r0,24
    35cc:	81 21 01 0c 	lwz     r9,268(r1)
    35d0:	7c 0a 03 78 	mr      r10,r0
    35d4:	91 2a 00 00 	stw     r9,0(r10)

	asoc->sndbuf_used += SCTP_DATA_SNDSIZE(chunk) +
    35d8:	80 01 01 10 	lwz     r0,272(r1)
    35dc:	7c 0b 03 78 	mr      r11,r0
    35e0:	80 0b 03 74 	lwz     r0,884(r11)
    35e4:	7c 09 03 78 	mr      r9,r0
    35e8:	80 01 01 0c 	lwz     r0,268(r1)
    35ec:	7c 0a 03 78 	mr      r10,r0
    35f0:	80 0a 00 28 	lwz     r0,40(r10)
    35f4:	7c 0b 03 78 	mr      r11,r0
    35f8:	80 01 01 0c 	lwz     r0,268(r1)
    35fc:	7c 0a 03 78 	mr      r10,r0
    3600:	80 0a 00 2c 	lwz     r0,44(r10)
    3604:	7c 00 58 50 	subf    r0,r0,r11
    3608:	7c 09 02 14 	add     r0,r9,r0
    360c:	30 00 01 40 	addic   r0,r0,320
    3610:	7c 09 03 78 	mr      r9,r0
    3614:	80 01 01 10 	lwz     r0,272(r1)
    3618:	7c 0b 03 78 	mr      r11,r0
    361c:	91 2b 03 74 	stw     r9,884(r11)
				sizeof(struct sk_buff) +
				sizeof(struct sctp_chunk);

	atomic_add(sizeof(struct sctp_chunk), &sk->sk_wmem_alloc);
    3620:	80 01 01 14 	lwz     r0,276(r1)
    3624:	30 00 00 7c 	addic   r0,r0,124
    3628:	39 20 00 a8 	li      r9,168
    362c:	91 21 01 30 	stw     r9,304(r1)
    3630:	90 01 01 34 	stw     r0,308(r1)
	add	%0,%2,%0\n"
	PPC405_ERR77(0,%3)
"	stwcx.	%0,0,%3 \n\
	bne-	1b"
	: "=&r" (t), "+m" (v->counter)
	: "r" (a), "r" (&v->counter)
    3634:	81 21 01 34 	lwz     r9,308(r1)
"1:	lwarx	%0,0,%3		# atomic_add\n\
	add	%0,%2,%0\n"
	PPC405_ERR77(0,%3)
"	stwcx.	%0,0,%3 \n\
	bne-	1b"
	: "=&r" (t), "+m" (v->counter)
    3638:	81 41 01 34 	lwz     r10,308(r1)

static __inline__ void atomic_add(int a, atomic_t *v)
{
	int t;

	__asm__ __volatile__(
    363c:	80 01 01 30 	lwz     r0,304(r1)
"1:	lwarx	%0,0,%3		# atomic_add\n\
	add	%0,%2,%0\n"
	PPC405_ERR77(0,%3)
"	stwcx.	%0,0,%3 \n\
	bne-	1b"
	: "=&r" (t), "+m" (v->counter)
    3640:	81 61 01 34 	lwz     r11,308(r1)

static __inline__ void atomic_add(int a, atomic_t *v)
{
	int t;

	__asm__ __volatile__(
    3644:	7f e0 48 28 	lwarx   r31,0,r9
    3648:	7f e0 fa 14 	add     r31,r0,r31
    364c:	7f e0 49 2d 	stwcx.  r31,0,r9
    3650:	40 a2 ff f4 	bne-    3644 <sctp_sendmsg+0xf34>
    3654:	93 e1 01 38 	stw     r31,312(r1)
	sk->sk_wmem_queued += chunk->skb->truesize;
    3658:	80 01 01 14 	lwz     r0,276(r1)
    365c:	7c 09 03 78 	mr      r9,r0
    3660:	80 09 00 98 	lwz     r0,152(r9)
    3664:	7c 09 03 78 	mr      r9,r0
    3668:	80 01 01 0c 	lwz     r0,268(r1)
    366c:	7c 0a 03 78 	mr      r10,r0
    3670:	80 0a 00 1c 	lwz     r0,28(r10)
    3674:	7c 0b 03 78 	mr      r11,r0
    3678:	80 0b 00 9c 	lwz     r0,156(r11)
    367c:	7c 09 02 14 	add     r0,r9,r0
    3680:	7c 09 03 78 	mr      r9,r0
    3684:	80 01 01 14 	lwz     r0,276(r1)
    3688:	7c 0a 03 78 	mr      r10,r0
    368c:	91 2a 00 98 	stw     r9,152(r10)
	sk_mem_charge(sk, chunk->skb->truesize);
    3690:	80 01 01 0c 	lwz     r0,268(r1)
    3694:	7c 0b 03 78 	mr      r11,r0
    3698:	80 0b 00 1c 	lwz     r0,28(r11)
    369c:	7c 09 03 78 	mr      r9,r0
    36a0:	80 09 00 9c 	lwz     r0,156(r9)
    36a4:	81 21 01 14 	lwz     r9,276(r1)
    36a8:	91 21 01 3c 	stw     r9,316(r1)
    36ac:	90 01 01 40 	stw     r0,320(r1)
    36b0:	80 01 01 3c 	lwz     r0,316(r1)
    36b4:	90 01 01 44 	stw     r0,324(r1)
}

static inline int sk_has_account(struct sock *sk)
{
	/* return true if protocol supports memory accounting */
	return !!sk->sk_prot->memory_allocated;
    36b8:	80 01 01 44 	lwz     r0,324(r1)
    36bc:	7c 0a 03 78 	mr      r10,r0
    36c0:	80 0a 00 1c 	lwz     r0,28(r10)
    36c4:	7c 0b 03 78 	mr      r11,r0
    36c8:	80 0b 00 58 	lwz     r0,88(r11)
    36cc:	2f 80 00 00 	cmpwi   cr7,r0,0
    36d0:	7c 00 00 26 	mfcr    r0
    36d4:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
    36d8:	68 00 00 01 	xori    r0,r0,1
		__sk_mem_reclaim(sk);
}

static inline void sk_mem_charge(struct sock *sk, int size)
{
	if (!sk_has_account(sk))
    36dc:	2f 80 00 00 	cmpwi   cr7,r0,0
    36e0:	41 9e 00 24 	beq-    cr7,3704 <sctp_sendmsg+0xff4>
		return;
	sk->sk_forward_alloc -= size;
    36e4:	80 01 01 3c 	lwz     r0,316(r1)
    36e8:	7c 0a 03 78 	mr      r10,r0
    36ec:	81 2a 00 58 	lwz     r9,88(r10)
    36f0:	80 01 01 40 	lwz     r0,320(r1)
    36f4:	7d 20 48 50 	subf    r9,r0,r9
    36f8:	80 01 01 3c 	lwz     r0,316(r1)
    36fc:	7c 0b 03 78 	mr      r11,r0
    3700:	91 2b 00 58 	stw     r9,88(r11)
		sctp_chunk_hold(chunk);

		/* Do accounting for the write space.  */
		sctp_set_owner_w(chunk);

		chunk->transport = chunk_tp;
    3704:	80 01 00 14 	lwz     r0,20(r1)
    3708:	81 21 00 10 	lwz     r9,16(r1)
    370c:	7c 0a 03 78 	mr      r10,r0
    3710:	91 2a 00 9c 	stw     r9,156(r10)
		err = -ENOMEM;
		goto out_free;
	}

	/* Now send the (possibly) fragmented message. */
	list_for_each_entry(chunk, &datamsg->chunks, frag_list) {
    3714:	80 01 00 14 	lwz     r0,20(r1)
    3718:	7c 0b 03 78 	mr      r11,r0
    371c:	80 0b 00 14 	lwz     r0,20(r11)
    3720:	90 01 00 4c 	stw     r0,76(r1)
    3724:	80 01 00 4c 	lwz     r0,76(r1)
    3728:	30 00 ff ec 	addic   r0,r0,-20
    372c:	90 01 00 14 	stw     r0,20(r1)
    3730:	80 01 00 14 	lwz     r0,20(r1)
    3734:	7c 09 03 78 	mr      r9,r0
    3738:	80 09 00 14 	lwz     r0,20(r9)
    373c:	90 01 01 48 	stw     r0,328(r1)
#define ARCH_HAS_PREFETCHW
#define ARCH_HAS_SPINLOCK_PREFETCH

static inline void prefetch(const void *x)
{
	if (unlikely(!x))
    3740:	80 01 01 48 	lwz     r0,328(r1)
    3744:	2f 80 00 00 	cmpwi   cr7,r0,0
    3748:	7c 00 00 26 	mfcr    r0
    374c:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
    3750:	2f 80 00 00 	cmpwi   cr7,r0,0
    3754:	40 9e 00 0c 	bne-    cr7,3760 <sctp_sendmsg+0x1050>
		return;

	__asm__ __volatile__ ("dcbt 0,%0" : : "r" (x));
    3758:	80 01 01 48 	lwz     r0,328(r1)
    375c:	7c 00 02 2c 	dcbt    r0,r0
    3760:	80 01 00 14 	lwz     r0,20(r1)
    3764:	31 20 00 14 	addic   r9,r0,20
    3768:	80 01 00 44 	lwz     r0,68(r1)
    376c:	7f 89 00 00 	cmpw    cr7,r9,r0
    3770:	40 9e fd 24 	bne+    cr7,3494 <sctp_sendmsg+0xd84>
	/* Send it to the lower layers.  Note:  all chunks
	 * must either fail or succeed.   The lower layer
	 * works that way today.  Keep it that way or this
	 * breaks.
	 */
	err = sctp_primitive_SEND(asoc, datamsg);
    3774:	80 61 00 0c 	lwz     r3,12(r1)
    3778:	80 81 00 44 	lwz     r4,68(r1)
    377c:	48 00 00 01 	bl      377c <sctp_sendmsg+0x106c>
    3780:	90 61 00 24 	stw     r3,36(r1)
	/* Did the lower layer accept the chunk? */
	if (err)
    3784:	80 01 00 24 	lwz     r0,36(r1)
    3788:	2f 80 00 00 	cmpwi   cr7,r0,0
    378c:	41 9e 00 10 	beq-    cr7,379c <sctp_sendmsg+0x108c>
		sctp_datamsg_free(datamsg);
    3790:	80 61 00 44 	lwz     r3,68(r1)
    3794:	48 00 00 01 	bl      3794 <sctp_sendmsg+0x1084>
    3798:	48 00 00 0c 	b       37a4 <sctp_sendmsg+0x1094>
	else
		sctp_datamsg_put(datamsg);
    379c:	80 61 00 44 	lwz     r3,68(r1)
    37a0:	48 00 00 01 	bl      37a0 <sctp_sendmsg+0x1090>

	SCTP_DEBUG_PRINTK("We sent primitively.\n");

	if (err)
    37a4:	80 01 00 24 	lwz     r0,36(r1)
    37a8:	2f 80 00 00 	cmpwi   cr7,r0,0
    37ac:	40 9e 00 20 	bne-    cr7,37cc <sctp_sendmsg+0x10bc>
		goto out_free;
	else
		err = msg_len;
    37b0:	80 01 01 a4 	lwz     r0,420(r1)
    37b4:	90 01 00 24 	stw     r0,36(r1)

	/* If we are already past ASSOCIATE, the lower
	 * layers are responsible for association cleanup.
	 */
	goto out_unlock;
    37b8:	48 00 00 2c 	b       37e4 <sctp_sendmsg+0x10d4>

	timeo = sock_sndtimeo(sk, msg->msg_flags & MSG_DONTWAIT);
	if (!sctp_wspace(asoc)) {
		err = sctp_wait_for_sndbuf(asoc, &timeo, msg_len);
		if (err)
			goto out_free;
    37bc:	60 00 00 00 	nop
    37c0:	48 00 00 10 	b       37d0 <sctp_sendmsg+0x10c0>

	/* Auto-connect, if we aren't connected already. */
	if (sctp_state(asoc, CLOSED)) {
		err = sctp_primitive_ASSOCIATE(asoc, NULL);
		if (err < 0)
			goto out_free;
    37c4:	60 00 00 00 	nop
    37c8:	48 00 00 08 	b       37d0 <sctp_sendmsg+0x10c0>
		sctp_datamsg_put(datamsg);

	SCTP_DEBUG_PRINTK("We sent primitively.\n");

	if (err)
		goto out_free;
    37cc:	60 00 00 00 	nop
	 * layers are responsible for association cleanup.
	 */
	goto out_unlock;

out_free:
	if (new_asoc)
    37d0:	80 01 00 08 	lwz     r0,8(r1)
    37d4:	2f 80 00 00 	cmpwi   cr7,r0,0
    37d8:	41 9e 00 0c 	beq-    cr7,37e4 <sctp_sendmsg+0x10d4>
		sctp_association_free(asoc);
    37dc:	80 61 00 0c 	lwz     r3,12(r1)
    37e0:	48 00 00 01 	bl      37e0 <sctp_sendmsg+0x10d0>
out_unlock:
	sctp_release_sock(sk);
    37e4:	80 61 01 9c 	lwz     r3,412(r1)
    37e8:	48 00 00 01 	bl      37e8 <sctp_sendmsg+0x10d8>
    37ec:	48 00 00 08 	b       37f4 <sctp_sendmsg+0x10e4>
	/* Parse out the SCTP CMSGs.  */
	err = sctp_msghdr_parse(msg, &cmsgs);

	if (err) {
		SCTP_DEBUG_PRINTK("msghdr parse err = %x\n", err);
		goto out_nounlock;
    37f0:	60 00 00 00 	nop
		sctp_association_free(asoc);
out_unlock:
	sctp_release_sock(sk);

out_nounlock:
	return sctp_error(sk, msg_flags, err);
    37f4:	80 61 01 9c 	lwz     r3,412(r1)
    37f8:	80 81 00 30 	lwz     r4,48(r1)
    37fc:	80 a1 00 24 	lwz     r5,36(r1)
    3800:	4b ff ed d5 	bl      25d4 <sctp_error>
    3804:	7c 60 1b 78 	mr      r0,r3
do_interrupted:
	if (msg_len)
		err = msg_len;
	goto out;
#endif /* 0 */
}
    3808:	7c 03 03 78 	mr      r3,r0
    380c:	80 01 01 b4 	lwz     r0,436(r1)
    3810:	7c 08 03 a6 	mtlr    r0
    3814:	83 e1 01 ac 	lwz     r31,428(r1)
    3818:	38 21 01 b0 	addi    r1,r1,432
    381c:	4e 80 00 20 	blr

00003820 <sctp_skb_pull>:
 * when 'len' bytes could be removed from the skb, it returns 0.
 * If 'len' exceeds the total skb length,  it returns the no. of bytes that
 * could not be removed.
 */
static int sctp_skb_pull(struct sk_buff *skb, int len)
{
    3820:	94 21 ff c0 	stwu    r1,-64(r1)
    3824:	7c 08 02 a6 	mflr    r0
    3828:	90 01 00 44 	stw     r0,68(r1)
    382c:	90 61 00 38 	stw     r3,56(r1)
    3830:	90 81 00 3c 	stw     r4,60(r1)
    3834:	80 01 00 38 	lwz     r0,56(r1)
    3838:	90 01 00 14 	stw     r0,20(r1)
	return skb->data_len;
}

static inline unsigned int skb_headlen(const struct sk_buff *skb)
{
	return skb->len - skb->data_len;
    383c:	80 01 00 14 	lwz     r0,20(r1)
    3840:	7c 0b 03 78 	mr      r11,r0
    3844:	81 2b 00 50 	lwz     r9,80(r11)
    3848:	80 01 00 14 	lwz     r0,20(r1)
    384c:	7c 0b 03 78 	mr      r11,r0
    3850:	80 0b 00 54 	lwz     r0,84(r11)
    3854:	7c 00 48 50 	subf    r0,r0,r9
	struct sk_buff *list;
	int skb_len = skb_headlen(skb);
    3858:	90 01 00 0c 	stw     r0,12(r1)
	int rlen;

	if (len <= skb_len) {
    385c:	81 21 00 3c 	lwz     r9,60(r1)
    3860:	80 01 00 0c 	lwz     r0,12(r1)
    3864:	7f 89 00 00 	cmpw    cr7,r9,r0
    3868:	41 9d 00 84 	bgt-    cr7,38ec <sctp_skb_pull+0xcc>
		__skb_pull(skb, len);
    386c:	80 01 00 3c 	lwz     r0,60(r1)
    3870:	81 21 00 38 	lwz     r9,56(r1)
    3874:	91 21 00 18 	stw     r9,24(r1)
    3878:	90 01 00 1c 	stw     r0,28(r1)
}

extern unsigned char *skb_pull(struct sk_buff *skb, unsigned int len);
static inline unsigned char *__skb_pull(struct sk_buff *skb, unsigned int len)
{
	skb->len -= len;
    387c:	80 01 00 18 	lwz     r0,24(r1)
    3880:	7c 0b 03 78 	mr      r11,r0
    3884:	81 2b 00 50 	lwz     r9,80(r11)
    3888:	80 01 00 1c 	lwz     r0,28(r1)
    388c:	7d 20 48 50 	subf    r9,r0,r9
    3890:	80 01 00 18 	lwz     r0,24(r1)
    3894:	7c 0b 03 78 	mr      r11,r0
    3898:	91 2b 00 50 	stw     r9,80(r11)
	BUG_ON(skb->len < skb->data_len);
    389c:	80 01 00 18 	lwz     r0,24(r1)
    38a0:	7c 0b 03 78 	mr      r11,r0
    38a4:	81 2b 00 50 	lwz     r9,80(r11)
    38a8:	80 01 00 18 	lwz     r0,24(r1)
    38ac:	7c 0b 03 78 	mr      r11,r0
    38b0:	80 0b 00 54 	lwz     r0,84(r11)
    38b4:	7f 89 00 40 	cmplw   cr7,r9,r0
    38b8:	7c 00 00 26 	mfcr    r0
    38bc:	54 00 ef fe 	rlwinm  r0,r0,29,31,31
    38c0:	0f 00 00 00 	twnei   r0,0
	return skb->data += len;
    38c4:	80 01 00 18 	lwz     r0,24(r1)
    38c8:	7c 0b 03 78 	mr      r11,r0
    38cc:	81 2b 00 98 	lwz     r9,152(r11)
    38d0:	80 01 00 1c 	lwz     r0,28(r1)
    38d4:	7d 29 02 14 	add     r9,r9,r0
    38d8:	80 01 00 18 	lwz     r0,24(r1)
    38dc:	7c 0b 03 78 	mr      r11,r0
    38e0:	91 2b 00 98 	stw     r9,152(r11)
		return 0;
    38e4:	38 00 00 00 	li      r0,0
    38e8:	48 00 01 4c 	b       3a34 <sctp_skb_pull+0x214>
	}
	len -= skb_len;
    38ec:	81 21 00 3c 	lwz     r9,60(r1)
    38f0:	80 01 00 0c 	lwz     r0,12(r1)
    38f4:	7c 00 48 50 	subf    r0,r0,r9
    38f8:	90 01 00 3c 	stw     r0,60(r1)
	__skb_pull(skb, skb_len);
    38fc:	80 01 00 0c 	lwz     r0,12(r1)
    3900:	81 21 00 38 	lwz     r9,56(r1)
    3904:	91 21 00 20 	stw     r9,32(r1)
    3908:	90 01 00 24 	stw     r0,36(r1)
}

extern unsigned char *skb_pull(struct sk_buff *skb, unsigned int len);
static inline unsigned char *__skb_pull(struct sk_buff *skb, unsigned int len)
{
	skb->len -= len;
    390c:	80 01 00 20 	lwz     r0,32(r1)
    3910:	7c 0b 03 78 	mr      r11,r0
    3914:	81 2b 00 50 	lwz     r9,80(r11)
    3918:	80 01 00 24 	lwz     r0,36(r1)
    391c:	7d 20 48 50 	subf    r9,r0,r9
    3920:	80 01 00 20 	lwz     r0,32(r1)
    3924:	7c 0b 03 78 	mr      r11,r0
    3928:	91 2b 00 50 	stw     r9,80(r11)
	BUG_ON(skb->len < skb->data_len);
    392c:	80 01 00 20 	lwz     r0,32(r1)
    3930:	7c 0b 03 78 	mr      r11,r0
    3934:	81 2b 00 50 	lwz     r9,80(r11)
    3938:	80 01 00 20 	lwz     r0,32(r1)
    393c:	7c 0b 03 78 	mr      r11,r0
    3940:	80 0b 00 54 	lwz     r0,84(r11)
    3944:	7f 89 00 40 	cmplw   cr7,r9,r0
    3948:	7c 00 00 26 	mfcr    r0
    394c:	54 00 ef fe 	rlwinm  r0,r0,29,31,31
    3950:	0f 00 00 00 	twnei   r0,0
	return skb->data += len;
    3954:	80 01 00 20 	lwz     r0,32(r1)
    3958:	7c 0b 03 78 	mr      r11,r0
    395c:	81 2b 00 98 	lwz     r9,152(r11)
    3960:	80 01 00 24 	lwz     r0,36(r1)
    3964:	7d 29 02 14 	add     r9,r9,r0
    3968:	80 01 00 20 	lwz     r0,32(r1)
    396c:	7c 0b 03 78 	mr      r11,r0
    3970:	91 2b 00 98 	stw     r9,152(r11)
    3974:	80 01 00 38 	lwz     r0,56(r1)
    3978:	90 01 00 28 	stw     r0,40(r1)
	return skb->head + skb->end;
}
#else
static inline unsigned char *skb_end_pointer(const struct sk_buff *skb)
{
	return skb->end;
    397c:	80 01 00 28 	lwz     r0,40(r1)
    3980:	7c 09 03 78 	mr      r9,r0
    3984:	80 09 00 90 	lwz     r0,144(r9)

	skb_walk_frags(skb, list) {
    3988:	7c 0b 03 78 	mr      r11,r0
    398c:	80 0b 00 10 	lwz     r0,16(r11)
    3990:	90 01 00 08 	stw     r0,8(r1)
    3994:	48 00 00 90 	b       3a24 <sctp_skb_pull+0x204>
		rlen = sctp_skb_pull(list, len);
    3998:	80 61 00 08 	lwz     r3,8(r1)
    399c:	80 81 00 3c 	lwz     r4,60(r1)
    39a0:	4b ff fe 81 	bl      3820 <sctp_skb_pull>
    39a4:	90 61 00 10 	stw     r3,16(r1)
		skb->len -= (len-rlen);
    39a8:	80 01 00 38 	lwz     r0,56(r1)
    39ac:	7c 0b 03 78 	mr      r11,r0
    39b0:	81 2b 00 50 	lwz     r9,80(r11)
    39b4:	81 61 00 10 	lwz     r11,16(r1)
    39b8:	80 01 00 3c 	lwz     r0,60(r1)
    39bc:	7c 00 58 50 	subf    r0,r0,r11
    39c0:	7d 29 02 14 	add     r9,r9,r0
    39c4:	80 01 00 38 	lwz     r0,56(r1)
    39c8:	7c 0b 03 78 	mr      r11,r0
    39cc:	91 2b 00 50 	stw     r9,80(r11)
		skb->data_len -= (len-rlen);
    39d0:	80 01 00 38 	lwz     r0,56(r1)
    39d4:	7c 0b 03 78 	mr      r11,r0
    39d8:	81 2b 00 54 	lwz     r9,84(r11)
    39dc:	81 61 00 10 	lwz     r11,16(r1)
    39e0:	80 01 00 3c 	lwz     r0,60(r1)
    39e4:	7c 00 58 50 	subf    r0,r0,r11
    39e8:	7d 29 02 14 	add     r9,r9,r0
    39ec:	80 01 00 38 	lwz     r0,56(r1)
    39f0:	7c 0b 03 78 	mr      r11,r0
    39f4:	91 2b 00 54 	stw     r9,84(r11)

		if (!rlen)
    39f8:	80 01 00 10 	lwz     r0,16(r1)
    39fc:	2f 80 00 00 	cmpwi   cr7,r0,0
    3a00:	40 9e 00 0c 	bne-    cr7,3a0c <sctp_skb_pull+0x1ec>
			return 0;
    3a04:	38 00 00 00 	li      r0,0
    3a08:	48 00 00 2c 	b       3a34 <sctp_skb_pull+0x214>

		len = rlen;
    3a0c:	80 01 00 10 	lwz     r0,16(r1)
    3a10:	90 01 00 3c 	stw     r0,60(r1)
		return 0;
	}
	len -= skb_len;
	__skb_pull(skb, skb_len);

	skb_walk_frags(skb, list) {
    3a14:	80 01 00 08 	lwz     r0,8(r1)
    3a18:	7c 09 03 78 	mr      r9,r0
    3a1c:	80 09 00 00 	lwz     r0,0(r9)
    3a20:	90 01 00 08 	stw     r0,8(r1)
    3a24:	80 01 00 08 	lwz     r0,8(r1)
    3a28:	2f 80 00 00 	cmpwi   cr7,r0,0
    3a2c:	40 9e ff 6c 	bne+    cr7,3998 <sctp_skb_pull+0x178>
			return 0;

		len = rlen;
	}

	return len;
    3a30:	80 01 00 3c 	lwz     r0,60(r1)
}
    3a34:	7c 03 03 78 	mr      r3,r0
    3a38:	80 01 00 44 	lwz     r0,68(r1)
    3a3c:	7c 08 03 a6 	mtlr    r0
    3a40:	38 21 00 40 	addi    r1,r1,64
    3a44:	4e 80 00 20 	blr

00003a48 <sctp_recvmsg>:
static struct sk_buff *sctp_skb_recv_datagram(struct sock *, int, int, int *);

SCTP_STATIC int sctp_recvmsg(struct kiocb *iocb, struct sock *sk,
			     struct msghdr *msg, size_t len, int noblock,
			     int flags, int *addr_len)
{
    3a48:	94 21 ff 80 	stwu    r1,-128(r1)
    3a4c:	7c 08 02 a6 	mflr    r0
    3a50:	90 01 00 84 	stw     r0,132(r1)
    3a54:	90 61 00 58 	stw     r3,88(r1)
    3a58:	90 81 00 5c 	stw     r4,92(r1)
    3a5c:	90 a1 00 60 	stw     r5,96(r1)
    3a60:	90 c1 00 64 	stw     r6,100(r1)
    3a64:	90 e1 00 68 	stw     r7,104(r1)
    3a68:	91 01 00 6c 	stw     r8,108(r1)
    3a6c:	91 21 00 70 	stw     r9,112(r1)
	struct sctp_ulpevent *event = NULL;
    3a70:	38 00 00 00 	li      r0,0
    3a74:	90 01 00 0c 	stw     r0,12(r1)
    3a78:	80 01 00 5c 	lwz     r0,92(r1)
    3a7c:	90 01 00 1c 	stw     r0,28(r1)
    3a80:	80 01 00 1c 	lwz     r0,28(r1)
	struct sctp_sock *sp = sctp_sk(sk);
    3a84:	90 01 00 10 	stw     r0,16(r1)
	struct sk_buff *skb;
	int copied;
	int err = 0;
    3a88:	38 00 00 00 	li      r0,0
    3a8c:	90 01 00 48 	stw     r0,72(r1)
    3a90:	80 01 00 5c 	lwz     r0,92(r1)
    3a94:	90 01 00 20 	stw     r0,32(r1)

extern void lock_sock_nested(struct sock *sk, int subclass);

static inline void lock_sock(struct sock *sk)
{
	lock_sock_nested(sk, 0);
    3a98:	80 61 00 20 	lwz     r3,32(r1)
    3a9c:	38 80 00 00 	li      r4,0
    3aa0:	48 00 00 01 	bl      3aa0 <sctp_recvmsg+0x58>
    3aa4:	80 01 00 5c 	lwz     r0,92(r1)
    3aa8:	90 01 00 24 	stw     r0,36(r1)
    3aac:	38 00 00 02 	li      r0,2
    3ab0:	90 01 00 28 	stw     r0,40(r1)
    3ab4:	80 01 00 24 	lwz     r0,36(r1)
    3ab8:	90 01 00 2c 	stw     r0,44(r1)
    3abc:	80 01 00 2c 	lwz     r0,44(r1)

/* Is a socket of this style? */
#define sctp_style(sk, style) __sctp_style((sk), (SCTP_SOCKET_##style))
static inline int __sctp_style(const struct sock *sk, sctp_socket_type_t style)
{
	return sctp_sk(sk)->type == style;
    3ac0:	7c 09 03 78 	mr      r9,r0
    3ac4:	80 09 01 c8 	lwz     r0,456(r9)
    3ac8:	81 21 00 28 	lwz     r9,40(r1)
    3acc:	7f 89 00 00 	cmpw    cr7,r9,r0
    3ad0:	7c 00 00 26 	mfcr    r0
    3ad4:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
			  "len", len, "knoblauch", noblock,
			  "flags", flags, "addr_len", addr_len);

	sctp_lock_sock(sk);

	if (sctp_style(sk, TCP) && !sctp_sstate(sk, ESTABLISHED)) {
    3ad8:	2f 80 00 00 	cmpwi   cr7,r0,0
    3adc:	41 9e 00 48 	beq-    cr7,3b24 <sctp_recvmsg+0xdc>
    3ae0:	80 01 00 5c 	lwz     r0,92(r1)
    3ae4:	90 01 00 30 	stw     r0,48(r1)
    3ae8:	38 00 00 01 	li      r0,1
    3aec:	90 01 00 34 	stw     r0,52(r1)

/* Is the socket in this state? */
#define sctp_sstate(sk, state) __sctp_sstate((sk), (SCTP_SS_##state))
static inline int __sctp_sstate(const struct sock *sk, sctp_sock_state_t state)
{
	return sk->sk_state == state;
    3af0:	80 01 00 30 	lwz     r0,48(r1)
    3af4:	7c 0b 03 78 	mr      r11,r0
    3af8:	88 0b 00 0e 	lbz     r0,14(r11)
    3afc:	54 00 06 3e 	clrlwi  r0,r0,24
    3b00:	81 21 00 34 	lwz     r9,52(r1)
    3b04:	7f 89 00 00 	cmpw    cr7,r9,r0
    3b08:	7c 00 00 26 	mfcr    r0
    3b0c:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
    3b10:	2f 80 00 00 	cmpwi   cr7,r0,0
    3b14:	40 9e 00 10 	bne-    cr7,3b24 <sctp_recvmsg+0xdc>
		err = -ENOTCONN;
    3b18:	38 00 ff 95 	li      r0,-107
    3b1c:	90 01 00 48 	stw     r0,72(r1)
		goto out;
    3b20:	48 00 03 10 	b       3e30 <sctp_recvmsg+0x3e8>
	}

	skb = sctp_skb_recv_datagram(sk, flags, noblock, &err);
    3b24:	38 01 00 48 	addi    r0,r1,72
    3b28:	80 61 00 5c 	lwz     r3,92(r1)
    3b2c:	80 81 00 6c 	lwz     r4,108(r1)
    3b30:	80 a1 00 68 	lwz     r5,104(r1)
    3b34:	7c 06 03 78 	mr      r6,r0
    3b38:	48 00 d4 81 	bl      10fb8 <sctp_skb_recv_datagram>
    3b3c:	90 61 00 14 	stw     r3,20(r1)
	if (!skb)
    3b40:	80 01 00 14 	lwz     r0,20(r1)
    3b44:	2f 80 00 00 	cmpwi   cr7,r0,0
    3b48:	41 9e 02 dc 	beq-    cr7,3e24 <sctp_recvmsg+0x3dc>
		goto out;

	/* Get the total length of the skb including any skb's in the
	 * frag_list.
	 */
	skb_len = skb->len;
    3b4c:	80 01 00 14 	lwz     r0,20(r1)
    3b50:	7c 09 03 78 	mr      r9,r0
    3b54:	80 09 00 50 	lwz     r0,80(r9)
    3b58:	90 01 00 18 	stw     r0,24(r1)

	copied = skb_len;
    3b5c:	80 01 00 18 	lwz     r0,24(r1)
    3b60:	90 01 00 08 	stw     r0,8(r1)
	if (copied > len)
    3b64:	81 21 00 08 	lwz     r9,8(r1)
    3b68:	80 01 00 64 	lwz     r0,100(r1)
    3b6c:	7f 89 00 40 	cmplw   cr7,r9,r0
    3b70:	40 9d 00 0c 	ble-    cr7,3b7c <sctp_recvmsg+0x134>
		copied = len;
    3b74:	80 01 00 64 	lwz     r0,100(r1)
    3b78:	90 01 00 08 	stw     r0,8(r1)

	err = skb_copy_datagram_iovec(skb, 0, msg->msg_iov, copied);
    3b7c:	80 01 00 60 	lwz     r0,96(r1)
    3b80:	7c 0b 03 78 	mr      r11,r0
    3b84:	80 0b 00 08 	lwz     r0,8(r11)
    3b88:	80 61 00 14 	lwz     r3,20(r1)
    3b8c:	38 80 00 00 	li      r4,0
    3b90:	7c 05 03 78 	mr      r5,r0
    3b94:	80 c1 00 08 	lwz     r6,8(r1)
    3b98:	48 00 00 01 	bl      3b98 <sctp_recvmsg+0x150>
    3b9c:	7c 60 1b 78 	mr      r0,r3
    3ba0:	90 01 00 48 	stw     r0,72(r1)
    3ba4:	80 01 00 14 	lwz     r0,20(r1)
    3ba8:	90 01 00 38 	stw     r0,56(r1)
}

/* Retrieve & cast the event sitting inside the skb. */
static inline struct sctp_ulpevent *sctp_skb2event(struct sk_buff *skb)
{
	return (struct sctp_ulpevent *)skb->cb;
    3bac:	80 01 00 38 	lwz     r0,56(r1)
    3bb0:	30 00 00 18 	addic   r0,r0,24

	event = sctp_skb2event(skb);
    3bb4:	90 01 00 0c 	stw     r0,12(r1)

	if (err)
    3bb8:	80 01 00 48 	lwz     r0,72(r1)
    3bbc:	2f 80 00 00 	cmpwi   cr7,r0,0
    3bc0:	40 9e 02 30 	bne-    cr7,3df0 <sctp_recvmsg+0x3a8>
		goto out_free;
    3bc4:	80 01 00 60 	lwz     r0,96(r1)
    3bc8:	90 01 00 3c 	stw     r0,60(r1)
    3bcc:	80 01 00 5c 	lwz     r0,92(r1)
    3bd0:	90 01 00 40 	stw     r0,64(r1)
    3bd4:	80 01 00 14 	lwz     r0,20(r1)
    3bd8:	90 01 00 44 	stw     r0,68(r1)
			   (1UL << SOCK_TIMESTAMPING_RX_SOFTWARE)	| \
			   (1UL << SOCK_TIMESTAMPING_SOFTWARE)		| \
			   (1UL << SOCK_TIMESTAMPING_RAW_HARDWARE) 	| \
			   (1UL << SOCK_TIMESTAMPING_SYS_HARDWARE))

	if (sk->sk_flags & FLAGS_TS_OR_DROPS)
    3bdc:	80 01 00 40 	lwz     r0,64(r1)
    3be0:	7c 0b 03 78 	mr      r11,r0
    3be4:	81 2b 00 74 	lwz     r9,116(r11)
    3be8:	3c 00 00 bc 	lis     r0,188
    3bec:	60 00 08 00 	ori     r0,r0,2048
    3bf0:	7d 20 00 38 	and     r0,r9,r0
    3bf4:	2f 80 00 00 	cmpwi   cr7,r0,0
    3bf8:	41 9e 00 18 	beq-    cr7,3c10 <sctp_recvmsg+0x1c8>
		__sock_recv_ts_and_drops(msg, sk, skb);
    3bfc:	80 61 00 3c 	lwz     r3,60(r1)
    3c00:	80 81 00 40 	lwz     r4,64(r1)
    3c04:	80 a1 00 44 	lwz     r5,68(r1)
    3c08:	48 00 00 01 	bl      3c08 <sctp_recvmsg+0x1c0>
    3c0c:	48 00 00 24 	b       3c30 <sctp_recvmsg+0x1e8>
	else
		sk->sk_stamp = skb->tstamp;
    3c10:	80 01 00 40 	lwz     r0,64(r1)
    3c14:	81 21 00 44 	lwz     r9,68(r1)
    3c18:	81 49 00 0c 	lwz     r10,12(r9)
    3c1c:	81 29 00 08 	lwz     r9,8(r9)
    3c20:	7c 0b 03 78 	mr      r11,r0
    3c24:	39 6b 01 08 	addi    r11,r11,264
    3c28:	91 2b 00 00 	stw     r9,0(r11)
    3c2c:	91 4b 00 04 	stw     r10,4(r11)

	sock_recv_ts_and_drops(msg, sk, skb);
	if (sctp_ulpevent_is_notification(event)) {
    3c30:	80 61 00 0c 	lwz     r3,12(r1)
    3c34:	48 00 00 01 	bl      3c34 <sctp_recvmsg+0x1ec>
    3c38:	7c 60 1b 78 	mr      r0,r3
    3c3c:	2f 80 00 00 	cmpwi   cr7,r0,0
    3c40:	41 9e 00 54 	beq-    cr7,3c94 <sctp_recvmsg+0x24c>
		msg->msg_flags |= MSG_NOTIFICATION;
    3c44:	80 01 00 60 	lwz     r0,96(r1)
    3c48:	7c 09 03 78 	mr      r9,r0
    3c4c:	80 09 00 18 	lwz     r0,24(r9)
    3c50:	60 09 80 00 	ori     r9,r0,32768
    3c54:	80 01 00 60 	lwz     r0,96(r1)
    3c58:	7c 0b 03 78 	mr      r11,r0
    3c5c:	91 2b 00 18 	stw     r9,24(r11)
		sp->pf->event_msgname(event, msg->msg_name, addr_len);
    3c60:	80 01 00 10 	lwz     r0,16(r1)
    3c64:	7c 09 03 78 	mr      r9,r0
    3c68:	80 09 01 cc 	lwz     r0,460(r9)
    3c6c:	7c 0b 03 78 	mr      r11,r0
    3c70:	80 0b 00 00 	lwz     r0,0(r11)
    3c74:	81 21 00 60 	lwz     r9,96(r1)
    3c78:	81 29 00 00 	lwz     r9,0(r9)
    3c7c:	80 61 00 0c 	lwz     r3,12(r1)
    3c80:	7d 24 4b 78 	mr      r4,r9
    3c84:	80 a1 00 70 	lwz     r5,112(r1)
    3c88:	7c 09 03 a6 	mtctr   r0
    3c8c:	4e 80 04 21 	bctrl
    3c90:	48 00 00 34 	b       3cc4 <sctp_recvmsg+0x27c>
	} else {
		sp->pf->skb_msgname(skb, msg->msg_name, addr_len);
    3c94:	80 01 00 10 	lwz     r0,16(r1)
    3c98:	7c 09 03 78 	mr      r9,r0
    3c9c:	80 09 01 cc 	lwz     r0,460(r9)
    3ca0:	7c 0b 03 78 	mr      r11,r0
    3ca4:	80 0b 00 04 	lwz     r0,4(r11)
    3ca8:	81 21 00 60 	lwz     r9,96(r1)
    3cac:	81 29 00 00 	lwz     r9,0(r9)
    3cb0:	80 61 00 14 	lwz     r3,20(r1)
    3cb4:	7d 24 4b 78 	mr      r4,r9
    3cb8:	80 a1 00 70 	lwz     r5,112(r1)
    3cbc:	7c 09 03 a6 	mtctr   r0
    3cc0:	4e 80 04 21 	bctrl
	}

	/* Check if we allow SCTP_SNDRCVINFO. */
	if (sp->subscribe.sctp_data_io_event)
    3cc4:	80 01 00 10 	lwz     r0,16(r1)
    3cc8:	7c 09 03 78 	mr      r9,r0
    3ccc:	88 09 02 c0 	lbz     r0,704(r9)
    3cd0:	54 00 06 3e 	clrlwi  r0,r0,24
    3cd4:	2f 80 00 00 	cmpwi   cr7,r0,0
    3cd8:	41 9e 00 10 	beq-    cr7,3ce8 <sctp_recvmsg+0x2a0>
		sctp_ulpevent_read_sndrcvinfo(event, msg);
    3cdc:	80 61 00 0c 	lwz     r3,12(r1)
    3ce0:	80 81 00 60 	lwz     r4,96(r1)
    3ce4:	48 00 00 01 	bl      3ce4 <sctp_recvmsg+0x29c>
	/* FIXME: we should be calling IP/IPv6 layers.  */
	if (sk->sk_protinfo.af_inet.cmsg_flags)
		ip_cmsg_recv(msg, skb);
#endif

	err = copied;
    3ce8:	80 01 00 08 	lwz     r0,8(r1)
    3cec:	90 01 00 48 	stw     r0,72(r1)

	/* If skb's length exceeds the user's buffer, update the skb and
	 * push it back to the receive_queue so that the next call to
	 * recvmsg() will return the remaining data. Don't set MSG_EOR.
	 */
	if (skb_len > copied) {
    3cf0:	81 21 00 18 	lwz     r9,24(r1)
    3cf4:	80 01 00 08 	lwz     r0,8(r1)
    3cf8:	7f 89 00 00 	cmpw    cr7,r9,r0
    3cfc:	40 9d 00 84 	ble-    cr7,3d80 <sctp_recvmsg+0x338>
		msg->msg_flags &= ~MSG_EOR;
    3d00:	80 01 00 60 	lwz     r0,96(r1)
    3d04:	7c 0b 03 78 	mr      r11,r0
    3d08:	80 0b 00 18 	lwz     r0,24(r11)
    3d0c:	54 09 06 6e 	rlwinm  r9,r0,0,25,23
    3d10:	80 01 00 60 	lwz     r0,96(r1)
    3d14:	7c 0b 03 78 	mr      r11,r0
    3d18:	91 2b 00 18 	stw     r9,24(r11)
		if (flags & MSG_PEEK)
    3d1c:	80 01 00 6c 	lwz     r0,108(r1)
    3d20:	54 00 07 bc 	rlwinm  r0,r0,0,30,30
    3d24:	2f 80 00 00 	cmpwi   cr7,r0,0
    3d28:	40 9e 00 d0 	bne-    cr7,3df8 <sctp_recvmsg+0x3b0>
			goto out_free;
		sctp_skb_pull(skb, copied);
    3d2c:	80 61 00 14 	lwz     r3,20(r1)
    3d30:	80 81 00 08 	lwz     r4,8(r1)
    3d34:	4b ff fa ed 	bl      3820 <sctp_skb_pull>
		skb_queue_head(&sk->sk_receive_queue, skb);
    3d38:	80 01 00 5c 	lwz     r0,92(r1)
    3d3c:	30 00 00 3c 	addic   r0,r0,60
    3d40:	7c 03 03 78 	mr      r3,r0
    3d44:	80 81 00 14 	lwz     r4,20(r1)
    3d48:	48 00 00 01 	bl      3d48 <sctp_recvmsg+0x300>

		/* When only partial message is copied to the user, increase
		 * rwnd by that amount. If all the data in the skb is read,
		 * rwnd is updated when the event is freed.
		 */
		if (!sctp_ulpevent_is_notification(event))
    3d4c:	80 61 00 0c 	lwz     r3,12(r1)
    3d50:	48 00 00 01 	bl      3d50 <sctp_recvmsg+0x308>
    3d54:	7c 60 1b 78 	mr      r0,r3
    3d58:	2f 80 00 00 	cmpwi   cr7,r0,0
    3d5c:	40 9e 00 d0 	bne-    cr7,3e2c <sctp_recvmsg+0x3e4>
			sctp_assoc_rwnd_increase(event->asoc, copied);
    3d60:	80 01 00 0c 	lwz     r0,12(r1)
    3d64:	7c 0b 03 78 	mr      r11,r0
    3d68:	81 2b 00 00 	lwz     r9,0(r11)
    3d6c:	80 01 00 08 	lwz     r0,8(r1)
    3d70:	7d 23 4b 78 	mr      r3,r9
    3d74:	7c 04 03 78 	mr      r4,r0
    3d78:	48 00 00 01 	bl      3d78 <sctp_recvmsg+0x330>
		goto out;
    3d7c:	48 00 00 b0 	b       3e2c <sctp_recvmsg+0x3e4>
	} else if ((event->msg_flags & MSG_NOTIFICATION) ||
    3d80:	80 01 00 0c 	lwz     r0,12(r1)
    3d84:	7c 09 03 78 	mr      r9,r0
    3d88:	80 09 00 18 	lwz     r0,24(r9)
    3d8c:	54 00 04 20 	rlwinm  r0,r0,0,16,16
    3d90:	2f 80 00 00 	cmpwi   cr7,r0,0
    3d94:	40 9e 00 1c 	bne-    cr7,3db0 <sctp_recvmsg+0x368>
		   (event->msg_flags & MSG_EOR))
    3d98:	80 01 00 0c 	lwz     r0,12(r1)
    3d9c:	7c 0b 03 78 	mr      r11,r0
    3da0:	80 0b 00 18 	lwz     r0,24(r11)
    3da4:	54 00 06 30 	rlwinm  r0,r0,0,24,24
		 * rwnd is updated when the event is freed.
		 */
		if (!sctp_ulpevent_is_notification(event))
			sctp_assoc_rwnd_increase(event->asoc, copied);
		goto out;
	} else if ((event->msg_flags & MSG_NOTIFICATION) ||
    3da8:	2f 80 00 00 	cmpwi   cr7,r0,0
    3dac:	41 9e 00 24 	beq-    cr7,3dd0 <sctp_recvmsg+0x388>
		   (event->msg_flags & MSG_EOR))
		msg->msg_flags |= MSG_EOR;
    3db0:	80 01 00 60 	lwz     r0,96(r1)
    3db4:	7c 09 03 78 	mr      r9,r0
    3db8:	80 09 00 18 	lwz     r0,24(r9)
    3dbc:	60 09 00 80 	ori     r9,r0,128
    3dc0:	80 01 00 60 	lwz     r0,96(r1)
    3dc4:	7c 0b 03 78 	mr      r11,r0
    3dc8:	91 2b 00 18 	stw     r9,24(r11)
    3dcc:	48 00 00 30 	b       3dfc <sctp_recvmsg+0x3b4>
	else
		msg->msg_flags &= ~MSG_EOR;
    3dd0:	80 01 00 60 	lwz     r0,96(r1)
    3dd4:	7c 09 03 78 	mr      r9,r0
    3dd8:	80 09 00 18 	lwz     r0,24(r9)
    3ddc:	54 09 06 6e 	rlwinm  r9,r0,0,25,23
    3de0:	80 01 00 60 	lwz     r0,96(r1)
    3de4:	7c 0b 03 78 	mr      r11,r0
    3de8:	91 2b 00 18 	stw     r9,24(r11)
    3dec:	48 00 00 10 	b       3dfc <sctp_recvmsg+0x3b4>
	err = skb_copy_datagram_iovec(skb, 0, msg->msg_iov, copied);

	event = sctp_skb2event(skb);

	if (err)
		goto out_free;
    3df0:	60 00 00 00 	nop
    3df4:	48 00 00 08 	b       3dfc <sctp_recvmsg+0x3b4>
	 * recvmsg() will return the remaining data. Don't set MSG_EOR.
	 */
	if (skb_len > copied) {
		msg->msg_flags &= ~MSG_EOR;
		if (flags & MSG_PEEK)
			goto out_free;
    3df8:	60 00 00 00 	nop
		msg->msg_flags |= MSG_EOR;
	else
		msg->msg_flags &= ~MSG_EOR;

out_free:
	if (flags & MSG_PEEK) {
    3dfc:	80 01 00 6c 	lwz     r0,108(r1)
    3e00:	54 00 07 bc 	rlwinm  r0,r0,0,30,30
    3e04:	2f 80 00 00 	cmpwi   cr7,r0,0
    3e08:	41 9e 00 10 	beq-    cr7,3e18 <sctp_recvmsg+0x3d0>
		/* Release the skb reference acquired after peeking the skb in
		 * sctp_skb_recv_datagram().
		 */
		kfree_skb(skb);
    3e0c:	80 61 00 14 	lwz     r3,20(r1)
    3e10:	48 00 00 01 	bl      3e10 <sctp_recvmsg+0x3c8>
    3e14:	48 00 00 1c 	b       3e30 <sctp_recvmsg+0x3e8>
	} else {
		/* Free the event which includes releasing the reference to
		 * the owner of the skb, freeing the skb and updating the
		 * rwnd.
		 */
		sctp_ulpevent_free(event);
    3e18:	80 61 00 0c 	lwz     r3,12(r1)
    3e1c:	48 00 00 01 	bl      3e1c <sctp_recvmsg+0x3d4>
    3e20:	48 00 00 10 	b       3e30 <sctp_recvmsg+0x3e8>
		goto out;
	}

	skb = sctp_skb_recv_datagram(sk, flags, noblock, &err);
	if (!skb)
		goto out;
    3e24:	60 00 00 00 	nop
    3e28:	48 00 00 08 	b       3e30 <sctp_recvmsg+0x3e8>
		 * rwnd by that amount. If all the data in the skb is read,
		 * rwnd is updated when the event is freed.
		 */
		if (!sctp_ulpevent_is_notification(event))
			sctp_assoc_rwnd_increase(event->asoc, copied);
		goto out;
    3e2c:	60 00 00 00 	nop
		 * rwnd.
		 */
		sctp_ulpevent_free(event);
	}
out:
	sctp_release_sock(sk);
    3e30:	80 61 00 5c 	lwz     r3,92(r1)
    3e34:	48 00 00 01 	bl      3e34 <sctp_recvmsg+0x3ec>
	return err;
    3e38:	80 01 00 48 	lwz     r0,72(r1)
}
    3e3c:	7c 03 03 78 	mr      r3,r0
    3e40:	80 01 00 84 	lwz     r0,132(r1)
    3e44:	7c 08 03 a6 	mtlr    r0
    3e48:	38 21 00 80 	addi    r1,r1,128
    3e4c:	4e 80 00 20 	blr

00003e50 <sctp_setsockopt_disable_fragments>:
 * instead a error will be indicated to the user.
 */
static int sctp_setsockopt_disable_fragments(struct sock *sk,
					     char __user *optval,
					     unsigned int optlen)
{
    3e50:	94 21 ff c0 	stwu    r1,-64(r1)
    3e54:	bf c1 00 38 	stmw    r30,56(r1)
    3e58:	90 61 00 28 	stw     r3,40(r1)
    3e5c:	90 81 00 2c 	stw     r4,44(r1)
    3e60:	90 a1 00 30 	stw     r5,48(r1)
	int val;

	if (optlen < sizeof(int))
    3e64:	80 01 00 30 	lwz     r0,48(r1)
    3e68:	2b 80 00 03 	cmplwi  cr7,r0,3
    3e6c:	41 9d 00 0c 	bgt-    cr7,3e78 <sctp_setsockopt_disable_fragments+0x28>
		return -EINVAL;
    3e70:	38 00 ff ea 	li      r0,-22
    3e74:	48 00 00 d8 	b       3f4c <sctp_setsockopt_disable_fragments+0xfc>

	if (get_user(val, (int __user *)optval))
    3e78:	38 00 ff f2 	li      r0,-14
    3e7c:	90 01 00 08 	stw     r0,8(r1)
    3e80:	38 00 00 00 	li      r0,0
    3e84:	90 01 00 0c 	stw     r0,12(r1)
    3e88:	80 01 00 2c 	lwz     r0,44(r1)
    3e8c:	90 01 00 10 	stw     r0,16(r1)
    3e90:	81 21 00 10 	lwz     r9,16(r1)
    3e94:	7c 40 13 78 	mr      r0,r2
    3e98:	7c 0b 03 78 	mr      r11,r0
    3e9c:	80 0b 01 d4 	lwz     r0,468(r11)
    3ea0:	7f 89 00 40 	cmplw   cr7,r9,r0
    3ea4:	41 9d 00 28 	bgt-    cr7,3ecc <sctp_setsockopt_disable_fragments+0x7c>
    3ea8:	7c 40 13 78 	mr      r0,r2
    3eac:	7c 0b 03 78 	mr      r11,r0
    3eb0:	81 2b 01 d4 	lwz     r9,468(r11)
    3eb4:	80 01 00 10 	lwz     r0,16(r1)
    3eb8:	7c 00 48 50 	subf    r0,r0,r9
    3ebc:	2b 80 00 02 	cmplwi  cr7,r0,2
    3ec0:	40 9d 00 0c 	ble-    cr7,3ecc <sctp_setsockopt_disable_fragments+0x7c>
    3ec4:	38 00 00 01 	li      r0,1
    3ec8:	48 00 00 08 	b       3ed0 <sctp_setsockopt_disable_fragments+0x80>
    3ecc:	38 00 00 00 	li      r0,0
    3ed0:	2f 80 00 00 	cmpwi   cr7,r0,0
    3ed4:	41 9e 00 2c 	beq-    cr7,3f00 <sctp_setsockopt_disable_fragments+0xb0>
    3ed8:	38 00 00 00 	li      r0,0
    3edc:	90 01 00 08 	stw     r0,8(r1)
    3ee0:	80 01 00 10 	lwz     r0,16(r1)
    3ee4:	81 21 00 08 	lwz     r9,8(r1)
    3ee8:	7d 3f 4b 78 	mr      r31,r9
    3eec:	7c 09 03 78 	mr      r9,r0
    3ef0:	83 c9 00 00 	lwz     r30,0(r9)
    3ef4:	93 e1 00 08 	stw     r31,8(r1)
    3ef8:	93 c1 00 0c 	stw     r30,12(r1)
    3efc:	60 00 00 00 	nop
    3f00:	80 01 00 0c 	lwz     r0,12(r1)
    3f04:	90 01 00 14 	stw     r0,20(r1)
    3f08:	80 01 00 08 	lwz     r0,8(r1)
    3f0c:	2f 80 00 00 	cmpwi   cr7,r0,0
    3f10:	41 9e 00 0c 	beq-    cr7,3f1c <sctp_setsockopt_disable_fragments+0xcc>
		return -EFAULT;
    3f14:	38 00 ff f2 	li      r0,-14
    3f18:	48 00 00 34 	b       3f4c <sctp_setsockopt_disable_fragments+0xfc>
    3f1c:	80 01 00 28 	lwz     r0,40(r1)
    3f20:	90 01 00 18 	stw     r0,24(r1)
    3f24:	80 01 00 18 	lwz     r0,24(r1)

	sctp_sk(sk)->disable_fragments = (val == 0) ? 0 : 1;
    3f28:	81 21 00 14 	lwz     r9,20(r1)
    3f2c:	2f 89 00 00 	cmpwi   cr7,r9,0
    3f30:	7d 20 00 26 	mfcr    r9
    3f34:	55 29 ff fe 	rlwinm  r9,r9,31,31,31
    3f38:	69 29 00 01 	xori    r9,r9,1
    3f3c:	55 29 06 3e 	clrlwi  r9,r9,24
    3f40:	7c 0b 03 78 	mr      r11,r0
    3f44:	99 2b 02 e9 	stb     r9,745(r11)

	return 0;
    3f48:	38 00 00 00 	li      r0,0
}
    3f4c:	7c 03 03 78 	mr      r3,r0
    3f50:	bb c1 00 38 	lmw     r30,56(r1)
    3f54:	38 21 00 40 	addi    r1,r1,64
    3f58:	4e 80 00 20 	blr

00003f5c <sctp_setsockopt_events>:

static int sctp_setsockopt_events(struct sock *sk, char __user *optval,
				  unsigned int optlen)
{
    3f5c:	94 21 ff c0 	stwu    r1,-64(r1)
    3f60:	7c 08 02 a6 	mflr    r0
    3f64:	90 01 00 44 	stw     r0,68(r1)
    3f68:	90 61 00 28 	stw     r3,40(r1)
    3f6c:	90 81 00 2c 	stw     r4,44(r1)
    3f70:	90 a1 00 30 	stw     r5,48(r1)
	if (optlen > sizeof(struct sctp_event_subscribe))
    3f74:	80 01 00 30 	lwz     r0,48(r1)
    3f78:	2b 80 00 09 	cmplwi  cr7,r0,9
    3f7c:	40 9d 00 0c 	ble-    cr7,3f88 <sctp_setsockopt_events+0x2c>
		return -EINVAL;
    3f80:	38 00 ff ea 	li      r0,-22
    3f84:	48 00 01 0c 	b       4090 <sctp_setsockopt_events+0x134>
    3f88:	80 01 00 28 	lwz     r0,40(r1)
    3f8c:	90 01 00 08 	stw     r0,8(r1)
    3f90:	80 01 00 08 	lwz     r0,8(r1)
	if (copy_from_user(&sctp_sk(sk)->subscribe, optval, optlen))
    3f94:	30 00 02 c0 	addic   r0,r0,704
    3f98:	90 01 00 0c 	stw     r0,12(r1)
    3f9c:	80 01 00 2c 	lwz     r0,44(r1)
    3fa0:	90 01 00 10 	stw     r0,16(r1)
    3fa4:	80 01 00 30 	lwz     r0,48(r1)
    3fa8:	90 01 00 14 	stw     r0,20(r1)
static inline unsigned long copy_from_user(void *to,
		const void __user *from, unsigned long n)
{
	unsigned long over;

	if (access_ok(VERIFY_READ, from, n))
    3fac:	81 21 00 10 	lwz     r9,16(r1)
    3fb0:	7c 40 13 78 	mr      r0,r2
    3fb4:	7c 0a 03 78 	mr      r10,r0
    3fb8:	80 0a 01 d4 	lwz     r0,468(r10)
    3fbc:	7f 89 00 40 	cmplw   cr7,r9,r0
    3fc0:	41 9d 00 3c 	bgt-    cr7,3ffc <sctp_setsockopt_events+0xa0>
    3fc4:	80 01 00 14 	lwz     r0,20(r1)
    3fc8:	2f 80 00 00 	cmpwi   cr7,r0,0
    3fcc:	41 9e 00 28 	beq-    cr7,3ff4 <sctp_setsockopt_events+0x98>
    3fd0:	80 01 00 14 	lwz     r0,20(r1)
    3fd4:	31 20 ff ff 	addic   r9,r0,-1
    3fd8:	7c 40 13 78 	mr      r0,r2
    3fdc:	7c 0a 03 78 	mr      r10,r0
    3fe0:	81 6a 01 d4 	lwz     r11,468(r10)
    3fe4:	80 01 00 10 	lwz     r0,16(r1)
    3fe8:	7c 00 58 50 	subf    r0,r0,r11
    3fec:	7f 89 00 40 	cmplw   cr7,r9,r0
    3ff0:	41 9d 00 0c 	bgt-    cr7,3ffc <sctp_setsockopt_events+0xa0>
    3ff4:	38 00 00 01 	li      r0,1
    3ff8:	48 00 00 08 	b       4000 <sctp_setsockopt_events+0xa4>
    3ffc:	38 00 00 00 	li      r0,0
    4000:	2f 80 00 00 	cmpwi   cr7,r0,0
    4004:	41 9e 00 1c 	beq-    cr7,4020 <sctp_setsockopt_events+0xc4>
		return __copy_tofrom_user((__force void __user *)to, from, n);
    4008:	80 61 00 0c 	lwz     r3,12(r1)
    400c:	80 81 00 10 	lwz     r4,16(r1)
    4010:	80 a1 00 14 	lwz     r5,20(r1)
    4014:	48 00 00 01 	bl      4014 <sctp_setsockopt_events+0xb8>
    4018:	7c 60 1b 78 	mr      r0,r3
    401c:	48 00 00 60 	b       407c <sctp_setsockopt_events+0x120>
	if ((unsigned long)from < TASK_SIZE) {
    4020:	81 21 00 10 	lwz     r9,16(r1)
    4024:	3c 00 bf ff 	lis     r0,-16385
    4028:	60 00 ff ff 	ori     r0,r0,65535
    402c:	7f 89 00 40 	cmplw   cr7,r9,r0
    4030:	41 9d 00 48 	bgt-    cr7,4078 <sctp_setsockopt_events+0x11c>
		over = (unsigned long)from + n - TASK_SIZE;
    4034:	81 21 00 10 	lwz     r9,16(r1)
    4038:	80 01 00 14 	lwz     r0,20(r1)
    403c:	7c 09 02 14 	add     r0,r9,r0
    4040:	3d 60 40 00 	lis     r11,16384
    4044:	7c 00 5a 14 	add     r0,r0,r11
    4048:	90 01 00 18 	stw     r0,24(r1)
		return __copy_tofrom_user((__force void __user *)to, from,
    404c:	81 21 00 14 	lwz     r9,20(r1)
    4050:	80 01 00 18 	lwz     r0,24(r1)
    4054:	7c 00 48 50 	subf    r0,r0,r9
    4058:	80 61 00 0c 	lwz     r3,12(r1)
    405c:	80 81 00 10 	lwz     r4,16(r1)
    4060:	7c 05 03 78 	mr      r5,r0
    4064:	48 00 00 01 	bl      4064 <sctp_setsockopt_events+0x108>
    4068:	7c 69 1b 78 	mr      r9,r3
    406c:	80 01 00 18 	lwz     r0,24(r1)
    4070:	7c 09 02 14 	add     r0,r9,r0
    4074:	48 00 00 08 	b       407c <sctp_setsockopt_events+0x120>
				n - over) + over;
	}
	return n;
    4078:	80 01 00 14 	lwz     r0,20(r1)
    407c:	2f 80 00 00 	cmpwi   cr7,r0,0
    4080:	41 9e 00 0c 	beq-    cr7,408c <sctp_setsockopt_events+0x130>
		return -EFAULT;
    4084:	38 00 ff f2 	li      r0,-14
    4088:	48 00 00 08 	b       4090 <sctp_setsockopt_events+0x134>
	return 0;
    408c:	38 00 00 00 	li      r0,0
}
    4090:	7c 03 03 78 	mr      r3,r0
    4094:	80 01 00 44 	lwz     r0,68(r1)
    4098:	7c 08 03 a6 	mtlr    r0
    409c:	38 21 00 40 	addi    r1,r1,64
    40a0:	4e 80 00 20 	blr

000040a4 <sctp_setsockopt_autoclose>:
 * integer defining the number of seconds of idle time before an
 * association is closed.
 */
static int sctp_setsockopt_autoclose(struct sock *sk, char __user *optval,
				     unsigned int optlen)
{
    40a4:	94 21 ff b0 	stwu    r1,-80(r1)
    40a8:	7c 08 02 a6 	mflr    r0
    40ac:	90 01 00 54 	stw     r0,84(r1)
    40b0:	90 61 00 38 	stw     r3,56(r1)
    40b4:	90 81 00 3c 	stw     r4,60(r1)
    40b8:	90 a1 00 40 	stw     r5,64(r1)
    40bc:	80 01 00 38 	lwz     r0,56(r1)
    40c0:	90 01 00 14 	stw     r0,20(r1)
    40c4:	80 01 00 14 	lwz     r0,20(r1)
	struct sctp_sock *sp = sctp_sk(sk);
    40c8:	90 01 00 08 	stw     r0,8(r1)
    40cc:	80 01 00 38 	lwz     r0,56(r1)
    40d0:	90 01 00 18 	stw     r0,24(r1)
    40d4:	38 00 00 02 	li      r0,2
    40d8:	90 01 00 1c 	stw     r0,28(r1)
    40dc:	80 01 00 18 	lwz     r0,24(r1)
    40e0:	90 01 00 20 	stw     r0,32(r1)
    40e4:	80 01 00 20 	lwz     r0,32(r1)

/* Is a socket of this style? */
#define sctp_style(sk, style) __sctp_style((sk), (SCTP_SOCKET_##style))
static inline int __sctp_style(const struct sock *sk, sctp_socket_type_t style)
{
	return sctp_sk(sk)->type == style;
    40e8:	7c 09 03 78 	mr      r9,r0
    40ec:	80 09 01 c8 	lwz     r0,456(r9)
    40f0:	81 21 00 1c 	lwz     r9,28(r1)
    40f4:	7f 89 00 00 	cmpw    cr7,r9,r0
    40f8:	7c 00 00 26 	mfcr    r0
    40fc:	54 00 ff fe 	rlwinm  r0,r0,31,31,31

	/* Applicable to UDP-style socket only */
	if (sctp_style(sk, TCP))
    4100:	2f 80 00 00 	cmpwi   cr7,r0,0
    4104:	41 9e 00 0c 	beq-    cr7,4110 <sctp_setsockopt_autoclose+0x6c>
		return -EOPNOTSUPP;
    4108:	38 00 ff a1 	li      r0,-95
    410c:	48 00 01 58 	b       4264 <sctp_setsockopt_autoclose+0x1c0>
	if (optlen != sizeof(int))
    4110:	80 01 00 40 	lwz     r0,64(r1)
    4114:	2f 80 00 04 	cmpwi   cr7,r0,4
    4118:	41 9e 00 0c 	beq-    cr7,4124 <sctp_setsockopt_autoclose+0x80>
		return -EINVAL;
    411c:	38 00 ff ea 	li      r0,-22
    4120:	48 00 01 44 	b       4264 <sctp_setsockopt_autoclose+0x1c0>
	if (copy_from_user(&sp->autoclose, optval, optlen))
    4124:	80 01 00 08 	lwz     r0,8(r1)
    4128:	30 00 02 e4 	addic   r0,r0,740
    412c:	90 01 00 24 	stw     r0,36(r1)
    4130:	80 01 00 3c 	lwz     r0,60(r1)
    4134:	90 01 00 28 	stw     r0,40(r1)
    4138:	80 01 00 40 	lwz     r0,64(r1)
    413c:	90 01 00 2c 	stw     r0,44(r1)
static inline unsigned long copy_from_user(void *to,
		const void __user *from, unsigned long n)
{
	unsigned long over;

	if (access_ok(VERIFY_READ, from, n))
    4140:	81 21 00 28 	lwz     r9,40(r1)
    4144:	7c 40 13 78 	mr      r0,r2
    4148:	7c 0a 03 78 	mr      r10,r0
    414c:	80 0a 01 d4 	lwz     r0,468(r10)
    4150:	7f 89 00 40 	cmplw   cr7,r9,r0
    4154:	41 9d 00 3c 	bgt-    cr7,4190 <sctp_setsockopt_autoclose+0xec>
    4158:	80 01 00 2c 	lwz     r0,44(r1)
    415c:	2f 80 00 00 	cmpwi   cr7,r0,0
    4160:	41 9e 00 28 	beq-    cr7,4188 <sctp_setsockopt_autoclose+0xe4>
    4164:	80 01 00 2c 	lwz     r0,44(r1)
    4168:	31 20 ff ff 	addic   r9,r0,-1
    416c:	7c 40 13 78 	mr      r0,r2
    4170:	7c 0a 03 78 	mr      r10,r0
    4174:	81 6a 01 d4 	lwz     r11,468(r10)
    4178:	80 01 00 28 	lwz     r0,40(r1)
    417c:	7c 00 58 50 	subf    r0,r0,r11
    4180:	7f 89 00 40 	cmplw   cr7,r9,r0
    4184:	41 9d 00 0c 	bgt-    cr7,4190 <sctp_setsockopt_autoclose+0xec>
    4188:	38 00 00 01 	li      r0,1
    418c:	48 00 00 08 	b       4194 <sctp_setsockopt_autoclose+0xf0>
    4190:	38 00 00 00 	li      r0,0
    4194:	2f 80 00 00 	cmpwi   cr7,r0,0
    4198:	41 9e 00 1c 	beq-    cr7,41b4 <sctp_setsockopt_autoclose+0x110>
		return __copy_tofrom_user((__force void __user *)to, from, n);
    419c:	80 61 00 24 	lwz     r3,36(r1)
    41a0:	80 81 00 28 	lwz     r4,40(r1)
    41a4:	80 a1 00 2c 	lwz     r5,44(r1)
    41a8:	48 00 00 01 	bl      41a8 <sctp_setsockopt_autoclose+0x104>
    41ac:	7c 60 1b 78 	mr      r0,r3
    41b0:	48 00 00 60 	b       4210 <sctp_setsockopt_autoclose+0x16c>
	if ((unsigned long)from < TASK_SIZE) {
    41b4:	81 21 00 28 	lwz     r9,40(r1)
    41b8:	3c 00 bf ff 	lis     r0,-16385
    41bc:	60 00 ff ff 	ori     r0,r0,65535
    41c0:	7f 89 00 40 	cmplw   cr7,r9,r0
    41c4:	41 9d 00 48 	bgt-    cr7,420c <sctp_setsockopt_autoclose+0x168>
		over = (unsigned long)from + n - TASK_SIZE;
    41c8:	81 21 00 28 	lwz     r9,40(r1)
    41cc:	80 01 00 2c 	lwz     r0,44(r1)
    41d0:	7c 09 02 14 	add     r0,r9,r0
    41d4:	3d 60 40 00 	lis     r11,16384
    41d8:	7c 00 5a 14 	add     r0,r0,r11
    41dc:	90 01 00 30 	stw     r0,48(r1)
		return __copy_tofrom_user((__force void __user *)to, from,
    41e0:	81 21 00 2c 	lwz     r9,44(r1)
    41e4:	80 01 00 30 	lwz     r0,48(r1)
    41e8:	7c 00 48 50 	subf    r0,r0,r9
    41ec:	80 61 00 24 	lwz     r3,36(r1)
    41f0:	80 81 00 28 	lwz     r4,40(r1)
    41f4:	7c 05 03 78 	mr      r5,r0
    41f8:	48 00 00 01 	bl      41f8 <sctp_setsockopt_autoclose+0x154>
    41fc:	7c 69 1b 78 	mr      r9,r3
    4200:	80 01 00 30 	lwz     r0,48(r1)
    4204:	7c 09 02 14 	add     r0,r9,r0
    4208:	48 00 00 08 	b       4210 <sctp_setsockopt_autoclose+0x16c>
				n - over) + over;
	}
	return n;
    420c:	80 01 00 2c 	lwz     r0,44(r1)
    4210:	2f 80 00 00 	cmpwi   cr7,r0,0
    4214:	41 9e 00 0c 	beq-    cr7,4220 <sctp_setsockopt_autoclose+0x17c>
		return -EFAULT;
    4218:	38 00 ff f2 	li      r0,-14
    421c:	48 00 00 48 	b       4264 <sctp_setsockopt_autoclose+0x1c0>
	/* make sure it won't exceed MAX_SCHEDULE_TIMEOUT */
	sp->autoclose = min_t(long, sp->autoclose, MAX_SCHEDULE_TIMEOUT / HZ);
    4220:	80 01 00 08 	lwz     r0,8(r1)
    4224:	7c 09 03 78 	mr      r9,r0
    4228:	80 09 02 e4 	lwz     r0,740(r9)
    422c:	90 01 00 0c 	stw     r0,12(r1)
    4230:	3c 00 00 83 	lis     r0,131
    4234:	60 00 12 6e 	ori     r0,r0,4718
    4238:	90 01 00 10 	stw     r0,16(r1)
    423c:	81 21 00 0c 	lwz     r9,12(r1)
    4240:	80 01 00 10 	lwz     r0,16(r1)
    4244:	7f 80 48 00 	cmpw    cr7,r0,r9
    4248:	40 9d 00 08 	ble-    cr7,4250 <sctp_setsockopt_autoclose+0x1ac>
    424c:	7d 20 4b 78 	mr      r0,r9
    4250:	7c 09 03 78 	mr      r9,r0
    4254:	80 01 00 08 	lwz     r0,8(r1)
    4258:	7c 0a 03 78 	mr      r10,r0
    425c:	91 2a 02 e4 	stw     r9,740(r10)

	return 0;
    4260:	38 00 00 00 	li      r0,0
}
    4264:	7c 03 03 78 	mr      r3,r0
    4268:	80 01 00 54 	lwz     r0,84(r1)
    426c:	7c 08 03 a6 	mtlr    r0
    4270:	38 21 00 50 	addi    r1,r1,80
    4274:	4e 80 00 20 	blr

00004278 <sctp_apply_peer_addr_params>:
				       struct sctp_association *asoc,
				       struct sctp_sock        *sp,
				       int                      hb_change,
				       int                      pmtud_change,
				       int                      sackdelay_change)
{
    4278:	94 21 ff a0 	stwu    r1,-96(r1)
    427c:	7c 08 02 a6 	mflr    r0
    4280:	90 01 00 64 	stw     r0,100(r1)
    4284:	90 61 00 38 	stw     r3,56(r1)
    4288:	90 81 00 3c 	stw     r4,60(r1)
    428c:	90 a1 00 40 	stw     r5,64(r1)
    4290:	90 c1 00 44 	stw     r6,68(r1)
    4294:	90 e1 00 48 	stw     r7,72(r1)
    4298:	91 01 00 4c 	stw     r8,76(r1)
    429c:	91 21 00 50 	stw     r9,80(r1)
	int error;

	if (params->spp_flags & SPP_HB_DEMAND && trans) {
    42a0:	80 01 00 38 	lwz     r0,56(r1)
    42a4:	7c 09 03 78 	mr      r9,r0
    42a8:	80 09 00 92 	lwz     r0,146(r9)
    42ac:	54 00 07 7a 	rlwinm  r0,r0,0,29,29
    42b0:	2f 80 00 00 	cmpwi   cr7,r0,0
    42b4:	41 9e 00 40 	beq-    cr7,42f4 <sctp_apply_peer_addr_params+0x7c>
    42b8:	80 01 00 3c 	lwz     r0,60(r1)
    42bc:	2f 80 00 00 	cmpwi   cr7,r0,0
    42c0:	41 9e 00 34 	beq-    cr7,42f4 <sctp_apply_peer_addr_params+0x7c>
		error = sctp_primitive_REQUESTHEARTBEAT (trans->asoc, trans);
    42c4:	80 01 00 3c 	lwz     r0,60(r1)
    42c8:	7c 0b 03 78 	mr      r11,r0
    42cc:	80 0b 00 30 	lwz     r0,48(r11)
    42d0:	7c 03 03 78 	mr      r3,r0
    42d4:	80 81 00 3c 	lwz     r4,60(r1)
    42d8:	48 00 00 01 	bl      42d8 <sctp_apply_peer_addr_params+0x60>
    42dc:	90 61 00 08 	stw     r3,8(r1)
		if (error)
    42e0:	80 01 00 08 	lwz     r0,8(r1)
    42e4:	2f 80 00 00 	cmpwi   cr7,r0,0
    42e8:	41 9e 00 0c 	beq-    cr7,42f4 <sctp_apply_peer_addr_params+0x7c>
			return error;
    42ec:	80 01 00 08 	lwz     r0,8(r1)
    42f0:	48 00 05 d0 	b       48c0 <sctp_apply_peer_addr_params+0x648>

	/* Note that unless the spp_flag is set to SPP_HB_ENABLE the value of
	 * this field is ignored.  Note also that a value of zero indicates
	 * the current setting should be left unchanged.
	 */
	if (params->spp_flags & SPP_HB_ENABLE) {
    42f4:	80 01 00 38 	lwz     r0,56(r1)
    42f8:	7c 09 03 78 	mr      r9,r0
    42fc:	80 09 00 92 	lwz     r0,146(r9)
    4300:	54 00 07 fe 	clrlwi  r0,r0,31
    4304:	54 00 06 3e 	clrlwi  r0,r0,24
    4308:	2f 80 00 00 	cmpwi   cr7,r0,0
    430c:	41 9e 00 d8 	beq-    cr7,43e4 <sctp_apply_peer_addr_params+0x16c>

		/* Re-zero the interval if the SPP_HB_TIME_IS_ZERO is
		 * set.  This lets us use 0 value when this flag
		 * is set.
		 */
		if (params->spp_flags & SPP_HB_TIME_IS_ZERO)
    4310:	80 01 00 38 	lwz     r0,56(r1)
    4314:	7c 0b 03 78 	mr      r11,r0
    4318:	80 0b 00 92 	lwz     r0,146(r11)
    431c:	54 00 06 30 	rlwinm  r0,r0,0,24,24
    4320:	2f 80 00 00 	cmpwi   cr7,r0,0
    4324:	41 9e 00 14 	beq-    cr7,4338 <sctp_apply_peer_addr_params+0xc0>
			params->spp_hbinterval = 0;
    4328:	80 01 00 38 	lwz     r0,56(r1)
    432c:	39 20 00 00 	li      r9,0
    4330:	7c 0b 03 78 	mr      r11,r0
    4334:	91 2b 00 84 	stw     r9,132(r11)

		if (params->spp_hbinterval ||
    4338:	80 01 00 38 	lwz     r0,56(r1)
    433c:	7c 09 03 78 	mr      r9,r0
    4340:	80 09 00 84 	lwz     r0,132(r9)
    4344:	2f 80 00 00 	cmpwi   cr7,r0,0
    4348:	40 9e 00 1c 	bne-    cr7,4364 <sctp_apply_peer_addr_params+0xec>
		    (params->spp_flags & SPP_HB_TIME_IS_ZERO)) {
    434c:	80 01 00 38 	lwz     r0,56(r1)
    4350:	7c 0b 03 78 	mr      r11,r0
    4354:	80 0b 00 92 	lwz     r0,146(r11)
    4358:	54 00 06 30 	rlwinm  r0,r0,0,24,24
		 * is set.
		 */
		if (params->spp_flags & SPP_HB_TIME_IS_ZERO)
			params->spp_hbinterval = 0;

		if (params->spp_hbinterval ||
    435c:	2f 80 00 00 	cmpwi   cr7,r0,0
    4360:	41 9e 00 84 	beq-    cr7,43e4 <sctp_apply_peer_addr_params+0x16c>
		    (params->spp_flags & SPP_HB_TIME_IS_ZERO)) {
			if (trans) {
    4364:	80 01 00 3c 	lwz     r0,60(r1)
    4368:	2f 80 00 00 	cmpwi   cr7,r0,0
    436c:	41 9e 00 2c 	beq-    cr7,4398 <sctp_apply_peer_addr_params+0x120>
				trans->hbinterval =
				    msecs_to_jiffies(params->spp_hbinterval);
    4370:	80 01 00 38 	lwz     r0,56(r1)
    4374:	7c 09 03 78 	mr      r9,r0
    4378:	80 09 00 84 	lwz     r0,132(r9)
    437c:	7c 03 03 78 	mr      r3,r0
    4380:	48 00 00 01 	bl      4380 <sctp_apply_peer_addr_params+0x108>
    4384:	7c 69 1b 78 	mr      r9,r3
			params->spp_hbinterval = 0;

		if (params->spp_hbinterval ||
		    (params->spp_flags & SPP_HB_TIME_IS_ZERO)) {
			if (trans) {
				trans->hbinterval =
    4388:	80 01 00 3c 	lwz     r0,60(r1)
    438c:	7c 0b 03 78 	mr      r11,r0
    4390:	91 2b 00 78 	stw     r9,120(r11)
    4394:	48 00 00 50 	b       43e4 <sctp_apply_peer_addr_params+0x16c>
				    msecs_to_jiffies(params->spp_hbinterval);
			} else if (asoc) {
    4398:	80 01 00 40 	lwz     r0,64(r1)
    439c:	2f 80 00 00 	cmpwi   cr7,r0,0
    43a0:	41 9e 00 2c 	beq-    cr7,43cc <sctp_apply_peer_addr_params+0x154>
				asoc->hbinterval =
				    msecs_to_jiffies(params->spp_hbinterval);
    43a4:	80 01 00 38 	lwz     r0,56(r1)
    43a8:	7c 09 03 78 	mr      r9,r0
    43ac:	80 09 00 84 	lwz     r0,132(r9)
    43b0:	7c 03 03 78 	mr      r3,r0
    43b4:	48 00 00 01 	bl      43b4 <sctp_apply_peer_addr_params+0x13c>
    43b8:	7c 69 1b 78 	mr      r9,r3
		    (params->spp_flags & SPP_HB_TIME_IS_ZERO)) {
			if (trans) {
				trans->hbinterval =
				    msecs_to_jiffies(params->spp_hbinterval);
			} else if (asoc) {
				asoc->hbinterval =
    43bc:	80 01 00 40 	lwz     r0,64(r1)
    43c0:	7c 0b 03 78 	mr      r11,r0
    43c4:	91 2b 01 e4 	stw     r9,484(r11)
    43c8:	48 00 00 1c 	b       43e4 <sctp_apply_peer_addr_params+0x16c>
				    msecs_to_jiffies(params->spp_hbinterval);
			} else {
				sp->hbinterval = params->spp_hbinterval;
    43cc:	80 01 00 38 	lwz     r0,56(r1)
    43d0:	7c 0b 03 78 	mr      r11,r0
    43d4:	81 2b 00 84 	lwz     r9,132(r11)
    43d8:	80 01 00 44 	lwz     r0,68(r1)
    43dc:	7c 0b 03 78 	mr      r11,r0
    43e0:	91 2b 01 f8 	stw     r9,504(r11)
			}
		}
	}

	if (hb_change) {
    43e4:	80 01 00 48 	lwz     r0,72(r1)
    43e8:	2f 80 00 00 	cmpwi   cr7,r0,0
    43ec:	41 9e 00 90 	beq-    cr7,447c <sctp_apply_peer_addr_params+0x204>
		if (trans) {
    43f0:	80 01 00 3c 	lwz     r0,60(r1)
    43f4:	2f 80 00 00 	cmpwi   cr7,r0,0
    43f8:	41 9e 00 2c 	beq-    cr7,4424 <sctp_apply_peer_addr_params+0x1ac>
			trans->param_flags =
				(trans->param_flags & ~SPP_HB) | hb_change;
    43fc:	80 01 00 3c 	lwz     r0,60(r1)
    4400:	7c 09 03 78 	mr      r9,r0
    4404:	80 09 00 94 	lwz     r0,148(r9)
    4408:	54 09 00 3a 	rlwinm  r9,r0,0,0,29
    440c:	80 01 00 48 	lwz     r0,72(r1)
    4410:	7d 29 03 78 	or      r9,r9,r0
		}
	}

	if (hb_change) {
		if (trans) {
			trans->param_flags =
    4414:	80 01 00 3c 	lwz     r0,60(r1)
    4418:	7c 0b 03 78 	mr      r11,r0
    441c:	91 2b 00 94 	stw     r9,148(r11)
    4420:	48 00 00 5c 	b       447c <sctp_apply_peer_addr_params+0x204>
				(trans->param_flags & ~SPP_HB) | hb_change;
		} else if (asoc) {
    4424:	80 01 00 40 	lwz     r0,64(r1)
    4428:	2f 80 00 00 	cmpwi   cr7,r0,0
    442c:	41 9e 00 2c 	beq-    cr7,4458 <sctp_apply_peer_addr_params+0x1e0>
			asoc->param_flags =
				(asoc->param_flags & ~SPP_HB) | hb_change;
    4430:	80 01 00 40 	lwz     r0,64(r1)
    4434:	7c 09 03 78 	mr      r9,r0
    4438:	80 09 01 f0 	lwz     r0,496(r9)
    443c:	54 09 00 3a 	rlwinm  r9,r0,0,0,29
    4440:	80 01 00 48 	lwz     r0,72(r1)
    4444:	7d 29 03 78 	or      r9,r9,r0
	if (hb_change) {
		if (trans) {
			trans->param_flags =
				(trans->param_flags & ~SPP_HB) | hb_change;
		} else if (asoc) {
			asoc->param_flags =
    4448:	80 01 00 40 	lwz     r0,64(r1)
    444c:	7c 0b 03 78 	mr      r11,r0
    4450:	91 2b 01 f0 	stw     r9,496(r11)
    4454:	48 00 00 28 	b       447c <sctp_apply_peer_addr_params+0x204>
				(asoc->param_flags & ~SPP_HB) | hb_change;
		} else {
			sp->param_flags =
				(sp->param_flags & ~SPP_HB) | hb_change;
    4458:	80 01 00 44 	lwz     r0,68(r1)
    445c:	7c 09 03 78 	mr      r9,r0
    4460:	80 09 02 0c 	lwz     r0,524(r9)
    4464:	54 09 00 3a 	rlwinm  r9,r0,0,0,29
    4468:	80 01 00 48 	lwz     r0,72(r1)
    446c:	7d 29 03 78 	or      r9,r9,r0
				(trans->param_flags & ~SPP_HB) | hb_change;
		} else if (asoc) {
			asoc->param_flags =
				(asoc->param_flags & ~SPP_HB) | hb_change;
		} else {
			sp->param_flags =
    4470:	80 01 00 44 	lwz     r0,68(r1)
    4474:	7c 0b 03 78 	mr      r11,r0
    4478:	91 2b 02 0c 	stw     r9,524(r11)
	/* When Path MTU discovery is disabled the value specified here will
	 * be the "fixed" path mtu (i.e. the value of the spp_flags field must
	 * include the flag SPP_PMTUD_DISABLE for this field to have any
	 * effect).
	 */
	if ((params->spp_flags & SPP_PMTUD_DISABLE) && params->spp_pathmtu) {
    447c:	80 01 00 38 	lwz     r0,56(r1)
    4480:	7c 09 03 78 	mr      r9,r0
    4484:	80 09 00 92 	lwz     r0,146(r9)
    4488:	54 00 06 f6 	rlwinm  r0,r0,0,27,27
    448c:	2f 80 00 00 	cmpwi   cr7,r0,0
    4490:	41 9e 01 68 	beq-    cr7,45f8 <sctp_apply_peer_addr_params+0x380>
    4494:	80 01 00 38 	lwz     r0,56(r1)
    4498:	7c 0b 03 78 	mr      r11,r0
    449c:	80 0b 00 8a 	lwz     r0,138(r11)
    44a0:	2f 80 00 00 	cmpwi   cr7,r0,0
    44a4:	41 9e 01 54 	beq-    cr7,45f8 <sctp_apply_peer_addr_params+0x380>
		if (trans) {
    44a8:	80 01 00 3c 	lwz     r0,60(r1)
    44ac:	2f 80 00 00 	cmpwi   cr7,r0,0
    44b0:	41 9e 00 28 	beq-    cr7,44d8 <sctp_apply_peer_addr_params+0x260>
			trans->pathmtu = params->spp_pathmtu;
    44b4:	80 01 00 38 	lwz     r0,56(r1)
    44b8:	7c 0b 03 78 	mr      r11,r0
    44bc:	81 2b 00 8a 	lwz     r9,138(r11)
    44c0:	80 01 00 3c 	lwz     r0,60(r1)
    44c4:	7c 0b 03 78 	mr      r11,r0
    44c8:	91 2b 00 90 	stw     r9,144(r11)
			sctp_assoc_sync_pmtu(asoc);
    44cc:	80 61 00 40 	lwz     r3,64(r1)
    44d0:	48 00 00 01 	bl      44d0 <sctp_apply_peer_addr_params+0x258>
    44d4:	48 00 01 24 	b       45f8 <sctp_apply_peer_addr_params+0x380>
		} else if (asoc) {
    44d8:	80 01 00 40 	lwz     r0,64(r1)
    44dc:	2f 80 00 00 	cmpwi   cr7,r0,0
    44e0:	41 9e 01 00 	beq-    cr7,45e0 <sctp_apply_peer_addr_params+0x368>
			asoc->pathmtu = params->spp_pathmtu;
    44e4:	80 01 00 38 	lwz     r0,56(r1)
    44e8:	7c 0b 03 78 	mr      r11,r0
    44ec:	81 2b 00 8a 	lwz     r9,138(r11)
    44f0:	80 01 00 40 	lwz     r0,64(r1)
    44f4:	7c 0b 03 78 	mr      r11,r0
    44f8:	91 2b 01 ec 	stw     r9,492(r11)
			sctp_frag_point(asoc, params->spp_pathmtu);
    44fc:	80 01 00 38 	lwz     r0,56(r1)
    4500:	7c 09 03 78 	mr      r9,r0
    4504:	80 09 00 8a 	lwz     r0,138(r9)
    4508:	81 21 00 40 	lwz     r9,64(r1)
    450c:	91 21 00 10 	stw     r9,16(r1)
    4510:	90 01 00 14 	stw     r0,20(r1)
}

/* Break down data chunks at this point.  */
static inline int sctp_frag_point(const struct sctp_association *asoc, int pmtu)
{
	struct sctp_sock *sp = sctp_sk(asoc->base.sk);
    4514:	80 01 00 10 	lwz     r0,16(r1)
    4518:	7c 0b 03 78 	mr      r11,r0
    451c:	80 0b 00 18 	lwz     r0,24(r11)
    4520:	90 01 00 18 	stw     r0,24(r1)
    4524:	80 01 00 18 	lwz     r0,24(r1)
    4528:	90 01 00 1c 	stw     r0,28(r1)
	int frag = pmtu;
    452c:	80 01 00 14 	lwz     r0,20(r1)
    4530:	90 01 00 20 	stw     r0,32(r1)

	frag -= sp->pf->af->net_header_len;
    4534:	80 01 00 1c 	lwz     r0,28(r1)
    4538:	7c 09 03 78 	mr      r9,r0
    453c:	80 09 01 cc 	lwz     r0,460(r9)
    4540:	7c 0b 03 78 	mr      r11,r0
    4544:	80 0b 00 24 	lwz     r0,36(r11)
    4548:	7c 09 03 78 	mr      r9,r0
    454c:	a0 09 00 68 	lhz     r0,104(r9)
    4550:	54 00 04 3e 	clrlwi  r0,r0,16
    4554:	81 21 00 20 	lwz     r9,32(r1)
    4558:	7c 00 48 50 	subf    r0,r0,r9
    455c:	90 01 00 20 	stw     r0,32(r1)
	frag -= sizeof(struct sctphdr) + sizeof(struct sctp_data_chunk);
    4560:	80 01 00 20 	lwz     r0,32(r1)
    4564:	30 00 ff e4 	addic   r0,r0,-28
    4568:	90 01 00 20 	stw     r0,32(r1)

	if (asoc->user_frag)
    456c:	80 01 00 10 	lwz     r0,16(r1)
    4570:	7c 0b 03 78 	mr      r11,r0
    4574:	80 0b 03 88 	lwz     r0,904(r11)
    4578:	2f 80 00 00 	cmpwi   cr7,r0,0
    457c:	41 9e 00 34 	beq-    cr7,45b0 <sctp_apply_peer_addr_params+0x338>
		frag = min_t(int, frag, asoc->user_frag);
    4580:	80 01 00 20 	lwz     r0,32(r1)
    4584:	90 01 00 24 	stw     r0,36(r1)
    4588:	80 01 00 10 	lwz     r0,16(r1)
    458c:	7c 09 03 78 	mr      r9,r0
    4590:	80 09 03 88 	lwz     r0,904(r9)
    4594:	90 01 00 28 	stw     r0,40(r1)
    4598:	81 21 00 28 	lwz     r9,40(r1)
    459c:	80 01 00 24 	lwz     r0,36(r1)
    45a0:	7f 80 48 00 	cmpw    cr7,r0,r9
    45a4:	40 9d 00 08 	ble-    cr7,45ac <sctp_apply_peer_addr_params+0x334>
    45a8:	7d 20 4b 78 	mr      r0,r9
    45ac:	90 01 00 20 	stw     r0,32(r1)

	frag = min_t(int, frag, SCTP_MAX_CHUNK_LEN);
    45b0:	80 01 00 20 	lwz     r0,32(r1)
    45b4:	90 01 00 2c 	stw     r0,44(r1)
    45b8:	38 00 00 00 	li      r0,0
    45bc:	60 00 ff fc 	ori     r0,r0,65532
    45c0:	90 01 00 30 	stw     r0,48(r1)
    45c4:	81 21 00 30 	lwz     r9,48(r1)
    45c8:	80 01 00 2c 	lwz     r0,44(r1)
    45cc:	7f 80 48 00 	cmpw    cr7,r0,r9
    45d0:	40 9d 00 08 	ble-    cr7,45d8 <sctp_apply_peer_addr_params+0x360>
    45d4:	7d 20 4b 78 	mr      r0,r9
    45d8:	90 01 00 20 	stw     r0,32(r1)
    45dc:	48 00 00 1c 	b       45f8 <sctp_apply_peer_addr_params+0x380>
		} else {
			sp->pathmtu = params->spp_pathmtu;
    45e0:	80 01 00 38 	lwz     r0,56(r1)
    45e4:	7c 0b 03 78 	mr      r11,r0
    45e8:	81 2b 00 8a 	lwz     r9,138(r11)
    45ec:	80 01 00 44 	lwz     r0,68(r1)
    45f0:	7c 0b 03 78 	mr      r11,r0
    45f4:	91 2b 02 00 	stw     r9,512(r11)
		}
	}

	if (pmtud_change) {
    45f8:	80 01 00 4c 	lwz     r0,76(r1)
    45fc:	2f 80 00 00 	cmpwi   cr7,r0,0
    4600:	41 9e 00 ec 	beq-    cr7,46ec <sctp_apply_peer_addr_params+0x474>
		if (trans) {
    4604:	80 01 00 3c 	lwz     r0,60(r1)
    4608:	2f 80 00 00 	cmpwi   cr7,r0,0
    460c:	41 9e 00 88 	beq-    cr7,4694 <sctp_apply_peer_addr_params+0x41c>
			int update = (trans->param_flags & SPP_PMTUD_DISABLE) &&
    4610:	80 01 00 3c 	lwz     r0,60(r1)
    4614:	7c 09 03 78 	mr      r9,r0
    4618:	80 09 00 94 	lwz     r0,148(r9)
    461c:	54 00 06 f6 	rlwinm  r0,r0,0,27,27
    4620:	2f 80 00 00 	cmpwi   cr7,r0,0
    4624:	41 9e 00 24 	beq-    cr7,4648 <sctp_apply_peer_addr_params+0x3d0>
				(params->spp_flags & SPP_PMTUD_ENABLE);
    4628:	80 01 00 38 	lwz     r0,56(r1)
    462c:	7c 0b 03 78 	mr      r11,r0
    4630:	80 0b 00 92 	lwz     r0,146(r11)
    4634:	54 00 07 38 	rlwinm  r0,r0,0,28,28
		}
	}

	if (pmtud_change) {
		if (trans) {
			int update = (trans->param_flags & SPP_PMTUD_DISABLE) &&
    4638:	2f 80 00 00 	cmpwi   cr7,r0,0
    463c:	41 9e 00 0c 	beq-    cr7,4648 <sctp_apply_peer_addr_params+0x3d0>
    4640:	38 00 00 01 	li      r0,1
    4644:	48 00 00 08 	b       464c <sctp_apply_peer_addr_params+0x3d4>
    4648:	38 00 00 00 	li      r0,0
    464c:	90 01 00 0c 	stw     r0,12(r1)
				(params->spp_flags & SPP_PMTUD_ENABLE);
			trans->param_flags =
				(trans->param_flags & ~SPP_PMTUD) | pmtud_change;
    4650:	80 01 00 3c 	lwz     r0,60(r1)
    4654:	7c 09 03 78 	mr      r9,r0
    4658:	80 09 00 94 	lwz     r0,148(r9)
    465c:	54 09 07 74 	rlwinm  r9,r0,0,29,26
    4660:	80 01 00 4c 	lwz     r0,76(r1)
    4664:	7d 29 03 78 	or      r9,r9,r0

	if (pmtud_change) {
		if (trans) {
			int update = (trans->param_flags & SPP_PMTUD_DISABLE) &&
				(params->spp_flags & SPP_PMTUD_ENABLE);
			trans->param_flags =
    4668:	80 01 00 3c 	lwz     r0,60(r1)
    466c:	7c 0b 03 78 	mr      r11,r0
    4670:	91 2b 00 94 	stw     r9,148(r11)
				(trans->param_flags & ~SPP_PMTUD) | pmtud_change;
			if (update) {
    4674:	80 01 00 0c 	lwz     r0,12(r1)
    4678:	2f 80 00 00 	cmpwi   cr7,r0,0
    467c:	41 9e 00 70 	beq-    cr7,46ec <sctp_apply_peer_addr_params+0x474>
				sctp_transport_pmtu(trans);
    4680:	80 61 00 3c 	lwz     r3,60(r1)
    4684:	48 00 00 01 	bl      4684 <sctp_apply_peer_addr_params+0x40c>
				sctp_assoc_sync_pmtu(asoc);
    4688:	80 61 00 40 	lwz     r3,64(r1)
    468c:	48 00 00 01 	bl      468c <sctp_apply_peer_addr_params+0x414>
    4690:	48 00 00 5c 	b       46ec <sctp_apply_peer_addr_params+0x474>
			}
		} else if (asoc) {
    4694:	80 01 00 40 	lwz     r0,64(r1)
    4698:	2f 80 00 00 	cmpwi   cr7,r0,0
    469c:	41 9e 00 2c 	beq-    cr7,46c8 <sctp_apply_peer_addr_params+0x450>
			asoc->param_flags =
				(asoc->param_flags & ~SPP_PMTUD) | pmtud_change;
    46a0:	80 01 00 40 	lwz     r0,64(r1)
    46a4:	7c 09 03 78 	mr      r9,r0
    46a8:	80 09 01 f0 	lwz     r0,496(r9)
    46ac:	54 09 07 74 	rlwinm  r9,r0,0,29,26
    46b0:	80 01 00 4c 	lwz     r0,76(r1)
    46b4:	7d 29 03 78 	or      r9,r9,r0
			if (update) {
				sctp_transport_pmtu(trans);
				sctp_assoc_sync_pmtu(asoc);
			}
		} else if (asoc) {
			asoc->param_flags =
    46b8:	80 01 00 40 	lwz     r0,64(r1)
    46bc:	7c 0b 03 78 	mr      r11,r0
    46c0:	91 2b 01 f0 	stw     r9,496(r11)
    46c4:	48 00 00 28 	b       46ec <sctp_apply_peer_addr_params+0x474>
				(asoc->param_flags & ~SPP_PMTUD) | pmtud_change;
		} else {
			sp->param_flags =
				(sp->param_flags & ~SPP_PMTUD) | pmtud_change;
    46c8:	80 01 00 44 	lwz     r0,68(r1)
    46cc:	7c 09 03 78 	mr      r9,r0
    46d0:	80 09 02 0c 	lwz     r0,524(r9)
    46d4:	54 09 07 74 	rlwinm  r9,r0,0,29,26
    46d8:	80 01 00 4c 	lwz     r0,76(r1)
    46dc:	7d 29 03 78 	or      r9,r9,r0
			}
		} else if (asoc) {
			asoc->param_flags =
				(asoc->param_flags & ~SPP_PMTUD) | pmtud_change;
		} else {
			sp->param_flags =
    46e0:	80 01 00 44 	lwz     r0,68(r1)
    46e4:	7c 0b 03 78 	mr      r11,r0
    46e8:	91 2b 02 0c 	stw     r9,524(r11)

	/* Note that unless the spp_flag is set to SPP_SACKDELAY_ENABLE the
	 * value of this field is ignored.  Note also that a value of zero
	 * indicates the current setting should be left unchanged.
	 */
	if ((params->spp_flags & SPP_SACKDELAY_ENABLE) && params->spp_sackdelay) {
    46ec:	80 01 00 38 	lwz     r0,56(r1)
    46f0:	7c 09 03 78 	mr      r9,r0
    46f4:	80 09 00 92 	lwz     r0,146(r9)
    46f8:	54 00 06 b4 	rlwinm  r0,r0,0,26,26
    46fc:	2f 80 00 00 	cmpwi   cr7,r0,0
    4700:	41 9e 00 98 	beq-    cr7,4798 <sctp_apply_peer_addr_params+0x520>
    4704:	80 01 00 38 	lwz     r0,56(r1)
    4708:	7c 0b 03 78 	mr      r11,r0
    470c:	80 0b 00 8e 	lwz     r0,142(r11)
    4710:	2f 80 00 00 	cmpwi   cr7,r0,0
    4714:	41 9e 00 84 	beq-    cr7,4798 <sctp_apply_peer_addr_params+0x520>
		if (trans) {
    4718:	80 01 00 3c 	lwz     r0,60(r1)
    471c:	2f 80 00 00 	cmpwi   cr7,r0,0
    4720:	41 9e 00 2c 	beq-    cr7,474c <sctp_apply_peer_addr_params+0x4d4>
			trans->sackdelay =
				msecs_to_jiffies(params->spp_sackdelay);
    4724:	80 01 00 38 	lwz     r0,56(r1)
    4728:	7c 09 03 78 	mr      r9,r0
    472c:	80 09 00 8e 	lwz     r0,142(r9)
    4730:	7c 03 03 78 	mr      r3,r0
    4734:	48 00 00 01 	bl      4734 <sctp_apply_peer_addr_params+0x4bc>
    4738:	7c 69 1b 78 	mr      r9,r3
	 * value of this field is ignored.  Note also that a value of zero
	 * indicates the current setting should be left unchanged.
	 */
	if ((params->spp_flags & SPP_SACKDELAY_ENABLE) && params->spp_sackdelay) {
		if (trans) {
			trans->sackdelay =
    473c:	80 01 00 3c 	lwz     r0,60(r1)
    4740:	7c 0b 03 78 	mr      r11,r0
    4744:	91 2b 00 7c 	stw     r9,124(r11)
    4748:	48 00 00 50 	b       4798 <sctp_apply_peer_addr_params+0x520>
				msecs_to_jiffies(params->spp_sackdelay);
		} else if (asoc) {
    474c:	80 01 00 40 	lwz     r0,64(r1)
    4750:	2f 80 00 00 	cmpwi   cr7,r0,0
    4754:	41 9e 00 2c 	beq-    cr7,4780 <sctp_apply_peer_addr_params+0x508>
			asoc->sackdelay =
				msecs_to_jiffies(params->spp_sackdelay);
    4758:	80 01 00 38 	lwz     r0,56(r1)
    475c:	7c 09 03 78 	mr      r9,r0
    4760:	80 09 00 8e 	lwz     r0,142(r9)
    4764:	7c 03 03 78 	mr      r3,r0
    4768:	48 00 00 01 	bl      4768 <sctp_apply_peer_addr_params+0x4f0>
    476c:	7c 69 1b 78 	mr      r9,r3
	if ((params->spp_flags & SPP_SACKDELAY_ENABLE) && params->spp_sackdelay) {
		if (trans) {
			trans->sackdelay =
				msecs_to_jiffies(params->spp_sackdelay);
		} else if (asoc) {
			asoc->sackdelay =
    4770:	80 01 00 40 	lwz     r0,64(r1)
    4774:	7c 0b 03 78 	mr      r11,r0
    4778:	91 2b 01 f4 	stw     r9,500(r11)
    477c:	48 00 00 1c 	b       4798 <sctp_apply_peer_addr_params+0x520>
				msecs_to_jiffies(params->spp_sackdelay);
		} else {
			sp->sackdelay = params->spp_sackdelay;
    4780:	80 01 00 38 	lwz     r0,56(r1)
    4784:	7c 0b 03 78 	mr      r11,r0
    4788:	81 2b 00 8e 	lwz     r9,142(r11)
    478c:	80 01 00 44 	lwz     r0,68(r1)
    4790:	7c 0b 03 78 	mr      r11,r0
    4794:	91 2b 02 04 	stw     r9,516(r11)
		}
	}

	if (sackdelay_change) {
    4798:	80 01 00 50 	lwz     r0,80(r1)
    479c:	2f 80 00 00 	cmpwi   cr7,r0,0
    47a0:	41 9e 00 90 	beq-    cr7,4830 <sctp_apply_peer_addr_params+0x5b8>
		if (trans) {
    47a4:	80 01 00 3c 	lwz     r0,60(r1)
    47a8:	2f 80 00 00 	cmpwi   cr7,r0,0
    47ac:	41 9e 00 2c 	beq-    cr7,47d8 <sctp_apply_peer_addr_params+0x560>
			trans->param_flags =
				(trans->param_flags & ~SPP_SACKDELAY) |
    47b0:	80 01 00 3c 	lwz     r0,60(r1)
    47b4:	7c 09 03 78 	mr      r9,r0
    47b8:	80 09 00 94 	lwz     r0,148(r9)
    47bc:	54 09 06 f0 	rlwinm  r9,r0,0,27,24
    47c0:	80 01 00 50 	lwz     r0,80(r1)
    47c4:	7d 29 03 78 	or      r9,r9,r0
		}
	}

	if (sackdelay_change) {
		if (trans) {
			trans->param_flags =
    47c8:	80 01 00 3c 	lwz     r0,60(r1)
    47cc:	7c 0b 03 78 	mr      r11,r0
    47d0:	91 2b 00 94 	stw     r9,148(r11)
    47d4:	48 00 00 5c 	b       4830 <sctp_apply_peer_addr_params+0x5b8>
				(trans->param_flags & ~SPP_SACKDELAY) |
				sackdelay_change;
		} else if (asoc) {
    47d8:	80 01 00 40 	lwz     r0,64(r1)
    47dc:	2f 80 00 00 	cmpwi   cr7,r0,0
    47e0:	41 9e 00 2c 	beq-    cr7,480c <sctp_apply_peer_addr_params+0x594>
			asoc->param_flags =
				(asoc->param_flags & ~SPP_SACKDELAY) |
    47e4:	80 01 00 40 	lwz     r0,64(r1)
    47e8:	7c 09 03 78 	mr      r9,r0
    47ec:	80 09 01 f0 	lwz     r0,496(r9)
    47f0:	54 09 06 f0 	rlwinm  r9,r0,0,27,24
    47f4:	80 01 00 50 	lwz     r0,80(r1)
    47f8:	7d 29 03 78 	or      r9,r9,r0
		if (trans) {
			trans->param_flags =
				(trans->param_flags & ~SPP_SACKDELAY) |
				sackdelay_change;
		} else if (asoc) {
			asoc->param_flags =
    47fc:	80 01 00 40 	lwz     r0,64(r1)
    4800:	7c 0b 03 78 	mr      r11,r0
    4804:	91 2b 01 f0 	stw     r9,496(r11)
    4808:	48 00 00 28 	b       4830 <sctp_apply_peer_addr_params+0x5b8>
				(asoc->param_flags & ~SPP_SACKDELAY) |
				sackdelay_change;
		} else {
			sp->param_flags =
				(sp->param_flags & ~SPP_SACKDELAY) |
    480c:	80 01 00 44 	lwz     r0,68(r1)
    4810:	7c 09 03 78 	mr      r9,r0
    4814:	80 09 02 0c 	lwz     r0,524(r9)
    4818:	54 09 06 f0 	rlwinm  r9,r0,0,27,24
    481c:	80 01 00 50 	lwz     r0,80(r1)
    4820:	7d 29 03 78 	or      r9,r9,r0
		} else if (asoc) {
			asoc->param_flags =
				(asoc->param_flags & ~SPP_SACKDELAY) |
				sackdelay_change;
		} else {
			sp->param_flags =
    4824:	80 01 00 44 	lwz     r0,68(r1)
    4828:	7c 0b 03 78 	mr      r11,r0
    482c:	91 2b 02 0c 	stw     r9,524(r11)
	}

	/* Note that a value of zero indicates the current setting should be
	   left unchanged.
	 */
	if (params->spp_pathmaxrxt) {
    4830:	80 01 00 38 	lwz     r0,56(r1)
    4834:	7c 09 03 78 	mr      r9,r0
    4838:	a0 09 00 88 	lhz     r0,136(r9)
    483c:	54 00 04 3e 	clrlwi  r0,r0,16
    4840:	2f 80 00 00 	cmpwi   cr7,r0,0
    4844:	41 9e 00 78 	beq-    cr7,48bc <sctp_apply_peer_addr_params+0x644>
		if (trans) {
    4848:	80 01 00 3c 	lwz     r0,60(r1)
    484c:	2f 80 00 00 	cmpwi   cr7,r0,0
    4850:	41 9e 00 24 	beq-    cr7,4874 <sctp_apply_peer_addr_params+0x5fc>
			trans->pathmaxrxt = params->spp_pathmaxrxt;
    4854:	80 01 00 38 	lwz     r0,56(r1)
    4858:	7c 0b 03 78 	mr      r11,r0
    485c:	a0 0b 00 88 	lhz     r0,136(r11)
    4860:	54 09 04 3e 	clrlwi  r9,r0,16
    4864:	80 01 00 3c 	lwz     r0,60(r1)
    4868:	7c 0b 03 78 	mr      r11,r0
    486c:	b1 2b 00 8c 	sth     r9,140(r11)
    4870:	48 00 00 4c 	b       48bc <sctp_apply_peer_addr_params+0x644>
		} else if (asoc) {
    4874:	80 01 00 40 	lwz     r0,64(r1)
    4878:	2f 80 00 00 	cmpwi   cr7,r0,0
    487c:	41 9e 00 24 	beq-    cr7,48a0 <sctp_apply_peer_addr_params+0x628>
			asoc->pathmaxrxt = params->spp_pathmaxrxt;
    4880:	80 01 00 38 	lwz     r0,56(r1)
    4884:	7c 09 03 78 	mr      r9,r0
    4888:	a0 09 00 88 	lhz     r0,136(r9)
    488c:	54 09 04 3e 	clrlwi  r9,r0,16
    4890:	80 01 00 40 	lwz     r0,64(r1)
    4894:	7c 0b 03 78 	mr      r11,r0
    4898:	b1 2b 01 e8 	sth     r9,488(r11)
    489c:	48 00 00 20 	b       48bc <sctp_apply_peer_addr_params+0x644>
		} else {
			sp->pathmaxrxt = params->spp_pathmaxrxt;
    48a0:	80 01 00 38 	lwz     r0,56(r1)
    48a4:	7c 09 03 78 	mr      r9,r0
    48a8:	a0 09 00 88 	lhz     r0,136(r9)
    48ac:	54 09 04 3e 	clrlwi  r9,r0,16
    48b0:	80 01 00 44 	lwz     r0,68(r1)
    48b4:	7c 0b 03 78 	mr      r11,r0
    48b8:	b1 2b 01 fc 	sth     r9,508(r11)
		}
	}

	return 0;
    48bc:	38 00 00 00 	li      r0,0
}
    48c0:	7c 03 03 78 	mr      r3,r0
    48c4:	80 01 00 64 	lwz     r0,100(r1)
    48c8:	7c 08 03 a6 	mtlr    r0
    48cc:	38 21 00 60 	addi    r1,r1,96
    48d0:	4e 80 00 20 	blr

000048d4 <sctp_setsockopt_peer_addr_params>:

static int sctp_setsockopt_peer_addr_params(struct sock *sk,
					    char __user *optval,
					    unsigned int optlen)
{
    48d4:	94 21 ff 00 	stwu    r1,-256(r1)
    48d8:	7c 08 02 a6 	mflr    r0
    48dc:	90 01 01 04 	stw     r0,260(r1)
    48e0:	90 61 00 e8 	stw     r3,232(r1)
    48e4:	90 81 00 ec 	stw     r4,236(r1)
    48e8:	90 a1 00 f0 	stw     r5,240(r1)
	struct sctp_paddrparams  params;
	struct sctp_transport   *trans = NULL;
    48ec:	38 00 00 00 	li      r0,0
    48f0:	90 01 00 08 	stw     r0,8(r1)
	struct sctp_association *asoc = NULL;
    48f4:	38 00 00 00 	li      r0,0
    48f8:	90 01 00 0c 	stw     r0,12(r1)
    48fc:	80 01 00 e8 	lwz     r0,232(r1)
    4900:	90 01 00 2c 	stw     r0,44(r1)
    4904:	80 01 00 2c 	lwz     r0,44(r1)
	struct sctp_sock        *sp = sctp_sk(sk);
    4908:	90 01 00 10 	stw     r0,16(r1)
	int error;
	int hb_change, pmtud_change, sackdelay_change;

	if (optlen != sizeof(struct sctp_paddrparams))
    490c:	80 01 00 f0 	lwz     r0,240(r1)
    4910:	2f 80 00 98 	cmpwi   cr7,r0,152
    4914:	41 9e 00 0c 	beq-    cr7,4920 <sctp_setsockopt_peer_addr_params+0x4c>
		return - EINVAL;
    4918:	38 00 ff ea 	li      r0,-22
    491c:	48 00 03 58 	b       4c74 <sctp_setsockopt_peer_addr_params+0x3a0>

	if (copy_from_user(&params, optval, optlen))
    4920:	38 01 00 50 	addi    r0,r1,80
	struct sctp_sock        *sp = sctp_sk(sk);
	int error;
	int hb_change, pmtud_change, sackdelay_change;

	if (optlen != sizeof(struct sctp_paddrparams))
		return - EINVAL;
    4924:	90 01 00 30 	stw     r0,48(r1)
    4928:	80 01 00 ec 	lwz     r0,236(r1)
    492c:	90 01 00 34 	stw     r0,52(r1)
    4930:	80 01 00 f0 	lwz     r0,240(r1)
    4934:	90 01 00 38 	stw     r0,56(r1)
static inline unsigned long copy_from_user(void *to,
		const void __user *from, unsigned long n)
{
	unsigned long over;

	if (access_ok(VERIFY_READ, from, n))
    4938:	81 21 00 34 	lwz     r9,52(r1)
    493c:	7c 40 13 78 	mr      r0,r2
    4940:	7c 0a 03 78 	mr      r10,r0
    4944:	80 0a 01 d4 	lwz     r0,468(r10)
    4948:	7f 89 00 40 	cmplw   cr7,r9,r0
    494c:	41 9d 00 3c 	bgt-    cr7,4988 <sctp_setsockopt_peer_addr_params+0xb4>
    4950:	80 01 00 38 	lwz     r0,56(r1)
    4954:	2f 80 00 00 	cmpwi   cr7,r0,0
    4958:	41 9e 00 28 	beq-    cr7,4980 <sctp_setsockopt_peer_addr_params+0xac>
    495c:	80 01 00 38 	lwz     r0,56(r1)
    4960:	31 20 ff ff 	addic   r9,r0,-1
    4964:	7c 40 13 78 	mr      r0,r2
    4968:	7c 0a 03 78 	mr      r10,r0
    496c:	81 6a 01 d4 	lwz     r11,468(r10)
    4970:	80 01 00 34 	lwz     r0,52(r1)
    4974:	7c 00 58 50 	subf    r0,r0,r11
    4978:	7f 89 00 40 	cmplw   cr7,r9,r0
    497c:	41 9d 00 0c 	bgt-    cr7,4988 <sctp_setsockopt_peer_addr_params+0xb4>
    4980:	38 00 00 01 	li      r0,1
    4984:	48 00 00 08 	b       498c <sctp_setsockopt_peer_addr_params+0xb8>
    4988:	38 00 00 00 	li      r0,0
    498c:	2f 80 00 00 	cmpwi   cr7,r0,0
    4990:	41 9e 00 1c 	beq-    cr7,49ac <sctp_setsockopt_peer_addr_params+0xd8>
		return __copy_tofrom_user((__force void __user *)to, from, n);
    4994:	80 61 00 30 	lwz     r3,48(r1)
    4998:	80 81 00 34 	lwz     r4,52(r1)
    499c:	80 a1 00 38 	lwz     r5,56(r1)
    49a0:	48 00 00 01 	bl      49a0 <sctp_setsockopt_peer_addr_params+0xcc>
    49a4:	7c 60 1b 78 	mr      r0,r3
    49a8:	48 00 00 60 	b       4a08 <sctp_setsockopt_peer_addr_params+0x134>
	if ((unsigned long)from < TASK_SIZE) {
    49ac:	81 21 00 34 	lwz     r9,52(r1)
    49b0:	3c 00 bf ff 	lis     r0,-16385
    49b4:	60 00 ff ff 	ori     r0,r0,65535
    49b8:	7f 89 00 40 	cmplw   cr7,r9,r0
    49bc:	41 9d 00 48 	bgt-    cr7,4a04 <sctp_setsockopt_peer_addr_params+0x130>
		over = (unsigned long)from + n - TASK_SIZE;
    49c0:	81 21 00 34 	lwz     r9,52(r1)
    49c4:	80 01 00 38 	lwz     r0,56(r1)
    49c8:	7c 09 02 14 	add     r0,r9,r0
    49cc:	3d 60 40 00 	lis     r11,16384
    49d0:	7c 00 5a 14 	add     r0,r0,r11
    49d4:	90 01 00 3c 	stw     r0,60(r1)
		return __copy_tofrom_user((__force void __user *)to, from,
    49d8:	81 21 00 38 	lwz     r9,56(r1)
    49dc:	80 01 00 3c 	lwz     r0,60(r1)
    49e0:	7c 00 48 50 	subf    r0,r0,r9
    49e4:	80 61 00 30 	lwz     r3,48(r1)
    49e8:	80 81 00 34 	lwz     r4,52(r1)
    49ec:	7c 05 03 78 	mr      r5,r0
    49f0:	48 00 00 01 	bl      49f0 <sctp_setsockopt_peer_addr_params+0x11c>
    49f4:	7c 69 1b 78 	mr      r9,r3
    49f8:	80 01 00 3c 	lwz     r0,60(r1)
    49fc:	7c 09 02 14 	add     r0,r9,r0
    4a00:	48 00 00 08 	b       4a08 <sctp_setsockopt_peer_addr_params+0x134>
				n - over) + over;
	}
	return n;
    4a04:	80 01 00 38 	lwz     r0,56(r1)

	if (copy_from_user(&params, optval, optlen))
    4a08:	2f 80 00 00 	cmpwi   cr7,r0,0
    4a0c:	41 9e 00 0c 	beq-    cr7,4a18 <sctp_setsockopt_peer_addr_params+0x144>
		return -EFAULT;
    4a10:	38 00 ff f2 	li      r0,-14
    4a14:	48 00 02 60 	b       4c74 <sctp_setsockopt_peer_addr_params+0x3a0>

	/* Validate flags and value parameters. */
	hb_change        = params.spp_flags & SPP_HB;
    4a18:	80 01 00 e2 	lwz     r0,226(r1)
    4a1c:	54 00 07 be 	clrlwi  r0,r0,30
    4a20:	90 01 00 14 	stw     r0,20(r1)
	pmtud_change     = params.spp_flags & SPP_PMTUD;
    4a24:	80 01 00 e2 	lwz     r0,226(r1)
    4a28:	54 00 06 f8 	rlwinm  r0,r0,0,27,28
    4a2c:	90 01 00 18 	stw     r0,24(r1)
	sackdelay_change = params.spp_flags & SPP_SACKDELAY;
    4a30:	80 01 00 e2 	lwz     r0,226(r1)
    4a34:	54 00 06 74 	rlwinm  r0,r0,0,25,26
    4a38:	90 01 00 1c 	stw     r0,28(r1)

	if (hb_change        == SPP_HB ||
    4a3c:	80 01 00 14 	lwz     r0,20(r1)
    4a40:	2f 80 00 03 	cmpwi   cr7,r0,3
    4a44:	41 9e 00 40 	beq-    cr7,4a84 <sctp_setsockopt_peer_addr_params+0x1b0>
    4a48:	80 01 00 18 	lwz     r0,24(r1)
    4a4c:	2f 80 00 18 	cmpwi   cr7,r0,24
    4a50:	41 9e 00 34 	beq-    cr7,4a84 <sctp_setsockopt_peer_addr_params+0x1b0>
	    pmtud_change     == SPP_PMTUD ||
    4a54:	80 01 00 1c 	lwz     r0,28(r1)
    4a58:	2f 80 00 60 	cmpwi   cr7,r0,96
    4a5c:	41 9e 00 28 	beq-    cr7,4a84 <sctp_setsockopt_peer_addr_params+0x1b0>
	    sackdelay_change == SPP_SACKDELAY ||
	    params.spp_sackdelay > 500 ||
    4a60:	80 01 00 de 	lwz     r0,222(r1)
	pmtud_change     = params.spp_flags & SPP_PMTUD;
	sackdelay_change = params.spp_flags & SPP_SACKDELAY;

	if (hb_change        == SPP_HB ||
	    pmtud_change     == SPP_PMTUD ||
	    sackdelay_change == SPP_SACKDELAY ||
    4a64:	2b 80 01 f4 	cmplwi  cr7,r0,500
    4a68:	41 9d 00 1c 	bgt-    cr7,4a84 <sctp_setsockopt_peer_addr_params+0x1b0>
	    params.spp_sackdelay > 500 ||
	    (params.spp_pathmtu &&
    4a6c:	80 01 00 da 	lwz     r0,218(r1)
	sackdelay_change = params.spp_flags & SPP_SACKDELAY;

	if (hb_change        == SPP_HB ||
	    pmtud_change     == SPP_PMTUD ||
	    sackdelay_change == SPP_SACKDELAY ||
	    params.spp_sackdelay > 500 ||
    4a70:	2f 80 00 00 	cmpwi   cr7,r0,0
    4a74:	41 9e 00 18 	beq-    cr7,4a8c <sctp_setsockopt_peer_addr_params+0x1b8>
	    (params.spp_pathmtu &&
	     params.spp_pathmtu < SCTP_DEFAULT_MINSEGMENT))
    4a78:	80 01 00 da 	lwz     r0,218(r1)

	if (hb_change        == SPP_HB ||
	    pmtud_change     == SPP_PMTUD ||
	    sackdelay_change == SPP_SACKDELAY ||
	    params.spp_sackdelay > 500 ||
	    (params.spp_pathmtu &&
    4a7c:	2b 80 01 ff 	cmplwi  cr7,r0,511
    4a80:	41 9d 00 0c 	bgt-    cr7,4a8c <sctp_setsockopt_peer_addr_params+0x1b8>
	     params.spp_pathmtu < SCTP_DEFAULT_MINSEGMENT))
		return -EINVAL;
    4a84:	38 00 ff ea 	li      r0,-22
    4a88:	48 00 01 ec 	b       4c74 <sctp_setsockopt_peer_addr_params+0x3a0>

	/* If an address other than INADDR_ANY is specified, and
	 * no transport is found, then the request is invalid.
	 */
	if (!sctp_is_any(sk, ( union sctp_addr *)&params.spp_address)) {
    4a8c:	38 01 00 50 	addi    r0,r1,80
    4a90:	30 00 00 04 	addic   r0,r0,4
    4a94:	80 61 00 e8 	lwz     r3,232(r1)
    4a98:	7c 04 03 78 	mr      r4,r0
    4a9c:	48 00 00 01 	bl      4a9c <sctp_setsockopt_peer_addr_params+0x1c8>
    4aa0:	7c 60 1b 78 	mr      r0,r3
    4aa4:	2f 80 00 00 	cmpwi   cr7,r0,0
    4aa8:	40 9e 00 38 	bne-    cr7,4ae0 <sctp_setsockopt_peer_addr_params+0x20c>
		trans = sctp_addr_id2transport(sk, &params.spp_address,
    4aac:	80 01 00 50 	lwz     r0,80(r1)
    4ab0:	39 21 00 50 	addi    r9,r1,80
    4ab4:	39 29 00 04 	addi    r9,r9,4
    4ab8:	80 61 00 e8 	lwz     r3,232(r1)
    4abc:	7d 24 4b 78 	mr      r4,r9
    4ac0:	7c 05 03 78 	mr      r5,r0
    4ac4:	4b ff b7 1d 	bl      1e0 <sctp_addr_id2transport>
    4ac8:	90 61 00 08 	stw     r3,8(r1)
					       params.spp_assoc_id);
		if (!trans)
    4acc:	80 01 00 08 	lwz     r0,8(r1)
    4ad0:	2f 80 00 00 	cmpwi   cr7,r0,0
    4ad4:	40 9e 00 0c 	bne-    cr7,4ae0 <sctp_setsockopt_peer_addr_params+0x20c>
			return -EINVAL;
    4ad8:	38 00 ff ea 	li      r0,-22
    4adc:	48 00 01 98 	b       4c74 <sctp_setsockopt_peer_addr_params+0x3a0>

	/* Get association, if assoc_id != 0 and the socket is a one
	 * to many style socket, and an association was not found, then
	 * the id was invalid.
	 */
	asoc = sctp_id2assoc(sk, params.spp_assoc_id);
    4ae0:	80 01 00 50 	lwz     r0,80(r1)
    4ae4:	80 61 00 e8 	lwz     r3,232(r1)
    4ae8:	7c 04 03 78 	mr      r4,r0
    4aec:	48 00 00 01 	bl      4aec <sctp_setsockopt_peer_addr_params+0x218>
    4af0:	90 61 00 0c 	stw     r3,12(r1)
	if (!asoc && params.spp_assoc_id && sctp_style(sk, UDP))
    4af4:	80 01 00 0c 	lwz     r0,12(r1)
    4af8:	2f 80 00 00 	cmpwi   cr7,r0,0
    4afc:	40 9e 00 54 	bne-    cr7,4b50 <sctp_setsockopt_peer_addr_params+0x27c>
    4b00:	80 01 00 50 	lwz     r0,80(r1)
    4b04:	2f 80 00 00 	cmpwi   cr7,r0,0
    4b08:	41 9e 00 48 	beq-    cr7,4b50 <sctp_setsockopt_peer_addr_params+0x27c>
    4b0c:	80 01 00 e8 	lwz     r0,232(r1)
    4b10:	90 01 00 40 	stw     r0,64(r1)
    4b14:	38 00 00 00 	li      r0,0
    4b18:	90 01 00 44 	stw     r0,68(r1)
    4b1c:	80 01 00 40 	lwz     r0,64(r1)
    4b20:	90 01 00 48 	stw     r0,72(r1)
    4b24:	80 01 00 48 	lwz     r0,72(r1)

/* Is a socket of this style? */
#define sctp_style(sk, style) __sctp_style((sk), (SCTP_SOCKET_##style))
static inline int __sctp_style(const struct sock *sk, sctp_socket_type_t style)
{
	return sctp_sk(sk)->type == style;
    4b28:	7c 09 03 78 	mr      r9,r0
    4b2c:	80 09 01 c8 	lwz     r0,456(r9)
    4b30:	81 21 00 44 	lwz     r9,68(r1)
    4b34:	7f 89 00 00 	cmpw    cr7,r9,r0
    4b38:	7c 00 00 26 	mfcr    r0
    4b3c:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
    4b40:	2f 80 00 00 	cmpwi   cr7,r0,0
    4b44:	41 9e 00 0c 	beq-    cr7,4b50 <sctp_setsockopt_peer_addr_params+0x27c>
		return -EINVAL;
    4b48:	38 00 ff ea 	li      r0,-22
    4b4c:	48 00 01 28 	b       4c74 <sctp_setsockopt_peer_addr_params+0x3a0>

	/* Heartbeat demand can only be sent on a transport or
	 * association, but not a socket.
	 */
	if (params.spp_flags & SPP_HB_DEMAND && !trans && !asoc)
    4b50:	80 01 00 e2 	lwz     r0,226(r1)
    4b54:	54 00 07 7a 	rlwinm  r0,r0,0,29,29
    4b58:	2f 80 00 00 	cmpwi   cr7,r0,0
    4b5c:	41 9e 00 24 	beq-    cr7,4b80 <sctp_setsockopt_peer_addr_params+0x2ac>
    4b60:	80 01 00 08 	lwz     r0,8(r1)
    4b64:	2f 80 00 00 	cmpwi   cr7,r0,0
    4b68:	40 9e 00 18 	bne-    cr7,4b80 <sctp_setsockopt_peer_addr_params+0x2ac>
    4b6c:	80 01 00 0c 	lwz     r0,12(r1)
    4b70:	2f 80 00 00 	cmpwi   cr7,r0,0
    4b74:	40 9e 00 0c 	bne-    cr7,4b80 <sctp_setsockopt_peer_addr_params+0x2ac>
		return -EINVAL;
    4b78:	38 00 ff ea 	li      r0,-22
    4b7c:	48 00 00 f8 	b       4c74 <sctp_setsockopt_peer_addr_params+0x3a0>

	/* Process parameters. */
	error = sctp_apply_peer_addr_params(&params, trans, asoc, sp,
    4b80:	38 01 00 50 	addi    r0,r1,80
    4b84:	7c 03 03 78 	mr      r3,r0
    4b88:	80 81 00 08 	lwz     r4,8(r1)
    4b8c:	80 a1 00 0c 	lwz     r5,12(r1)
    4b90:	80 c1 00 10 	lwz     r6,16(r1)
    4b94:	80 e1 00 14 	lwz     r7,20(r1)
    4b98:	81 01 00 18 	lwz     r8,24(r1)
    4b9c:	81 21 00 1c 	lwz     r9,28(r1)
    4ba0:	4b ff f6 d9 	bl      4278 <sctp_apply_peer_addr_params>
    4ba4:	90 61 00 20 	stw     r3,32(r1)
					    hb_change, pmtud_change,
					    sackdelay_change);

	if (error)
    4ba8:	80 01 00 20 	lwz     r0,32(r1)
    4bac:	2f 80 00 00 	cmpwi   cr7,r0,0
    4bb0:	41 9e 00 0c 	beq-    cr7,4bbc <sctp_setsockopt_peer_addr_params+0x2e8>
		return error;
    4bb4:	80 01 00 20 	lwz     r0,32(r1)
    4bb8:	48 00 00 bc 	b       4c74 <sctp_setsockopt_peer_addr_params+0x3a0>

	/* If changes are for association, also apply parameters to each
	 * transport.
	 */
	if (!trans && asoc) {
    4bbc:	80 01 00 08 	lwz     r0,8(r1)
    4bc0:	2f 80 00 00 	cmpwi   cr7,r0,0
    4bc4:	40 9e 00 ac 	bne-    cr7,4c70 <sctp_setsockopt_peer_addr_params+0x39c>
    4bc8:	80 01 00 0c 	lwz     r0,12(r1)
    4bcc:	2f 80 00 00 	cmpwi   cr7,r0,0
    4bd0:	41 9e 00 a0 	beq-    cr7,4c70 <sctp_setsockopt_peer_addr_params+0x39c>
		list_for_each_entry(trans, &asoc->peer.transport_addr_list,
    4bd4:	80 01 00 0c 	lwz     r0,12(r1)
    4bd8:	7c 0a 03 78 	mr      r10,r0
    4bdc:	80 0a 00 e8 	lwz     r0,232(r10)
    4be0:	90 01 00 24 	stw     r0,36(r1)
    4be4:	80 01 00 24 	lwz     r0,36(r1)
    4be8:	90 01 00 08 	stw     r0,8(r1)
    4bec:	48 00 00 40 	b       4c2c <sctp_setsockopt_peer_addr_params+0x358>
				transports) {
			sctp_apply_peer_addr_params(&params, trans, asoc, sp,
    4bf0:	38 01 00 50 	addi    r0,r1,80
    4bf4:	7c 03 03 78 	mr      r3,r0
    4bf8:	80 81 00 08 	lwz     r4,8(r1)
    4bfc:	80 a1 00 0c 	lwz     r5,12(r1)
    4c00:	80 c1 00 10 	lwz     r6,16(r1)
    4c04:	80 e1 00 14 	lwz     r7,20(r1)
    4c08:	81 01 00 18 	lwz     r8,24(r1)
    4c0c:	81 21 00 1c 	lwz     r9,28(r1)
    4c10:	4b ff f6 69 	bl      4278 <sctp_apply_peer_addr_params>

	/* If changes are for association, also apply parameters to each
	 * transport.
	 */
	if (!trans && asoc) {
		list_for_each_entry(trans, &asoc->peer.transport_addr_list,
    4c14:	80 01 00 08 	lwz     r0,8(r1)
    4c18:	7c 0b 03 78 	mr      r11,r0
    4c1c:	80 0b 00 00 	lwz     r0,0(r11)
    4c20:	90 01 00 28 	stw     r0,40(r1)
    4c24:	80 01 00 28 	lwz     r0,40(r1)
    4c28:	90 01 00 08 	stw     r0,8(r1)
    4c2c:	80 01 00 08 	lwz     r0,8(r1)
    4c30:	7c 09 03 78 	mr      r9,r0
    4c34:	80 09 00 00 	lwz     r0,0(r9)
    4c38:	90 01 00 4c 	stw     r0,76(r1)
#define ARCH_HAS_PREFETCHW
#define ARCH_HAS_SPINLOCK_PREFETCH

static inline void prefetch(const void *x)
{
	if (unlikely(!x))
    4c3c:	80 01 00 4c 	lwz     r0,76(r1)
    4c40:	2f 80 00 00 	cmpwi   cr7,r0,0
    4c44:	7c 00 00 26 	mfcr    r0
    4c48:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
    4c4c:	2f 80 00 00 	cmpwi   cr7,r0,0
    4c50:	40 9e 00 0c 	bne-    cr7,4c5c <sctp_setsockopt_peer_addr_params+0x388>
		return;

	__asm__ __volatile__ ("dcbt 0,%0" : : "r" (x));
    4c54:	80 01 00 4c 	lwz     r0,76(r1)
    4c58:	7c 00 02 2c 	dcbt    r0,r0
    4c5c:	81 21 00 08 	lwz     r9,8(r1)
    4c60:	80 01 00 0c 	lwz     r0,12(r1)
    4c64:	30 00 00 e8 	addic   r0,r0,232
    4c68:	7f 89 00 00 	cmpw    cr7,r9,r0
    4c6c:	40 9e ff 84 	bne+    cr7,4bf0 <sctp_setsockopt_peer_addr_params+0x31c>
						    hb_change, pmtud_change,
						    sackdelay_change);
		}
	}

	return 0;
    4c70:	38 00 00 00 	li      r0,0
}
    4c74:	7c 03 03 78 	mr      r3,r0
    4c78:	80 01 01 04 	lwz     r0,260(r1)
    4c7c:	7c 08 03 a6 	mtlr    r0
    4c80:	38 21 01 00 	addi    r1,r1,256
    4c84:	4e 80 00 20 	blr

00004c88 <sctp_setsockopt_delayed_ack>:
 *    value to 1 will disable the delayed sack algorithm.
 */

static int sctp_setsockopt_delayed_ack(struct sock *sk,
				       char __user *optval, unsigned int optlen)
{
    4c88:	94 21 ff 80 	stwu    r1,-128(r1)
    4c8c:	7c 08 02 a6 	mflr    r0
    4c90:	90 01 00 84 	stw     r0,132(r1)
    4c94:	90 61 00 68 	stw     r3,104(r1)
    4c98:	90 81 00 6c 	stw     r4,108(r1)
    4c9c:	90 a1 00 70 	stw     r5,112(r1)
	struct sctp_sack_info    params;
	struct sctp_transport   *trans = NULL;
    4ca0:	38 00 00 00 	li      r0,0
    4ca4:	90 01 00 08 	stw     r0,8(r1)
	struct sctp_association *asoc = NULL;
    4ca8:	38 00 00 00 	li      r0,0
    4cac:	90 01 00 0c 	stw     r0,12(r1)
    4cb0:	80 01 00 68 	lwz     r0,104(r1)
    4cb4:	90 01 00 1c 	stw     r0,28(r1)
    4cb8:	80 01 00 1c 	lwz     r0,28(r1)
	struct sctp_sock        *sp = sctp_sk(sk);
    4cbc:	90 01 00 10 	stw     r0,16(r1)

	if (optlen == sizeof(struct sctp_sack_info)) {
    4cc0:	80 01 00 70 	lwz     r0,112(r1)
    4cc4:	2f 80 00 0c 	cmpwi   cr7,r0,12
    4cc8:	40 9e 01 1c 	bne-    cr7,4de4 <sctp_setsockopt_delayed_ack+0x15c>
		if (copy_from_user(&params, optval, optlen))
    4ccc:	38 01 00 50 	addi    r0,r1,80
	struct sctp_sack_info    params;
	struct sctp_transport   *trans = NULL;
	struct sctp_association *asoc = NULL;
	struct sctp_sock        *sp = sctp_sk(sk);

	if (optlen == sizeof(struct sctp_sack_info)) {
    4cd0:	90 01 00 20 	stw     r0,32(r1)
    4cd4:	80 01 00 6c 	lwz     r0,108(r1)
    4cd8:	90 01 00 24 	stw     r0,36(r1)
    4cdc:	80 01 00 70 	lwz     r0,112(r1)
    4ce0:	90 01 00 28 	stw     r0,40(r1)
static inline unsigned long copy_from_user(void *to,
		const void __user *from, unsigned long n)
{
	unsigned long over;

	if (access_ok(VERIFY_READ, from, n))
    4ce4:	81 21 00 24 	lwz     r9,36(r1)
    4ce8:	7c 40 13 78 	mr      r0,r2
    4cec:	7c 0a 03 78 	mr      r10,r0
    4cf0:	80 0a 01 d4 	lwz     r0,468(r10)
    4cf4:	7f 89 00 40 	cmplw   cr7,r9,r0
    4cf8:	41 9d 00 3c 	bgt-    cr7,4d34 <sctp_setsockopt_delayed_ack+0xac>
    4cfc:	80 01 00 28 	lwz     r0,40(r1)
    4d00:	2f 80 00 00 	cmpwi   cr7,r0,0
    4d04:	41 9e 00 28 	beq-    cr7,4d2c <sctp_setsockopt_delayed_ack+0xa4>
    4d08:	80 01 00 28 	lwz     r0,40(r1)
    4d0c:	31 20 ff ff 	addic   r9,r0,-1
    4d10:	7c 40 13 78 	mr      r0,r2
    4d14:	7c 0a 03 78 	mr      r10,r0
    4d18:	81 6a 01 d4 	lwz     r11,468(r10)
    4d1c:	80 01 00 24 	lwz     r0,36(r1)
    4d20:	7c 00 58 50 	subf    r0,r0,r11
    4d24:	7f 89 00 40 	cmplw   cr7,r9,r0
    4d28:	41 9d 00 0c 	bgt-    cr7,4d34 <sctp_setsockopt_delayed_ack+0xac>
    4d2c:	38 00 00 01 	li      r0,1
    4d30:	48 00 00 08 	b       4d38 <sctp_setsockopt_delayed_ack+0xb0>
    4d34:	38 00 00 00 	li      r0,0
    4d38:	2f 80 00 00 	cmpwi   cr7,r0,0
    4d3c:	41 9e 00 1c 	beq-    cr7,4d58 <sctp_setsockopt_delayed_ack+0xd0>
		return __copy_tofrom_user((__force void __user *)to, from, n);
    4d40:	80 61 00 20 	lwz     r3,32(r1)
    4d44:	80 81 00 24 	lwz     r4,36(r1)
    4d48:	80 a1 00 28 	lwz     r5,40(r1)
    4d4c:	48 00 00 01 	bl      4d4c <sctp_setsockopt_delayed_ack+0xc4>
    4d50:	7c 60 1b 78 	mr      r0,r3
    4d54:	48 00 00 60 	b       4db4 <sctp_setsockopt_delayed_ack+0x12c>
	if ((unsigned long)from < TASK_SIZE) {
    4d58:	81 21 00 24 	lwz     r9,36(r1)
    4d5c:	3c 00 bf ff 	lis     r0,-16385
    4d60:	60 00 ff ff 	ori     r0,r0,65535
    4d64:	7f 89 00 40 	cmplw   cr7,r9,r0
    4d68:	41 9d 00 48 	bgt-    cr7,4db0 <sctp_setsockopt_delayed_ack+0x128>
		over = (unsigned long)from + n - TASK_SIZE;
    4d6c:	81 21 00 24 	lwz     r9,36(r1)
    4d70:	80 01 00 28 	lwz     r0,40(r1)
    4d74:	7c 09 02 14 	add     r0,r9,r0
    4d78:	3d 60 40 00 	lis     r11,16384
    4d7c:	7c 00 5a 14 	add     r0,r0,r11
    4d80:	90 01 00 2c 	stw     r0,44(r1)
		return __copy_tofrom_user((__force void __user *)to, from,
    4d84:	81 21 00 28 	lwz     r9,40(r1)
    4d88:	80 01 00 2c 	lwz     r0,44(r1)
    4d8c:	7c 00 48 50 	subf    r0,r0,r9
    4d90:	80 61 00 20 	lwz     r3,32(r1)
    4d94:	80 81 00 24 	lwz     r4,36(r1)
    4d98:	7c 05 03 78 	mr      r5,r0
    4d9c:	48 00 00 01 	bl      4d9c <sctp_setsockopt_delayed_ack+0x114>
    4da0:	7c 69 1b 78 	mr      r9,r3
    4da4:	80 01 00 2c 	lwz     r0,44(r1)
    4da8:	7c 09 02 14 	add     r0,r9,r0
    4dac:	48 00 00 08 	b       4db4 <sctp_setsockopt_delayed_ack+0x12c>
				n - over) + over;
	}
	return n;
    4db0:	80 01 00 28 	lwz     r0,40(r1)
		if (copy_from_user(&params, optval, optlen))
    4db4:	2f 80 00 00 	cmpwi   cr7,r0,0
    4db8:	41 9e 00 0c 	beq-    cr7,4dc4 <sctp_setsockopt_delayed_ack+0x13c>
			return -EFAULT;
    4dbc:	38 00 ff f2 	li      r0,-14
    4dc0:	48 00 04 90 	b       5250 <sctp_setsockopt_delayed_ack+0x5c8>

		if (params.sack_delay == 0 && params.sack_freq == 0)
    4dc4:	80 01 00 54 	lwz     r0,84(r1)
    4dc8:	2f 80 00 00 	cmpwi   cr7,r0,0
    4dcc:	40 9e 01 60 	bne-    cr7,4f2c <sctp_setsockopt_delayed_ack+0x2a4>
    4dd0:	80 01 00 58 	lwz     r0,88(r1)
    4dd4:	2f 80 00 00 	cmpwi   cr7,r0,0
    4dd8:	40 9e 01 54 	bne-    cr7,4f2c <sctp_setsockopt_delayed_ack+0x2a4>
			return 0;
    4ddc:	38 00 00 00 	li      r0,0
    4de0:	48 00 04 70 	b       5250 <sctp_setsockopt_delayed_ack+0x5c8>
	} else if (optlen == sizeof(struct sctp_assoc_value)) {
    4de4:	80 01 00 70 	lwz     r0,112(r1)
    4de8:	2f 80 00 08 	cmpwi   cr7,r0,8
    4dec:	40 9e 01 38 	bne-    cr7,4f24 <sctp_setsockopt_delayed_ack+0x29c>
		pr_warn("Use of struct sctp_assoc_value in delayed_ack socket option deprecated\n");
    4df0:	3c 00 00 00 	lis     r0,0
    4df4:	30 60 00 2c 	addic   r3,r0,44
    4df8:	48 00 00 01 	bl      4df8 <sctp_setsockopt_delayed_ack+0x170>
		pr_warn("Use struct sctp_sack_info instead\n");
    4dfc:	3c 00 00 00 	lis     r0,0
    4e00:	30 60 00 80 	addic   r3,r0,128
    4e04:	48 00 00 01 	bl      4e04 <sctp_setsockopt_delayed_ack+0x17c>
		if (copy_from_user(&params, optval, optlen))
    4e08:	38 01 00 50 	addi    r0,r1,80

		if (params.sack_delay == 0 && params.sack_freq == 0)
			return 0;
	} else if (optlen == sizeof(struct sctp_assoc_value)) {
		pr_warn("Use of struct sctp_assoc_value in delayed_ack socket option deprecated\n");
		pr_warn("Use struct sctp_sack_info instead\n");
    4e0c:	90 01 00 30 	stw     r0,48(r1)
    4e10:	80 01 00 6c 	lwz     r0,108(r1)
    4e14:	90 01 00 34 	stw     r0,52(r1)
    4e18:	80 01 00 70 	lwz     r0,112(r1)
    4e1c:	90 01 00 38 	stw     r0,56(r1)
static inline unsigned long copy_from_user(void *to,
		const void __user *from, unsigned long n)
{
	unsigned long over;

	if (access_ok(VERIFY_READ, from, n))
    4e20:	81 21 00 34 	lwz     r9,52(r1)
    4e24:	7c 40 13 78 	mr      r0,r2
    4e28:	7c 0a 03 78 	mr      r10,r0
    4e2c:	80 0a 01 d4 	lwz     r0,468(r10)
    4e30:	7f 89 00 40 	cmplw   cr7,r9,r0
    4e34:	41 9d 00 3c 	bgt-    cr7,4e70 <sctp_setsockopt_delayed_ack+0x1e8>
    4e38:	80 01 00 38 	lwz     r0,56(r1)
    4e3c:	2f 80 00 00 	cmpwi   cr7,r0,0
    4e40:	41 9e 00 28 	beq-    cr7,4e68 <sctp_setsockopt_delayed_ack+0x1e0>
    4e44:	80 01 00 38 	lwz     r0,56(r1)
    4e48:	31 20 ff ff 	addic   r9,r0,-1
    4e4c:	7c 40 13 78 	mr      r0,r2
    4e50:	7c 0a 03 78 	mr      r10,r0
    4e54:	81 6a 01 d4 	lwz     r11,468(r10)
    4e58:	80 01 00 34 	lwz     r0,52(r1)
    4e5c:	7c 00 58 50 	subf    r0,r0,r11
    4e60:	7f 89 00 40 	cmplw   cr7,r9,r0
    4e64:	41 9d 00 0c 	bgt-    cr7,4e70 <sctp_setsockopt_delayed_ack+0x1e8>
    4e68:	38 00 00 01 	li      r0,1
    4e6c:	48 00 00 08 	b       4e74 <sctp_setsockopt_delayed_ack+0x1ec>
    4e70:	38 00 00 00 	li      r0,0
    4e74:	2f 80 00 00 	cmpwi   cr7,r0,0
    4e78:	41 9e 00 1c 	beq-    cr7,4e94 <sctp_setsockopt_delayed_ack+0x20c>
		return __copy_tofrom_user((__force void __user *)to, from, n);
    4e7c:	80 61 00 30 	lwz     r3,48(r1)
    4e80:	80 81 00 34 	lwz     r4,52(r1)
    4e84:	80 a1 00 38 	lwz     r5,56(r1)
    4e88:	48 00 00 01 	bl      4e88 <sctp_setsockopt_delayed_ack+0x200>
    4e8c:	7c 60 1b 78 	mr      r0,r3
    4e90:	48 00 00 60 	b       4ef0 <sctp_setsockopt_delayed_ack+0x268>
	if ((unsigned long)from < TASK_SIZE) {
    4e94:	81 21 00 34 	lwz     r9,52(r1)
    4e98:	3c 00 bf ff 	lis     r0,-16385
    4e9c:	60 00 ff ff 	ori     r0,r0,65535
    4ea0:	7f 89 00 40 	cmplw   cr7,r9,r0
    4ea4:	41 9d 00 48 	bgt-    cr7,4eec <sctp_setsockopt_delayed_ack+0x264>
		over = (unsigned long)from + n - TASK_SIZE;
    4ea8:	81 21 00 34 	lwz     r9,52(r1)
    4eac:	80 01 00 38 	lwz     r0,56(r1)
    4eb0:	7c 09 02 14 	add     r0,r9,r0
    4eb4:	3d 60 40 00 	lis     r11,16384
    4eb8:	7c 00 5a 14 	add     r0,r0,r11
    4ebc:	90 01 00 3c 	stw     r0,60(r1)
		return __copy_tofrom_user((__force void __user *)to, from,
    4ec0:	81 21 00 38 	lwz     r9,56(r1)
    4ec4:	80 01 00 3c 	lwz     r0,60(r1)
    4ec8:	7c 00 48 50 	subf    r0,r0,r9
    4ecc:	80 61 00 30 	lwz     r3,48(r1)
    4ed0:	80 81 00 34 	lwz     r4,52(r1)
    4ed4:	7c 05 03 78 	mr      r5,r0
    4ed8:	48 00 00 01 	bl      4ed8 <sctp_setsockopt_delayed_ack+0x250>
    4edc:	7c 69 1b 78 	mr      r9,r3
    4ee0:	80 01 00 3c 	lwz     r0,60(r1)
    4ee4:	7c 09 02 14 	add     r0,r9,r0
    4ee8:	48 00 00 08 	b       4ef0 <sctp_setsockopt_delayed_ack+0x268>
				n - over) + over;
	}
	return n;
    4eec:	80 01 00 38 	lwz     r0,56(r1)
		if (copy_from_user(&params, optval, optlen))
    4ef0:	2f 80 00 00 	cmpwi   cr7,r0,0
    4ef4:	41 9e 00 0c 	beq-    cr7,4f00 <sctp_setsockopt_delayed_ack+0x278>
			return -EFAULT;
    4ef8:	38 00 ff f2 	li      r0,-14
    4efc:	48 00 03 54 	b       5250 <sctp_setsockopt_delayed_ack+0x5c8>

		if (params.sack_delay == 0)
    4f00:	80 01 00 54 	lwz     r0,84(r1)
    4f04:	2f 80 00 00 	cmpwi   cr7,r0,0
    4f08:	40 9e 00 10 	bne-    cr7,4f18 <sctp_setsockopt_delayed_ack+0x290>
			params.sack_freq = 1;
    4f0c:	38 00 00 01 	li      r0,1
    4f10:	90 01 00 58 	stw     r0,88(r1)
    4f14:	48 00 00 18 	b       4f2c <sctp_setsockopt_delayed_ack+0x2a4>
		else
			params.sack_freq = 0;
    4f18:	38 00 00 00 	li      r0,0
    4f1c:	90 01 00 58 	stw     r0,88(r1)
    4f20:	48 00 00 0c 	b       4f2c <sctp_setsockopt_delayed_ack+0x2a4>
	} else
		return - EINVAL;
    4f24:	38 00 ff ea 	li      r0,-22
    4f28:	48 00 03 28 	b       5250 <sctp_setsockopt_delayed_ack+0x5c8>

	/* Validate value parameter. */
	if (params.sack_delay > 500)
    4f2c:	80 01 00 54 	lwz     r0,84(r1)
    4f30:	2b 80 01 f4 	cmplwi  cr7,r0,500
    4f34:	40 9d 00 0c 	ble-    cr7,4f40 <sctp_setsockopt_delayed_ack+0x2b8>
		return -EINVAL;
    4f38:	38 00 ff ea 	li      r0,-22
    4f3c:	48 00 03 14 	b       5250 <sctp_setsockopt_delayed_ack+0x5c8>

	/* Get association, if sack_assoc_id != 0 and the socket is a one
	 * to many style socket, and an association was not found, then
	 * the id was invalid.
	 */
	asoc = sctp_id2assoc(sk, params.sack_assoc_id);
    4f40:	80 01 00 50 	lwz     r0,80(r1)
    4f44:	80 61 00 68 	lwz     r3,104(r1)
    4f48:	7c 04 03 78 	mr      r4,r0
    4f4c:	48 00 00 01 	bl      4f4c <sctp_setsockopt_delayed_ack+0x2c4>
    4f50:	90 61 00 0c 	stw     r3,12(r1)
	if (!asoc && params.sack_assoc_id && sctp_style(sk, UDP))
    4f54:	80 01 00 0c 	lwz     r0,12(r1)
    4f58:	2f 80 00 00 	cmpwi   cr7,r0,0
    4f5c:	40 9e 00 54 	bne-    cr7,4fb0 <sctp_setsockopt_delayed_ack+0x328>
    4f60:	80 01 00 50 	lwz     r0,80(r1)
    4f64:	2f 80 00 00 	cmpwi   cr7,r0,0
    4f68:	41 9e 00 48 	beq-    cr7,4fb0 <sctp_setsockopt_delayed_ack+0x328>
    4f6c:	80 01 00 68 	lwz     r0,104(r1)
    4f70:	90 01 00 40 	stw     r0,64(r1)
    4f74:	38 00 00 00 	li      r0,0
    4f78:	90 01 00 44 	stw     r0,68(r1)
    4f7c:	80 01 00 40 	lwz     r0,64(r1)
    4f80:	90 01 00 48 	stw     r0,72(r1)
    4f84:	80 01 00 48 	lwz     r0,72(r1)
    4f88:	7c 09 03 78 	mr      r9,r0
    4f8c:	80 09 01 c8 	lwz     r0,456(r9)
    4f90:	81 21 00 44 	lwz     r9,68(r1)
    4f94:	7f 89 00 00 	cmpw    cr7,r9,r0
    4f98:	7c 00 00 26 	mfcr    r0
    4f9c:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
    4fa0:	2f 80 00 00 	cmpwi   cr7,r0,0
    4fa4:	41 9e 00 0c 	beq-    cr7,4fb0 <sctp_setsockopt_delayed_ack+0x328>
		return -EINVAL;
    4fa8:	38 00 ff ea 	li      r0,-22
    4fac:	48 00 02 a4 	b       5250 <sctp_setsockopt_delayed_ack+0x5c8>

	if (params.sack_delay) {
    4fb0:	80 01 00 54 	lwz     r0,84(r1)
    4fb4:	2f 80 00 00 	cmpwi   cr7,r0,0
    4fb8:	41 9e 00 80 	beq-    cr7,5038 <sctp_setsockopt_delayed_ack+0x3b0>
		if (asoc) {
    4fbc:	80 01 00 0c 	lwz     r0,12(r1)
    4fc0:	2f 80 00 00 	cmpwi   cr7,r0,0
    4fc4:	41 9e 00 44 	beq-    cr7,5008 <sctp_setsockopt_delayed_ack+0x380>
			asoc->sackdelay =
				msecs_to_jiffies(params.sack_delay);
    4fc8:	80 01 00 54 	lwz     r0,84(r1)
    4fcc:	7c 03 03 78 	mr      r3,r0
    4fd0:	48 00 00 01 	bl      4fd0 <sctp_setsockopt_delayed_ack+0x348>
    4fd4:	7c 69 1b 78 	mr      r9,r3
	if (!asoc && params.sack_assoc_id && sctp_style(sk, UDP))
		return -EINVAL;

	if (params.sack_delay) {
		if (asoc) {
			asoc->sackdelay =
    4fd8:	80 01 00 0c 	lwz     r0,12(r1)
    4fdc:	7c 0a 03 78 	mr      r10,r0
    4fe0:	91 2a 01 f4 	stw     r9,500(r10)
				msecs_to_jiffies(params.sack_delay);
			asoc->param_flags =
				(asoc->param_flags & ~SPP_SACKDELAY) |
    4fe4:	80 01 00 0c 	lwz     r0,12(r1)
    4fe8:	7c 0b 03 78 	mr      r11,r0
    4fec:	80 0b 01 f0 	lwz     r0,496(r11)
    4ff0:	54 00 06 f0 	rlwinm  r0,r0,0,27,24
    4ff4:	60 09 00 20 	ori     r9,r0,32

	if (params.sack_delay) {
		if (asoc) {
			asoc->sackdelay =
				msecs_to_jiffies(params.sack_delay);
			asoc->param_flags =
    4ff8:	80 01 00 0c 	lwz     r0,12(r1)
    4ffc:	7c 0a 03 78 	mr      r10,r0
    5000:	91 2a 01 f0 	stw     r9,496(r10)
    5004:	48 00 00 34 	b       5038 <sctp_setsockopt_delayed_ack+0x3b0>
				(asoc->param_flags & ~SPP_SACKDELAY) |
				SPP_SACKDELAY_ENABLE;
		} else {
			sp->sackdelay = params.sack_delay;
    5008:	81 21 00 54 	lwz     r9,84(r1)
    500c:	80 01 00 10 	lwz     r0,16(r1)
    5010:	7c 0b 03 78 	mr      r11,r0
    5014:	91 2b 02 04 	stw     r9,516(r11)
			sp->param_flags =
				(sp->param_flags & ~SPP_SACKDELAY) |
    5018:	80 01 00 10 	lwz     r0,16(r1)
    501c:	7c 09 03 78 	mr      r9,r0
    5020:	80 09 02 0c 	lwz     r0,524(r9)
    5024:	54 00 06 f0 	rlwinm  r0,r0,0,27,24
    5028:	60 09 00 20 	ori     r9,r0,32
			asoc->param_flags =
				(asoc->param_flags & ~SPP_SACKDELAY) |
				SPP_SACKDELAY_ENABLE;
		} else {
			sp->sackdelay = params.sack_delay;
			sp->param_flags =
    502c:	80 01 00 10 	lwz     r0,16(r1)
    5030:	7c 0a 03 78 	mr      r10,r0
    5034:	91 2a 02 0c 	stw     r9,524(r10)
				(sp->param_flags & ~SPP_SACKDELAY) |
				SPP_SACKDELAY_ENABLE;
		}
	}

	if (params.sack_freq == 1) {
    5038:	80 01 00 58 	lwz     r0,88(r1)
    503c:	2f 80 00 01 	cmpwi   cr7,r0,1
    5040:	40 9e 00 58 	bne-    cr7,5098 <sctp_setsockopt_delayed_ack+0x410>
		if (asoc) {
    5044:	80 01 00 0c 	lwz     r0,12(r1)
    5048:	2f 80 00 00 	cmpwi   cr7,r0,0
    504c:	41 9e 00 28 	beq-    cr7,5074 <sctp_setsockopt_delayed_ack+0x3ec>
			asoc->param_flags =
				(asoc->param_flags & ~SPP_SACKDELAY) |
    5050:	80 01 00 0c 	lwz     r0,12(r1)
    5054:	7c 0b 03 78 	mr      r11,r0
    5058:	80 0b 01 f0 	lwz     r0,496(r11)
    505c:	54 00 06 f0 	rlwinm  r0,r0,0,27,24
    5060:	60 09 00 40 	ori     r9,r0,64
		}
	}

	if (params.sack_freq == 1) {
		if (asoc) {
			asoc->param_flags =
    5064:	80 01 00 0c 	lwz     r0,12(r1)
    5068:	7c 0a 03 78 	mr      r10,r0
    506c:	91 2a 01 f0 	stw     r9,496(r10)
    5070:	48 00 00 a4 	b       5114 <sctp_setsockopt_delayed_ack+0x48c>
				(asoc->param_flags & ~SPP_SACKDELAY) |
				SPP_SACKDELAY_DISABLE;
		} else {
			sp->param_flags =
				(sp->param_flags & ~SPP_SACKDELAY) |
    5074:	80 01 00 10 	lwz     r0,16(r1)
    5078:	7c 0b 03 78 	mr      r11,r0
    507c:	80 0b 02 0c 	lwz     r0,524(r11)
    5080:	54 00 06 f0 	rlwinm  r0,r0,0,27,24
    5084:	60 09 00 40 	ori     r9,r0,64
		if (asoc) {
			asoc->param_flags =
				(asoc->param_flags & ~SPP_SACKDELAY) |
				SPP_SACKDELAY_DISABLE;
		} else {
			sp->param_flags =
    5088:	80 01 00 10 	lwz     r0,16(r1)
    508c:	7c 0a 03 78 	mr      r10,r0
    5090:	91 2a 02 0c 	stw     r9,524(r10)
    5094:	48 00 00 80 	b       5114 <sctp_setsockopt_delayed_ack+0x48c>
				(sp->param_flags & ~SPP_SACKDELAY) |
				SPP_SACKDELAY_DISABLE;
		}
	} else if (params.sack_freq > 1) {
    5098:	80 01 00 58 	lwz     r0,88(r1)
    509c:	2b 80 00 01 	cmplwi  cr7,r0,1
    50a0:	40 9d 00 74 	ble-    cr7,5114 <sctp_setsockopt_delayed_ack+0x48c>
		if (asoc) {
    50a4:	80 01 00 0c 	lwz     r0,12(r1)
    50a8:	2f 80 00 00 	cmpwi   cr7,r0,0
    50ac:	41 9e 00 38 	beq-    cr7,50e4 <sctp_setsockopt_delayed_ack+0x45c>
			asoc->sackfreq = params.sack_freq;
    50b0:	81 21 00 58 	lwz     r9,88(r1)
    50b4:	80 01 00 0c 	lwz     r0,12(r1)
    50b8:	7c 0b 03 78 	mr      r11,r0
    50bc:	91 2b 01 f8 	stw     r9,504(r11)
			asoc->param_flags =
				(asoc->param_flags & ~SPP_SACKDELAY) |
    50c0:	80 01 00 0c 	lwz     r0,12(r1)
    50c4:	7c 09 03 78 	mr      r9,r0
    50c8:	80 09 01 f0 	lwz     r0,496(r9)
    50cc:	54 00 06 f0 	rlwinm  r0,r0,0,27,24
    50d0:	60 09 00 20 	ori     r9,r0,32
				SPP_SACKDELAY_DISABLE;
		}
	} else if (params.sack_freq > 1) {
		if (asoc) {
			asoc->sackfreq = params.sack_freq;
			asoc->param_flags =
    50d4:	80 01 00 0c 	lwz     r0,12(r1)
    50d8:	7c 0a 03 78 	mr      r10,r0
    50dc:	91 2a 01 f0 	stw     r9,496(r10)
    50e0:	48 00 00 34 	b       5114 <sctp_setsockopt_delayed_ack+0x48c>
				(asoc->param_flags & ~SPP_SACKDELAY) |
				SPP_SACKDELAY_ENABLE;
		} else {
			sp->sackfreq = params.sack_freq;
    50e4:	81 21 00 58 	lwz     r9,88(r1)
    50e8:	80 01 00 10 	lwz     r0,16(r1)
    50ec:	7c 0b 03 78 	mr      r11,r0
    50f0:	91 2b 02 08 	stw     r9,520(r11)
			sp->param_flags =
				(sp->param_flags & ~SPP_SACKDELAY) |
    50f4:	80 01 00 10 	lwz     r0,16(r1)
    50f8:	7c 09 03 78 	mr      r9,r0
    50fc:	80 09 02 0c 	lwz     r0,524(r9)
    5100:	54 00 06 f0 	rlwinm  r0,r0,0,27,24
    5104:	60 09 00 20 	ori     r9,r0,32
			asoc->param_flags =
				(asoc->param_flags & ~SPP_SACKDELAY) |
				SPP_SACKDELAY_ENABLE;
		} else {
			sp->sackfreq = params.sack_freq;
			sp->param_flags =
    5108:	80 01 00 10 	lwz     r0,16(r1)
    510c:	7c 0a 03 78 	mr      r10,r0
    5110:	91 2a 02 0c 	stw     r9,524(r10)
				SPP_SACKDELAY_ENABLE;
		}
	}

	/* If change is for association, also apply to each transport. */
	if (asoc) {
    5114:	80 01 00 0c 	lwz     r0,12(r1)
    5118:	2f 80 00 00 	cmpwi   cr7,r0,0
    511c:	41 9e 01 30 	beq-    cr7,524c <sctp_setsockopt_delayed_ack+0x5c4>
		list_for_each_entry(trans, &asoc->peer.transport_addr_list,
    5120:	80 01 00 0c 	lwz     r0,12(r1)
    5124:	7c 0b 03 78 	mr      r11,r0
    5128:	80 0b 00 e8 	lwz     r0,232(r11)
    512c:	90 01 00 14 	stw     r0,20(r1)
    5130:	80 01 00 14 	lwz     r0,20(r1)
    5134:	90 01 00 08 	stw     r0,8(r1)
    5138:	48 00 00 d0 	b       5208 <sctp_setsockopt_delayed_ack+0x580>
				transports) {
			if (params.sack_delay) {
    513c:	80 01 00 54 	lwz     r0,84(r1)
    5140:	2f 80 00 00 	cmpwi   cr7,r0,0
    5144:	41 9e 00 40 	beq-    cr7,5184 <sctp_setsockopt_delayed_ack+0x4fc>
				trans->sackdelay =
					msecs_to_jiffies(params.sack_delay);
    5148:	80 01 00 54 	lwz     r0,84(r1)
    514c:	7c 03 03 78 	mr      r3,r0
    5150:	48 00 00 01 	bl      5150 <sctp_setsockopt_delayed_ack+0x4c8>
    5154:	7c 69 1b 78 	mr      r9,r3
	/* If change is for association, also apply to each transport. */
	if (asoc) {
		list_for_each_entry(trans, &asoc->peer.transport_addr_list,
				transports) {
			if (params.sack_delay) {
				trans->sackdelay =
    5158:	80 01 00 08 	lwz     r0,8(r1)
    515c:	7c 0a 03 78 	mr      r10,r0
    5160:	91 2a 00 7c 	stw     r9,124(r10)
					msecs_to_jiffies(params.sack_delay);
				trans->param_flags =
					(trans->param_flags & ~SPP_SACKDELAY) |
    5164:	80 01 00 08 	lwz     r0,8(r1)
    5168:	7c 0b 03 78 	mr      r11,r0
    516c:	80 0b 00 94 	lwz     r0,148(r11)
    5170:	54 00 06 f0 	rlwinm  r0,r0,0,27,24
    5174:	60 09 00 20 	ori     r9,r0,32
		list_for_each_entry(trans, &asoc->peer.transport_addr_list,
				transports) {
			if (params.sack_delay) {
				trans->sackdelay =
					msecs_to_jiffies(params.sack_delay);
				trans->param_flags =
    5178:	80 01 00 08 	lwz     r0,8(r1)
    517c:	7c 0a 03 78 	mr      r10,r0
    5180:	91 2a 00 94 	stw     r9,148(r10)
					(trans->param_flags & ~SPP_SACKDELAY) |
					SPP_SACKDELAY_ENABLE;
			}
			if (params.sack_freq == 1) {
    5184:	80 01 00 58 	lwz     r0,88(r1)
    5188:	2f 80 00 01 	cmpwi   cr7,r0,1
    518c:	40 9e 00 28 	bne-    cr7,51b4 <sctp_setsockopt_delayed_ack+0x52c>
				trans->param_flags =
					(trans->param_flags & ~SPP_SACKDELAY) |
    5190:	80 01 00 08 	lwz     r0,8(r1)
    5194:	7c 0b 03 78 	mr      r11,r0
    5198:	80 0b 00 94 	lwz     r0,148(r11)
    519c:	54 00 06 f0 	rlwinm  r0,r0,0,27,24
    51a0:	60 09 00 40 	ori     r9,r0,64
				trans->param_flags =
					(trans->param_flags & ~SPP_SACKDELAY) |
					SPP_SACKDELAY_ENABLE;
			}
			if (params.sack_freq == 1) {
				trans->param_flags =
    51a4:	80 01 00 08 	lwz     r0,8(r1)
    51a8:	7c 0a 03 78 	mr      r10,r0
    51ac:	91 2a 00 94 	stw     r9,148(r10)
    51b0:	48 00 00 40 	b       51f0 <sctp_setsockopt_delayed_ack+0x568>
					(trans->param_flags & ~SPP_SACKDELAY) |
					SPP_SACKDELAY_DISABLE;
			} else if (params.sack_freq > 1) {
    51b4:	80 01 00 58 	lwz     r0,88(r1)
    51b8:	2b 80 00 01 	cmplwi  cr7,r0,1
    51bc:	40 9d 00 34 	ble-    cr7,51f0 <sctp_setsockopt_delayed_ack+0x568>
				trans->sackfreq = params.sack_freq;
    51c0:	81 21 00 58 	lwz     r9,88(r1)
    51c4:	80 01 00 08 	lwz     r0,8(r1)
    51c8:	7c 0b 03 78 	mr      r11,r0
    51cc:	91 2b 00 80 	stw     r9,128(r11)
				trans->param_flags =
					(trans->param_flags & ~SPP_SACKDELAY) |
    51d0:	80 01 00 08 	lwz     r0,8(r1)
    51d4:	7c 09 03 78 	mr      r9,r0
    51d8:	80 09 00 94 	lwz     r0,148(r9)
    51dc:	54 00 06 f0 	rlwinm  r0,r0,0,27,24
    51e0:	60 09 00 20 	ori     r9,r0,32
				trans->param_flags =
					(trans->param_flags & ~SPP_SACKDELAY) |
					SPP_SACKDELAY_DISABLE;
			} else if (params.sack_freq > 1) {
				trans->sackfreq = params.sack_freq;
				trans->param_flags =
    51e4:	80 01 00 08 	lwz     r0,8(r1)
    51e8:	7c 0a 03 78 	mr      r10,r0
    51ec:	91 2a 00 94 	stw     r9,148(r10)
		}
	}

	/* If change is for association, also apply to each transport. */
	if (asoc) {
		list_for_each_entry(trans, &asoc->peer.transport_addr_list,
    51f0:	80 01 00 08 	lwz     r0,8(r1)
    51f4:	7c 0b 03 78 	mr      r11,r0
    51f8:	80 0b 00 00 	lwz     r0,0(r11)
    51fc:	90 01 00 18 	stw     r0,24(r1)
    5200:	80 01 00 18 	lwz     r0,24(r1)
    5204:	90 01 00 08 	stw     r0,8(r1)
    5208:	80 01 00 08 	lwz     r0,8(r1)
    520c:	7c 09 03 78 	mr      r9,r0
    5210:	80 09 00 00 	lwz     r0,0(r9)
    5214:	90 01 00 4c 	stw     r0,76(r1)
#define ARCH_HAS_PREFETCHW
#define ARCH_HAS_SPINLOCK_PREFETCH

static inline void prefetch(const void *x)
{
	if (unlikely(!x))
    5218:	80 01 00 4c 	lwz     r0,76(r1)
    521c:	2f 80 00 00 	cmpwi   cr7,r0,0
    5220:	7c 00 00 26 	mfcr    r0
    5224:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
    5228:	2f 80 00 00 	cmpwi   cr7,r0,0
    522c:	40 9e 00 0c 	bne-    cr7,5238 <sctp_setsockopt_delayed_ack+0x5b0>
		return;

	__asm__ __volatile__ ("dcbt 0,%0" : : "r" (x));
    5230:	80 01 00 4c 	lwz     r0,76(r1)
    5234:	7c 00 02 2c 	dcbt    r0,r0
    5238:	81 21 00 08 	lwz     r9,8(r1)
    523c:	80 01 00 0c 	lwz     r0,12(r1)
    5240:	30 00 00 e8 	addic   r0,r0,232
    5244:	7f 89 00 00 	cmpw    cr7,r9,r0
    5248:	40 9e fe f4 	bne+    cr7,513c <sctp_setsockopt_delayed_ack+0x4b4>
					SPP_SACKDELAY_ENABLE;
			}
		}
	}

	return 0;
    524c:	38 00 00 00 	li      r0,0
}
    5250:	7c 03 03 78 	mr      r3,r0
    5254:	80 01 00 84 	lwz     r0,132(r1)
    5258:	7c 08 03 a6 	mtlr    r0
    525c:	38 21 00 80 	addi    r1,r1,128
    5260:	4e 80 00 20 	blr

00005264 <sctp_setsockopt_initmsg>:
 * socket (for UDP-style sockets only future associations are effected
 * by the change).  With TCP-style sockets, this option is inherited by
 * sockets derived from a listener socket.
 */
static int sctp_setsockopt_initmsg(struct sock *sk, char __user *optval, unsigned int optlen)
{
    5264:	94 21 ff c0 	stwu    r1,-64(r1)
    5268:	7c 08 02 a6 	mflr    r0
    526c:	90 01 00 44 	stw     r0,68(r1)
    5270:	90 61 00 28 	stw     r3,40(r1)
    5274:	90 81 00 2c 	stw     r4,44(r1)
    5278:	90 a1 00 30 	stw     r5,48(r1)
    527c:	80 01 00 28 	lwz     r0,40(r1)
    5280:	90 01 00 0c 	stw     r0,12(r1)
    5284:	80 01 00 0c 	lwz     r0,12(r1)
	struct sctp_initmsg sinit;
	struct sctp_sock *sp = sctp_sk(sk);
    5288:	90 01 00 08 	stw     r0,8(r1)

	if (optlen != sizeof(struct sctp_initmsg))
    528c:	80 01 00 30 	lwz     r0,48(r1)
    5290:	2f 80 00 08 	cmpwi   cr7,r0,8
    5294:	41 9e 00 0c 	beq-    cr7,52a0 <sctp_setsockopt_initmsg+0x3c>
		return -EINVAL;
    5298:	38 00 ff ea 	li      r0,-22
    529c:	48 00 01 90 	b       542c <sctp_setsockopt_initmsg+0x1c8>
	if (copy_from_user(&sinit, optval, optlen))
    52a0:	38 01 00 20 	addi    r0,r1,32
{
	struct sctp_initmsg sinit;
	struct sctp_sock *sp = sctp_sk(sk);

	if (optlen != sizeof(struct sctp_initmsg))
		return -EINVAL;
    52a4:	90 01 00 10 	stw     r0,16(r1)
    52a8:	80 01 00 2c 	lwz     r0,44(r1)
    52ac:	90 01 00 14 	stw     r0,20(r1)
    52b0:	80 01 00 30 	lwz     r0,48(r1)
    52b4:	90 01 00 18 	stw     r0,24(r1)
static inline unsigned long copy_from_user(void *to,
		const void __user *from, unsigned long n)
{
	unsigned long over;

	if (access_ok(VERIFY_READ, from, n))
    52b8:	81 21 00 14 	lwz     r9,20(r1)
    52bc:	7c 40 13 78 	mr      r0,r2
    52c0:	7c 0a 03 78 	mr      r10,r0
    52c4:	80 0a 01 d4 	lwz     r0,468(r10)
    52c8:	7f 89 00 40 	cmplw   cr7,r9,r0
    52cc:	41 9d 00 3c 	bgt-    cr7,5308 <sctp_setsockopt_initmsg+0xa4>
    52d0:	80 01 00 18 	lwz     r0,24(r1)
    52d4:	2f 80 00 00 	cmpwi   cr7,r0,0
    52d8:	41 9e 00 28 	beq-    cr7,5300 <sctp_setsockopt_initmsg+0x9c>
    52dc:	80 01 00 18 	lwz     r0,24(r1)
    52e0:	31 20 ff ff 	addic   r9,r0,-1
    52e4:	7c 40 13 78 	mr      r0,r2
    52e8:	7c 0a 03 78 	mr      r10,r0
    52ec:	81 6a 01 d4 	lwz     r11,468(r10)
    52f0:	80 01 00 14 	lwz     r0,20(r1)
    52f4:	7c 00 58 50 	subf    r0,r0,r11
    52f8:	7f 89 00 40 	cmplw   cr7,r9,r0
    52fc:	41 9d 00 0c 	bgt-    cr7,5308 <sctp_setsockopt_initmsg+0xa4>
    5300:	38 00 00 01 	li      r0,1
    5304:	48 00 00 08 	b       530c <sctp_setsockopt_initmsg+0xa8>
    5308:	38 00 00 00 	li      r0,0
    530c:	2f 80 00 00 	cmpwi   cr7,r0,0
    5310:	41 9e 00 1c 	beq-    cr7,532c <sctp_setsockopt_initmsg+0xc8>
		return __copy_tofrom_user((__force void __user *)to, from, n);
    5314:	80 61 00 10 	lwz     r3,16(r1)
    5318:	80 81 00 14 	lwz     r4,20(r1)
    531c:	80 a1 00 18 	lwz     r5,24(r1)
    5320:	48 00 00 01 	bl      5320 <sctp_setsockopt_initmsg+0xbc>
    5324:	7c 60 1b 78 	mr      r0,r3
    5328:	48 00 00 60 	b       5388 <sctp_setsockopt_initmsg+0x124>
	if ((unsigned long)from < TASK_SIZE) {
    532c:	81 21 00 14 	lwz     r9,20(r1)
    5330:	3c 00 bf ff 	lis     r0,-16385
    5334:	60 00 ff ff 	ori     r0,r0,65535
    5338:	7f 89 00 40 	cmplw   cr7,r9,r0
    533c:	41 9d 00 48 	bgt-    cr7,5384 <sctp_setsockopt_initmsg+0x120>
		over = (unsigned long)from + n - TASK_SIZE;
    5340:	81 21 00 14 	lwz     r9,20(r1)
    5344:	80 01 00 18 	lwz     r0,24(r1)
    5348:	7c 09 02 14 	add     r0,r9,r0
    534c:	3d 60 40 00 	lis     r11,16384
    5350:	7c 00 5a 14 	add     r0,r0,r11
    5354:	90 01 00 1c 	stw     r0,28(r1)
		return __copy_tofrom_user((__force void __user *)to, from,
    5358:	81 21 00 18 	lwz     r9,24(r1)
    535c:	80 01 00 1c 	lwz     r0,28(r1)
    5360:	7c 00 48 50 	subf    r0,r0,r9
    5364:	80 61 00 10 	lwz     r3,16(r1)
    5368:	80 81 00 14 	lwz     r4,20(r1)
    536c:	7c 05 03 78 	mr      r5,r0
    5370:	48 00 00 01 	bl      5370 <sctp_setsockopt_initmsg+0x10c>
    5374:	7c 69 1b 78 	mr      r9,r3
    5378:	80 01 00 1c 	lwz     r0,28(r1)
    537c:	7c 09 02 14 	add     r0,r9,r0
    5380:	48 00 00 08 	b       5388 <sctp_setsockopt_initmsg+0x124>
				n - over) + over;
	}
	return n;
    5384:	80 01 00 18 	lwz     r0,24(r1)
	if (copy_from_user(&sinit, optval, optlen))
    5388:	2f 80 00 00 	cmpwi   cr7,r0,0
    538c:	41 9e 00 0c 	beq-    cr7,5398 <sctp_setsockopt_initmsg+0x134>
		return -EFAULT;
    5390:	38 00 ff f2 	li      r0,-14
    5394:	48 00 00 98 	b       542c <sctp_setsockopt_initmsg+0x1c8>

	if (sinit.sinit_num_ostreams)
    5398:	a0 01 00 20 	lhz     r0,32(r1)
    539c:	54 00 04 3e 	clrlwi  r0,r0,16
    53a0:	2f 80 00 00 	cmpwi   cr7,r0,0
    53a4:	41 9e 00 18 	beq-    cr7,53bc <sctp_setsockopt_initmsg+0x158>
		sp->initmsg.sinit_num_ostreams = sinit.sinit_num_ostreams;
    53a8:	a0 01 00 20 	lhz     r0,32(r1)
    53ac:	54 09 04 3e 	clrlwi  r9,r0,16
    53b0:	80 01 00 08 	lwz     r0,8(r1)
    53b4:	7c 0a 03 78 	mr      r10,r0
    53b8:	b1 2a 02 10 	sth     r9,528(r10)
	if (sinit.sinit_max_instreams)
    53bc:	a0 01 00 22 	lhz     r0,34(r1)
    53c0:	54 00 04 3e 	clrlwi  r0,r0,16
    53c4:	2f 80 00 00 	cmpwi   cr7,r0,0
    53c8:	41 9e 00 18 	beq-    cr7,53e0 <sctp_setsockopt_initmsg+0x17c>
		sp->initmsg.sinit_max_instreams = sinit.sinit_max_instreams;
    53cc:	a0 01 00 22 	lhz     r0,34(r1)
    53d0:	54 09 04 3e 	clrlwi  r9,r0,16
    53d4:	80 01 00 08 	lwz     r0,8(r1)
    53d8:	7c 0b 03 78 	mr      r11,r0
    53dc:	b1 2b 02 12 	sth     r9,530(r11)
	if (sinit.sinit_max_attempts)
    53e0:	a0 01 00 24 	lhz     r0,36(r1)
    53e4:	54 00 04 3e 	clrlwi  r0,r0,16
    53e8:	2f 80 00 00 	cmpwi   cr7,r0,0
    53ec:	41 9e 00 18 	beq-    cr7,5404 <sctp_setsockopt_initmsg+0x1a0>
		sp->initmsg.sinit_max_attempts = sinit.sinit_max_attempts;
    53f0:	a0 01 00 24 	lhz     r0,36(r1)
    53f4:	54 09 04 3e 	clrlwi  r9,r0,16
    53f8:	80 01 00 08 	lwz     r0,8(r1)
    53fc:	7c 0a 03 78 	mr      r10,r0
    5400:	b1 2a 02 14 	sth     r9,532(r10)
	if (sinit.sinit_max_init_timeo)
    5404:	a0 01 00 26 	lhz     r0,38(r1)
    5408:	54 00 04 3e 	clrlwi  r0,r0,16
    540c:	2f 80 00 00 	cmpwi   cr7,r0,0
    5410:	41 9e 00 18 	beq-    cr7,5428 <sctp_setsockopt_initmsg+0x1c4>
		sp->initmsg.sinit_max_init_timeo = sinit.sinit_max_init_timeo;
    5414:	a0 01 00 26 	lhz     r0,38(r1)
    5418:	54 09 04 3e 	clrlwi  r9,r0,16
    541c:	80 01 00 08 	lwz     r0,8(r1)
    5420:	7c 0b 03 78 	mr      r11,r0
    5424:	b1 2b 02 16 	sth     r9,534(r11)

	return 0;
    5428:	38 00 00 00 	li      r0,0
}
    542c:	7c 03 03 78 	mr      r3,r0
    5430:	80 01 00 44 	lwz     r0,68(r1)
    5434:	7c 08 03 a6 	mtlr    r0
    5438:	38 21 00 40 	addi    r1,r1,64
    543c:	4e 80 00 20 	blr

00005440 <sctp_setsockopt_default_send_param>:
 *   to this call if the caller is using the UDP model.
 */
static int sctp_setsockopt_default_send_param(struct sock *sk,
					      char __user *optval,
					      unsigned int optlen)
{
    5440:	94 21 ff 90 	stwu    r1,-112(r1)
    5444:	7c 08 02 a6 	mflr    r0
    5448:	90 01 00 74 	stw     r0,116(r1)
    544c:	90 61 00 58 	stw     r3,88(r1)
    5450:	90 81 00 5c 	stw     r4,92(r1)
    5454:	90 a1 00 60 	stw     r5,96(r1)
    5458:	80 01 00 58 	lwz     r0,88(r1)
    545c:	90 01 00 10 	stw     r0,16(r1)
    5460:	80 01 00 10 	lwz     r0,16(r1)
	struct sctp_sndrcvinfo info;
	struct sctp_association *asoc;
	struct sctp_sock *sp = sctp_sk(sk);
    5464:	90 01 00 08 	stw     r0,8(r1)

	if (optlen != sizeof(struct sctp_sndrcvinfo))
    5468:	80 01 00 60 	lwz     r0,96(r1)
    546c:	2f 80 00 20 	cmpwi   cr7,r0,32
    5470:	41 9e 00 0c 	beq-    cr7,547c <sctp_setsockopt_default_send_param+0x3c>
		return -EINVAL;
    5474:	38 00 ff ea 	li      r0,-22
    5478:	48 00 02 30 	b       56a8 <sctp_setsockopt_default_send_param+0x268>
	if (copy_from_user(&info, optval, optlen))
    547c:	38 01 00 30 	addi    r0,r1,48
	struct sctp_sndrcvinfo info;
	struct sctp_association *asoc;
	struct sctp_sock *sp = sctp_sk(sk);

	if (optlen != sizeof(struct sctp_sndrcvinfo))
		return -EINVAL;
    5480:	90 01 00 14 	stw     r0,20(r1)
    5484:	80 01 00 5c 	lwz     r0,92(r1)
    5488:	90 01 00 18 	stw     r0,24(r1)
    548c:	80 01 00 60 	lwz     r0,96(r1)
    5490:	90 01 00 1c 	stw     r0,28(r1)
static inline unsigned long copy_from_user(void *to,
		const void __user *from, unsigned long n)
{
	unsigned long over;

	if (access_ok(VERIFY_READ, from, n))
    5494:	81 21 00 18 	lwz     r9,24(r1)
    5498:	7c 40 13 78 	mr      r0,r2
    549c:	7c 0a 03 78 	mr      r10,r0
    54a0:	80 0a 01 d4 	lwz     r0,468(r10)
    54a4:	7f 89 00 40 	cmplw   cr7,r9,r0
    54a8:	41 9d 00 3c 	bgt-    cr7,54e4 <sctp_setsockopt_default_send_param+0xa4>
    54ac:	80 01 00 1c 	lwz     r0,28(r1)
    54b0:	2f 80 00 00 	cmpwi   cr7,r0,0
    54b4:	41 9e 00 28 	beq-    cr7,54dc <sctp_setsockopt_default_send_param+0x9c>
    54b8:	80 01 00 1c 	lwz     r0,28(r1)
    54bc:	31 20 ff ff 	addic   r9,r0,-1
    54c0:	7c 40 13 78 	mr      r0,r2
    54c4:	7c 0a 03 78 	mr      r10,r0
    54c8:	81 6a 01 d4 	lwz     r11,468(r10)
    54cc:	80 01 00 18 	lwz     r0,24(r1)
    54d0:	7c 00 58 50 	subf    r0,r0,r11
    54d4:	7f 89 00 40 	cmplw   cr7,r9,r0
    54d8:	41 9d 00 0c 	bgt-    cr7,54e4 <sctp_setsockopt_default_send_param+0xa4>
    54dc:	38 00 00 01 	li      r0,1
    54e0:	48 00 00 08 	b       54e8 <sctp_setsockopt_default_send_param+0xa8>
    54e4:	38 00 00 00 	li      r0,0
    54e8:	2f 80 00 00 	cmpwi   cr7,r0,0
    54ec:	41 9e 00 1c 	beq-    cr7,5508 <sctp_setsockopt_default_send_param+0xc8>
		return __copy_tofrom_user((__force void __user *)to, from, n);
    54f0:	80 61 00 14 	lwz     r3,20(r1)
    54f4:	80 81 00 18 	lwz     r4,24(r1)
    54f8:	80 a1 00 1c 	lwz     r5,28(r1)
    54fc:	48 00 00 01 	bl      54fc <sctp_setsockopt_default_send_param+0xbc>
    5500:	7c 60 1b 78 	mr      r0,r3
    5504:	48 00 00 60 	b       5564 <sctp_setsockopt_default_send_param+0x124>
	if ((unsigned long)from < TASK_SIZE) {
    5508:	81 21 00 18 	lwz     r9,24(r1)
    550c:	3c 00 bf ff 	lis     r0,-16385
    5510:	60 00 ff ff 	ori     r0,r0,65535
    5514:	7f 89 00 40 	cmplw   cr7,r9,r0
    5518:	41 9d 00 48 	bgt-    cr7,5560 <sctp_setsockopt_default_send_param+0x120>
		over = (unsigned long)from + n - TASK_SIZE;
    551c:	81 21 00 18 	lwz     r9,24(r1)
    5520:	80 01 00 1c 	lwz     r0,28(r1)
    5524:	7c 09 02 14 	add     r0,r9,r0
    5528:	3d 60 40 00 	lis     r11,16384
    552c:	7c 00 5a 14 	add     r0,r0,r11
    5530:	90 01 00 20 	stw     r0,32(r1)
		return __copy_tofrom_user((__force void __user *)to, from,
    5534:	81 21 00 1c 	lwz     r9,28(r1)
    5538:	80 01 00 20 	lwz     r0,32(r1)
    553c:	7c 00 48 50 	subf    r0,r0,r9
    5540:	80 61 00 14 	lwz     r3,20(r1)
    5544:	80 81 00 18 	lwz     r4,24(r1)
    5548:	7c 05 03 78 	mr      r5,r0
    554c:	48 00 00 01 	bl      554c <sctp_setsockopt_default_send_param+0x10c>
    5550:	7c 69 1b 78 	mr      r9,r3
    5554:	80 01 00 20 	lwz     r0,32(r1)
    5558:	7c 09 02 14 	add     r0,r9,r0
    555c:	48 00 00 08 	b       5564 <sctp_setsockopt_default_send_param+0x124>
				n - over) + over;
	}
	return n;
    5560:	80 01 00 1c 	lwz     r0,28(r1)
	if (copy_from_user(&info, optval, optlen))
    5564:	2f 80 00 00 	cmpwi   cr7,r0,0
    5568:	41 9e 00 0c 	beq-    cr7,5574 <sctp_setsockopt_default_send_param+0x134>
		return -EFAULT;
    556c:	38 00 ff f2 	li      r0,-14
    5570:	48 00 01 38 	b       56a8 <sctp_setsockopt_default_send_param+0x268>

	asoc = sctp_id2assoc(sk, info.sinfo_assoc_id);
    5574:	80 01 00 4c 	lwz     r0,76(r1)
    5578:	80 61 00 58 	lwz     r3,88(r1)
    557c:	7c 04 03 78 	mr      r4,r0
    5580:	48 00 00 01 	bl      5580 <sctp_setsockopt_default_send_param+0x140>
    5584:	90 61 00 0c 	stw     r3,12(r1)
	if (!asoc && info.sinfo_assoc_id && sctp_style(sk, UDP))
    5588:	80 01 00 0c 	lwz     r0,12(r1)
    558c:	2f 80 00 00 	cmpwi   cr7,r0,0
    5590:	40 9e 00 54 	bne-    cr7,55e4 <sctp_setsockopt_default_send_param+0x1a4>
    5594:	80 01 00 4c 	lwz     r0,76(r1)
    5598:	2f 80 00 00 	cmpwi   cr7,r0,0
    559c:	41 9e 00 48 	beq-    cr7,55e4 <sctp_setsockopt_default_send_param+0x1a4>
    55a0:	80 01 00 58 	lwz     r0,88(r1)
    55a4:	90 01 00 24 	stw     r0,36(r1)
    55a8:	38 00 00 00 	li      r0,0
    55ac:	90 01 00 28 	stw     r0,40(r1)
    55b0:	80 01 00 24 	lwz     r0,36(r1)
    55b4:	90 01 00 2c 	stw     r0,44(r1)
    55b8:	80 01 00 2c 	lwz     r0,44(r1)
    55bc:	7c 09 03 78 	mr      r9,r0
    55c0:	80 09 01 c8 	lwz     r0,456(r9)
    55c4:	81 21 00 28 	lwz     r9,40(r1)
    55c8:	7f 89 00 00 	cmpw    cr7,r9,r0
    55cc:	7c 00 00 26 	mfcr    r0
    55d0:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
    55d4:	2f 80 00 00 	cmpwi   cr7,r0,0
    55d8:	41 9e 00 0c 	beq-    cr7,55e4 <sctp_setsockopt_default_send_param+0x1a4>
		return -EINVAL;
    55dc:	38 00 ff ea 	li      r0,-22
    55e0:	48 00 00 c8 	b       56a8 <sctp_setsockopt_default_send_param+0x268>

	if (asoc) {
    55e4:	80 01 00 0c 	lwz     r0,12(r1)
    55e8:	2f 80 00 00 	cmpwi   cr7,r0,0
    55ec:	41 9e 00 60 	beq-    cr7,564c <sctp_setsockopt_default_send_param+0x20c>
		asoc->default_stream = info.sinfo_stream;
    55f0:	a0 01 00 30 	lhz     r0,48(r1)
    55f4:	54 09 04 3e 	clrlwi  r9,r0,16
    55f8:	80 01 00 0c 	lwz     r0,12(r1)
    55fc:	7c 0a 03 78 	mr      r10,r0
    5600:	b1 2a 03 94 	sth     r9,916(r10)
		asoc->default_flags = info.sinfo_flags;
    5604:	a0 01 00 34 	lhz     r0,52(r1)
    5608:	54 09 04 3e 	clrlwi  r9,r0,16
    560c:	80 01 00 0c 	lwz     r0,12(r1)
    5610:	7c 0b 03 78 	mr      r11,r0
    5614:	b1 2b 03 96 	sth     r9,918(r11)
		asoc->default_ppid = info.sinfo_ppid;
    5618:	81 21 00 38 	lwz     r9,56(r1)
    561c:	80 01 00 0c 	lwz     r0,12(r1)
    5620:	7c 0a 03 78 	mr      r10,r0
    5624:	91 2a 03 98 	stw     r9,920(r10)
		asoc->default_context = info.sinfo_context;
    5628:	81 21 00 3c 	lwz     r9,60(r1)
    562c:	80 01 00 0c 	lwz     r0,12(r1)
    5630:	7c 0b 03 78 	mr      r11,r0
    5634:	91 2b 03 9c 	stw     r9,924(r11)
		asoc->default_timetolive = info.sinfo_timetolive;
    5638:	81 21 00 40 	lwz     r9,64(r1)
    563c:	80 01 00 0c 	lwz     r0,12(r1)
    5640:	7c 0a 03 78 	mr      r10,r0
    5644:	91 2a 03 a0 	stw     r9,928(r10)
    5648:	48 00 00 5c 	b       56a4 <sctp_setsockopt_default_send_param+0x264>
	} else {
		sp->default_stream = info.sinfo_stream;
    564c:	a0 01 00 30 	lhz     r0,48(r1)
    5650:	54 09 04 3e 	clrlwi  r9,r0,16
    5654:	80 01 00 08 	lwz     r0,8(r1)
    5658:	7c 0b 03 78 	mr      r11,r0
    565c:	b1 2b 01 dc 	sth     r9,476(r11)
		sp->default_flags = info.sinfo_flags;
    5660:	a0 01 00 34 	lhz     r0,52(r1)
    5664:	54 09 04 3e 	clrlwi  r9,r0,16
    5668:	80 01 00 08 	lwz     r0,8(r1)
    566c:	7c 0a 03 78 	mr      r10,r0
    5670:	b1 2a 01 e4 	sth     r9,484(r10)
		sp->default_ppid = info.sinfo_ppid;
    5674:	81 21 00 38 	lwz     r9,56(r1)
    5678:	80 01 00 08 	lwz     r0,8(r1)
    567c:	7c 0b 03 78 	mr      r11,r0
    5680:	91 2b 01 e0 	stw     r9,480(r11)
		sp->default_context = info.sinfo_context;
    5684:	81 21 00 3c 	lwz     r9,60(r1)
    5688:	80 01 00 08 	lwz     r0,8(r1)
    568c:	7c 0a 03 78 	mr      r10,r0
    5690:	91 2a 01 e8 	stw     r9,488(r10)
		sp->default_timetolive = info.sinfo_timetolive;
    5694:	81 21 00 40 	lwz     r9,64(r1)
    5698:	80 01 00 08 	lwz     r0,8(r1)
    569c:	7c 0b 03 78 	mr      r11,r0
    56a0:	91 2b 01 ec 	stw     r9,492(r11)
	}

	return 0;
    56a4:	38 00 00 00 	li      r0,0
}
    56a8:	7c 03 03 78 	mr      r3,r0
    56ac:	80 01 00 74 	lwz     r0,116(r1)
    56b0:	7c 08 03 a6 	mtlr    r0
    56b4:	38 21 00 70 	addi    r1,r1,112
    56b8:	4e 80 00 20 	blr

000056bc <sctp_setsockopt_primary_addr>:
 * the association primary.  The enclosed address must be one of the
 * association peer's addresses.
 */
static int sctp_setsockopt_primary_addr(struct sock *sk, char __user *optval,
					unsigned int optlen)
{
    56bc:	94 21 ff 40 	stwu    r1,-192(r1)
    56c0:	7c 08 02 a6 	mflr    r0
    56c4:	90 01 00 c4 	stw     r0,196(r1)
    56c8:	90 61 00 a8 	stw     r3,168(r1)
    56cc:	90 81 00 ac 	stw     r4,172(r1)
    56d0:	90 a1 00 b0 	stw     r5,176(r1)
	struct sctp_prim prim;
	struct sctp_transport *trans;

	if (optlen != sizeof(struct sctp_prim))
    56d4:	80 01 00 b0 	lwz     r0,176(r1)
    56d8:	2f 80 00 84 	cmpwi   cr7,r0,132
    56dc:	41 9e 00 0c 	beq-    cr7,56e8 <sctp_setsockopt_primary_addr+0x2c>
		return -EINVAL;
    56e0:	38 00 ff ea 	li      r0,-22
    56e4:	48 00 01 4c 	b       5830 <sctp_setsockopt_primary_addr+0x174>

	if (copy_from_user(&prim, optval, sizeof(struct sctp_prim)))
    56e8:	38 01 00 1c 	addi    r0,r1,28
{
	struct sctp_prim prim;
	struct sctp_transport *trans;

	if (optlen != sizeof(struct sctp_prim))
		return -EINVAL;
    56ec:	90 01 00 0c 	stw     r0,12(r1)
    56f0:	80 01 00 ac 	lwz     r0,172(r1)
    56f4:	90 01 00 10 	stw     r0,16(r1)
    56f8:	38 00 00 84 	li      r0,132
    56fc:	90 01 00 14 	stw     r0,20(r1)
static inline unsigned long copy_from_user(void *to,
		const void __user *from, unsigned long n)
{
	unsigned long over;

	if (access_ok(VERIFY_READ, from, n))
    5700:	81 21 00 10 	lwz     r9,16(r1)
    5704:	7c 40 13 78 	mr      r0,r2
    5708:	7c 0a 03 78 	mr      r10,r0
    570c:	80 0a 01 d4 	lwz     r0,468(r10)
    5710:	7f 89 00 40 	cmplw   cr7,r9,r0
    5714:	41 9d 00 3c 	bgt-    cr7,5750 <sctp_setsockopt_primary_addr+0x94>
    5718:	80 01 00 14 	lwz     r0,20(r1)
    571c:	2f 80 00 00 	cmpwi   cr7,r0,0
    5720:	41 9e 00 28 	beq-    cr7,5748 <sctp_setsockopt_primary_addr+0x8c>
    5724:	80 01 00 14 	lwz     r0,20(r1)
    5728:	31 20 ff ff 	addic   r9,r0,-1
    572c:	7c 40 13 78 	mr      r0,r2
    5730:	7c 0a 03 78 	mr      r10,r0
    5734:	81 6a 01 d4 	lwz     r11,468(r10)
    5738:	80 01 00 10 	lwz     r0,16(r1)
    573c:	7c 00 58 50 	subf    r0,r0,r11
    5740:	7f 89 00 40 	cmplw   cr7,r9,r0
    5744:	41 9d 00 0c 	bgt-    cr7,5750 <sctp_setsockopt_primary_addr+0x94>
    5748:	38 00 00 01 	li      r0,1
    574c:	48 00 00 08 	b       5754 <sctp_setsockopt_primary_addr+0x98>
    5750:	38 00 00 00 	li      r0,0
    5754:	2f 80 00 00 	cmpwi   cr7,r0,0
    5758:	41 9e 00 1c 	beq-    cr7,5774 <sctp_setsockopt_primary_addr+0xb8>
		return __copy_tofrom_user((__force void __user *)to, from, n);
    575c:	80 61 00 0c 	lwz     r3,12(r1)
    5760:	80 81 00 10 	lwz     r4,16(r1)
    5764:	80 a1 00 14 	lwz     r5,20(r1)
    5768:	48 00 00 01 	bl      5768 <sctp_setsockopt_primary_addr+0xac>
    576c:	7c 60 1b 78 	mr      r0,r3
    5770:	48 00 00 60 	b       57d0 <sctp_setsockopt_primary_addr+0x114>
	if ((unsigned long)from < TASK_SIZE) {
    5774:	81 21 00 10 	lwz     r9,16(r1)
    5778:	3c 00 bf ff 	lis     r0,-16385
    577c:	60 00 ff ff 	ori     r0,r0,65535
    5780:	7f 89 00 40 	cmplw   cr7,r9,r0
    5784:	41 9d 00 48 	bgt-    cr7,57cc <sctp_setsockopt_primary_addr+0x110>
		over = (unsigned long)from + n - TASK_SIZE;
    5788:	81 21 00 10 	lwz     r9,16(r1)
    578c:	80 01 00 14 	lwz     r0,20(r1)
    5790:	7c 09 02 14 	add     r0,r9,r0
    5794:	3d 60 40 00 	lis     r11,16384
    5798:	7c 00 5a 14 	add     r0,r0,r11
    579c:	90 01 00 18 	stw     r0,24(r1)
		return __copy_tofrom_user((__force void __user *)to, from,
    57a0:	81 21 00 14 	lwz     r9,20(r1)
    57a4:	80 01 00 18 	lwz     r0,24(r1)
    57a8:	7c 00 48 50 	subf    r0,r0,r9
    57ac:	80 61 00 0c 	lwz     r3,12(r1)
    57b0:	80 81 00 10 	lwz     r4,16(r1)
    57b4:	7c 05 03 78 	mr      r5,r0
    57b8:	48 00 00 01 	bl      57b8 <sctp_setsockopt_primary_addr+0xfc>
    57bc:	7c 69 1b 78 	mr      r9,r3
    57c0:	80 01 00 18 	lwz     r0,24(r1)
    57c4:	7c 09 02 14 	add     r0,r9,r0
    57c8:	48 00 00 08 	b       57d0 <sctp_setsockopt_primary_addr+0x114>
				n - over) + over;
	}
	return n;
    57cc:	80 01 00 14 	lwz     r0,20(r1)

	if (copy_from_user(&prim, optval, sizeof(struct sctp_prim)))
    57d0:	2f 80 00 00 	cmpwi   cr7,r0,0
    57d4:	41 9e 00 0c 	beq-    cr7,57e0 <sctp_setsockopt_primary_addr+0x124>
		return -EFAULT;
    57d8:	38 00 ff f2 	li      r0,-14
    57dc:	48 00 00 54 	b       5830 <sctp_setsockopt_primary_addr+0x174>

	trans = sctp_addr_id2transport(sk, &prim.ssp_addr, prim.ssp_assoc_id);
    57e0:	80 01 00 1c 	lwz     r0,28(r1)
    57e4:	39 21 00 1c 	addi    r9,r1,28
    57e8:	39 29 00 04 	addi    r9,r9,4
    57ec:	80 61 00 a8 	lwz     r3,168(r1)
    57f0:	7d 24 4b 78 	mr      r4,r9
    57f4:	7c 05 03 78 	mr      r5,r0
    57f8:	4b ff a9 e9 	bl      1e0 <sctp_addr_id2transport>
    57fc:	90 61 00 08 	stw     r3,8(r1)
	if (!trans)
    5800:	80 01 00 08 	lwz     r0,8(r1)
    5804:	2f 80 00 00 	cmpwi   cr7,r0,0
    5808:	40 9e 00 0c 	bne-    cr7,5814 <sctp_setsockopt_primary_addr+0x158>
		return -EINVAL;
    580c:	38 00 ff ea 	li      r0,-22
    5810:	48 00 00 20 	b       5830 <sctp_setsockopt_primary_addr+0x174>

	sctp_assoc_set_primary(trans->asoc, trans);
    5814:	80 01 00 08 	lwz     r0,8(r1)
    5818:	7c 09 03 78 	mr      r9,r0
    581c:	80 09 00 30 	lwz     r0,48(r9)
    5820:	7c 03 03 78 	mr      r3,r0
    5824:	80 81 00 08 	lwz     r4,8(r1)
    5828:	48 00 00 01 	bl      5828 <sctp_setsockopt_primary_addr+0x16c>

	return 0;
    582c:	38 00 00 00 	li      r0,0
}
    5830:	7c 03 03 78 	mr      r3,r0
    5834:	80 01 00 c4 	lwz     r0,196(r1)
    5838:	7c 08 03 a6 	mtlr    r0
    583c:	38 21 00 c0 	addi    r1,r1,192
    5840:	4e 80 00 20 	blr

00005844 <sctp_setsockopt_nodelay>:
 * introduced, at the cost of more packets in the network.  Expects an
 *  integer boolean flag.
 */
static int sctp_setsockopt_nodelay(struct sock *sk, char __user *optval,
				   unsigned int optlen)
{
    5844:	94 21 ff c0 	stwu    r1,-64(r1)
    5848:	bf c1 00 38 	stmw    r30,56(r1)
    584c:	90 61 00 28 	stw     r3,40(r1)
    5850:	90 81 00 2c 	stw     r4,44(r1)
    5854:	90 a1 00 30 	stw     r5,48(r1)
	int val;

	if (optlen < sizeof(int))
    5858:	80 01 00 30 	lwz     r0,48(r1)
    585c:	2b 80 00 03 	cmplwi  cr7,r0,3
    5860:	41 9d 00 0c 	bgt-    cr7,586c <sctp_setsockopt_nodelay+0x28>
		return -EINVAL;
    5864:	38 00 ff ea 	li      r0,-22
    5868:	48 00 00 d8 	b       5940 <sctp_setsockopt_nodelay+0xfc>
	if (get_user(val, (int __user *)optval))
    586c:	38 00 ff f2 	li      r0,-14
    5870:	90 01 00 08 	stw     r0,8(r1)
    5874:	38 00 00 00 	li      r0,0
    5878:	90 01 00 0c 	stw     r0,12(r1)
    587c:	80 01 00 2c 	lwz     r0,44(r1)
    5880:	90 01 00 10 	stw     r0,16(r1)
    5884:	81 21 00 10 	lwz     r9,16(r1)
    5888:	7c 40 13 78 	mr      r0,r2
    588c:	7c 0b 03 78 	mr      r11,r0
    5890:	80 0b 01 d4 	lwz     r0,468(r11)
    5894:	7f 89 00 40 	cmplw   cr7,r9,r0
    5898:	41 9d 00 28 	bgt-    cr7,58c0 <sctp_setsockopt_nodelay+0x7c>
    589c:	7c 40 13 78 	mr      r0,r2
    58a0:	7c 0b 03 78 	mr      r11,r0
    58a4:	81 2b 01 d4 	lwz     r9,468(r11)
    58a8:	80 01 00 10 	lwz     r0,16(r1)
    58ac:	7c 00 48 50 	subf    r0,r0,r9
    58b0:	2b 80 00 02 	cmplwi  cr7,r0,2
    58b4:	40 9d 00 0c 	ble-    cr7,58c0 <sctp_setsockopt_nodelay+0x7c>
    58b8:	38 00 00 01 	li      r0,1
    58bc:	48 00 00 08 	b       58c4 <sctp_setsockopt_nodelay+0x80>
    58c0:	38 00 00 00 	li      r0,0
    58c4:	2f 80 00 00 	cmpwi   cr7,r0,0
    58c8:	41 9e 00 2c 	beq-    cr7,58f4 <sctp_setsockopt_nodelay+0xb0>
    58cc:	38 00 00 00 	li      r0,0
    58d0:	90 01 00 08 	stw     r0,8(r1)
    58d4:	80 01 00 10 	lwz     r0,16(r1)
    58d8:	81 21 00 08 	lwz     r9,8(r1)
    58dc:	7d 3f 4b 78 	mr      r31,r9
    58e0:	7c 09 03 78 	mr      r9,r0
    58e4:	83 c9 00 00 	lwz     r30,0(r9)
    58e8:	93 e1 00 08 	stw     r31,8(r1)
    58ec:	93 c1 00 0c 	stw     r30,12(r1)
    58f0:	60 00 00 00 	nop
    58f4:	80 01 00 0c 	lwz     r0,12(r1)
    58f8:	90 01 00 14 	stw     r0,20(r1)
    58fc:	80 01 00 08 	lwz     r0,8(r1)
    5900:	2f 80 00 00 	cmpwi   cr7,r0,0
    5904:	41 9e 00 0c 	beq-    cr7,5910 <sctp_setsockopt_nodelay+0xcc>
		return -EFAULT;
    5908:	38 00 ff f2 	li      r0,-14
    590c:	48 00 00 34 	b       5940 <sctp_setsockopt_nodelay+0xfc>
    5910:	80 01 00 28 	lwz     r0,40(r1)
    5914:	90 01 00 18 	stw     r0,24(r1)
    5918:	80 01 00 18 	lwz     r0,24(r1)

	sctp_sk(sk)->nodelay = (val == 0) ? 0 : 1;
    591c:	81 21 00 14 	lwz     r9,20(r1)
    5920:	2f 89 00 00 	cmpwi   cr7,r9,0
    5924:	7d 20 00 26 	mfcr    r9
    5928:	55 29 ff fe 	rlwinm  r9,r9,31,31,31
    592c:	69 29 00 01 	xori    r9,r9,1
    5930:	55 29 06 3e 	clrlwi  r9,r9,24
    5934:	7c 0b 03 78 	mr      r11,r0
    5938:	99 2b 02 e8 	stb     r9,744(r11)
	return 0;
    593c:	38 00 00 00 	li      r0,0
}
    5940:	7c 03 03 78 	mr      r3,r0
    5944:	bb c1 00 38 	lmw     r30,56(r1)
    5948:	38 21 00 40 	addi    r1,r1,64
    594c:	4e 80 00 20 	blr

00005950 <sctp_setsockopt_rtoinfo>:
 * modifying the parameters, indicates that the current value should not
 * be changed.
 *
 */
static int sctp_setsockopt_rtoinfo(struct sock *sk, char __user *optval, unsigned int optlen)
{
    5950:	94 21 ff a0 	stwu    r1,-96(r1)
    5954:	7c 08 02 a6 	mflr    r0
    5958:	90 01 00 64 	stw     r0,100(r1)
    595c:	90 61 00 48 	stw     r3,72(r1)
    5960:	90 81 00 4c 	stw     r4,76(r1)
    5964:	90 a1 00 50 	stw     r5,80(r1)
	struct sctp_rtoinfo rtoinfo;
	struct sctp_association *asoc;

	if (optlen != sizeof (struct sctp_rtoinfo))
    5968:	80 01 00 50 	lwz     r0,80(r1)
    596c:	2f 80 00 10 	cmpwi   cr7,r0,16
    5970:	41 9e 00 0c 	beq-    cr7,597c <sctp_setsockopt_rtoinfo+0x2c>
		return -EINVAL;
    5974:	38 00 ff ea 	li      r0,-22
    5978:	48 00 02 5c 	b       5bd4 <sctp_setsockopt_rtoinfo+0x284>

	if (copy_from_user(&rtoinfo, optval, optlen))
    597c:	38 01 00 30 	addi    r0,r1,48
{
	struct sctp_rtoinfo rtoinfo;
	struct sctp_association *asoc;

	if (optlen != sizeof (struct sctp_rtoinfo))
		return -EINVAL;
    5980:	90 01 00 10 	stw     r0,16(r1)
    5984:	80 01 00 4c 	lwz     r0,76(r1)
    5988:	90 01 00 14 	stw     r0,20(r1)
    598c:	80 01 00 50 	lwz     r0,80(r1)
    5990:	90 01 00 18 	stw     r0,24(r1)
static inline unsigned long copy_from_user(void *to,
		const void __user *from, unsigned long n)
{
	unsigned long over;

	if (access_ok(VERIFY_READ, from, n))
    5994:	81 21 00 14 	lwz     r9,20(r1)
    5998:	7c 40 13 78 	mr      r0,r2
    599c:	7c 0a 03 78 	mr      r10,r0
    59a0:	80 0a 01 d4 	lwz     r0,468(r10)
    59a4:	7f 89 00 40 	cmplw   cr7,r9,r0
    59a8:	41 9d 00 3c 	bgt-    cr7,59e4 <sctp_setsockopt_rtoinfo+0x94>
    59ac:	80 01 00 18 	lwz     r0,24(r1)
    59b0:	2f 80 00 00 	cmpwi   cr7,r0,0
    59b4:	41 9e 00 28 	beq-    cr7,59dc <sctp_setsockopt_rtoinfo+0x8c>
    59b8:	80 01 00 18 	lwz     r0,24(r1)
    59bc:	31 20 ff ff 	addic   r9,r0,-1
    59c0:	7c 40 13 78 	mr      r0,r2
    59c4:	7c 0a 03 78 	mr      r10,r0
    59c8:	81 6a 01 d4 	lwz     r11,468(r10)
    59cc:	80 01 00 14 	lwz     r0,20(r1)
    59d0:	7c 00 58 50 	subf    r0,r0,r11
    59d4:	7f 89 00 40 	cmplw   cr7,r9,r0
    59d8:	41 9d 00 0c 	bgt-    cr7,59e4 <sctp_setsockopt_rtoinfo+0x94>
    59dc:	38 00 00 01 	li      r0,1
    59e0:	48 00 00 08 	b       59e8 <sctp_setsockopt_rtoinfo+0x98>
    59e4:	38 00 00 00 	li      r0,0
    59e8:	2f 80 00 00 	cmpwi   cr7,r0,0
    59ec:	41 9e 00 1c 	beq-    cr7,5a08 <sctp_setsockopt_rtoinfo+0xb8>
		return __copy_tofrom_user((__force void __user *)to, from, n);
    59f0:	80 61 00 10 	lwz     r3,16(r1)
    59f4:	80 81 00 14 	lwz     r4,20(r1)
    59f8:	80 a1 00 18 	lwz     r5,24(r1)
    59fc:	48 00 00 01 	bl      59fc <sctp_setsockopt_rtoinfo+0xac>
    5a00:	7c 60 1b 78 	mr      r0,r3
    5a04:	48 00 00 60 	b       5a64 <sctp_setsockopt_rtoinfo+0x114>
	if ((unsigned long)from < TASK_SIZE) {
    5a08:	81 21 00 14 	lwz     r9,20(r1)
    5a0c:	3c 00 bf ff 	lis     r0,-16385
    5a10:	60 00 ff ff 	ori     r0,r0,65535
    5a14:	7f 89 00 40 	cmplw   cr7,r9,r0
    5a18:	41 9d 00 48 	bgt-    cr7,5a60 <sctp_setsockopt_rtoinfo+0x110>
		over = (unsigned long)from + n - TASK_SIZE;
    5a1c:	81 21 00 14 	lwz     r9,20(r1)
    5a20:	80 01 00 18 	lwz     r0,24(r1)
    5a24:	7c 09 02 14 	add     r0,r9,r0
    5a28:	3d 60 40 00 	lis     r11,16384
    5a2c:	7c 00 5a 14 	add     r0,r0,r11
    5a30:	90 01 00 1c 	stw     r0,28(r1)
		return __copy_tofrom_user((__force void __user *)to, from,
    5a34:	81 21 00 18 	lwz     r9,24(r1)
    5a38:	80 01 00 1c 	lwz     r0,28(r1)
    5a3c:	7c 00 48 50 	subf    r0,r0,r9
    5a40:	80 61 00 10 	lwz     r3,16(r1)
    5a44:	80 81 00 14 	lwz     r4,20(r1)
    5a48:	7c 05 03 78 	mr      r5,r0
    5a4c:	48 00 00 01 	bl      5a4c <sctp_setsockopt_rtoinfo+0xfc>
    5a50:	7c 69 1b 78 	mr      r9,r3
    5a54:	80 01 00 1c 	lwz     r0,28(r1)
    5a58:	7c 09 02 14 	add     r0,r9,r0
    5a5c:	48 00 00 08 	b       5a64 <sctp_setsockopt_rtoinfo+0x114>
				n - over) + over;
	}
	return n;
    5a60:	80 01 00 18 	lwz     r0,24(r1)

	if (copy_from_user(&rtoinfo, optval, optlen))
    5a64:	2f 80 00 00 	cmpwi   cr7,r0,0
    5a68:	41 9e 00 0c 	beq-    cr7,5a74 <sctp_setsockopt_rtoinfo+0x124>
		return -EFAULT;
    5a6c:	38 00 ff f2 	li      r0,-14
    5a70:	48 00 01 64 	b       5bd4 <sctp_setsockopt_rtoinfo+0x284>

	asoc = sctp_id2assoc(sk, rtoinfo.srto_assoc_id);
    5a74:	80 01 00 30 	lwz     r0,48(r1)
    5a78:	80 61 00 48 	lwz     r3,72(r1)
    5a7c:	7c 04 03 78 	mr      r4,r0
    5a80:	48 00 00 01 	bl      5a80 <sctp_setsockopt_rtoinfo+0x130>
    5a84:	90 61 00 08 	stw     r3,8(r1)

	/* Set the values to the specific association */
	if (!asoc && rtoinfo.srto_assoc_id && sctp_style(sk, UDP))
    5a88:	80 01 00 08 	lwz     r0,8(r1)
    5a8c:	2f 80 00 00 	cmpwi   cr7,r0,0
    5a90:	40 9e 00 54 	bne-    cr7,5ae4 <sctp_setsockopt_rtoinfo+0x194>
    5a94:	80 01 00 30 	lwz     r0,48(r1)
    5a98:	2f 80 00 00 	cmpwi   cr7,r0,0
    5a9c:	41 9e 00 48 	beq-    cr7,5ae4 <sctp_setsockopt_rtoinfo+0x194>
    5aa0:	80 01 00 48 	lwz     r0,72(r1)
    5aa4:	90 01 00 20 	stw     r0,32(r1)
    5aa8:	38 00 00 00 	li      r0,0
    5aac:	90 01 00 24 	stw     r0,36(r1)
    5ab0:	80 01 00 20 	lwz     r0,32(r1)
    5ab4:	90 01 00 28 	stw     r0,40(r1)
    5ab8:	80 01 00 28 	lwz     r0,40(r1)
    5abc:	7c 09 03 78 	mr      r9,r0
    5ac0:	80 09 01 c8 	lwz     r0,456(r9)
    5ac4:	81 21 00 24 	lwz     r9,36(r1)
    5ac8:	7f 89 00 00 	cmpw    cr7,r9,r0
    5acc:	7c 00 00 26 	mfcr    r0
    5ad0:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
    5ad4:	2f 80 00 00 	cmpwi   cr7,r0,0
    5ad8:	41 9e 00 0c 	beq-    cr7,5ae4 <sctp_setsockopt_rtoinfo+0x194>
		return -EINVAL;
    5adc:	38 00 ff ea 	li      r0,-22
    5ae0:	48 00 00 f4 	b       5bd4 <sctp_setsockopt_rtoinfo+0x284>

	if (asoc) {
    5ae4:	80 01 00 08 	lwz     r0,8(r1)
    5ae8:	2f 80 00 00 	cmpwi   cr7,r0,0
    5aec:	41 9e 00 80 	beq-    cr7,5b6c <sctp_setsockopt_rtoinfo+0x21c>
		if (rtoinfo.srto_initial != 0)
    5af0:	80 01 00 34 	lwz     r0,52(r1)
    5af4:	2f 80 00 00 	cmpwi   cr7,r0,0
    5af8:	41 9e 00 20 	beq-    cr7,5b18 <sctp_setsockopt_rtoinfo+0x1c8>
			asoc->rto_initial =
				msecs_to_jiffies(rtoinfo.srto_initial);
    5afc:	80 01 00 34 	lwz     r0,52(r1)
    5b00:	7c 03 03 78 	mr      r3,r0
    5b04:	48 00 00 01 	bl      5b04 <sctp_setsockopt_rtoinfo+0x1b4>
    5b08:	7c 69 1b 78 	mr      r9,r3
	if (!asoc && rtoinfo.srto_assoc_id && sctp_style(sk, UDP))
		return -EINVAL;

	if (asoc) {
		if (rtoinfo.srto_initial != 0)
			asoc->rto_initial =
    5b0c:	80 01 00 08 	lwz     r0,8(r1)
    5b10:	7c 0a 03 78 	mr      r10,r0
    5b14:	91 2a 01 c8 	stw     r9,456(r10)
				msecs_to_jiffies(rtoinfo.srto_initial);
		if (rtoinfo.srto_max != 0)
    5b18:	80 01 00 38 	lwz     r0,56(r1)
    5b1c:	2f 80 00 00 	cmpwi   cr7,r0,0
    5b20:	41 9e 00 20 	beq-    cr7,5b40 <sctp_setsockopt_rtoinfo+0x1f0>
			asoc->rto_max = msecs_to_jiffies(rtoinfo.srto_max);
    5b24:	80 01 00 38 	lwz     r0,56(r1)
    5b28:	7c 03 03 78 	mr      r3,r0
    5b2c:	48 00 00 01 	bl      5b2c <sctp_setsockopt_rtoinfo+0x1dc>
    5b30:	7c 69 1b 78 	mr      r9,r3
    5b34:	80 01 00 08 	lwz     r0,8(r1)
    5b38:	7c 0b 03 78 	mr      r11,r0
    5b3c:	91 2b 01 cc 	stw     r9,460(r11)
		if (rtoinfo.srto_min != 0)
    5b40:	80 01 00 3c 	lwz     r0,60(r1)
    5b44:	2f 80 00 00 	cmpwi   cr7,r0,0
    5b48:	41 9e 00 88 	beq-    cr7,5bd0 <sctp_setsockopt_rtoinfo+0x280>
			asoc->rto_min = msecs_to_jiffies(rtoinfo.srto_min);
    5b4c:	80 01 00 3c 	lwz     r0,60(r1)
    5b50:	7c 03 03 78 	mr      r3,r0
    5b54:	48 00 00 01 	bl      5b54 <sctp_setsockopt_rtoinfo+0x204>
    5b58:	7c 69 1b 78 	mr      r9,r3
    5b5c:	80 01 00 08 	lwz     r0,8(r1)
    5b60:	7c 0a 03 78 	mr      r10,r0
    5b64:	91 2a 01 d0 	stw     r9,464(r10)
    5b68:	48 00 00 68 	b       5bd0 <sctp_setsockopt_rtoinfo+0x280>
    5b6c:	80 01 00 48 	lwz     r0,72(r1)
    5b70:	90 01 00 2c 	stw     r0,44(r1)
    5b74:	80 01 00 2c 	lwz     r0,44(r1)
	} else {
		/* If there is no association or the association-id = 0
		 * set the values to the endpoint.
		 */
		struct sctp_sock *sp = sctp_sk(sk);
    5b78:	90 01 00 0c 	stw     r0,12(r1)

		if (rtoinfo.srto_initial != 0)
    5b7c:	80 01 00 34 	lwz     r0,52(r1)
    5b80:	2f 80 00 00 	cmpwi   cr7,r0,0
    5b84:	41 9e 00 14 	beq-    cr7,5b98 <sctp_setsockopt_rtoinfo+0x248>
			sp->rtoinfo.srto_initial = rtoinfo.srto_initial;
    5b88:	81 21 00 34 	lwz     r9,52(r1)
    5b8c:	80 01 00 0c 	lwz     r0,12(r1)
    5b90:	7c 0b 03 78 	mr      r11,r0
    5b94:	91 2b 02 1c 	stw     r9,540(r11)
		if (rtoinfo.srto_max != 0)
    5b98:	80 01 00 38 	lwz     r0,56(r1)
    5b9c:	2f 80 00 00 	cmpwi   cr7,r0,0
    5ba0:	41 9e 00 14 	beq-    cr7,5bb4 <sctp_setsockopt_rtoinfo+0x264>
			sp->rtoinfo.srto_max = rtoinfo.srto_max;
    5ba4:	81 21 00 38 	lwz     r9,56(r1)
    5ba8:	80 01 00 0c 	lwz     r0,12(r1)
    5bac:	7c 0a 03 78 	mr      r10,r0
    5bb0:	91 2a 02 20 	stw     r9,544(r10)
		if (rtoinfo.srto_min != 0)
    5bb4:	80 01 00 3c 	lwz     r0,60(r1)
    5bb8:	2f 80 00 00 	cmpwi   cr7,r0,0
    5bbc:	41 9e 00 14 	beq-    cr7,5bd0 <sctp_setsockopt_rtoinfo+0x280>
			sp->rtoinfo.srto_min = rtoinfo.srto_min;
    5bc0:	81 21 00 3c 	lwz     r9,60(r1)
    5bc4:	80 01 00 0c 	lwz     r0,12(r1)
    5bc8:	7c 0b 03 78 	mr      r11,r0
    5bcc:	91 2b 02 24 	stw     r9,548(r11)
	}

	return 0;
    5bd0:	38 00 00 00 	li      r0,0
}
    5bd4:	7c 03 03 78 	mr      r3,r0
    5bd8:	80 01 00 64 	lwz     r0,100(r1)
    5bdc:	7c 08 03 a6 	mtlr    r0
    5be0:	38 21 00 60 	addi    r1,r1,96
    5be4:	4e 80 00 20 	blr

00005be8 <sctp_setsockopt_associnfo>:
 * greater than the sum of the retransmission value  of the peer.
 * See [SCTP] for more information.
 *
 */
static int sctp_setsockopt_associnfo(struct sock *sk, char __user *optval, unsigned int optlen)
{
    5be8:	94 21 ff 80 	stwu    r1,-128(r1)
    5bec:	7c 08 02 a6 	mflr    r0
    5bf0:	90 01 00 84 	stw     r0,132(r1)
    5bf4:	90 61 00 68 	stw     r3,104(r1)
    5bf8:	90 81 00 6c 	stw     r4,108(r1)
    5bfc:	90 a1 00 70 	stw     r5,112(r1)

	struct sctp_assocparams assocparams;
	struct sctp_association *asoc;

	if (optlen != sizeof(struct sctp_assocparams))
    5c00:	80 01 00 70 	lwz     r0,112(r1)
    5c04:	2f 80 00 14 	cmpwi   cr7,r0,20
    5c08:	41 9e 00 0c 	beq-    cr7,5c14 <sctp_setsockopt_associnfo+0x2c>
		return -EINVAL;
    5c0c:	38 00 ff ea 	li      r0,-22
    5c10:	48 00 03 34 	b       5f44 <sctp_setsockopt_associnfo+0x35c>
	if (copy_from_user(&assocparams, optval, optlen))
    5c14:	38 01 00 48 	addi    r0,r1,72

	struct sctp_assocparams assocparams;
	struct sctp_association *asoc;

	if (optlen != sizeof(struct sctp_assocparams))
		return -EINVAL;
    5c18:	90 01 00 24 	stw     r0,36(r1)
    5c1c:	80 01 00 6c 	lwz     r0,108(r1)
    5c20:	90 01 00 28 	stw     r0,40(r1)
    5c24:	80 01 00 70 	lwz     r0,112(r1)
    5c28:	90 01 00 2c 	stw     r0,44(r1)
static inline unsigned long copy_from_user(void *to,
		const void __user *from, unsigned long n)
{
	unsigned long over;

	if (access_ok(VERIFY_READ, from, n))
    5c2c:	81 21 00 28 	lwz     r9,40(r1)
    5c30:	7c 40 13 78 	mr      r0,r2
    5c34:	7c 0a 03 78 	mr      r10,r0
    5c38:	80 0a 01 d4 	lwz     r0,468(r10)
    5c3c:	7f 89 00 40 	cmplw   cr7,r9,r0
    5c40:	41 9d 00 3c 	bgt-    cr7,5c7c <sctp_setsockopt_associnfo+0x94>
    5c44:	80 01 00 2c 	lwz     r0,44(r1)
    5c48:	2f 80 00 00 	cmpwi   cr7,r0,0
    5c4c:	41 9e 00 28 	beq-    cr7,5c74 <sctp_setsockopt_associnfo+0x8c>
    5c50:	80 01 00 2c 	lwz     r0,44(r1)
    5c54:	31 20 ff ff 	addic   r9,r0,-1
    5c58:	7c 40 13 78 	mr      r0,r2
    5c5c:	7c 0a 03 78 	mr      r10,r0
    5c60:	81 6a 01 d4 	lwz     r11,468(r10)
    5c64:	80 01 00 28 	lwz     r0,40(r1)
    5c68:	7c 00 58 50 	subf    r0,r0,r11
    5c6c:	7f 89 00 40 	cmplw   cr7,r9,r0
    5c70:	41 9d 00 0c 	bgt-    cr7,5c7c <sctp_setsockopt_associnfo+0x94>
    5c74:	38 00 00 01 	li      r0,1
    5c78:	48 00 00 08 	b       5c80 <sctp_setsockopt_associnfo+0x98>
    5c7c:	38 00 00 00 	li      r0,0
    5c80:	2f 80 00 00 	cmpwi   cr7,r0,0
    5c84:	41 9e 00 1c 	beq-    cr7,5ca0 <sctp_setsockopt_associnfo+0xb8>
		return __copy_tofrom_user((__force void __user *)to, from, n);
    5c88:	80 61 00 24 	lwz     r3,36(r1)
    5c8c:	80 81 00 28 	lwz     r4,40(r1)
    5c90:	80 a1 00 2c 	lwz     r5,44(r1)
    5c94:	48 00 00 01 	bl      5c94 <sctp_setsockopt_associnfo+0xac>
    5c98:	7c 60 1b 78 	mr      r0,r3
    5c9c:	48 00 00 60 	b       5cfc <sctp_setsockopt_associnfo+0x114>
	if ((unsigned long)from < TASK_SIZE) {
    5ca0:	81 21 00 28 	lwz     r9,40(r1)
    5ca4:	3c 00 bf ff 	lis     r0,-16385
    5ca8:	60 00 ff ff 	ori     r0,r0,65535
    5cac:	7f 89 00 40 	cmplw   cr7,r9,r0
    5cb0:	41 9d 00 48 	bgt-    cr7,5cf8 <sctp_setsockopt_associnfo+0x110>
		over = (unsigned long)from + n - TASK_SIZE;
    5cb4:	81 21 00 28 	lwz     r9,40(r1)
    5cb8:	80 01 00 2c 	lwz     r0,44(r1)
    5cbc:	7c 09 02 14 	add     r0,r9,r0
    5cc0:	3d 60 40 00 	lis     r11,16384
    5cc4:	7c 00 5a 14 	add     r0,r0,r11
    5cc8:	90 01 00 30 	stw     r0,48(r1)
		return __copy_tofrom_user((__force void __user *)to, from,
    5ccc:	81 21 00 2c 	lwz     r9,44(r1)
    5cd0:	80 01 00 30 	lwz     r0,48(r1)
    5cd4:	7c 00 48 50 	subf    r0,r0,r9
    5cd8:	80 61 00 24 	lwz     r3,36(r1)
    5cdc:	80 81 00 28 	lwz     r4,40(r1)
    5ce0:	7c 05 03 78 	mr      r5,r0
    5ce4:	48 00 00 01 	bl      5ce4 <sctp_setsockopt_associnfo+0xfc>
    5ce8:	7c 69 1b 78 	mr      r9,r3
    5cec:	80 01 00 30 	lwz     r0,48(r1)
    5cf0:	7c 09 02 14 	add     r0,r9,r0
    5cf4:	48 00 00 08 	b       5cfc <sctp_setsockopt_associnfo+0x114>
				n - over) + over;
	}
	return n;
    5cf8:	80 01 00 2c 	lwz     r0,44(r1)
	if (copy_from_user(&assocparams, optval, optlen))
    5cfc:	2f 80 00 00 	cmpwi   cr7,r0,0
    5d00:	41 9e 00 0c 	beq-    cr7,5d0c <sctp_setsockopt_associnfo+0x124>
		return -EFAULT;
    5d04:	38 00 ff f2 	li      r0,-14
    5d08:	48 00 02 3c 	b       5f44 <sctp_setsockopt_associnfo+0x35c>

	asoc = sctp_id2assoc(sk, assocparams.sasoc_assoc_id);
    5d0c:	80 01 00 48 	lwz     r0,72(r1)
    5d10:	80 61 00 68 	lwz     r3,104(r1)
    5d14:	7c 04 03 78 	mr      r4,r0
    5d18:	48 00 00 01 	bl      5d18 <sctp_setsockopt_associnfo+0x130>
    5d1c:	90 61 00 14 	stw     r3,20(r1)

	if (!asoc && assocparams.sasoc_assoc_id && sctp_style(sk, UDP))
    5d20:	80 01 00 14 	lwz     r0,20(r1)
    5d24:	2f 80 00 00 	cmpwi   cr7,r0,0
    5d28:	40 9e 00 54 	bne-    cr7,5d7c <sctp_setsockopt_associnfo+0x194>
    5d2c:	80 01 00 48 	lwz     r0,72(r1)
    5d30:	2f 80 00 00 	cmpwi   cr7,r0,0
    5d34:	41 9e 00 48 	beq-    cr7,5d7c <sctp_setsockopt_associnfo+0x194>
    5d38:	80 01 00 68 	lwz     r0,104(r1)
    5d3c:	90 01 00 34 	stw     r0,52(r1)
    5d40:	38 00 00 00 	li      r0,0
    5d44:	90 01 00 38 	stw     r0,56(r1)
    5d48:	80 01 00 34 	lwz     r0,52(r1)
    5d4c:	90 01 00 3c 	stw     r0,60(r1)
    5d50:	80 01 00 3c 	lwz     r0,60(r1)
    5d54:	7c 09 03 78 	mr      r9,r0
    5d58:	80 09 01 c8 	lwz     r0,456(r9)
    5d5c:	81 21 00 38 	lwz     r9,56(r1)
    5d60:	7f 89 00 00 	cmpw    cr7,r9,r0
    5d64:	7c 00 00 26 	mfcr    r0
    5d68:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
    5d6c:	2f 80 00 00 	cmpwi   cr7,r0,0
    5d70:	41 9e 00 0c 	beq-    cr7,5d7c <sctp_setsockopt_associnfo+0x194>
		return -EINVAL;
    5d74:	38 00 ff ea 	li      r0,-22
    5d78:	48 00 01 cc 	b       5f44 <sctp_setsockopt_associnfo+0x35c>

	/* Set the values to the specific association */
	if (asoc) {
    5d7c:	80 01 00 14 	lwz     r0,20(r1)
    5d80:	2f 80 00 00 	cmpwi   cr7,r0,0
    5d84:	41 9e 01 6c 	beq-    cr7,5ef0 <sctp_setsockopt_associnfo+0x308>
		if (assocparams.sasoc_asocmaxrxt != 0) {
    5d88:	a0 01 00 4c 	lhz     r0,76(r1)
    5d8c:	54 00 04 3e 	clrlwi  r0,r0,16
    5d90:	2f 80 00 00 	cmpwi   cr7,r0,0
    5d94:	41 9e 00 f8 	beq-    cr7,5e8c <sctp_setsockopt_associnfo+0x2a4>
			__u32 path_sum = 0;
    5d98:	38 00 00 00 	li      r0,0
    5d9c:	90 01 00 08 	stw     r0,8(r1)
			int   paths = 0;
    5da0:	38 00 00 00 	li      r0,0
    5da4:	90 01 00 0c 	stw     r0,12(r1)
			struct sctp_transport *peer_addr;

			list_for_each_entry(peer_addr, &asoc->peer.transport_addr_list,
    5da8:	80 01 00 14 	lwz     r0,20(r1)
    5dac:	7c 0a 03 78 	mr      r10,r0
    5db0:	80 0a 00 e8 	lwz     r0,232(r10)
    5db4:	90 01 00 18 	stw     r0,24(r1)
    5db8:	80 01 00 18 	lwz     r0,24(r1)
    5dbc:	90 01 00 10 	stw     r0,16(r1)
    5dc0:	48 00 00 44 	b       5e04 <sctp_setsockopt_associnfo+0x21c>
					transports) {
				path_sum += peer_addr->pathmaxrxt;
    5dc4:	80 01 00 10 	lwz     r0,16(r1)
    5dc8:	7c 0b 03 78 	mr      r11,r0
    5dcc:	a0 0b 00 8c 	lhz     r0,140(r11)
    5dd0:	54 00 04 3e 	clrlwi  r0,r0,16
    5dd4:	81 21 00 08 	lwz     r9,8(r1)
    5dd8:	7c 09 02 14 	add     r0,r9,r0
    5ddc:	90 01 00 08 	stw     r0,8(r1)
				paths++;
    5de0:	80 01 00 0c 	lwz     r0,12(r1)
    5de4:	30 00 00 01 	addic   r0,r0,1
    5de8:	90 01 00 0c 	stw     r0,12(r1)
		if (assocparams.sasoc_asocmaxrxt != 0) {
			__u32 path_sum = 0;
			int   paths = 0;
			struct sctp_transport *peer_addr;

			list_for_each_entry(peer_addr, &asoc->peer.transport_addr_list,
    5dec:	80 01 00 10 	lwz     r0,16(r1)
    5df0:	7c 09 03 78 	mr      r9,r0
    5df4:	80 09 00 00 	lwz     r0,0(r9)
    5df8:	90 01 00 1c 	stw     r0,28(r1)
    5dfc:	80 01 00 1c 	lwz     r0,28(r1)
    5e00:	90 01 00 10 	stw     r0,16(r1)
    5e04:	80 01 00 10 	lwz     r0,16(r1)
    5e08:	7c 0a 03 78 	mr      r10,r0
    5e0c:	80 0a 00 00 	lwz     r0,0(r10)
    5e10:	90 01 00 40 	stw     r0,64(r1)
#define ARCH_HAS_PREFETCHW
#define ARCH_HAS_SPINLOCK_PREFETCH

static inline void prefetch(const void *x)
{
	if (unlikely(!x))
    5e14:	80 01 00 40 	lwz     r0,64(r1)
    5e18:	2f 80 00 00 	cmpwi   cr7,r0,0
    5e1c:	7c 00 00 26 	mfcr    r0
    5e20:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
    5e24:	2f 80 00 00 	cmpwi   cr7,r0,0
    5e28:	40 9e 00 0c 	bne-    cr7,5e34 <sctp_setsockopt_associnfo+0x24c>
		return;

	__asm__ __volatile__ ("dcbt 0,%0" : : "r" (x));
    5e2c:	80 01 00 40 	lwz     r0,64(r1)
    5e30:	7c 00 02 2c 	dcbt    r0,r0
    5e34:	81 21 00 10 	lwz     r9,16(r1)
    5e38:	80 01 00 14 	lwz     r0,20(r1)
    5e3c:	30 00 00 e8 	addic   r0,r0,232
    5e40:	7f 89 00 00 	cmpw    cr7,r9,r0
    5e44:	40 9e ff 80 	bne+    cr7,5dc4 <sctp_setsockopt_associnfo+0x1dc>
			/* Only validate asocmaxrxt if we have more than
			 * one path/transport.  We do this because path
			 * retransmissions are only counted when we have more
			 * then one path.
			 */
			if (paths > 1 &&
    5e48:	80 01 00 0c 	lwz     r0,12(r1)
    5e4c:	2f 80 00 01 	cmpwi   cr7,r0,1
    5e50:	40 9d 00 24 	ble-    cr7,5e74 <sctp_setsockopt_associnfo+0x28c>
			    assocparams.sasoc_asocmaxrxt > path_sum)
    5e54:	a0 01 00 4c 	lhz     r0,76(r1)
    5e58:	54 00 04 3e 	clrlwi  r0,r0,16
    5e5c:	7c 09 03 78 	mr      r9,r0
			/* Only validate asocmaxrxt if we have more than
			 * one path/transport.  We do this because path
			 * retransmissions are only counted when we have more
			 * then one path.
			 */
			if (paths > 1 &&
    5e60:	80 01 00 08 	lwz     r0,8(r1)
    5e64:	7f 89 00 40 	cmplw   cr7,r9,r0
    5e68:	40 9d 00 0c 	ble-    cr7,5e74 <sctp_setsockopt_associnfo+0x28c>
			    assocparams.sasoc_asocmaxrxt > path_sum)
				return -EINVAL;
    5e6c:	38 00 ff ea 	li      r0,-22
    5e70:	48 00 00 d4 	b       5f44 <sctp_setsockopt_associnfo+0x35c>

			asoc->max_retrans = assocparams.sasoc_asocmaxrxt;
    5e74:	a0 01 00 4c 	lhz     r0,76(r1)
    5e78:	54 00 04 3e 	clrlwi  r0,r0,16
    5e7c:	7c 09 03 78 	mr      r9,r0
    5e80:	80 01 00 14 	lwz     r0,20(r1)
    5e84:	7c 0b 03 78 	mr      r11,r0
    5e88:	91 2b 01 d8 	stw     r9,472(r11)
		}

		if (assocparams.sasoc_cookie_life != 0) {
    5e8c:	80 01 00 58 	lwz     r0,88(r1)
    5e90:	2f 80 00 00 	cmpwi   cr7,r0,0
    5e94:	41 9e 00 ac 	beq-    cr7,5f40 <sctp_setsockopt_associnfo+0x358>
			asoc->cookie_life.tv_sec =
					assocparams.sasoc_cookie_life / 1000;
    5e98:	81 21 00 58 	lwz     r9,88(r1)
    5e9c:	3c 00 10 62 	lis     r0,4194
    5ea0:	60 00 4d d3 	ori     r0,r0,19923
    5ea4:	7c 09 00 16 	mulhwu  r0,r9,r0
    5ea8:	54 00 d1 be 	rlwinm  r0,r0,26,6,31

			asoc->max_retrans = assocparams.sasoc_asocmaxrxt;
		}

		if (assocparams.sasoc_cookie_life != 0) {
			asoc->cookie_life.tv_sec =
    5eac:	7c 09 03 78 	mr      r9,r0
    5eb0:	80 01 00 14 	lwz     r0,20(r1)
    5eb4:	7c 0a 03 78 	mr      r10,r0
    5eb8:	91 2a 01 bc 	stw     r9,444(r10)
					assocparams.sasoc_cookie_life / 1000;
			asoc->cookie_life.tv_usec =
					(assocparams.sasoc_cookie_life % 1000)
    5ebc:	81 21 00 58 	lwz     r9,88(r1)
    5ec0:	3c 00 10 62 	lis     r0,4194
    5ec4:	60 00 4d d3 	ori     r0,r0,19923
    5ec8:	7c 09 00 16 	mulhwu  r0,r9,r0
    5ecc:	54 00 d1 be 	rlwinm  r0,r0,26,6,31
    5ed0:	1c 00 03 e8 	mulli   r0,r0,1000
    5ed4:	7c 00 48 50 	subf    r0,r0,r9
					* 1000;
    5ed8:	1c 00 03 e8 	mulli   r0,r0,1000
		}

		if (assocparams.sasoc_cookie_life != 0) {
			asoc->cookie_life.tv_sec =
					assocparams.sasoc_cookie_life / 1000;
			asoc->cookie_life.tv_usec =
    5edc:	7c 09 03 78 	mr      r9,r0
    5ee0:	80 01 00 14 	lwz     r0,20(r1)
    5ee4:	7c 0b 03 78 	mr      r11,r0
    5ee8:	91 2b 01 c0 	stw     r9,448(r11)
    5eec:	48 00 00 54 	b       5f40 <sctp_setsockopt_associnfo+0x358>
    5ef0:	80 01 00 68 	lwz     r0,104(r1)
    5ef4:	90 01 00 44 	stw     r0,68(r1)
    5ef8:	80 01 00 44 	lwz     r0,68(r1)
					(assocparams.sasoc_cookie_life % 1000)
					* 1000;
		}
	} else {
		/* Set the values to the endpoint */
		struct sctp_sock *sp = sctp_sk(sk);
    5efc:	90 01 00 20 	stw     r0,32(r1)

		if (assocparams.sasoc_asocmaxrxt != 0)
    5f00:	a0 01 00 4c 	lhz     r0,76(r1)
    5f04:	54 00 04 3e 	clrlwi  r0,r0,16
    5f08:	2f 80 00 00 	cmpwi   cr7,r0,0
    5f0c:	41 9e 00 18 	beq-    cr7,5f24 <sctp_setsockopt_associnfo+0x33c>
			sp->assocparams.sasoc_asocmaxrxt =
						assocparams.sasoc_asocmaxrxt;
    5f10:	a0 01 00 4c 	lhz     r0,76(r1)
    5f14:	54 09 04 3e 	clrlwi  r9,r0,16
	} else {
		/* Set the values to the endpoint */
		struct sctp_sock *sp = sctp_sk(sk);

		if (assocparams.sasoc_asocmaxrxt != 0)
			sp->assocparams.sasoc_asocmaxrxt =
    5f18:	80 01 00 20 	lwz     r0,32(r1)
    5f1c:	7c 0a 03 78 	mr      r10,r0
    5f20:	b1 2a 02 d0 	sth     r9,720(r10)
						assocparams.sasoc_asocmaxrxt;
		if (assocparams.sasoc_cookie_life != 0)
    5f24:	80 01 00 58 	lwz     r0,88(r1)
    5f28:	2f 80 00 00 	cmpwi   cr7,r0,0
    5f2c:	41 9e 00 14 	beq-    cr7,5f40 <sctp_setsockopt_associnfo+0x358>
			sp->assocparams.sasoc_cookie_life =
						assocparams.sasoc_cookie_life;
    5f30:	81 21 00 58 	lwz     r9,88(r1)

		if (assocparams.sasoc_asocmaxrxt != 0)
			sp->assocparams.sasoc_asocmaxrxt =
						assocparams.sasoc_asocmaxrxt;
		if (assocparams.sasoc_cookie_life != 0)
			sp->assocparams.sasoc_cookie_life =
    5f34:	80 01 00 20 	lwz     r0,32(r1)
    5f38:	7c 0b 03 78 	mr      r11,r0
    5f3c:	91 2b 02 dc 	stw     r9,732(r11)
						assocparams.sasoc_cookie_life;
	}
	return 0;
    5f40:	38 00 00 00 	li      r0,0
}
    5f44:	7c 03 03 78 	mr      r3,r0
    5f48:	80 01 00 84 	lwz     r0,132(r1)
    5f4c:	7c 08 03 a6 	mtlr    r0
    5f50:	38 21 00 80 	addi    r1,r1,128
    5f54:	4e 80 00 20 	blr

00005f58 <sctp_setsockopt_mappedv4>:
 * If this option is turned off, then no mapping will be done of V4
 * addresses and a user will receive both PF_INET6 and PF_INET type
 * addresses on the socket.
 */
static int sctp_setsockopt_mappedv4(struct sock *sk, char __user *optval, unsigned int optlen)
{
    5f58:	94 21 ff c0 	stwu    r1,-64(r1)
    5f5c:	bf c1 00 38 	stmw    r30,56(r1)
    5f60:	90 61 00 28 	stw     r3,40(r1)
    5f64:	90 81 00 2c 	stw     r4,44(r1)
    5f68:	90 a1 00 30 	stw     r5,48(r1)
    5f6c:	80 01 00 28 	lwz     r0,40(r1)
    5f70:	90 01 00 1c 	stw     r0,28(r1)
    5f74:	80 01 00 1c 	lwz     r0,28(r1)
	int val;
	struct sctp_sock *sp = sctp_sk(sk);
    5f78:	90 01 00 10 	stw     r0,16(r1)

	if (optlen < sizeof(int))
    5f7c:	80 01 00 30 	lwz     r0,48(r1)
    5f80:	2b 80 00 03 	cmplwi  cr7,r0,3
    5f84:	41 9d 00 0c 	bgt-    cr7,5f90 <sctp_setsockopt_mappedv4+0x38>
		return -EINVAL;
    5f88:	38 00 ff ea 	li      r0,-22
    5f8c:	48 00 00 dc 	b       6068 <sctp_setsockopt_mappedv4+0x110>
	if (get_user(val, (int __user *)optval))
    5f90:	38 00 ff f2 	li      r0,-14
    5f94:	90 01 00 08 	stw     r0,8(r1)
    5f98:	38 00 00 00 	li      r0,0
    5f9c:	90 01 00 0c 	stw     r0,12(r1)
    5fa0:	80 01 00 2c 	lwz     r0,44(r1)
    5fa4:	90 01 00 14 	stw     r0,20(r1)
    5fa8:	81 21 00 14 	lwz     r9,20(r1)
    5fac:	7c 40 13 78 	mr      r0,r2
    5fb0:	7c 0b 03 78 	mr      r11,r0
    5fb4:	80 0b 01 d4 	lwz     r0,468(r11)
    5fb8:	7f 89 00 40 	cmplw   cr7,r9,r0
    5fbc:	41 9d 00 28 	bgt-    cr7,5fe4 <sctp_setsockopt_mappedv4+0x8c>
    5fc0:	7c 40 13 78 	mr      r0,r2
    5fc4:	7c 0b 03 78 	mr      r11,r0
    5fc8:	81 2b 01 d4 	lwz     r9,468(r11)
    5fcc:	80 01 00 14 	lwz     r0,20(r1)
    5fd0:	7c 00 48 50 	subf    r0,r0,r9
    5fd4:	2b 80 00 02 	cmplwi  cr7,r0,2
    5fd8:	40 9d 00 0c 	ble-    cr7,5fe4 <sctp_setsockopt_mappedv4+0x8c>
    5fdc:	38 00 00 01 	li      r0,1
    5fe0:	48 00 00 08 	b       5fe8 <sctp_setsockopt_mappedv4+0x90>
    5fe4:	38 00 00 00 	li      r0,0
    5fe8:	2f 80 00 00 	cmpwi   cr7,r0,0
    5fec:	41 9e 00 2c 	beq-    cr7,6018 <sctp_setsockopt_mappedv4+0xc0>
    5ff0:	38 00 00 00 	li      r0,0
    5ff4:	90 01 00 08 	stw     r0,8(r1)
    5ff8:	80 01 00 14 	lwz     r0,20(r1)
    5ffc:	81 21 00 08 	lwz     r9,8(r1)
    6000:	7d 3f 4b 78 	mr      r31,r9
    6004:	7c 09 03 78 	mr      r9,r0
    6008:	83 c9 00 00 	lwz     r30,0(r9)
    600c:	93 e1 00 08 	stw     r31,8(r1)
    6010:	93 c1 00 0c 	stw     r30,12(r1)
    6014:	60 00 00 00 	nop
    6018:	80 01 00 0c 	lwz     r0,12(r1)
    601c:	90 01 00 18 	stw     r0,24(r1)
    6020:	80 01 00 08 	lwz     r0,8(r1)
    6024:	2f 80 00 00 	cmpwi   cr7,r0,0
    6028:	41 9e 00 0c 	beq-    cr7,6034 <sctp_setsockopt_mappedv4+0xdc>
		return -EFAULT;
    602c:	38 00 ff f2 	li      r0,-14
    6030:	48 00 00 38 	b       6068 <sctp_setsockopt_mappedv4+0x110>
	if (val)
    6034:	80 01 00 18 	lwz     r0,24(r1)
    6038:	2f 80 00 00 	cmpwi   cr7,r0,0
    603c:	41 9e 00 18 	beq-    cr7,6054 <sctp_setsockopt_mappedv4+0xfc>
		sp->v4mapped = 1;
    6040:	80 01 00 10 	lwz     r0,16(r1)
    6044:	39 20 00 01 	li      r9,1
    6048:	7c 0b 03 78 	mr      r11,r0
    604c:	99 2b 02 ea 	stb     r9,746(r11)
    6050:	48 00 00 14 	b       6064 <sctp_setsockopt_mappedv4+0x10c>
	else
		sp->v4mapped = 0;
    6054:	80 01 00 10 	lwz     r0,16(r1)
    6058:	39 20 00 00 	li      r9,0
    605c:	7c 0b 03 78 	mr      r11,r0
    6060:	99 2b 02 ea 	stb     r9,746(r11)

	return 0;
    6064:	38 00 00 00 	li      r0,0
}
    6068:	7c 03 03 78 	mr      r3,r0
    606c:	bb c1 00 38 	lmw     r30,56(r1)
    6070:	38 21 00 40 	addi    r1,r1,64
    6074:	4e 80 00 20 	blr

00006078 <sctp_setsockopt_maxseg>:
 *    this field's value is zero then the endpoints default value is
 *    changed (effecting future associations only).
 * assoc_value:  This parameter specifies the maximum size in bytes.
 */
static int sctp_setsockopt_maxseg(struct sock *sk, char __user *optval, unsigned int optlen)
{
    6078:	94 21 ff 70 	stwu    r1,-144(r1)
    607c:	7c 08 02 a6 	mflr    r0
    6080:	90 01 00 94 	stw     r0,148(r1)
    6084:	90 61 00 78 	stw     r3,120(r1)
    6088:	90 81 00 7c 	stw     r4,124(r1)
    608c:	90 a1 00 80 	stw     r5,128(r1)
    6090:	80 01 00 78 	lwz     r0,120(r1)
    6094:	90 01 00 10 	stw     r0,16(r1)
    6098:	80 01 00 10 	lwz     r0,16(r1)
	struct sctp_assoc_value params;
	struct sctp_association *asoc;
	struct sctp_sock *sp = sctp_sk(sk);
    609c:	90 01 00 08 	stw     r0,8(r1)
	int val;

	if (optlen == sizeof(int)) {
    60a0:	80 01 00 80 	lwz     r0,128(r1)
    60a4:	2f 80 00 04 	cmpwi   cr7,r0,4
    60a8:	40 9e 01 20 	bne-    cr7,61c8 <sctp_setsockopt_maxseg+0x150>
		pr_warn("Use of int in maxseg socket option deprecated\n");
    60ac:	3c 00 00 00 	lis     r0,0
    60b0:	30 60 00 ac 	addic   r3,r0,172
    60b4:	48 00 00 01 	bl      60b4 <sctp_setsockopt_maxseg+0x3c>
		pr_warn("Use struct sctp_assoc_value instead\n");
    60b8:	3c 00 00 00 	lis     r0,0
    60bc:	30 60 00 e4 	addic   r3,r0,228
    60c0:	48 00 00 01 	bl      60c0 <sctp_setsockopt_maxseg+0x48>
		if (copy_from_user(&val, optval, optlen))
    60c4:	38 01 00 6c 	addi    r0,r1,108
	struct sctp_sock *sp = sctp_sk(sk);
	int val;

	if (optlen == sizeof(int)) {
		pr_warn("Use of int in maxseg socket option deprecated\n");
		pr_warn("Use struct sctp_assoc_value instead\n");
    60c8:	90 01 00 14 	stw     r0,20(r1)
    60cc:	80 01 00 7c 	lwz     r0,124(r1)
    60d0:	90 01 00 18 	stw     r0,24(r1)
    60d4:	80 01 00 80 	lwz     r0,128(r1)
    60d8:	90 01 00 1c 	stw     r0,28(r1)
static inline unsigned long copy_from_user(void *to,
		const void __user *from, unsigned long n)
{
	unsigned long over;

	if (access_ok(VERIFY_READ, from, n))
    60dc:	81 21 00 18 	lwz     r9,24(r1)
    60e0:	7c 40 13 78 	mr      r0,r2
    60e4:	7c 0a 03 78 	mr      r10,r0
    60e8:	80 0a 01 d4 	lwz     r0,468(r10)
    60ec:	7f 89 00 40 	cmplw   cr7,r9,r0
    60f0:	41 9d 00 3c 	bgt-    cr7,612c <sctp_setsockopt_maxseg+0xb4>
    60f4:	80 01 00 1c 	lwz     r0,28(r1)
    60f8:	2f 80 00 00 	cmpwi   cr7,r0,0
    60fc:	41 9e 00 28 	beq-    cr7,6124 <sctp_setsockopt_maxseg+0xac>
    6100:	80 01 00 1c 	lwz     r0,28(r1)
    6104:	31 20 ff ff 	addic   r9,r0,-1
    6108:	7c 40 13 78 	mr      r0,r2
    610c:	7c 0a 03 78 	mr      r10,r0
    6110:	81 6a 01 d4 	lwz     r11,468(r10)
    6114:	80 01 00 18 	lwz     r0,24(r1)
    6118:	7c 00 58 50 	subf    r0,r0,r11
    611c:	7f 89 00 40 	cmplw   cr7,r9,r0
    6120:	41 9d 00 0c 	bgt-    cr7,612c <sctp_setsockopt_maxseg+0xb4>
    6124:	38 00 00 01 	li      r0,1
    6128:	48 00 00 08 	b       6130 <sctp_setsockopt_maxseg+0xb8>
    612c:	38 00 00 00 	li      r0,0
    6130:	2f 80 00 00 	cmpwi   cr7,r0,0
    6134:	41 9e 00 1c 	beq-    cr7,6150 <sctp_setsockopt_maxseg+0xd8>
		return __copy_tofrom_user((__force void __user *)to, from, n);
    6138:	80 61 00 14 	lwz     r3,20(r1)
    613c:	80 81 00 18 	lwz     r4,24(r1)
    6140:	80 a1 00 1c 	lwz     r5,28(r1)
    6144:	48 00 00 01 	bl      6144 <sctp_setsockopt_maxseg+0xcc>
    6148:	7c 60 1b 78 	mr      r0,r3
    614c:	48 00 00 60 	b       61ac <sctp_setsockopt_maxseg+0x134>
	if ((unsigned long)from < TASK_SIZE) {
    6150:	81 21 00 18 	lwz     r9,24(r1)
    6154:	3c 00 bf ff 	lis     r0,-16385
    6158:	60 00 ff ff 	ori     r0,r0,65535
    615c:	7f 89 00 40 	cmplw   cr7,r9,r0
    6160:	41 9d 00 48 	bgt-    cr7,61a8 <sctp_setsockopt_maxseg+0x130>
		over = (unsigned long)from + n - TASK_SIZE;
    6164:	81 21 00 18 	lwz     r9,24(r1)
    6168:	80 01 00 1c 	lwz     r0,28(r1)
    616c:	7c 09 02 14 	add     r0,r9,r0
    6170:	3d 60 40 00 	lis     r11,16384
    6174:	7c 00 5a 14 	add     r0,r0,r11
    6178:	90 01 00 20 	stw     r0,32(r1)
		return __copy_tofrom_user((__force void __user *)to, from,
    617c:	81 21 00 1c 	lwz     r9,28(r1)
    6180:	80 01 00 20 	lwz     r0,32(r1)
    6184:	7c 00 48 50 	subf    r0,r0,r9
    6188:	80 61 00 14 	lwz     r3,20(r1)
    618c:	80 81 00 18 	lwz     r4,24(r1)
    6190:	7c 05 03 78 	mr      r5,r0
    6194:	48 00 00 01 	bl      6194 <sctp_setsockopt_maxseg+0x11c>
    6198:	7c 69 1b 78 	mr      r9,r3
    619c:	80 01 00 20 	lwz     r0,32(r1)
    61a0:	7c 09 02 14 	add     r0,r9,r0
    61a4:	48 00 00 08 	b       61ac <sctp_setsockopt_maxseg+0x134>
				n - over) + over;
	}
	return n;
    61a8:	80 01 00 1c 	lwz     r0,28(r1)
		if (copy_from_user(&val, optval, optlen))
    61ac:	2f 80 00 00 	cmpwi   cr7,r0,0
    61b0:	41 9e 00 0c 	beq-    cr7,61bc <sctp_setsockopt_maxseg+0x144>
			return -EFAULT;
    61b4:	38 00 ff f2 	li      r0,-14
    61b8:	48 00 03 4c 	b       6504 <sctp_setsockopt_maxseg+0x48c>
		params.assoc_id = 0;
    61bc:	38 00 00 00 	li      r0,0
    61c0:	90 01 00 64 	stw     r0,100(r1)
    61c4:	48 00 01 1c 	b       62e0 <sctp_setsockopt_maxseg+0x268>
	} else if (optlen == sizeof(struct sctp_assoc_value)) {
    61c8:	80 01 00 80 	lwz     r0,128(r1)
    61cc:	2f 80 00 08 	cmpwi   cr7,r0,8
    61d0:	40 9e 01 08 	bne-    cr7,62d8 <sctp_setsockopt_maxseg+0x260>
		if (copy_from_user(&params, optval, optlen))
    61d4:	38 01 00 64 	addi    r0,r1,100
		pr_warn("Use of int in maxseg socket option deprecated\n");
		pr_warn("Use struct sctp_assoc_value instead\n");
		if (copy_from_user(&val, optval, optlen))
			return -EFAULT;
		params.assoc_id = 0;
	} else if (optlen == sizeof(struct sctp_assoc_value)) {
    61d8:	90 01 00 24 	stw     r0,36(r1)
    61dc:	80 01 00 7c 	lwz     r0,124(r1)
    61e0:	90 01 00 28 	stw     r0,40(r1)
    61e4:	80 01 00 80 	lwz     r0,128(r1)
    61e8:	90 01 00 2c 	stw     r0,44(r1)
static inline unsigned long copy_from_user(void *to,
		const void __user *from, unsigned long n)
{
	unsigned long over;

	if (access_ok(VERIFY_READ, from, n))
    61ec:	81 21 00 28 	lwz     r9,40(r1)
    61f0:	7c 40 13 78 	mr      r0,r2
    61f4:	7c 0a 03 78 	mr      r10,r0
    61f8:	80 0a 01 d4 	lwz     r0,468(r10)
    61fc:	7f 89 00 40 	cmplw   cr7,r9,r0
    6200:	41 9d 00 3c 	bgt-    cr7,623c <sctp_setsockopt_maxseg+0x1c4>
    6204:	80 01 00 2c 	lwz     r0,44(r1)
    6208:	2f 80 00 00 	cmpwi   cr7,r0,0
    620c:	41 9e 00 28 	beq-    cr7,6234 <sctp_setsockopt_maxseg+0x1bc>
    6210:	80 01 00 2c 	lwz     r0,44(r1)
    6214:	31 20 ff ff 	addic   r9,r0,-1
    6218:	7c 40 13 78 	mr      r0,r2
    621c:	7c 0a 03 78 	mr      r10,r0
    6220:	81 6a 01 d4 	lwz     r11,468(r10)
    6224:	80 01 00 28 	lwz     r0,40(r1)
    6228:	7c 00 58 50 	subf    r0,r0,r11
    622c:	7f 89 00 40 	cmplw   cr7,r9,r0
    6230:	41 9d 00 0c 	bgt-    cr7,623c <sctp_setsockopt_maxseg+0x1c4>
    6234:	38 00 00 01 	li      r0,1
    6238:	48 00 00 08 	b       6240 <sctp_setsockopt_maxseg+0x1c8>
    623c:	38 00 00 00 	li      r0,0
    6240:	2f 80 00 00 	cmpwi   cr7,r0,0
    6244:	41 9e 00 1c 	beq-    cr7,6260 <sctp_setsockopt_maxseg+0x1e8>
		return __copy_tofrom_user((__force void __user *)to, from, n);
    6248:	80 61 00 24 	lwz     r3,36(r1)
    624c:	80 81 00 28 	lwz     r4,40(r1)
    6250:	80 a1 00 2c 	lwz     r5,44(r1)
    6254:	48 00 00 01 	bl      6254 <sctp_setsockopt_maxseg+0x1dc>
    6258:	7c 60 1b 78 	mr      r0,r3
    625c:	48 00 00 60 	b       62bc <sctp_setsockopt_maxseg+0x244>
	if ((unsigned long)from < TASK_SIZE) {
    6260:	81 21 00 28 	lwz     r9,40(r1)
    6264:	3c 00 bf ff 	lis     r0,-16385
    6268:	60 00 ff ff 	ori     r0,r0,65535
    626c:	7f 89 00 40 	cmplw   cr7,r9,r0
    6270:	41 9d 00 48 	bgt-    cr7,62b8 <sctp_setsockopt_maxseg+0x240>
		over = (unsigned long)from + n - TASK_SIZE;
    6274:	81 21 00 28 	lwz     r9,40(r1)
    6278:	80 01 00 2c 	lwz     r0,44(r1)
    627c:	7c 09 02 14 	add     r0,r9,r0
    6280:	3d 60 40 00 	lis     r11,16384
    6284:	7c 00 5a 14 	add     r0,r0,r11
    6288:	90 01 00 30 	stw     r0,48(r1)
		return __copy_tofrom_user((__force void __user *)to, from,
    628c:	81 21 00 2c 	lwz     r9,44(r1)
    6290:	80 01 00 30 	lwz     r0,48(r1)
    6294:	7c 00 48 50 	subf    r0,r0,r9
    6298:	80 61 00 24 	lwz     r3,36(r1)
    629c:	80 81 00 28 	lwz     r4,40(r1)
    62a0:	7c 05 03 78 	mr      r5,r0
    62a4:	48 00 00 01 	bl      62a4 <sctp_setsockopt_maxseg+0x22c>
    62a8:	7c 69 1b 78 	mr      r9,r3
    62ac:	80 01 00 30 	lwz     r0,48(r1)
    62b0:	7c 09 02 14 	add     r0,r9,r0
    62b4:	48 00 00 08 	b       62bc <sctp_setsockopt_maxseg+0x244>
				n - over) + over;
	}
	return n;
    62b8:	80 01 00 2c 	lwz     r0,44(r1)
		if (copy_from_user(&params, optval, optlen))
    62bc:	2f 80 00 00 	cmpwi   cr7,r0,0
    62c0:	41 9e 00 0c 	beq-    cr7,62cc <sctp_setsockopt_maxseg+0x254>
			return -EFAULT;
    62c4:	38 00 ff f2 	li      r0,-14
    62c8:	48 00 02 3c 	b       6504 <sctp_setsockopt_maxseg+0x48c>
		val = params.assoc_value;
    62cc:	80 01 00 68 	lwz     r0,104(r1)
    62d0:	90 01 00 6c 	stw     r0,108(r1)
    62d4:	48 00 00 0c 	b       62e0 <sctp_setsockopt_maxseg+0x268>
	} else
		return -EINVAL;
    62d8:	38 00 ff ea 	li      r0,-22
    62dc:	48 00 02 28 	b       6504 <sctp_setsockopt_maxseg+0x48c>

	if ((val != 0) && ((val < 8) || (val > SCTP_MAX_CHUNK_LEN)))
    62e0:	80 01 00 6c 	lwz     r0,108(r1)
    62e4:	2f 80 00 00 	cmpwi   cr7,r0,0
    62e8:	41 9e 00 2c 	beq-    cr7,6314 <sctp_setsockopt_maxseg+0x29c>
    62ec:	80 01 00 6c 	lwz     r0,108(r1)
    62f0:	2f 80 00 07 	cmpwi   cr7,r0,7
    62f4:	40 9d 00 18 	ble-    cr7,630c <sctp_setsockopt_maxseg+0x294>
    62f8:	81 21 00 6c 	lwz     r9,108(r1)
    62fc:	38 00 00 00 	li      r0,0
    6300:	60 00 ff fc 	ori     r0,r0,65532
    6304:	7f 89 00 00 	cmpw    cr7,r9,r0
    6308:	40 9d 00 0c 	ble-    cr7,6314 <sctp_setsockopt_maxseg+0x29c>
		return -EINVAL;
    630c:	38 00 ff ea 	li      r0,-22
    6310:	48 00 01 f4 	b       6504 <sctp_setsockopt_maxseg+0x48c>

	asoc = sctp_id2assoc(sk, params.assoc_id);
    6314:	80 01 00 64 	lwz     r0,100(r1)
    6318:	80 61 00 78 	lwz     r3,120(r1)
    631c:	7c 04 03 78 	mr      r4,r0
    6320:	48 00 00 01 	bl      6320 <sctp_setsockopt_maxseg+0x2a8>
    6324:	90 61 00 0c 	stw     r3,12(r1)
	if (!asoc && params.assoc_id && sctp_style(sk, UDP))
    6328:	80 01 00 0c 	lwz     r0,12(r1)
    632c:	2f 80 00 00 	cmpwi   cr7,r0,0
    6330:	40 9e 00 54 	bne-    cr7,6384 <sctp_setsockopt_maxseg+0x30c>
    6334:	80 01 00 64 	lwz     r0,100(r1)
    6338:	2f 80 00 00 	cmpwi   cr7,r0,0
    633c:	41 9e 00 48 	beq-    cr7,6384 <sctp_setsockopt_maxseg+0x30c>
    6340:	80 01 00 78 	lwz     r0,120(r1)
    6344:	90 01 00 34 	stw     r0,52(r1)
    6348:	38 00 00 00 	li      r0,0
    634c:	90 01 00 38 	stw     r0,56(r1)
    6350:	80 01 00 34 	lwz     r0,52(r1)
    6354:	90 01 00 3c 	stw     r0,60(r1)
    6358:	80 01 00 3c 	lwz     r0,60(r1)
    635c:	7c 09 03 78 	mr      r9,r0
    6360:	80 09 01 c8 	lwz     r0,456(r9)
    6364:	81 21 00 38 	lwz     r9,56(r1)
    6368:	7f 89 00 00 	cmpw    cr7,r9,r0
    636c:	7c 00 00 26 	mfcr    r0
    6370:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
    6374:	2f 80 00 00 	cmpwi   cr7,r0,0
    6378:	41 9e 00 0c 	beq-    cr7,6384 <sctp_setsockopt_maxseg+0x30c>
		return -EINVAL;
    637c:	38 00 ff ea 	li      r0,-22
    6380:	48 00 01 84 	b       6504 <sctp_setsockopt_maxseg+0x48c>

	if (asoc) {
    6384:	80 01 00 0c 	lwz     r0,12(r1)
    6388:	2f 80 00 00 	cmpwi   cr7,r0,0
    638c:	41 9e 01 64 	beq-    cr7,64f0 <sctp_setsockopt_maxseg+0x478>
		if (val == 0) {
    6390:	80 01 00 6c 	lwz     r0,108(r1)
    6394:	2f 80 00 00 	cmpwi   cr7,r0,0
    6398:	40 9e 00 4c 	bne-    cr7,63e4 <sctp_setsockopt_maxseg+0x36c>
			val = asoc->pathmtu;
    639c:	80 01 00 0c 	lwz     r0,12(r1)
    63a0:	7c 0a 03 78 	mr      r10,r0
    63a4:	80 0a 01 ec 	lwz     r0,492(r10)
    63a8:	90 01 00 6c 	stw     r0,108(r1)
			val -= sp->pf->af->net_header_len;
    63ac:	81 21 00 6c 	lwz     r9,108(r1)
    63b0:	80 01 00 08 	lwz     r0,8(r1)
    63b4:	7c 0b 03 78 	mr      r11,r0
    63b8:	80 0b 01 cc 	lwz     r0,460(r11)
    63bc:	7c 0a 03 78 	mr      r10,r0
    63c0:	80 0a 00 24 	lwz     r0,36(r10)
    63c4:	7c 0b 03 78 	mr      r11,r0
    63c8:	a0 0b 00 68 	lhz     r0,104(r11)
    63cc:	54 00 04 3e 	clrlwi  r0,r0,16
    63d0:	7c 00 48 50 	subf    r0,r0,r9
    63d4:	90 01 00 6c 	stw     r0,108(r1)
			val -= sizeof(struct sctphdr) +
    63d8:	80 01 00 6c 	lwz     r0,108(r1)
    63dc:	30 00 ff e4 	addic   r0,r0,-28
    63e0:	90 01 00 6c 	stw     r0,108(r1)
					sizeof(struct sctp_data_chunk);
		}
		asoc->user_frag = val;
    63e4:	80 01 00 6c 	lwz     r0,108(r1)
    63e8:	7c 09 03 78 	mr      r9,r0
    63ec:	80 01 00 0c 	lwz     r0,12(r1)
    63f0:	7c 0a 03 78 	mr      r10,r0
    63f4:	91 2a 03 88 	stw     r9,904(r10)
		asoc->frag_point = sctp_frag_point(asoc, asoc->pathmtu);
    63f8:	80 01 00 0c 	lwz     r0,12(r1)
    63fc:	7c 0b 03 78 	mr      r11,r0
    6400:	80 0b 01 ec 	lwz     r0,492(r11)
    6404:	81 21 00 0c 	lwz     r9,12(r1)
    6408:	91 21 00 40 	stw     r9,64(r1)
    640c:	90 01 00 44 	stw     r0,68(r1)
}

/* Break down data chunks at this point.  */
static inline int sctp_frag_point(const struct sctp_association *asoc, int pmtu)
{
	struct sctp_sock *sp = sctp_sk(asoc->base.sk);
    6410:	80 01 00 40 	lwz     r0,64(r1)
    6414:	7c 09 03 78 	mr      r9,r0
    6418:	80 09 00 18 	lwz     r0,24(r9)
    641c:	90 01 00 48 	stw     r0,72(r1)
    6420:	80 01 00 48 	lwz     r0,72(r1)
    6424:	90 01 00 4c 	stw     r0,76(r1)
	int frag = pmtu;
    6428:	80 01 00 44 	lwz     r0,68(r1)
    642c:	90 01 00 50 	stw     r0,80(r1)

	frag -= sp->pf->af->net_header_len;
    6430:	80 01 00 4c 	lwz     r0,76(r1)
    6434:	7c 0a 03 78 	mr      r10,r0
    6438:	80 0a 01 cc 	lwz     r0,460(r10)
    643c:	7c 0b 03 78 	mr      r11,r0
    6440:	80 0b 00 24 	lwz     r0,36(r11)
    6444:	7c 09 03 78 	mr      r9,r0
    6448:	a0 09 00 68 	lhz     r0,104(r9)
    644c:	54 00 04 3e 	clrlwi  r0,r0,16
    6450:	81 21 00 50 	lwz     r9,80(r1)
    6454:	7c 00 48 50 	subf    r0,r0,r9
    6458:	90 01 00 50 	stw     r0,80(r1)
	frag -= sizeof(struct sctphdr) + sizeof(struct sctp_data_chunk);
    645c:	80 01 00 50 	lwz     r0,80(r1)
    6460:	30 00 ff e4 	addic   r0,r0,-28
    6464:	90 01 00 50 	stw     r0,80(r1)

	if (asoc->user_frag)
    6468:	80 01 00 40 	lwz     r0,64(r1)
    646c:	7c 0a 03 78 	mr      r10,r0
    6470:	80 0a 03 88 	lwz     r0,904(r10)
    6474:	2f 80 00 00 	cmpwi   cr7,r0,0
    6478:	41 9e 00 34 	beq-    cr7,64ac <sctp_setsockopt_maxseg+0x434>
		frag = min_t(int, frag, asoc->user_frag);
    647c:	80 01 00 50 	lwz     r0,80(r1)
    6480:	90 01 00 54 	stw     r0,84(r1)
    6484:	80 01 00 40 	lwz     r0,64(r1)
    6488:	7c 0b 03 78 	mr      r11,r0
    648c:	80 0b 03 88 	lwz     r0,904(r11)
    6490:	90 01 00 58 	stw     r0,88(r1)
    6494:	81 21 00 58 	lwz     r9,88(r1)
    6498:	80 01 00 54 	lwz     r0,84(r1)
    649c:	7f 80 48 00 	cmpw    cr7,r0,r9
    64a0:	40 9d 00 08 	ble-    cr7,64a8 <sctp_setsockopt_maxseg+0x430>
    64a4:	7d 20 4b 78 	mr      r0,r9
    64a8:	90 01 00 50 	stw     r0,80(r1)

	frag = min_t(int, frag, SCTP_MAX_CHUNK_LEN);
    64ac:	80 01 00 50 	lwz     r0,80(r1)
    64b0:	90 01 00 5c 	stw     r0,92(r1)
    64b4:	38 00 00 00 	li      r0,0
    64b8:	60 00 ff fc 	ori     r0,r0,65532
    64bc:	90 01 00 60 	stw     r0,96(r1)
    64c0:	81 21 00 60 	lwz     r9,96(r1)
    64c4:	80 01 00 5c 	lwz     r0,92(r1)
    64c8:	7f 80 48 00 	cmpw    cr7,r0,r9
    64cc:	40 9d 00 08 	ble-    cr7,64d4 <sctp_setsockopt_maxseg+0x45c>
    64d0:	7d 20 4b 78 	mr      r0,r9
    64d4:	90 01 00 50 	stw     r0,80(r1)

	return frag;
    64d8:	80 01 00 50 	lwz     r0,80(r1)
    64dc:	7c 09 03 78 	mr      r9,r0
    64e0:	80 01 00 0c 	lwz     r0,12(r1)
    64e4:	7c 0a 03 78 	mr      r10,r0
    64e8:	91 2a 03 84 	stw     r9,900(r10)
    64ec:	48 00 00 14 	b       6500 <sctp_setsockopt_maxseg+0x488>
	} else {
		sp->user_frag = val;
    64f0:	81 21 00 6c 	lwz     r9,108(r1)
    64f4:	80 01 00 08 	lwz     r0,8(r1)
    64f8:	7c 0b 03 78 	mr      r11,r0
    64fc:	91 2b 02 e0 	stw     r9,736(r11)
	}

	return 0;
    6500:	38 00 00 00 	li      r0,0
}
    6504:	7c 03 03 78 	mr      r3,r0
    6508:	80 01 00 94 	lwz     r0,148(r1)
    650c:	7c 08 03 a6 	mtlr    r0
    6510:	38 21 00 90 	addi    r1,r1,144
    6514:	4e 80 00 20 	blr

00006518 <sctp_setsockopt_peer_primary_addr>:
 *   locally bound addresses. The following structure is used to make a
 *   set primary request:
 */
static int sctp_setsockopt_peer_primary_addr(struct sock *sk, char __user *optval,
					     unsigned int optlen)
{
    6518:	94 21 ff 20 	stwu    r1,-224(r1)
    651c:	7c 08 02 a6 	mflr    r0
    6520:	90 01 00 e4 	stw     r0,228(r1)
    6524:	90 61 00 c8 	stw     r3,200(r1)
    6528:	90 81 00 cc 	stw     r4,204(r1)
    652c:	90 a1 00 d0 	stw     r5,208(r1)
	struct sctp_sock	*sp;
	struct sctp_endpoint	*ep;
	struct sctp_association	*asoc = NULL;
    6530:	38 00 00 00 	li      r0,0
    6534:	90 01 00 08 	stw     r0,8(r1)
    6538:	80 01 00 c8 	lwz     r0,200(r1)
    653c:	90 01 00 20 	stw     r0,32(r1)
    6540:	80 01 00 20 	lwz     r0,32(r1)
	struct sctp_setpeerprim	prim;
	struct sctp_chunk	*chunk;
	struct sctp_af		*af;
	int 			err;

	sp = sctp_sk(sk);
    6544:	90 01 00 0c 	stw     r0,12(r1)
	ep = sp->ep;
    6548:	80 01 00 0c 	lwz     r0,12(r1)
    654c:	7c 09 03 78 	mr      r9,r0
    6550:	80 09 01 d4 	lwz     r0,468(r9)
    6554:	90 01 00 10 	stw     r0,16(r1)

	if (!sctp_addip_enable)
    6558:	3c 00 00 00 	lis     r0,0
    655c:	30 00 00 00 	addic   r0,r0,0
    6560:	7c 0a 03 78 	mr      r10,r0
    6564:	80 0a 00 68 	lwz     r0,104(r10)
    6568:	2f 80 00 00 	cmpwi   cr7,r0,0
    656c:	40 9e 00 0c 	bne-    cr7,6578 <sctp_setsockopt_peer_primary_addr+0x60>
		return -EPERM;
    6570:	38 00 ff ff 	li      r0,-1
    6574:	48 00 02 84 	b       67f8 <sctp_setsockopt_peer_primary_addr+0x2e0>

	if (optlen != sizeof(struct sctp_setpeerprim))
    6578:	80 01 00 d0 	lwz     r0,208(r1)
    657c:	2f 80 00 84 	cmpwi   cr7,r0,132
    6580:	41 9e 00 0c 	beq-    cr7,658c <sctp_setsockopt_peer_primary_addr+0x74>
		return -EINVAL;
    6584:	38 00 ff ea 	li      r0,-22
    6588:	48 00 02 70 	b       67f8 <sctp_setsockopt_peer_primary_addr+0x2e0>

	if (copy_from_user(&prim, optval, optlen))
    658c:	38 01 00 3c 	addi    r0,r1,60

	if (!sctp_addip_enable)
		return -EPERM;

	if (optlen != sizeof(struct sctp_setpeerprim))
		return -EINVAL;
    6590:	90 01 00 24 	stw     r0,36(r1)
    6594:	80 01 00 cc 	lwz     r0,204(r1)
    6598:	90 01 00 28 	stw     r0,40(r1)
    659c:	80 01 00 d0 	lwz     r0,208(r1)
    65a0:	90 01 00 2c 	stw     r0,44(r1)
static inline unsigned long copy_from_user(void *to,
		const void __user *from, unsigned long n)
{
	unsigned long over;

	if (access_ok(VERIFY_READ, from, n))
    65a4:	81 21 00 28 	lwz     r9,40(r1)
    65a8:	7c 40 13 78 	mr      r0,r2
    65ac:	7c 0b 03 78 	mr      r11,r0
    65b0:	80 0b 01 d4 	lwz     r0,468(r11)
    65b4:	7f 89 00 40 	cmplw   cr7,r9,r0
    65b8:	41 9d 00 3c 	bgt-    cr7,65f4 <sctp_setsockopt_peer_primary_addr+0xdc>
    65bc:	80 01 00 2c 	lwz     r0,44(r1)
    65c0:	2f 80 00 00 	cmpwi   cr7,r0,0
    65c4:	41 9e 00 28 	beq-    cr7,65ec <sctp_setsockopt_peer_primary_addr+0xd4>
    65c8:	80 01 00 2c 	lwz     r0,44(r1)
    65cc:	31 20 ff ff 	addic   r9,r0,-1
    65d0:	7c 40 13 78 	mr      r0,r2
    65d4:	7c 0a 03 78 	mr      r10,r0
    65d8:	81 6a 01 d4 	lwz     r11,468(r10)
    65dc:	80 01 00 28 	lwz     r0,40(r1)
    65e0:	7c 00 58 50 	subf    r0,r0,r11
    65e4:	7f 89 00 40 	cmplw   cr7,r9,r0
    65e8:	41 9d 00 0c 	bgt-    cr7,65f4 <sctp_setsockopt_peer_primary_addr+0xdc>
    65ec:	38 00 00 01 	li      r0,1
    65f0:	48 00 00 08 	b       65f8 <sctp_setsockopt_peer_primary_addr+0xe0>
    65f4:	38 00 00 00 	li      r0,0
    65f8:	2f 80 00 00 	cmpwi   cr7,r0,0
    65fc:	41 9e 00 1c 	beq-    cr7,6618 <sctp_setsockopt_peer_primary_addr+0x100>
		return __copy_tofrom_user((__force void __user *)to, from, n);
    6600:	80 61 00 24 	lwz     r3,36(r1)
    6604:	80 81 00 28 	lwz     r4,40(r1)
    6608:	80 a1 00 2c 	lwz     r5,44(r1)
    660c:	48 00 00 01 	bl      660c <sctp_setsockopt_peer_primary_addr+0xf4>
    6610:	7c 60 1b 78 	mr      r0,r3
    6614:	48 00 00 60 	b       6674 <sctp_setsockopt_peer_primary_addr+0x15c>
	if ((unsigned long)from < TASK_SIZE) {
    6618:	81 21 00 28 	lwz     r9,40(r1)
    661c:	3c 00 bf ff 	lis     r0,-16385
    6620:	60 00 ff ff 	ori     r0,r0,65535
    6624:	7f 89 00 40 	cmplw   cr7,r9,r0
    6628:	41 9d 00 48 	bgt-    cr7,6670 <sctp_setsockopt_peer_primary_addr+0x158>
		over = (unsigned long)from + n - TASK_SIZE;
    662c:	81 21 00 28 	lwz     r9,40(r1)
    6630:	80 01 00 2c 	lwz     r0,44(r1)
    6634:	7c 09 02 14 	add     r0,r9,r0
    6638:	3d 60 40 00 	lis     r11,16384
    663c:	7c 00 5a 14 	add     r0,r0,r11
    6640:	90 01 00 30 	stw     r0,48(r1)
		return __copy_tofrom_user((__force void __user *)to, from,
    6644:	81 21 00 2c 	lwz     r9,44(r1)
    6648:	80 01 00 30 	lwz     r0,48(r1)
    664c:	7c 00 48 50 	subf    r0,r0,r9
    6650:	80 61 00 24 	lwz     r3,36(r1)
    6654:	80 81 00 28 	lwz     r4,40(r1)
    6658:	7c 05 03 78 	mr      r5,r0
    665c:	48 00 00 01 	bl      665c <sctp_setsockopt_peer_primary_addr+0x144>
    6660:	7c 69 1b 78 	mr      r9,r3
    6664:	80 01 00 30 	lwz     r0,48(r1)
    6668:	7c 09 02 14 	add     r0,r9,r0
    666c:	48 00 00 08 	b       6674 <sctp_setsockopt_peer_primary_addr+0x15c>
				n - over) + over;
	}
	return n;
    6670:	80 01 00 2c 	lwz     r0,44(r1)

	if (copy_from_user(&prim, optval, optlen))
    6674:	2f 80 00 00 	cmpwi   cr7,r0,0
    6678:	41 9e 00 0c 	beq-    cr7,6684 <sctp_setsockopt_peer_primary_addr+0x16c>
		return -EFAULT;
    667c:	38 00 ff f2 	li      r0,-14
    6680:	48 00 01 78 	b       67f8 <sctp_setsockopt_peer_primary_addr+0x2e0>

	asoc = sctp_id2assoc(sk, prim.sspp_assoc_id);
    6684:	80 01 00 3c 	lwz     r0,60(r1)
    6688:	80 61 00 c8 	lwz     r3,200(r1)
    668c:	7c 04 03 78 	mr      r4,r0
    6690:	48 00 00 01 	bl      6690 <sctp_setsockopt_peer_primary_addr+0x178>
    6694:	90 61 00 08 	stw     r3,8(r1)
	if (!asoc)
    6698:	80 01 00 08 	lwz     r0,8(r1)
    669c:	2f 80 00 00 	cmpwi   cr7,r0,0
    66a0:	40 9e 00 0c 	bne-    cr7,66ac <sctp_setsockopt_peer_primary_addr+0x194>
		return -EINVAL;
    66a4:	38 00 ff ea 	li      r0,-22
    66a8:	48 00 01 50 	b       67f8 <sctp_setsockopt_peer_primary_addr+0x2e0>

	if (!asoc->peer.asconf_capable)
    66ac:	80 01 00 08 	lwz     r0,8(r1)
    66b0:	7c 09 03 78 	mr      r9,r0
    66b4:	80 09 01 84 	lwz     r0,388(r9)
    66b8:	54 00 01 08 	rlwinm  r0,r0,0,4,4
    66bc:	2f 80 00 00 	cmpwi   cr7,r0,0
    66c0:	40 9e 00 0c 	bne-    cr7,66cc <sctp_setsockopt_peer_primary_addr+0x1b4>
		return -EPERM;
    66c4:	38 00 ff ff 	li      r0,-1
    66c8:	48 00 01 30 	b       67f8 <sctp_setsockopt_peer_primary_addr+0x2e0>

	if (asoc->peer.addip_disabled_mask & SCTP_PARAM_SET_PRIMARY)
    66cc:	80 01 00 08 	lwz     r0,8(r1)
    66d0:	7c 0a 03 78 	mr      r10,r0
    66d4:	a0 0a 01 8c 	lhz     r0,396(r10)
    66d8:	54 00 04 3e 	clrlwi  r0,r0,16
    66dc:	70 00 c0 04 	andi.   r0,r0,49156
    66e0:	2f 80 00 00 	cmpwi   cr7,r0,0
    66e4:	41 9e 00 0c 	beq-    cr7,66f0 <sctp_setsockopt_peer_primary_addr+0x1d8>
		return -EPERM;
    66e8:	38 00 ff ff 	li      r0,-1
    66ec:	48 00 01 0c 	b       67f8 <sctp_setsockopt_peer_primary_addr+0x2e0>
    66f0:	80 01 00 08 	lwz     r0,8(r1)
    66f4:	90 01 00 34 	stw     r0,52(r1)
    66f8:	38 00 00 04 	li      r0,4
    66fc:	90 01 00 38 	stw     r0,56(r1)
/* Is the association in this state? */
#define sctp_state(asoc, state) __sctp_state((asoc), (SCTP_STATE_##state))
static inline int __sctp_state(const struct sctp_association *asoc,
			       sctp_state_t state)
{
	return asoc->state == state;
    6700:	80 01 00 34 	lwz     r0,52(r1)
    6704:	7c 09 03 78 	mr      r9,r0
    6708:	80 09 01 b8 	lwz     r0,440(r9)
    670c:	81 21 00 38 	lwz     r9,56(r1)
    6710:	7f 89 00 00 	cmpw    cr7,r9,r0
    6714:	7c 00 00 26 	mfcr    r0
    6718:	54 00 ff fe 	rlwinm  r0,r0,31,31,31

	if (!sctp_state(asoc, ESTABLISHED))
    671c:	2f 80 00 00 	cmpwi   cr7,r0,0
    6720:	40 9e 00 0c 	bne-    cr7,672c <sctp_setsockopt_peer_primary_addr+0x214>
		return -ENOTCONN;
    6724:	38 00 ff 95 	li      r0,-107
    6728:	48 00 00 d0 	b       67f8 <sctp_setsockopt_peer_primary_addr+0x2e0>

	af = sctp_get_af_specific(prim.sspp_addr.ss_family);
    672c:	a0 01 00 40 	lhz     r0,64(r1)
    6730:	54 00 04 3e 	clrlwi  r0,r0,16
    6734:	7c 03 03 78 	mr      r3,r0
    6738:	48 00 00 01 	bl      6738 <sctp_setsockopt_peer_primary_addr+0x220>
    673c:	90 61 00 14 	stw     r3,20(r1)
	if (!af)
    6740:	80 01 00 14 	lwz     r0,20(r1)
    6744:	2f 80 00 00 	cmpwi   cr7,r0,0
    6748:	40 9e 00 0c 	bne-    cr7,6754 <sctp_setsockopt_peer_primary_addr+0x23c>
		return -EINVAL;
    674c:	38 00 ff ea 	li      r0,-22
    6750:	48 00 00 a8 	b       67f8 <sctp_setsockopt_peer_primary_addr+0x2e0>

	if (!af->addr_valid((union sctp_addr *)&prim.sspp_addr, sp, NULL))
    6754:	80 01 00 14 	lwz     r0,20(r1)
    6758:	7c 0a 03 78 	mr      r10,r0
    675c:	80 0a 00 44 	lwz     r0,68(r10)
    6760:	39 21 00 3c 	addi    r9,r1,60
    6764:	39 29 00 04 	addi    r9,r9,4
    6768:	7d 23 4b 78 	mr      r3,r9
    676c:	80 81 00 0c 	lwz     r4,12(r1)
    6770:	38 a0 00 00 	li      r5,0
    6774:	7c 09 03 a6 	mtctr   r0
    6778:	4e 80 04 21 	bctrl
    677c:	7c 60 1b 78 	mr      r0,r3
    6780:	2f 80 00 00 	cmpwi   cr7,r0,0
    6784:	40 9e 00 0c 	bne-    cr7,6790 <sctp_setsockopt_peer_primary_addr+0x278>
		return -EADDRNOTAVAIL;
    6788:	38 00 ff 9d 	li      r0,-99
    678c:	48 00 00 6c 	b       67f8 <sctp_setsockopt_peer_primary_addr+0x2e0>

	if (!sctp_assoc_lookup_laddr(asoc, (union sctp_addr *)&prim.sspp_addr))
    6790:	38 01 00 3c 	addi    r0,r1,60
    6794:	30 00 00 04 	addic   r0,r0,4
    6798:	80 61 00 08 	lwz     r3,8(r1)
    679c:	7c 04 03 78 	mr      r4,r0
    67a0:	48 00 00 01 	bl      67a0 <sctp_setsockopt_peer_primary_addr+0x288>
    67a4:	7c 60 1b 78 	mr      r0,r3
    67a8:	2f 80 00 00 	cmpwi   cr7,r0,0
    67ac:	40 9e 00 0c 	bne-    cr7,67b8 <sctp_setsockopt_peer_primary_addr+0x2a0>
		return -EADDRNOTAVAIL;
    67b0:	38 00 ff 9d 	li      r0,-99
    67b4:	48 00 00 44 	b       67f8 <sctp_setsockopt_peer_primary_addr+0x2e0>

	/* Create an ASCONF chunk with SET_PRIMARY parameter	*/
	chunk = sctp_make_asconf_set_prim(asoc,
					  (union sctp_addr *)&prim.sspp_addr);
    67b8:	38 01 00 3c 	addi    r0,r1,60
    67bc:	30 00 00 04 	addic   r0,r0,4

	if (!sctp_assoc_lookup_laddr(asoc, (union sctp_addr *)&prim.sspp_addr))
		return -EADDRNOTAVAIL;

	/* Create an ASCONF chunk with SET_PRIMARY parameter	*/
	chunk = sctp_make_asconf_set_prim(asoc,
    67c0:	80 61 00 08 	lwz     r3,8(r1)
    67c4:	7c 04 03 78 	mr      r4,r0
    67c8:	48 00 00 01 	bl      67c8 <sctp_setsockopt_peer_primary_addr+0x2b0>
    67cc:	90 61 00 18 	stw     r3,24(r1)
					  (union sctp_addr *)&prim.sspp_addr);
	if (!chunk)
    67d0:	80 01 00 18 	lwz     r0,24(r1)
    67d4:	2f 80 00 00 	cmpwi   cr7,r0,0
    67d8:	40 9e 00 0c 	bne-    cr7,67e4 <sctp_setsockopt_peer_primary_addr+0x2cc>
		return -ENOMEM;
    67dc:	38 00 ff f4 	li      r0,-12
    67e0:	48 00 00 18 	b       67f8 <sctp_setsockopt_peer_primary_addr+0x2e0>

	err = sctp_send_asconf(asoc, chunk);
    67e4:	80 61 00 08 	lwz     r3,8(r1)
    67e8:	80 81 00 18 	lwz     r4,24(r1)
    67ec:	4b ff 9f 61 	bl      74c <sctp_send_asconf>
    67f0:	90 61 00 1c 	stw     r3,28(r1)

	SCTP_DEBUG_PRINTK("We set peer primary addr primitively.\n");

	return err;
    67f4:	80 01 00 1c 	lwz     r0,28(r1)
}
    67f8:	7c 03 03 78 	mr      r3,r0
    67fc:	80 01 00 e4 	lwz     r0,228(r1)
    6800:	7c 08 03 a6 	mtlr    r0
    6804:	38 21 00 e0 	addi    r1,r1,224
    6808:	4e 80 00 20 	blr

0000680c <sctp_setsockopt_adaptation_layer>:

static int sctp_setsockopt_adaptation_layer(struct sock *sk, char __user *optval,
					    unsigned int optlen)
{
    680c:	94 21 ff c0 	stwu    r1,-64(r1)
    6810:	7c 08 02 a6 	mflr    r0
    6814:	90 01 00 44 	stw     r0,68(r1)
    6818:	90 61 00 28 	stw     r3,40(r1)
    681c:	90 81 00 2c 	stw     r4,44(r1)
    6820:	90 a1 00 30 	stw     r5,48(r1)
	struct sctp_setadaptation adaptation;

	if (optlen != sizeof(struct sctp_setadaptation))
    6824:	80 01 00 30 	lwz     r0,48(r1)
    6828:	2f 80 00 04 	cmpwi   cr7,r0,4
    682c:	41 9e 00 0c 	beq-    cr7,6838 <sctp_setsockopt_adaptation_layer+0x2c>
		return -EINVAL;
    6830:	38 00 ff ea 	li      r0,-22
    6834:	48 00 01 18 	b       694c <sctp_setsockopt_adaptation_layer+0x140>
	if (copy_from_user(&adaptation, optval, optlen))
    6838:	38 01 00 1c 	addi    r0,r1,28
					    unsigned int optlen)
{
	struct sctp_setadaptation adaptation;

	if (optlen != sizeof(struct sctp_setadaptation))
		return -EINVAL;
    683c:	90 01 00 08 	stw     r0,8(r1)
    6840:	80 01 00 2c 	lwz     r0,44(r1)
    6844:	90 01 00 0c 	stw     r0,12(r1)
    6848:	80 01 00 30 	lwz     r0,48(r1)
    684c:	90 01 00 10 	stw     r0,16(r1)
static inline unsigned long copy_from_user(void *to,
		const void __user *from, unsigned long n)
{
	unsigned long over;

	if (access_ok(VERIFY_READ, from, n))
    6850:	81 21 00 0c 	lwz     r9,12(r1)
    6854:	7c 40 13 78 	mr      r0,r2
    6858:	7c 0a 03 78 	mr      r10,r0
    685c:	80 0a 01 d4 	lwz     r0,468(r10)
    6860:	7f 89 00 40 	cmplw   cr7,r9,r0
    6864:	41 9d 00 3c 	bgt-    cr7,68a0 <sctp_setsockopt_adaptation_layer+0x94>
    6868:	80 01 00 10 	lwz     r0,16(r1)
    686c:	2f 80 00 00 	cmpwi   cr7,r0,0
    6870:	41 9e 00 28 	beq-    cr7,6898 <sctp_setsockopt_adaptation_layer+0x8c>
    6874:	80 01 00 10 	lwz     r0,16(r1)
    6878:	31 20 ff ff 	addic   r9,r0,-1
    687c:	7c 40 13 78 	mr      r0,r2
    6880:	7c 0a 03 78 	mr      r10,r0
    6884:	81 6a 01 d4 	lwz     r11,468(r10)
    6888:	80 01 00 0c 	lwz     r0,12(r1)
    688c:	7c 00 58 50 	subf    r0,r0,r11
    6890:	7f 89 00 40 	cmplw   cr7,r9,r0
    6894:	41 9d 00 0c 	bgt-    cr7,68a0 <sctp_setsockopt_adaptation_layer+0x94>
    6898:	38 00 00 01 	li      r0,1
    689c:	48 00 00 08 	b       68a4 <sctp_setsockopt_adaptation_layer+0x98>
    68a0:	38 00 00 00 	li      r0,0
    68a4:	2f 80 00 00 	cmpwi   cr7,r0,0
    68a8:	41 9e 00 1c 	beq-    cr7,68c4 <sctp_setsockopt_adaptation_layer+0xb8>
		return __copy_tofrom_user((__force void __user *)to, from, n);
    68ac:	80 61 00 08 	lwz     r3,8(r1)
    68b0:	80 81 00 0c 	lwz     r4,12(r1)
    68b4:	80 a1 00 10 	lwz     r5,16(r1)
    68b8:	48 00 00 01 	bl      68b8 <sctp_setsockopt_adaptation_layer+0xac>
    68bc:	7c 60 1b 78 	mr      r0,r3
    68c0:	48 00 00 60 	b       6920 <sctp_setsockopt_adaptation_layer+0x114>
	if ((unsigned long)from < TASK_SIZE) {
    68c4:	81 21 00 0c 	lwz     r9,12(r1)
    68c8:	3c 00 bf ff 	lis     r0,-16385
    68cc:	60 00 ff ff 	ori     r0,r0,65535
    68d0:	7f 89 00 40 	cmplw   cr7,r9,r0
    68d4:	41 9d 00 48 	bgt-    cr7,691c <sctp_setsockopt_adaptation_layer+0x110>
		over = (unsigned long)from + n - TASK_SIZE;
    68d8:	81 21 00 0c 	lwz     r9,12(r1)
    68dc:	80 01 00 10 	lwz     r0,16(r1)
    68e0:	7c 09 02 14 	add     r0,r9,r0
    68e4:	3d 60 40 00 	lis     r11,16384
    68e8:	7c 00 5a 14 	add     r0,r0,r11
    68ec:	90 01 00 14 	stw     r0,20(r1)
		return __copy_tofrom_user((__force void __user *)to, from,
    68f0:	81 21 00 10 	lwz     r9,16(r1)
    68f4:	80 01 00 14 	lwz     r0,20(r1)
    68f8:	7c 00 48 50 	subf    r0,r0,r9
    68fc:	80 61 00 08 	lwz     r3,8(r1)
    6900:	80 81 00 0c 	lwz     r4,12(r1)
    6904:	7c 05 03 78 	mr      r5,r0
    6908:	48 00 00 01 	bl      6908 <sctp_setsockopt_adaptation_layer+0xfc>
    690c:	7c 69 1b 78 	mr      r9,r3
    6910:	80 01 00 14 	lwz     r0,20(r1)
    6914:	7c 09 02 14 	add     r0,r9,r0
    6918:	48 00 00 08 	b       6920 <sctp_setsockopt_adaptation_layer+0x114>
				n - over) + over;
	}
	return n;
    691c:	80 01 00 10 	lwz     r0,16(r1)
	if (copy_from_user(&adaptation, optval, optlen))
    6920:	2f 80 00 00 	cmpwi   cr7,r0,0
    6924:	41 9e 00 0c 	beq-    cr7,6930 <sctp_setsockopt_adaptation_layer+0x124>
		return -EFAULT;
    6928:	38 00 ff f2 	li      r0,-14
    692c:	48 00 00 20 	b       694c <sctp_setsockopt_adaptation_layer+0x140>
    6930:	80 01 00 28 	lwz     r0,40(r1)
    6934:	90 01 00 18 	stw     r0,24(r1)
    6938:	80 01 00 18 	lwz     r0,24(r1)

	sctp_sk(sk)->adaptation_ind = adaptation.ssb_adaptation_ind;
    693c:	81 21 00 1c 	lwz     r9,28(r1)
    6940:	7c 0a 03 78 	mr      r10,r0
    6944:	91 2a 02 ec 	stw     r9,748(r10)

	return 0;
    6948:	38 00 00 00 	li      r0,0
}
    694c:	7c 03 03 78 	mr      r3,r0
    6950:	80 01 00 44 	lwz     r0,68(r1)
    6954:	7c 08 03 a6 	mtlr    r0
    6958:	38 21 00 40 	addi    r1,r1,64
    695c:	4e 80 00 20 	blr

00006960 <sctp_setsockopt_context>:
 * received messages from the peer and does not effect the value that is
 * saved with outbound messages.
 */
static int sctp_setsockopt_context(struct sock *sk, char __user *optval,
				   unsigned int optlen)
{
    6960:	94 21 ff b0 	stwu    r1,-80(r1)
    6964:	7c 08 02 a6 	mflr    r0
    6968:	90 01 00 54 	stw     r0,84(r1)
    696c:	90 61 00 38 	stw     r3,56(r1)
    6970:	90 81 00 3c 	stw     r4,60(r1)
    6974:	90 a1 00 40 	stw     r5,64(r1)
	struct sctp_assoc_value params;
	struct sctp_sock *sp;
	struct sctp_association *asoc;

	if (optlen != sizeof(struct sctp_assoc_value))
    6978:	80 01 00 40 	lwz     r0,64(r1)
    697c:	2f 80 00 08 	cmpwi   cr7,r0,8
    6980:	41 9e 00 0c 	beq-    cr7,698c <sctp_setsockopt_context+0x2c>
		return -EINVAL;
    6984:	38 00 ff ea 	li      r0,-22
    6988:	48 00 01 68 	b       6af0 <sctp_setsockopt_context+0x190>
	if (copy_from_user(&params, optval, optlen))
    698c:	38 01 00 24 	addi    r0,r1,36
	struct sctp_assoc_value params;
	struct sctp_sock *sp;
	struct sctp_association *asoc;

	if (optlen != sizeof(struct sctp_assoc_value))
		return -EINVAL;
    6990:	90 01 00 10 	stw     r0,16(r1)
    6994:	80 01 00 3c 	lwz     r0,60(r1)
    6998:	90 01 00 14 	stw     r0,20(r1)
    699c:	80 01 00 40 	lwz     r0,64(r1)
    69a0:	90 01 00 18 	stw     r0,24(r1)
static inline unsigned long copy_from_user(void *to,
		const void __user *from, unsigned long n)
{
	unsigned long over;

	if (access_ok(VERIFY_READ, from, n))
    69a4:	81 21 00 14 	lwz     r9,20(r1)
    69a8:	7c 40 13 78 	mr      r0,r2
    69ac:	7c 0a 03 78 	mr      r10,r0
    69b0:	80 0a 01 d4 	lwz     r0,468(r10)
    69b4:	7f 89 00 40 	cmplw   cr7,r9,r0
    69b8:	41 9d 00 3c 	bgt-    cr7,69f4 <sctp_setsockopt_context+0x94>
    69bc:	80 01 00 18 	lwz     r0,24(r1)
    69c0:	2f 80 00 00 	cmpwi   cr7,r0,0
    69c4:	41 9e 00 28 	beq-    cr7,69ec <sctp_setsockopt_context+0x8c>
    69c8:	80 01 00 18 	lwz     r0,24(r1)
    69cc:	31 20 ff ff 	addic   r9,r0,-1
    69d0:	7c 40 13 78 	mr      r0,r2
    69d4:	7c 0a 03 78 	mr      r10,r0
    69d8:	81 6a 01 d4 	lwz     r11,468(r10)
    69dc:	80 01 00 14 	lwz     r0,20(r1)
    69e0:	7c 00 58 50 	subf    r0,r0,r11
    69e4:	7f 89 00 40 	cmplw   cr7,r9,r0
    69e8:	41 9d 00 0c 	bgt-    cr7,69f4 <sctp_setsockopt_context+0x94>
    69ec:	38 00 00 01 	li      r0,1
    69f0:	48 00 00 08 	b       69f8 <sctp_setsockopt_context+0x98>
    69f4:	38 00 00 00 	li      r0,0
    69f8:	2f 80 00 00 	cmpwi   cr7,r0,0
    69fc:	41 9e 00 1c 	beq-    cr7,6a18 <sctp_setsockopt_context+0xb8>
		return __copy_tofrom_user((__force void __user *)to, from, n);
    6a00:	80 61 00 10 	lwz     r3,16(r1)
    6a04:	80 81 00 14 	lwz     r4,20(r1)
    6a08:	80 a1 00 18 	lwz     r5,24(r1)
    6a0c:	48 00 00 01 	bl      6a0c <sctp_setsockopt_context+0xac>
    6a10:	7c 60 1b 78 	mr      r0,r3
    6a14:	48 00 00 60 	b       6a74 <sctp_setsockopt_context+0x114>
	if ((unsigned long)from < TASK_SIZE) {
    6a18:	81 21 00 14 	lwz     r9,20(r1)
    6a1c:	3c 00 bf ff 	lis     r0,-16385
    6a20:	60 00 ff ff 	ori     r0,r0,65535
    6a24:	7f 89 00 40 	cmplw   cr7,r9,r0
    6a28:	41 9d 00 48 	bgt-    cr7,6a70 <sctp_setsockopt_context+0x110>
		over = (unsigned long)from + n - TASK_SIZE;
    6a2c:	81 21 00 14 	lwz     r9,20(r1)
    6a30:	80 01 00 18 	lwz     r0,24(r1)
    6a34:	7c 09 02 14 	add     r0,r9,r0
    6a38:	3d 60 40 00 	lis     r11,16384
    6a3c:	7c 00 5a 14 	add     r0,r0,r11
    6a40:	90 01 00 1c 	stw     r0,28(r1)
		return __copy_tofrom_user((__force void __user *)to, from,
    6a44:	81 21 00 18 	lwz     r9,24(r1)
    6a48:	80 01 00 1c 	lwz     r0,28(r1)
    6a4c:	7c 00 48 50 	subf    r0,r0,r9
    6a50:	80 61 00 10 	lwz     r3,16(r1)
    6a54:	80 81 00 14 	lwz     r4,20(r1)
    6a58:	7c 05 03 78 	mr      r5,r0
    6a5c:	48 00 00 01 	bl      6a5c <sctp_setsockopt_context+0xfc>
    6a60:	7c 69 1b 78 	mr      r9,r3
    6a64:	80 01 00 1c 	lwz     r0,28(r1)
    6a68:	7c 09 02 14 	add     r0,r9,r0
    6a6c:	48 00 00 08 	b       6a74 <sctp_setsockopt_context+0x114>
				n - over) + over;
	}
	return n;
    6a70:	80 01 00 18 	lwz     r0,24(r1)
	if (copy_from_user(&params, optval, optlen))
    6a74:	2f 80 00 00 	cmpwi   cr7,r0,0
    6a78:	41 9e 00 0c 	beq-    cr7,6a84 <sctp_setsockopt_context+0x124>
		return -EFAULT;
    6a7c:	38 00 ff f2 	li      r0,-14
    6a80:	48 00 00 70 	b       6af0 <sctp_setsockopt_context+0x190>
    6a84:	80 01 00 38 	lwz     r0,56(r1)
    6a88:	90 01 00 20 	stw     r0,32(r1)
    6a8c:	80 01 00 20 	lwz     r0,32(r1)

	sp = sctp_sk(sk);
    6a90:	90 01 00 08 	stw     r0,8(r1)

	if (params.assoc_id != 0) {
    6a94:	80 01 00 24 	lwz     r0,36(r1)
    6a98:	2f 80 00 00 	cmpwi   cr7,r0,0
    6a9c:	41 9e 00 40 	beq-    cr7,6adc <sctp_setsockopt_context+0x17c>
		asoc = sctp_id2assoc(sk, params.assoc_id);
    6aa0:	80 01 00 24 	lwz     r0,36(r1)
    6aa4:	80 61 00 38 	lwz     r3,56(r1)
    6aa8:	7c 04 03 78 	mr      r4,r0
    6aac:	48 00 00 01 	bl      6aac <sctp_setsockopt_context+0x14c>
    6ab0:	90 61 00 0c 	stw     r3,12(r1)
		if (!asoc)
    6ab4:	80 01 00 0c 	lwz     r0,12(r1)
    6ab8:	2f 80 00 00 	cmpwi   cr7,r0,0
    6abc:	40 9e 00 0c 	bne-    cr7,6ac8 <sctp_setsockopt_context+0x168>
			return -EINVAL;
    6ac0:	38 00 ff ea 	li      r0,-22
    6ac4:	48 00 00 2c 	b       6af0 <sctp_setsockopt_context+0x190>
		asoc->default_rcv_context = params.assoc_value;
    6ac8:	81 21 00 28 	lwz     r9,40(r1)
    6acc:	80 01 00 0c 	lwz     r0,12(r1)
    6ad0:	7c 0a 03 78 	mr      r10,r0
    6ad4:	91 2a 03 a4 	stw     r9,932(r10)
    6ad8:	48 00 00 14 	b       6aec <sctp_setsockopt_context+0x18c>
	} else {
		sp->default_rcv_context = params.assoc_value;
    6adc:	81 21 00 28 	lwz     r9,40(r1)
    6ae0:	80 01 00 08 	lwz     r0,8(r1)
    6ae4:	7c 0b 03 78 	mr      r11,r0
    6ae8:	91 2b 01 f0 	stw     r9,496(r11)
	}

	return 0;
    6aec:	38 00 00 00 	li      r0,0
}
    6af0:	7c 03 03 78 	mr      r3,r0
    6af4:	80 01 00 54 	lwz     r0,84(r1)
    6af8:	7c 08 03 a6 	mtlr    r0
    6afc:	38 21 00 50 	addi    r1,r1,80
    6b00:	4e 80 00 20 	blr

00006b04 <sctp_setsockopt_fragment_interleave>:
 * incorrectly.
 */
static int sctp_setsockopt_fragment_interleave(struct sock *sk,
					       char __user *optval,
					       unsigned int optlen)
{
    6b04:	94 21 ff c0 	stwu    r1,-64(r1)
    6b08:	bf c1 00 38 	stmw    r30,56(r1)
    6b0c:	90 61 00 28 	stw     r3,40(r1)
    6b10:	90 81 00 2c 	stw     r4,44(r1)
    6b14:	90 a1 00 30 	stw     r5,48(r1)
	int val;

	if (optlen != sizeof(int))
    6b18:	80 01 00 30 	lwz     r0,48(r1)
    6b1c:	2f 80 00 04 	cmpwi   cr7,r0,4
    6b20:	41 9e 00 0c 	beq-    cr7,6b2c <sctp_setsockopt_fragment_interleave+0x28>
		return -EINVAL;
    6b24:	38 00 ff ea 	li      r0,-22
    6b28:	48 00 00 d8 	b       6c00 <sctp_setsockopt_fragment_interleave+0xfc>
	if (get_user(val, (int __user *)optval))
    6b2c:	38 00 ff f2 	li      r0,-14
    6b30:	90 01 00 08 	stw     r0,8(r1)
    6b34:	38 00 00 00 	li      r0,0
    6b38:	90 01 00 0c 	stw     r0,12(r1)
    6b3c:	80 01 00 2c 	lwz     r0,44(r1)
    6b40:	90 01 00 10 	stw     r0,16(r1)
    6b44:	81 21 00 10 	lwz     r9,16(r1)
    6b48:	7c 40 13 78 	mr      r0,r2
    6b4c:	7c 0b 03 78 	mr      r11,r0
    6b50:	80 0b 01 d4 	lwz     r0,468(r11)
    6b54:	7f 89 00 40 	cmplw   cr7,r9,r0
    6b58:	41 9d 00 28 	bgt-    cr7,6b80 <sctp_setsockopt_fragment_interleave+0x7c>
    6b5c:	7c 40 13 78 	mr      r0,r2
    6b60:	7c 0b 03 78 	mr      r11,r0
    6b64:	81 2b 01 d4 	lwz     r9,468(r11)
    6b68:	80 01 00 10 	lwz     r0,16(r1)
    6b6c:	7c 00 48 50 	subf    r0,r0,r9
    6b70:	2b 80 00 02 	cmplwi  cr7,r0,2
    6b74:	40 9d 00 0c 	ble-    cr7,6b80 <sctp_setsockopt_fragment_interleave+0x7c>
    6b78:	38 00 00 01 	li      r0,1
    6b7c:	48 00 00 08 	b       6b84 <sctp_setsockopt_fragment_interleave+0x80>
    6b80:	38 00 00 00 	li      r0,0
    6b84:	2f 80 00 00 	cmpwi   cr7,r0,0
    6b88:	41 9e 00 2c 	beq-    cr7,6bb4 <sctp_setsockopt_fragment_interleave+0xb0>
    6b8c:	38 00 00 00 	li      r0,0
    6b90:	90 01 00 08 	stw     r0,8(r1)
    6b94:	80 01 00 10 	lwz     r0,16(r1)
    6b98:	81 21 00 08 	lwz     r9,8(r1)
    6b9c:	7d 3f 4b 78 	mr      r31,r9
    6ba0:	7c 09 03 78 	mr      r9,r0
    6ba4:	83 c9 00 00 	lwz     r30,0(r9)
    6ba8:	93 e1 00 08 	stw     r31,8(r1)
    6bac:	93 c1 00 0c 	stw     r30,12(r1)
    6bb0:	60 00 00 00 	nop
    6bb4:	80 01 00 0c 	lwz     r0,12(r1)
    6bb8:	90 01 00 14 	stw     r0,20(r1)
    6bbc:	80 01 00 08 	lwz     r0,8(r1)
    6bc0:	2f 80 00 00 	cmpwi   cr7,r0,0
    6bc4:	41 9e 00 0c 	beq-    cr7,6bd0 <sctp_setsockopt_fragment_interleave+0xcc>
		return -EFAULT;
    6bc8:	38 00 ff f2 	li      r0,-14
    6bcc:	48 00 00 34 	b       6c00 <sctp_setsockopt_fragment_interleave+0xfc>
    6bd0:	80 01 00 28 	lwz     r0,40(r1)
    6bd4:	90 01 00 18 	stw     r0,24(r1)
    6bd8:	80 01 00 18 	lwz     r0,24(r1)

	sctp_sk(sk)->frag_interleave = (val == 0) ? 0 : 1;
    6bdc:	81 21 00 14 	lwz     r9,20(r1)
    6be0:	2f 89 00 00 	cmpwi   cr7,r9,0
    6be4:	7d 20 00 26 	mfcr    r9
    6be8:	55 29 ff fe 	rlwinm  r9,r9,31,31,31
    6bec:	69 29 00 01 	xori    r9,r9,1
    6bf0:	55 29 06 3e 	clrlwi  r9,r9,24
    6bf4:	7c 0b 03 78 	mr      r11,r0
    6bf8:	99 2b 02 eb 	stb     r9,747(r11)

	return 0;
    6bfc:	38 00 00 00 	li      r0,0
}
    6c00:	7c 03 03 78 	mr      r3,r0
    6c04:	bb c1 00 38 	lmw     r30,56(r1)
    6c08:	38 21 00 40 	addi    r1,r1,64
    6c0c:	4e 80 00 20 	blr

00006c10 <sctp_setsockopt_partial_delivery_point>:
 * message.
 */
static int sctp_setsockopt_partial_delivery_point(struct sock *sk,
						  char __user *optval,
						  unsigned int optlen)
{
    6c10:	94 21 ff c0 	stwu    r1,-64(r1)
    6c14:	bf c1 00 38 	stmw    r30,56(r1)
    6c18:	90 61 00 28 	stw     r3,40(r1)
    6c1c:	90 81 00 2c 	stw     r4,44(r1)
    6c20:	90 a1 00 30 	stw     r5,48(r1)
	u32 val;

	if (optlen != sizeof(u32))
    6c24:	80 01 00 30 	lwz     r0,48(r1)
    6c28:	2f 80 00 04 	cmpwi   cr7,r0,4
    6c2c:	41 9e 00 0c 	beq-    cr7,6c38 <sctp_setsockopt_partial_delivery_point+0x28>
		return -EINVAL;
    6c30:	38 00 ff ea 	li      r0,-22
    6c34:	48 00 00 ec 	b       6d20 <sctp_setsockopt_partial_delivery_point+0x110>
	if (get_user(val, (int __user *)optval))
    6c38:	38 00 ff f2 	li      r0,-14
    6c3c:	90 01 00 08 	stw     r0,8(r1)
    6c40:	38 00 00 00 	li      r0,0
    6c44:	90 01 00 0c 	stw     r0,12(r1)
    6c48:	80 01 00 2c 	lwz     r0,44(r1)
    6c4c:	90 01 00 10 	stw     r0,16(r1)
    6c50:	81 21 00 10 	lwz     r9,16(r1)
    6c54:	7c 40 13 78 	mr      r0,r2
    6c58:	7c 0b 03 78 	mr      r11,r0
    6c5c:	80 0b 01 d4 	lwz     r0,468(r11)
    6c60:	7f 89 00 40 	cmplw   cr7,r9,r0
    6c64:	41 9d 00 28 	bgt-    cr7,6c8c <sctp_setsockopt_partial_delivery_point+0x7c>
    6c68:	7c 40 13 78 	mr      r0,r2
    6c6c:	7c 0b 03 78 	mr      r11,r0
    6c70:	81 2b 01 d4 	lwz     r9,468(r11)
    6c74:	80 01 00 10 	lwz     r0,16(r1)
    6c78:	7c 00 48 50 	subf    r0,r0,r9
    6c7c:	2b 80 00 02 	cmplwi  cr7,r0,2
    6c80:	40 9d 00 0c 	ble-    cr7,6c8c <sctp_setsockopt_partial_delivery_point+0x7c>
    6c84:	38 00 00 01 	li      r0,1
    6c88:	48 00 00 08 	b       6c90 <sctp_setsockopt_partial_delivery_point+0x80>
    6c8c:	38 00 00 00 	li      r0,0
    6c90:	2f 80 00 00 	cmpwi   cr7,r0,0
    6c94:	41 9e 00 2c 	beq-    cr7,6cc0 <sctp_setsockopt_partial_delivery_point+0xb0>
    6c98:	38 00 00 00 	li      r0,0
    6c9c:	90 01 00 08 	stw     r0,8(r1)
    6ca0:	80 01 00 10 	lwz     r0,16(r1)
    6ca4:	81 21 00 08 	lwz     r9,8(r1)
    6ca8:	7d 3f 4b 78 	mr      r31,r9
    6cac:	7c 09 03 78 	mr      r9,r0
    6cb0:	83 c9 00 00 	lwz     r30,0(r9)
    6cb4:	93 e1 00 08 	stw     r31,8(r1)
    6cb8:	93 c1 00 0c 	stw     r30,12(r1)
    6cbc:	60 00 00 00 	nop
    6cc0:	80 01 00 0c 	lwz     r0,12(r1)
    6cc4:	90 01 00 14 	stw     r0,20(r1)
    6cc8:	80 01 00 08 	lwz     r0,8(r1)
    6ccc:	2f 80 00 00 	cmpwi   cr7,r0,0
    6cd0:	41 9e 00 0c 	beq-    cr7,6cdc <sctp_setsockopt_partial_delivery_point+0xcc>
		return -EFAULT;
    6cd4:	38 00 ff f2 	li      r0,-14
    6cd8:	48 00 00 48 	b       6d20 <sctp_setsockopt_partial_delivery_point+0x110>

	/* Note: We double the receive buffer from what the user sets
	 * it to be, also initial rwnd is based on rcvbuf/2.
	 */
	if (val > (sk->sk_rcvbuf >> 1))
    6cdc:	80 01 00 28 	lwz     r0,40(r1)
    6ce0:	7c 0b 03 78 	mr      r11,r0
    6ce4:	80 0b 00 60 	lwz     r0,96(r11)
    6ce8:	7c 00 0e 70 	srawi   r0,r0,1
    6cec:	7c 09 03 78 	mr      r9,r0
    6cf0:	80 01 00 14 	lwz     r0,20(r1)
    6cf4:	7f 89 00 40 	cmplw   cr7,r9,r0
    6cf8:	40 9c 00 0c 	bge-    cr7,6d04 <sctp_setsockopt_partial_delivery_point+0xf4>
		return -EINVAL;
    6cfc:	38 00 ff ea 	li      r0,-22
    6d00:	48 00 00 20 	b       6d20 <sctp_setsockopt_partial_delivery_point+0x110>
    6d04:	80 01 00 28 	lwz     r0,40(r1)
    6d08:	90 01 00 18 	stw     r0,24(r1)
    6d0c:	80 01 00 18 	lwz     r0,24(r1)

	sctp_sk(sk)->pd_point = val;
    6d10:	81 21 00 14 	lwz     r9,20(r1)
    6d14:	7c 0b 03 78 	mr      r11,r0
    6d18:	91 2b 02 f0 	stw     r9,752(r11)

	return 0; /* is this the right error code? */
    6d1c:	38 00 00 00 	li      r0,0
}
    6d20:	7c 03 03 78 	mr      r3,r0
    6d24:	bb c1 00 38 	lmw     r30,56(r1)
    6d28:	38 21 00 40 	addi    r1,r1,64
    6d2c:	4e 80 00 20 	blr

00006d30 <sctp_setsockopt_maxburst>:
 * future associations inheriting the socket value.
 */
static int sctp_setsockopt_maxburst(struct sock *sk,
				    char __user *optval,
				    unsigned int optlen)
{
    6d30:	94 21 ff a0 	stwu    r1,-96(r1)
    6d34:	7c 08 02 a6 	mflr    r0
    6d38:	90 01 00 64 	stw     r0,100(r1)
    6d3c:	90 61 00 48 	stw     r3,72(r1)
    6d40:	90 81 00 4c 	stw     r4,76(r1)
    6d44:	90 a1 00 50 	stw     r5,80(r1)
	struct sctp_assoc_value params;
	struct sctp_sock *sp;
	struct sctp_association *asoc;
	int val;
	int assoc_id = 0;
    6d48:	38 00 00 00 	li      r0,0
    6d4c:	90 01 00 08 	stw     r0,8(r1)

	if (optlen == sizeof(int)) {
    6d50:	80 01 00 50 	lwz     r0,80(r1)
    6d54:	2f 80 00 04 	cmpwi   cr7,r0,4
    6d58:	40 9e 01 14 	bne-    cr7,6e6c <sctp_setsockopt_maxburst+0x13c>
		pr_warn("Use of int in max_burst socket option deprecated\n");
    6d5c:	3c 00 00 00 	lis     r0,0
    6d60:	30 60 01 14 	addic   r3,r0,276
    6d64:	48 00 00 01 	bl      6d64 <sctp_setsockopt_maxburst+0x34>
		pr_warn("Use struct sctp_assoc_value instead\n");
    6d68:	3c 00 00 00 	lis     r0,0
    6d6c:	30 60 00 e4 	addic   r3,r0,228
    6d70:	48 00 00 01 	bl      6d70 <sctp_setsockopt_maxburst+0x40>
		if (copy_from_user(&val, optval, optlen))
    6d74:	38 01 00 40 	addi    r0,r1,64
	int val;
	int assoc_id = 0;

	if (optlen == sizeof(int)) {
		pr_warn("Use of int in max_burst socket option deprecated\n");
		pr_warn("Use struct sctp_assoc_value instead\n");
    6d78:	90 01 00 14 	stw     r0,20(r1)
    6d7c:	80 01 00 4c 	lwz     r0,76(r1)
    6d80:	90 01 00 18 	stw     r0,24(r1)
    6d84:	80 01 00 50 	lwz     r0,80(r1)
    6d88:	90 01 00 1c 	stw     r0,28(r1)
static inline unsigned long copy_from_user(void *to,
		const void __user *from, unsigned long n)
{
	unsigned long over;

	if (access_ok(VERIFY_READ, from, n))
    6d8c:	81 21 00 18 	lwz     r9,24(r1)
    6d90:	7c 40 13 78 	mr      r0,r2
    6d94:	7c 0a 03 78 	mr      r10,r0
    6d98:	80 0a 01 d4 	lwz     r0,468(r10)
    6d9c:	7f 89 00 40 	cmplw   cr7,r9,r0
    6da0:	41 9d 00 3c 	bgt-    cr7,6ddc <sctp_setsockopt_maxburst+0xac>
    6da4:	80 01 00 1c 	lwz     r0,28(r1)
    6da8:	2f 80 00 00 	cmpwi   cr7,r0,0
    6dac:	41 9e 00 28 	beq-    cr7,6dd4 <sctp_setsockopt_maxburst+0xa4>
    6db0:	80 01 00 1c 	lwz     r0,28(r1)
    6db4:	31 20 ff ff 	addic   r9,r0,-1
    6db8:	7c 40 13 78 	mr      r0,r2
    6dbc:	7c 0a 03 78 	mr      r10,r0
    6dc0:	81 6a 01 d4 	lwz     r11,468(r10)
    6dc4:	80 01 00 18 	lwz     r0,24(r1)
    6dc8:	7c 00 58 50 	subf    r0,r0,r11
    6dcc:	7f 89 00 40 	cmplw   cr7,r9,r0
    6dd0:	41 9d 00 0c 	bgt-    cr7,6ddc <sctp_setsockopt_maxburst+0xac>
    6dd4:	38 00 00 01 	li      r0,1
    6dd8:	48 00 00 08 	b       6de0 <sctp_setsockopt_maxburst+0xb0>
    6ddc:	38 00 00 00 	li      r0,0
    6de0:	2f 80 00 00 	cmpwi   cr7,r0,0
    6de4:	41 9e 00 1c 	beq-    cr7,6e00 <sctp_setsockopt_maxburst+0xd0>
		return __copy_tofrom_user((__force void __user *)to, from, n);
    6de8:	80 61 00 14 	lwz     r3,20(r1)
    6dec:	80 81 00 18 	lwz     r4,24(r1)
    6df0:	80 a1 00 1c 	lwz     r5,28(r1)
    6df4:	48 00 00 01 	bl      6df4 <sctp_setsockopt_maxburst+0xc4>
    6df8:	7c 60 1b 78 	mr      r0,r3
    6dfc:	48 00 00 60 	b       6e5c <sctp_setsockopt_maxburst+0x12c>
	if ((unsigned long)from < TASK_SIZE) {
    6e00:	81 21 00 18 	lwz     r9,24(r1)
    6e04:	3c 00 bf ff 	lis     r0,-16385
    6e08:	60 00 ff ff 	ori     r0,r0,65535
    6e0c:	7f 89 00 40 	cmplw   cr7,r9,r0
    6e10:	41 9d 00 48 	bgt-    cr7,6e58 <sctp_setsockopt_maxburst+0x128>
		over = (unsigned long)from + n - TASK_SIZE;
    6e14:	81 21 00 18 	lwz     r9,24(r1)
    6e18:	80 01 00 1c 	lwz     r0,28(r1)
    6e1c:	7c 09 02 14 	add     r0,r9,r0
    6e20:	3d 60 40 00 	lis     r11,16384
    6e24:	7c 00 5a 14 	add     r0,r0,r11
    6e28:	90 01 00 20 	stw     r0,32(r1)
		return __copy_tofrom_user((__force void __user *)to, from,
    6e2c:	81 21 00 1c 	lwz     r9,28(r1)
    6e30:	80 01 00 20 	lwz     r0,32(r1)
    6e34:	7c 00 48 50 	subf    r0,r0,r9
    6e38:	80 61 00 14 	lwz     r3,20(r1)
    6e3c:	80 81 00 18 	lwz     r4,24(r1)
    6e40:	7c 05 03 78 	mr      r5,r0
    6e44:	48 00 00 01 	bl      6e44 <sctp_setsockopt_maxburst+0x114>
    6e48:	7c 69 1b 78 	mr      r9,r3
    6e4c:	80 01 00 20 	lwz     r0,32(r1)
    6e50:	7c 09 02 14 	add     r0,r9,r0
    6e54:	48 00 00 08 	b       6e5c <sctp_setsockopt_maxburst+0x12c>
				n - over) + over;
	}
	return n;
    6e58:	80 01 00 1c 	lwz     r0,28(r1)
		if (copy_from_user(&val, optval, optlen))
    6e5c:	2f 80 00 00 	cmpwi   cr7,r0,0
    6e60:	41 9e 01 2c 	beq-    cr7,6f8c <sctp_setsockopt_maxburst+0x25c>
			return -EFAULT;
    6e64:	38 00 ff f2 	li      r0,-14
    6e68:	48 00 01 8c 	b       6ff4 <sctp_setsockopt_maxburst+0x2c4>
	} else if (optlen == sizeof(struct sctp_assoc_value)) {
    6e6c:	80 01 00 50 	lwz     r0,80(r1)
    6e70:	2f 80 00 08 	cmpwi   cr7,r0,8
    6e74:	40 9e 01 10 	bne-    cr7,6f84 <sctp_setsockopt_maxburst+0x254>
		if (copy_from_user(&params, optval, optlen))
    6e78:	38 01 00 38 	addi    r0,r1,56
	if (optlen == sizeof(int)) {
		pr_warn("Use of int in max_burst socket option deprecated\n");
		pr_warn("Use struct sctp_assoc_value instead\n");
		if (copy_from_user(&val, optval, optlen))
			return -EFAULT;
	} else if (optlen == sizeof(struct sctp_assoc_value)) {
    6e7c:	90 01 00 24 	stw     r0,36(r1)
    6e80:	80 01 00 4c 	lwz     r0,76(r1)
    6e84:	90 01 00 28 	stw     r0,40(r1)
    6e88:	80 01 00 50 	lwz     r0,80(r1)
    6e8c:	90 01 00 2c 	stw     r0,44(r1)
static inline unsigned long copy_from_user(void *to,
		const void __user *from, unsigned long n)
{
	unsigned long over;

	if (access_ok(VERIFY_READ, from, n))
    6e90:	81 21 00 28 	lwz     r9,40(r1)
    6e94:	7c 40 13 78 	mr      r0,r2
    6e98:	7c 0a 03 78 	mr      r10,r0
    6e9c:	80 0a 01 d4 	lwz     r0,468(r10)
    6ea0:	7f 89 00 40 	cmplw   cr7,r9,r0
    6ea4:	41 9d 00 3c 	bgt-    cr7,6ee0 <sctp_setsockopt_maxburst+0x1b0>
    6ea8:	80 01 00 2c 	lwz     r0,44(r1)
    6eac:	2f 80 00 00 	cmpwi   cr7,r0,0
    6eb0:	41 9e 00 28 	beq-    cr7,6ed8 <sctp_setsockopt_maxburst+0x1a8>
    6eb4:	80 01 00 2c 	lwz     r0,44(r1)
    6eb8:	31 20 ff ff 	addic   r9,r0,-1
    6ebc:	7c 40 13 78 	mr      r0,r2
    6ec0:	7c 0a 03 78 	mr      r10,r0
    6ec4:	81 6a 01 d4 	lwz     r11,468(r10)
    6ec8:	80 01 00 28 	lwz     r0,40(r1)
    6ecc:	7c 00 58 50 	subf    r0,r0,r11
    6ed0:	7f 89 00 40 	cmplw   cr7,r9,r0
    6ed4:	41 9d 00 0c 	bgt-    cr7,6ee0 <sctp_setsockopt_maxburst+0x1b0>
    6ed8:	38 00 00 01 	li      r0,1
    6edc:	48 00 00 08 	b       6ee4 <sctp_setsockopt_maxburst+0x1b4>
    6ee0:	38 00 00 00 	li      r0,0
    6ee4:	2f 80 00 00 	cmpwi   cr7,r0,0
    6ee8:	41 9e 00 1c 	beq-    cr7,6f04 <sctp_setsockopt_maxburst+0x1d4>
		return __copy_tofrom_user((__force void __user *)to, from, n);
    6eec:	80 61 00 24 	lwz     r3,36(r1)
    6ef0:	80 81 00 28 	lwz     r4,40(r1)
    6ef4:	80 a1 00 2c 	lwz     r5,44(r1)
    6ef8:	48 00 00 01 	bl      6ef8 <sctp_setsockopt_maxburst+0x1c8>
    6efc:	7c 60 1b 78 	mr      r0,r3
    6f00:	48 00 00 60 	b       6f60 <sctp_setsockopt_maxburst+0x230>
	if ((unsigned long)from < TASK_SIZE) {
    6f04:	81 21 00 28 	lwz     r9,40(r1)
    6f08:	3c 00 bf ff 	lis     r0,-16385
    6f0c:	60 00 ff ff 	ori     r0,r0,65535
    6f10:	7f 89 00 40 	cmplw   cr7,r9,r0
    6f14:	41 9d 00 48 	bgt-    cr7,6f5c <sctp_setsockopt_maxburst+0x22c>
		over = (unsigned long)from + n - TASK_SIZE;
    6f18:	81 21 00 28 	lwz     r9,40(r1)
    6f1c:	80 01 00 2c 	lwz     r0,44(r1)
    6f20:	7c 09 02 14 	add     r0,r9,r0
    6f24:	3d 60 40 00 	lis     r11,16384
    6f28:	7c 00 5a 14 	add     r0,r0,r11
    6f2c:	90 01 00 30 	stw     r0,48(r1)
		return __copy_tofrom_user((__force void __user *)to, from,
    6f30:	81 21 00 2c 	lwz     r9,44(r1)
    6f34:	80 01 00 30 	lwz     r0,48(r1)
    6f38:	7c 00 48 50 	subf    r0,r0,r9
    6f3c:	80 61 00 24 	lwz     r3,36(r1)
    6f40:	80 81 00 28 	lwz     r4,40(r1)
    6f44:	7c 05 03 78 	mr      r5,r0
    6f48:	48 00 00 01 	bl      6f48 <sctp_setsockopt_maxburst+0x218>
    6f4c:	7c 69 1b 78 	mr      r9,r3
    6f50:	80 01 00 30 	lwz     r0,48(r1)
    6f54:	7c 09 02 14 	add     r0,r9,r0
    6f58:	48 00 00 08 	b       6f60 <sctp_setsockopt_maxburst+0x230>
				n - over) + over;
	}
	return n;
    6f5c:	80 01 00 2c 	lwz     r0,44(r1)
		if (copy_from_user(&params, optval, optlen))
    6f60:	2f 80 00 00 	cmpwi   cr7,r0,0
    6f64:	41 9e 00 0c 	beq-    cr7,6f70 <sctp_setsockopt_maxburst+0x240>
			return -EFAULT;
    6f68:	38 00 ff f2 	li      r0,-14
    6f6c:	48 00 00 88 	b       6ff4 <sctp_setsockopt_maxburst+0x2c4>
		val = params.assoc_value;
    6f70:	80 01 00 3c 	lwz     r0,60(r1)
    6f74:	90 01 00 40 	stw     r0,64(r1)
		assoc_id = params.assoc_id;
    6f78:	80 01 00 38 	lwz     r0,56(r1)
    6f7c:	90 01 00 08 	stw     r0,8(r1)
    6f80:	48 00 00 0c 	b       6f8c <sctp_setsockopt_maxburst+0x25c>
	} else
		return -EINVAL;
    6f84:	38 00 ff ea 	li      r0,-22
    6f88:	48 00 00 6c 	b       6ff4 <sctp_setsockopt_maxburst+0x2c4>
    6f8c:	80 01 00 48 	lwz     r0,72(r1)
    6f90:	90 01 00 34 	stw     r0,52(r1)
    6f94:	80 01 00 34 	lwz     r0,52(r1)

	sp = sctp_sk(sk);
    6f98:	90 01 00 0c 	stw     r0,12(r1)

	if (assoc_id != 0) {
    6f9c:	80 01 00 08 	lwz     r0,8(r1)
    6fa0:	2f 80 00 00 	cmpwi   cr7,r0,0
    6fa4:	41 9e 00 3c 	beq-    cr7,6fe0 <sctp_setsockopt_maxburst+0x2b0>
		asoc = sctp_id2assoc(sk, assoc_id);
    6fa8:	80 61 00 48 	lwz     r3,72(r1)
    6fac:	80 81 00 08 	lwz     r4,8(r1)
    6fb0:	48 00 00 01 	bl      6fb0 <sctp_setsockopt_maxburst+0x280>
    6fb4:	90 61 00 10 	stw     r3,16(r1)
		if (!asoc)
    6fb8:	80 01 00 10 	lwz     r0,16(r1)
    6fbc:	2f 80 00 00 	cmpwi   cr7,r0,0
    6fc0:	40 9e 00 0c 	bne-    cr7,6fcc <sctp_setsockopt_maxburst+0x29c>
			return -EINVAL;
    6fc4:	38 00 ff ea 	li      r0,-22
    6fc8:	48 00 00 2c 	b       6ff4 <sctp_setsockopt_maxburst+0x2c4>
		asoc->max_burst = val;
    6fcc:	81 21 00 40 	lwz     r9,64(r1)
    6fd0:	80 01 00 10 	lwz     r0,16(r1)
    6fd4:	7c 0a 03 78 	mr      r10,r0
    6fd8:	91 2a 01 d4 	stw     r9,468(r10)
    6fdc:	48 00 00 14 	b       6ff0 <sctp_setsockopt_maxburst+0x2c0>
	} else
		sp->max_burst = val;
    6fe0:	81 21 00 40 	lwz     r9,64(r1)
    6fe4:	80 01 00 0c 	lwz     r0,12(r1)
    6fe8:	7c 0b 03 78 	mr      r11,r0
    6fec:	91 2b 01 f4 	stw     r9,500(r11)

	return 0;
    6ff0:	38 00 00 00 	li      r0,0
}
    6ff4:	7c 03 03 78 	mr      r3,r0
    6ff8:	80 01 00 64 	lwz     r0,100(r1)
    6ffc:	7c 08 03 a6 	mtlr    r0
    7000:	38 21 00 60 	addi    r1,r1,96
    7004:	4e 80 00 20 	blr

00007008 <sctp_setsockopt_auth_chunk>:
 * will only effect future associations on the socket.
 */
static int sctp_setsockopt_auth_chunk(struct sock *sk,
				      char __user *optval,
				      unsigned int optlen)
{
    7008:	94 21 ff c0 	stwu    r1,-64(r1)
    700c:	7c 08 02 a6 	mflr    r0
    7010:	90 01 00 44 	stw     r0,68(r1)
    7014:	90 61 00 28 	stw     r3,40(r1)
    7018:	90 81 00 2c 	stw     r4,44(r1)
    701c:	90 a1 00 30 	stw     r5,48(r1)
	struct sctp_authchunk val;

	if (!sctp_auth_enable)
    7020:	3c 00 00 00 	lis     r0,0
    7024:	30 00 00 00 	addic   r0,r0,0
    7028:	7c 09 03 78 	mr      r9,r0
    702c:	80 09 00 74 	lwz     r0,116(r9)
    7030:	2f 80 00 00 	cmpwi   cr7,r0,0
    7034:	40 9e 00 0c 	bne-    cr7,7040 <sctp_setsockopt_auth_chunk+0x38>
		return -EACCES;
    7038:	38 00 ff f3 	li      r0,-13
    703c:	48 00 01 68 	b       71a4 <sctp_setsockopt_auth_chunk+0x19c>

	if (optlen != sizeof(struct sctp_authchunk))
    7040:	80 01 00 30 	lwz     r0,48(r1)
    7044:	2f 80 00 01 	cmpwi   cr7,r0,1
    7048:	41 9e 00 0c 	beq-    cr7,7054 <sctp_setsockopt_auth_chunk+0x4c>
		return -EINVAL;
    704c:	38 00 ff ea 	li      r0,-22
    7050:	48 00 01 54 	b       71a4 <sctp_setsockopt_auth_chunk+0x19c>
	if (copy_from_user(&val, optval, optlen))
    7054:	38 01 00 1c 	addi    r0,r1,28

	if (!sctp_auth_enable)
		return -EACCES;

	if (optlen != sizeof(struct sctp_authchunk))
		return -EINVAL;
    7058:	90 01 00 08 	stw     r0,8(r1)
    705c:	80 01 00 2c 	lwz     r0,44(r1)
    7060:	90 01 00 0c 	stw     r0,12(r1)
    7064:	80 01 00 30 	lwz     r0,48(r1)
    7068:	90 01 00 10 	stw     r0,16(r1)
static inline unsigned long copy_from_user(void *to,
		const void __user *from, unsigned long n)
{
	unsigned long over;

	if (access_ok(VERIFY_READ, from, n))
    706c:	81 21 00 0c 	lwz     r9,12(r1)
    7070:	7c 40 13 78 	mr      r0,r2
    7074:	7c 0a 03 78 	mr      r10,r0
    7078:	80 0a 01 d4 	lwz     r0,468(r10)
    707c:	7f 89 00 40 	cmplw   cr7,r9,r0
    7080:	41 9d 00 3c 	bgt-    cr7,70bc <sctp_setsockopt_auth_chunk+0xb4>
    7084:	80 01 00 10 	lwz     r0,16(r1)
    7088:	2f 80 00 00 	cmpwi   cr7,r0,0
    708c:	41 9e 00 28 	beq-    cr7,70b4 <sctp_setsockopt_auth_chunk+0xac>
    7090:	80 01 00 10 	lwz     r0,16(r1)
    7094:	31 20 ff ff 	addic   r9,r0,-1
    7098:	7c 40 13 78 	mr      r0,r2
    709c:	7c 0a 03 78 	mr      r10,r0
    70a0:	81 6a 01 d4 	lwz     r11,468(r10)
    70a4:	80 01 00 0c 	lwz     r0,12(r1)
    70a8:	7c 00 58 50 	subf    r0,r0,r11
    70ac:	7f 89 00 40 	cmplw   cr7,r9,r0
    70b0:	41 9d 00 0c 	bgt-    cr7,70bc <sctp_setsockopt_auth_chunk+0xb4>
    70b4:	38 00 00 01 	li      r0,1
    70b8:	48 00 00 08 	b       70c0 <sctp_setsockopt_auth_chunk+0xb8>
    70bc:	38 00 00 00 	li      r0,0
    70c0:	2f 80 00 00 	cmpwi   cr7,r0,0
    70c4:	41 9e 00 1c 	beq-    cr7,70e0 <sctp_setsockopt_auth_chunk+0xd8>
		return __copy_tofrom_user((__force void __user *)to, from, n);
    70c8:	80 61 00 08 	lwz     r3,8(r1)
    70cc:	80 81 00 0c 	lwz     r4,12(r1)
    70d0:	80 a1 00 10 	lwz     r5,16(r1)
    70d4:	48 00 00 01 	bl      70d4 <sctp_setsockopt_auth_chunk+0xcc>
    70d8:	7c 60 1b 78 	mr      r0,r3
    70dc:	48 00 00 60 	b       713c <sctp_setsockopt_auth_chunk+0x134>
	if ((unsigned long)from < TASK_SIZE) {
    70e0:	81 21 00 0c 	lwz     r9,12(r1)
    70e4:	3c 00 bf ff 	lis     r0,-16385
    70e8:	60 00 ff ff 	ori     r0,r0,65535
    70ec:	7f 89 00 40 	cmplw   cr7,r9,r0
    70f0:	41 9d 00 48 	bgt-    cr7,7138 <sctp_setsockopt_auth_chunk+0x130>
		over = (unsigned long)from + n - TASK_SIZE;
    70f4:	81 21 00 0c 	lwz     r9,12(r1)
    70f8:	80 01 00 10 	lwz     r0,16(r1)
    70fc:	7c 09 02 14 	add     r0,r9,r0
    7100:	3d 60 40 00 	lis     r11,16384
    7104:	7c 00 5a 14 	add     r0,r0,r11
    7108:	90 01 00 14 	stw     r0,20(r1)
		return __copy_tofrom_user((__force void __user *)to, from,
    710c:	81 21 00 10 	lwz     r9,16(r1)
    7110:	80 01 00 14 	lwz     r0,20(r1)
    7114:	7c 00 48 50 	subf    r0,r0,r9
    7118:	80 61 00 08 	lwz     r3,8(r1)
    711c:	80 81 00 0c 	lwz     r4,12(r1)
    7120:	7c 05 03 78 	mr      r5,r0
    7124:	48 00 00 01 	bl      7124 <sctp_setsockopt_auth_chunk+0x11c>
    7128:	7c 69 1b 78 	mr      r9,r3
    712c:	80 01 00 14 	lwz     r0,20(r1)
    7130:	7c 09 02 14 	add     r0,r9,r0
    7134:	48 00 00 08 	b       713c <sctp_setsockopt_auth_chunk+0x134>
				n - over) + over;
	}
	return n;
    7138:	80 01 00 10 	lwz     r0,16(r1)
	if (copy_from_user(&val, optval, optlen))
    713c:	2f 80 00 00 	cmpwi   cr7,r0,0
    7140:	41 9e 00 0c 	beq-    cr7,714c <sctp_setsockopt_auth_chunk+0x144>
		return -EFAULT;
    7144:	38 00 ff f2 	li      r0,-14
    7148:	48 00 00 5c 	b       71a4 <sctp_setsockopt_auth_chunk+0x19c>

	switch (val.sauth_chunk) {
    714c:	88 01 00 1c 	lbz     r0,28(r1)
    7150:	54 00 06 3e 	clrlwi  r0,r0,24
    7154:	2b 80 00 0f 	cmplwi  cr7,r0,15
    7158:	41 9d 00 20 	bgt-    cr7,7178 <sctp_setsockopt_auth_chunk+0x170>
    715c:	39 20 00 01 	li      r9,1
    7160:	7d 20 00 30 	slw     r0,r9,r0
    7164:	70 00 c0 06 	andi.   r0,r0,49158
    7168:	2f 80 00 00 	cmpwi   cr7,r0,0
    716c:	41 9e 00 0c 	beq-    cr7,7178 <sctp_setsockopt_auth_chunk+0x170>
		case SCTP_CID_INIT:
		case SCTP_CID_INIT_ACK:
		case SCTP_CID_SHUTDOWN_COMPLETE:
		case SCTP_CID_AUTH:
			return -EINVAL;
    7170:	38 00 ff ea 	li      r0,-22
    7174:	48 00 00 30 	b       71a4 <sctp_setsockopt_auth_chunk+0x19c>
    7178:	80 01 00 28 	lwz     r0,40(r1)
    717c:	90 01 00 18 	stw     r0,24(r1)
    7180:	80 01 00 18 	lwz     r0,24(r1)
	}

	/* add this chunk id to the endpoint */
	return sctp_auth_ep_add_chunkid(sctp_sk(sk)->ep, val.sauth_chunk);
    7184:	7c 0a 03 78 	mr      r10,r0
    7188:	81 2a 01 d4 	lwz     r9,468(r10)
    718c:	88 01 00 1c 	lbz     r0,28(r1)
    7190:	54 00 06 3e 	clrlwi  r0,r0,24
    7194:	7d 23 4b 78 	mr      r3,r9
    7198:	7c 04 03 78 	mr      r4,r0
    719c:	48 00 00 01 	bl      719c <sctp_setsockopt_auth_chunk+0x194>
    71a0:	7c 60 1b 78 	mr      r0,r3
}
    71a4:	7c 03 03 78 	mr      r3,r0
    71a8:	80 01 00 44 	lwz     r0,68(r1)
    71ac:	7c 08 03 a6 	mtlr    r0
    71b0:	38 21 00 40 	addi    r1,r1,64
    71b4:	4e 80 00 20 	blr

000071b8 <sctp_setsockopt_hmac_ident>:
 * endpoint requires the peer to use.
 */
static int sctp_setsockopt_hmac_ident(struct sock *sk,
				      char __user *optval,
				      unsigned int optlen)
{
    71b8:	94 21 ff b0 	stwu    r1,-80(r1)
    71bc:	7c 08 02 a6 	mflr    r0
    71c0:	90 01 00 54 	stw     r0,84(r1)
    71c4:	90 61 00 38 	stw     r3,56(r1)
    71c8:	90 81 00 3c 	stw     r4,60(r1)
    71cc:	90 a1 00 40 	stw     r5,64(r1)
	struct sctp_hmacalgo *hmacs;
	u32 idents;
	int err;

	if (!sctp_auth_enable)
    71d0:	3c 00 00 00 	lis     r0,0
    71d4:	30 00 00 00 	addic   r0,r0,0
    71d8:	7c 09 03 78 	mr      r9,r0
    71dc:	80 09 00 74 	lwz     r0,116(r9)
    71e0:	2f 80 00 00 	cmpwi   cr7,r0,0
    71e4:	40 9e 00 0c 	bne-    cr7,71f0 <sctp_setsockopt_hmac_ident+0x38>
		return -EACCES;
    71e8:	38 00 ff f3 	li      r0,-13
    71ec:	48 00 01 c8 	b       73b4 <sctp_setsockopt_hmac_ident+0x1fc>

	if (optlen < sizeof(struct sctp_hmacalgo))
    71f0:	80 01 00 40 	lwz     r0,64(r1)
    71f4:	2b 80 00 03 	cmplwi  cr7,r0,3
    71f8:	41 9d 00 0c 	bgt-    cr7,7204 <sctp_setsockopt_hmac_ident+0x4c>
		return -EINVAL;
    71fc:	38 00 ff ea 	li      r0,-22
    7200:	48 00 01 b4 	b       73b4 <sctp_setsockopt_hmac_ident+0x1fc>
    7204:	80 01 00 40 	lwz     r0,64(r1)
    7208:	90 01 00 14 	stw     r0,20(r1)
    720c:	38 00 00 d0 	li      r0,208
    7210:	90 01 00 18 	stw     r0,24(r1)
    7214:	80 61 00 14 	lwz     r3,20(r1)
    7218:	80 81 00 18 	lwz     r4,24(r1)
    721c:	48 00 00 01 	bl      721c <sctp_setsockopt_hmac_ident+0x64>
    7220:	7c 60 1b 78 	mr      r0,r3

	hmacs = kmalloc(optlen, GFP_KERNEL);
    7224:	90 01 00 0c 	stw     r0,12(r1)
	if (!hmacs)
    7228:	80 01 00 0c 	lwz     r0,12(r1)
    722c:	2f 80 00 00 	cmpwi   cr7,r0,0
    7230:	40 9e 00 0c 	bne-    cr7,723c <sctp_setsockopt_hmac_ident+0x84>
		return -ENOMEM;
    7234:	38 00 ff f4 	li      r0,-12
    7238:	48 00 01 7c 	b       73b4 <sctp_setsockopt_hmac_ident+0x1fc>
    723c:	80 01 00 0c 	lwz     r0,12(r1)
    7240:	90 01 00 1c 	stw     r0,28(r1)
    7244:	80 01 00 3c 	lwz     r0,60(r1)
    7248:	90 01 00 20 	stw     r0,32(r1)
    724c:	80 01 00 40 	lwz     r0,64(r1)
    7250:	90 01 00 24 	stw     r0,36(r1)
static inline unsigned long copy_from_user(void *to,
		const void __user *from, unsigned long n)
{
	unsigned long over;

	if (access_ok(VERIFY_READ, from, n))
    7254:	81 21 00 20 	lwz     r9,32(r1)
    7258:	7c 40 13 78 	mr      r0,r2
    725c:	7c 0a 03 78 	mr      r10,r0
    7260:	80 0a 01 d4 	lwz     r0,468(r10)
    7264:	7f 89 00 40 	cmplw   cr7,r9,r0
    7268:	41 9d 00 3c 	bgt-    cr7,72a4 <sctp_setsockopt_hmac_ident+0xec>
    726c:	80 01 00 24 	lwz     r0,36(r1)
    7270:	2f 80 00 00 	cmpwi   cr7,r0,0
    7274:	41 9e 00 28 	beq-    cr7,729c <sctp_setsockopt_hmac_ident+0xe4>
    7278:	80 01 00 24 	lwz     r0,36(r1)
    727c:	31 20 ff ff 	addic   r9,r0,-1
    7280:	7c 40 13 78 	mr      r0,r2
    7284:	7c 0a 03 78 	mr      r10,r0
    7288:	81 6a 01 d4 	lwz     r11,468(r10)
    728c:	80 01 00 20 	lwz     r0,32(r1)
    7290:	7c 00 58 50 	subf    r0,r0,r11
    7294:	7f 89 00 40 	cmplw   cr7,r9,r0
    7298:	41 9d 00 0c 	bgt-    cr7,72a4 <sctp_setsockopt_hmac_ident+0xec>
    729c:	38 00 00 01 	li      r0,1
    72a0:	48 00 00 08 	b       72a8 <sctp_setsockopt_hmac_ident+0xf0>
    72a4:	38 00 00 00 	li      r0,0
    72a8:	2f 80 00 00 	cmpwi   cr7,r0,0
    72ac:	41 9e 00 1c 	beq-    cr7,72c8 <sctp_setsockopt_hmac_ident+0x110>
		return __copy_tofrom_user((__force void __user *)to, from, n);
    72b0:	80 61 00 1c 	lwz     r3,28(r1)
    72b4:	80 81 00 20 	lwz     r4,32(r1)
    72b8:	80 a1 00 24 	lwz     r5,36(r1)
    72bc:	48 00 00 01 	bl      72bc <sctp_setsockopt_hmac_ident+0x104>
    72c0:	7c 60 1b 78 	mr      r0,r3
    72c4:	48 00 00 60 	b       7324 <sctp_setsockopt_hmac_ident+0x16c>
	if ((unsigned long)from < TASK_SIZE) {
    72c8:	81 21 00 20 	lwz     r9,32(r1)
    72cc:	3c 00 bf ff 	lis     r0,-16385
    72d0:	60 00 ff ff 	ori     r0,r0,65535
    72d4:	7f 89 00 40 	cmplw   cr7,r9,r0
    72d8:	41 9d 00 48 	bgt-    cr7,7320 <sctp_setsockopt_hmac_ident+0x168>
		over = (unsigned long)from + n - TASK_SIZE;
    72dc:	81 21 00 20 	lwz     r9,32(r1)
    72e0:	80 01 00 24 	lwz     r0,36(r1)
    72e4:	7c 09 02 14 	add     r0,r9,r0
    72e8:	3d 60 40 00 	lis     r11,16384
    72ec:	7c 00 5a 14 	add     r0,r0,r11
    72f0:	90 01 00 28 	stw     r0,40(r1)
		return __copy_tofrom_user((__force void __user *)to, from,
    72f4:	81 21 00 24 	lwz     r9,36(r1)
    72f8:	80 01 00 28 	lwz     r0,40(r1)
    72fc:	7c 00 48 50 	subf    r0,r0,r9
    7300:	80 61 00 1c 	lwz     r3,28(r1)
    7304:	80 81 00 20 	lwz     r4,32(r1)
    7308:	7c 05 03 78 	mr      r5,r0
    730c:	48 00 00 01 	bl      730c <sctp_setsockopt_hmac_ident+0x154>
    7310:	7c 69 1b 78 	mr      r9,r3
    7314:	80 01 00 28 	lwz     r0,40(r1)
    7318:	7c 09 02 14 	add     r0,r9,r0
    731c:	48 00 00 08 	b       7324 <sctp_setsockopt_hmac_ident+0x16c>
				n - over) + over;
	}
	return n;
    7320:	80 01 00 24 	lwz     r0,36(r1)

	if (copy_from_user(hmacs, optval, optlen)) {
    7324:	2f 80 00 00 	cmpwi   cr7,r0,0
    7328:	41 9e 00 10 	beq-    cr7,7338 <sctp_setsockopt_hmac_ident+0x180>
		err = -EFAULT;
    732c:	38 00 ff f2 	li      r0,-14
    7330:	90 01 00 08 	stw     r0,8(r1)
		goto out;
    7334:	48 00 00 74 	b       73a8 <sctp_setsockopt_hmac_ident+0x1f0>
	}

	idents = hmacs->shmac_num_idents;
    7338:	80 01 00 0c 	lwz     r0,12(r1)
    733c:	7c 09 03 78 	mr      r9,r0
    7340:	80 09 00 00 	lwz     r0,0(r9)
    7344:	90 01 00 10 	stw     r0,16(r1)
	if (idents == 0 || idents > SCTP_AUTH_NUM_HMACS ||
    7348:	80 01 00 10 	lwz     r0,16(r1)
    734c:	2f 80 00 00 	cmpwi   cr7,r0,0
    7350:	41 9e 00 28 	beq-    cr7,7378 <sctp_setsockopt_hmac_ident+0x1c0>
    7354:	80 01 00 10 	lwz     r0,16(r1)
    7358:	2b 80 00 04 	cmplwi  cr7,r0,4
    735c:	41 9d 00 1c 	bgt-    cr7,7378 <sctp_setsockopt_hmac_ident+0x1c0>
	    (idents * sizeof(u16)) > (optlen - sizeof(struct sctp_hmacalgo))) {
    7360:	80 01 00 10 	lwz     r0,16(r1)
    7364:	54 09 08 3c 	rlwinm  r9,r0,1,0,30
    7368:	80 01 00 40 	lwz     r0,64(r1)
    736c:	30 00 ff fc 	addic   r0,r0,-4
		err = -EFAULT;
		goto out;
	}

	idents = hmacs->shmac_num_idents;
	if (idents == 0 || idents > SCTP_AUTH_NUM_HMACS ||
    7370:	7f 89 00 40 	cmplw   cr7,r9,r0
    7374:	40 9d 00 10 	ble-    cr7,7384 <sctp_setsockopt_hmac_ident+0x1cc>
	    (idents * sizeof(u16)) > (optlen - sizeof(struct sctp_hmacalgo))) {
		err = -EINVAL;
    7378:	38 00 ff ea 	li      r0,-22
    737c:	90 01 00 08 	stw     r0,8(r1)
		goto out;
    7380:	48 00 00 28 	b       73a8 <sctp_setsockopt_hmac_ident+0x1f0>
    7384:	80 01 00 38 	lwz     r0,56(r1)
    7388:	90 01 00 2c 	stw     r0,44(r1)
    738c:	80 01 00 2c 	lwz     r0,44(r1)
	}

	err = sctp_auth_ep_set_hmacs(sctp_sk(sk)->ep, hmacs);
    7390:	7c 0a 03 78 	mr      r10,r0
    7394:	80 0a 01 d4 	lwz     r0,468(r10)
    7398:	7c 03 03 78 	mr      r3,r0
    739c:	80 81 00 0c 	lwz     r4,12(r1)
    73a0:	48 00 00 01 	bl      73a0 <sctp_setsockopt_hmac_ident+0x1e8>
    73a4:	90 61 00 08 	stw     r3,8(r1)
out:
	kfree(hmacs);
    73a8:	80 61 00 0c 	lwz     r3,12(r1)
    73ac:	48 00 00 01 	bl      73ac <sctp_setsockopt_hmac_ident+0x1f4>
	return err;
    73b0:	80 01 00 08 	lwz     r0,8(r1)
}
    73b4:	7c 03 03 78 	mr      r3,r0
    73b8:	80 01 00 54 	lwz     r0,84(r1)
    73bc:	7c 08 03 a6 	mtlr    r0
    73c0:	38 21 00 50 	addi    r1,r1,80
    73c4:	4e 80 00 20 	blr

000073c8 <sctp_setsockopt_auth_key>:
 * association shared key.
 */
static int sctp_setsockopt_auth_key(struct sock *sk,
				    char __user *optval,
				    unsigned int optlen)
{
    73c8:	94 21 ff a0 	stwu    r1,-96(r1)
    73cc:	7c 08 02 a6 	mflr    r0
    73d0:	90 01 00 64 	stw     r0,100(r1)
    73d4:	90 61 00 48 	stw     r3,72(r1)
    73d8:	90 81 00 4c 	stw     r4,76(r1)
    73dc:	90 a1 00 50 	stw     r5,80(r1)
	struct sctp_authkey *authkey;
	struct sctp_association *asoc;
	int ret;

	if (!sctp_auth_enable)
    73e0:	3c 00 00 00 	lis     r0,0
    73e4:	30 00 00 00 	addic   r0,r0,0
    73e8:	7c 09 03 78 	mr      r9,r0
    73ec:	80 09 00 74 	lwz     r0,116(r9)
    73f0:	2f 80 00 00 	cmpwi   cr7,r0,0
    73f4:	40 9e 00 0c 	bne-    cr7,7400 <sctp_setsockopt_auth_key+0x38>
		return -EACCES;
    73f8:	38 00 ff f3 	li      r0,-13
    73fc:	48 00 02 34 	b       7630 <sctp_setsockopt_auth_key+0x268>

	if (optlen <= sizeof(struct sctp_authkey))
    7400:	80 01 00 50 	lwz     r0,80(r1)
    7404:	2b 80 00 08 	cmplwi  cr7,r0,8
    7408:	41 9d 00 0c 	bgt-    cr7,7414 <sctp_setsockopt_auth_key+0x4c>
		return -EINVAL;
    740c:	38 00 ff ea 	li      r0,-22
    7410:	48 00 02 20 	b       7630 <sctp_setsockopt_auth_key+0x268>
    7414:	80 01 00 50 	lwz     r0,80(r1)
    7418:	90 01 00 14 	stw     r0,20(r1)
    741c:	38 00 00 d0 	li      r0,208
    7420:	90 01 00 18 	stw     r0,24(r1)
    7424:	80 61 00 14 	lwz     r3,20(r1)
    7428:	80 81 00 18 	lwz     r4,24(r1)
    742c:	48 00 00 01 	bl      742c <sctp_setsockopt_auth_key+0x64>
    7430:	7c 60 1b 78 	mr      r0,r3

	authkey = kmalloc(optlen, GFP_KERNEL);
    7434:	90 01 00 0c 	stw     r0,12(r1)
	if (!authkey)
    7438:	80 01 00 0c 	lwz     r0,12(r1)
    743c:	2f 80 00 00 	cmpwi   cr7,r0,0
    7440:	40 9e 00 0c 	bne-    cr7,744c <sctp_setsockopt_auth_key+0x84>
		return -ENOMEM;
    7444:	38 00 ff f4 	li      r0,-12
    7448:	48 00 01 e8 	b       7630 <sctp_setsockopt_auth_key+0x268>
    744c:	80 01 00 0c 	lwz     r0,12(r1)
    7450:	90 01 00 1c 	stw     r0,28(r1)
    7454:	80 01 00 4c 	lwz     r0,76(r1)
    7458:	90 01 00 20 	stw     r0,32(r1)
    745c:	80 01 00 50 	lwz     r0,80(r1)
    7460:	90 01 00 24 	stw     r0,36(r1)
static inline unsigned long copy_from_user(void *to,
		const void __user *from, unsigned long n)
{
	unsigned long over;

	if (access_ok(VERIFY_READ, from, n))
    7464:	81 21 00 20 	lwz     r9,32(r1)
    7468:	7c 40 13 78 	mr      r0,r2
    746c:	7c 0a 03 78 	mr      r10,r0
    7470:	80 0a 01 d4 	lwz     r0,468(r10)
    7474:	7f 89 00 40 	cmplw   cr7,r9,r0
    7478:	41 9d 00 3c 	bgt-    cr7,74b4 <sctp_setsockopt_auth_key+0xec>
    747c:	80 01 00 24 	lwz     r0,36(r1)
    7480:	2f 80 00 00 	cmpwi   cr7,r0,0
    7484:	41 9e 00 28 	beq-    cr7,74ac <sctp_setsockopt_auth_key+0xe4>
    7488:	80 01 00 24 	lwz     r0,36(r1)
    748c:	31 20 ff ff 	addic   r9,r0,-1
    7490:	7c 40 13 78 	mr      r0,r2
    7494:	7c 0a 03 78 	mr      r10,r0
    7498:	81 6a 01 d4 	lwz     r11,468(r10)
    749c:	80 01 00 20 	lwz     r0,32(r1)
    74a0:	7c 00 58 50 	subf    r0,r0,r11
    74a4:	7f 89 00 40 	cmplw   cr7,r9,r0
    74a8:	41 9d 00 0c 	bgt-    cr7,74b4 <sctp_setsockopt_auth_key+0xec>
    74ac:	38 00 00 01 	li      r0,1
    74b0:	48 00 00 08 	b       74b8 <sctp_setsockopt_auth_key+0xf0>
    74b4:	38 00 00 00 	li      r0,0
    74b8:	2f 80 00 00 	cmpwi   cr7,r0,0
    74bc:	41 9e 00 1c 	beq-    cr7,74d8 <sctp_setsockopt_auth_key+0x110>
		return __copy_tofrom_user((__force void __user *)to, from, n);
    74c0:	80 61 00 1c 	lwz     r3,28(r1)
    74c4:	80 81 00 20 	lwz     r4,32(r1)
    74c8:	80 a1 00 24 	lwz     r5,36(r1)
    74cc:	48 00 00 01 	bl      74cc <sctp_setsockopt_auth_key+0x104>
    74d0:	7c 60 1b 78 	mr      r0,r3
    74d4:	48 00 00 60 	b       7534 <sctp_setsockopt_auth_key+0x16c>
	if ((unsigned long)from < TASK_SIZE) {
    74d8:	81 21 00 20 	lwz     r9,32(r1)
    74dc:	3c 00 bf ff 	lis     r0,-16385
    74e0:	60 00 ff ff 	ori     r0,r0,65535
    74e4:	7f 89 00 40 	cmplw   cr7,r9,r0
    74e8:	41 9d 00 48 	bgt-    cr7,7530 <sctp_setsockopt_auth_key+0x168>
		over = (unsigned long)from + n - TASK_SIZE;
    74ec:	81 21 00 20 	lwz     r9,32(r1)
    74f0:	80 01 00 24 	lwz     r0,36(r1)
    74f4:	7c 09 02 14 	add     r0,r9,r0
    74f8:	3d 60 40 00 	lis     r11,16384
    74fc:	7c 00 5a 14 	add     r0,r0,r11
    7500:	90 01 00 28 	stw     r0,40(r1)
		return __copy_tofrom_user((__force void __user *)to, from,
    7504:	81 21 00 24 	lwz     r9,36(r1)
    7508:	80 01 00 28 	lwz     r0,40(r1)
    750c:	7c 00 48 50 	subf    r0,r0,r9
    7510:	80 61 00 1c 	lwz     r3,28(r1)
    7514:	80 81 00 20 	lwz     r4,32(r1)
    7518:	7c 05 03 78 	mr      r5,r0
    751c:	48 00 00 01 	bl      751c <sctp_setsockopt_auth_key+0x154>
    7520:	7c 69 1b 78 	mr      r9,r3
    7524:	80 01 00 28 	lwz     r0,40(r1)
    7528:	7c 09 02 14 	add     r0,r9,r0
    752c:	48 00 00 08 	b       7534 <sctp_setsockopt_auth_key+0x16c>
				n - over) + over;
	}
	return n;
    7530:	80 01 00 24 	lwz     r0,36(r1)

	if (copy_from_user(authkey, optval, optlen)) {
    7534:	2f 80 00 00 	cmpwi   cr7,r0,0
    7538:	41 9e 00 10 	beq-    cr7,7548 <sctp_setsockopt_auth_key+0x180>
		ret = -EFAULT;
    753c:	38 00 ff f2 	li      r0,-14
    7540:	90 01 00 08 	stw     r0,8(r1)
		goto out;
    7544:	48 00 00 e0 	b       7624 <sctp_setsockopt_auth_key+0x25c>
	}

	if (authkey->sca_keylength > optlen - sizeof(struct sctp_authkey)) {
    7548:	80 01 00 0c 	lwz     r0,12(r1)
    754c:	7c 09 03 78 	mr      r9,r0
    7550:	a0 09 00 06 	lhz     r0,6(r9)
    7554:	54 00 04 3e 	clrlwi  r0,r0,16
    7558:	7c 09 03 78 	mr      r9,r0
    755c:	80 01 00 50 	lwz     r0,80(r1)
    7560:	30 00 ff f8 	addic   r0,r0,-8
    7564:	7f 89 00 40 	cmplw   cr7,r9,r0
    7568:	40 9d 00 10 	ble-    cr7,7578 <sctp_setsockopt_auth_key+0x1b0>
		ret = -EINVAL;
    756c:	38 00 ff ea 	li      r0,-22
    7570:	90 01 00 08 	stw     r0,8(r1)
		goto out;
    7574:	48 00 00 b0 	b       7624 <sctp_setsockopt_auth_key+0x25c>
	}

	asoc = sctp_id2assoc(sk, authkey->sca_assoc_id);
    7578:	80 01 00 0c 	lwz     r0,12(r1)
    757c:	7c 0a 03 78 	mr      r10,r0
    7580:	80 0a 00 00 	lwz     r0,0(r10)
    7584:	80 61 00 48 	lwz     r3,72(r1)
    7588:	7c 04 03 78 	mr      r4,r0
    758c:	48 00 00 01 	bl      758c <sctp_setsockopt_auth_key+0x1c4>
    7590:	90 61 00 10 	stw     r3,16(r1)
	if (!asoc && authkey->sca_assoc_id && sctp_style(sk, UDP)) {
    7594:	80 01 00 10 	lwz     r0,16(r1)
    7598:	2f 80 00 00 	cmpwi   cr7,r0,0
    759c:	40 9e 00 60 	bne-    cr7,75fc <sctp_setsockopt_auth_key+0x234>
    75a0:	80 01 00 0c 	lwz     r0,12(r1)
    75a4:	7c 0b 03 78 	mr      r11,r0
    75a8:	80 0b 00 00 	lwz     r0,0(r11)
    75ac:	2f 80 00 00 	cmpwi   cr7,r0,0
    75b0:	41 9e 00 4c 	beq-    cr7,75fc <sctp_setsockopt_auth_key+0x234>
    75b4:	80 01 00 48 	lwz     r0,72(r1)
    75b8:	90 01 00 2c 	stw     r0,44(r1)
    75bc:	38 00 00 00 	li      r0,0
    75c0:	90 01 00 30 	stw     r0,48(r1)
    75c4:	80 01 00 2c 	lwz     r0,44(r1)
    75c8:	90 01 00 34 	stw     r0,52(r1)
    75cc:	80 01 00 34 	lwz     r0,52(r1)

/* Is a socket of this style? */
#define sctp_style(sk, style) __sctp_style((sk), (SCTP_SOCKET_##style))
static inline int __sctp_style(const struct sock *sk, sctp_socket_type_t style)
{
	return sctp_sk(sk)->type == style;
    75d0:	7c 09 03 78 	mr      r9,r0
    75d4:	80 09 01 c8 	lwz     r0,456(r9)
    75d8:	81 21 00 30 	lwz     r9,48(r1)
    75dc:	7f 89 00 00 	cmpw    cr7,r9,r0
    75e0:	7c 00 00 26 	mfcr    r0
    75e4:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
    75e8:	2f 80 00 00 	cmpwi   cr7,r0,0
    75ec:	41 9e 00 10 	beq-    cr7,75fc <sctp_setsockopt_auth_key+0x234>
		ret = -EINVAL;
    75f0:	38 00 ff ea 	li      r0,-22
    75f4:	90 01 00 08 	stw     r0,8(r1)
		goto out;
    75f8:	48 00 00 2c 	b       7624 <sctp_setsockopt_auth_key+0x25c>
    75fc:	80 01 00 48 	lwz     r0,72(r1)
    7600:	90 01 00 38 	stw     r0,56(r1)
    7604:	80 01 00 38 	lwz     r0,56(r1)
	}

	ret = sctp_auth_set_key(sctp_sk(sk)->ep, asoc, authkey);
    7608:	7c 0a 03 78 	mr      r10,r0
    760c:	80 0a 01 d4 	lwz     r0,468(r10)
    7610:	7c 03 03 78 	mr      r3,r0
    7614:	80 81 00 10 	lwz     r4,16(r1)
    7618:	80 a1 00 0c 	lwz     r5,12(r1)
    761c:	48 00 00 01 	bl      761c <sctp_setsockopt_auth_key+0x254>
    7620:	90 61 00 08 	stw     r3,8(r1)
out:
	kfree(authkey);
    7624:	80 61 00 0c 	lwz     r3,12(r1)
    7628:	48 00 00 01 	bl      7628 <sctp_setsockopt_auth_key+0x260>
	return ret;
    762c:	80 01 00 08 	lwz     r0,8(r1)
}
    7630:	7c 03 03 78 	mr      r3,r0
    7634:	80 01 00 64 	lwz     r0,100(r1)
    7638:	7c 08 03 a6 	mtlr    r0
    763c:	38 21 00 60 	addi    r1,r1,96
    7640:	4e 80 00 20 	blr

00007644 <sctp_setsockopt_active_key>:
 * the association shared key.
 */
static int sctp_setsockopt_active_key(struct sock *sk,
				      char __user *optval,
				      unsigned int optlen)
{
    7644:	94 21 ff b0 	stwu    r1,-80(r1)
    7648:	7c 08 02 a6 	mflr    r0
    764c:	90 01 00 54 	stw     r0,84(r1)
    7650:	90 61 00 38 	stw     r3,56(r1)
    7654:	90 81 00 3c 	stw     r4,60(r1)
    7658:	90 a1 00 40 	stw     r5,64(r1)
	struct sctp_authkeyid val;
	struct sctp_association *asoc;

	if (!sctp_auth_enable)
    765c:	3c 00 00 00 	lis     r0,0
    7660:	30 00 00 00 	addic   r0,r0,0
    7664:	7c 09 03 78 	mr      r9,r0
    7668:	80 09 00 74 	lwz     r0,116(r9)
    766c:	2f 80 00 00 	cmpwi   cr7,r0,0
    7670:	40 9e 00 0c 	bne-    cr7,767c <sctp_setsockopt_active_key+0x38>
		return -EACCES;
    7674:	38 00 ff f3 	li      r0,-13
    7678:	48 00 01 b0 	b       7828 <sctp_setsockopt_active_key+0x1e4>

	if (optlen != sizeof(struct sctp_authkeyid))
    767c:	80 01 00 40 	lwz     r0,64(r1)
    7680:	2f 80 00 08 	cmpwi   cr7,r0,8
    7684:	41 9e 00 0c 	beq-    cr7,7690 <sctp_setsockopt_active_key+0x4c>
		return -EINVAL;
    7688:	38 00 ff ea 	li      r0,-22
    768c:	48 00 01 9c 	b       7828 <sctp_setsockopt_active_key+0x1e4>
	if (copy_from_user(&val, optval, optlen))
    7690:	38 01 00 2c 	addi    r0,r1,44

	if (!sctp_auth_enable)
		return -EACCES;

	if (optlen != sizeof(struct sctp_authkeyid))
		return -EINVAL;
    7694:	90 01 00 0c 	stw     r0,12(r1)
    7698:	80 01 00 3c 	lwz     r0,60(r1)
    769c:	90 01 00 10 	stw     r0,16(r1)
    76a0:	80 01 00 40 	lwz     r0,64(r1)
    76a4:	90 01 00 14 	stw     r0,20(r1)
static inline unsigned long copy_from_user(void *to,
		const void __user *from, unsigned long n)
{
	unsigned long over;

	if (access_ok(VERIFY_READ, from, n))
    76a8:	81 21 00 10 	lwz     r9,16(r1)
    76ac:	7c 40 13 78 	mr      r0,r2
    76b0:	7c 0a 03 78 	mr      r10,r0
    76b4:	80 0a 01 d4 	lwz     r0,468(r10)
    76b8:	7f 89 00 40 	cmplw   cr7,r9,r0
    76bc:	41 9d 00 3c 	bgt-    cr7,76f8 <sctp_setsockopt_active_key+0xb4>
    76c0:	80 01 00 14 	lwz     r0,20(r1)
    76c4:	2f 80 00 00 	cmpwi   cr7,r0,0
    76c8:	41 9e 00 28 	beq-    cr7,76f0 <sctp_setsockopt_active_key+0xac>
    76cc:	80 01 00 14 	lwz     r0,20(r1)
    76d0:	31 20 ff ff 	addic   r9,r0,-1
    76d4:	7c 40 13 78 	mr      r0,r2
    76d8:	7c 0a 03 78 	mr      r10,r0
    76dc:	81 6a 01 d4 	lwz     r11,468(r10)
    76e0:	80 01 00 10 	lwz     r0,16(r1)
    76e4:	7c 00 58 50 	subf    r0,r0,r11
    76e8:	7f 89 00 40 	cmplw   cr7,r9,r0
    76ec:	41 9d 00 0c 	bgt-    cr7,76f8 <sctp_setsockopt_active_key+0xb4>
    76f0:	38 00 00 01 	li      r0,1
    76f4:	48 00 00 08 	b       76fc <sctp_setsockopt_active_key+0xb8>
    76f8:	38 00 00 00 	li      r0,0
    76fc:	2f 80 00 00 	cmpwi   cr7,r0,0
    7700:	41 9e 00 1c 	beq-    cr7,771c <sctp_setsockopt_active_key+0xd8>
		return __copy_tofrom_user((__force void __user *)to, from, n);
    7704:	80 61 00 0c 	lwz     r3,12(r1)
    7708:	80 81 00 10 	lwz     r4,16(r1)
    770c:	80 a1 00 14 	lwz     r5,20(r1)
    7710:	48 00 00 01 	bl      7710 <sctp_setsockopt_active_key+0xcc>
    7714:	7c 60 1b 78 	mr      r0,r3
    7718:	48 00 00 60 	b       7778 <sctp_setsockopt_active_key+0x134>
	if ((unsigned long)from < TASK_SIZE) {
    771c:	81 21 00 10 	lwz     r9,16(r1)
    7720:	3c 00 bf ff 	lis     r0,-16385
    7724:	60 00 ff ff 	ori     r0,r0,65535
    7728:	7f 89 00 40 	cmplw   cr7,r9,r0
    772c:	41 9d 00 48 	bgt-    cr7,7774 <sctp_setsockopt_active_key+0x130>
		over = (unsigned long)from + n - TASK_SIZE;
    7730:	81 21 00 10 	lwz     r9,16(r1)
    7734:	80 01 00 14 	lwz     r0,20(r1)
    7738:	7c 09 02 14 	add     r0,r9,r0
    773c:	3d 60 40 00 	lis     r11,16384
    7740:	7c 00 5a 14 	add     r0,r0,r11
    7744:	90 01 00 18 	stw     r0,24(r1)
		return __copy_tofrom_user((__force void __user *)to, from,
    7748:	81 21 00 14 	lwz     r9,20(r1)
    774c:	80 01 00 18 	lwz     r0,24(r1)
    7750:	7c 00 48 50 	subf    r0,r0,r9
    7754:	80 61 00 0c 	lwz     r3,12(r1)
    7758:	80 81 00 10 	lwz     r4,16(r1)
    775c:	7c 05 03 78 	mr      r5,r0
    7760:	48 00 00 01 	bl      7760 <sctp_setsockopt_active_key+0x11c>
    7764:	7c 69 1b 78 	mr      r9,r3
    7768:	80 01 00 18 	lwz     r0,24(r1)
    776c:	7c 09 02 14 	add     r0,r9,r0
    7770:	48 00 00 08 	b       7778 <sctp_setsockopt_active_key+0x134>
				n - over) + over;
	}
	return n;
    7774:	80 01 00 14 	lwz     r0,20(r1)
	if (copy_from_user(&val, optval, optlen))
    7778:	2f 80 00 00 	cmpwi   cr7,r0,0
    777c:	41 9e 00 0c 	beq-    cr7,7788 <sctp_setsockopt_active_key+0x144>
		return -EFAULT;
    7780:	38 00 ff f2 	li      r0,-14
    7784:	48 00 00 a4 	b       7828 <sctp_setsockopt_active_key+0x1e4>

	asoc = sctp_id2assoc(sk, val.scact_assoc_id);
    7788:	80 01 00 2c 	lwz     r0,44(r1)
    778c:	80 61 00 38 	lwz     r3,56(r1)
    7790:	7c 04 03 78 	mr      r4,r0
    7794:	48 00 00 01 	bl      7794 <sctp_setsockopt_active_key+0x150>
    7798:	90 61 00 08 	stw     r3,8(r1)
	if (!asoc && val.scact_assoc_id && sctp_style(sk, UDP))
    779c:	80 01 00 08 	lwz     r0,8(r1)
    77a0:	2f 80 00 00 	cmpwi   cr7,r0,0
    77a4:	40 9e 00 54 	bne-    cr7,77f8 <sctp_setsockopt_active_key+0x1b4>
    77a8:	80 01 00 2c 	lwz     r0,44(r1)
    77ac:	2f 80 00 00 	cmpwi   cr7,r0,0
    77b0:	41 9e 00 48 	beq-    cr7,77f8 <sctp_setsockopt_active_key+0x1b4>
    77b4:	80 01 00 38 	lwz     r0,56(r1)
    77b8:	90 01 00 1c 	stw     r0,28(r1)
    77bc:	38 00 00 00 	li      r0,0
    77c0:	90 01 00 20 	stw     r0,32(r1)
    77c4:	80 01 00 1c 	lwz     r0,28(r1)
    77c8:	90 01 00 24 	stw     r0,36(r1)
    77cc:	80 01 00 24 	lwz     r0,36(r1)
    77d0:	7c 09 03 78 	mr      r9,r0
    77d4:	80 09 01 c8 	lwz     r0,456(r9)
    77d8:	81 21 00 20 	lwz     r9,32(r1)
    77dc:	7f 89 00 00 	cmpw    cr7,r9,r0
    77e0:	7c 00 00 26 	mfcr    r0
    77e4:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
    77e8:	2f 80 00 00 	cmpwi   cr7,r0,0
    77ec:	41 9e 00 0c 	beq-    cr7,77f8 <sctp_setsockopt_active_key+0x1b4>
		return -EINVAL;
    77f0:	38 00 ff ea 	li      r0,-22
    77f4:	48 00 00 34 	b       7828 <sctp_setsockopt_active_key+0x1e4>
    77f8:	80 01 00 38 	lwz     r0,56(r1)
    77fc:	90 01 00 28 	stw     r0,40(r1)
    7800:	80 01 00 28 	lwz     r0,40(r1)

	return sctp_auth_set_active_key(sctp_sk(sk)->ep, asoc,
    7804:	7c 0a 03 78 	mr      r10,r0
    7808:	81 2a 01 d4 	lwz     r9,468(r10)
    780c:	a0 01 00 30 	lhz     r0,48(r1)
    7810:	54 00 04 3e 	clrlwi  r0,r0,16
    7814:	7d 23 4b 78 	mr      r3,r9
    7818:	80 81 00 08 	lwz     r4,8(r1)
    781c:	7c 05 03 78 	mr      r5,r0
    7820:	48 00 00 01 	bl      7820 <sctp_setsockopt_active_key+0x1dc>
    7824:	7c 60 1b 78 	mr      r0,r3
					val.scact_keynumber);
}
    7828:	7c 03 03 78 	mr      r3,r0
    782c:	80 01 00 54 	lwz     r0,84(r1)
    7830:	7c 08 03 a6 	mtlr    r0
    7834:	38 21 00 50 	addi    r1,r1,80
    7838:	4e 80 00 20 	blr

0000783c <sctp_setsockopt_del_key>:
 * This set option will delete a shared secret key from use.
 */
static int sctp_setsockopt_del_key(struct sock *sk,
				   char __user *optval,
				   unsigned int optlen)
{
    783c:	94 21 ff b0 	stwu    r1,-80(r1)
    7840:	7c 08 02 a6 	mflr    r0
    7844:	90 01 00 54 	stw     r0,84(r1)
    7848:	90 61 00 38 	stw     r3,56(r1)
    784c:	90 81 00 3c 	stw     r4,60(r1)
    7850:	90 a1 00 40 	stw     r5,64(r1)
	struct sctp_authkeyid val;
	struct sctp_association *asoc;

	if (!sctp_auth_enable)
    7854:	3c 00 00 00 	lis     r0,0
    7858:	30 00 00 00 	addic   r0,r0,0
    785c:	7c 09 03 78 	mr      r9,r0
    7860:	80 09 00 74 	lwz     r0,116(r9)
    7864:	2f 80 00 00 	cmpwi   cr7,r0,0
    7868:	40 9e 00 0c 	bne-    cr7,7874 <sctp_setsockopt_del_key+0x38>
		return -EACCES;
    786c:	38 00 ff f3 	li      r0,-13
    7870:	48 00 01 b0 	b       7a20 <sctp_setsockopt_del_key+0x1e4>

	if (optlen != sizeof(struct sctp_authkeyid))
    7874:	80 01 00 40 	lwz     r0,64(r1)
    7878:	2f 80 00 08 	cmpwi   cr7,r0,8
    787c:	41 9e 00 0c 	beq-    cr7,7888 <sctp_setsockopt_del_key+0x4c>
		return -EINVAL;
    7880:	38 00 ff ea 	li      r0,-22
    7884:	48 00 01 9c 	b       7a20 <sctp_setsockopt_del_key+0x1e4>
	if (copy_from_user(&val, optval, optlen))
    7888:	38 01 00 2c 	addi    r0,r1,44

	if (!sctp_auth_enable)
		return -EACCES;

	if (optlen != sizeof(struct sctp_authkeyid))
		return -EINVAL;
    788c:	90 01 00 0c 	stw     r0,12(r1)
    7890:	80 01 00 3c 	lwz     r0,60(r1)
    7894:	90 01 00 10 	stw     r0,16(r1)
    7898:	80 01 00 40 	lwz     r0,64(r1)
    789c:	90 01 00 14 	stw     r0,20(r1)
static inline unsigned long copy_from_user(void *to,
		const void __user *from, unsigned long n)
{
	unsigned long over;

	if (access_ok(VERIFY_READ, from, n))
    78a0:	81 21 00 10 	lwz     r9,16(r1)
    78a4:	7c 40 13 78 	mr      r0,r2
    78a8:	7c 0a 03 78 	mr      r10,r0
    78ac:	80 0a 01 d4 	lwz     r0,468(r10)
    78b0:	7f 89 00 40 	cmplw   cr7,r9,r0
    78b4:	41 9d 00 3c 	bgt-    cr7,78f0 <sctp_setsockopt_del_key+0xb4>
    78b8:	80 01 00 14 	lwz     r0,20(r1)
    78bc:	2f 80 00 00 	cmpwi   cr7,r0,0
    78c0:	41 9e 00 28 	beq-    cr7,78e8 <sctp_setsockopt_del_key+0xac>
    78c4:	80 01 00 14 	lwz     r0,20(r1)
    78c8:	31 20 ff ff 	addic   r9,r0,-1
    78cc:	7c 40 13 78 	mr      r0,r2
    78d0:	7c 0a 03 78 	mr      r10,r0
    78d4:	81 6a 01 d4 	lwz     r11,468(r10)
    78d8:	80 01 00 10 	lwz     r0,16(r1)
    78dc:	7c 00 58 50 	subf    r0,r0,r11
    78e0:	7f 89 00 40 	cmplw   cr7,r9,r0
    78e4:	41 9d 00 0c 	bgt-    cr7,78f0 <sctp_setsockopt_del_key+0xb4>
    78e8:	38 00 00 01 	li      r0,1
    78ec:	48 00 00 08 	b       78f4 <sctp_setsockopt_del_key+0xb8>
    78f0:	38 00 00 00 	li      r0,0
    78f4:	2f 80 00 00 	cmpwi   cr7,r0,0
    78f8:	41 9e 00 1c 	beq-    cr7,7914 <sctp_setsockopt_del_key+0xd8>
		return __copy_tofrom_user((__force void __user *)to, from, n);
    78fc:	80 61 00 0c 	lwz     r3,12(r1)
    7900:	80 81 00 10 	lwz     r4,16(r1)
    7904:	80 a1 00 14 	lwz     r5,20(r1)
    7908:	48 00 00 01 	bl      7908 <sctp_setsockopt_del_key+0xcc>
    790c:	7c 60 1b 78 	mr      r0,r3
    7910:	48 00 00 60 	b       7970 <sctp_setsockopt_del_key+0x134>
	if ((unsigned long)from < TASK_SIZE) {
    7914:	81 21 00 10 	lwz     r9,16(r1)
    7918:	3c 00 bf ff 	lis     r0,-16385
    791c:	60 00 ff ff 	ori     r0,r0,65535
    7920:	7f 89 00 40 	cmplw   cr7,r9,r0
    7924:	41 9d 00 48 	bgt-    cr7,796c <sctp_setsockopt_del_key+0x130>
		over = (unsigned long)from + n - TASK_SIZE;
    7928:	81 21 00 10 	lwz     r9,16(r1)
    792c:	80 01 00 14 	lwz     r0,20(r1)
    7930:	7c 09 02 14 	add     r0,r9,r0
    7934:	3d 60 40 00 	lis     r11,16384
    7938:	7c 00 5a 14 	add     r0,r0,r11
    793c:	90 01 00 18 	stw     r0,24(r1)
		return __copy_tofrom_user((__force void __user *)to, from,
    7940:	81 21 00 14 	lwz     r9,20(r1)
    7944:	80 01 00 18 	lwz     r0,24(r1)
    7948:	7c 00 48 50 	subf    r0,r0,r9
    794c:	80 61 00 0c 	lwz     r3,12(r1)
    7950:	80 81 00 10 	lwz     r4,16(r1)
    7954:	7c 05 03 78 	mr      r5,r0
    7958:	48 00 00 01 	bl      7958 <sctp_setsockopt_del_key+0x11c>
    795c:	7c 69 1b 78 	mr      r9,r3
    7960:	80 01 00 18 	lwz     r0,24(r1)
    7964:	7c 09 02 14 	add     r0,r9,r0
    7968:	48 00 00 08 	b       7970 <sctp_setsockopt_del_key+0x134>
				n - over) + over;
	}
	return n;
    796c:	80 01 00 14 	lwz     r0,20(r1)
	if (copy_from_user(&val, optval, optlen))
    7970:	2f 80 00 00 	cmpwi   cr7,r0,0
    7974:	41 9e 00 0c 	beq-    cr7,7980 <sctp_setsockopt_del_key+0x144>
		return -EFAULT;
    7978:	38 00 ff f2 	li      r0,-14
    797c:	48 00 00 a4 	b       7a20 <sctp_setsockopt_del_key+0x1e4>

	asoc = sctp_id2assoc(sk, val.scact_assoc_id);
    7980:	80 01 00 2c 	lwz     r0,44(r1)
    7984:	80 61 00 38 	lwz     r3,56(r1)
    7988:	7c 04 03 78 	mr      r4,r0
    798c:	48 00 00 01 	bl      798c <sctp_setsockopt_del_key+0x150>
    7990:	90 61 00 08 	stw     r3,8(r1)
	if (!asoc && val.scact_assoc_id && sctp_style(sk, UDP))
    7994:	80 01 00 08 	lwz     r0,8(r1)
    7998:	2f 80 00 00 	cmpwi   cr7,r0,0
    799c:	40 9e 00 54 	bne-    cr7,79f0 <sctp_setsockopt_del_key+0x1b4>
    79a0:	80 01 00 2c 	lwz     r0,44(r1)
    79a4:	2f 80 00 00 	cmpwi   cr7,r0,0
    79a8:	41 9e 00 48 	beq-    cr7,79f0 <sctp_setsockopt_del_key+0x1b4>
    79ac:	80 01 00 38 	lwz     r0,56(r1)
    79b0:	90 01 00 1c 	stw     r0,28(r1)
    79b4:	38 00 00 00 	li      r0,0
    79b8:	90 01 00 20 	stw     r0,32(r1)
    79bc:	80 01 00 1c 	lwz     r0,28(r1)
    79c0:	90 01 00 24 	stw     r0,36(r1)
    79c4:	80 01 00 24 	lwz     r0,36(r1)
    79c8:	7c 09 03 78 	mr      r9,r0
    79cc:	80 09 01 c8 	lwz     r0,456(r9)
    79d0:	81 21 00 20 	lwz     r9,32(r1)
    79d4:	7f 89 00 00 	cmpw    cr7,r9,r0
    79d8:	7c 00 00 26 	mfcr    r0
    79dc:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
    79e0:	2f 80 00 00 	cmpwi   cr7,r0,0
    79e4:	41 9e 00 0c 	beq-    cr7,79f0 <sctp_setsockopt_del_key+0x1b4>
		return -EINVAL;
    79e8:	38 00 ff ea 	li      r0,-22
    79ec:	48 00 00 34 	b       7a20 <sctp_setsockopt_del_key+0x1e4>
    79f0:	80 01 00 38 	lwz     r0,56(r1)
    79f4:	90 01 00 28 	stw     r0,40(r1)
    79f8:	80 01 00 28 	lwz     r0,40(r1)

	return sctp_auth_del_key_id(sctp_sk(sk)->ep, asoc,
    79fc:	7c 0a 03 78 	mr      r10,r0
    7a00:	81 2a 01 d4 	lwz     r9,468(r10)
    7a04:	a0 01 00 30 	lhz     r0,48(r1)
    7a08:	54 00 04 3e 	clrlwi  r0,r0,16
    7a0c:	7d 23 4b 78 	mr      r3,r9
    7a10:	80 81 00 08 	lwz     r4,8(r1)
    7a14:	7c 05 03 78 	mr      r5,r0
    7a18:	48 00 00 01 	bl      7a18 <sctp_setsockopt_del_key+0x1dc>
    7a1c:	7c 60 1b 78 	mr      r0,r3
				    val.scact_keynumber);

}
    7a20:	7c 03 03 78 	mr      r3,r0
    7a24:	80 01 00 54 	lwz     r0,84(r1)
    7a28:	7c 08 03 a6 	mtlr    r0
    7a2c:	38 21 00 50 	addi    r1,r1,80
    7a30:	4e 80 00 20 	blr

00007a34 <sctp_setsockopt>:
 *   optval  - the buffer to store the value of the option.
 *   optlen  - the size of the buffer.
 */
SCTP_STATIC int sctp_setsockopt(struct sock *sk, int level, int optname,
				char __user *optval, unsigned int optlen)
{
    7a34:	94 21 ff d0 	stwu    r1,-48(r1)
    7a38:	7c 08 02 a6 	mflr    r0
    7a3c:	90 01 00 34 	stw     r0,52(r1)
    7a40:	90 61 00 18 	stw     r3,24(r1)
    7a44:	90 81 00 1c 	stw     r4,28(r1)
    7a48:	90 a1 00 20 	stw     r5,32(r1)
    7a4c:	90 c1 00 24 	stw     r6,36(r1)
    7a50:	90 e1 00 28 	stw     r7,40(r1)
	int retval = 0;
    7a54:	38 00 00 00 	li      r0,0
    7a58:	90 01 00 08 	stw     r0,8(r1)
	 * so broken as to be worse than useless.  The API draft
	 * REALLY is NOT helpful here...  I am not convinced that the
	 * semantics of setsockopt() with a level OTHER THAN SOL_SCTP
	 * are at all well-founded.
	 */
	if (level != SOL_SCTP) {
    7a5c:	80 01 00 1c 	lwz     r0,28(r1)
    7a60:	2f 80 00 84 	cmpwi   cr7,r0,132
    7a64:	41 9e 00 54 	beq-    cr7,7ab8 <sctp_setsockopt+0x84>
    7a68:	80 01 00 18 	lwz     r0,24(r1)
    7a6c:	90 01 00 10 	stw     r0,16(r1)
    7a70:	80 01 00 10 	lwz     r0,16(r1)
		struct sctp_af *af = sctp_sk(sk)->pf->af;
    7a74:	7c 09 03 78 	mr      r9,r0
    7a78:	80 09 01 cc 	lwz     r0,460(r9)
    7a7c:	7c 0b 03 78 	mr      r11,r0
    7a80:	80 0b 00 24 	lwz     r0,36(r11)
    7a84:	90 01 00 0c 	stw     r0,12(r1)
		retval = af->setsockopt(sk, level, optname, optval, optlen);
    7a88:	80 01 00 0c 	lwz     r0,12(r1)
    7a8c:	7c 09 03 78 	mr      r9,r0
    7a90:	80 09 00 04 	lwz     r0,4(r9)
    7a94:	80 61 00 18 	lwz     r3,24(r1)
    7a98:	80 81 00 1c 	lwz     r4,28(r1)
    7a9c:	80 a1 00 20 	lwz     r5,32(r1)
    7aa0:	80 c1 00 24 	lwz     r6,36(r1)
    7aa4:	80 e1 00 28 	lwz     r7,40(r1)
    7aa8:	7c 09 03 a6 	mtctr   r0
    7aac:	4e 80 04 21 	bctrl
    7ab0:	90 61 00 08 	stw     r3,8(r1)
		goto out_nounlock;
    7ab4:	48 00 03 20 	b       7dd4 <sctp_setsockopt+0x3a0>
    7ab8:	80 01 00 18 	lwz     r0,24(r1)
    7abc:	90 01 00 14 	stw     r0,20(r1)

extern void lock_sock_nested(struct sock *sk, int subclass);

static inline void lock_sock(struct sock *sk)
{
	lock_sock_nested(sk, 0);
    7ac0:	80 61 00 14 	lwz     r3,20(r1)
    7ac4:	38 80 00 00 	li      r4,0
    7ac8:	48 00 00 01 	bl      7ac8 <sctp_setsockopt+0x94>
	}

	sctp_lock_sock(sk);

	switch (optname) {
    7acc:	80 01 00 20 	lwz     r0,32(r1)
    7ad0:	2b 80 00 6e 	cmplwi  cr7,r0,110
    7ad4:	41 9d 02 ec 	bgt-    cr7,7dc0 <sctp_setsockopt+0x38c>
    7ad8:	80 01 00 20 	lwz     r0,32(r1)
    7adc:	54 09 10 3a 	rlwinm  r9,r0,2,0,29
    7ae0:	3c 00 00 00 	lis     r0,0
    7ae4:	30 00 01 50 	addic   r0,r0,336
    7ae8:	7c 09 02 14 	add     r0,r9,r0
    7aec:	7c 0b 03 78 	mr      r11,r0
    7af0:	81 2b 00 00 	lwz     r9,0(r11)
    7af4:	3c 00 00 00 	lis     r0,0
    7af8:	30 00 01 50 	addic   r0,r0,336
    7afc:	7c 09 02 14 	add     r0,r9,r0
    7b00:	7c 09 03 a6 	mtctr   r0
    7b04:	4e 80 04 20 	bctr
	case SCTP_SOCKOPT_BINDX_ADD:
		/* 'optlen' is the size of the addresses buffer. */
		retval = sctp_setsockopt_bindx(sk, (struct sockaddr __user *)optval,
    7b08:	80 01 00 28 	lwz     r0,40(r1)
    7b0c:	80 61 00 18 	lwz     r3,24(r1)
    7b10:	80 81 00 24 	lwz     r4,36(r1)
    7b14:	7c 05 03 78 	mr      r5,r0
    7b18:	38 c0 00 01 	li      r6,1
    7b1c:	4b ff 98 45 	bl      1360 <sctp_setsockopt_bindx>
    7b20:	90 61 00 08 	stw     r3,8(r1)
					       optlen, SCTP_BINDX_ADD_ADDR);
		break;
    7b24:	48 00 02 a8 	b       7dcc <sctp_setsockopt+0x398>

	case SCTP_SOCKOPT_BINDX_REM:
		/* 'optlen' is the size of the addresses buffer. */
		retval = sctp_setsockopt_bindx(sk, (struct sockaddr __user *)optval,
    7b28:	80 01 00 28 	lwz     r0,40(r1)
    7b2c:	80 61 00 18 	lwz     r3,24(r1)
    7b30:	80 81 00 24 	lwz     r4,36(r1)
    7b34:	7c 05 03 78 	mr      r5,r0
    7b38:	38 c0 00 02 	li      r6,2
    7b3c:	4b ff 98 25 	bl      1360 <sctp_setsockopt_bindx>
    7b40:	90 61 00 08 	stw     r3,8(r1)
					       optlen, SCTP_BINDX_REM_ADDR);
		break;
    7b44:	48 00 02 88 	b       7dcc <sctp_setsockopt+0x398>

	case SCTP_SOCKOPT_CONNECTX_OLD:
		/* 'optlen' is the size of the addresses buffer. */
		retval = sctp_setsockopt_connectx_old(sk,
    7b48:	80 01 00 28 	lwz     r0,40(r1)
    7b4c:	80 61 00 18 	lwz     r3,24(r1)
    7b50:	80 81 00 24 	lwz     r4,36(r1)
    7b54:	7c 05 03 78 	mr      r5,r0
    7b58:	4b ff a3 71 	bl      1ec8 <sctp_setsockopt_connectx_old>
    7b5c:	90 61 00 08 	stw     r3,8(r1)
					    (struct sockaddr __user *)optval,
					    optlen);
		break;
    7b60:	48 00 02 6c 	b       7dcc <sctp_setsockopt+0x398>

	case SCTP_SOCKOPT_CONNECTX:
		/* 'optlen' is the size of the addresses buffer. */
		retval = sctp_setsockopt_connectx(sk,
    7b64:	80 01 00 28 	lwz     r0,40(r1)
    7b68:	80 61 00 18 	lwz     r3,24(r1)
    7b6c:	80 81 00 24 	lwz     r4,36(r1)
    7b70:	7c 05 03 78 	mr      r5,r0
    7b74:	4b ff a3 99 	bl      1f0c <sctp_setsockopt_connectx>
    7b78:	90 61 00 08 	stw     r3,8(r1)
					    (struct sockaddr __user *)optval,
					    optlen);
		break;
    7b7c:	48 00 02 50 	b       7dcc <sctp_setsockopt+0x398>

	case SCTP_DISABLE_FRAGMENTS:
		retval = sctp_setsockopt_disable_fragments(sk, optval, optlen);
    7b80:	80 61 00 18 	lwz     r3,24(r1)
    7b84:	80 81 00 24 	lwz     r4,36(r1)
    7b88:	80 a1 00 28 	lwz     r5,40(r1)
    7b8c:	4b ff c2 c5 	bl      3e50 <sctp_setsockopt_disable_fragments>
    7b90:	90 61 00 08 	stw     r3,8(r1)
		break;
    7b94:	48 00 02 38 	b       7dcc <sctp_setsockopt+0x398>

	case SCTP_EVENTS:
		retval = sctp_setsockopt_events(sk, optval, optlen);
    7b98:	80 61 00 18 	lwz     r3,24(r1)
    7b9c:	80 81 00 24 	lwz     r4,36(r1)
    7ba0:	80 a1 00 28 	lwz     r5,40(r1)
    7ba4:	4b ff c3 b9 	bl      3f5c <sctp_setsockopt_events>
    7ba8:	90 61 00 08 	stw     r3,8(r1)
		break;
    7bac:	48 00 02 20 	b       7dcc <sctp_setsockopt+0x398>

	case SCTP_AUTOCLOSE:
		retval = sctp_setsockopt_autoclose(sk, optval, optlen);
    7bb0:	80 61 00 18 	lwz     r3,24(r1)
    7bb4:	80 81 00 24 	lwz     r4,36(r1)
    7bb8:	80 a1 00 28 	lwz     r5,40(r1)
    7bbc:	4b ff c4 e9 	bl      40a4 <sctp_setsockopt_autoclose>
    7bc0:	90 61 00 08 	stw     r3,8(r1)
		break;
    7bc4:	48 00 02 08 	b       7dcc <sctp_setsockopt+0x398>

	case SCTP_PEER_ADDR_PARAMS:
		retval = sctp_setsockopt_peer_addr_params(sk, optval, optlen);
    7bc8:	80 61 00 18 	lwz     r3,24(r1)
    7bcc:	80 81 00 24 	lwz     r4,36(r1)
    7bd0:	80 a1 00 28 	lwz     r5,40(r1)
    7bd4:	4b ff cd 01 	bl      48d4 <sctp_setsockopt_peer_addr_params>
    7bd8:	90 61 00 08 	stw     r3,8(r1)
		break;
    7bdc:	48 00 01 f0 	b       7dcc <sctp_setsockopt+0x398>

	case SCTP_DELAYED_SACK:
		retval = sctp_setsockopt_delayed_ack(sk, optval, optlen);
    7be0:	80 61 00 18 	lwz     r3,24(r1)
    7be4:	80 81 00 24 	lwz     r4,36(r1)
    7be8:	80 a1 00 28 	lwz     r5,40(r1)
    7bec:	4b ff d0 9d 	bl      4c88 <sctp_setsockopt_delayed_ack>
    7bf0:	90 61 00 08 	stw     r3,8(r1)
		break;
    7bf4:	48 00 01 d8 	b       7dcc <sctp_setsockopt+0x398>
	case SCTP_PARTIAL_DELIVERY_POINT:
		retval = sctp_setsockopt_partial_delivery_point(sk, optval, optlen);
    7bf8:	80 61 00 18 	lwz     r3,24(r1)
    7bfc:	80 81 00 24 	lwz     r4,36(r1)
    7c00:	80 a1 00 28 	lwz     r5,40(r1)
    7c04:	4b ff f0 0d 	bl      6c10 <sctp_setsockopt_partial_delivery_point>
    7c08:	90 61 00 08 	stw     r3,8(r1)
		break;
    7c0c:	48 00 01 c0 	b       7dcc <sctp_setsockopt+0x398>

	case SCTP_INITMSG:
		retval = sctp_setsockopt_initmsg(sk, optval, optlen);
    7c10:	80 61 00 18 	lwz     r3,24(r1)
    7c14:	80 81 00 24 	lwz     r4,36(r1)
    7c18:	80 a1 00 28 	lwz     r5,40(r1)
    7c1c:	4b ff d6 49 	bl      5264 <sctp_setsockopt_initmsg>
    7c20:	90 61 00 08 	stw     r3,8(r1)
		break;
    7c24:	48 00 01 a8 	b       7dcc <sctp_setsockopt+0x398>
	case SCTP_DEFAULT_SEND_PARAM:
		retval = sctp_setsockopt_default_send_param(sk, optval,
    7c28:	80 61 00 18 	lwz     r3,24(r1)
    7c2c:	80 81 00 24 	lwz     r4,36(r1)
    7c30:	80 a1 00 28 	lwz     r5,40(r1)
    7c34:	4b ff d8 0d 	bl      5440 <sctp_setsockopt_default_send_param>
    7c38:	90 61 00 08 	stw     r3,8(r1)
							    optlen);
		break;
    7c3c:	48 00 01 90 	b       7dcc <sctp_setsockopt+0x398>
	case SCTP_PRIMARY_ADDR:
		retval = sctp_setsockopt_primary_addr(sk, optval, optlen);
    7c40:	80 61 00 18 	lwz     r3,24(r1)
    7c44:	80 81 00 24 	lwz     r4,36(r1)
    7c48:	80 a1 00 28 	lwz     r5,40(r1)
    7c4c:	4b ff da 71 	bl      56bc <sctp_setsockopt_primary_addr>
    7c50:	90 61 00 08 	stw     r3,8(r1)
		break;
    7c54:	48 00 01 78 	b       7dcc <sctp_setsockopt+0x398>
	case SCTP_SET_PEER_PRIMARY_ADDR:
		retval = sctp_setsockopt_peer_primary_addr(sk, optval, optlen);
    7c58:	80 61 00 18 	lwz     r3,24(r1)
    7c5c:	80 81 00 24 	lwz     r4,36(r1)
    7c60:	80 a1 00 28 	lwz     r5,40(r1)
    7c64:	4b ff e8 b5 	bl      6518 <sctp_setsockopt_peer_primary_addr>
    7c68:	90 61 00 08 	stw     r3,8(r1)
		break;
    7c6c:	48 00 01 60 	b       7dcc <sctp_setsockopt+0x398>
	case SCTP_NODELAY:
		retval = sctp_setsockopt_nodelay(sk, optval, optlen);
    7c70:	80 61 00 18 	lwz     r3,24(r1)
    7c74:	80 81 00 24 	lwz     r4,36(r1)
    7c78:	80 a1 00 28 	lwz     r5,40(r1)
    7c7c:	4b ff db c9 	bl      5844 <sctp_setsockopt_nodelay>
    7c80:	90 61 00 08 	stw     r3,8(r1)
		break;
    7c84:	48 00 01 48 	b       7dcc <sctp_setsockopt+0x398>
	case SCTP_RTOINFO:
		retval = sctp_setsockopt_rtoinfo(sk, optval, optlen);
    7c88:	80 61 00 18 	lwz     r3,24(r1)
    7c8c:	80 81 00 24 	lwz     r4,36(r1)
    7c90:	80 a1 00 28 	lwz     r5,40(r1)
    7c94:	4b ff dc bd 	bl      5950 <sctp_setsockopt_rtoinfo>
    7c98:	90 61 00 08 	stw     r3,8(r1)
		break;
    7c9c:	48 00 01 30 	b       7dcc <sctp_setsockopt+0x398>
	case SCTP_ASSOCINFO:
		retval = sctp_setsockopt_associnfo(sk, optval, optlen);
    7ca0:	80 61 00 18 	lwz     r3,24(r1)
    7ca4:	80 81 00 24 	lwz     r4,36(r1)
    7ca8:	80 a1 00 28 	lwz     r5,40(r1)
    7cac:	4b ff df 3d 	bl      5be8 <sctp_setsockopt_associnfo>
    7cb0:	90 61 00 08 	stw     r3,8(r1)
		break;
    7cb4:	48 00 01 18 	b       7dcc <sctp_setsockopt+0x398>
	case SCTP_I_WANT_MAPPED_V4_ADDR:
		retval = sctp_setsockopt_mappedv4(sk, optval, optlen);
    7cb8:	80 61 00 18 	lwz     r3,24(r1)
    7cbc:	80 81 00 24 	lwz     r4,36(r1)
    7cc0:	80 a1 00 28 	lwz     r5,40(r1)
    7cc4:	4b ff e2 95 	bl      5f58 <sctp_setsockopt_mappedv4>
    7cc8:	90 61 00 08 	stw     r3,8(r1)
		break;
    7ccc:	48 00 01 00 	b       7dcc <sctp_setsockopt+0x398>
	case SCTP_MAXSEG:
		retval = sctp_setsockopt_maxseg(sk, optval, optlen);
    7cd0:	80 61 00 18 	lwz     r3,24(r1)
    7cd4:	80 81 00 24 	lwz     r4,36(r1)
    7cd8:	80 a1 00 28 	lwz     r5,40(r1)
    7cdc:	4b ff e3 9d 	bl      6078 <sctp_setsockopt_maxseg>
    7ce0:	90 61 00 08 	stw     r3,8(r1)
		break;
    7ce4:	48 00 00 e8 	b       7dcc <sctp_setsockopt+0x398>
	case SCTP_ADAPTATION_LAYER:
		retval = sctp_setsockopt_adaptation_layer(sk, optval, optlen);
    7ce8:	80 61 00 18 	lwz     r3,24(r1)
    7cec:	80 81 00 24 	lwz     r4,36(r1)
    7cf0:	80 a1 00 28 	lwz     r5,40(r1)
    7cf4:	4b ff eb 19 	bl      680c <sctp_setsockopt_adaptation_layer>
    7cf8:	90 61 00 08 	stw     r3,8(r1)
		break;
    7cfc:	48 00 00 d0 	b       7dcc <sctp_setsockopt+0x398>
	case SCTP_CONTEXT:
		retval = sctp_setsockopt_context(sk, optval, optlen);
    7d00:	80 61 00 18 	lwz     r3,24(r1)
    7d04:	80 81 00 24 	lwz     r4,36(r1)
    7d08:	80 a1 00 28 	lwz     r5,40(r1)
    7d0c:	4b ff ec 55 	bl      6960 <sctp_setsockopt_context>
    7d10:	90 61 00 08 	stw     r3,8(r1)
		break;
    7d14:	48 00 00 b8 	b       7dcc <sctp_setsockopt+0x398>
	case SCTP_FRAGMENT_INTERLEAVE:
		retval = sctp_setsockopt_fragment_interleave(sk, optval, optlen);
    7d18:	80 61 00 18 	lwz     r3,24(r1)
    7d1c:	80 81 00 24 	lwz     r4,36(r1)
    7d20:	80 a1 00 28 	lwz     r5,40(r1)
    7d24:	4b ff ed e1 	bl      6b04 <sctp_setsockopt_fragment_interleave>
    7d28:	90 61 00 08 	stw     r3,8(r1)
		break;
    7d2c:	48 00 00 a0 	b       7dcc <sctp_setsockopt+0x398>
	case SCTP_MAX_BURST:
		retval = sctp_setsockopt_maxburst(sk, optval, optlen);
    7d30:	80 61 00 18 	lwz     r3,24(r1)
    7d34:	80 81 00 24 	lwz     r4,36(r1)
    7d38:	80 a1 00 28 	lwz     r5,40(r1)
    7d3c:	4b ff ef f5 	bl      6d30 <sctp_setsockopt_maxburst>
    7d40:	90 61 00 08 	stw     r3,8(r1)
		break;
    7d44:	48 00 00 88 	b       7dcc <sctp_setsockopt+0x398>
	case SCTP_AUTH_CHUNK:
		retval = sctp_setsockopt_auth_chunk(sk, optval, optlen);
    7d48:	80 61 00 18 	lwz     r3,24(r1)
    7d4c:	80 81 00 24 	lwz     r4,36(r1)
    7d50:	80 a1 00 28 	lwz     r5,40(r1)
    7d54:	4b ff f2 b5 	bl      7008 <sctp_setsockopt_auth_chunk>
    7d58:	90 61 00 08 	stw     r3,8(r1)
		break;
    7d5c:	48 00 00 70 	b       7dcc <sctp_setsockopt+0x398>
	case SCTP_HMAC_IDENT:
		retval = sctp_setsockopt_hmac_ident(sk, optval, optlen);
    7d60:	80 61 00 18 	lwz     r3,24(r1)
    7d64:	80 81 00 24 	lwz     r4,36(r1)
    7d68:	80 a1 00 28 	lwz     r5,40(r1)
    7d6c:	4b ff f4 4d 	bl      71b8 <sctp_setsockopt_hmac_ident>
    7d70:	90 61 00 08 	stw     r3,8(r1)
		break;
    7d74:	48 00 00 58 	b       7dcc <sctp_setsockopt+0x398>
	case SCTP_AUTH_KEY:
		retval = sctp_setsockopt_auth_key(sk, optval, optlen);
    7d78:	80 61 00 18 	lwz     r3,24(r1)
    7d7c:	80 81 00 24 	lwz     r4,36(r1)
    7d80:	80 a1 00 28 	lwz     r5,40(r1)
    7d84:	4b ff f6 45 	bl      73c8 <sctp_setsockopt_auth_key>
    7d88:	90 61 00 08 	stw     r3,8(r1)
		break;
    7d8c:	48 00 00 40 	b       7dcc <sctp_setsockopt+0x398>
	case SCTP_AUTH_ACTIVE_KEY:
		retval = sctp_setsockopt_active_key(sk, optval, optlen);
    7d90:	80 61 00 18 	lwz     r3,24(r1)
    7d94:	80 81 00 24 	lwz     r4,36(r1)
    7d98:	80 a1 00 28 	lwz     r5,40(r1)
    7d9c:	4b ff f8 a9 	bl      7644 <sctp_setsockopt_active_key>
    7da0:	90 61 00 08 	stw     r3,8(r1)
		break;
    7da4:	48 00 00 28 	b       7dcc <sctp_setsockopt+0x398>
	case SCTP_AUTH_DELETE_KEY:
		retval = sctp_setsockopt_del_key(sk, optval, optlen);
    7da8:	80 61 00 18 	lwz     r3,24(r1)
    7dac:	80 81 00 24 	lwz     r4,36(r1)
    7db0:	80 a1 00 28 	lwz     r5,40(r1)
    7db4:	4b ff fa 89 	bl      783c <sctp_setsockopt_del_key>
    7db8:	90 61 00 08 	stw     r3,8(r1)
		break;
    7dbc:	48 00 00 10 	b       7dcc <sctp_setsockopt+0x398>
	default:
		retval = -ENOPROTOOPT;
    7dc0:	38 00 ff a4 	li      r0,-92
    7dc4:	90 01 00 08 	stw     r0,8(r1)
		break;
    7dc8:	60 00 00 00 	nop
	}

	sctp_release_sock(sk);
    7dcc:	80 61 00 18 	lwz     r3,24(r1)
    7dd0:	48 00 00 01 	bl      7dd0 <sctp_setsockopt+0x39c>

out_nounlock:
	return retval;
    7dd4:	80 01 00 08 	lwz     r0,8(r1)
}
    7dd8:	7c 03 03 78 	mr      r3,r0
    7ddc:	80 01 00 34 	lwz     r0,52(r1)
    7de0:	7c 08 03 a6 	mtlr    r0
    7de4:	38 21 00 30 	addi    r1,r1,48
    7de8:	4e 80 00 20 	blr

00007dec <sctp_connect>:
 *
 * len: the size of the address.
 */
SCTP_STATIC int sctp_connect(struct sock *sk, struct sockaddr *addr,
			     int addr_len)
{
    7dec:	94 21 ff d0 	stwu    r1,-48(r1)
    7df0:	7c 08 02 a6 	mflr    r0
    7df4:	90 01 00 34 	stw     r0,52(r1)
    7df8:	90 61 00 18 	stw     r3,24(r1)
    7dfc:	90 81 00 1c 	stw     r4,28(r1)
    7e00:	90 a1 00 20 	stw     r5,32(r1)
	int err = 0;
    7e04:	38 00 00 00 	li      r0,0
    7e08:	90 01 00 08 	stw     r0,8(r1)
    7e0c:	80 01 00 18 	lwz     r0,24(r1)
    7e10:	90 01 00 10 	stw     r0,16(r1)
    7e14:	80 61 00 10 	lwz     r3,16(r1)
    7e18:	38 80 00 00 	li      r4,0
    7e1c:	48 00 00 01 	bl      7e1c <sctp_connect+0x30>

	SCTP_DEBUG_PRINTK("%s - sk: %p, sockaddr: %p, addr_len: %d\n",
			  __func__, sk, addr, addr_len);

	/* Validate addr_len before calling common connect/connectx routine. */
	af = sctp_get_af_specific(addr->sa_family);
    7e20:	80 01 00 1c 	lwz     r0,28(r1)
    7e24:	7c 09 03 78 	mr      r9,r0
    7e28:	a0 09 00 00 	lhz     r0,0(r9)
    7e2c:	54 00 04 3e 	clrlwi  r0,r0,16
    7e30:	7c 03 03 78 	mr      r3,r0
    7e34:	48 00 00 01 	bl      7e34 <sctp_connect+0x48>
    7e38:	90 61 00 0c 	stw     r3,12(r1)
	if (!af || addr_len < af->sockaddr_len) {
    7e3c:	80 01 00 0c 	lwz     r0,12(r1)
    7e40:	2f 80 00 00 	cmpwi   cr7,r0,0
    7e44:	41 9e 00 1c 	beq-    cr7,7e60 <sctp_connect+0x74>
    7e48:	80 01 00 0c 	lwz     r0,12(r1)
    7e4c:	7c 0b 03 78 	mr      r11,r0
    7e50:	81 2b 00 6c 	lwz     r9,108(r11)
    7e54:	80 01 00 20 	lwz     r0,32(r1)
    7e58:	7f 89 00 00 	cmpw    cr7,r9,r0
    7e5c:	40 9d 00 10 	ble-    cr7,7e6c <sctp_connect+0x80>
		err = -EINVAL;
    7e60:	38 00 ff ea 	li      r0,-22
    7e64:	90 01 00 08 	stw     r0,8(r1)
    7e68:	48 00 00 28 	b       7e90 <sctp_connect+0xa4>
	} else {
		/* Pass correct addr len to common routine (so it knows there
		 * is only one address being passed.
		 */
		err = __sctp_connect(sk, addr, af->sockaddr_len, NULL);
    7e6c:	80 01 00 0c 	lwz     r0,12(r1)
    7e70:	7c 09 03 78 	mr      r9,r0
    7e74:	80 09 00 6c 	lwz     r0,108(r9)
    7e78:	80 61 00 18 	lwz     r3,24(r1)
    7e7c:	80 81 00 1c 	lwz     r4,28(r1)
    7e80:	7c 05 03 78 	mr      r5,r0
    7e84:	38 c0 00 00 	li      r6,0
    7e88:	4b ff 97 d9 	bl      1660 <__sctp_connect>
    7e8c:	90 61 00 08 	stw     r3,8(r1)
	}

	sctp_release_sock(sk);
    7e90:	80 61 00 18 	lwz     r3,24(r1)
    7e94:	48 00 00 01 	bl      7e94 <sctp_connect+0xa8>
	return err;
    7e98:	80 01 00 08 	lwz     r0,8(r1)
}
    7e9c:	7c 03 03 78 	mr      r3,r0
    7ea0:	80 01 00 34 	lwz     r0,52(r1)
    7ea4:	7c 08 03 a6 	mtlr    r0
    7ea8:	38 21 00 30 	addi    r1,r1,48
    7eac:	4e 80 00 20 	blr

00007eb0 <sctp_disconnect>:

/* FIXME: Write comments. */
SCTP_STATIC int sctp_disconnect(struct sock *sk, int flags)
{
    7eb0:	94 21 ff f0 	stwu    r1,-16(r1)
    7eb4:	90 61 00 08 	stw     r3,8(r1)
    7eb8:	90 81 00 0c 	stw     r4,12(r1)
	return -EOPNOTSUPP; /* STUB */
    7ebc:	38 00 ff a1 	li      r0,-95
}
    7ec0:	7c 03 03 78 	mr      r3,r0
    7ec4:	38 21 00 10 	addi    r1,r1,16
    7ec8:	4e 80 00 20 	blr

00007ecc <sctp_accept>:
 * association from the accept queue of the endpoint.  A new socket
 * descriptor will be returned from accept() to represent the newly
 * formed association.
 */
SCTP_STATIC struct sock *sctp_accept(struct sock *sk, int flags, int *err)
{
    7ecc:	94 21 ff a0 	stwu    r1,-96(r1)
    7ed0:	7c 08 02 a6 	mflr    r0
    7ed4:	90 01 00 64 	stw     r0,100(r1)
    7ed8:	90 61 00 48 	stw     r3,72(r1)
    7edc:	90 81 00 4c 	stw     r4,76(r1)
    7ee0:	90 a1 00 50 	stw     r5,80(r1)
	struct sctp_sock *sp;
	struct sctp_endpoint *ep;
	struct sock *newsk = NULL;
    7ee4:	38 00 00 00 	li      r0,0
    7ee8:	90 01 00 08 	stw     r0,8(r1)
	struct sctp_association *asoc;
	long timeo;
	int error = 0;
    7eec:	38 00 00 00 	li      r0,0
    7ef0:	90 01 00 0c 	stw     r0,12(r1)
    7ef4:	80 01 00 48 	lwz     r0,72(r1)
    7ef8:	90 01 00 24 	stw     r0,36(r1)
    7efc:	80 61 00 24 	lwz     r3,36(r1)
    7f00:	38 80 00 00 	li      r4,0
    7f04:	48 00 00 01 	bl      7f04 <sctp_accept+0x38>
    7f08:	80 01 00 48 	lwz     r0,72(r1)
    7f0c:	90 01 00 28 	stw     r0,40(r1)
    7f10:	80 01 00 28 	lwz     r0,40(r1)

	sctp_lock_sock(sk);

	sp = sctp_sk(sk);
    7f14:	90 01 00 10 	stw     r0,16(r1)
	ep = sp->ep;
    7f18:	80 01 00 10 	lwz     r0,16(r1)
    7f1c:	7c 09 03 78 	mr      r9,r0
    7f20:	80 09 01 d4 	lwz     r0,468(r9)
    7f24:	90 01 00 14 	stw     r0,20(r1)
    7f28:	80 01 00 48 	lwz     r0,72(r1)
    7f2c:	90 01 00 2c 	stw     r0,44(r1)
    7f30:	38 00 00 02 	li      r0,2
    7f34:	90 01 00 30 	stw     r0,48(r1)
    7f38:	80 01 00 2c 	lwz     r0,44(r1)
    7f3c:	90 01 00 34 	stw     r0,52(r1)
    7f40:	80 01 00 34 	lwz     r0,52(r1)
    7f44:	7c 0b 03 78 	mr      r11,r0
    7f48:	80 0b 01 c8 	lwz     r0,456(r11)
    7f4c:	81 21 00 30 	lwz     r9,48(r1)
    7f50:	7f 89 00 00 	cmpw    cr7,r9,r0
    7f54:	7c 00 00 26 	mfcr    r0
    7f58:	54 00 ff fe 	rlwinm  r0,r0,31,31,31

	if (!sctp_style(sk, TCP)) {
    7f5c:	2f 80 00 00 	cmpwi   cr7,r0,0
    7f60:	40 9e 00 10 	bne-    cr7,7f70 <sctp_accept+0xa4>
		error = -EOPNOTSUPP;
    7f64:	38 00 ff a1 	li      r0,-95
    7f68:	90 01 00 0c 	stw     r0,12(r1)
		goto out;
    7f6c:	48 00 01 14 	b       8080 <sctp_accept+0x1b4>
    7f70:	80 01 00 48 	lwz     r0,72(r1)
    7f74:	90 01 00 38 	stw     r0,56(r1)
    7f78:	38 00 00 0a 	li      r0,10
    7f7c:	90 01 00 3c 	stw     r0,60(r1)

/* Is the socket in this state? */
#define sctp_sstate(sk, state) __sctp_sstate((sk), (SCTP_SS_##state))
static inline int __sctp_sstate(const struct sock *sk, sctp_sock_state_t state)
{
	return sk->sk_state == state;
    7f80:	80 01 00 38 	lwz     r0,56(r1)
    7f84:	7c 09 03 78 	mr      r9,r0
    7f88:	88 09 00 0e 	lbz     r0,14(r9)
    7f8c:	54 00 06 3e 	clrlwi  r0,r0,24
    7f90:	81 21 00 3c 	lwz     r9,60(r1)
    7f94:	7f 89 00 00 	cmpw    cr7,r9,r0
    7f98:	7c 00 00 26 	mfcr    r0
    7f9c:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
	}

	if (!sctp_sstate(sk, LISTENING)) {
    7fa0:	2f 80 00 00 	cmpwi   cr7,r0,0
    7fa4:	40 9e 00 10 	bne-    cr7,7fb4 <sctp_accept+0xe8>
		error = -EINVAL;
    7fa8:	38 00 ff ea 	li      r0,-22
    7fac:	90 01 00 0c 	stw     r0,12(r1)
		goto out;
    7fb0:	48 00 00 d0 	b       8080 <sctp_accept+0x1b4>
	}

	timeo = sock_rcvtimeo(sk, flags & O_NONBLOCK);
    7fb4:	80 01 00 4c 	lwz     r0,76(r1)
    7fb8:	54 00 05 28 	rlwinm  r0,r0,0,20,20
    7fbc:	81 21 00 48 	lwz     r9,72(r1)
    7fc0:	91 21 00 40 	stw     r9,64(r1)
    7fc4:	90 01 00 44 	stw     r0,68(r1)
	return in_softirq() ? GFP_ATOMIC : GFP_KERNEL;
}

static inline long sock_rcvtimeo(const struct sock *sk, int noblock)
{
	return noblock ? 0 : sk->sk_rcvtimeo;
    7fc8:	80 01 00 44 	lwz     r0,68(r1)
    7fcc:	2f 80 00 00 	cmpwi   cr7,r0,0
    7fd0:	40 9e 00 14 	bne-    cr7,7fe4 <sctp_accept+0x118>
    7fd4:	80 01 00 40 	lwz     r0,64(r1)
    7fd8:	7c 0b 03 78 	mr      r11,r0
    7fdc:	80 0b 00 e0 	lwz     r0,224(r11)
    7fe0:	48 00 00 08 	b       7fe8 <sctp_accept+0x11c>
    7fe4:	38 00 00 00 	li      r0,0
    7fe8:	90 01 00 18 	stw     r0,24(r1)

	error = sctp_wait_for_accept(sk, timeo);
    7fec:	80 61 00 48 	lwz     r3,72(r1)
    7ff0:	80 81 00 18 	lwz     r4,24(r1)
    7ff4:	48 00 a1 19 	bl      1210c <sctp_wait_for_accept>
    7ff8:	90 61 00 0c 	stw     r3,12(r1)
	if (error)
    7ffc:	80 01 00 0c 	lwz     r0,12(r1)
    8000:	2f 80 00 00 	cmpwi   cr7,r0,0
    8004:	40 9e 00 78 	bne-    cr7,807c <sctp_accept+0x1b0>
		goto out;

	/* We treat the list of associations on the endpoint as the accept
	 * queue and pick the first association on the list.
	 */
	asoc = list_entry(ep->asocs.next, struct sctp_association, asocs);
    8008:	80 01 00 14 	lwz     r0,20(r1)
    800c:	7c 09 03 78 	mr      r9,r0
    8010:	80 09 00 4c 	lwz     r0,76(r9)
    8014:	90 01 00 1c 	stw     r0,28(r1)
    8018:	80 01 00 1c 	lwz     r0,28(r1)
    801c:	30 00 ff b4 	addic   r0,r0,-76
    8020:	90 01 00 20 	stw     r0,32(r1)

	newsk = sp->pf->create_accept_sk(sk, asoc);
    8024:	80 01 00 10 	lwz     r0,16(r1)
    8028:	7c 0b 03 78 	mr      r11,r0
    802c:	80 0b 01 cc 	lwz     r0,460(r11)
    8030:	7c 09 03 78 	mr      r9,r0
    8034:	80 09 00 1c 	lwz     r0,28(r9)
    8038:	80 61 00 48 	lwz     r3,72(r1)
    803c:	80 81 00 20 	lwz     r4,32(r1)
    8040:	7c 09 03 a6 	mtctr   r0
    8044:	4e 80 04 21 	bctrl
    8048:	90 61 00 08 	stw     r3,8(r1)
	if (!newsk) {
    804c:	80 01 00 08 	lwz     r0,8(r1)
    8050:	2f 80 00 00 	cmpwi   cr7,r0,0
    8054:	40 9e 00 10 	bne-    cr7,8064 <sctp_accept+0x198>
		error = -ENOMEM;
    8058:	38 00 ff f4 	li      r0,-12
    805c:	90 01 00 0c 	stw     r0,12(r1)
		goto out;
    8060:	48 00 00 20 	b       8080 <sctp_accept+0x1b4>
	}

	/* Populate the fields of the newsk from the oldsk and migrate the
	 * asoc to the newsk.
	 */
	sctp_sock_migrate(sk, newsk, asoc, SCTP_SOCKET_TCP);
    8064:	80 61 00 48 	lwz     r3,72(r1)
    8068:	80 81 00 08 	lwz     r4,8(r1)
    806c:	80 a1 00 20 	lwz     r5,32(r1)
    8070:	38 c0 00 02 	li      r6,2
    8074:	48 00 a9 9d 	bl      12a10 <sctp_sock_migrate>
    8078:	48 00 00 08 	b       8080 <sctp_accept+0x1b4>

	timeo = sock_rcvtimeo(sk, flags & O_NONBLOCK);

	error = sctp_wait_for_accept(sk, timeo);
	if (error)
		goto out;
    807c:	60 00 00 00 	nop
	 * asoc to the newsk.
	 */
	sctp_sock_migrate(sk, newsk, asoc, SCTP_SOCKET_TCP);

out:
	sctp_release_sock(sk);
    8080:	80 61 00 48 	lwz     r3,72(r1)
    8084:	48 00 00 01 	bl      8084 <sctp_accept+0x1b8>
	*err = error;
    8088:	80 01 00 50 	lwz     r0,80(r1)
    808c:	81 21 00 0c 	lwz     r9,12(r1)
    8090:	7c 0b 03 78 	mr      r11,r0
    8094:	91 2b 00 00 	stw     r9,0(r11)
	return newsk;
    8098:	80 01 00 08 	lwz     r0,8(r1)
}
    809c:	7c 03 03 78 	mr      r3,r0
    80a0:	80 01 00 64 	lwz     r0,100(r1)
    80a4:	7c 08 03 a6 	mtlr    r0
    80a8:	38 21 00 60 	addi    r1,r1,96
    80ac:	4e 80 00 20 	blr

000080b0 <sctp_ioctl>:

/* The SCTP ioctl handler. */
SCTP_STATIC int sctp_ioctl(struct sock *sk, int cmd, unsigned long arg)
{
    80b0:	94 21 ff a0 	stwu    r1,-96(r1)
    80b4:	7c 08 02 a6 	mflr    r0
    80b8:	90 01 00 64 	stw     r0,100(r1)
    80bc:	93 e1 00 5c 	stw     r31,92(r1)
    80c0:	90 61 00 48 	stw     r3,72(r1)
    80c4:	90 81 00 4c 	stw     r4,76(r1)
    80c8:	90 a1 00 50 	stw     r5,80(r1)
	int rc = -ENOTCONN;
    80cc:	38 00 ff 95 	li      r0,-107
    80d0:	90 01 00 08 	stw     r0,8(r1)
    80d4:	80 01 00 48 	lwz     r0,72(r1)
    80d8:	90 01 00 1c 	stw     r0,28(r1)

extern void lock_sock_nested(struct sock *sk, int subclass);

static inline void lock_sock(struct sock *sk)
{
	lock_sock_nested(sk, 0);
    80dc:	80 61 00 1c 	lwz     r3,28(r1)
    80e0:	38 80 00 00 	li      r4,0
    80e4:	48 00 00 01 	bl      80e4 <sctp_ioctl+0x34>
    80e8:	80 01 00 48 	lwz     r0,72(r1)
    80ec:	90 01 00 20 	stw     r0,32(r1)
    80f0:	38 00 00 02 	li      r0,2
    80f4:	90 01 00 24 	stw     r0,36(r1)
    80f8:	80 01 00 20 	lwz     r0,32(r1)
    80fc:	90 01 00 28 	stw     r0,40(r1)
    8100:	80 01 00 28 	lwz     r0,40(r1)

/* Is a socket of this style? */
#define sctp_style(sk, style) __sctp_style((sk), (SCTP_SOCKET_##style))
static inline int __sctp_style(const struct sock *sk, sctp_socket_type_t style)
{
	return sctp_sk(sk)->type == style;
    8104:	7c 09 03 78 	mr      r9,r0
    8108:	80 09 01 c8 	lwz     r0,456(r9)
    810c:	81 21 00 24 	lwz     r9,36(r1)
    8110:	7f 89 00 00 	cmpw    cr7,r9,r0
    8114:	7c 00 00 26 	mfcr    r0
    8118:	54 00 ff fe 	rlwinm  r0,r0,31,31,31

	/*
	 * SEQPACKET-style sockets in LISTENING state are valid, for
	 * SCTP, so only discard TCP-style sockets in LISTENING state.
	 */
	if (sctp_style(sk, TCP) && sctp_sstate(sk, LISTENING))
    811c:	2f 80 00 00 	cmpwi   cr7,r0,0
    8120:	41 9e 00 3c 	beq-    cr7,815c <sctp_ioctl+0xac>
    8124:	80 01 00 48 	lwz     r0,72(r1)
    8128:	90 01 00 2c 	stw     r0,44(r1)
    812c:	38 00 00 0a 	li      r0,10
    8130:	90 01 00 30 	stw     r0,48(r1)

/* Is the socket in this state? */
#define sctp_sstate(sk, state) __sctp_sstate((sk), (SCTP_SS_##state))
static inline int __sctp_sstate(const struct sock *sk, sctp_sock_state_t state)
{
	return sk->sk_state == state;
    8134:	80 01 00 2c 	lwz     r0,44(r1)
    8138:	7c 0b 03 78 	mr      r11,r0
    813c:	88 0b 00 0e 	lbz     r0,14(r11)
    8140:	54 00 06 3e 	clrlwi  r0,r0,24
    8144:	81 21 00 30 	lwz     r9,48(r1)
    8148:	7f 89 00 00 	cmpw    cr7,r9,r0
    814c:	7c 00 00 26 	mfcr    r0
    8150:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
    8154:	2f 80 00 00 	cmpwi   cr7,r0,0
    8158:	40 9e 01 0c 	bne-    cr7,8264 <sctp_ioctl+0x1b4>
		goto out;

	switch (cmd) {
    815c:	81 21 00 4c 	lwz     r9,76(r1)
    8160:	3c 00 40 04 	lis     r0,16388
    8164:	60 00 66 7f 	ori     r0,r0,26239
    8168:	7f 89 00 00 	cmpw    cr7,r9,r0
    816c:	40 9e 00 ec 	bne-    cr7,8258 <sctp_ioctl+0x1a8>
	case SIOCINQ: {
		struct sk_buff *skb;
		unsigned int amount = 0;
    8170:	38 00 00 00 	li      r0,0
    8174:	90 01 00 0c 	stw     r0,12(r1)

		skb = skb_peek(&sk->sk_receive_queue);
    8178:	80 01 00 48 	lwz     r0,72(r1)
    817c:	30 00 00 3c 	addic   r0,r0,60
    8180:	90 01 00 34 	stw     r0,52(r1)
 *	The reference count is not incremented and the reference is therefore
 *	volatile. Use with caution.
 */
static inline struct sk_buff *skb_peek(struct sk_buff_head *list_)
{
	struct sk_buff *list = ((struct sk_buff *)list_)->next;
    8184:	80 01 00 34 	lwz     r0,52(r1)
    8188:	7c 09 03 78 	mr      r9,r0
    818c:	80 09 00 00 	lwz     r0,0(r9)
    8190:	90 01 00 38 	stw     r0,56(r1)
	if (list == (struct sk_buff *)list_)
    8194:	81 21 00 34 	lwz     r9,52(r1)
    8198:	80 01 00 38 	lwz     r0,56(r1)
    819c:	7f 89 00 00 	cmpw    cr7,r9,r0
    81a0:	40 9e 00 0c 	bne-    cr7,81ac <sctp_ioctl+0xfc>
		list = NULL;
    81a4:	38 00 00 00 	li      r0,0
    81a8:	90 01 00 38 	stw     r0,56(r1)
	return list;
    81ac:	80 01 00 38 	lwz     r0,56(r1)
    81b0:	90 01 00 14 	stw     r0,20(r1)
		if (skb != NULL) {
    81b4:	80 01 00 14 	lwz     r0,20(r1)
    81b8:	2f 80 00 00 	cmpwi   cr7,r0,0
    81bc:	41 9e 00 14 	beq-    cr7,81d0 <sctp_ioctl+0x120>
			/*
			 * We will only return the amount of this packet since
			 * that is all that will be read.
			 */
			amount = skb->len;
    81c0:	80 01 00 14 	lwz     r0,20(r1)
    81c4:	7c 0b 03 78 	mr      r11,r0
    81c8:	80 0b 00 50 	lwz     r0,80(r11)
    81cc:	90 01 00 0c 	stw     r0,12(r1)
		}
		rc = put_user(amount, (int __user *)arg);
    81d0:	38 00 ff f2 	li      r0,-14
    81d4:	90 01 00 10 	stw     r0,16(r1)
    81d8:	80 01 00 50 	lwz     r0,80(r1)
    81dc:	90 01 00 18 	stw     r0,24(r1)
    81e0:	81 21 00 18 	lwz     r9,24(r1)
    81e4:	7c 40 13 78 	mr      r0,r2
    81e8:	7c 0b 03 78 	mr      r11,r0
    81ec:	80 0b 01 d4 	lwz     r0,468(r11)
    81f0:	7f 89 00 40 	cmplw   cr7,r9,r0
    81f4:	41 9d 00 28 	bgt-    cr7,821c <sctp_ioctl+0x16c>
    81f8:	7c 40 13 78 	mr      r0,r2
    81fc:	7c 0b 03 78 	mr      r11,r0
    8200:	81 2b 01 d4 	lwz     r9,468(r11)
    8204:	80 01 00 18 	lwz     r0,24(r1)
    8208:	7c 00 48 50 	subf    r0,r0,r9
    820c:	2b 80 00 02 	cmplwi  cr7,r0,2
    8210:	40 9d 00 0c 	ble-    cr7,821c <sctp_ioctl+0x16c>
    8214:	38 00 00 01 	li      r0,1
    8218:	48 00 00 08 	b       8220 <sctp_ioctl+0x170>
    821c:	38 00 00 00 	li      r0,0
    8220:	2f 80 00 00 	cmpwi   cr7,r0,0
    8224:	41 9e 00 28 	beq-    cr7,824c <sctp_ioctl+0x19c>
    8228:	38 00 00 00 	li      r0,0
    822c:	90 01 00 10 	stw     r0,16(r1)
    8230:	80 01 00 0c 	lwz     r0,12(r1)
    8234:	81 21 00 18 	lwz     r9,24(r1)
    8238:	81 61 00 10 	lwz     r11,16(r1)
    823c:	7d 7f 5b 78 	mr      r31,r11
    8240:	90 09 00 00 	stw     r0,0(r9)
    8244:	93 e1 00 10 	stw     r31,16(r1)
    8248:	60 00 00 00 	nop
    824c:	80 01 00 10 	lwz     r0,16(r1)
    8250:	90 01 00 08 	stw     r0,8(r1)
		break;
    8254:	48 00 00 14 	b       8268 <sctp_ioctl+0x1b8>
	}
	default:
		rc = -ENOIOCTLCMD;
    8258:	38 00 fd fd 	li      r0,-515
    825c:	90 01 00 08 	stw     r0,8(r1)
		break;
    8260:	48 00 00 08 	b       8268 <sctp_ioctl+0x1b8>
	/*
	 * SEQPACKET-style sockets in LISTENING state are valid, for
	 * SCTP, so only discard TCP-style sockets in LISTENING state.
	 */
	if (sctp_style(sk, TCP) && sctp_sstate(sk, LISTENING))
		goto out;
    8264:	60 00 00 00 	nop
	default:
		rc = -ENOIOCTLCMD;
		break;
	}
out:
	sctp_release_sock(sk);
    8268:	80 61 00 48 	lwz     r3,72(r1)
    826c:	48 00 00 01 	bl      826c <sctp_ioctl+0x1bc>
	return rc;
    8270:	80 01 00 08 	lwz     r0,8(r1)
}
    8274:	7c 03 03 78 	mr      r3,r0
    8278:	80 01 00 64 	lwz     r0,100(r1)
    827c:	7c 08 03 a6 	mtlr    r0
    8280:	83 e1 00 5c 	lwz     r31,92(r1)
    8284:	38 21 00 60 	addi    r1,r1,96
    8288:	4e 80 00 20 	blr

0000828c <sctp_init_sock>:
/* This is the function which gets called during socket creation to
 * initialized the SCTP-specific portion of the sock.
 * The sock structure should already be zero-filled memory.
 */
SCTP_STATIC int sctp_init_sock(struct sock *sk)
{
    828c:	94 21 ff b0 	stwu    r1,-80(r1)
    8290:	7c 08 02 a6 	mflr    r0
    8294:	90 01 00 54 	stw     r0,84(r1)
    8298:	90 61 00 48 	stw     r3,72(r1)
    829c:	80 01 00 48 	lwz     r0,72(r1)
    82a0:	90 01 00 10 	stw     r0,16(r1)
    82a4:	80 01 00 10 	lwz     r0,16(r1)
	struct sctp_endpoint *ep;
	struct sctp_sock *sp;

	SCTP_DEBUG_PRINTK("sctp_init_sock(sk: %p)\n", sk);

	sp = sctp_sk(sk);
    82a8:	90 01 00 08 	stw     r0,8(r1)

	/* Initialize the SCTP per socket area.  */
	switch (sk->sk_type) {
    82ac:	80 01 00 48 	lwz     r0,72(r1)
    82b0:	7c 09 03 78 	mr      r9,r0
    82b4:	a0 09 00 96 	lhz     r0,150(r9)
    82b8:	54 00 04 3e 	clrlwi  r0,r0,16
    82bc:	2f 80 00 01 	cmpwi   cr7,r0,1
    82c0:	41 9e 00 20 	beq-    cr7,82e0 <sctp_init_sock+0x54>
    82c4:	2f 80 00 05 	cmpwi   cr7,r0,5
    82c8:	40 9e 00 2c 	bne-    cr7,82f4 <sctp_init_sock+0x68>
	case SOCK_SEQPACKET:
		sp->type = SCTP_SOCKET_UDP;
    82cc:	80 01 00 08 	lwz     r0,8(r1)
    82d0:	39 20 00 00 	li      r9,0
    82d4:	7c 0b 03 78 	mr      r11,r0
    82d8:	91 2b 01 c8 	stw     r9,456(r11)
		break;
    82dc:	48 00 00 20 	b       82fc <sctp_init_sock+0x70>
	case SOCK_STREAM:
		sp->type = SCTP_SOCKET_TCP;
    82e0:	80 01 00 08 	lwz     r0,8(r1)
    82e4:	39 20 00 02 	li      r9,2
    82e8:	7c 0b 03 78 	mr      r11,r0
    82ec:	91 2b 01 c8 	stw     r9,456(r11)
		break;
    82f0:	48 00 00 0c 	b       82fc <sctp_init_sock+0x70>
	default:
		return -ESOCKTNOSUPPORT;
    82f4:	38 00 ff a2 	li      r0,-94
    82f8:	48 00 04 5c 	b       8754 <sctp_init_sock+0x4c8>
	}

	/* Initialize default send parameters. These parameters can be
	 * modified with the SCTP_DEFAULT_SEND_PARAM socket option.
	 */
	sp->default_stream = 0;
    82fc:	80 01 00 08 	lwz     r0,8(r1)
    8300:	39 20 00 00 	li      r9,0
    8304:	7c 0b 03 78 	mr      r11,r0
    8308:	b1 2b 01 dc 	sth     r9,476(r11)
	sp->default_ppid = 0;
    830c:	80 01 00 08 	lwz     r0,8(r1)
    8310:	39 20 00 00 	li      r9,0
    8314:	7c 0b 03 78 	mr      r11,r0
    8318:	91 2b 01 e0 	stw     r9,480(r11)
	sp->default_flags = 0;
    831c:	80 01 00 08 	lwz     r0,8(r1)
    8320:	39 20 00 00 	li      r9,0
    8324:	7c 0b 03 78 	mr      r11,r0
    8328:	b1 2b 01 e4 	sth     r9,484(r11)
	sp->default_context = 0;
    832c:	80 01 00 08 	lwz     r0,8(r1)
    8330:	39 20 00 00 	li      r9,0
    8334:	7c 0b 03 78 	mr      r11,r0
    8338:	91 2b 01 e8 	stw     r9,488(r11)
	sp->default_timetolive = 0;
    833c:	80 01 00 08 	lwz     r0,8(r1)
    8340:	39 20 00 00 	li      r9,0
    8344:	7c 0b 03 78 	mr      r11,r0
    8348:	91 2b 01 ec 	stw     r9,492(r11)

	sp->default_rcv_context = 0;
    834c:	80 01 00 08 	lwz     r0,8(r1)
    8350:	39 20 00 00 	li      r9,0
    8354:	7c 0b 03 78 	mr      r11,r0
    8358:	91 2b 01 f0 	stw     r9,496(r11)
	sp->max_burst = sctp_max_burst;
    835c:	3c 00 00 00 	lis     r0,0
    8360:	30 00 00 00 	addic   r0,r0,0
    8364:	7c 0b 03 78 	mr      r11,r0
    8368:	81 2b 00 14 	lwz     r9,20(r11)
    836c:	80 01 00 08 	lwz     r0,8(r1)
    8370:	7c 0b 03 78 	mr      r11,r0
    8374:	91 2b 01 f4 	stw     r9,500(r11)

	/* Initialize default setup parameters. These parameters
	 * can be modified with the SCTP_INITMSG socket option or
	 * overridden by the SCTP_INIT CMSG.
	 */
	sp->initmsg.sinit_num_ostreams   = sctp_max_outstreams;
    8378:	3c 00 00 00 	lis     r0,0
    837c:	30 00 00 00 	addic   r0,r0,0
    8380:	7c 09 03 78 	mr      r9,r0
    8384:	a0 09 00 3e 	lhz     r0,62(r9)
    8388:	54 09 04 3e 	clrlwi  r9,r0,16
    838c:	80 01 00 08 	lwz     r0,8(r1)
    8390:	7c 0b 03 78 	mr      r11,r0
    8394:	b1 2b 02 10 	sth     r9,528(r11)
	sp->initmsg.sinit_max_instreams  = sctp_max_instreams;
    8398:	3c 00 00 00 	lis     r0,0
    839c:	30 00 00 00 	addic   r0,r0,0
    83a0:	7c 09 03 78 	mr      r9,r0
    83a4:	a0 09 00 3c 	lhz     r0,60(r9)
    83a8:	54 09 04 3e 	clrlwi  r9,r0,16
    83ac:	80 01 00 08 	lwz     r0,8(r1)
    83b0:	7c 0b 03 78 	mr      r11,r0
    83b4:	b1 2b 02 12 	sth     r9,530(r11)
	sp->initmsg.sinit_max_attempts   = sctp_max_retrans_init;
    83b8:	3c 00 00 00 	lis     r0,0
    83bc:	30 00 00 00 	addic   r0,r0,0
    83c0:	7c 09 03 78 	mr      r9,r0
    83c4:	80 09 00 30 	lwz     r0,48(r9)
    83c8:	54 09 04 3e 	clrlwi  r9,r0,16
    83cc:	80 01 00 08 	lwz     r0,8(r1)
    83d0:	7c 0b 03 78 	mr      r11,r0
    83d4:	b1 2b 02 14 	sth     r9,532(r11)
	sp->initmsg.sinit_max_init_timeo = sctp_rto_max;
    83d8:	3c 00 00 00 	lis     r0,0
    83dc:	30 00 00 00 	addic   r0,r0,0
    83e0:	7c 09 03 78 	mr      r9,r0
    83e4:	80 09 00 08 	lwz     r0,8(r9)
    83e8:	54 09 04 3e 	clrlwi  r9,r0,16
    83ec:	80 01 00 08 	lwz     r0,8(r1)
    83f0:	7c 0b 03 78 	mr      r11,r0
    83f4:	b1 2b 02 16 	sth     r9,534(r11)

	/* Initialize default RTO related parameters.  These parameters can
	 * be modified for with the SCTP_RTOINFO socket option.
	 */
	sp->rtoinfo.srto_initial = sctp_rto_initial;
    83f8:	3c 00 00 00 	lis     r0,0
    83fc:	30 00 00 00 	addic   r0,r0,0
    8400:	7c 0b 03 78 	mr      r11,r0
    8404:	81 2b 00 00 	lwz     r9,0(r11)
    8408:	80 01 00 08 	lwz     r0,8(r1)
    840c:	7c 0b 03 78 	mr      r11,r0
    8410:	91 2b 02 1c 	stw     r9,540(r11)
	sp->rtoinfo.srto_max     = sctp_rto_max;
    8414:	3c 00 00 00 	lis     r0,0
    8418:	30 00 00 00 	addic   r0,r0,0
    841c:	7c 0b 03 78 	mr      r11,r0
    8420:	81 2b 00 08 	lwz     r9,8(r11)
    8424:	80 01 00 08 	lwz     r0,8(r1)
    8428:	7c 0b 03 78 	mr      r11,r0
    842c:	91 2b 02 20 	stw     r9,544(r11)
	sp->rtoinfo.srto_min     = sctp_rto_min;
    8430:	3c 00 00 00 	lis     r0,0
    8434:	30 00 00 00 	addic   r0,r0,0
    8438:	7c 0b 03 78 	mr      r11,r0
    843c:	81 2b 00 04 	lwz     r9,4(r11)
    8440:	80 01 00 08 	lwz     r0,8(r1)
    8444:	7c 0b 03 78 	mr      r11,r0
    8448:	91 2b 02 24 	stw     r9,548(r11)

	/* Initialize default association related parameters. These parameters
	 * can be modified with the SCTP_ASSOCINFO socket option.
	 */
	sp->assocparams.sasoc_asocmaxrxt = sctp_max_retrans_association;
    844c:	3c 00 00 00 	lis     r0,0
    8450:	30 00 00 00 	addic   r0,r0,0
    8454:	7c 09 03 78 	mr      r9,r0
    8458:	80 09 00 28 	lwz     r0,40(r9)
    845c:	54 09 04 3e 	clrlwi  r9,r0,16
    8460:	80 01 00 08 	lwz     r0,8(r1)
    8464:	7c 0b 03 78 	mr      r11,r0
    8468:	b1 2b 02 d0 	sth     r9,720(r11)
	sp->assocparams.sasoc_number_peer_destinations = 0;
    846c:	80 01 00 08 	lwz     r0,8(r1)
    8470:	39 20 00 00 	li      r9,0
    8474:	7c 0b 03 78 	mr      r11,r0
    8478:	b1 2b 02 d2 	sth     r9,722(r11)
	sp->assocparams.sasoc_peer_rwnd = 0;
    847c:	80 01 00 08 	lwz     r0,8(r1)
    8480:	39 20 00 00 	li      r9,0
    8484:	7c 0b 03 78 	mr      r11,r0
    8488:	91 2b 02 d4 	stw     r9,724(r11)
	sp->assocparams.sasoc_local_rwnd = 0;
    848c:	80 01 00 08 	lwz     r0,8(r1)
    8490:	39 20 00 00 	li      r9,0
    8494:	7c 0b 03 78 	mr      r11,r0
    8498:	91 2b 02 d8 	stw     r9,728(r11)
	sp->assocparams.sasoc_cookie_life = sctp_valid_cookie_life;
    849c:	3c 00 00 00 	lis     r0,0
    84a0:	30 00 00 00 	addic   r0,r0,0
    84a4:	7c 0b 03 78 	mr      r11,r0
    84a8:	81 2b 00 1c 	lwz     r9,28(r11)
    84ac:	80 01 00 08 	lwz     r0,8(r1)
    84b0:	7c 0b 03 78 	mr      r11,r0
    84b4:	91 2b 02 dc 	stw     r9,732(r11)

	/* Initialize default event subscriptions. By default, all the
	 * options are off.
	 */
	memset(&sp->subscribe, 0, sizeof(struct sctp_event_subscribe));
    84b8:	80 01 00 08 	lwz     r0,8(r1)
    84bc:	30 00 02 c0 	addic   r0,r0,704
    84c0:	39 20 00 00 	li      r9,0
    84c4:	7c 0b 03 78 	mr      r11,r0
    84c8:	91 2b 00 00 	stw     r9,0(r11)
    84cc:	39 20 00 00 	li      r9,0
    84d0:	7c 0b 03 78 	mr      r11,r0
    84d4:	91 2b 00 04 	stw     r9,4(r11)
    84d8:	39 20 00 00 	li      r9,0
    84dc:	7c 0b 03 78 	mr      r11,r0
    84e0:	99 2b 00 08 	stb     r9,8(r11)

	/* Default Peer Address Parameters.  These defaults can
	 * be modified via SCTP_PEER_ADDR_PARAMS
	 */
	sp->hbinterval  = sctp_hb_interval;
    84e4:	3c 00 00 00 	lis     r0,0
    84e8:	30 00 00 00 	addic   r0,r0,0
    84ec:	7c 0b 03 78 	mr      r11,r0
    84f0:	81 2b 00 24 	lwz     r9,36(r11)
    84f4:	80 01 00 08 	lwz     r0,8(r1)
    84f8:	7c 0b 03 78 	mr      r11,r0
    84fc:	91 2b 01 f8 	stw     r9,504(r11)
	sp->pathmaxrxt  = sctp_max_retrans_path;
    8500:	3c 00 00 00 	lis     r0,0
    8504:	30 00 00 00 	addic   r0,r0,0
    8508:	7c 09 03 78 	mr      r9,r0
    850c:	80 09 00 2c 	lwz     r0,44(r9)
    8510:	54 09 04 3e 	clrlwi  r9,r0,16
    8514:	80 01 00 08 	lwz     r0,8(r1)
    8518:	7c 0b 03 78 	mr      r11,r0
    851c:	b1 2b 01 fc 	sth     r9,508(r11)
	sp->pathmtu     = 0; // allow default discovery
    8520:	80 01 00 08 	lwz     r0,8(r1)
    8524:	39 20 00 00 	li      r9,0
    8528:	7c 0b 03 78 	mr      r11,r0
    852c:	91 2b 02 00 	stw     r9,512(r11)
	sp->sackdelay   = sctp_sack_timeout;
    8530:	3c 00 00 00 	lis     r0,0
    8534:	30 00 00 00 	addic   r0,r0,0
    8538:	7c 0b 03 78 	mr      r11,r0
    853c:	81 2b 00 20 	lwz     r9,32(r11)
    8540:	80 01 00 08 	lwz     r0,8(r1)
    8544:	7c 0b 03 78 	mr      r11,r0
    8548:	91 2b 02 04 	stw     r9,516(r11)
	sp->sackfreq	= 2;
    854c:	80 01 00 08 	lwz     r0,8(r1)
    8550:	39 20 00 02 	li      r9,2
    8554:	7c 0b 03 78 	mr      r11,r0
    8558:	91 2b 02 08 	stw     r9,520(r11)
	sp->param_flags = SPP_HB_ENABLE |
    855c:	80 01 00 08 	lwz     r0,8(r1)
    8560:	39 20 00 29 	li      r9,41
    8564:	7c 0b 03 78 	mr      r11,r0
    8568:	91 2b 02 0c 	stw     r9,524(r11)
			  SPP_SACKDELAY_ENABLE;

	/* If enabled no SCTP message fragmentation will be performed.
	 * Configure through SCTP_DISABLE_FRAGMENTS socket option.
	 */
	sp->disable_fragments = 0;
    856c:	80 01 00 08 	lwz     r0,8(r1)
    8570:	39 20 00 00 	li      r9,0
    8574:	7c 0b 03 78 	mr      r11,r0
    8578:	99 2b 02 e9 	stb     r9,745(r11)

	/* Enable Nagle algorithm by default.  */
	sp->nodelay           = 0;
    857c:	80 01 00 08 	lwz     r0,8(r1)
    8580:	39 20 00 00 	li      r9,0
    8584:	7c 0b 03 78 	mr      r11,r0
    8588:	99 2b 02 e8 	stb     r9,744(r11)

	/* Enable by default. */
	sp->v4mapped          = 1;
    858c:	80 01 00 08 	lwz     r0,8(r1)
    8590:	39 20 00 01 	li      r9,1
    8594:	7c 0b 03 78 	mr      r11,r0
    8598:	99 2b 02 ea 	stb     r9,746(r11)
	/* Auto-close idle associations after the configured
	 * number of seconds.  A value of 0 disables this
	 * feature.  Configure through the SCTP_AUTOCLOSE socket option,
	 * for UDP-style sockets only.
	 */
	sp->autoclose         = 0;
    859c:	80 01 00 08 	lwz     r0,8(r1)
    85a0:	39 20 00 00 	li      r9,0
    85a4:	7c 0b 03 78 	mr      r11,r0
    85a8:	91 2b 02 e4 	stw     r9,740(r11)

	/* User specified fragmentation limit. */
	sp->user_frag         = 0;
    85ac:	80 01 00 08 	lwz     r0,8(r1)
    85b0:	39 20 00 00 	li      r9,0
    85b4:	7c 0b 03 78 	mr      r11,r0
    85b8:	91 2b 02 e0 	stw     r9,736(r11)

	sp->adaptation_ind = 0;
    85bc:	80 01 00 08 	lwz     r0,8(r1)
    85c0:	39 20 00 00 	li      r9,0
    85c4:	7c 0b 03 78 	mr      r11,r0
    85c8:	91 2b 02 ec 	stw     r9,748(r11)

	sp->pf = sctp_get_pf_specific(sk->sk_family);
    85cc:	80 01 00 48 	lwz     r0,72(r1)
    85d0:	7c 09 03 78 	mr      r9,r0
    85d4:	a0 09 00 0c 	lhz     r0,12(r9)
    85d8:	54 00 04 3e 	clrlwi  r0,r0,16
    85dc:	7c 03 03 78 	mr      r3,r0
    85e0:	48 00 00 01 	bl      85e0 <sctp_init_sock+0x354>
    85e4:	7c 69 1b 78 	mr      r9,r3
    85e8:	80 01 00 08 	lwz     r0,8(r1)
    85ec:	7c 0b 03 78 	mr      r11,r0
    85f0:	91 2b 01 cc 	stw     r9,460(r11)

	/* Control variables for partial data delivery. */
	atomic_set(&sp->pd_mode, 0);
    85f4:	80 01 00 08 	lwz     r0,8(r1)
    85f8:	30 00 02 f4 	addic   r0,r0,756
    85fc:	90 01 00 14 	stw     r0,20(r1)
    8600:	38 00 00 00 	li      r0,0
    8604:	90 01 00 18 	stw     r0,24(r1)
	return t;
}

static __inline__ void atomic_set(atomic_t *v, int i)
{
	__asm__ __volatile__("stw%U0%X0 %1,%0" : "=m"(v->counter) : "r"(i));
    8608:	80 01 00 14 	lwz     r0,20(r1)
    860c:	81 21 00 18 	lwz     r9,24(r1)
    8610:	7c 0b 03 78 	mr      r11,r0
    8614:	91 2b 00 00 	stw     r9,0(r11)
	skb_queue_head_init(&sp->pd_lobby);
    8618:	80 01 00 08 	lwz     r0,8(r1)
    861c:	30 00 02 f8 	addic   r0,r0,760
    8620:	90 01 00 1c 	stw     r0,28(r1)
 * network layer or drivers should need annotation to consolidate the
 * main types of usage into 3 classes.
 */
static inline void skb_queue_head_init(struct sk_buff_head *list)
{
	spin_lock_init(&list->lock);
    8624:	80 01 00 1c 	lwz     r0,28(r1)
    8628:	30 00 00 0c 	addic   r0,r0,12
    862c:	90 01 00 20 	stw     r0,32(r1)
 * Map the spin_lock functions to the raw variants for PREEMPT_RT=n
 */

static inline raw_spinlock_t *spinlock_check(spinlock_t *lock)
{
	return &lock->rlock;
    8630:	80 01 00 1c 	lwz     r0,28(r1)
    8634:	90 01 00 24 	stw     r0,36(r1)
 *	the spinlock.  It can also be used for on-stack sk_buff_head
 *	objects where the spinlock is known to not be used.
 */
static inline void __skb_queue_head_init(struct sk_buff_head *list)
{
	list->prev = list->next = (struct sk_buff *)list;
    8638:	80 01 00 24 	lwz     r0,36(r1)
    863c:	81 21 00 24 	lwz     r9,36(r1)
    8640:	7c 0b 03 78 	mr      r11,r0
    8644:	91 2b 00 00 	stw     r9,0(r11)
    8648:	80 01 00 24 	lwz     r0,36(r1)
    864c:	7c 0b 03 78 	mr      r11,r0
    8650:	81 2b 00 00 	lwz     r9,0(r11)
    8654:	80 01 00 24 	lwz     r0,36(r1)
    8658:	7c 0b 03 78 	mr      r11,r0
    865c:	91 2b 00 04 	stw     r9,4(r11)
	list->qlen = 0;
    8660:	80 01 00 24 	lwz     r0,36(r1)
    8664:	39 20 00 00 	li      r9,0
    8668:	7c 0b 03 78 	mr      r11,r0
    866c:	91 2b 00 08 	stw     r9,8(r11)
	sp->frag_interleave = 0;
    8670:	80 01 00 08 	lwz     r0,8(r1)
    8674:	39 20 00 00 	li      r9,0
    8678:	7c 0b 03 78 	mr      r11,r0
    867c:	99 2b 02 eb 	stb     r9,747(r11)

	/* Create a per socket endpoint structure.  Even if we
	 * change the data structure relationships, this may still
	 * be useful for storing pre-connect address information.
	 */
	ep = sctp_endpoint_new(sk, GFP_KERNEL);
    8680:	80 61 00 48 	lwz     r3,72(r1)
    8684:	38 80 00 d0 	li      r4,208
    8688:	48 00 00 01 	bl      8688 <sctp_init_sock+0x3fc>
    868c:	90 61 00 0c 	stw     r3,12(r1)
	if (!ep)
    8690:	80 01 00 0c 	lwz     r0,12(r1)
    8694:	2f 80 00 00 	cmpwi   cr7,r0,0
    8698:	40 9e 00 0c 	bne-    cr7,86a4 <sctp_init_sock+0x418>
		return -ENOMEM;
    869c:	38 00 ff f4 	li      r0,-12
    86a0:	48 00 00 b4 	b       8754 <sctp_init_sock+0x4c8>

	sp->ep = ep;
    86a4:	80 01 00 08 	lwz     r0,8(r1)
    86a8:	81 21 00 0c 	lwz     r9,12(r1)
    86ac:	7c 0b 03 78 	mr      r11,r0
    86b0:	91 2b 01 d4 	stw     r9,468(r11)
	sp->hmac = NULL;
    86b4:	80 01 00 08 	lwz     r0,8(r1)
    86b8:	39 20 00 00 	li      r9,0
    86bc:	7c 0b 03 78 	mr      r11,r0
    86c0:	91 2b 01 d0 	stw     r9,464(r11)

	SCTP_DBG_OBJCNT_INC(sock);

	local_bh_disable();
    86c4:	48 00 00 01 	bl      86c4 <sctp_init_sock+0x438>
    86c8:	3c 00 00 00 	lis     r0,0
    86cc:	30 00 00 00 	addic   r0,r0,0
    86d0:	90 01 00 28 	stw     r0,40(r1)
    86d4:	80 01 00 28 	lwz     r0,40(r1)
    86d8:	90 01 00 2c 	stw     r0,44(r1)
    86dc:	39 20 00 00 	li      r9,0
    86e0:	39 40 00 01 	li      r10,1
    86e4:	91 21 00 30 	stw     r9,48(r1)
    86e8:	91 41 00 34 	stw     r10,52(r1)

static inline void
percpu_counter_add(struct percpu_counter *fbc, s64 amount)
{
	preempt_disable();
	fbc->count += amount;
    86ec:	80 01 00 2c 	lwz     r0,44(r1)
    86f0:	7c 09 03 78 	mr      r9,r0
    86f4:	81 69 00 00 	lwz     r11,0(r9)
    86f8:	81 89 00 04 	lwz     r12,4(r9)
    86fc:	81 21 00 30 	lwz     r9,48(r1)
    8700:	81 41 00 34 	lwz     r10,52(r1)
    8704:	7d 4a 60 14 	addc    r10,r10,r12
    8708:	7d 29 59 14 	adde    r9,r9,r11
    870c:	80 01 00 2c 	lwz     r0,44(r1)
    8710:	7c 0b 03 78 	mr      r11,r0
    8714:	91 2b 00 00 	stw     r9,0(r11)
    8718:	91 4b 00 04 	stw     r10,4(r11)
    871c:	80 01 00 48 	lwz     r0,72(r1)
    8720:	90 01 00 38 	stw     r0,56(r1)
#endif

static inline
struct net *sock_net(const struct sock *sk)
{
	return read_pnet(&sk->sk_net);
    8724:	3c 00 00 00 	lis     r0,0
    8728:	30 00 00 00 	addic   r0,r0,0
	percpu_counter_inc(&sctp_sockets_allocated);
	sock_prot_inuse_add(sock_net(sk), sk->sk_prot, 1);
    872c:	7c 09 03 78 	mr      r9,r0
    8730:	80 01 00 48 	lwz     r0,72(r1)
    8734:	7c 0b 03 78 	mr      r11,r0
    8738:	80 0b 00 1c 	lwz     r0,28(r11)
    873c:	7d 23 4b 78 	mr      r3,r9
    8740:	7c 04 03 78 	mr      r4,r0
    8744:	38 a0 00 01 	li      r5,1
    8748:	48 00 00 01 	bl      8748 <sctp_init_sock+0x4bc>
	local_bh_enable();
    874c:	48 00 00 01 	bl      874c <sctp_init_sock+0x4c0>

	return 0;
    8750:	38 00 00 00 	li      r0,0
}
    8754:	7c 03 03 78 	mr      r3,r0
    8758:	80 01 00 54 	lwz     r0,84(r1)
    875c:	7c 08 03 a6 	mtlr    r0
    8760:	38 21 00 50 	addi    r1,r1,80
    8764:	4e 80 00 20 	blr

00008768 <sctp_destroy_sock>:

/* Cleanup any SCTP per socket resources.  */
SCTP_STATIC void sctp_destroy_sock(struct sock *sk)
{
    8768:	94 21 ff d0 	stwu    r1,-48(r1)
    876c:	7c 08 02 a6 	mflr    r0
    8770:	90 01 00 34 	stw     r0,52(r1)
    8774:	90 61 00 28 	stw     r3,40(r1)
    8778:	80 01 00 28 	lwz     r0,40(r1)
    877c:	90 01 00 0c 	stw     r0,12(r1)
    8780:	80 01 00 0c 	lwz     r0,12(r1)
	struct sctp_endpoint *ep;

	SCTP_DEBUG_PRINTK("sctp_destroy_sock(sk: %p)\n", sk);

	/* Release our hold on the endpoint. */
	ep = sctp_sk(sk)->ep;
    8784:	7c 09 03 78 	mr      r9,r0
    8788:	80 09 01 d4 	lwz     r0,468(r9)
    878c:	90 01 00 08 	stw     r0,8(r1)
	sctp_endpoint_free(ep);
    8790:	80 61 00 08 	lwz     r3,8(r1)
    8794:	48 00 00 01 	bl      8794 <sctp_destroy_sock+0x2c>
	local_bh_disable();
    8798:	48 00 00 01 	bl      8798 <sctp_destroy_sock+0x30>
    879c:	3c 00 00 00 	lis     r0,0
    87a0:	30 00 00 00 	addic   r0,r0,0
    87a4:	90 01 00 10 	stw     r0,16(r1)
    87a8:	80 01 00 10 	lwz     r0,16(r1)
    87ac:	90 01 00 14 	stw     r0,20(r1)
    87b0:	39 20 ff ff 	li      r9,-1
    87b4:	39 40 ff ff 	li      r10,-1
    87b8:	91 21 00 18 	stw     r9,24(r1)
    87bc:	91 41 00 1c 	stw     r10,28(r1)
    87c0:	80 01 00 14 	lwz     r0,20(r1)
    87c4:	7c 09 03 78 	mr      r9,r0
    87c8:	81 69 00 00 	lwz     r11,0(r9)
    87cc:	81 89 00 04 	lwz     r12,4(r9)
    87d0:	81 21 00 18 	lwz     r9,24(r1)
    87d4:	81 41 00 1c 	lwz     r10,28(r1)
    87d8:	7d 4a 60 14 	addc    r10,r10,r12
    87dc:	7d 29 59 14 	adde    r9,r9,r11
    87e0:	80 01 00 14 	lwz     r0,20(r1)
    87e4:	7c 0b 03 78 	mr      r11,r0
    87e8:	91 2b 00 00 	stw     r9,0(r11)
    87ec:	91 4b 00 04 	stw     r10,4(r11)
    87f0:	80 01 00 28 	lwz     r0,40(r1)
    87f4:	90 01 00 20 	stw     r0,32(r1)
    87f8:	3c 00 00 00 	lis     r0,0
    87fc:	30 00 00 00 	addic   r0,r0,0
	percpu_counter_dec(&sctp_sockets_allocated);
	sock_prot_inuse_add(sock_net(sk), sk->sk_prot, -1);
    8800:	7c 09 03 78 	mr      r9,r0
    8804:	80 01 00 28 	lwz     r0,40(r1)
    8808:	7c 0b 03 78 	mr      r11,r0
    880c:	80 0b 00 1c 	lwz     r0,28(r11)
    8810:	7d 23 4b 78 	mr      r3,r9
    8814:	7c 04 03 78 	mr      r4,r0
    8818:	38 a0 ff ff 	li      r5,-1
    881c:	48 00 00 01 	bl      881c <sctp_destroy_sock+0xb4>
	local_bh_enable();
    8820:	48 00 00 01 	bl      8820 <sctp_destroy_sock+0xb8>
}
    8824:	80 01 00 34 	lwz     r0,52(r1)
    8828:	7c 08 03 a6 	mtlr    r0
    882c:	38 21 00 30 	addi    r1,r1,48
    8830:	4e 80 00 20 	blr

00008834 <sctp_shutdown>:
 *               SHUT_RDWR
 *                     Disables further send  and  receive  operations
 *                     and initiates the SCTP shutdown sequence.
 */
SCTP_STATIC void sctp_shutdown(struct sock *sk, int how)
{
    8834:	94 21 ff d0 	stwu    r1,-48(r1)
    8838:	7c 08 02 a6 	mflr    r0
    883c:	90 01 00 34 	stw     r0,52(r1)
    8840:	90 61 00 28 	stw     r3,40(r1)
    8844:	90 81 00 2c 	stw     r4,44(r1)
    8848:	80 01 00 28 	lwz     r0,40(r1)
    884c:	90 01 00 14 	stw     r0,20(r1)
    8850:	38 00 00 02 	li      r0,2
    8854:	90 01 00 18 	stw     r0,24(r1)
    8858:	80 01 00 14 	lwz     r0,20(r1)
    885c:	90 01 00 1c 	stw     r0,28(r1)
    8860:	80 01 00 1c 	lwz     r0,28(r1)

/* Is a socket of this style? */
#define sctp_style(sk, style) __sctp_style((sk), (SCTP_SOCKET_##style))
static inline int __sctp_style(const struct sock *sk, sctp_socket_type_t style)
{
	return sctp_sk(sk)->type == style;
    8864:	7c 09 03 78 	mr      r9,r0
    8868:	80 09 01 c8 	lwz     r0,456(r9)
    886c:	81 21 00 18 	lwz     r9,24(r1)
    8870:	7f 89 00 00 	cmpw    cr7,r9,r0
    8874:	7c 00 00 26 	mfcr    r0
    8878:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
	struct sctp_endpoint *ep;
	struct sctp_association *asoc;

	if (!sctp_style(sk, TCP))
    887c:	2f 80 00 00 	cmpwi   cr7,r0,0
    8880:	41 9e 00 88 	beq-    cr7,8908 <sctp_shutdown+0xd4>
		return;

	if (how & SEND_SHUTDOWN) {
    8884:	80 01 00 2c 	lwz     r0,44(r1)
    8888:	54 00 07 bc 	rlwinm  r0,r0,0,30,30
    888c:	2f 80 00 00 	cmpwi   cr7,r0,0
    8890:	41 9e 00 7c 	beq-    cr7,890c <sctp_shutdown+0xd8>
    8894:	80 01 00 28 	lwz     r0,40(r1)
    8898:	90 01 00 20 	stw     r0,32(r1)
    889c:	80 01 00 20 	lwz     r0,32(r1)
		ep = sctp_sk(sk)->ep;
    88a0:	7c 09 03 78 	mr      r9,r0
    88a4:	80 09 01 d4 	lwz     r0,468(r9)
    88a8:	90 01 00 08 	stw     r0,8(r1)
		if (!list_empty(&ep->asocs)) {
    88ac:	80 01 00 08 	lwz     r0,8(r1)
    88b0:	30 00 00 4c 	addic   r0,r0,76
    88b4:	90 01 00 24 	stw     r0,36(r1)
    88b8:	80 01 00 24 	lwz     r0,36(r1)
    88bc:	7c 09 03 78 	mr      r9,r0
    88c0:	80 09 00 00 	lwz     r0,0(r9)
    88c4:	81 21 00 24 	lwz     r9,36(r1)
    88c8:	7f 89 00 00 	cmpw    cr7,r9,r0
    88cc:	7c 00 00 26 	mfcr    r0
    88d0:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
    88d4:	2f 80 00 00 	cmpwi   cr7,r0,0
    88d8:	40 9e 00 34 	bne-    cr7,890c <sctp_shutdown+0xd8>
			asoc = list_entry(ep->asocs.next,
    88dc:	80 01 00 08 	lwz     r0,8(r1)
    88e0:	7c 09 03 78 	mr      r9,r0
    88e4:	80 09 00 4c 	lwz     r0,76(r9)
    88e8:	90 01 00 0c 	stw     r0,12(r1)
    88ec:	80 01 00 0c 	lwz     r0,12(r1)
    88f0:	30 00 ff b4 	addic   r0,r0,-76
    88f4:	90 01 00 10 	stw     r0,16(r1)
					  struct sctp_association, asocs);
			sctp_primitive_SHUTDOWN(asoc, NULL);
    88f8:	80 61 00 10 	lwz     r3,16(r1)
    88fc:	38 80 00 00 	li      r4,0
    8900:	48 00 00 01 	bl      8900 <sctp_shutdown+0xcc>
    8904:	48 00 00 08 	b       890c <sctp_shutdown+0xd8>
{
	struct sctp_endpoint *ep;
	struct sctp_association *asoc;

	if (!sctp_style(sk, TCP))
		return;
    8908:	60 00 00 00 	nop
			asoc = list_entry(ep->asocs.next,
					  struct sctp_association, asocs);
			sctp_primitive_SHUTDOWN(asoc, NULL);
		}
	}
}
    890c:	80 01 00 34 	lwz     r0,52(r1)
    8910:	7c 08 03 a6 	mtlr    r0
    8914:	38 21 00 30 	addi    r1,r1,48
    8918:	4e 80 00 20 	blr

0000891c <sctp_getsockopt_sctp_status>:
 * receipt.  This information is read-only.
 */
static int sctp_getsockopt_sctp_status(struct sock *sk, int len,
				       char __user *optval,
				       int __user *optlen)
{
    891c:	94 21 fe e0 	stwu    r1,-288(r1)
    8920:	7c 08 02 a6 	mflr    r0
    8924:	90 01 01 24 	stw     r0,292(r1)
    8928:	93 e1 01 1c 	stw     r31,284(r1)
    892c:	90 61 01 08 	stw     r3,264(r1)
    8930:	90 81 01 0c 	stw     r4,268(r1)
    8934:	90 a1 01 10 	stw     r5,272(r1)
    8938:	90 c1 01 14 	stw     r6,276(r1)
	struct sctp_status status;
	struct sctp_association *asoc = NULL;
    893c:	38 00 00 00 	li      r0,0
    8940:	90 01 00 10 	stw     r0,16(r1)
	struct sctp_transport *transport;
	sctp_assoc_t associd;
	int retval = 0;
    8944:	38 00 00 00 	li      r0,0
    8948:	90 01 00 08 	stw     r0,8(r1)

	if (len < sizeof(status)) {
    894c:	80 01 01 0c 	lwz     r0,268(r1)
    8950:	2b 80 00 af 	cmplwi  cr7,r0,175
    8954:	41 9d 00 10 	bgt-    cr7,8964 <sctp_getsockopt_sctp_status+0x48>
		retval = -EINVAL;
    8958:	38 00 ff ea 	li      r0,-22
    895c:	90 01 00 08 	stw     r0,8(r1)
		goto out;
    8960:	48 00 04 b4 	b       8e14 <sctp_getsockopt_sctp_status+0x4f8>
	}

	len = sizeof(status);
    8964:	38 00 00 b0 	li      r0,176
    8968:	90 01 01 0c 	stw     r0,268(r1)
	if (copy_from_user(&status, optval, len)) {
    896c:	80 01 01 0c 	lwz     r0,268(r1)
    8970:	39 21 00 4c 	addi    r9,r1,76
    8974:	91 21 00 20 	stw     r9,32(r1)
    8978:	81 21 01 10 	lwz     r9,272(r1)
    897c:	91 21 00 24 	stw     r9,36(r1)
    8980:	90 01 00 28 	stw     r0,40(r1)
static inline unsigned long copy_from_user(void *to,
		const void __user *from, unsigned long n)
{
	unsigned long over;

	if (access_ok(VERIFY_READ, from, n))
    8984:	81 21 00 24 	lwz     r9,36(r1)
    8988:	7c 40 13 78 	mr      r0,r2
    898c:	7c 0a 03 78 	mr      r10,r0
    8990:	80 0a 01 d4 	lwz     r0,468(r10)
    8994:	7f 89 00 40 	cmplw   cr7,r9,r0
    8998:	41 9d 00 3c 	bgt-    cr7,89d4 <sctp_getsockopt_sctp_status+0xb8>
    899c:	80 01 00 28 	lwz     r0,40(r1)
    89a0:	2f 80 00 00 	cmpwi   cr7,r0,0
    89a4:	41 9e 00 28 	beq-    cr7,89cc <sctp_getsockopt_sctp_status+0xb0>
    89a8:	80 01 00 28 	lwz     r0,40(r1)
    89ac:	31 20 ff ff 	addic   r9,r0,-1
    89b0:	7c 40 13 78 	mr      r0,r2
    89b4:	7c 0a 03 78 	mr      r10,r0
    89b8:	81 6a 01 d4 	lwz     r11,468(r10)
    89bc:	80 01 00 24 	lwz     r0,36(r1)
    89c0:	7c 00 58 50 	subf    r0,r0,r11
    89c4:	7f 89 00 40 	cmplw   cr7,r9,r0
    89c8:	41 9d 00 0c 	bgt-    cr7,89d4 <sctp_getsockopt_sctp_status+0xb8>
    89cc:	38 00 00 01 	li      r0,1
    89d0:	48 00 00 08 	b       89d8 <sctp_getsockopt_sctp_status+0xbc>
    89d4:	38 00 00 00 	li      r0,0
    89d8:	2f 80 00 00 	cmpwi   cr7,r0,0
    89dc:	41 9e 00 1c 	beq-    cr7,89f8 <sctp_getsockopt_sctp_status+0xdc>
		return __copy_tofrom_user((__force void __user *)to, from, n);
    89e0:	80 61 00 20 	lwz     r3,32(r1)
    89e4:	80 81 00 24 	lwz     r4,36(r1)
    89e8:	80 a1 00 28 	lwz     r5,40(r1)
    89ec:	48 00 00 01 	bl      89ec <sctp_getsockopt_sctp_status+0xd0>
    89f0:	7c 60 1b 78 	mr      r0,r3
    89f4:	48 00 00 60 	b       8a54 <sctp_getsockopt_sctp_status+0x138>
	if ((unsigned long)from < TASK_SIZE) {
    89f8:	81 21 00 24 	lwz     r9,36(r1)
    89fc:	3c 00 bf ff 	lis     r0,-16385
    8a00:	60 00 ff ff 	ori     r0,r0,65535
    8a04:	7f 89 00 40 	cmplw   cr7,r9,r0
    8a08:	41 9d 00 48 	bgt-    cr7,8a50 <sctp_getsockopt_sctp_status+0x134>
		over = (unsigned long)from + n - TASK_SIZE;
    8a0c:	81 21 00 24 	lwz     r9,36(r1)
    8a10:	80 01 00 28 	lwz     r0,40(r1)
    8a14:	7c 09 02 14 	add     r0,r9,r0
    8a18:	3d 60 40 00 	lis     r11,16384
    8a1c:	7c 00 5a 14 	add     r0,r0,r11
    8a20:	90 01 00 2c 	stw     r0,44(r1)
		return __copy_tofrom_user((__force void __user *)to, from,
    8a24:	81 21 00 28 	lwz     r9,40(r1)
    8a28:	80 01 00 2c 	lwz     r0,44(r1)
    8a2c:	7c 00 48 50 	subf    r0,r0,r9
    8a30:	80 61 00 20 	lwz     r3,32(r1)
    8a34:	80 81 00 24 	lwz     r4,36(r1)
    8a38:	7c 05 03 78 	mr      r5,r0
    8a3c:	48 00 00 01 	bl      8a3c <sctp_getsockopt_sctp_status+0x120>
    8a40:	7c 69 1b 78 	mr      r9,r3
    8a44:	80 01 00 2c 	lwz     r0,44(r1)
    8a48:	7c 09 02 14 	add     r0,r9,r0
    8a4c:	48 00 00 08 	b       8a54 <sctp_getsockopt_sctp_status+0x138>
				n - over) + over;
	}
	return n;
    8a50:	80 01 00 28 	lwz     r0,40(r1)
    8a54:	2f 80 00 00 	cmpwi   cr7,r0,0
    8a58:	41 9e 00 10 	beq-    cr7,8a68 <sctp_getsockopt_sctp_status+0x14c>
		retval = -EFAULT;
    8a5c:	38 00 ff f2 	li      r0,-14
    8a60:	90 01 00 08 	stw     r0,8(r1)
		goto out;
    8a64:	48 00 03 b0 	b       8e14 <sctp_getsockopt_sctp_status+0x4f8>
	}

	associd = status.sstat_assoc_id;
    8a68:	80 01 00 4c 	lwz     r0,76(r1)
    8a6c:	90 01 00 14 	stw     r0,20(r1)
	asoc = sctp_id2assoc(sk, associd);
    8a70:	80 61 01 08 	lwz     r3,264(r1)
    8a74:	80 81 00 14 	lwz     r4,20(r1)
    8a78:	48 00 00 01 	bl      8a78 <sctp_getsockopt_sctp_status+0x15c>
    8a7c:	90 61 00 10 	stw     r3,16(r1)
	if (!asoc) {
    8a80:	80 01 00 10 	lwz     r0,16(r1)
    8a84:	2f 80 00 00 	cmpwi   cr7,r0,0
    8a88:	40 9e 00 10 	bne-    cr7,8a98 <sctp_getsockopt_sctp_status+0x17c>
		retval = -EINVAL;
    8a8c:	38 00 ff ea 	li      r0,-22
    8a90:	90 01 00 08 	stw     r0,8(r1)
		goto out;
    8a94:	48 00 03 80 	b       8e14 <sctp_getsockopt_sctp_status+0x4f8>
	}

	transport = asoc->peer.primary_path;
    8a98:	80 01 00 10 	lwz     r0,16(r1)
    8a9c:	7c 09 03 78 	mr      r9,r0
    8aa0:	80 09 00 f4 	lwz     r0,244(r9)
    8aa4:	90 01 00 18 	stw     r0,24(r1)
    8aa8:	80 01 00 10 	lwz     r0,16(r1)
    8aac:	90 01 00 30 	stw     r0,48(r1)


/* Map an association to an assoc_id. */
static inline sctp_assoc_t sctp_assoc2id(const struct sctp_association *asoc)
{
	return asoc ? asoc->assoc_id : 0;
    8ab0:	80 01 00 30 	lwz     r0,48(r1)
    8ab4:	2f 80 00 00 	cmpwi   cr7,r0,0
    8ab8:	41 9e 00 14 	beq-    cr7,8acc <sctp_getsockopt_sctp_status+0x1b0>
    8abc:	80 01 00 30 	lwz     r0,48(r1)
    8ac0:	7c 0a 03 78 	mr      r10,r0
    8ac4:	80 0a 00 54 	lwz     r0,84(r10)
    8ac8:	48 00 00 08 	b       8ad0 <sctp_getsockopt_sctp_status+0x1b4>
    8acc:	38 00 00 00 	li      r0,0

	status.sstat_assoc_id = sctp_assoc2id(asoc);
    8ad0:	90 01 00 4c 	stw     r0,76(r1)
	status.sstat_state = asoc->state;
    8ad4:	80 01 00 10 	lwz     r0,16(r1)
    8ad8:	7c 0b 03 78 	mr      r11,r0
    8adc:	80 0b 01 b8 	lwz     r0,440(r11)
    8ae0:	90 01 00 50 	stw     r0,80(r1)
	status.sstat_rwnd =  asoc->peer.rwnd;
    8ae4:	80 01 00 10 	lwz     r0,16(r1)
    8ae8:	7c 09 03 78 	mr      r9,r0
    8aec:	80 09 00 e4 	lwz     r0,228(r9)
    8af0:	90 01 00 54 	stw     r0,84(r1)
	status.sstat_unackdata = asoc->unack_data;
    8af4:	80 01 00 10 	lwz     r0,16(r1)
    8af8:	7c 0a 03 78 	mr      r10,r0
    8afc:	a0 0a 03 5e 	lhz     r0,862(r10)
    8b00:	54 00 04 3e 	clrlwi  r0,r0,16
    8b04:	b0 01 00 58 	sth     r0,88(r1)

	status.sstat_penddata = sctp_tsnmap_pending(&asoc->peer.tsn_map);
    8b08:	80 01 00 10 	lwz     r0,16(r1)
    8b0c:	30 00 01 24 	addic   r0,r0,292
    8b10:	7c 03 03 78 	mr      r3,r0
    8b14:	48 00 00 01 	bl      8b14 <sctp_getsockopt_sctp_status+0x1f8>
    8b18:	7c 60 1b 78 	mr      r0,r3
    8b1c:	b0 01 00 5a 	sth     r0,90(r1)
	status.sstat_instrms = asoc->c.sinit_max_instreams;
    8b20:	80 01 00 10 	lwz     r0,16(r1)
    8b24:	7c 0b 03 78 	mr      r11,r0
    8b28:	a0 0b 00 76 	lhz     r0,118(r11)
    8b2c:	54 00 04 3e 	clrlwi  r0,r0,16
    8b30:	b0 01 00 5c 	sth     r0,92(r1)
	status.sstat_outstrms = asoc->c.sinit_num_ostreams;
    8b34:	80 01 00 10 	lwz     r0,16(r1)
    8b38:	7c 09 03 78 	mr      r9,r0
    8b3c:	a0 09 00 74 	lhz     r0,116(r9)
    8b40:	54 00 04 3e 	clrlwi  r0,r0,16
    8b44:	b0 01 00 5e 	sth     r0,94(r1)
	status.sstat_fragmentation_point = asoc->frag_point;
    8b48:	80 01 00 10 	lwz     r0,16(r1)
    8b4c:	7c 0a 03 78 	mr      r10,r0
    8b50:	80 0a 03 84 	lwz     r0,900(r10)
    8b54:	90 01 00 60 	stw     r0,96(r1)
	status.sstat_primary.spinfo_assoc_id = sctp_assoc2id(transport->asoc);
    8b58:	80 01 00 18 	lwz     r0,24(r1)
    8b5c:	7c 0b 03 78 	mr      r11,r0
    8b60:	80 0b 00 30 	lwz     r0,48(r11)
    8b64:	90 01 00 34 	stw     r0,52(r1)
    8b68:	80 01 00 34 	lwz     r0,52(r1)
    8b6c:	2f 80 00 00 	cmpwi   cr7,r0,0
    8b70:	41 9e 00 14 	beq-    cr7,8b84 <sctp_getsockopt_sctp_status+0x268>
    8b74:	80 01 00 34 	lwz     r0,52(r1)
    8b78:	7c 09 03 78 	mr      r9,r0
    8b7c:	80 09 00 54 	lwz     r0,84(r9)
    8b80:	48 00 00 08 	b       8b88 <sctp_getsockopt_sctp_status+0x26c>
    8b84:	38 00 00 00 	li      r0,0
    8b88:	90 01 00 64 	stw     r0,100(r1)
	memcpy(&status.sstat_primary.spinfo_address, &transport->ipaddr,
    8b8c:	80 01 00 18 	lwz     r0,24(r1)
    8b90:	31 20 00 10 	addic   r9,r0,16
			transport->af_specific->sockaddr_len);
    8b94:	80 01 00 18 	lwz     r0,24(r1)
    8b98:	7c 0a 03 78 	mr      r10,r0
    8b9c:	80 0a 00 2c 	lwz     r0,44(r10)
    8ba0:	7c 0b 03 78 	mr      r11,r0
    8ba4:	80 0b 00 6c 	lwz     r0,108(r11)
	status.sstat_penddata = sctp_tsnmap_pending(&asoc->peer.tsn_map);
	status.sstat_instrms = asoc->c.sinit_max_instreams;
	status.sstat_outstrms = asoc->c.sinit_num_ostreams;
	status.sstat_fragmentation_point = asoc->frag_point;
	status.sstat_primary.spinfo_assoc_id = sctp_assoc2id(transport->asoc);
	memcpy(&status.sstat_primary.spinfo_address, &transport->ipaddr,
    8ba8:	39 61 00 4c 	addi    r11,r1,76
    8bac:	39 6b 00 1c 	addi    r11,r11,28
    8bb0:	7d 63 5b 78 	mr      r3,r11
    8bb4:	7d 24 4b 78 	mr      r4,r9
    8bb8:	7c 05 03 78 	mr      r5,r0
    8bbc:	48 00 00 01 	bl      8bbc <sctp_getsockopt_sctp_status+0x2a0>
			transport->af_specific->sockaddr_len);
	/* Map ipv4 address into v4-mapped-on-v6 address.  */
	sctp_get_pf_specific(sk->sk_family)->addr_v4map(sctp_sk(sk),
    8bc0:	80 01 01 08 	lwz     r0,264(r1)
    8bc4:	7c 09 03 78 	mr      r9,r0
    8bc8:	a0 09 00 0c 	lhz     r0,12(r9)
    8bcc:	54 00 04 3e 	clrlwi  r0,r0,16
    8bd0:	7c 03 03 78 	mr      r3,r0
    8bd4:	48 00 00 01 	bl      8bd4 <sctp_getsockopt_sctp_status+0x2b8>
    8bd8:	7c 60 1b 78 	mr      r0,r3
    8bdc:	7c 0a 03 78 	mr      r10,r0
    8be0:	80 0a 00 20 	lwz     r0,32(r10)
    8be4:	81 21 01 08 	lwz     r9,264(r1)
    8be8:	91 21 00 38 	stw     r9,56(r1)
    8bec:	81 21 00 38 	lwz     r9,56(r1)
    8bf0:	7d 2b 4b 78 	mr      r11,r9
		(union sctp_addr *)&status.sstat_primary.spinfo_address);
    8bf4:	39 21 00 4c 	addi    r9,r1,76
    8bf8:	39 29 00 1c 	addi    r9,r9,28
	status.sstat_fragmentation_point = asoc->frag_point;
	status.sstat_primary.spinfo_assoc_id = sctp_assoc2id(transport->asoc);
	memcpy(&status.sstat_primary.spinfo_address, &transport->ipaddr,
			transport->af_specific->sockaddr_len);
	/* Map ipv4 address into v4-mapped-on-v6 address.  */
	sctp_get_pf_specific(sk->sk_family)->addr_v4map(sctp_sk(sk),
    8bfc:	7d 63 5b 78 	mr      r3,r11
    8c00:	7d 24 4b 78 	mr      r4,r9
    8c04:	7c 09 03 a6 	mtctr   r0
    8c08:	4e 80 04 21 	bctrl
		(union sctp_addr *)&status.sstat_primary.spinfo_address);
	status.sstat_primary.spinfo_state = transport->state;
    8c0c:	80 01 00 18 	lwz     r0,24(r1)
    8c10:	7c 09 03 78 	mr      r9,r0
    8c14:	80 09 00 9c 	lwz     r0,156(r9)
    8c18:	90 01 00 e8 	stw     r0,232(r1)
	status.sstat_primary.spinfo_cwnd = transport->cwnd;
    8c1c:	80 01 00 18 	lwz     r0,24(r1)
    8c20:	7c 0a 03 78 	mr      r10,r0
    8c24:	80 0a 00 44 	lwz     r0,68(r10)
    8c28:	90 01 00 ec 	stw     r0,236(r1)
	status.sstat_primary.spinfo_srtt = transport->srtt;
    8c2c:	80 01 00 18 	lwz     r0,24(r1)
    8c30:	7c 0b 03 78 	mr      r11,r0
    8c34:	80 0b 00 40 	lwz     r0,64(r11)
    8c38:	90 01 00 f0 	stw     r0,240(r1)
	status.sstat_primary.spinfo_rto = jiffies_to_msecs(transport->rto);
    8c3c:	80 01 00 18 	lwz     r0,24(r1)
    8c40:	7c 09 03 78 	mr      r9,r0
    8c44:	80 09 00 34 	lwz     r0,52(r9)
    8c48:	7c 03 03 78 	mr      r3,r0
    8c4c:	48 00 00 01 	bl      8c4c <sctp_getsockopt_sctp_status+0x330>
    8c50:	7c 60 1b 78 	mr      r0,r3
    8c54:	90 01 00 f4 	stw     r0,244(r1)
	status.sstat_primary.spinfo_mtu = transport->pathmtu;
    8c58:	80 01 00 18 	lwz     r0,24(r1)
    8c5c:	7c 0a 03 78 	mr      r10,r0
    8c60:	80 0a 00 90 	lwz     r0,144(r10)
    8c64:	90 01 00 f8 	stw     r0,248(r1)

	if (status.sstat_primary.spinfo_state == SCTP_UNKNOWN)
    8c68:	81 21 00 e8 	lwz     r9,232(r1)
    8c6c:	38 00 00 00 	li      r0,0
    8c70:	60 00 ff ff 	ori     r0,r0,65535
    8c74:	7f 89 00 00 	cmpw    cr7,r9,r0
    8c78:	40 9e 00 0c 	bne-    cr7,8c84 <sctp_getsockopt_sctp_status+0x368>
		status.sstat_primary.spinfo_state = SCTP_ACTIVE;
    8c7c:	38 00 00 01 	li      r0,1
    8c80:	90 01 00 e8 	stw     r0,232(r1)

	if (put_user(len, optlen)) {
    8c84:	38 00 ff f2 	li      r0,-14
    8c88:	90 01 00 0c 	stw     r0,12(r1)
    8c8c:	80 01 01 14 	lwz     r0,276(r1)
    8c90:	90 01 00 1c 	stw     r0,28(r1)
    8c94:	81 21 00 1c 	lwz     r9,28(r1)
    8c98:	7c 40 13 78 	mr      r0,r2
    8c9c:	7c 0b 03 78 	mr      r11,r0
    8ca0:	80 0b 01 d4 	lwz     r0,468(r11)
    8ca4:	7f 89 00 40 	cmplw   cr7,r9,r0
    8ca8:	41 9d 00 28 	bgt-    cr7,8cd0 <sctp_getsockopt_sctp_status+0x3b4>
    8cac:	7c 40 13 78 	mr      r0,r2
    8cb0:	7c 0a 03 78 	mr      r10,r0
    8cb4:	81 2a 01 d4 	lwz     r9,468(r10)
    8cb8:	80 01 00 1c 	lwz     r0,28(r1)
    8cbc:	7c 00 48 50 	subf    r0,r0,r9
    8cc0:	2b 80 00 02 	cmplwi  cr7,r0,2
    8cc4:	40 9d 00 0c 	ble-    cr7,8cd0 <sctp_getsockopt_sctp_status+0x3b4>
    8cc8:	38 00 00 01 	li      r0,1
    8ccc:	48 00 00 08 	b       8cd4 <sctp_getsockopt_sctp_status+0x3b8>
    8cd0:	38 00 00 00 	li      r0,0
    8cd4:	2f 80 00 00 	cmpwi   cr7,r0,0
    8cd8:	41 9e 00 28 	beq-    cr7,8d00 <sctp_getsockopt_sctp_status+0x3e4>
    8cdc:	38 00 00 00 	li      r0,0
    8ce0:	90 01 00 0c 	stw     r0,12(r1)
    8ce4:	80 01 01 0c 	lwz     r0,268(r1)
    8ce8:	81 21 00 1c 	lwz     r9,28(r1)
    8cec:	81 61 00 0c 	lwz     r11,12(r1)
    8cf0:	7d 7f 5b 78 	mr      r31,r11
    8cf4:	90 09 00 00 	stw     r0,0(r9)
    8cf8:	93 e1 00 0c 	stw     r31,12(r1)
    8cfc:	60 00 00 00 	nop
    8d00:	80 01 00 0c 	lwz     r0,12(r1)
    8d04:	2f 80 00 00 	cmpwi   cr7,r0,0
    8d08:	41 9e 00 10 	beq-    cr7,8d18 <sctp_getsockopt_sctp_status+0x3fc>
		retval = -EFAULT;
    8d0c:	38 00 ff f2 	li      r0,-14
    8d10:	90 01 00 08 	stw     r0,8(r1)
		goto out;
    8d14:	48 00 01 00 	b       8e14 <sctp_getsockopt_sctp_status+0x4f8>

	SCTP_DEBUG_PRINTK("sctp_getsockopt_sctp_status(%d): %d %d %d\n",
			  len, status.sstat_state, status.sstat_rwnd,
			  status.sstat_assoc_id);

	if (copy_to_user(optval, &status, len)) {
    8d18:	80 01 01 0c 	lwz     r0,268(r1)
    8d1c:	81 21 01 10 	lwz     r9,272(r1)
    8d20:	91 21 00 3c 	stw     r9,60(r1)
    8d24:	39 21 00 4c 	addi    r9,r1,76
    8d28:	91 21 00 40 	stw     r9,64(r1)
    8d2c:	90 01 00 44 	stw     r0,68(r1)
static inline unsigned long copy_to_user(void __user *to,
		const void *from, unsigned long n)
{
	unsigned long over;

	if (access_ok(VERIFY_WRITE, to, n))
    8d30:	81 21 00 3c 	lwz     r9,60(r1)
    8d34:	7c 40 13 78 	mr      r0,r2
    8d38:	7c 0b 03 78 	mr      r11,r0
    8d3c:	80 0b 01 d4 	lwz     r0,468(r11)
    8d40:	7f 89 00 40 	cmplw   cr7,r9,r0
    8d44:	41 9d 00 3c 	bgt-    cr7,8d80 <sctp_getsockopt_sctp_status+0x464>
    8d48:	80 01 00 44 	lwz     r0,68(r1)
    8d4c:	2f 80 00 00 	cmpwi   cr7,r0,0
    8d50:	41 9e 00 28 	beq-    cr7,8d78 <sctp_getsockopt_sctp_status+0x45c>
    8d54:	80 01 00 44 	lwz     r0,68(r1)
    8d58:	31 20 ff ff 	addic   r9,r0,-1
    8d5c:	7c 40 13 78 	mr      r0,r2
    8d60:	7c 0a 03 78 	mr      r10,r0
    8d64:	81 6a 01 d4 	lwz     r11,468(r10)
    8d68:	80 01 00 3c 	lwz     r0,60(r1)
    8d6c:	7c 00 58 50 	subf    r0,r0,r11
    8d70:	7f 89 00 40 	cmplw   cr7,r9,r0
    8d74:	41 9d 00 0c 	bgt-    cr7,8d80 <sctp_getsockopt_sctp_status+0x464>
    8d78:	38 00 00 01 	li      r0,1
    8d7c:	48 00 00 08 	b       8d84 <sctp_getsockopt_sctp_status+0x468>
    8d80:	38 00 00 00 	li      r0,0
    8d84:	2f 80 00 00 	cmpwi   cr7,r0,0
    8d88:	41 9e 00 1c 	beq-    cr7,8da4 <sctp_getsockopt_sctp_status+0x488>
		return __copy_tofrom_user(to, (__force void __user *)from, n);
    8d8c:	80 61 00 3c 	lwz     r3,60(r1)
    8d90:	80 81 00 40 	lwz     r4,64(r1)
    8d94:	80 a1 00 44 	lwz     r5,68(r1)
    8d98:	48 00 00 01 	bl      8d98 <sctp_getsockopt_sctp_status+0x47c>
    8d9c:	7c 60 1b 78 	mr      r0,r3
    8da0:	48 00 00 60 	b       8e00 <sctp_getsockopt_sctp_status+0x4e4>
	if ((unsigned long)to < TASK_SIZE) {
    8da4:	81 21 00 3c 	lwz     r9,60(r1)
    8da8:	3c 00 bf ff 	lis     r0,-16385
    8dac:	60 00 ff ff 	ori     r0,r0,65535
    8db0:	7f 89 00 40 	cmplw   cr7,r9,r0
    8db4:	41 9d 00 48 	bgt-    cr7,8dfc <sctp_getsockopt_sctp_status+0x4e0>
		over = (unsigned long)to + n - TASK_SIZE;
    8db8:	81 21 00 3c 	lwz     r9,60(r1)
    8dbc:	80 01 00 44 	lwz     r0,68(r1)
    8dc0:	7c 09 02 14 	add     r0,r9,r0
    8dc4:	3d 60 40 00 	lis     r11,16384
    8dc8:	7c 00 5a 14 	add     r0,r0,r11
    8dcc:	90 01 00 48 	stw     r0,72(r1)
		return __copy_tofrom_user(to, (__force void __user *)from,
    8dd0:	81 21 00 44 	lwz     r9,68(r1)
    8dd4:	80 01 00 48 	lwz     r0,72(r1)
    8dd8:	7c 00 48 50 	subf    r0,r0,r9
    8ddc:	80 61 00 3c 	lwz     r3,60(r1)
    8de0:	80 81 00 40 	lwz     r4,64(r1)
    8de4:	7c 05 03 78 	mr      r5,r0
    8de8:	48 00 00 01 	bl      8de8 <sctp_getsockopt_sctp_status+0x4cc>
    8dec:	7c 69 1b 78 	mr      r9,r3
    8df0:	80 01 00 48 	lwz     r0,72(r1)
    8df4:	7c 09 02 14 	add     r0,r9,r0
    8df8:	48 00 00 08 	b       8e00 <sctp_getsockopt_sctp_status+0x4e4>
				n - over) + over;
	}
	return n;
    8dfc:	80 01 00 44 	lwz     r0,68(r1)
    8e00:	2f 80 00 00 	cmpwi   cr7,r0,0
    8e04:	41 9e 00 10 	beq-    cr7,8e14 <sctp_getsockopt_sctp_status+0x4f8>
		retval = -EFAULT;
    8e08:	38 00 ff f2 	li      r0,-14
    8e0c:	90 01 00 08 	stw     r0,8(r1)
		goto out;
    8e10:	60 00 00 00 	nop
	}

out:
	return retval;
    8e14:	80 01 00 08 	lwz     r0,8(r1)
}
    8e18:	7c 03 03 78 	mr      r3,r0
    8e1c:	80 01 01 24 	lwz     r0,292(r1)
    8e20:	7c 08 03 a6 	mtlr    r0
    8e24:	83 e1 01 1c 	lwz     r31,284(r1)
    8e28:	38 21 01 20 	addi    r1,r1,288
    8e2c:	4e 80 00 20 	blr

00008e30 <sctp_getsockopt_peer_addr_info>:
 * read-only.
 */
static int sctp_getsockopt_peer_addr_info(struct sock *sk, int len,
					  char __user *optval,
					  int __user *optlen)
{
    8e30:	94 21 ff 10 	stwu    r1,-240(r1)
    8e34:	7c 08 02 a6 	mflr    r0
    8e38:	90 01 00 f4 	stw     r0,244(r1)
    8e3c:	93 e1 00 ec 	stw     r31,236(r1)
    8e40:	90 61 00 d8 	stw     r3,216(r1)
    8e44:	90 81 00 dc 	stw     r4,220(r1)
    8e48:	90 a1 00 e0 	stw     r5,224(r1)
    8e4c:	90 c1 00 e4 	stw     r6,228(r1)
	struct sctp_paddrinfo pinfo;
	struct sctp_transport *transport;
	int retval = 0;
    8e50:	38 00 00 00 	li      r0,0
    8e54:	90 01 00 08 	stw     r0,8(r1)

	if (len < sizeof(pinfo)) {
    8e58:	80 01 00 dc 	lwz     r0,220(r1)
    8e5c:	2b 80 00 97 	cmplwi  cr7,r0,151
    8e60:	41 9d 00 10 	bgt-    cr7,8e70 <sctp_getsockopt_peer_addr_info+0x40>
		retval = -EINVAL;
    8e64:	38 00 ff ea 	li      r0,-22
    8e68:	90 01 00 08 	stw     r0,8(r1)
		goto out;
    8e6c:	48 00 03 78 	b       91e4 <sctp_getsockopt_peer_addr_info+0x3b4>
	}

	len = sizeof(pinfo);
    8e70:	38 00 00 98 	li      r0,152
    8e74:	90 01 00 dc 	stw     r0,220(r1)
	if (copy_from_user(&pinfo, optval, len)) {
    8e78:	80 01 00 dc 	lwz     r0,220(r1)
    8e7c:	39 21 00 3c 	addi    r9,r1,60
    8e80:	91 21 00 18 	stw     r9,24(r1)
    8e84:	81 21 00 e0 	lwz     r9,224(r1)
    8e88:	91 21 00 1c 	stw     r9,28(r1)
    8e8c:	90 01 00 20 	stw     r0,32(r1)
static inline unsigned long copy_from_user(void *to,
		const void __user *from, unsigned long n)
{
	unsigned long over;

	if (access_ok(VERIFY_READ, from, n))
    8e90:	81 21 00 1c 	lwz     r9,28(r1)
    8e94:	7c 40 13 78 	mr      r0,r2
    8e98:	7c 0a 03 78 	mr      r10,r0
    8e9c:	80 0a 01 d4 	lwz     r0,468(r10)
    8ea0:	7f 89 00 40 	cmplw   cr7,r9,r0
    8ea4:	41 9d 00 3c 	bgt-    cr7,8ee0 <sctp_getsockopt_peer_addr_info+0xb0>
    8ea8:	80 01 00 20 	lwz     r0,32(r1)
    8eac:	2f 80 00 00 	cmpwi   cr7,r0,0
    8eb0:	41 9e 00 28 	beq-    cr7,8ed8 <sctp_getsockopt_peer_addr_info+0xa8>
    8eb4:	80 01 00 20 	lwz     r0,32(r1)
    8eb8:	31 20 ff ff 	addic   r9,r0,-1
    8ebc:	7c 40 13 78 	mr      r0,r2
    8ec0:	7c 0a 03 78 	mr      r10,r0
    8ec4:	81 6a 01 d4 	lwz     r11,468(r10)
    8ec8:	80 01 00 1c 	lwz     r0,28(r1)
    8ecc:	7c 00 58 50 	subf    r0,r0,r11
    8ed0:	7f 89 00 40 	cmplw   cr7,r9,r0
    8ed4:	41 9d 00 0c 	bgt-    cr7,8ee0 <sctp_getsockopt_peer_addr_info+0xb0>
    8ed8:	38 00 00 01 	li      r0,1
    8edc:	48 00 00 08 	b       8ee4 <sctp_getsockopt_peer_addr_info+0xb4>
    8ee0:	38 00 00 00 	li      r0,0
    8ee4:	2f 80 00 00 	cmpwi   cr7,r0,0
    8ee8:	41 9e 00 1c 	beq-    cr7,8f04 <sctp_getsockopt_peer_addr_info+0xd4>
		return __copy_tofrom_user((__force void __user *)to, from, n);
    8eec:	80 61 00 18 	lwz     r3,24(r1)
    8ef0:	80 81 00 1c 	lwz     r4,28(r1)
    8ef4:	80 a1 00 20 	lwz     r5,32(r1)
    8ef8:	48 00 00 01 	bl      8ef8 <sctp_getsockopt_peer_addr_info+0xc8>
    8efc:	7c 60 1b 78 	mr      r0,r3
    8f00:	48 00 00 60 	b       8f60 <sctp_getsockopt_peer_addr_info+0x130>
	if ((unsigned long)from < TASK_SIZE) {
    8f04:	81 21 00 1c 	lwz     r9,28(r1)
    8f08:	3c 00 bf ff 	lis     r0,-16385
    8f0c:	60 00 ff ff 	ori     r0,r0,65535
    8f10:	7f 89 00 40 	cmplw   cr7,r9,r0
    8f14:	41 9d 00 48 	bgt-    cr7,8f5c <sctp_getsockopt_peer_addr_info+0x12c>
		over = (unsigned long)from + n - TASK_SIZE;
    8f18:	81 21 00 1c 	lwz     r9,28(r1)
    8f1c:	80 01 00 20 	lwz     r0,32(r1)
    8f20:	7c 09 02 14 	add     r0,r9,r0
    8f24:	3d 60 40 00 	lis     r11,16384
    8f28:	7c 00 5a 14 	add     r0,r0,r11
    8f2c:	90 01 00 24 	stw     r0,36(r1)
		return __copy_tofrom_user((__force void __user *)to, from,
    8f30:	81 21 00 20 	lwz     r9,32(r1)
    8f34:	80 01 00 24 	lwz     r0,36(r1)
    8f38:	7c 00 48 50 	subf    r0,r0,r9
    8f3c:	80 61 00 18 	lwz     r3,24(r1)
    8f40:	80 81 00 1c 	lwz     r4,28(r1)
    8f44:	7c 05 03 78 	mr      r5,r0
    8f48:	48 00 00 01 	bl      8f48 <sctp_getsockopt_peer_addr_info+0x118>
    8f4c:	7c 69 1b 78 	mr      r9,r3
    8f50:	80 01 00 24 	lwz     r0,36(r1)
    8f54:	7c 09 02 14 	add     r0,r9,r0
    8f58:	48 00 00 08 	b       8f60 <sctp_getsockopt_peer_addr_info+0x130>
				n - over) + over;
	}
	return n;
    8f5c:	80 01 00 20 	lwz     r0,32(r1)
    8f60:	2f 80 00 00 	cmpwi   cr7,r0,0
    8f64:	41 9e 00 10 	beq-    cr7,8f74 <sctp_getsockopt_peer_addr_info+0x144>
		retval = -EFAULT;
    8f68:	38 00 ff f2 	li      r0,-14
    8f6c:	90 01 00 08 	stw     r0,8(r1)
		goto out;
    8f70:	48 00 02 74 	b       91e4 <sctp_getsockopt_peer_addr_info+0x3b4>
	}

	transport = sctp_addr_id2transport(sk, &pinfo.spinfo_address,
    8f74:	80 01 00 3c 	lwz     r0,60(r1)
    8f78:	39 21 00 3c 	addi    r9,r1,60
    8f7c:	39 29 00 04 	addi    r9,r9,4
    8f80:	80 61 00 d8 	lwz     r3,216(r1)
    8f84:	7d 24 4b 78 	mr      r4,r9
    8f88:	7c 05 03 78 	mr      r5,r0
    8f8c:	4b ff 72 55 	bl      1e0 <sctp_addr_id2transport>
    8f90:	90 61 00 10 	stw     r3,16(r1)
					   pinfo.spinfo_assoc_id);
	if (!transport)
    8f94:	80 01 00 10 	lwz     r0,16(r1)
    8f98:	2f 80 00 00 	cmpwi   cr7,r0,0
    8f9c:	40 9e 00 0c 	bne-    cr7,8fa8 <sctp_getsockopt_peer_addr_info+0x178>
		return -EINVAL;
    8fa0:	38 00 ff ea 	li      r0,-22
    8fa4:	48 00 02 44 	b       91e8 <sctp_getsockopt_peer_addr_info+0x3b8>

	pinfo.spinfo_assoc_id = sctp_assoc2id(transport->asoc);
    8fa8:	80 01 00 10 	lwz     r0,16(r1)
    8fac:	7c 09 03 78 	mr      r9,r0
    8fb0:	80 09 00 30 	lwz     r0,48(r9)
    8fb4:	90 01 00 28 	stw     r0,40(r1)
    8fb8:	80 01 00 28 	lwz     r0,40(r1)
    8fbc:	2f 80 00 00 	cmpwi   cr7,r0,0
    8fc0:	41 9e 00 14 	beq-    cr7,8fd4 <sctp_getsockopt_peer_addr_info+0x1a4>
    8fc4:	80 01 00 28 	lwz     r0,40(r1)
    8fc8:	7c 0a 03 78 	mr      r10,r0
    8fcc:	80 0a 00 54 	lwz     r0,84(r10)
    8fd0:	48 00 00 08 	b       8fd8 <sctp_getsockopt_peer_addr_info+0x1a8>
    8fd4:	38 00 00 00 	li      r0,0
    8fd8:	90 01 00 3c 	stw     r0,60(r1)
	pinfo.spinfo_state = transport->state;
    8fdc:	80 01 00 10 	lwz     r0,16(r1)
    8fe0:	7c 0b 03 78 	mr      r11,r0
    8fe4:	80 0b 00 9c 	lwz     r0,156(r11)
    8fe8:	90 01 00 c0 	stw     r0,192(r1)
	pinfo.spinfo_cwnd = transport->cwnd;
    8fec:	80 01 00 10 	lwz     r0,16(r1)
    8ff0:	7c 09 03 78 	mr      r9,r0
    8ff4:	80 09 00 44 	lwz     r0,68(r9)
    8ff8:	90 01 00 c4 	stw     r0,196(r1)
	pinfo.spinfo_srtt = transport->srtt;
    8ffc:	80 01 00 10 	lwz     r0,16(r1)
    9000:	7c 0a 03 78 	mr      r10,r0
    9004:	80 0a 00 40 	lwz     r0,64(r10)
    9008:	90 01 00 c8 	stw     r0,200(r1)
	pinfo.spinfo_rto = jiffies_to_msecs(transport->rto);
    900c:	80 01 00 10 	lwz     r0,16(r1)
    9010:	7c 0b 03 78 	mr      r11,r0
    9014:	80 0b 00 34 	lwz     r0,52(r11)
    9018:	7c 03 03 78 	mr      r3,r0
    901c:	48 00 00 01 	bl      901c <sctp_getsockopt_peer_addr_info+0x1ec>
    9020:	7c 60 1b 78 	mr      r0,r3
    9024:	90 01 00 cc 	stw     r0,204(r1)
	pinfo.spinfo_mtu = transport->pathmtu;
    9028:	80 01 00 10 	lwz     r0,16(r1)
    902c:	7c 09 03 78 	mr      r9,r0
    9030:	80 09 00 90 	lwz     r0,144(r9)
    9034:	90 01 00 d0 	stw     r0,208(r1)

	if (pinfo.spinfo_state == SCTP_UNKNOWN)
    9038:	81 21 00 c0 	lwz     r9,192(r1)
    903c:	38 00 00 00 	li      r0,0
    9040:	60 00 ff ff 	ori     r0,r0,65535
    9044:	7f 89 00 00 	cmpw    cr7,r9,r0
    9048:	40 9e 00 0c 	bne-    cr7,9054 <sctp_getsockopt_peer_addr_info+0x224>
		pinfo.spinfo_state = SCTP_ACTIVE;
    904c:	38 00 00 01 	li      r0,1
    9050:	90 01 00 c0 	stw     r0,192(r1)

	if (put_user(len, optlen)) {
    9054:	38 00 ff f2 	li      r0,-14
    9058:	90 01 00 0c 	stw     r0,12(r1)
    905c:	80 01 00 e4 	lwz     r0,228(r1)
    9060:	90 01 00 14 	stw     r0,20(r1)
    9064:	81 21 00 14 	lwz     r9,20(r1)
    9068:	7c 40 13 78 	mr      r0,r2
    906c:	7c 0a 03 78 	mr      r10,r0
    9070:	80 0a 01 d4 	lwz     r0,468(r10)
    9074:	7f 89 00 40 	cmplw   cr7,r9,r0
    9078:	41 9d 00 28 	bgt-    cr7,90a0 <sctp_getsockopt_peer_addr_info+0x270>
    907c:	7c 40 13 78 	mr      r0,r2
    9080:	7c 0b 03 78 	mr      r11,r0
    9084:	81 2b 01 d4 	lwz     r9,468(r11)
    9088:	80 01 00 14 	lwz     r0,20(r1)
    908c:	7c 00 48 50 	subf    r0,r0,r9
    9090:	2b 80 00 02 	cmplwi  cr7,r0,2
    9094:	40 9d 00 0c 	ble-    cr7,90a0 <sctp_getsockopt_peer_addr_info+0x270>
    9098:	38 00 00 01 	li      r0,1
    909c:	48 00 00 08 	b       90a4 <sctp_getsockopt_peer_addr_info+0x274>
    90a0:	38 00 00 00 	li      r0,0
    90a4:	2f 80 00 00 	cmpwi   cr7,r0,0
    90a8:	41 9e 00 28 	beq-    cr7,90d0 <sctp_getsockopt_peer_addr_info+0x2a0>
    90ac:	38 00 00 00 	li      r0,0
    90b0:	90 01 00 0c 	stw     r0,12(r1)
    90b4:	80 01 00 dc 	lwz     r0,220(r1)
    90b8:	81 21 00 14 	lwz     r9,20(r1)
    90bc:	81 61 00 0c 	lwz     r11,12(r1)
    90c0:	7d 7f 5b 78 	mr      r31,r11
    90c4:	90 09 00 00 	stw     r0,0(r9)
    90c8:	93 e1 00 0c 	stw     r31,12(r1)
    90cc:	60 00 00 00 	nop
    90d0:	80 01 00 0c 	lwz     r0,12(r1)
    90d4:	2f 80 00 00 	cmpwi   cr7,r0,0
    90d8:	41 9e 00 10 	beq-    cr7,90e8 <sctp_getsockopt_peer_addr_info+0x2b8>
		retval = -EFAULT;
    90dc:	38 00 ff f2 	li      r0,-14
    90e0:	90 01 00 08 	stw     r0,8(r1)
		goto out;
    90e4:	48 00 01 00 	b       91e4 <sctp_getsockopt_peer_addr_info+0x3b4>
	}

	if (copy_to_user(optval, &pinfo, len)) {
    90e8:	80 01 00 dc 	lwz     r0,220(r1)
    90ec:	81 21 00 e0 	lwz     r9,224(r1)
    90f0:	91 21 00 2c 	stw     r9,44(r1)
    90f4:	39 21 00 3c 	addi    r9,r1,60
    90f8:	91 21 00 30 	stw     r9,48(r1)
    90fc:	90 01 00 34 	stw     r0,52(r1)
static inline unsigned long copy_to_user(void __user *to,
		const void *from, unsigned long n)
{
	unsigned long over;

	if (access_ok(VERIFY_WRITE, to, n))
    9100:	81 21 00 2c 	lwz     r9,44(r1)
    9104:	7c 40 13 78 	mr      r0,r2
    9108:	7c 0a 03 78 	mr      r10,r0
    910c:	80 0a 01 d4 	lwz     r0,468(r10)
    9110:	7f 89 00 40 	cmplw   cr7,r9,r0
    9114:	41 9d 00 3c 	bgt-    cr7,9150 <sctp_getsockopt_peer_addr_info+0x320>
    9118:	80 01 00 34 	lwz     r0,52(r1)
    911c:	2f 80 00 00 	cmpwi   cr7,r0,0
    9120:	41 9e 00 28 	beq-    cr7,9148 <sctp_getsockopt_peer_addr_info+0x318>
    9124:	80 01 00 34 	lwz     r0,52(r1)
    9128:	31 20 ff ff 	addic   r9,r0,-1
    912c:	7c 40 13 78 	mr      r0,r2
    9130:	7c 0a 03 78 	mr      r10,r0
    9134:	81 6a 01 d4 	lwz     r11,468(r10)
    9138:	80 01 00 2c 	lwz     r0,44(r1)
    913c:	7c 00 58 50 	subf    r0,r0,r11
    9140:	7f 89 00 40 	cmplw   cr7,r9,r0
    9144:	41 9d 00 0c 	bgt-    cr7,9150 <sctp_getsockopt_peer_addr_info+0x320>
    9148:	38 00 00 01 	li      r0,1
    914c:	48 00 00 08 	b       9154 <sctp_getsockopt_peer_addr_info+0x324>
    9150:	38 00 00 00 	li      r0,0
    9154:	2f 80 00 00 	cmpwi   cr7,r0,0
    9158:	41 9e 00 1c 	beq-    cr7,9174 <sctp_getsockopt_peer_addr_info+0x344>
		return __copy_tofrom_user(to, (__force void __user *)from, n);
    915c:	80 61 00 2c 	lwz     r3,44(r1)
    9160:	80 81 00 30 	lwz     r4,48(r1)
    9164:	80 a1 00 34 	lwz     r5,52(r1)
    9168:	48 00 00 01 	bl      9168 <sctp_getsockopt_peer_addr_info+0x338>
    916c:	7c 60 1b 78 	mr      r0,r3
    9170:	48 00 00 60 	b       91d0 <sctp_getsockopt_peer_addr_info+0x3a0>
	if ((unsigned long)to < TASK_SIZE) {
    9174:	81 21 00 2c 	lwz     r9,44(r1)
    9178:	3c 00 bf ff 	lis     r0,-16385
    917c:	60 00 ff ff 	ori     r0,r0,65535
    9180:	7f 89 00 40 	cmplw   cr7,r9,r0
    9184:	41 9d 00 48 	bgt-    cr7,91cc <sctp_getsockopt_peer_addr_info+0x39c>
		over = (unsigned long)to + n - TASK_SIZE;
    9188:	81 21 00 2c 	lwz     r9,44(r1)
    918c:	80 01 00 34 	lwz     r0,52(r1)
    9190:	7c 09 02 14 	add     r0,r9,r0
    9194:	3d 60 40 00 	lis     r11,16384
    9198:	7c 00 5a 14 	add     r0,r0,r11
    919c:	90 01 00 38 	stw     r0,56(r1)
		return __copy_tofrom_user(to, (__force void __user *)from,
    91a0:	81 21 00 34 	lwz     r9,52(r1)
    91a4:	80 01 00 38 	lwz     r0,56(r1)
    91a8:	7c 00 48 50 	subf    r0,r0,r9
    91ac:	80 61 00 2c 	lwz     r3,44(r1)
    91b0:	80 81 00 30 	lwz     r4,48(r1)
    91b4:	7c 05 03 78 	mr      r5,r0
    91b8:	48 00 00 01 	bl      91b8 <sctp_getsockopt_peer_addr_info+0x388>
    91bc:	7c 69 1b 78 	mr      r9,r3
    91c0:	80 01 00 38 	lwz     r0,56(r1)
    91c4:	7c 09 02 14 	add     r0,r9,r0
    91c8:	48 00 00 08 	b       91d0 <sctp_getsockopt_peer_addr_info+0x3a0>
				n - over) + over;
	}
	return n;
    91cc:	80 01 00 34 	lwz     r0,52(r1)
    91d0:	2f 80 00 00 	cmpwi   cr7,r0,0
    91d4:	41 9e 00 10 	beq-    cr7,91e4 <sctp_getsockopt_peer_addr_info+0x3b4>
		retval = -EFAULT;
    91d8:	38 00 ff f2 	li      r0,-14
    91dc:	90 01 00 08 	stw     r0,8(r1)
		goto out;
    91e0:	60 00 00 00 	nop
	}

out:
	return retval;
    91e4:	80 01 00 08 	lwz     r0,8(r1)
}
    91e8:	7c 03 03 78 	mr      r3,r0
    91ec:	80 01 00 f4 	lwz     r0,244(r1)
    91f0:	7c 08 03 a6 	mtlr    r0
    91f4:	83 e1 00 ec 	lwz     r31,236(r1)
    91f8:	38 21 00 f0 	addi    r1,r1,240
    91fc:	4e 80 00 20 	blr

00009200 <sctp_getsockopt_disable_fragments>:
 * exceeds the current PMTU size, the message will NOT be sent and
 * instead a error will be indicated to the user.
 */
static int sctp_getsockopt_disable_fragments(struct sock *sk, int len,
					char __user *optval, int __user *optlen)
{
    9200:	94 21 ff c0 	stwu    r1,-64(r1)
    9204:	7c 08 02 a6 	mflr    r0
    9208:	90 01 00 44 	stw     r0,68(r1)
    920c:	93 e1 00 3c 	stw     r31,60(r1)
    9210:	90 61 00 28 	stw     r3,40(r1)
    9214:	90 81 00 2c 	stw     r4,44(r1)
    9218:	90 a1 00 30 	stw     r5,48(r1)
    921c:	90 c1 00 34 	stw     r6,52(r1)
	int val;

	if (len < sizeof(int))
    9220:	80 01 00 2c 	lwz     r0,44(r1)
    9224:	2b 80 00 03 	cmplwi  cr7,r0,3
    9228:	41 9d 00 0c 	bgt-    cr7,9234 <sctp_getsockopt_disable_fragments+0x34>
		return -EINVAL;
    922c:	38 00 ff ea 	li      r0,-22
    9230:	48 00 01 c0 	b       93f0 <sctp_getsockopt_disable_fragments+0x1f0>

	len = sizeof(int);
    9234:	38 00 00 04 	li      r0,4
    9238:	90 01 00 2c 	stw     r0,44(r1)
    923c:	80 01 00 28 	lwz     r0,40(r1)
    9240:	90 01 00 10 	stw     r0,16(r1)
    9244:	80 01 00 10 	lwz     r0,16(r1)
	val = (sctp_sk(sk)->disable_fragments == 1);
    9248:	7c 09 03 78 	mr      r9,r0
    924c:	88 09 02 e9 	lbz     r0,745(r9)
    9250:	54 00 06 3e 	clrlwi  r0,r0,24
    9254:	2f 80 00 01 	cmpwi   cr7,r0,1
    9258:	7c 00 00 26 	mfcr    r0
    925c:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
    9260:	90 01 00 24 	stw     r0,36(r1)
	if (put_user(len, optlen))
    9264:	38 00 ff f2 	li      r0,-14
    9268:	90 01 00 08 	stw     r0,8(r1)
    926c:	80 01 00 34 	lwz     r0,52(r1)
    9270:	90 01 00 0c 	stw     r0,12(r1)
    9274:	81 21 00 0c 	lwz     r9,12(r1)
    9278:	7c 40 13 78 	mr      r0,r2
    927c:	7c 0a 03 78 	mr      r10,r0
    9280:	80 0a 01 d4 	lwz     r0,468(r10)
    9284:	7f 89 00 40 	cmplw   cr7,r9,r0
    9288:	41 9d 00 28 	bgt-    cr7,92b0 <sctp_getsockopt_disable_fragments+0xb0>
    928c:	7c 40 13 78 	mr      r0,r2
    9290:	7c 0b 03 78 	mr      r11,r0
    9294:	81 2b 01 d4 	lwz     r9,468(r11)
    9298:	80 01 00 0c 	lwz     r0,12(r1)
    929c:	7c 00 48 50 	subf    r0,r0,r9
    92a0:	2b 80 00 02 	cmplwi  cr7,r0,2
    92a4:	40 9d 00 0c 	ble-    cr7,92b0 <sctp_getsockopt_disable_fragments+0xb0>
    92a8:	38 00 00 01 	li      r0,1
    92ac:	48 00 00 08 	b       92b4 <sctp_getsockopt_disable_fragments+0xb4>
    92b0:	38 00 00 00 	li      r0,0
    92b4:	2f 80 00 00 	cmpwi   cr7,r0,0
    92b8:	41 9e 00 28 	beq-    cr7,92e0 <sctp_getsockopt_disable_fragments+0xe0>
    92bc:	38 00 00 00 	li      r0,0
    92c0:	90 01 00 08 	stw     r0,8(r1)
    92c4:	80 01 00 2c 	lwz     r0,44(r1)
    92c8:	81 21 00 0c 	lwz     r9,12(r1)
    92cc:	81 61 00 08 	lwz     r11,8(r1)
    92d0:	7d 7f 5b 78 	mr      r31,r11
    92d4:	90 09 00 00 	stw     r0,0(r9)
    92d8:	93 e1 00 08 	stw     r31,8(r1)
    92dc:	60 00 00 00 	nop
    92e0:	80 01 00 08 	lwz     r0,8(r1)
    92e4:	2f 80 00 00 	cmpwi   cr7,r0,0
    92e8:	41 9e 00 0c 	beq-    cr7,92f4 <sctp_getsockopt_disable_fragments+0xf4>
		return -EFAULT;
    92ec:	38 00 ff f2 	li      r0,-14
    92f0:	48 00 01 00 	b       93f0 <sctp_getsockopt_disable_fragments+0x1f0>
	if (copy_to_user(optval, &val, len))
    92f4:	80 01 00 2c 	lwz     r0,44(r1)
    92f8:	81 21 00 30 	lwz     r9,48(r1)
    92fc:	91 21 00 14 	stw     r9,20(r1)
    9300:	39 21 00 24 	addi    r9,r1,36
    9304:	91 21 00 18 	stw     r9,24(r1)
    9308:	90 01 00 1c 	stw     r0,28(r1)
static inline unsigned long copy_to_user(void __user *to,
		const void *from, unsigned long n)
{
	unsigned long over;

	if (access_ok(VERIFY_WRITE, to, n))
    930c:	81 21 00 14 	lwz     r9,20(r1)
    9310:	7c 40 13 78 	mr      r0,r2
    9314:	7c 0a 03 78 	mr      r10,r0
    9318:	80 0a 01 d4 	lwz     r0,468(r10)
    931c:	7f 89 00 40 	cmplw   cr7,r9,r0
    9320:	41 9d 00 3c 	bgt-    cr7,935c <sctp_getsockopt_disable_fragments+0x15c>
    9324:	80 01 00 1c 	lwz     r0,28(r1)
    9328:	2f 80 00 00 	cmpwi   cr7,r0,0
    932c:	41 9e 00 28 	beq-    cr7,9354 <sctp_getsockopt_disable_fragments+0x154>
    9330:	80 01 00 1c 	lwz     r0,28(r1)
    9334:	31 20 ff ff 	addic   r9,r0,-1
    9338:	7c 40 13 78 	mr      r0,r2
    933c:	7c 0a 03 78 	mr      r10,r0
    9340:	81 6a 01 d4 	lwz     r11,468(r10)
    9344:	80 01 00 14 	lwz     r0,20(r1)
    9348:	7c 00 58 50 	subf    r0,r0,r11
    934c:	7f 89 00 40 	cmplw   cr7,r9,r0
    9350:	41 9d 00 0c 	bgt-    cr7,935c <sctp_getsockopt_disable_fragments+0x15c>
    9354:	38 00 00 01 	li      r0,1
    9358:	48 00 00 08 	b       9360 <sctp_getsockopt_disable_fragments+0x160>
    935c:	38 00 00 00 	li      r0,0
    9360:	2f 80 00 00 	cmpwi   cr7,r0,0
    9364:	41 9e 00 1c 	beq-    cr7,9380 <sctp_getsockopt_disable_fragments+0x180>
		return __copy_tofrom_user(to, (__force void __user *)from, n);
    9368:	80 61 00 14 	lwz     r3,20(r1)
    936c:	80 81 00 18 	lwz     r4,24(r1)
    9370:	80 a1 00 1c 	lwz     r5,28(r1)
    9374:	48 00 00 01 	bl      9374 <sctp_getsockopt_disable_fragments+0x174>
    9378:	7c 60 1b 78 	mr      r0,r3
    937c:	48 00 00 60 	b       93dc <sctp_getsockopt_disable_fragments+0x1dc>
	if ((unsigned long)to < TASK_SIZE) {
    9380:	81 21 00 14 	lwz     r9,20(r1)
    9384:	3c 00 bf ff 	lis     r0,-16385
    9388:	60 00 ff ff 	ori     r0,r0,65535
    938c:	7f 89 00 40 	cmplw   cr7,r9,r0
    9390:	41 9d 00 48 	bgt-    cr7,93d8 <sctp_getsockopt_disable_fragments+0x1d8>
		over = (unsigned long)to + n - TASK_SIZE;
    9394:	81 21 00 14 	lwz     r9,20(r1)
    9398:	80 01 00 1c 	lwz     r0,28(r1)
    939c:	7c 09 02 14 	add     r0,r9,r0
    93a0:	3d 60 40 00 	lis     r11,16384
    93a4:	7c 00 5a 14 	add     r0,r0,r11
    93a8:	90 01 00 20 	stw     r0,32(r1)
		return __copy_tofrom_user(to, (__force void __user *)from,
    93ac:	81 21 00 1c 	lwz     r9,28(r1)
    93b0:	80 01 00 20 	lwz     r0,32(r1)
    93b4:	7c 00 48 50 	subf    r0,r0,r9
    93b8:	80 61 00 14 	lwz     r3,20(r1)
    93bc:	80 81 00 18 	lwz     r4,24(r1)
    93c0:	7c 05 03 78 	mr      r5,r0
    93c4:	48 00 00 01 	bl      93c4 <sctp_getsockopt_disable_fragments+0x1c4>
    93c8:	7c 69 1b 78 	mr      r9,r3
    93cc:	80 01 00 20 	lwz     r0,32(r1)
    93d0:	7c 09 02 14 	add     r0,r9,r0
    93d4:	48 00 00 08 	b       93dc <sctp_getsockopt_disable_fragments+0x1dc>
				n - over) + over;
	}
	return n;
    93d8:	80 01 00 1c 	lwz     r0,28(r1)
    93dc:	2f 80 00 00 	cmpwi   cr7,r0,0
    93e0:	41 9e 00 0c 	beq-    cr7,93ec <sctp_getsockopt_disable_fragments+0x1ec>
		return -EFAULT;
    93e4:	38 00 ff f2 	li      r0,-14
    93e8:	48 00 00 08 	b       93f0 <sctp_getsockopt_disable_fragments+0x1f0>
	return 0;
    93ec:	38 00 00 00 	li      r0,0
}
    93f0:	7c 03 03 78 	mr      r3,r0
    93f4:	80 01 00 44 	lwz     r0,68(r1)
    93f8:	7c 08 03 a6 	mtlr    r0
    93fc:	83 e1 00 3c 	lwz     r31,60(r1)
    9400:	38 21 00 40 	addi    r1,r1,64
    9404:	4e 80 00 20 	blr

00009408 <sctp_getsockopt_events>:
 * This socket option is used to specify various notifications and
 * ancillary data the user wishes to receive.
 */
static int sctp_getsockopt_events(struct sock *sk, int len, char __user *optval,
				  int __user *optlen)
{
    9408:	94 21 ff c0 	stwu    r1,-64(r1)
    940c:	7c 08 02 a6 	mflr    r0
    9410:	90 01 00 44 	stw     r0,68(r1)
    9414:	93 e1 00 3c 	stw     r31,60(r1)
    9418:	90 61 00 28 	stw     r3,40(r1)
    941c:	90 81 00 2c 	stw     r4,44(r1)
    9420:	90 a1 00 30 	stw     r5,48(r1)
    9424:	90 c1 00 34 	stw     r6,52(r1)
	if (len < sizeof(struct sctp_event_subscribe))
    9428:	80 01 00 2c 	lwz     r0,44(r1)
    942c:	2b 80 00 08 	cmplwi  cr7,r0,8
    9430:	41 9d 00 0c 	bgt-    cr7,943c <sctp_getsockopt_events+0x34>
		return -EINVAL;
    9434:	38 00 ff ea 	li      r0,-22
    9438:	48 00 01 a4 	b       95dc <sctp_getsockopt_events+0x1d4>
	len = sizeof(struct sctp_event_subscribe);
    943c:	38 00 00 09 	li      r0,9
    9440:	90 01 00 2c 	stw     r0,44(r1)
	if (put_user(len, optlen))
    9444:	38 00 ff f2 	li      r0,-14
    9448:	90 01 00 08 	stw     r0,8(r1)
    944c:	80 01 00 34 	lwz     r0,52(r1)
    9450:	90 01 00 0c 	stw     r0,12(r1)
    9454:	81 21 00 0c 	lwz     r9,12(r1)
    9458:	7c 40 13 78 	mr      r0,r2
    945c:	7c 0a 03 78 	mr      r10,r0
    9460:	80 0a 01 d4 	lwz     r0,468(r10)
    9464:	7f 89 00 40 	cmplw   cr7,r9,r0
    9468:	41 9d 00 28 	bgt-    cr7,9490 <sctp_getsockopt_events+0x88>
    946c:	7c 40 13 78 	mr      r0,r2
    9470:	7c 0b 03 78 	mr      r11,r0
    9474:	81 2b 01 d4 	lwz     r9,468(r11)
    9478:	80 01 00 0c 	lwz     r0,12(r1)
    947c:	7c 00 48 50 	subf    r0,r0,r9
    9480:	2b 80 00 02 	cmplwi  cr7,r0,2
    9484:	40 9d 00 0c 	ble-    cr7,9490 <sctp_getsockopt_events+0x88>
    9488:	38 00 00 01 	li      r0,1
    948c:	48 00 00 08 	b       9494 <sctp_getsockopt_events+0x8c>
    9490:	38 00 00 00 	li      r0,0
    9494:	2f 80 00 00 	cmpwi   cr7,r0,0
    9498:	41 9e 00 28 	beq-    cr7,94c0 <sctp_getsockopt_events+0xb8>
    949c:	38 00 00 00 	li      r0,0
    94a0:	90 01 00 08 	stw     r0,8(r1)
    94a4:	80 01 00 2c 	lwz     r0,44(r1)
    94a8:	81 21 00 0c 	lwz     r9,12(r1)
    94ac:	81 61 00 08 	lwz     r11,8(r1)
    94b0:	7d 7f 5b 78 	mr      r31,r11
    94b4:	90 09 00 00 	stw     r0,0(r9)
    94b8:	93 e1 00 08 	stw     r31,8(r1)
    94bc:	60 00 00 00 	nop
    94c0:	80 01 00 08 	lwz     r0,8(r1)
    94c4:	2f 80 00 00 	cmpwi   cr7,r0,0
    94c8:	41 9e 00 0c 	beq-    cr7,94d4 <sctp_getsockopt_events+0xcc>
		return -EFAULT;
    94cc:	38 00 ff f2 	li      r0,-14
    94d0:	48 00 01 0c 	b       95dc <sctp_getsockopt_events+0x1d4>
    94d4:	80 01 00 28 	lwz     r0,40(r1)
    94d8:	90 01 00 10 	stw     r0,16(r1)
    94dc:	80 01 00 10 	lwz     r0,16(r1)
	if (copy_to_user(optval, &sctp_sk(sk)->subscribe, len))
    94e0:	31 20 02 c0 	addic   r9,r0,704
    94e4:	80 01 00 2c 	lwz     r0,44(r1)
    94e8:	81 61 00 30 	lwz     r11,48(r1)
    94ec:	91 61 00 14 	stw     r11,20(r1)
    94f0:	91 21 00 18 	stw     r9,24(r1)
    94f4:	90 01 00 1c 	stw     r0,28(r1)
static inline unsigned long copy_to_user(void __user *to,
		const void *from, unsigned long n)
{
	unsigned long over;

	if (access_ok(VERIFY_WRITE, to, n))
    94f8:	81 21 00 14 	lwz     r9,20(r1)
    94fc:	7c 40 13 78 	mr      r0,r2
    9500:	7c 0a 03 78 	mr      r10,r0
    9504:	80 0a 01 d4 	lwz     r0,468(r10)
    9508:	7f 89 00 40 	cmplw   cr7,r9,r0
    950c:	41 9d 00 3c 	bgt-    cr7,9548 <sctp_getsockopt_events+0x140>
    9510:	80 01 00 1c 	lwz     r0,28(r1)
    9514:	2f 80 00 00 	cmpwi   cr7,r0,0
    9518:	41 9e 00 28 	beq-    cr7,9540 <sctp_getsockopt_events+0x138>
    951c:	80 01 00 1c 	lwz     r0,28(r1)
    9520:	31 20 ff ff 	addic   r9,r0,-1
    9524:	7c 40 13 78 	mr      r0,r2
    9528:	7c 0a 03 78 	mr      r10,r0
    952c:	81 6a 01 d4 	lwz     r11,468(r10)
    9530:	80 01 00 14 	lwz     r0,20(r1)
    9534:	7c 00 58 50 	subf    r0,r0,r11
    9538:	7f 89 00 40 	cmplw   cr7,r9,r0
    953c:	41 9d 00 0c 	bgt-    cr7,9548 <sctp_getsockopt_events+0x140>
    9540:	38 00 00 01 	li      r0,1
    9544:	48 00 00 08 	b       954c <sctp_getsockopt_events+0x144>
    9548:	38 00 00 00 	li      r0,0
    954c:	2f 80 00 00 	cmpwi   cr7,r0,0
    9550:	41 9e 00 1c 	beq-    cr7,956c <sctp_getsockopt_events+0x164>
		return __copy_tofrom_user(to, (__force void __user *)from, n);
    9554:	80 61 00 14 	lwz     r3,20(r1)
    9558:	80 81 00 18 	lwz     r4,24(r1)
    955c:	80 a1 00 1c 	lwz     r5,28(r1)
    9560:	48 00 00 01 	bl      9560 <sctp_getsockopt_events+0x158>
    9564:	7c 60 1b 78 	mr      r0,r3
    9568:	48 00 00 60 	b       95c8 <sctp_getsockopt_events+0x1c0>
	if ((unsigned long)to < TASK_SIZE) {
    956c:	81 21 00 14 	lwz     r9,20(r1)
    9570:	3c 00 bf ff 	lis     r0,-16385
    9574:	60 00 ff ff 	ori     r0,r0,65535
    9578:	7f 89 00 40 	cmplw   cr7,r9,r0
    957c:	41 9d 00 48 	bgt-    cr7,95c4 <sctp_getsockopt_events+0x1bc>
		over = (unsigned long)to + n - TASK_SIZE;
    9580:	81 21 00 14 	lwz     r9,20(r1)
    9584:	80 01 00 1c 	lwz     r0,28(r1)
    9588:	7c 09 02 14 	add     r0,r9,r0
    958c:	3d 60 40 00 	lis     r11,16384
    9590:	7c 00 5a 14 	add     r0,r0,r11
    9594:	90 01 00 20 	stw     r0,32(r1)
		return __copy_tofrom_user(to, (__force void __user *)from,
    9598:	81 21 00 1c 	lwz     r9,28(r1)
    959c:	80 01 00 20 	lwz     r0,32(r1)
    95a0:	7c 00 48 50 	subf    r0,r0,r9
    95a4:	80 61 00 14 	lwz     r3,20(r1)
    95a8:	80 81 00 18 	lwz     r4,24(r1)
    95ac:	7c 05 03 78 	mr      r5,r0
    95b0:	48 00 00 01 	bl      95b0 <sctp_getsockopt_events+0x1a8>
    95b4:	7c 69 1b 78 	mr      r9,r3
    95b8:	80 01 00 20 	lwz     r0,32(r1)
    95bc:	7c 09 02 14 	add     r0,r9,r0
    95c0:	48 00 00 08 	b       95c8 <sctp_getsockopt_events+0x1c0>
				n - over) + over;
	}
	return n;
    95c4:	80 01 00 1c 	lwz     r0,28(r1)
    95c8:	2f 80 00 00 	cmpwi   cr7,r0,0
    95cc:	41 9e 00 0c 	beq-    cr7,95d8 <sctp_getsockopt_events+0x1d0>
		return -EFAULT;
    95d0:	38 00 ff f2 	li      r0,-14
    95d4:	48 00 00 08 	b       95dc <sctp_getsockopt_events+0x1d4>
	return 0;
    95d8:	38 00 00 00 	li      r0,0
}
    95dc:	7c 03 03 78 	mr      r3,r0
    95e0:	80 01 00 44 	lwz     r0,68(r1)
    95e4:	7c 08 03 a6 	mtlr    r0
    95e8:	83 e1 00 3c 	lwz     r31,60(r1)
    95ec:	38 21 00 40 	addi    r1,r1,64
    95f0:	4e 80 00 20 	blr

000095f4 <sctp_getsockopt_autoclose>:
 * close of any associations should be performed.  The option expects an
 * integer defining the number of seconds of idle time before an
 * association is closed.
 */
static int sctp_getsockopt_autoclose(struct sock *sk, int len, char __user *optval, int __user *optlen)
{
    95f4:	94 21 ff b0 	stwu    r1,-80(r1)
    95f8:	7c 08 02 a6 	mflr    r0
    95fc:	90 01 00 54 	stw     r0,84(r1)
    9600:	93 e1 00 4c 	stw     r31,76(r1)
    9604:	90 61 00 38 	stw     r3,56(r1)
    9608:	90 81 00 3c 	stw     r4,60(r1)
    960c:	90 a1 00 40 	stw     r5,64(r1)
    9610:	90 c1 00 44 	stw     r6,68(r1)
    9614:	80 01 00 38 	lwz     r0,56(r1)
    9618:	90 01 00 10 	stw     r0,16(r1)
    961c:	38 00 00 02 	li      r0,2
    9620:	90 01 00 14 	stw     r0,20(r1)
    9624:	80 01 00 10 	lwz     r0,16(r1)
    9628:	90 01 00 18 	stw     r0,24(r1)
    962c:	80 01 00 18 	lwz     r0,24(r1)

/* Is a socket of this style? */
#define sctp_style(sk, style) __sctp_style((sk), (SCTP_SOCKET_##style))
static inline int __sctp_style(const struct sock *sk, sctp_socket_type_t style)
{
	return sctp_sk(sk)->type == style;
    9630:	7c 09 03 78 	mr      r9,r0
    9634:	80 09 01 c8 	lwz     r0,456(r9)
    9638:	81 21 00 14 	lwz     r9,20(r1)
    963c:	7f 89 00 00 	cmpw    cr7,r9,r0
    9640:	7c 00 00 26 	mfcr    r0
    9644:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
	/* Applicable to UDP-style socket only */
	if (sctp_style(sk, TCP))
    9648:	2f 80 00 00 	cmpwi   cr7,r0,0
    964c:	41 9e 00 0c 	beq-    cr7,9658 <sctp_getsockopt_autoclose+0x64>
		return -EOPNOTSUPP;
    9650:	38 00 ff a1 	li      r0,-95
    9654:	48 00 01 b8 	b       980c <sctp_getsockopt_autoclose+0x218>
	if (len < sizeof(int))
    9658:	80 01 00 3c 	lwz     r0,60(r1)
    965c:	2b 80 00 03 	cmplwi  cr7,r0,3
    9660:	41 9d 00 0c 	bgt-    cr7,966c <sctp_getsockopt_autoclose+0x78>
		return -EINVAL;
    9664:	38 00 ff ea 	li      r0,-22
    9668:	48 00 01 a4 	b       980c <sctp_getsockopt_autoclose+0x218>
	len = sizeof(int);
    966c:	38 00 00 04 	li      r0,4
    9670:	90 01 00 3c 	stw     r0,60(r1)
	if (put_user(len, optlen))
    9674:	38 00 ff f2 	li      r0,-14
    9678:	90 01 00 08 	stw     r0,8(r1)
    967c:	80 01 00 44 	lwz     r0,68(r1)
    9680:	90 01 00 0c 	stw     r0,12(r1)
    9684:	81 21 00 0c 	lwz     r9,12(r1)
    9688:	7c 40 13 78 	mr      r0,r2
    968c:	7c 0a 03 78 	mr      r10,r0
    9690:	80 0a 01 d4 	lwz     r0,468(r10)
    9694:	7f 89 00 40 	cmplw   cr7,r9,r0
    9698:	41 9d 00 28 	bgt-    cr7,96c0 <sctp_getsockopt_autoclose+0xcc>
    969c:	7c 40 13 78 	mr      r0,r2
    96a0:	7c 0b 03 78 	mr      r11,r0
    96a4:	81 2b 01 d4 	lwz     r9,468(r11)
    96a8:	80 01 00 0c 	lwz     r0,12(r1)
    96ac:	7c 00 48 50 	subf    r0,r0,r9
    96b0:	2b 80 00 02 	cmplwi  cr7,r0,2
    96b4:	40 9d 00 0c 	ble-    cr7,96c0 <sctp_getsockopt_autoclose+0xcc>
    96b8:	38 00 00 01 	li      r0,1
    96bc:	48 00 00 08 	b       96c4 <sctp_getsockopt_autoclose+0xd0>
    96c0:	38 00 00 00 	li      r0,0
    96c4:	2f 80 00 00 	cmpwi   cr7,r0,0
    96c8:	41 9e 00 28 	beq-    cr7,96f0 <sctp_getsockopt_autoclose+0xfc>
    96cc:	38 00 00 00 	li      r0,0
    96d0:	90 01 00 08 	stw     r0,8(r1)
    96d4:	80 01 00 3c 	lwz     r0,60(r1)
    96d8:	81 21 00 0c 	lwz     r9,12(r1)
    96dc:	81 61 00 08 	lwz     r11,8(r1)
    96e0:	7d 7f 5b 78 	mr      r31,r11
    96e4:	90 09 00 00 	stw     r0,0(r9)
    96e8:	93 e1 00 08 	stw     r31,8(r1)
    96ec:	60 00 00 00 	nop
    96f0:	80 01 00 08 	lwz     r0,8(r1)
    96f4:	2f 80 00 00 	cmpwi   cr7,r0,0
    96f8:	41 9e 00 0c 	beq-    cr7,9704 <sctp_getsockopt_autoclose+0x110>
		return -EFAULT;
    96fc:	38 00 ff f2 	li      r0,-14
    9700:	48 00 01 0c 	b       980c <sctp_getsockopt_autoclose+0x218>
    9704:	80 01 00 38 	lwz     r0,56(r1)
    9708:	90 01 00 1c 	stw     r0,28(r1)
    970c:	80 01 00 1c 	lwz     r0,28(r1)
	if (copy_to_user(optval, &sctp_sk(sk)->autoclose, sizeof(int)))
    9710:	30 00 02 e4 	addic   r0,r0,740
    9714:	81 21 00 40 	lwz     r9,64(r1)
    9718:	91 21 00 20 	stw     r9,32(r1)
    971c:	90 01 00 24 	stw     r0,36(r1)
    9720:	38 00 00 04 	li      r0,4
    9724:	90 01 00 28 	stw     r0,40(r1)
static inline unsigned long copy_to_user(void __user *to,
		const void *from, unsigned long n)
{
	unsigned long over;

	if (access_ok(VERIFY_WRITE, to, n))
    9728:	81 21 00 20 	lwz     r9,32(r1)
    972c:	7c 40 13 78 	mr      r0,r2
    9730:	7c 0a 03 78 	mr      r10,r0
    9734:	80 0a 01 d4 	lwz     r0,468(r10)
    9738:	7f 89 00 40 	cmplw   cr7,r9,r0
    973c:	41 9d 00 3c 	bgt-    cr7,9778 <sctp_getsockopt_autoclose+0x184>
    9740:	80 01 00 28 	lwz     r0,40(r1)
    9744:	2f 80 00 00 	cmpwi   cr7,r0,0
    9748:	41 9e 00 28 	beq-    cr7,9770 <sctp_getsockopt_autoclose+0x17c>
    974c:	80 01 00 28 	lwz     r0,40(r1)
    9750:	31 20 ff ff 	addic   r9,r0,-1
    9754:	7c 40 13 78 	mr      r0,r2
    9758:	7c 0a 03 78 	mr      r10,r0
    975c:	81 6a 01 d4 	lwz     r11,468(r10)
    9760:	80 01 00 20 	lwz     r0,32(r1)
    9764:	7c 00 58 50 	subf    r0,r0,r11
    9768:	7f 89 00 40 	cmplw   cr7,r9,r0
    976c:	41 9d 00 0c 	bgt-    cr7,9778 <sctp_getsockopt_autoclose+0x184>
    9770:	38 00 00 01 	li      r0,1
    9774:	48 00 00 08 	b       977c <sctp_getsockopt_autoclose+0x188>
    9778:	38 00 00 00 	li      r0,0
    977c:	2f 80 00 00 	cmpwi   cr7,r0,0
    9780:	41 9e 00 1c 	beq-    cr7,979c <sctp_getsockopt_autoclose+0x1a8>
		return __copy_tofrom_user(to, (__force void __user *)from, n);
    9784:	80 61 00 20 	lwz     r3,32(r1)
    9788:	80 81 00 24 	lwz     r4,36(r1)
    978c:	80 a1 00 28 	lwz     r5,40(r1)
    9790:	48 00 00 01 	bl      9790 <sctp_getsockopt_autoclose+0x19c>
    9794:	7c 60 1b 78 	mr      r0,r3
    9798:	48 00 00 60 	b       97f8 <sctp_getsockopt_autoclose+0x204>
	if ((unsigned long)to < TASK_SIZE) {
    979c:	81 21 00 20 	lwz     r9,32(r1)
    97a0:	3c 00 bf ff 	lis     r0,-16385
    97a4:	60 00 ff ff 	ori     r0,r0,65535
    97a8:	7f 89 00 40 	cmplw   cr7,r9,r0
    97ac:	41 9d 00 48 	bgt-    cr7,97f4 <sctp_getsockopt_autoclose+0x200>
		over = (unsigned long)to + n - TASK_SIZE;
    97b0:	81 21 00 20 	lwz     r9,32(r1)
    97b4:	80 01 00 28 	lwz     r0,40(r1)
    97b8:	7c 09 02 14 	add     r0,r9,r0
    97bc:	3d 60 40 00 	lis     r11,16384
    97c0:	7c 00 5a 14 	add     r0,r0,r11
    97c4:	90 01 00 2c 	stw     r0,44(r1)
		return __copy_tofrom_user(to, (__force void __user *)from,
    97c8:	81 21 00 28 	lwz     r9,40(r1)
    97cc:	80 01 00 2c 	lwz     r0,44(r1)
    97d0:	7c 00 48 50 	subf    r0,r0,r9
    97d4:	80 61 00 20 	lwz     r3,32(r1)
    97d8:	80 81 00 24 	lwz     r4,36(r1)
    97dc:	7c 05 03 78 	mr      r5,r0
    97e0:	48 00 00 01 	bl      97e0 <sctp_getsockopt_autoclose+0x1ec>
    97e4:	7c 69 1b 78 	mr      r9,r3
    97e8:	80 01 00 2c 	lwz     r0,44(r1)
    97ec:	7c 09 02 14 	add     r0,r9,r0
    97f0:	48 00 00 08 	b       97f8 <sctp_getsockopt_autoclose+0x204>
				n - over) + over;
	}
	return n;
    97f4:	80 01 00 28 	lwz     r0,40(r1)
    97f8:	2f 80 00 00 	cmpwi   cr7,r0,0
    97fc:	41 9e 00 0c 	beq-    cr7,9808 <sctp_getsockopt_autoclose+0x214>
		return -EFAULT;
    9800:	38 00 ff f2 	li      r0,-14
    9804:	48 00 00 08 	b       980c <sctp_getsockopt_autoclose+0x218>
	return 0;
    9808:	38 00 00 00 	li      r0,0
}
    980c:	7c 03 03 78 	mr      r3,r0
    9810:	80 01 00 54 	lwz     r0,84(r1)
    9814:	7c 08 03 a6 	mtlr    r0
    9818:	83 e1 00 4c 	lwz     r31,76(r1)
    981c:	38 21 00 50 	addi    r1,r1,80
    9820:	4e 80 00 20 	blr

00009824 <sctp_do_peeloff>:

/* Helper routine to branch off an association to a new socket.  */
SCTP_STATIC int sctp_do_peeloff(struct sctp_association *asoc,
				struct socket **sockp)
{
    9824:	94 21 ff d0 	stwu    r1,-48(r1)
    9828:	7c 08 02 a6 	mflr    r0
    982c:	90 01 00 34 	stw     r0,52(r1)
    9830:	90 61 00 28 	stw     r3,40(r1)
    9834:	90 81 00 2c 	stw     r4,44(r1)
	struct sock *sk = asoc->base.sk;
    9838:	80 01 00 28 	lwz     r0,40(r1)
    983c:	7c 09 03 78 	mr      r9,r0
    9840:	80 09 00 18 	lwz     r0,24(r9)
    9844:	90 01 00 08 	stw     r0,8(r1)
	struct socket *sock;
	struct sctp_af *af;
	int err = 0;
    9848:	38 00 00 00 	li      r0,0
    984c:	90 01 00 0c 	stw     r0,12(r1)
    9850:	80 01 00 08 	lwz     r0,8(r1)
    9854:	90 01 00 14 	stw     r0,20(r1)
    9858:	38 00 00 00 	li      r0,0
    985c:	90 01 00 18 	stw     r0,24(r1)
    9860:	80 01 00 14 	lwz     r0,20(r1)
    9864:	90 01 00 1c 	stw     r0,28(r1)
    9868:	80 01 00 1c 	lwz     r0,28(r1)
    986c:	7c 0b 03 78 	mr      r11,r0
    9870:	80 0b 01 c8 	lwz     r0,456(r11)
    9874:	81 21 00 18 	lwz     r9,24(r1)
    9878:	7f 89 00 00 	cmpw    cr7,r9,r0
    987c:	7c 00 00 26 	mfcr    r0
    9880:	54 00 ff fe 	rlwinm  r0,r0,31,31,31

	/* An association cannot be branched off from an already peeled-off
	 * socket, nor is this supported for tcp style sockets.
	 */
	if (!sctp_style(sk, UDP))
    9884:	2f 80 00 00 	cmpwi   cr7,r0,0
    9888:	40 9e 00 0c 	bne-    cr7,9894 <sctp_do_peeloff+0x70>
		return -EINVAL;
    988c:	38 00 ff ea 	li      r0,-22
    9890:	48 00 00 d8 	b       9968 <sctp_do_peeloff+0x144>

	/* Create a new socket.  */
	err = sock_create(sk->sk_family, SOCK_SEQPACKET, IPPROTO_SCTP, &sock);
    9894:	80 01 00 08 	lwz     r0,8(r1)
    9898:	7c 09 03 78 	mr      r9,r0
    989c:	a0 09 00 0c 	lhz     r0,12(r9)
    98a0:	54 00 04 3e 	clrlwi  r0,r0,16
    98a4:	7c 09 03 78 	mr      r9,r0
    98a8:	38 01 00 20 	addi    r0,r1,32
    98ac:	7d 23 4b 78 	mr      r3,r9
    98b0:	38 80 00 05 	li      r4,5
    98b4:	38 a0 00 84 	li      r5,132
    98b8:	7c 06 03 78 	mr      r6,r0
    98bc:	48 00 00 01 	bl      98bc <sctp_do_peeloff+0x98>
    98c0:	90 61 00 0c 	stw     r3,12(r1)
	if (err < 0)
    98c4:	80 01 00 0c 	lwz     r0,12(r1)
    98c8:	2f 80 00 00 	cmpwi   cr7,r0,0
    98cc:	40 9c 00 0c 	bge-    cr7,98d8 <sctp_do_peeloff+0xb4>
		return err;
    98d0:	80 01 00 0c 	lwz     r0,12(r1)
    98d4:	48 00 00 94 	b       9968 <sctp_do_peeloff+0x144>

	sctp_copy_sock(sock->sk, sk, asoc);
    98d8:	80 01 00 20 	lwz     r0,32(r1)
    98dc:	7c 0b 03 78 	mr      r11,r0
    98e0:	80 0b 00 14 	lwz     r0,20(r11)
    98e4:	7c 03 03 78 	mr      r3,r0
    98e8:	80 81 00 08 	lwz     r4,8(r1)
    98ec:	80 a1 00 28 	lwz     r5,40(r1)
    98f0:	48 00 00 01 	bl      98f0 <sctp_do_peeloff+0xcc>

	/* Make peeled-off sockets more like 1-1 accepted sockets.
	 * Set the daddr and initialize id to something more random
	 */
	af = sctp_get_af_specific(asoc->peer.primary_addr.sa.sa_family);
    98f4:	80 01 00 28 	lwz     r0,40(r1)
    98f8:	7c 09 03 78 	mr      r9,r0
    98fc:	a0 09 00 f8 	lhz     r0,248(r9)
    9900:	54 00 04 3e 	clrlwi  r0,r0,16
    9904:	7c 03 03 78 	mr      r3,r0
    9908:	48 00 00 01 	bl      9908 <sctp_do_peeloff+0xe4>
    990c:	90 61 00 10 	stw     r3,16(r1)
	af->to_sk_daddr(&asoc->peer.primary_addr, sk);
    9910:	80 01 00 10 	lwz     r0,16(r1)
    9914:	7c 0b 03 78 	mr      r11,r0
    9918:	80 0b 00 38 	lwz     r0,56(r11)
    991c:	81 21 00 28 	lwz     r9,40(r1)
    9920:	39 29 00 f8 	addi    r9,r9,248
    9924:	7d 23 4b 78 	mr      r3,r9
    9928:	80 81 00 08 	lwz     r4,8(r1)
    992c:	7c 09 03 a6 	mtctr   r0
    9930:	4e 80 04 21 	bctrl

	/* Populate the fields of the newsk from the oldsk and migrate the
	 * asoc to the newsk.
	 */
	sctp_sock_migrate(sk, sock->sk, asoc, SCTP_SOCKET_UDP_HIGH_BANDWIDTH);
    9934:	80 01 00 20 	lwz     r0,32(r1)
    9938:	7c 09 03 78 	mr      r9,r0
    993c:	80 09 00 14 	lwz     r0,20(r9)
    9940:	80 61 00 08 	lwz     r3,8(r1)
    9944:	7c 04 03 78 	mr      r4,r0
    9948:	80 a1 00 28 	lwz     r5,40(r1)
    994c:	38 c0 00 01 	li      r6,1
    9950:	48 00 90 c1 	bl      12a10 <sctp_sock_migrate>

	*sockp = sock;
    9954:	81 21 00 20 	lwz     r9,32(r1)
    9958:	80 01 00 2c 	lwz     r0,44(r1)
    995c:	7c 0b 03 78 	mr      r11,r0
    9960:	91 2b 00 00 	stw     r9,0(r11)

	return err;
    9964:	80 01 00 0c 	lwz     r0,12(r1)
}
    9968:	7c 03 03 78 	mr      r3,r0
    996c:	80 01 00 34 	lwz     r0,52(r1)
    9970:	7c 08 03 a6 	mtlr    r0
    9974:	38 21 00 30 	addi    r1,r1,48
    9978:	4e 80 00 20 	blr

0000997c <sctp_getsockopt_peeloff>:

static int sctp_getsockopt_peeloff(struct sock *sk, int len, char __user *optval, int __user *optlen)
{
    997c:	94 21 ff a0 	stwu    r1,-96(r1)
    9980:	7c 08 02 a6 	mflr    r0
    9984:	90 01 00 64 	stw     r0,100(r1)
    9988:	93 e1 00 5c 	stw     r31,92(r1)
    998c:	90 61 00 48 	stw     r3,72(r1)
    9990:	90 81 00 4c 	stw     r4,76(r1)
    9994:	90 a1 00 50 	stw     r5,80(r1)
    9998:	90 c1 00 54 	stw     r6,84(r1)
	sctp_peeloff_arg_t peeloff;
	struct socket *newsock;
	int retval = 0;
    999c:	38 00 00 00 	li      r0,0
    99a0:	90 01 00 08 	stw     r0,8(r1)
	struct sctp_association *asoc;

	if (len < sizeof(sctp_peeloff_arg_t))
    99a4:	80 01 00 4c 	lwz     r0,76(r1)
    99a8:	2b 80 00 07 	cmplwi  cr7,r0,7
    99ac:	41 9d 00 0c 	bgt-    cr7,99b8 <sctp_getsockopt_peeloff+0x3c>
		return -EINVAL;
    99b0:	38 00 ff ea 	li      r0,-22
    99b4:	48 00 03 1c 	b       9cd0 <sctp_getsockopt_peeloff+0x354>
	len = sizeof(sctp_peeloff_arg_t);
    99b8:	38 00 00 08 	li      r0,8
    99bc:	90 01 00 4c 	stw     r0,76(r1)
	if (copy_from_user(&peeloff, optval, len))
    99c0:	80 01 00 4c 	lwz     r0,76(r1)
    99c4:	39 21 00 38 	addi    r9,r1,56
    99c8:	91 21 00 18 	stw     r9,24(r1)
    99cc:	81 21 00 50 	lwz     r9,80(r1)
    99d0:	91 21 00 1c 	stw     r9,28(r1)
    99d4:	90 01 00 20 	stw     r0,32(r1)
static inline unsigned long copy_from_user(void *to,
		const void __user *from, unsigned long n)
{
	unsigned long over;

	if (access_ok(VERIFY_READ, from, n))
    99d8:	81 21 00 1c 	lwz     r9,28(r1)
    99dc:	7c 40 13 78 	mr      r0,r2
    99e0:	7c 0a 03 78 	mr      r10,r0
    99e4:	80 0a 01 d4 	lwz     r0,468(r10)
    99e8:	7f 89 00 40 	cmplw   cr7,r9,r0
    99ec:	41 9d 00 3c 	bgt-    cr7,9a28 <sctp_getsockopt_peeloff+0xac>
    99f0:	80 01 00 20 	lwz     r0,32(r1)
    99f4:	2f 80 00 00 	cmpwi   cr7,r0,0
    99f8:	41 9e 00 28 	beq-    cr7,9a20 <sctp_getsockopt_peeloff+0xa4>
    99fc:	80 01 00 20 	lwz     r0,32(r1)
    9a00:	31 20 ff ff 	addic   r9,r0,-1
    9a04:	7c 40 13 78 	mr      r0,r2
    9a08:	7c 0a 03 78 	mr      r10,r0
    9a0c:	81 6a 01 d4 	lwz     r11,468(r10)
    9a10:	80 01 00 1c 	lwz     r0,28(r1)
    9a14:	7c 00 58 50 	subf    r0,r0,r11
    9a18:	7f 89 00 40 	cmplw   cr7,r9,r0
    9a1c:	41 9d 00 0c 	bgt-    cr7,9a28 <sctp_getsockopt_peeloff+0xac>
    9a20:	38 00 00 01 	li      r0,1
    9a24:	48 00 00 08 	b       9a2c <sctp_getsockopt_peeloff+0xb0>
    9a28:	38 00 00 00 	li      r0,0
    9a2c:	2f 80 00 00 	cmpwi   cr7,r0,0
    9a30:	41 9e 00 1c 	beq-    cr7,9a4c <sctp_getsockopt_peeloff+0xd0>
		return __copy_tofrom_user((__force void __user *)to, from, n);
    9a34:	80 61 00 18 	lwz     r3,24(r1)
    9a38:	80 81 00 1c 	lwz     r4,28(r1)
    9a3c:	80 a1 00 20 	lwz     r5,32(r1)
    9a40:	48 00 00 01 	bl      9a40 <sctp_getsockopt_peeloff+0xc4>
    9a44:	7c 60 1b 78 	mr      r0,r3
    9a48:	48 00 00 60 	b       9aa8 <sctp_getsockopt_peeloff+0x12c>
	if ((unsigned long)from < TASK_SIZE) {
    9a4c:	81 21 00 1c 	lwz     r9,28(r1)
    9a50:	3c 00 bf ff 	lis     r0,-16385
    9a54:	60 00 ff ff 	ori     r0,r0,65535
    9a58:	7f 89 00 40 	cmplw   cr7,r9,r0
    9a5c:	41 9d 00 48 	bgt-    cr7,9aa4 <sctp_getsockopt_peeloff+0x128>
		over = (unsigned long)from + n - TASK_SIZE;
    9a60:	81 21 00 1c 	lwz     r9,28(r1)
    9a64:	80 01 00 20 	lwz     r0,32(r1)
    9a68:	7c 09 02 14 	add     r0,r9,r0
    9a6c:	3d 60 40 00 	lis     r11,16384
    9a70:	7c 00 5a 14 	add     r0,r0,r11
    9a74:	90 01 00 24 	stw     r0,36(r1)
		return __copy_tofrom_user((__force void __user *)to, from,
    9a78:	81 21 00 20 	lwz     r9,32(r1)
    9a7c:	80 01 00 24 	lwz     r0,36(r1)
    9a80:	7c 00 48 50 	subf    r0,r0,r9
    9a84:	80 61 00 18 	lwz     r3,24(r1)
    9a88:	80 81 00 1c 	lwz     r4,28(r1)
    9a8c:	7c 05 03 78 	mr      r5,r0
    9a90:	48 00 00 01 	bl      9a90 <sctp_getsockopt_peeloff+0x114>
    9a94:	7c 69 1b 78 	mr      r9,r3
    9a98:	80 01 00 24 	lwz     r0,36(r1)
    9a9c:	7c 09 02 14 	add     r0,r9,r0
    9aa0:	48 00 00 08 	b       9aa8 <sctp_getsockopt_peeloff+0x12c>
				n - over) + over;
	}
	return n;
    9aa4:	80 01 00 20 	lwz     r0,32(r1)
    9aa8:	2f 80 00 00 	cmpwi   cr7,r0,0
    9aac:	41 9e 00 0c 	beq-    cr7,9ab8 <sctp_getsockopt_peeloff+0x13c>
		return -EFAULT;
    9ab0:	38 00 ff f2 	li      r0,-14
    9ab4:	48 00 02 1c 	b       9cd0 <sctp_getsockopt_peeloff+0x354>

	asoc = sctp_id2assoc(sk, peeloff.associd);
    9ab8:	80 01 00 38 	lwz     r0,56(r1)
    9abc:	80 61 00 48 	lwz     r3,72(r1)
    9ac0:	7c 04 03 78 	mr      r4,r0
    9ac4:	48 00 00 01 	bl      9ac4 <sctp_getsockopt_peeloff+0x148>
    9ac8:	90 61 00 10 	stw     r3,16(r1)
	if (!asoc) {
    9acc:	80 01 00 10 	lwz     r0,16(r1)
    9ad0:	2f 80 00 00 	cmpwi   cr7,r0,0
    9ad4:	40 9e 00 10 	bne-    cr7,9ae4 <sctp_getsockopt_peeloff+0x168>
		retval = -EINVAL;
    9ad8:	38 00 ff ea 	li      r0,-22
    9adc:	90 01 00 08 	stw     r0,8(r1)
		goto out;
    9ae0:	48 00 01 ec 	b       9ccc <sctp_getsockopt_peeloff+0x350>
	}

	SCTP_DEBUG_PRINTK("%s: sk: %p asoc: %p\n", __func__, sk, asoc);

	retval = sctp_do_peeloff(asoc, &newsock);
    9ae4:	38 01 00 40 	addi    r0,r1,64
    9ae8:	80 61 00 10 	lwz     r3,16(r1)
    9aec:	7c 04 03 78 	mr      r4,r0
    9af0:	4b ff fd 35 	bl      9824 <sctp_do_peeloff>
    9af4:	90 61 00 08 	stw     r3,8(r1)
	if (retval < 0)
    9af8:	80 01 00 08 	lwz     r0,8(r1)
    9afc:	2f 80 00 00 	cmpwi   cr7,r0,0
    9b00:	41 9c 01 c8 	blt-    cr7,9cc8 <sctp_getsockopt_peeloff+0x34c>
		goto out;

	/* Map the socket to an unused fd that can be returned to the user.  */
	retval = sock_map_fd(newsock, 0);
    9b04:	80 01 00 40 	lwz     r0,64(r1)
    9b08:	7c 03 03 78 	mr      r3,r0
    9b0c:	38 80 00 00 	li      r4,0
    9b10:	48 00 00 01 	bl      9b10 <sctp_getsockopt_peeloff+0x194>
    9b14:	90 61 00 08 	stw     r3,8(r1)
	if (retval < 0) {
    9b18:	80 01 00 08 	lwz     r0,8(r1)
    9b1c:	2f 80 00 00 	cmpwi   cr7,r0,0
    9b20:	40 9c 00 14 	bge-    cr7,9b34 <sctp_getsockopt_peeloff+0x1b8>
		sock_release(newsock);
    9b24:	80 01 00 40 	lwz     r0,64(r1)
    9b28:	7c 03 03 78 	mr      r3,r0
    9b2c:	48 00 00 01 	bl      9b2c <sctp_getsockopt_peeloff+0x1b0>
		goto out;
    9b30:	48 00 01 9c 	b       9ccc <sctp_getsockopt_peeloff+0x350>

	SCTP_DEBUG_PRINTK("%s: sk: %p asoc: %p newsk: %p sd: %d\n",
			  __func__, sk, asoc, newsock->sk, retval);

	/* Return the fd mapped to the new socket.  */
	peeloff.sd = retval;
    9b34:	80 01 00 08 	lwz     r0,8(r1)
    9b38:	90 01 00 3c 	stw     r0,60(r1)
	if (put_user(len, optlen))
    9b3c:	38 00 ff f2 	li      r0,-14
    9b40:	90 01 00 0c 	stw     r0,12(r1)
    9b44:	80 01 00 54 	lwz     r0,84(r1)
    9b48:	90 01 00 14 	stw     r0,20(r1)
    9b4c:	81 21 00 14 	lwz     r9,20(r1)
    9b50:	7c 40 13 78 	mr      r0,r2
    9b54:	7c 0a 03 78 	mr      r10,r0
    9b58:	80 0a 01 d4 	lwz     r0,468(r10)
    9b5c:	7f 89 00 40 	cmplw   cr7,r9,r0
    9b60:	41 9d 00 28 	bgt-    cr7,9b88 <sctp_getsockopt_peeloff+0x20c>
    9b64:	7c 40 13 78 	mr      r0,r2
    9b68:	7c 0b 03 78 	mr      r11,r0
    9b6c:	81 2b 01 d4 	lwz     r9,468(r11)
    9b70:	80 01 00 14 	lwz     r0,20(r1)
    9b74:	7c 00 48 50 	subf    r0,r0,r9
    9b78:	2b 80 00 02 	cmplwi  cr7,r0,2
    9b7c:	40 9d 00 0c 	ble-    cr7,9b88 <sctp_getsockopt_peeloff+0x20c>
    9b80:	38 00 00 01 	li      r0,1
    9b84:	48 00 00 08 	b       9b8c <sctp_getsockopt_peeloff+0x210>
    9b88:	38 00 00 00 	li      r0,0
    9b8c:	2f 80 00 00 	cmpwi   cr7,r0,0
    9b90:	41 9e 00 28 	beq-    cr7,9bb8 <sctp_getsockopt_peeloff+0x23c>
    9b94:	38 00 00 00 	li      r0,0
    9b98:	90 01 00 0c 	stw     r0,12(r1)
    9b9c:	80 01 00 4c 	lwz     r0,76(r1)
    9ba0:	81 21 00 14 	lwz     r9,20(r1)
    9ba4:	81 61 00 0c 	lwz     r11,12(r1)
    9ba8:	7d 7f 5b 78 	mr      r31,r11
    9bac:	90 09 00 00 	stw     r0,0(r9)
    9bb0:	93 e1 00 0c 	stw     r31,12(r1)
    9bb4:	60 00 00 00 	nop
    9bb8:	80 01 00 0c 	lwz     r0,12(r1)
    9bbc:	2f 80 00 00 	cmpwi   cr7,r0,0
    9bc0:	41 9e 00 0c 	beq-    cr7,9bcc <sctp_getsockopt_peeloff+0x250>
		return -EFAULT;
    9bc4:	38 00 ff f2 	li      r0,-14
    9bc8:	48 00 01 08 	b       9cd0 <sctp_getsockopt_peeloff+0x354>
	if (copy_to_user(optval, &peeloff, len))
    9bcc:	80 01 00 4c 	lwz     r0,76(r1)
    9bd0:	81 21 00 50 	lwz     r9,80(r1)
    9bd4:	91 21 00 28 	stw     r9,40(r1)
    9bd8:	39 21 00 38 	addi    r9,r1,56
    9bdc:	91 21 00 2c 	stw     r9,44(r1)
    9be0:	90 01 00 30 	stw     r0,48(r1)
static inline unsigned long copy_to_user(void __user *to,
		const void *from, unsigned long n)
{
	unsigned long over;

	if (access_ok(VERIFY_WRITE, to, n))
    9be4:	81 21 00 28 	lwz     r9,40(r1)
    9be8:	7c 40 13 78 	mr      r0,r2
    9bec:	7c 0a 03 78 	mr      r10,r0
    9bf0:	80 0a 01 d4 	lwz     r0,468(r10)
    9bf4:	7f 89 00 40 	cmplw   cr7,r9,r0
    9bf8:	41 9d 00 3c 	bgt-    cr7,9c34 <sctp_getsockopt_peeloff+0x2b8>
    9bfc:	80 01 00 30 	lwz     r0,48(r1)
    9c00:	2f 80 00 00 	cmpwi   cr7,r0,0
    9c04:	41 9e 00 28 	beq-    cr7,9c2c <sctp_getsockopt_peeloff+0x2b0>
    9c08:	80 01 00 30 	lwz     r0,48(r1)
    9c0c:	31 20 ff ff 	addic   r9,r0,-1
    9c10:	7c 40 13 78 	mr      r0,r2
    9c14:	7c 0a 03 78 	mr      r10,r0
    9c18:	81 6a 01 d4 	lwz     r11,468(r10)
    9c1c:	80 01 00 28 	lwz     r0,40(r1)
    9c20:	7c 00 58 50 	subf    r0,r0,r11
    9c24:	7f 89 00 40 	cmplw   cr7,r9,r0
    9c28:	41 9d 00 0c 	bgt-    cr7,9c34 <sctp_getsockopt_peeloff+0x2b8>
    9c2c:	38 00 00 01 	li      r0,1
    9c30:	48 00 00 08 	b       9c38 <sctp_getsockopt_peeloff+0x2bc>
    9c34:	38 00 00 00 	li      r0,0
    9c38:	2f 80 00 00 	cmpwi   cr7,r0,0
    9c3c:	41 9e 00 1c 	beq-    cr7,9c58 <sctp_getsockopt_peeloff+0x2dc>
		return __copy_tofrom_user(to, (__force void __user *)from, n);
    9c40:	80 61 00 28 	lwz     r3,40(r1)
    9c44:	80 81 00 2c 	lwz     r4,44(r1)
    9c48:	80 a1 00 30 	lwz     r5,48(r1)
    9c4c:	48 00 00 01 	bl      9c4c <sctp_getsockopt_peeloff+0x2d0>
    9c50:	7c 60 1b 78 	mr      r0,r3
    9c54:	48 00 00 60 	b       9cb4 <sctp_getsockopt_peeloff+0x338>
	if ((unsigned long)to < TASK_SIZE) {
    9c58:	81 21 00 28 	lwz     r9,40(r1)
    9c5c:	3c 00 bf ff 	lis     r0,-16385
    9c60:	60 00 ff ff 	ori     r0,r0,65535
    9c64:	7f 89 00 40 	cmplw   cr7,r9,r0
    9c68:	41 9d 00 48 	bgt-    cr7,9cb0 <sctp_getsockopt_peeloff+0x334>
		over = (unsigned long)to + n - TASK_SIZE;
    9c6c:	81 21 00 28 	lwz     r9,40(r1)
    9c70:	80 01 00 30 	lwz     r0,48(r1)
    9c74:	7c 09 02 14 	add     r0,r9,r0
    9c78:	3d 60 40 00 	lis     r11,16384
    9c7c:	7c 00 5a 14 	add     r0,r0,r11
    9c80:	90 01 00 34 	stw     r0,52(r1)
		return __copy_tofrom_user(to, (__force void __user *)from,
    9c84:	81 21 00 30 	lwz     r9,48(r1)
    9c88:	80 01 00 34 	lwz     r0,52(r1)
    9c8c:	7c 00 48 50 	subf    r0,r0,r9
    9c90:	80 61 00 28 	lwz     r3,40(r1)
    9c94:	80 81 00 2c 	lwz     r4,44(r1)
    9c98:	7c 05 03 78 	mr      r5,r0
    9c9c:	48 00 00 01 	bl      9c9c <sctp_getsockopt_peeloff+0x320>
    9ca0:	7c 69 1b 78 	mr      r9,r3
    9ca4:	80 01 00 34 	lwz     r0,52(r1)
    9ca8:	7c 09 02 14 	add     r0,r9,r0
    9cac:	48 00 00 08 	b       9cb4 <sctp_getsockopt_peeloff+0x338>
				n - over) + over;
	}
	return n;
    9cb0:	80 01 00 30 	lwz     r0,48(r1)
    9cb4:	2f 80 00 00 	cmpwi   cr7,r0,0
    9cb8:	41 9e 00 14 	beq-    cr7,9ccc <sctp_getsockopt_peeloff+0x350>
		retval = -EFAULT;
    9cbc:	38 00 ff f2 	li      r0,-14
    9cc0:	90 01 00 08 	stw     r0,8(r1)
    9cc4:	48 00 00 08 	b       9ccc <sctp_getsockopt_peeloff+0x350>

	SCTP_DEBUG_PRINTK("%s: sk: %p asoc: %p\n", __func__, sk, asoc);

	retval = sctp_do_peeloff(asoc, &newsock);
	if (retval < 0)
		goto out;
    9cc8:	60 00 00 00 	nop
		return -EFAULT;
	if (copy_to_user(optval, &peeloff, len))
		retval = -EFAULT;

out:
	return retval;
    9ccc:	80 01 00 08 	lwz     r0,8(r1)
}
    9cd0:	7c 03 03 78 	mr      r3,r0
    9cd4:	80 01 00 64 	lwz     r0,100(r1)
    9cd8:	7c 08 03 a6 	mtlr    r0
    9cdc:	83 e1 00 5c 	lwz     r31,92(r1)
    9ce0:	38 21 00 60 	addi    r1,r1,96
    9ce4:	4e 80 00 20 	blr

00009ce8 <sctp_getsockopt_peer_addr_params>:
 *                     SPP_SACKDELAY_ENABLE, setting both will have undefined
 *                     results.
 */
static int sctp_getsockopt_peer_addr_params(struct sock *sk, int len,
					    char __user *optval, int __user *optlen)
{
    9ce8:	94 21 ff 00 	stwu    r1,-256(r1)
    9cec:	7c 08 02 a6 	mflr    r0
    9cf0:	90 01 01 04 	stw     r0,260(r1)
    9cf4:	93 e1 00 fc 	stw     r31,252(r1)
    9cf8:	90 61 00 e8 	stw     r3,232(r1)
    9cfc:	90 81 00 ec 	stw     r4,236(r1)
    9d00:	90 a1 00 f0 	stw     r5,240(r1)
    9d04:	90 c1 00 f4 	stw     r6,244(r1)
	struct sctp_paddrparams  params;
	struct sctp_transport   *trans = NULL;
    9d08:	38 00 00 00 	li      r0,0
    9d0c:	90 01 00 08 	stw     r0,8(r1)
	struct sctp_association *asoc = NULL;
    9d10:	38 00 00 00 	li      r0,0
    9d14:	90 01 00 10 	stw     r0,16(r1)
    9d18:	80 01 00 e8 	lwz     r0,232(r1)
    9d1c:	90 01 00 1c 	stw     r0,28(r1)
    9d20:	80 01 00 1c 	lwz     r0,28(r1)
	struct sctp_sock        *sp = sctp_sk(sk);
    9d24:	90 01 00 14 	stw     r0,20(r1)

	if (len < sizeof(struct sctp_paddrparams))
    9d28:	80 01 00 ec 	lwz     r0,236(r1)
    9d2c:	2b 80 00 97 	cmplwi  cr7,r0,151
    9d30:	41 9d 00 0c 	bgt-    cr7,9d3c <sctp_getsockopt_peer_addr_params+0x54>
		return -EINVAL;
    9d34:	38 00 ff ea 	li      r0,-22
    9d38:	48 00 04 a0 	b       a1d8 <sctp_getsockopt_peer_addr_params+0x4f0>
	len = sizeof(struct sctp_paddrparams);
    9d3c:	38 00 00 98 	li      r0,152
    9d40:	90 01 00 ec 	stw     r0,236(r1)
	if (copy_from_user(&params, optval, len))
    9d44:	80 01 00 ec 	lwz     r0,236(r1)
    9d48:	39 21 00 4c 	addi    r9,r1,76
    9d4c:	91 21 00 20 	stw     r9,32(r1)
    9d50:	81 21 00 f0 	lwz     r9,240(r1)
    9d54:	91 21 00 24 	stw     r9,36(r1)
    9d58:	90 01 00 28 	stw     r0,40(r1)
static inline unsigned long copy_from_user(void *to,
		const void __user *from, unsigned long n)
{
	unsigned long over;

	if (access_ok(VERIFY_READ, from, n))
    9d5c:	81 21 00 24 	lwz     r9,36(r1)
    9d60:	7c 40 13 78 	mr      r0,r2
    9d64:	7c 0a 03 78 	mr      r10,r0
    9d68:	80 0a 01 d4 	lwz     r0,468(r10)
    9d6c:	7f 89 00 40 	cmplw   cr7,r9,r0
    9d70:	41 9d 00 3c 	bgt-    cr7,9dac <sctp_getsockopt_peer_addr_params+0xc4>
    9d74:	80 01 00 28 	lwz     r0,40(r1)
    9d78:	2f 80 00 00 	cmpwi   cr7,r0,0
    9d7c:	41 9e 00 28 	beq-    cr7,9da4 <sctp_getsockopt_peer_addr_params+0xbc>
    9d80:	80 01 00 28 	lwz     r0,40(r1)
    9d84:	31 20 ff ff 	addic   r9,r0,-1
    9d88:	7c 40 13 78 	mr      r0,r2
    9d8c:	7c 0a 03 78 	mr      r10,r0
    9d90:	81 6a 01 d4 	lwz     r11,468(r10)
    9d94:	80 01 00 24 	lwz     r0,36(r1)
    9d98:	7c 00 58 50 	subf    r0,r0,r11
    9d9c:	7f 89 00 40 	cmplw   cr7,r9,r0
    9da0:	41 9d 00 0c 	bgt-    cr7,9dac <sctp_getsockopt_peer_addr_params+0xc4>
    9da4:	38 00 00 01 	li      r0,1
    9da8:	48 00 00 08 	b       9db0 <sctp_getsockopt_peer_addr_params+0xc8>
    9dac:	38 00 00 00 	li      r0,0
    9db0:	2f 80 00 00 	cmpwi   cr7,r0,0
    9db4:	41 9e 00 1c 	beq-    cr7,9dd0 <sctp_getsockopt_peer_addr_params+0xe8>
		return __copy_tofrom_user((__force void __user *)to, from, n);
    9db8:	80 61 00 20 	lwz     r3,32(r1)
    9dbc:	80 81 00 24 	lwz     r4,36(r1)
    9dc0:	80 a1 00 28 	lwz     r5,40(r1)
    9dc4:	48 00 00 01 	bl      9dc4 <sctp_getsockopt_peer_addr_params+0xdc>
    9dc8:	7c 60 1b 78 	mr      r0,r3
    9dcc:	48 00 00 60 	b       9e2c <sctp_getsockopt_peer_addr_params+0x144>
	if ((unsigned long)from < TASK_SIZE) {
    9dd0:	81 21 00 24 	lwz     r9,36(r1)
    9dd4:	3c 00 bf ff 	lis     r0,-16385
    9dd8:	60 00 ff ff 	ori     r0,r0,65535
    9ddc:	7f 89 00 40 	cmplw   cr7,r9,r0
    9de0:	41 9d 00 48 	bgt-    cr7,9e28 <sctp_getsockopt_peer_addr_params+0x140>
		over = (unsigned long)from + n - TASK_SIZE;
    9de4:	81 21 00 24 	lwz     r9,36(r1)
    9de8:	80 01 00 28 	lwz     r0,40(r1)
    9dec:	7c 09 02 14 	add     r0,r9,r0
    9df0:	3d 60 40 00 	lis     r11,16384
    9df4:	7c 00 5a 14 	add     r0,r0,r11
    9df8:	90 01 00 2c 	stw     r0,44(r1)
		return __copy_tofrom_user((__force void __user *)to, from,
    9dfc:	81 21 00 28 	lwz     r9,40(r1)
    9e00:	80 01 00 2c 	lwz     r0,44(r1)
    9e04:	7c 00 48 50 	subf    r0,r0,r9
    9e08:	80 61 00 20 	lwz     r3,32(r1)
    9e0c:	80 81 00 24 	lwz     r4,36(r1)
    9e10:	7c 05 03 78 	mr      r5,r0
    9e14:	48 00 00 01 	bl      9e14 <sctp_getsockopt_peer_addr_params+0x12c>
    9e18:	7c 69 1b 78 	mr      r9,r3
    9e1c:	80 01 00 2c 	lwz     r0,44(r1)
    9e20:	7c 09 02 14 	add     r0,r9,r0
    9e24:	48 00 00 08 	b       9e2c <sctp_getsockopt_peer_addr_params+0x144>
				n - over) + over;
	}
	return n;
    9e28:	80 01 00 28 	lwz     r0,40(r1)
    9e2c:	2f 80 00 00 	cmpwi   cr7,r0,0
    9e30:	41 9e 00 0c 	beq-    cr7,9e3c <sctp_getsockopt_peer_addr_params+0x154>
		return -EFAULT;
    9e34:	38 00 ff f2 	li      r0,-14
    9e38:	48 00 03 a0 	b       a1d8 <sctp_getsockopt_peer_addr_params+0x4f0>

	/* If an address other than INADDR_ANY is specified, and
	 * no transport is found, then the request is invalid.
	 */
	if (!sctp_is_any(sk, ( union sctp_addr *)&params.spp_address)) {
    9e3c:	38 01 00 4c 	addi    r0,r1,76
    9e40:	30 00 00 04 	addic   r0,r0,4
    9e44:	80 61 00 e8 	lwz     r3,232(r1)
    9e48:	7c 04 03 78 	mr      r4,r0
    9e4c:	48 00 00 01 	bl      9e4c <sctp_getsockopt_peer_addr_params+0x164>
    9e50:	7c 60 1b 78 	mr      r0,r3
    9e54:	2f 80 00 00 	cmpwi   cr7,r0,0
    9e58:	40 9e 00 38 	bne-    cr7,9e90 <sctp_getsockopt_peer_addr_params+0x1a8>
		trans = sctp_addr_id2transport(sk, &params.spp_address,
    9e5c:	80 01 00 4c 	lwz     r0,76(r1)
    9e60:	39 21 00 4c 	addi    r9,r1,76
    9e64:	39 29 00 04 	addi    r9,r9,4
    9e68:	80 61 00 e8 	lwz     r3,232(r1)
    9e6c:	7d 24 4b 78 	mr      r4,r9
    9e70:	7c 05 03 78 	mr      r5,r0
    9e74:	4b ff 63 6d 	bl      1e0 <sctp_addr_id2transport>
    9e78:	90 61 00 08 	stw     r3,8(r1)
					       params.spp_assoc_id);
		if (!trans) {
    9e7c:	80 01 00 08 	lwz     r0,8(r1)
    9e80:	2f 80 00 00 	cmpwi   cr7,r0,0
    9e84:	40 9e 00 0c 	bne-    cr7,9e90 <sctp_getsockopt_peer_addr_params+0x1a8>
			SCTP_DEBUG_PRINTK("Failed no transport\n");
			return -EINVAL;
    9e88:	38 00 ff ea 	li      r0,-22
    9e8c:	48 00 03 4c 	b       a1d8 <sctp_getsockopt_peer_addr_params+0x4f0>

	/* Get association, if assoc_id != 0 and the socket is a one
	 * to many style socket, and an association was not found, then
	 * the id was invalid.
	 */
	asoc = sctp_id2assoc(sk, params.spp_assoc_id);
    9e90:	80 01 00 4c 	lwz     r0,76(r1)
    9e94:	80 61 00 e8 	lwz     r3,232(r1)
    9e98:	7c 04 03 78 	mr      r4,r0
    9e9c:	48 00 00 01 	bl      9e9c <sctp_getsockopt_peer_addr_params+0x1b4>
    9ea0:	90 61 00 10 	stw     r3,16(r1)
	if (!asoc && params.spp_assoc_id && sctp_style(sk, UDP)) {
    9ea4:	80 01 00 10 	lwz     r0,16(r1)
    9ea8:	2f 80 00 00 	cmpwi   cr7,r0,0
    9eac:	40 9e 00 54 	bne-    cr7,9f00 <sctp_getsockopt_peer_addr_params+0x218>
    9eb0:	80 01 00 4c 	lwz     r0,76(r1)
    9eb4:	2f 80 00 00 	cmpwi   cr7,r0,0
    9eb8:	41 9e 00 48 	beq-    cr7,9f00 <sctp_getsockopt_peer_addr_params+0x218>
    9ebc:	80 01 00 e8 	lwz     r0,232(r1)
    9ec0:	90 01 00 30 	stw     r0,48(r1)
    9ec4:	38 00 00 00 	li      r0,0
    9ec8:	90 01 00 34 	stw     r0,52(r1)
    9ecc:	80 01 00 30 	lwz     r0,48(r1)
    9ed0:	90 01 00 38 	stw     r0,56(r1)
    9ed4:	80 01 00 38 	lwz     r0,56(r1)
    9ed8:	7c 09 03 78 	mr      r9,r0
    9edc:	80 09 01 c8 	lwz     r0,456(r9)
    9ee0:	81 21 00 34 	lwz     r9,52(r1)
    9ee4:	7f 89 00 00 	cmpw    cr7,r9,r0
    9ee8:	7c 00 00 26 	mfcr    r0
    9eec:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
    9ef0:	2f 80 00 00 	cmpwi   cr7,r0,0
    9ef4:	41 9e 00 0c 	beq-    cr7,9f00 <sctp_getsockopt_peer_addr_params+0x218>
		SCTP_DEBUG_PRINTK("Failed no association\n");
		return -EINVAL;
    9ef8:	38 00 ff ea 	li      r0,-22
    9efc:	48 00 02 dc 	b       a1d8 <sctp_getsockopt_peer_addr_params+0x4f0>
	}

	if (trans) {
    9f00:	80 01 00 08 	lwz     r0,8(r1)
    9f04:	2f 80 00 00 	cmpwi   cr7,r0,0
    9f08:	41 9e 00 74 	beq-    cr7,9f7c <sctp_getsockopt_peer_addr_params+0x294>
		/* Fetch transport values. */
		params.spp_hbinterval = jiffies_to_msecs(trans->hbinterval);
    9f0c:	80 01 00 08 	lwz     r0,8(r1)
    9f10:	7c 0a 03 78 	mr      r10,r0
    9f14:	80 0a 00 78 	lwz     r0,120(r10)
    9f18:	7c 03 03 78 	mr      r3,r0
    9f1c:	48 00 00 01 	bl      9f1c <sctp_getsockopt_peer_addr_params+0x234>
    9f20:	7c 60 1b 78 	mr      r0,r3
    9f24:	90 01 00 d0 	stw     r0,208(r1)
		params.spp_pathmtu    = trans->pathmtu;
    9f28:	80 01 00 08 	lwz     r0,8(r1)
    9f2c:	7c 0b 03 78 	mr      r11,r0
    9f30:	80 0b 00 90 	lwz     r0,144(r11)
    9f34:	90 01 00 d6 	stw     r0,214(r1)
		params.spp_pathmaxrxt = trans->pathmaxrxt;
    9f38:	80 01 00 08 	lwz     r0,8(r1)
    9f3c:	7c 09 03 78 	mr      r9,r0
    9f40:	a0 09 00 8c 	lhz     r0,140(r9)
    9f44:	54 00 04 3e 	clrlwi  r0,r0,16
    9f48:	b0 01 00 d4 	sth     r0,212(r1)
		params.spp_sackdelay  = jiffies_to_msecs(trans->sackdelay);
    9f4c:	80 01 00 08 	lwz     r0,8(r1)
    9f50:	7c 0a 03 78 	mr      r10,r0
    9f54:	80 0a 00 7c 	lwz     r0,124(r10)
    9f58:	7c 03 03 78 	mr      r3,r0
    9f5c:	48 00 00 01 	bl      9f5c <sctp_getsockopt_peer_addr_params+0x274>
    9f60:	7c 60 1b 78 	mr      r0,r3
    9f64:	90 01 00 da 	stw     r0,218(r1)

		/*draft-11 doesn't say what to return in spp_flags*/
		params.spp_flags      = trans->param_flags;
    9f68:	80 01 00 08 	lwz     r0,8(r1)
    9f6c:	7c 0b 03 78 	mr      r11,r0
    9f70:	80 0b 00 94 	lwz     r0,148(r11)
    9f74:	90 01 00 de 	stw     r0,222(r1)
    9f78:	48 00 00 d4 	b       a04c <sctp_getsockopt_peer_addr_params+0x364>
	} else if (asoc) {
    9f7c:	80 01 00 10 	lwz     r0,16(r1)
    9f80:	2f 80 00 00 	cmpwi   cr7,r0,0
    9f84:	41 9e 00 74 	beq-    cr7,9ff8 <sctp_getsockopt_peer_addr_params+0x310>
		/* Fetch association values. */
		params.spp_hbinterval = jiffies_to_msecs(asoc->hbinterval);
    9f88:	80 01 00 10 	lwz     r0,16(r1)
    9f8c:	7c 09 03 78 	mr      r9,r0
    9f90:	80 09 01 e4 	lwz     r0,484(r9)
    9f94:	7c 03 03 78 	mr      r3,r0
    9f98:	48 00 00 01 	bl      9f98 <sctp_getsockopt_peer_addr_params+0x2b0>
    9f9c:	7c 60 1b 78 	mr      r0,r3
    9fa0:	90 01 00 d0 	stw     r0,208(r1)
		params.spp_pathmtu    = asoc->pathmtu;
    9fa4:	80 01 00 10 	lwz     r0,16(r1)
    9fa8:	7c 0a 03 78 	mr      r10,r0
    9fac:	80 0a 01 ec 	lwz     r0,492(r10)
    9fb0:	90 01 00 d6 	stw     r0,214(r1)
		params.spp_pathmaxrxt = asoc->pathmaxrxt;
    9fb4:	80 01 00 10 	lwz     r0,16(r1)
    9fb8:	7c 0b 03 78 	mr      r11,r0
    9fbc:	a0 0b 01 e8 	lhz     r0,488(r11)
    9fc0:	54 00 04 3e 	clrlwi  r0,r0,16
    9fc4:	b0 01 00 d4 	sth     r0,212(r1)
		params.spp_sackdelay  = jiffies_to_msecs(asoc->sackdelay);
    9fc8:	80 01 00 10 	lwz     r0,16(r1)
    9fcc:	7c 09 03 78 	mr      r9,r0
    9fd0:	80 09 01 f4 	lwz     r0,500(r9)
    9fd4:	7c 03 03 78 	mr      r3,r0
    9fd8:	48 00 00 01 	bl      9fd8 <sctp_getsockopt_peer_addr_params+0x2f0>
    9fdc:	7c 60 1b 78 	mr      r0,r3
    9fe0:	90 01 00 da 	stw     r0,218(r1)

		/*draft-11 doesn't say what to return in spp_flags*/
		params.spp_flags      = asoc->param_flags;
    9fe4:	80 01 00 10 	lwz     r0,16(r1)
    9fe8:	7c 0a 03 78 	mr      r10,r0
    9fec:	80 0a 01 f0 	lwz     r0,496(r10)
    9ff0:	90 01 00 de 	stw     r0,222(r1)
    9ff4:	48 00 00 58 	b       a04c <sctp_getsockopt_peer_addr_params+0x364>
	} else {
		/* Fetch socket values. */
		params.spp_hbinterval = sp->hbinterval;
    9ff8:	80 01 00 14 	lwz     r0,20(r1)
    9ffc:	7c 0b 03 78 	mr      r11,r0
    a000:	80 0b 01 f8 	lwz     r0,504(r11)
    a004:	90 01 00 d0 	stw     r0,208(r1)
		params.spp_pathmtu    = sp->pathmtu;
    a008:	80 01 00 14 	lwz     r0,20(r1)
    a00c:	7c 09 03 78 	mr      r9,r0
    a010:	80 09 02 00 	lwz     r0,512(r9)
    a014:	90 01 00 d6 	stw     r0,214(r1)
		params.spp_sackdelay  = sp->sackdelay;
    a018:	80 01 00 14 	lwz     r0,20(r1)
    a01c:	7c 0a 03 78 	mr      r10,r0
    a020:	80 0a 02 04 	lwz     r0,516(r10)
    a024:	90 01 00 da 	stw     r0,218(r1)
		params.spp_pathmaxrxt = sp->pathmaxrxt;
    a028:	80 01 00 14 	lwz     r0,20(r1)
    a02c:	7c 0b 03 78 	mr      r11,r0
    a030:	a0 0b 01 fc 	lhz     r0,508(r11)
    a034:	54 00 04 3e 	clrlwi  r0,r0,16
    a038:	b0 01 00 d4 	sth     r0,212(r1)

		/*draft-11 doesn't say what to return in spp_flags*/
		params.spp_flags      = sp->param_flags;
    a03c:	80 01 00 14 	lwz     r0,20(r1)
    a040:	7c 09 03 78 	mr      r9,r0
    a044:	80 09 02 0c 	lwz     r0,524(r9)
    a048:	90 01 00 de 	stw     r0,222(r1)
	}

	if (copy_to_user(optval, &params, len))
    a04c:	80 01 00 ec 	lwz     r0,236(r1)
    a050:	81 21 00 f0 	lwz     r9,240(r1)
    a054:	91 21 00 3c 	stw     r9,60(r1)
    a058:	39 21 00 4c 	addi    r9,r1,76
    a05c:	91 21 00 40 	stw     r9,64(r1)
    a060:	90 01 00 44 	stw     r0,68(r1)
static inline unsigned long copy_to_user(void __user *to,
		const void *from, unsigned long n)
{
	unsigned long over;

	if (access_ok(VERIFY_WRITE, to, n))
    a064:	81 21 00 3c 	lwz     r9,60(r1)
    a068:	7c 40 13 78 	mr      r0,r2
    a06c:	7c 0a 03 78 	mr      r10,r0
    a070:	80 0a 01 d4 	lwz     r0,468(r10)
    a074:	7f 89 00 40 	cmplw   cr7,r9,r0
    a078:	41 9d 00 3c 	bgt-    cr7,a0b4 <sctp_getsockopt_peer_addr_params+0x3cc>
    a07c:	80 01 00 44 	lwz     r0,68(r1)
    a080:	2f 80 00 00 	cmpwi   cr7,r0,0
    a084:	41 9e 00 28 	beq-    cr7,a0ac <sctp_getsockopt_peer_addr_params+0x3c4>
    a088:	80 01 00 44 	lwz     r0,68(r1)
    a08c:	31 20 ff ff 	addic   r9,r0,-1
    a090:	7c 40 13 78 	mr      r0,r2
    a094:	7c 0a 03 78 	mr      r10,r0
    a098:	81 6a 01 d4 	lwz     r11,468(r10)
    a09c:	80 01 00 3c 	lwz     r0,60(r1)
    a0a0:	7c 00 58 50 	subf    r0,r0,r11
    a0a4:	7f 89 00 40 	cmplw   cr7,r9,r0
    a0a8:	41 9d 00 0c 	bgt-    cr7,a0b4 <sctp_getsockopt_peer_addr_params+0x3cc>
    a0ac:	38 00 00 01 	li      r0,1
    a0b0:	48 00 00 08 	b       a0b8 <sctp_getsockopt_peer_addr_params+0x3d0>
    a0b4:	38 00 00 00 	li      r0,0
    a0b8:	2f 80 00 00 	cmpwi   cr7,r0,0
    a0bc:	41 9e 00 1c 	beq-    cr7,a0d8 <sctp_getsockopt_peer_addr_params+0x3f0>
		return __copy_tofrom_user(to, (__force void __user *)from, n);
    a0c0:	80 61 00 3c 	lwz     r3,60(r1)
    a0c4:	80 81 00 40 	lwz     r4,64(r1)
    a0c8:	80 a1 00 44 	lwz     r5,68(r1)
    a0cc:	48 00 00 01 	bl      a0cc <sctp_getsockopt_peer_addr_params+0x3e4>
    a0d0:	7c 60 1b 78 	mr      r0,r3
    a0d4:	48 00 00 60 	b       a134 <sctp_getsockopt_peer_addr_params+0x44c>
	if ((unsigned long)to < TASK_SIZE) {
    a0d8:	81 21 00 3c 	lwz     r9,60(r1)
    a0dc:	3c 00 bf ff 	lis     r0,-16385
    a0e0:	60 00 ff ff 	ori     r0,r0,65535
    a0e4:	7f 89 00 40 	cmplw   cr7,r9,r0
    a0e8:	41 9d 00 48 	bgt-    cr7,a130 <sctp_getsockopt_peer_addr_params+0x448>
		over = (unsigned long)to + n - TASK_SIZE;
    a0ec:	81 21 00 3c 	lwz     r9,60(r1)
    a0f0:	80 01 00 44 	lwz     r0,68(r1)
    a0f4:	7c 09 02 14 	add     r0,r9,r0
    a0f8:	3d 60 40 00 	lis     r11,16384
    a0fc:	7c 00 5a 14 	add     r0,r0,r11
    a100:	90 01 00 48 	stw     r0,72(r1)
		return __copy_tofrom_user(to, (__force void __user *)from,
    a104:	81 21 00 44 	lwz     r9,68(r1)
    a108:	80 01 00 48 	lwz     r0,72(r1)
    a10c:	7c 00 48 50 	subf    r0,r0,r9
    a110:	80 61 00 3c 	lwz     r3,60(r1)
    a114:	80 81 00 40 	lwz     r4,64(r1)
    a118:	7c 05 03 78 	mr      r5,r0
    a11c:	48 00 00 01 	bl      a11c <sctp_getsockopt_peer_addr_params+0x434>
    a120:	7c 69 1b 78 	mr      r9,r3
    a124:	80 01 00 48 	lwz     r0,72(r1)
    a128:	7c 09 02 14 	add     r0,r9,r0
    a12c:	48 00 00 08 	b       a134 <sctp_getsockopt_peer_addr_params+0x44c>
				n - over) + over;
	}
	return n;
    a130:	80 01 00 44 	lwz     r0,68(r1)
    a134:	2f 80 00 00 	cmpwi   cr7,r0,0
    a138:	41 9e 00 0c 	beq-    cr7,a144 <sctp_getsockopt_peer_addr_params+0x45c>
		return -EFAULT;
    a13c:	38 00 ff f2 	li      r0,-14
    a140:	48 00 00 98 	b       a1d8 <sctp_getsockopt_peer_addr_params+0x4f0>

	if (put_user(len, optlen))
    a144:	38 00 ff f2 	li      r0,-14
    a148:	90 01 00 0c 	stw     r0,12(r1)
    a14c:	80 01 00 f4 	lwz     r0,244(r1)
    a150:	90 01 00 18 	stw     r0,24(r1)
    a154:	81 21 00 18 	lwz     r9,24(r1)
    a158:	7c 40 13 78 	mr      r0,r2
    a15c:	7c 0a 03 78 	mr      r10,r0
    a160:	80 0a 01 d4 	lwz     r0,468(r10)
    a164:	7f 89 00 40 	cmplw   cr7,r9,r0
    a168:	41 9d 00 28 	bgt-    cr7,a190 <sctp_getsockopt_peer_addr_params+0x4a8>
    a16c:	7c 40 13 78 	mr      r0,r2
    a170:	7c 0b 03 78 	mr      r11,r0
    a174:	81 2b 01 d4 	lwz     r9,468(r11)
    a178:	80 01 00 18 	lwz     r0,24(r1)
    a17c:	7c 00 48 50 	subf    r0,r0,r9
    a180:	2b 80 00 02 	cmplwi  cr7,r0,2
    a184:	40 9d 00 0c 	ble-    cr7,a190 <sctp_getsockopt_peer_addr_params+0x4a8>
    a188:	38 00 00 01 	li      r0,1
    a18c:	48 00 00 08 	b       a194 <sctp_getsockopt_peer_addr_params+0x4ac>
    a190:	38 00 00 00 	li      r0,0
    a194:	2f 80 00 00 	cmpwi   cr7,r0,0
    a198:	41 9e 00 28 	beq-    cr7,a1c0 <sctp_getsockopt_peer_addr_params+0x4d8>
    a19c:	38 00 00 00 	li      r0,0
    a1a0:	90 01 00 0c 	stw     r0,12(r1)
    a1a4:	80 01 00 ec 	lwz     r0,236(r1)
    a1a8:	81 21 00 18 	lwz     r9,24(r1)
    a1ac:	81 61 00 0c 	lwz     r11,12(r1)
    a1b0:	7d 7f 5b 78 	mr      r31,r11
    a1b4:	90 09 00 00 	stw     r0,0(r9)
    a1b8:	93 e1 00 0c 	stw     r31,12(r1)
    a1bc:	60 00 00 00 	nop
    a1c0:	80 01 00 0c 	lwz     r0,12(r1)
    a1c4:	2f 80 00 00 	cmpwi   cr7,r0,0
    a1c8:	41 9e 00 0c 	beq-    cr7,a1d4 <sctp_getsockopt_peer_addr_params+0x4ec>
		return -EFAULT;
    a1cc:	38 00 ff f2 	li      r0,-14
    a1d0:	48 00 00 08 	b       a1d8 <sctp_getsockopt_peer_addr_params+0x4f0>

	return 0;
    a1d4:	38 00 00 00 	li      r0,0
}
    a1d8:	7c 03 03 78 	mr      r3,r0
    a1dc:	80 01 01 04 	lwz     r0,260(r1)
    a1e0:	7c 08 03 a6 	mtlr    r0
    a1e4:	83 e1 00 fc 	lwz     r31,252(r1)
    a1e8:	38 21 01 00 	addi    r1,r1,256
    a1ec:	4e 80 00 20 	blr

0000a1f0 <sctp_getsockopt_delayed_ack>:
 *    value to 1 will disable the delayed sack algorithm.
 */
static int sctp_getsockopt_delayed_ack(struct sock *sk, int len,
					    char __user *optval,
					    int __user *optlen)
{
    a1f0:	94 21 ff 80 	stwu    r1,-128(r1)
    a1f4:	7c 08 02 a6 	mflr    r0
    a1f8:	90 01 00 84 	stw     r0,132(r1)
    a1fc:	93 e1 00 7c 	stw     r31,124(r1)
    a200:	90 61 00 68 	stw     r3,104(r1)
    a204:	90 81 00 6c 	stw     r4,108(r1)
    a208:	90 a1 00 70 	stw     r5,112(r1)
    a20c:	90 c1 00 74 	stw     r6,116(r1)
	struct sctp_sack_info    params;
	struct sctp_association *asoc = NULL;
    a210:	38 00 00 00 	li      r0,0
    a214:	90 01 00 0c 	stw     r0,12(r1)
    a218:	80 01 00 68 	lwz     r0,104(r1)
    a21c:	90 01 00 18 	stw     r0,24(r1)
    a220:	80 01 00 18 	lwz     r0,24(r1)
	struct sctp_sock        *sp = sctp_sk(sk);
    a224:	90 01 00 10 	stw     r0,16(r1)

	if (len >= sizeof(struct sctp_sack_info)) {
    a228:	80 01 00 6c 	lwz     r0,108(r1)
    a22c:	2b 80 00 0b 	cmplwi  cr7,r0,11
    a230:	40 9d 01 04 	ble-    cr7,a334 <sctp_getsockopt_delayed_ack+0x144>
		len = sizeof(struct sctp_sack_info);
    a234:	38 00 00 0c 	li      r0,12
    a238:	90 01 00 6c 	stw     r0,108(r1)

		if (copy_from_user(&params, optval, len))
    a23c:	80 01 00 6c 	lwz     r0,108(r1)
    a240:	39 21 00 58 	addi    r9,r1,88
    a244:	91 21 00 1c 	stw     r9,28(r1)
    a248:	81 21 00 70 	lwz     r9,112(r1)
    a24c:	91 21 00 20 	stw     r9,32(r1)
    a250:	90 01 00 24 	stw     r0,36(r1)
static inline unsigned long copy_from_user(void *to,
		const void __user *from, unsigned long n)
{
	unsigned long over;

	if (access_ok(VERIFY_READ, from, n))
    a254:	81 21 00 20 	lwz     r9,32(r1)
    a258:	7c 40 13 78 	mr      r0,r2
    a25c:	7c 0a 03 78 	mr      r10,r0
    a260:	80 0a 01 d4 	lwz     r0,468(r10)
    a264:	7f 89 00 40 	cmplw   cr7,r9,r0
    a268:	41 9d 00 3c 	bgt-    cr7,a2a4 <sctp_getsockopt_delayed_ack+0xb4>
    a26c:	80 01 00 24 	lwz     r0,36(r1)
    a270:	2f 80 00 00 	cmpwi   cr7,r0,0
    a274:	41 9e 00 28 	beq-    cr7,a29c <sctp_getsockopt_delayed_ack+0xac>
    a278:	80 01 00 24 	lwz     r0,36(r1)
    a27c:	31 20 ff ff 	addic   r9,r0,-1
    a280:	7c 40 13 78 	mr      r0,r2
    a284:	7c 0a 03 78 	mr      r10,r0
    a288:	81 6a 01 d4 	lwz     r11,468(r10)
    a28c:	80 01 00 20 	lwz     r0,32(r1)
    a290:	7c 00 58 50 	subf    r0,r0,r11
    a294:	7f 89 00 40 	cmplw   cr7,r9,r0
    a298:	41 9d 00 0c 	bgt-    cr7,a2a4 <sctp_getsockopt_delayed_ack+0xb4>
    a29c:	38 00 00 01 	li      r0,1
    a2a0:	48 00 00 08 	b       a2a8 <sctp_getsockopt_delayed_ack+0xb8>
    a2a4:	38 00 00 00 	li      r0,0
    a2a8:	2f 80 00 00 	cmpwi   cr7,r0,0
    a2ac:	41 9e 00 1c 	beq-    cr7,a2c8 <sctp_getsockopt_delayed_ack+0xd8>
		return __copy_tofrom_user((__force void __user *)to, from, n);
    a2b0:	80 61 00 1c 	lwz     r3,28(r1)
    a2b4:	80 81 00 20 	lwz     r4,32(r1)
    a2b8:	80 a1 00 24 	lwz     r5,36(r1)
    a2bc:	48 00 00 01 	bl      a2bc <sctp_getsockopt_delayed_ack+0xcc>
    a2c0:	7c 60 1b 78 	mr      r0,r3
    a2c4:	48 00 00 60 	b       a324 <sctp_getsockopt_delayed_ack+0x134>
	if ((unsigned long)from < TASK_SIZE) {
    a2c8:	81 21 00 20 	lwz     r9,32(r1)
    a2cc:	3c 00 bf ff 	lis     r0,-16385
    a2d0:	60 00 ff ff 	ori     r0,r0,65535
    a2d4:	7f 89 00 40 	cmplw   cr7,r9,r0
    a2d8:	41 9d 00 48 	bgt-    cr7,a320 <sctp_getsockopt_delayed_ack+0x130>
		over = (unsigned long)from + n - TASK_SIZE;
    a2dc:	81 21 00 20 	lwz     r9,32(r1)
    a2e0:	80 01 00 24 	lwz     r0,36(r1)
    a2e4:	7c 09 02 14 	add     r0,r9,r0
    a2e8:	3d 60 40 00 	lis     r11,16384
    a2ec:	7c 00 5a 14 	add     r0,r0,r11
    a2f0:	90 01 00 28 	stw     r0,40(r1)
		return __copy_tofrom_user((__force void __user *)to, from,
    a2f4:	81 21 00 24 	lwz     r9,36(r1)
    a2f8:	80 01 00 28 	lwz     r0,40(r1)
    a2fc:	7c 00 48 50 	subf    r0,r0,r9
    a300:	80 61 00 1c 	lwz     r3,28(r1)
    a304:	80 81 00 20 	lwz     r4,32(r1)
    a308:	7c 05 03 78 	mr      r5,r0
    a30c:	48 00 00 01 	bl      a30c <sctp_getsockopt_delayed_ack+0x11c>
    a310:	7c 69 1b 78 	mr      r9,r3
    a314:	80 01 00 28 	lwz     r0,40(r1)
    a318:	7c 09 02 14 	add     r0,r9,r0
    a31c:	48 00 00 08 	b       a324 <sctp_getsockopt_delayed_ack+0x134>
				n - over) + over;
	}
	return n;
    a320:	80 01 00 24 	lwz     r0,36(r1)
    a324:	2f 80 00 00 	cmpwi   cr7,r0,0
    a328:	41 9e 01 30 	beq-    cr7,a458 <sctp_getsockopt_delayed_ack+0x268>
			return -EFAULT;
    a32c:	38 00 ff f2 	li      r0,-14
    a330:	48 00 03 d8 	b       a708 <sctp_getsockopt_delayed_ack+0x518>
	} else if (len == sizeof(struct sctp_assoc_value)) {
    a334:	80 01 00 6c 	lwz     r0,108(r1)
    a338:	2f 80 00 08 	cmpwi   cr7,r0,8
    a33c:	40 9e 01 14 	bne-    cr7,a450 <sctp_getsockopt_delayed_ack+0x260>
		pr_warn("Use of struct sctp_assoc_value in delayed_ack socket option deprecated\n");
    a340:	3c 00 00 00 	lis     r0,0
    a344:	30 60 00 2c 	addic   r3,r0,44
    a348:	48 00 00 01 	bl      a348 <sctp_getsockopt_delayed_ack+0x158>
		pr_warn("Use struct sctp_sack_info instead\n");
    a34c:	3c 00 00 00 	lis     r0,0
    a350:	30 60 00 80 	addic   r3,r0,128
    a354:	48 00 00 01 	bl      a354 <sctp_getsockopt_delayed_ack+0x164>
		if (copy_from_user(&params, optval, len))
    a358:	80 01 00 6c 	lwz     r0,108(r1)
    a35c:	39 21 00 58 	addi    r9,r1,88
    a360:	91 21 00 2c 	stw     r9,44(r1)
    a364:	81 21 00 70 	lwz     r9,112(r1)
    a368:	91 21 00 30 	stw     r9,48(r1)
    a36c:	90 01 00 34 	stw     r0,52(r1)
static inline unsigned long copy_from_user(void *to,
		const void __user *from, unsigned long n)
{
	unsigned long over;

	if (access_ok(VERIFY_READ, from, n))
    a370:	81 21 00 30 	lwz     r9,48(r1)
    a374:	7c 40 13 78 	mr      r0,r2
    a378:	7c 0a 03 78 	mr      r10,r0
    a37c:	80 0a 01 d4 	lwz     r0,468(r10)
    a380:	7f 89 00 40 	cmplw   cr7,r9,r0
    a384:	41 9d 00 3c 	bgt-    cr7,a3c0 <sctp_getsockopt_delayed_ack+0x1d0>
    a388:	80 01 00 34 	lwz     r0,52(r1)
    a38c:	2f 80 00 00 	cmpwi   cr7,r0,0
    a390:	41 9e 00 28 	beq-    cr7,a3b8 <sctp_getsockopt_delayed_ack+0x1c8>
    a394:	80 01 00 34 	lwz     r0,52(r1)
    a398:	31 20 ff ff 	addic   r9,r0,-1
    a39c:	7c 40 13 78 	mr      r0,r2
    a3a0:	7c 0a 03 78 	mr      r10,r0
    a3a4:	81 6a 01 d4 	lwz     r11,468(r10)
    a3a8:	80 01 00 30 	lwz     r0,48(r1)
    a3ac:	7c 00 58 50 	subf    r0,r0,r11
    a3b0:	7f 89 00 40 	cmplw   cr7,r9,r0
    a3b4:	41 9d 00 0c 	bgt-    cr7,a3c0 <sctp_getsockopt_delayed_ack+0x1d0>
    a3b8:	38 00 00 01 	li      r0,1
    a3bc:	48 00 00 08 	b       a3c4 <sctp_getsockopt_delayed_ack+0x1d4>
    a3c0:	38 00 00 00 	li      r0,0
    a3c4:	2f 80 00 00 	cmpwi   cr7,r0,0
    a3c8:	41 9e 00 1c 	beq-    cr7,a3e4 <sctp_getsockopt_delayed_ack+0x1f4>
		return __copy_tofrom_user((__force void __user *)to, from, n);
    a3cc:	80 61 00 2c 	lwz     r3,44(r1)
    a3d0:	80 81 00 30 	lwz     r4,48(r1)
    a3d4:	80 a1 00 34 	lwz     r5,52(r1)
    a3d8:	48 00 00 01 	bl      a3d8 <sctp_getsockopt_delayed_ack+0x1e8>
    a3dc:	7c 60 1b 78 	mr      r0,r3
    a3e0:	48 00 00 60 	b       a440 <sctp_getsockopt_delayed_ack+0x250>
	if ((unsigned long)from < TASK_SIZE) {
    a3e4:	81 21 00 30 	lwz     r9,48(r1)
    a3e8:	3c 00 bf ff 	lis     r0,-16385
    a3ec:	60 00 ff ff 	ori     r0,r0,65535
    a3f0:	7f 89 00 40 	cmplw   cr7,r9,r0
    a3f4:	41 9d 00 48 	bgt-    cr7,a43c <sctp_getsockopt_delayed_ack+0x24c>
		over = (unsigned long)from + n - TASK_SIZE;
    a3f8:	81 21 00 30 	lwz     r9,48(r1)
    a3fc:	80 01 00 34 	lwz     r0,52(r1)
    a400:	7c 09 02 14 	add     r0,r9,r0
    a404:	3d 60 40 00 	lis     r11,16384
    a408:	7c 00 5a 14 	add     r0,r0,r11
    a40c:	90 01 00 38 	stw     r0,56(r1)
		return __copy_tofrom_user((__force void __user *)to, from,
    a410:	81 21 00 34 	lwz     r9,52(r1)
    a414:	80 01 00 38 	lwz     r0,56(r1)
    a418:	7c 00 48 50 	subf    r0,r0,r9
    a41c:	80 61 00 2c 	lwz     r3,44(r1)
    a420:	80 81 00 30 	lwz     r4,48(r1)
    a424:	7c 05 03 78 	mr      r5,r0
    a428:	48 00 00 01 	bl      a428 <sctp_getsockopt_delayed_ack+0x238>
    a42c:	7c 69 1b 78 	mr      r9,r3
    a430:	80 01 00 38 	lwz     r0,56(r1)
    a434:	7c 09 02 14 	add     r0,r9,r0
    a438:	48 00 00 08 	b       a440 <sctp_getsockopt_delayed_ack+0x250>
				n - over) + over;
	}
	return n;
    a43c:	80 01 00 34 	lwz     r0,52(r1)
    a440:	2f 80 00 00 	cmpwi   cr7,r0,0
    a444:	41 9e 00 14 	beq-    cr7,a458 <sctp_getsockopt_delayed_ack+0x268>
			return -EFAULT;
    a448:	38 00 ff f2 	li      r0,-14
    a44c:	48 00 02 bc 	b       a708 <sctp_getsockopt_delayed_ack+0x518>
	} else
		return - EINVAL;
    a450:	38 00 ff ea 	li      r0,-22
    a454:	48 00 02 b4 	b       a708 <sctp_getsockopt_delayed_ack+0x518>

	/* Get association, if sack_assoc_id != 0 and the socket is a one
	 * to many style socket, and an association was not found, then
	 * the id was invalid.
	 */
	asoc = sctp_id2assoc(sk, params.sack_assoc_id);
    a458:	80 01 00 58 	lwz     r0,88(r1)
    a45c:	80 61 00 68 	lwz     r3,104(r1)
    a460:	7c 04 03 78 	mr      r4,r0
    a464:	48 00 00 01 	bl      a464 <sctp_getsockopt_delayed_ack+0x274>
    a468:	90 61 00 0c 	stw     r3,12(r1)
	if (!asoc && params.sack_assoc_id && sctp_style(sk, UDP))
    a46c:	80 01 00 0c 	lwz     r0,12(r1)
    a470:	2f 80 00 00 	cmpwi   cr7,r0,0
    a474:	40 9e 00 54 	bne-    cr7,a4c8 <sctp_getsockopt_delayed_ack+0x2d8>
    a478:	80 01 00 58 	lwz     r0,88(r1)
    a47c:	2f 80 00 00 	cmpwi   cr7,r0,0
    a480:	41 9e 00 48 	beq-    cr7,a4c8 <sctp_getsockopt_delayed_ack+0x2d8>
    a484:	80 01 00 68 	lwz     r0,104(r1)
    a488:	90 01 00 3c 	stw     r0,60(r1)
    a48c:	38 00 00 00 	li      r0,0
    a490:	90 01 00 40 	stw     r0,64(r1)
    a494:	80 01 00 3c 	lwz     r0,60(r1)
    a498:	90 01 00 44 	stw     r0,68(r1)
    a49c:	80 01 00 44 	lwz     r0,68(r1)
    a4a0:	7c 09 03 78 	mr      r9,r0
    a4a4:	80 09 01 c8 	lwz     r0,456(r9)
    a4a8:	81 21 00 40 	lwz     r9,64(r1)
    a4ac:	7f 89 00 00 	cmpw    cr7,r9,r0
    a4b0:	7c 00 00 26 	mfcr    r0
    a4b4:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
    a4b8:	2f 80 00 00 	cmpwi   cr7,r0,0
    a4bc:	41 9e 00 0c 	beq-    cr7,a4c8 <sctp_getsockopt_delayed_ack+0x2d8>
		return -EINVAL;
    a4c0:	38 00 ff ea 	li      r0,-22
    a4c4:	48 00 02 44 	b       a708 <sctp_getsockopt_delayed_ack+0x518>

	if (asoc) {
    a4c8:	80 01 00 0c 	lwz     r0,12(r1)
    a4cc:	2f 80 00 00 	cmpwi   cr7,r0,0
    a4d0:	41 9e 00 60 	beq-    cr7,a530 <sctp_getsockopt_delayed_ack+0x340>
		/* Fetch association values. */
		if (asoc->param_flags & SPP_SACKDELAY_ENABLE) {
    a4d4:	80 01 00 0c 	lwz     r0,12(r1)
    a4d8:	7c 0a 03 78 	mr      r10,r0
    a4dc:	80 0a 01 f0 	lwz     r0,496(r10)
    a4e0:	54 00 06 b4 	rlwinm  r0,r0,0,26,26
    a4e4:	2f 80 00 00 	cmpwi   cr7,r0,0
    a4e8:	41 9e 00 34 	beq-    cr7,a51c <sctp_getsockopt_delayed_ack+0x32c>
			params.sack_delay = jiffies_to_msecs(
				asoc->sackdelay);
    a4ec:	80 01 00 0c 	lwz     r0,12(r1)
		return -EINVAL;

	if (asoc) {
		/* Fetch association values. */
		if (asoc->param_flags & SPP_SACKDELAY_ENABLE) {
			params.sack_delay = jiffies_to_msecs(
    a4f0:	7c 0b 03 78 	mr      r11,r0
    a4f4:	80 0b 01 f4 	lwz     r0,500(r11)
    a4f8:	7c 03 03 78 	mr      r3,r0
    a4fc:	48 00 00 01 	bl      a4fc <sctp_getsockopt_delayed_ack+0x30c>
    a500:	7c 60 1b 78 	mr      r0,r3
    a504:	90 01 00 5c 	stw     r0,92(r1)
				asoc->sackdelay);
			params.sack_freq = asoc->sackfreq;
    a508:	80 01 00 0c 	lwz     r0,12(r1)
    a50c:	7c 09 03 78 	mr      r9,r0
    a510:	80 09 01 f8 	lwz     r0,504(r9)
    a514:	90 01 00 60 	stw     r0,96(r1)
    a518:	48 00 00 64 	b       a57c <sctp_getsockopt_delayed_ack+0x38c>

		} else {
			params.sack_delay = 0;
    a51c:	38 00 00 00 	li      r0,0
    a520:	90 01 00 5c 	stw     r0,92(r1)
			params.sack_freq = 1;
    a524:	38 00 00 01 	li      r0,1
    a528:	90 01 00 60 	stw     r0,96(r1)
    a52c:	48 00 00 50 	b       a57c <sctp_getsockopt_delayed_ack+0x38c>
		}
	} else {
		/* Fetch socket values. */
		if (sp->param_flags & SPP_SACKDELAY_ENABLE) {
    a530:	80 01 00 10 	lwz     r0,16(r1)
    a534:	7c 0a 03 78 	mr      r10,r0
    a538:	80 0a 02 0c 	lwz     r0,524(r10)
    a53c:	54 00 06 b4 	rlwinm  r0,r0,0,26,26
    a540:	2f 80 00 00 	cmpwi   cr7,r0,0
    a544:	41 9e 00 28 	beq-    cr7,a56c <sctp_getsockopt_delayed_ack+0x37c>
			params.sack_delay  = sp->sackdelay;
    a548:	80 01 00 10 	lwz     r0,16(r1)
    a54c:	7c 0b 03 78 	mr      r11,r0
    a550:	80 0b 02 04 	lwz     r0,516(r11)
    a554:	90 01 00 5c 	stw     r0,92(r1)
			params.sack_freq = sp->sackfreq;
    a558:	80 01 00 10 	lwz     r0,16(r1)
    a55c:	7c 09 03 78 	mr      r9,r0
    a560:	80 09 02 08 	lwz     r0,520(r9)
    a564:	90 01 00 60 	stw     r0,96(r1)
    a568:	48 00 00 14 	b       a57c <sctp_getsockopt_delayed_ack+0x38c>
		} else {
			params.sack_delay  = 0;
    a56c:	38 00 00 00 	li      r0,0
    a570:	90 01 00 5c 	stw     r0,92(r1)
			params.sack_freq = 1;
    a574:	38 00 00 01 	li      r0,1
    a578:	90 01 00 60 	stw     r0,96(r1)
		}
	}

	if (copy_to_user(optval, &params, len))
    a57c:	80 01 00 6c 	lwz     r0,108(r1)
    a580:	81 21 00 70 	lwz     r9,112(r1)
    a584:	91 21 00 48 	stw     r9,72(r1)
    a588:	39 21 00 58 	addi    r9,r1,88
    a58c:	91 21 00 4c 	stw     r9,76(r1)
    a590:	90 01 00 50 	stw     r0,80(r1)
static inline unsigned long copy_to_user(void __user *to,
		const void *from, unsigned long n)
{
	unsigned long over;

	if (access_ok(VERIFY_WRITE, to, n))
    a594:	81 21 00 48 	lwz     r9,72(r1)
    a598:	7c 40 13 78 	mr      r0,r2
    a59c:	7c 0a 03 78 	mr      r10,r0
    a5a0:	80 0a 01 d4 	lwz     r0,468(r10)
    a5a4:	7f 89 00 40 	cmplw   cr7,r9,r0
    a5a8:	41 9d 00 3c 	bgt-    cr7,a5e4 <sctp_getsockopt_delayed_ack+0x3f4>
    a5ac:	80 01 00 50 	lwz     r0,80(r1)
    a5b0:	2f 80 00 00 	cmpwi   cr7,r0,0
    a5b4:	41 9e 00 28 	beq-    cr7,a5dc <sctp_getsockopt_delayed_ack+0x3ec>
    a5b8:	80 01 00 50 	lwz     r0,80(r1)
    a5bc:	31 20 ff ff 	addic   r9,r0,-1
    a5c0:	7c 40 13 78 	mr      r0,r2
    a5c4:	7c 0a 03 78 	mr      r10,r0
    a5c8:	81 6a 01 d4 	lwz     r11,468(r10)
    a5cc:	80 01 00 48 	lwz     r0,72(r1)
    a5d0:	7c 00 58 50 	subf    r0,r0,r11
    a5d4:	7f 89 00 40 	cmplw   cr7,r9,r0
    a5d8:	41 9d 00 0c 	bgt-    cr7,a5e4 <sctp_getsockopt_delayed_ack+0x3f4>
    a5dc:	38 00 00 01 	li      r0,1
    a5e0:	48 00 00 08 	b       a5e8 <sctp_getsockopt_delayed_ack+0x3f8>
    a5e4:	38 00 00 00 	li      r0,0
    a5e8:	2f 80 00 00 	cmpwi   cr7,r0,0
    a5ec:	41 9e 00 1c 	beq-    cr7,a608 <sctp_getsockopt_delayed_ack+0x418>
		return __copy_tofrom_user(to, (__force void __user *)from, n);
    a5f0:	80 61 00 48 	lwz     r3,72(r1)
    a5f4:	80 81 00 4c 	lwz     r4,76(r1)
    a5f8:	80 a1 00 50 	lwz     r5,80(r1)
    a5fc:	48 00 00 01 	bl      a5fc <sctp_getsockopt_delayed_ack+0x40c>
    a600:	7c 60 1b 78 	mr      r0,r3
    a604:	48 00 00 60 	b       a664 <sctp_getsockopt_delayed_ack+0x474>
	if ((unsigned long)to < TASK_SIZE) {
    a608:	81 21 00 48 	lwz     r9,72(r1)
    a60c:	3c 00 bf ff 	lis     r0,-16385
    a610:	60 00 ff ff 	ori     r0,r0,65535
    a614:	7f 89 00 40 	cmplw   cr7,r9,r0
    a618:	41 9d 00 48 	bgt-    cr7,a660 <sctp_getsockopt_delayed_ack+0x470>
		over = (unsigned long)to + n - TASK_SIZE;
    a61c:	81 21 00 48 	lwz     r9,72(r1)
    a620:	80 01 00 50 	lwz     r0,80(r1)
    a624:	7c 09 02 14 	add     r0,r9,r0
    a628:	3d 60 40 00 	lis     r11,16384
    a62c:	7c 00 5a 14 	add     r0,r0,r11
    a630:	90 01 00 54 	stw     r0,84(r1)
		return __copy_tofrom_user(to, (__force void __user *)from,
    a634:	81 21 00 50 	lwz     r9,80(r1)
    a638:	80 01 00 54 	lwz     r0,84(r1)
    a63c:	7c 00 48 50 	subf    r0,r0,r9
    a640:	80 61 00 48 	lwz     r3,72(r1)
    a644:	80 81 00 4c 	lwz     r4,76(r1)
    a648:	7c 05 03 78 	mr      r5,r0
    a64c:	48 00 00 01 	bl      a64c <sctp_getsockopt_delayed_ack+0x45c>
    a650:	7c 69 1b 78 	mr      r9,r3
    a654:	80 01 00 54 	lwz     r0,84(r1)
    a658:	7c 09 02 14 	add     r0,r9,r0
    a65c:	48 00 00 08 	b       a664 <sctp_getsockopt_delayed_ack+0x474>
				n - over) + over;
	}
	return n;
    a660:	80 01 00 50 	lwz     r0,80(r1)
    a664:	2f 80 00 00 	cmpwi   cr7,r0,0
    a668:	41 9e 00 0c 	beq-    cr7,a674 <sctp_getsockopt_delayed_ack+0x484>
		return -EFAULT;
    a66c:	38 00 ff f2 	li      r0,-14
    a670:	48 00 00 98 	b       a708 <sctp_getsockopt_delayed_ack+0x518>

	if (put_user(len, optlen))
    a674:	38 00 ff f2 	li      r0,-14
    a678:	90 01 00 08 	stw     r0,8(r1)
    a67c:	80 01 00 74 	lwz     r0,116(r1)
    a680:	90 01 00 14 	stw     r0,20(r1)
    a684:	81 21 00 14 	lwz     r9,20(r1)
    a688:	7c 40 13 78 	mr      r0,r2
    a68c:	7c 0a 03 78 	mr      r10,r0
    a690:	80 0a 01 d4 	lwz     r0,468(r10)
    a694:	7f 89 00 40 	cmplw   cr7,r9,r0
    a698:	41 9d 00 28 	bgt-    cr7,a6c0 <sctp_getsockopt_delayed_ack+0x4d0>
    a69c:	7c 40 13 78 	mr      r0,r2
    a6a0:	7c 0b 03 78 	mr      r11,r0
    a6a4:	81 2b 01 d4 	lwz     r9,468(r11)
    a6a8:	80 01 00 14 	lwz     r0,20(r1)
    a6ac:	7c 00 48 50 	subf    r0,r0,r9
    a6b0:	2b 80 00 02 	cmplwi  cr7,r0,2
    a6b4:	40 9d 00 0c 	ble-    cr7,a6c0 <sctp_getsockopt_delayed_ack+0x4d0>
    a6b8:	38 00 00 01 	li      r0,1
    a6bc:	48 00 00 08 	b       a6c4 <sctp_getsockopt_delayed_ack+0x4d4>
    a6c0:	38 00 00 00 	li      r0,0
    a6c4:	2f 80 00 00 	cmpwi   cr7,r0,0
    a6c8:	41 9e 00 28 	beq-    cr7,a6f0 <sctp_getsockopt_delayed_ack+0x500>
    a6cc:	38 00 00 00 	li      r0,0
    a6d0:	90 01 00 08 	stw     r0,8(r1)
    a6d4:	80 01 00 6c 	lwz     r0,108(r1)
    a6d8:	81 21 00 14 	lwz     r9,20(r1)
    a6dc:	81 61 00 08 	lwz     r11,8(r1)
    a6e0:	7d 7f 5b 78 	mr      r31,r11
    a6e4:	90 09 00 00 	stw     r0,0(r9)
    a6e8:	93 e1 00 08 	stw     r31,8(r1)
    a6ec:	60 00 00 00 	nop
    a6f0:	80 01 00 08 	lwz     r0,8(r1)
    a6f4:	2f 80 00 00 	cmpwi   cr7,r0,0
    a6f8:	41 9e 00 0c 	beq-    cr7,a704 <sctp_getsockopt_delayed_ack+0x514>
		return -EFAULT;
    a6fc:	38 00 ff f2 	li      r0,-14
    a700:	48 00 00 08 	b       a708 <sctp_getsockopt_delayed_ack+0x518>

	return 0;
    a704:	38 00 00 00 	li      r0,0
}
    a708:	7c 03 03 78 	mr      r3,r0
    a70c:	80 01 00 84 	lwz     r0,132(r1)
    a710:	7c 08 03 a6 	mtlr    r0
    a714:	83 e1 00 7c 	lwz     r31,124(r1)
    a718:	38 21 00 80 	addi    r1,r1,128
    a71c:	4e 80 00 20 	blr

0000a720 <sctp_getsockopt_initmsg>:
 * socket (for UDP-style sockets only future associations are effected
 * by the change).  With TCP-style sockets, this option is inherited by
 * sockets derived from a listener socket.
 */
static int sctp_getsockopt_initmsg(struct sock *sk, int len, char __user *optval, int __user *optlen)
{
    a720:	94 21 ff c0 	stwu    r1,-64(r1)
    a724:	7c 08 02 a6 	mflr    r0
    a728:	90 01 00 44 	stw     r0,68(r1)
    a72c:	93 e1 00 3c 	stw     r31,60(r1)
    a730:	90 61 00 28 	stw     r3,40(r1)
    a734:	90 81 00 2c 	stw     r4,44(r1)
    a738:	90 a1 00 30 	stw     r5,48(r1)
    a73c:	90 c1 00 34 	stw     r6,52(r1)
	if (len < sizeof(struct sctp_initmsg))
    a740:	80 01 00 2c 	lwz     r0,44(r1)
    a744:	2b 80 00 07 	cmplwi  cr7,r0,7
    a748:	41 9d 00 0c 	bgt-    cr7,a754 <sctp_getsockopt_initmsg+0x34>
		return -EINVAL;
    a74c:	38 00 ff ea 	li      r0,-22
    a750:	48 00 01 a4 	b       a8f4 <sctp_getsockopt_initmsg+0x1d4>
	len = sizeof(struct sctp_initmsg);
    a754:	38 00 00 08 	li      r0,8
    a758:	90 01 00 2c 	stw     r0,44(r1)
	if (put_user(len, optlen))
    a75c:	38 00 ff f2 	li      r0,-14
    a760:	90 01 00 08 	stw     r0,8(r1)
    a764:	80 01 00 34 	lwz     r0,52(r1)
    a768:	90 01 00 0c 	stw     r0,12(r1)
    a76c:	81 21 00 0c 	lwz     r9,12(r1)
    a770:	7c 40 13 78 	mr      r0,r2
    a774:	7c 0a 03 78 	mr      r10,r0
    a778:	80 0a 01 d4 	lwz     r0,468(r10)
    a77c:	7f 89 00 40 	cmplw   cr7,r9,r0
    a780:	41 9d 00 28 	bgt-    cr7,a7a8 <sctp_getsockopt_initmsg+0x88>
    a784:	7c 40 13 78 	mr      r0,r2
    a788:	7c 0b 03 78 	mr      r11,r0
    a78c:	81 2b 01 d4 	lwz     r9,468(r11)
    a790:	80 01 00 0c 	lwz     r0,12(r1)
    a794:	7c 00 48 50 	subf    r0,r0,r9
    a798:	2b 80 00 02 	cmplwi  cr7,r0,2
    a79c:	40 9d 00 0c 	ble-    cr7,a7a8 <sctp_getsockopt_initmsg+0x88>
    a7a0:	38 00 00 01 	li      r0,1
    a7a4:	48 00 00 08 	b       a7ac <sctp_getsockopt_initmsg+0x8c>
    a7a8:	38 00 00 00 	li      r0,0
    a7ac:	2f 80 00 00 	cmpwi   cr7,r0,0
    a7b0:	41 9e 00 28 	beq-    cr7,a7d8 <sctp_getsockopt_initmsg+0xb8>
    a7b4:	38 00 00 00 	li      r0,0
    a7b8:	90 01 00 08 	stw     r0,8(r1)
    a7bc:	80 01 00 2c 	lwz     r0,44(r1)
    a7c0:	81 21 00 0c 	lwz     r9,12(r1)
    a7c4:	81 61 00 08 	lwz     r11,8(r1)
    a7c8:	7d 7f 5b 78 	mr      r31,r11
    a7cc:	90 09 00 00 	stw     r0,0(r9)
    a7d0:	93 e1 00 08 	stw     r31,8(r1)
    a7d4:	60 00 00 00 	nop
    a7d8:	80 01 00 08 	lwz     r0,8(r1)
    a7dc:	2f 80 00 00 	cmpwi   cr7,r0,0
    a7e0:	41 9e 00 0c 	beq-    cr7,a7ec <sctp_getsockopt_initmsg+0xcc>
		return -EFAULT;
    a7e4:	38 00 ff f2 	li      r0,-14
    a7e8:	48 00 01 0c 	b       a8f4 <sctp_getsockopt_initmsg+0x1d4>
    a7ec:	80 01 00 28 	lwz     r0,40(r1)
    a7f0:	90 01 00 10 	stw     r0,16(r1)
    a7f4:	80 01 00 10 	lwz     r0,16(r1)
	if (copy_to_user(optval, &sctp_sk(sk)->initmsg, len))
    a7f8:	31 20 02 10 	addic   r9,r0,528
    a7fc:	80 01 00 2c 	lwz     r0,44(r1)
    a800:	81 61 00 30 	lwz     r11,48(r1)
    a804:	91 61 00 14 	stw     r11,20(r1)
    a808:	91 21 00 18 	stw     r9,24(r1)
    a80c:	90 01 00 1c 	stw     r0,28(r1)
static inline unsigned long copy_to_user(void __user *to,
		const void *from, unsigned long n)
{
	unsigned long over;

	if (access_ok(VERIFY_WRITE, to, n))
    a810:	81 21 00 14 	lwz     r9,20(r1)
    a814:	7c 40 13 78 	mr      r0,r2
    a818:	7c 0a 03 78 	mr      r10,r0
    a81c:	80 0a 01 d4 	lwz     r0,468(r10)
    a820:	7f 89 00 40 	cmplw   cr7,r9,r0
    a824:	41 9d 00 3c 	bgt-    cr7,a860 <sctp_getsockopt_initmsg+0x140>
    a828:	80 01 00 1c 	lwz     r0,28(r1)
    a82c:	2f 80 00 00 	cmpwi   cr7,r0,0
    a830:	41 9e 00 28 	beq-    cr7,a858 <sctp_getsockopt_initmsg+0x138>
    a834:	80 01 00 1c 	lwz     r0,28(r1)
    a838:	31 20 ff ff 	addic   r9,r0,-1
    a83c:	7c 40 13 78 	mr      r0,r2
    a840:	7c 0a 03 78 	mr      r10,r0
    a844:	81 6a 01 d4 	lwz     r11,468(r10)
    a848:	80 01 00 14 	lwz     r0,20(r1)
    a84c:	7c 00 58 50 	subf    r0,r0,r11
    a850:	7f 89 00 40 	cmplw   cr7,r9,r0
    a854:	41 9d 00 0c 	bgt-    cr7,a860 <sctp_getsockopt_initmsg+0x140>
    a858:	38 00 00 01 	li      r0,1
    a85c:	48 00 00 08 	b       a864 <sctp_getsockopt_initmsg+0x144>
    a860:	38 00 00 00 	li      r0,0
    a864:	2f 80 00 00 	cmpwi   cr7,r0,0
    a868:	41 9e 00 1c 	beq-    cr7,a884 <sctp_getsockopt_initmsg+0x164>
		return __copy_tofrom_user(to, (__force void __user *)from, n);
    a86c:	80 61 00 14 	lwz     r3,20(r1)
    a870:	80 81 00 18 	lwz     r4,24(r1)
    a874:	80 a1 00 1c 	lwz     r5,28(r1)
    a878:	48 00 00 01 	bl      a878 <sctp_getsockopt_initmsg+0x158>
    a87c:	7c 60 1b 78 	mr      r0,r3
    a880:	48 00 00 60 	b       a8e0 <sctp_getsockopt_initmsg+0x1c0>
	if ((unsigned long)to < TASK_SIZE) {
    a884:	81 21 00 14 	lwz     r9,20(r1)
    a888:	3c 00 bf ff 	lis     r0,-16385
    a88c:	60 00 ff ff 	ori     r0,r0,65535
    a890:	7f 89 00 40 	cmplw   cr7,r9,r0
    a894:	41 9d 00 48 	bgt-    cr7,a8dc <sctp_getsockopt_initmsg+0x1bc>
		over = (unsigned long)to + n - TASK_SIZE;
    a898:	81 21 00 14 	lwz     r9,20(r1)
    a89c:	80 01 00 1c 	lwz     r0,28(r1)
    a8a0:	7c 09 02 14 	add     r0,r9,r0
    a8a4:	3d 60 40 00 	lis     r11,16384
    a8a8:	7c 00 5a 14 	add     r0,r0,r11
    a8ac:	90 01 00 20 	stw     r0,32(r1)
		return __copy_tofrom_user(to, (__force void __user *)from,
    a8b0:	81 21 00 1c 	lwz     r9,28(r1)
    a8b4:	80 01 00 20 	lwz     r0,32(r1)
    a8b8:	7c 00 48 50 	subf    r0,r0,r9
    a8bc:	80 61 00 14 	lwz     r3,20(r1)
    a8c0:	80 81 00 18 	lwz     r4,24(r1)
    a8c4:	7c 05 03 78 	mr      r5,r0
    a8c8:	48 00 00 01 	bl      a8c8 <sctp_getsockopt_initmsg+0x1a8>
    a8cc:	7c 69 1b 78 	mr      r9,r3
    a8d0:	80 01 00 20 	lwz     r0,32(r1)
    a8d4:	7c 09 02 14 	add     r0,r9,r0
    a8d8:	48 00 00 08 	b       a8e0 <sctp_getsockopt_initmsg+0x1c0>
				n - over) + over;
	}
	return n;
    a8dc:	80 01 00 1c 	lwz     r0,28(r1)
    a8e0:	2f 80 00 00 	cmpwi   cr7,r0,0
    a8e4:	41 9e 00 0c 	beq-    cr7,a8f0 <sctp_getsockopt_initmsg+0x1d0>
		return -EFAULT;
    a8e8:	38 00 ff f2 	li      r0,-14
    a8ec:	48 00 00 08 	b       a8f4 <sctp_getsockopt_initmsg+0x1d4>
	return 0;
    a8f0:	38 00 00 00 	li      r0,0
}
    a8f4:	7c 03 03 78 	mr      r3,r0
    a8f8:	80 01 00 44 	lwz     r0,68(r1)
    a8fc:	7c 08 03 a6 	mtlr    r0
    a900:	83 e1 00 3c 	lwz     r31,60(r1)
    a904:	38 21 00 40 	addi    r1,r1,64
    a908:	4e 80 00 20 	blr

0000a90c <sctp_getsockopt_peer_addrs>:


static int sctp_getsockopt_peer_addrs(struct sock *sk, int len,
				      char __user *optval, int __user *optlen)
{
    a90c:	94 21 ff 50 	stwu    r1,-176(r1)
    a910:	7c 08 02 a6 	mflr    r0
    a914:	90 01 00 b4 	stw     r0,180(r1)
    a918:	93 e1 00 ac 	stw     r31,172(r1)
    a91c:	90 61 00 98 	stw     r3,152(r1)
    a920:	90 81 00 9c 	stw     r4,156(r1)
    a924:	90 a1 00 a0 	stw     r5,160(r1)
    a928:	90 c1 00 a4 	stw     r6,164(r1)
	struct sctp_association *asoc;
	int cnt = 0;
    a92c:	38 00 00 00 	li      r0,0
    a930:	90 01 00 08 	stw     r0,8(r1)
    a934:	80 01 00 98 	lwz     r0,152(r1)
    a938:	90 01 00 40 	stw     r0,64(r1)
    a93c:	80 01 00 40 	lwz     r0,64(r1)
	struct sctp_getaddrs getaddrs;
	struct sctp_transport *from;
	void __user *to;
	union sctp_addr temp;
	struct sctp_sock *sp = sctp_sk(sk);
    a940:	90 01 00 20 	stw     r0,32(r1)
	int addrlen;
	size_t space_left;
	int bytes_copied;

	if (len < sizeof(struct sctp_getaddrs))
    a944:	80 01 00 9c 	lwz     r0,156(r1)
    a948:	2b 80 00 07 	cmplwi  cr7,r0,7
    a94c:	41 9d 00 0c 	bgt-    cr7,a958 <sctp_getsockopt_peer_addrs+0x4c>
		return -EINVAL;
    a950:	38 00 ff ea 	li      r0,-22
    a954:	48 00 04 d4 	b       ae28 <sctp_getsockopt_peer_addrs+0x51c>

	if (copy_from_user(&getaddrs, optval, sizeof(struct sctp_getaddrs)))
    a958:	38 01 00 68 	addi    r0,r1,104
	int addrlen;
	size_t space_left;
	int bytes_copied;

	if (len < sizeof(struct sctp_getaddrs))
		return -EINVAL;
    a95c:	90 01 00 44 	stw     r0,68(r1)
    a960:	80 01 00 a0 	lwz     r0,160(r1)
    a964:	90 01 00 48 	stw     r0,72(r1)
    a968:	38 00 00 08 	li      r0,8
    a96c:	90 01 00 4c 	stw     r0,76(r1)
static inline unsigned long copy_from_user(void *to,
		const void __user *from, unsigned long n)
{
	unsigned long over;

	if (access_ok(VERIFY_READ, from, n))
    a970:	81 21 00 48 	lwz     r9,72(r1)
    a974:	7c 40 13 78 	mr      r0,r2
    a978:	7c 07 03 78 	mr      r7,r0
    a97c:	80 07 01 d4 	lwz     r0,468(r7)
    a980:	7f 89 00 40 	cmplw   cr7,r9,r0
    a984:	41 9d 00 3c 	bgt-    cr7,a9c0 <sctp_getsockopt_peer_addrs+0xb4>
    a988:	80 01 00 4c 	lwz     r0,76(r1)
    a98c:	2f 80 00 00 	cmpwi   cr7,r0,0
    a990:	41 9e 00 28 	beq-    cr7,a9b8 <sctp_getsockopt_peer_addrs+0xac>
    a994:	80 01 00 4c 	lwz     r0,76(r1)
    a998:	31 20 ff ff 	addic   r9,r0,-1
    a99c:	7c 40 13 78 	mr      r0,r2
    a9a0:	7c 0a 03 78 	mr      r10,r0
    a9a4:	81 6a 01 d4 	lwz     r11,468(r10)
    a9a8:	80 01 00 48 	lwz     r0,72(r1)
    a9ac:	7c 00 58 50 	subf    r0,r0,r11
    a9b0:	7f 89 00 40 	cmplw   cr7,r9,r0
    a9b4:	41 9d 00 0c 	bgt-    cr7,a9c0 <sctp_getsockopt_peer_addrs+0xb4>
    a9b8:	38 00 00 01 	li      r0,1
    a9bc:	48 00 00 08 	b       a9c4 <sctp_getsockopt_peer_addrs+0xb8>
    a9c0:	38 00 00 00 	li      r0,0
    a9c4:	2f 80 00 00 	cmpwi   cr7,r0,0
    a9c8:	41 9e 00 1c 	beq-    cr7,a9e4 <sctp_getsockopt_peer_addrs+0xd8>
		return __copy_tofrom_user((__force void __user *)to, from, n);
    a9cc:	80 61 00 44 	lwz     r3,68(r1)
    a9d0:	80 81 00 48 	lwz     r4,72(r1)
    a9d4:	80 a1 00 4c 	lwz     r5,76(r1)
    a9d8:	48 00 00 01 	bl      a9d8 <sctp_getsockopt_peer_addrs+0xcc>
    a9dc:	7c 60 1b 78 	mr      r0,r3
    a9e0:	48 00 00 60 	b       aa40 <sctp_getsockopt_peer_addrs+0x134>
	if ((unsigned long)from < TASK_SIZE) {
    a9e4:	81 21 00 48 	lwz     r9,72(r1)
    a9e8:	3c 00 bf ff 	lis     r0,-16385
    a9ec:	60 00 ff ff 	ori     r0,r0,65535
    a9f0:	7f 89 00 40 	cmplw   cr7,r9,r0
    a9f4:	41 9d 00 48 	bgt-    cr7,aa3c <sctp_getsockopt_peer_addrs+0x130>
		over = (unsigned long)from + n - TASK_SIZE;
    a9f8:	81 21 00 48 	lwz     r9,72(r1)
    a9fc:	80 01 00 4c 	lwz     r0,76(r1)
    aa00:	7c 09 02 14 	add     r0,r9,r0
    aa04:	3d 60 40 00 	lis     r11,16384
    aa08:	7c 00 5a 14 	add     r0,r0,r11
    aa0c:	90 01 00 50 	stw     r0,80(r1)
		return __copy_tofrom_user((__force void __user *)to, from,
    aa10:	81 21 00 4c 	lwz     r9,76(r1)
    aa14:	80 01 00 50 	lwz     r0,80(r1)
    aa18:	7c 00 48 50 	subf    r0,r0,r9
    aa1c:	80 61 00 44 	lwz     r3,68(r1)
    aa20:	80 81 00 48 	lwz     r4,72(r1)
    aa24:	7c 05 03 78 	mr      r5,r0
    aa28:	48 00 00 01 	bl      aa28 <sctp_getsockopt_peer_addrs+0x11c>
    aa2c:	7c 69 1b 78 	mr      r9,r3
    aa30:	80 01 00 50 	lwz     r0,80(r1)
    aa34:	7c 09 02 14 	add     r0,r9,r0
    aa38:	48 00 00 08 	b       aa40 <sctp_getsockopt_peer_addrs+0x134>
				n - over) + over;
	}
	return n;
    aa3c:	80 01 00 4c 	lwz     r0,76(r1)

	if (copy_from_user(&getaddrs, optval, sizeof(struct sctp_getaddrs)))
    aa40:	2f 80 00 00 	cmpwi   cr7,r0,0
    aa44:	41 9e 00 0c 	beq-    cr7,aa50 <sctp_getsockopt_peer_addrs+0x144>
		return -EFAULT;
    aa48:	38 00 ff f2 	li      r0,-14
    aa4c:	48 00 03 dc 	b       ae28 <sctp_getsockopt_peer_addrs+0x51c>

	/* For UDP-style sockets, id specifies the association to query.  */
	asoc = sctp_id2assoc(sk, getaddrs.assoc_id);
    aa50:	80 01 00 68 	lwz     r0,104(r1)
    aa54:	80 61 00 98 	lwz     r3,152(r1)
    aa58:	7c 04 03 78 	mr      r4,r0
    aa5c:	48 00 00 01 	bl      aa5c <sctp_getsockopt_peer_addrs+0x150>
    aa60:	90 61 00 24 	stw     r3,36(r1)
	if (!asoc)
    aa64:	80 01 00 24 	lwz     r0,36(r1)
    aa68:	2f 80 00 00 	cmpwi   cr7,r0,0
    aa6c:	40 9e 00 0c 	bne-    cr7,aa78 <sctp_getsockopt_peer_addrs+0x16c>
		return -EINVAL;
    aa70:	38 00 ff ea 	li      r0,-22
    aa74:	48 00 03 b4 	b       ae28 <sctp_getsockopt_peer_addrs+0x51c>

	to = optval + offsetof(struct sctp_getaddrs,addrs);
    aa78:	80 01 00 a0 	lwz     r0,160(r1)
    aa7c:	30 00 00 08 	addic   r0,r0,8
    aa80:	90 01 00 10 	stw     r0,16(r1)
	space_left = len - offsetof(struct sctp_getaddrs,addrs);
    aa84:	80 01 00 9c 	lwz     r0,156(r1)
    aa88:	30 00 ff f8 	addic   r0,r0,-8
    aa8c:	90 01 00 14 	stw     r0,20(r1)

	list_for_each_entry(from, &asoc->peer.transport_addr_list,
    aa90:	80 01 00 24 	lwz     r0,36(r1)
    aa94:	7c 07 03 78 	mr      r7,r0
    aa98:	80 07 00 e8 	lwz     r0,232(r7)
    aa9c:	90 01 00 28 	stw     r0,40(r1)
    aaa0:	80 01 00 28 	lwz     r0,40(r1)
    aaa4:	90 01 00 0c 	stw     r0,12(r1)
    aaa8:	48 00 02 08 	b       acb0 <sctp_getsockopt_peer_addrs+0x3a4>
				transports) {
		memcpy(&temp, &from->ipaddr, sizeof(temp));
    aaac:	80 01 00 0c 	lwz     r0,12(r1)
    aab0:	7c 09 03 78 	mr      r9,r0
    aab4:	81 09 00 10 	lwz     r8,16(r9)
    aab8:	7c 0b 03 78 	mr      r11,r0
    aabc:	81 4b 00 14 	lwz     r10,20(r11)
    aac0:	7c 07 03 78 	mr      r7,r0
    aac4:	81 67 00 18 	lwz     r11,24(r7)
    aac8:	7c 07 03 78 	mr      r7,r0
    aacc:	81 27 00 1c 	lwz     r9,28(r7)
    aad0:	91 01 00 70 	stw     r8,112(r1)
    aad4:	91 41 00 74 	stw     r10,116(r1)
    aad8:	91 61 00 78 	stw     r11,120(r1)
    aadc:	91 21 00 7c 	stw     r9,124(r1)
    aae0:	7c 09 03 78 	mr      r9,r0
    aae4:	81 69 00 20 	lwz     r11,32(r9)
    aae8:	7c 0a 03 78 	mr      r10,r0
    aaec:	81 2a 00 24 	lwz     r9,36(r10)
    aaf0:	7c 07 03 78 	mr      r7,r0
    aaf4:	80 07 00 28 	lwz     r0,40(r7)
    aaf8:	91 61 00 80 	stw     r11,128(r1)
    aafc:	91 21 00 84 	stw     r9,132(r1)
    ab00:	90 01 00 88 	stw     r0,136(r1)
		sctp_get_pf_specific(sk->sk_family)->addr_v4map(sp, &temp);
    ab04:	80 01 00 98 	lwz     r0,152(r1)
    ab08:	7c 09 03 78 	mr      r9,r0
    ab0c:	a0 09 00 0c 	lhz     r0,12(r9)
    ab10:	54 00 04 3e 	clrlwi  r0,r0,16
    ab14:	7c 03 03 78 	mr      r3,r0
    ab18:	48 00 00 01 	bl      ab18 <sctp_getsockopt_peer_addrs+0x20c>
    ab1c:	7c 60 1b 78 	mr      r0,r3
    ab20:	7c 0a 03 78 	mr      r10,r0
    ab24:	80 0a 00 20 	lwz     r0,32(r10)
    ab28:	39 21 00 70 	addi    r9,r1,112
    ab2c:	80 61 00 20 	lwz     r3,32(r1)
    ab30:	7d 24 4b 78 	mr      r4,r9
    ab34:	7c 09 03 a6 	mtctr   r0
    ab38:	4e 80 04 21 	bctrl
		addrlen = sctp_get_af_specific(temp.sa.sa_family)->sockaddr_len;
    ab3c:	a0 01 00 70 	lhz     r0,112(r1)
    ab40:	54 00 04 3e 	clrlwi  r0,r0,16
    ab44:	7c 03 03 78 	mr      r3,r0
    ab48:	48 00 00 01 	bl      ab48 <sctp_getsockopt_peer_addrs+0x23c>
    ab4c:	7c 60 1b 78 	mr      r0,r3
    ab50:	7c 07 03 78 	mr      r7,r0
    ab54:	80 07 00 6c 	lwz     r0,108(r7)
    ab58:	90 01 00 2c 	stw     r0,44(r1)
		if (space_left < addrlen)
    ab5c:	81 21 00 2c 	lwz     r9,44(r1)
    ab60:	80 01 00 14 	lwz     r0,20(r1)
    ab64:	7f 89 00 40 	cmplw   cr7,r9,r0
    ab68:	40 9d 00 0c 	ble-    cr7,ab74 <sctp_getsockopt_peer_addrs+0x268>
			return -ENOMEM;
    ab6c:	38 00 ff f4 	li      r0,-12
    ab70:	48 00 02 b8 	b       ae28 <sctp_getsockopt_peer_addrs+0x51c>
		if (copy_to_user(to, &temp, addrlen))
    ab74:	80 01 00 2c 	lwz     r0,44(r1)
    ab78:	81 21 00 10 	lwz     r9,16(r1)
    ab7c:	91 21 00 54 	stw     r9,84(r1)
    ab80:	39 21 00 70 	addi    r9,r1,112
    ab84:	91 21 00 58 	stw     r9,88(r1)
    ab88:	90 01 00 5c 	stw     r0,92(r1)
static inline unsigned long copy_to_user(void __user *to,
		const void *from, unsigned long n)
{
	unsigned long over;

	if (access_ok(VERIFY_WRITE, to, n))
    ab8c:	81 21 00 54 	lwz     r9,84(r1)
    ab90:	7c 40 13 78 	mr      r0,r2
    ab94:	7c 0a 03 78 	mr      r10,r0
    ab98:	80 0a 01 d4 	lwz     r0,468(r10)
    ab9c:	7f 89 00 40 	cmplw   cr7,r9,r0
    aba0:	41 9d 00 3c 	bgt-    cr7,abdc <sctp_getsockopt_peer_addrs+0x2d0>
    aba4:	80 01 00 5c 	lwz     r0,92(r1)
    aba8:	2f 80 00 00 	cmpwi   cr7,r0,0
    abac:	41 9e 00 28 	beq-    cr7,abd4 <sctp_getsockopt_peer_addrs+0x2c8>
    abb0:	80 01 00 5c 	lwz     r0,92(r1)
    abb4:	31 20 ff ff 	addic   r9,r0,-1
    abb8:	7c 40 13 78 	mr      r0,r2
    abbc:	7c 07 03 78 	mr      r7,r0
    abc0:	81 67 01 d4 	lwz     r11,468(r7)
    abc4:	80 01 00 54 	lwz     r0,84(r1)
    abc8:	7c 00 58 50 	subf    r0,r0,r11
    abcc:	7f 89 00 40 	cmplw   cr7,r9,r0
    abd0:	41 9d 00 0c 	bgt-    cr7,abdc <sctp_getsockopt_peer_addrs+0x2d0>
    abd4:	38 00 00 01 	li      r0,1
    abd8:	48 00 00 08 	b       abe0 <sctp_getsockopt_peer_addrs+0x2d4>
    abdc:	38 00 00 00 	li      r0,0
    abe0:	2f 80 00 00 	cmpwi   cr7,r0,0
    abe4:	41 9e 00 1c 	beq-    cr7,ac00 <sctp_getsockopt_peer_addrs+0x2f4>
		return __copy_tofrom_user(to, (__force void __user *)from, n);
    abe8:	80 61 00 54 	lwz     r3,84(r1)
    abec:	80 81 00 58 	lwz     r4,88(r1)
    abf0:	80 a1 00 5c 	lwz     r5,92(r1)
    abf4:	48 00 00 01 	bl      abf4 <sctp_getsockopt_peer_addrs+0x2e8>
    abf8:	7c 60 1b 78 	mr      r0,r3
    abfc:	48 00 00 60 	b       ac5c <sctp_getsockopt_peer_addrs+0x350>
	if ((unsigned long)to < TASK_SIZE) {
    ac00:	81 21 00 54 	lwz     r9,84(r1)
    ac04:	3c 00 bf ff 	lis     r0,-16385
    ac08:	60 00 ff ff 	ori     r0,r0,65535
    ac0c:	7f 89 00 40 	cmplw   cr7,r9,r0
    ac10:	41 9d 00 48 	bgt-    cr7,ac58 <sctp_getsockopt_peer_addrs+0x34c>
		over = (unsigned long)to + n - TASK_SIZE;
    ac14:	81 21 00 54 	lwz     r9,84(r1)
    ac18:	80 01 00 5c 	lwz     r0,92(r1)
    ac1c:	7c 09 02 14 	add     r0,r9,r0
    ac20:	3d 20 40 00 	lis     r9,16384
    ac24:	7c 00 4a 14 	add     r0,r0,r9
    ac28:	90 01 00 60 	stw     r0,96(r1)
		return __copy_tofrom_user(to, (__force void __user *)from,
    ac2c:	81 21 00 5c 	lwz     r9,92(r1)
    ac30:	80 01 00 60 	lwz     r0,96(r1)
    ac34:	7c 00 48 50 	subf    r0,r0,r9
    ac38:	80 61 00 54 	lwz     r3,84(r1)
    ac3c:	80 81 00 58 	lwz     r4,88(r1)
    ac40:	7c 05 03 78 	mr      r5,r0
    ac44:	48 00 00 01 	bl      ac44 <sctp_getsockopt_peer_addrs+0x338>
    ac48:	7c 69 1b 78 	mr      r9,r3
    ac4c:	80 01 00 60 	lwz     r0,96(r1)
    ac50:	7c 09 02 14 	add     r0,r9,r0
    ac54:	48 00 00 08 	b       ac5c <sctp_getsockopt_peer_addrs+0x350>
				n - over) + over;
	}
	return n;
    ac58:	80 01 00 5c 	lwz     r0,92(r1)
    ac5c:	2f 80 00 00 	cmpwi   cr7,r0,0
    ac60:	41 9e 00 0c 	beq-    cr7,ac6c <sctp_getsockopt_peer_addrs+0x360>
			return -EFAULT;
    ac64:	38 00 ff f2 	li      r0,-14
    ac68:	48 00 01 c0 	b       ae28 <sctp_getsockopt_peer_addrs+0x51c>
		to += addrlen;
    ac6c:	80 01 00 2c 	lwz     r0,44(r1)
    ac70:	81 21 00 10 	lwz     r9,16(r1)
    ac74:	7c 09 02 14 	add     r0,r9,r0
    ac78:	90 01 00 10 	stw     r0,16(r1)
		cnt++;
    ac7c:	80 01 00 08 	lwz     r0,8(r1)
    ac80:	30 00 00 01 	addic   r0,r0,1
    ac84:	90 01 00 08 	stw     r0,8(r1)
		space_left -= addrlen;
    ac88:	80 01 00 2c 	lwz     r0,44(r1)
    ac8c:	81 21 00 14 	lwz     r9,20(r1)
    ac90:	7c 00 48 50 	subf    r0,r0,r9
    ac94:	90 01 00 14 	stw     r0,20(r1)
		return -EINVAL;

	to = optval + offsetof(struct sctp_getaddrs,addrs);
	space_left = len - offsetof(struct sctp_getaddrs,addrs);

	list_for_each_entry(from, &asoc->peer.transport_addr_list,
    ac98:	80 01 00 0c 	lwz     r0,12(r1)
    ac9c:	7c 0a 03 78 	mr      r10,r0
    aca0:	80 0a 00 00 	lwz     r0,0(r10)
    aca4:	90 01 00 30 	stw     r0,48(r1)
    aca8:	80 01 00 30 	lwz     r0,48(r1)
    acac:	90 01 00 0c 	stw     r0,12(r1)
    acb0:	80 01 00 0c 	lwz     r0,12(r1)
    acb4:	7c 0b 03 78 	mr      r11,r0
    acb8:	80 0b 00 00 	lwz     r0,0(r11)
    acbc:	90 01 00 64 	stw     r0,100(r1)
#define ARCH_HAS_PREFETCHW
#define ARCH_HAS_SPINLOCK_PREFETCH

static inline void prefetch(const void *x)
{
	if (unlikely(!x))
    acc0:	80 01 00 64 	lwz     r0,100(r1)
    acc4:	2f 80 00 00 	cmpwi   cr7,r0,0
    acc8:	7c 00 00 26 	mfcr    r0
    accc:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
    acd0:	2f 80 00 00 	cmpwi   cr7,r0,0
    acd4:	40 9e 00 0c 	bne-    cr7,ace0 <sctp_getsockopt_peer_addrs+0x3d4>
		return;

	__asm__ __volatile__ ("dcbt 0,%0" : : "r" (x));
    acd8:	80 01 00 64 	lwz     r0,100(r1)
    acdc:	7c 00 02 2c 	dcbt    r0,r0
    ace0:	81 21 00 0c 	lwz     r9,12(r1)
    ace4:	80 01 00 24 	lwz     r0,36(r1)
    ace8:	30 00 00 e8 	addic   r0,r0,232
    acec:	7f 89 00 00 	cmpw    cr7,r9,r0
    acf0:	40 9e fd bc 	bne+    cr7,aaac <sctp_getsockopt_peer_addrs+0x1a0>
		to += addrlen;
		cnt++;
		space_left -= addrlen;
	}

	if (put_user(cnt, &((struct sctp_getaddrs __user *)optval)->addr_num))
    acf4:	38 00 ff f2 	li      r0,-14
    acf8:	90 01 00 18 	stw     r0,24(r1)
    acfc:	80 01 00 a0 	lwz     r0,160(r1)
    ad00:	30 00 00 04 	addic   r0,r0,4
    ad04:	90 01 00 34 	stw     r0,52(r1)
    ad08:	81 21 00 34 	lwz     r9,52(r1)
    ad0c:	7c 40 13 78 	mr      r0,r2
    ad10:	7c 07 03 78 	mr      r7,r0
    ad14:	80 07 01 d4 	lwz     r0,468(r7)
    ad18:	7f 89 00 40 	cmplw   cr7,r9,r0
    ad1c:	41 9d 00 28 	bgt-    cr7,ad44 <sctp_getsockopt_peer_addrs+0x438>
    ad20:	7c 40 13 78 	mr      r0,r2
    ad24:	7c 0a 03 78 	mr      r10,r0
    ad28:	81 2a 01 d4 	lwz     r9,468(r10)
    ad2c:	80 01 00 34 	lwz     r0,52(r1)
    ad30:	7c 00 48 50 	subf    r0,r0,r9
    ad34:	2b 80 00 02 	cmplwi  cr7,r0,2
    ad38:	40 9d 00 0c 	ble-    cr7,ad44 <sctp_getsockopt_peer_addrs+0x438>
    ad3c:	38 00 00 01 	li      r0,1
    ad40:	48 00 00 08 	b       ad48 <sctp_getsockopt_peer_addrs+0x43c>
    ad44:	38 00 00 00 	li      r0,0
    ad48:	2f 80 00 00 	cmpwi   cr7,r0,0
    ad4c:	41 9e 00 24 	beq-    cr7,ad70 <sctp_getsockopt_peer_addrs+0x464>
    ad50:	38 00 00 00 	li      r0,0
    ad54:	90 01 00 18 	stw     r0,24(r1)
    ad58:	80 01 00 08 	lwz     r0,8(r1)
    ad5c:	81 21 00 34 	lwz     r9,52(r1)
    ad60:	81 61 00 18 	lwz     r11,24(r1)
    ad64:	7d 7f 5b 78 	mr      r31,r11
    ad68:	90 09 00 00 	stw     r0,0(r9)
    ad6c:	93 e1 00 18 	stw     r31,24(r1)
    ad70:	80 01 00 18 	lwz     r0,24(r1)
    ad74:	2f 80 00 00 	cmpwi   cr7,r0,0
    ad78:	41 9e 00 0c 	beq-    cr7,ad84 <sctp_getsockopt_peer_addrs+0x478>
		return -EFAULT;
    ad7c:	38 00 ff f2 	li      r0,-14
    ad80:	48 00 00 a8 	b       ae28 <sctp_getsockopt_peer_addrs+0x51c>
	bytes_copied = ((char __user *)to) - optval;
    ad84:	81 21 00 10 	lwz     r9,16(r1)
    ad88:	80 01 00 a0 	lwz     r0,160(r1)
    ad8c:	7c 00 48 50 	subf    r0,r0,r9
    ad90:	90 01 00 38 	stw     r0,56(r1)
	if (put_user(bytes_copied, optlen))
    ad94:	38 00 ff f2 	li      r0,-14
    ad98:	90 01 00 1c 	stw     r0,28(r1)
    ad9c:	80 01 00 a4 	lwz     r0,164(r1)
    ada0:	90 01 00 3c 	stw     r0,60(r1)
    ada4:	81 21 00 3c 	lwz     r9,60(r1)
    ada8:	7c 40 13 78 	mr      r0,r2
    adac:	7c 0b 03 78 	mr      r11,r0
    adb0:	80 0b 01 d4 	lwz     r0,468(r11)
    adb4:	7f 89 00 40 	cmplw   cr7,r9,r0
    adb8:	41 9d 00 28 	bgt-    cr7,ade0 <sctp_getsockopt_peer_addrs+0x4d4>
    adbc:	7c 40 13 78 	mr      r0,r2
    adc0:	7c 07 03 78 	mr      r7,r0
    adc4:	81 27 01 d4 	lwz     r9,468(r7)
    adc8:	80 01 00 3c 	lwz     r0,60(r1)
    adcc:	7c 00 48 50 	subf    r0,r0,r9
    add0:	2b 80 00 02 	cmplwi  cr7,r0,2
    add4:	40 9d 00 0c 	ble-    cr7,ade0 <sctp_getsockopt_peer_addrs+0x4d4>
    add8:	38 00 00 01 	li      r0,1
    addc:	48 00 00 08 	b       ade4 <sctp_getsockopt_peer_addrs+0x4d8>
    ade0:	38 00 00 00 	li      r0,0
    ade4:	2f 80 00 00 	cmpwi   cr7,r0,0
    ade8:	41 9e 00 28 	beq-    cr7,ae10 <sctp_getsockopt_peer_addrs+0x504>
    adec:	38 00 00 00 	li      r0,0
    adf0:	90 01 00 1c 	stw     r0,28(r1)
    adf4:	80 01 00 38 	lwz     r0,56(r1)
    adf8:	81 21 00 3c 	lwz     r9,60(r1)
    adfc:	81 61 00 1c 	lwz     r11,28(r1)
    ae00:	7d 7f 5b 78 	mr      r31,r11
    ae04:	90 09 00 00 	stw     r0,0(r9)
    ae08:	93 e1 00 1c 	stw     r31,28(r1)
    ae0c:	60 00 00 00 	nop
    ae10:	80 01 00 1c 	lwz     r0,28(r1)
    ae14:	2f 80 00 00 	cmpwi   cr7,r0,0
    ae18:	41 9e 00 0c 	beq-    cr7,ae24 <sctp_getsockopt_peer_addrs+0x518>
		return -EFAULT;
    ae1c:	38 00 ff f2 	li      r0,-14
    ae20:	48 00 00 08 	b       ae28 <sctp_getsockopt_peer_addrs+0x51c>

	return 0;
    ae24:	38 00 00 00 	li      r0,0
}
    ae28:	7c 03 03 78 	mr      r3,r0
    ae2c:	80 01 00 b4 	lwz     r0,180(r1)
    ae30:	7c 08 03 a6 	mtlr    r0
    ae34:	83 e1 00 ac 	lwz     r31,172(r1)
    ae38:	38 21 00 b0 	addi    r1,r1,176
    ae3c:	4e 80 00 20 	blr

0000ae40 <sctp_copy_laddrs>:

static int sctp_copy_laddrs(struct sock *sk, __u16 port, void *to,
			    size_t space_left, int *bytes_copied)
{
    ae40:	94 21 ff 80 	stwu    r1,-128(r1)
    ae44:	7c 08 02 a6 	mflr    r0
    ae48:	90 01 00 84 	stw     r0,132(r1)
    ae4c:	90 61 00 68 	stw     r3,104(r1)
    ae50:	7c 80 23 78 	mr      r0,r4
    ae54:	90 a1 00 70 	stw     r5,112(r1)
    ae58:	90 c1 00 74 	stw     r6,116(r1)
    ae5c:	90 e1 00 78 	stw     r7,120(r1)
    ae60:	b0 01 00 6c 	sth     r0,108(r1)
	struct sctp_sockaddr_entry *addr;
	union sctp_addr temp;
	int cnt = 0;
    ae64:	38 00 00 00 	li      r0,0
    ae68:	90 01 00 0c 	stw     r0,12(r1)
	int addrlen;

	rcu_read_lock();
	list_for_each_entry_rcu(addr, &sctp_local_addr_list, list) {
    ae6c:	3c 00 00 00 	lis     r0,0
    ae70:	30 00 00 00 	addic   r0,r0,0
    ae74:	7c 07 03 78 	mr      r7,r0
    ae78:	80 07 00 60 	lwz     r0,96(r7)
    ae7c:	90 01 00 58 	stw     r0,88(r1)
    ae80:	38 01 00 58 	addi    r0,r1,88
    ae84:	7c 09 03 78 	mr      r9,r0
    ae88:	80 09 00 00 	lwz     r0,0(r9)
    ae8c:	90 01 00 10 	stw     r0,16(r1)
    ae90:	80 01 00 10 	lwz     r0,16(r1)
    ae94:	90 01 00 14 	stw     r0,20(r1)
    ae98:	80 01 00 14 	lwz     r0,20(r1)
    ae9c:	90 01 00 08 	stw     r0,8(r1)
    aea0:	48 00 02 cc 	b       b16c <sctp_copy_laddrs+0x32c>
		if (!addr->valid)
    aea4:	80 01 00 08 	lwz     r0,8(r1)
    aea8:	7c 0a 03 78 	mr      r10,r0
    aeac:	88 0a 00 2d 	lbz     r0,45(r10)
    aeb0:	54 00 06 3e 	clrlwi  r0,r0,24
    aeb4:	2f 80 00 00 	cmpwi   cr7,r0,0
    aeb8:	41 9e 02 70 	beq-    cr7,b128 <sctp_copy_laddrs+0x2e8>
			continue;

		if ((PF_INET == sk->sk_family) &&
    aebc:	80 01 00 68 	lwz     r0,104(r1)
    aec0:	7c 0b 03 78 	mr      r11,r0
    aec4:	a0 0b 00 0c 	lhz     r0,12(r11)
    aec8:	54 00 04 3e 	clrlwi  r0,r0,16
    aecc:	2f 80 00 02 	cmpwi   cr7,r0,2
    aed0:	40 9e 00 1c 	bne-    cr7,aeec <sctp_copy_laddrs+0xac>
		    (AF_INET6 == addr->a.sa.sa_family))
    aed4:	80 01 00 08 	lwz     r0,8(r1)
    aed8:	7c 07 03 78 	mr      r7,r0
    aedc:	a0 07 00 10 	lhz     r0,16(r7)
    aee0:	54 00 04 3e 	clrlwi  r0,r0,16
	rcu_read_lock();
	list_for_each_entry_rcu(addr, &sctp_local_addr_list, list) {
		if (!addr->valid)
			continue;

		if ((PF_INET == sk->sk_family) &&
    aee4:	2f 80 00 0a 	cmpwi   cr7,r0,10
    aee8:	41 9e 02 48 	beq-    cr7,b130 <sctp_copy_laddrs+0x2f0>
		    (AF_INET6 == addr->a.sa.sa_family))
			continue;
		if ((PF_INET6 == sk->sk_family) &&
    aeec:	80 01 00 68 	lwz     r0,104(r1)
    aef0:	7c 09 03 78 	mr      r9,r0
    aef4:	a0 09 00 0c 	lhz     r0,12(r9)
    aef8:	54 00 04 3e 	clrlwi  r0,r0,16
    aefc:	2f 80 00 0a 	cmpwi   cr7,r0,10
    af00:	40 9e 00 c8 	bne-    cr7,afc8 <sctp_copy_laddrs+0x188>
    af04:	80 01 00 68 	lwz     r0,104(r1)
    af08:	90 01 00 24 	stw     r0,36(r1)
	return sk->sk_family == AF_INET6 ? __inet6_rcv_saddr(sk) : NULL;
}

static inline int inet_v6_ipv6only(const struct sock *sk)
{
	return likely(sk->sk_state != TCP_TIME_WAIT) ?
    af0c:	80 01 00 24 	lwz     r0,36(r1)
    af10:	7c 0a 03 78 	mr      r10,r0
    af14:	88 0a 00 0e 	lbz     r0,14(r10)
    af18:	54 00 06 3e 	clrlwi  r0,r0,24
    af1c:	68 00 00 06 	xori    r0,r0,6
    af20:	54 00 06 3e 	clrlwi  r0,r0,24
    af24:	7c 00 00 d0 	neg     r0,r0
    af28:	54 00 0f fe 	rlwinm  r0,r0,1,31,31
		ipv6_only_sock(sk) : inet_twsk(sk)->tw_ipv6only;
    af2c:	2f 80 00 00 	cmpwi   cr7,r0,0
    af30:	41 9e 00 5c 	beq-    cr7,af8c <sctp_copy_laddrs+0x14c>
    af34:	80 01 00 24 	lwz     r0,36(r1)
    af38:	7c 0b 03 78 	mr      r11,r0
    af3c:	a0 0b 00 0c 	lhz     r0,12(r11)
    af40:	54 00 04 3e 	clrlwi  r0,r0,16
    af44:	2f 80 00 0a 	cmpwi   cr7,r0,10
    af48:	40 9e 00 3c 	bne-    cr7,af84 <sctp_copy_laddrs+0x144>
    af4c:	80 01 00 24 	lwz     r0,36(r1)
    af50:	90 01 00 28 	stw     r0,40(r1)
    af54:	80 01 00 28 	lwz     r0,40(r1)
    af58:	90 01 00 2c 	stw     r0,44(r1)
    af5c:	80 01 00 2c 	lwz     r0,44(r1)
extern int inet6_sk_rebuild_header(struct sock *sk);

#if defined(CONFIG_IPV6) || defined(CONFIG_IPV6_MODULE)
static inline struct ipv6_pinfo * inet6_sk(const struct sock *__sk)
{
	return inet_sk(__sk)->pinet6;
    af60:	7c 07 03 78 	mr      r7,r0
    af64:	80 07 01 48 	lwz     r0,328(r7)
}

static inline int inet_v6_ipv6only(const struct sock *sk)
{
	return likely(sk->sk_state != TCP_TIME_WAIT) ?
		ipv6_only_sock(sk) : inet_twsk(sk)->tw_ipv6only;
    af68:	7c 09 03 78 	mr      r9,r0
    af6c:	80 09 00 58 	lwz     r0,88(r9)
    af70:	54 00 05 28 	rlwinm  r0,r0,0,20,20
    af74:	2f 80 00 00 	cmpwi   cr7,r0,0
    af78:	41 9e 00 0c 	beq-    cr7,af84 <sctp_copy_laddrs+0x144>
    af7c:	38 00 00 01 	li      r0,1
    af80:	48 00 00 08 	b       af88 <sctp_copy_laddrs+0x148>
    af84:	38 00 00 00 	li      r0,0
    af88:	48 00 00 20 	b       afa8 <sctp_copy_laddrs+0x168>
    af8c:	80 01 00 24 	lwz     r0,36(r1)
    af90:	90 01 00 30 	stw     r0,48(r1)
#define inet_twsk_for_each_inmate_safe(tw, node, safe, jail) \
	hlist_for_each_entry_safe(tw, node, safe, jail, tw_death_node)

static inline struct inet_timewait_sock *inet_twsk(const struct sock *sk)
{
	return (struct inet_timewait_sock *)sk;
    af94:	80 01 00 30 	lwz     r0,48(r1)
    af98:	7c 0a 03 78 	mr      r10,r0
    af9c:	80 0a 00 3c 	lwz     r0,60(r10)
    afa0:	54 00 0f fe 	rlwinm  r0,r0,1,31,31
    afa4:	54 00 06 3e 	clrlwi  r0,r0,24
    afa8:	2f 80 00 00 	cmpwi   cr7,r0,0
    afac:	41 9e 00 1c 	beq-    cr7,afc8 <sctp_copy_laddrs+0x188>
		    inet_v6_ipv6only(sk) &&
		    (AF_INET == addr->a.sa.sa_family))
    afb0:	80 01 00 08 	lwz     r0,8(r1)
    afb4:	7c 0b 03 78 	mr      r11,r0
    afb8:	a0 0b 00 10 	lhz     r0,16(r11)
    afbc:	54 00 04 3e 	clrlwi  r0,r0,16

		if ((PF_INET == sk->sk_family) &&
		    (AF_INET6 == addr->a.sa.sa_family))
			continue;
		if ((PF_INET6 == sk->sk_family) &&
		    inet_v6_ipv6only(sk) &&
    afc0:	2f 80 00 02 	cmpwi   cr7,r0,2
    afc4:	41 9e 01 74 	beq-    cr7,b138 <sctp_copy_laddrs+0x2f8>
		    (AF_INET == addr->a.sa.sa_family))
			continue;
		memcpy(&temp, &addr->a, sizeof(temp));
    afc8:	80 01 00 08 	lwz     r0,8(r1)
    afcc:	7c 07 03 78 	mr      r7,r0
    afd0:	81 07 00 10 	lwz     r8,16(r7)
    afd4:	7c 09 03 78 	mr      r9,r0
    afd8:	81 49 00 14 	lwz     r10,20(r9)
    afdc:	7c 07 03 78 	mr      r7,r0
    afe0:	81 67 00 18 	lwz     r11,24(r7)
    afe4:	7c 07 03 78 	mr      r7,r0
    afe8:	81 27 00 1c 	lwz     r9,28(r7)
    afec:	91 01 00 3c 	stw     r8,60(r1)
    aff0:	91 41 00 40 	stw     r10,64(r1)
    aff4:	91 61 00 44 	stw     r11,68(r1)
    aff8:	91 21 00 48 	stw     r9,72(r1)
    affc:	7c 09 03 78 	mr      r9,r0
    b000:	81 69 00 20 	lwz     r11,32(r9)
    b004:	7c 0a 03 78 	mr      r10,r0
    b008:	81 2a 00 24 	lwz     r9,36(r10)
    b00c:	7c 07 03 78 	mr      r7,r0
    b010:	80 07 00 28 	lwz     r0,40(r7)
    b014:	91 61 00 4c 	stw     r11,76(r1)
    b018:	91 21 00 50 	stw     r9,80(r1)
    b01c:	90 01 00 54 	stw     r0,84(r1)
		if (!temp.v4.sin_port)
    b020:	a0 01 00 3e 	lhz     r0,62(r1)
    b024:	54 00 04 3e 	clrlwi  r0,r0,16
    b028:	2f 80 00 00 	cmpwi   cr7,r0,0
    b02c:	40 9e 00 0c 	bne-    cr7,b038 <sctp_copy_laddrs+0x1f8>
			temp.v4.sin_port = htons(port);
    b030:	a0 01 00 6c 	lhz     r0,108(r1)
    b034:	b0 01 00 3e 	sth     r0,62(r1)

		sctp_get_pf_specific(sk->sk_family)->addr_v4map(sctp_sk(sk),
    b038:	80 01 00 68 	lwz     r0,104(r1)
    b03c:	7c 09 03 78 	mr      r9,r0
    b040:	a0 09 00 0c 	lhz     r0,12(r9)
    b044:	54 00 04 3e 	clrlwi  r0,r0,16
    b048:	7c 03 03 78 	mr      r3,r0
    b04c:	48 00 00 01 	bl      b04c <sctp_copy_laddrs+0x20c>
    b050:	7c 60 1b 78 	mr      r0,r3
    b054:	7c 0a 03 78 	mr      r10,r0
    b058:	80 0a 00 20 	lwz     r0,32(r10)
    b05c:	81 21 00 68 	lwz     r9,104(r1)
    b060:	91 21 00 34 	stw     r9,52(r1)
    b064:	81 21 00 34 	lwz     r9,52(r1)
    b068:	7d 2b 4b 78 	mr      r11,r9
    b06c:	39 21 00 3c 	addi    r9,r1,60
    b070:	7d 63 5b 78 	mr      r3,r11
    b074:	7d 24 4b 78 	mr      r4,r9
    b078:	7c 09 03 a6 	mtctr   r0
    b07c:	4e 80 04 21 	bctrl
								&temp);
		addrlen = sctp_get_af_specific(temp.sa.sa_family)->sockaddr_len;
    b080:	a0 01 00 3c 	lhz     r0,60(r1)
    b084:	54 00 04 3e 	clrlwi  r0,r0,16
    b088:	7c 03 03 78 	mr      r3,r0
    b08c:	48 00 00 01 	bl      b08c <sctp_copy_laddrs+0x24c>
    b090:	7c 60 1b 78 	mr      r0,r3
    b094:	7c 07 03 78 	mr      r7,r0
    b098:	80 07 00 6c 	lwz     r0,108(r7)
    b09c:	90 01 00 18 	stw     r0,24(r1)
		if (space_left < addrlen) {
    b0a0:	81 21 00 18 	lwz     r9,24(r1)
    b0a4:	80 01 00 74 	lwz     r0,116(r1)
    b0a8:	7f 89 00 40 	cmplw   cr7,r9,r0
    b0ac:	40 9d 00 10 	ble-    cr7,b0bc <sctp_copy_laddrs+0x27c>
			cnt =  -ENOMEM;
    b0b0:	38 00 ff f4 	li      r0,-12
    b0b4:	90 01 00 0c 	stw     r0,12(r1)
			break;
    b0b8:	48 00 00 f8 	b       b1b0 <sctp_copy_laddrs+0x370>
		}
		memcpy(to, &temp, addrlen);
    b0bc:	80 01 00 18 	lwz     r0,24(r1)
    b0c0:	81 61 00 70 	lwz     r11,112(r1)
    b0c4:	39 21 00 3c 	addi    r9,r1,60
    b0c8:	7d 63 5b 78 	mr      r3,r11
    b0cc:	7d 24 4b 78 	mr      r4,r9
    b0d0:	7c 05 03 78 	mr      r5,r0
    b0d4:	48 00 00 01 	bl      b0d4 <sctp_copy_laddrs+0x294>

		to += addrlen;
    b0d8:	80 01 00 18 	lwz     r0,24(r1)
    b0dc:	81 21 00 70 	lwz     r9,112(r1)
    b0e0:	7c 09 02 14 	add     r0,r9,r0
    b0e4:	90 01 00 70 	stw     r0,112(r1)
		cnt ++;
    b0e8:	80 01 00 0c 	lwz     r0,12(r1)
    b0ec:	30 00 00 01 	addic   r0,r0,1
    b0f0:	90 01 00 0c 	stw     r0,12(r1)
		space_left -= addrlen;
    b0f4:	80 01 00 18 	lwz     r0,24(r1)
    b0f8:	81 21 00 74 	lwz     r9,116(r1)
    b0fc:	7c 00 48 50 	subf    r0,r0,r9
    b100:	90 01 00 74 	stw     r0,116(r1)
		*bytes_copied += addrlen;
    b104:	80 01 00 78 	lwz     r0,120(r1)
    b108:	7c 0a 03 78 	mr      r10,r0
    b10c:	81 2a 00 00 	lwz     r9,0(r10)
    b110:	80 01 00 18 	lwz     r0,24(r1)
    b114:	7d 29 02 14 	add     r9,r9,r0
    b118:	80 01 00 78 	lwz     r0,120(r1)
    b11c:	7c 0b 03 78 	mr      r11,r0
    b120:	91 2b 00 00 	stw     r9,0(r11)
    b124:	48 00 00 18 	b       b13c <sctp_copy_laddrs+0x2fc>
	int addrlen;

	rcu_read_lock();
	list_for_each_entry_rcu(addr, &sctp_local_addr_list, list) {
		if (!addr->valid)
			continue;
    b128:	60 00 00 00 	nop
    b12c:	48 00 00 10 	b       b13c <sctp_copy_laddrs+0x2fc>

		if ((PF_INET == sk->sk_family) &&
		    (AF_INET6 == addr->a.sa.sa_family))
			continue;
    b130:	60 00 00 00 	nop
    b134:	48 00 00 08 	b       b13c <sctp_copy_laddrs+0x2fc>
		if ((PF_INET6 == sk->sk_family) &&
		    inet_v6_ipv6only(sk) &&
		    (AF_INET == addr->a.sa.sa_family))
			continue;
    b138:	60 00 00 00 	nop
	union sctp_addr temp;
	int cnt = 0;
	int addrlen;

	rcu_read_lock();
	list_for_each_entry_rcu(addr, &sctp_local_addr_list, list) {
    b13c:	80 01 00 08 	lwz     r0,8(r1)
    b140:	7c 07 03 78 	mr      r7,r0
    b144:	80 07 00 00 	lwz     r0,0(r7)
    b148:	90 01 00 5c 	stw     r0,92(r1)
    b14c:	38 01 00 5c 	addi    r0,r1,92
    b150:	7c 09 03 78 	mr      r9,r0
    b154:	80 09 00 00 	lwz     r0,0(r9)
    b158:	90 01 00 1c 	stw     r0,28(r1)
    b15c:	80 01 00 1c 	lwz     r0,28(r1)
    b160:	90 01 00 20 	stw     r0,32(r1)
    b164:	80 01 00 20 	lwz     r0,32(r1)
    b168:	90 01 00 08 	stw     r0,8(r1)
    b16c:	80 01 00 08 	lwz     r0,8(r1)
    b170:	7c 0a 03 78 	mr      r10,r0
    b174:	80 0a 00 00 	lwz     r0,0(r10)
    b178:	90 01 00 38 	stw     r0,56(r1)
#define ARCH_HAS_PREFETCHW
#define ARCH_HAS_SPINLOCK_PREFETCH

static inline void prefetch(const void *x)
{
	if (unlikely(!x))
    b17c:	80 01 00 38 	lwz     r0,56(r1)
    b180:	2f 80 00 00 	cmpwi   cr7,r0,0
    b184:	7c 00 00 26 	mfcr    r0
    b188:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
    b18c:	2f 80 00 00 	cmpwi   cr7,r0,0
    b190:	40 9e 00 0c 	bne-    cr7,b19c <sctp_copy_laddrs+0x35c>
		return;

	__asm__ __volatile__ ("dcbt 0,%0" : : "r" (x));
    b194:	80 01 00 38 	lwz     r0,56(r1)
    b198:	7c 00 02 2c 	dcbt    r0,r0
    b19c:	81 21 00 08 	lwz     r9,8(r1)
    b1a0:	3c 00 00 00 	lis     r0,0
    b1a4:	30 00 00 60 	addic   r0,r0,96
    b1a8:	7f 89 00 00 	cmpw    cr7,r9,r0
    b1ac:	40 9e fc f8 	bne+    cr7,aea4 <sctp_copy_laddrs+0x64>
		space_left -= addrlen;
		*bytes_copied += addrlen;
	}
	rcu_read_unlock();

	return cnt;
    b1b0:	80 01 00 0c 	lwz     r0,12(r1)
}
    b1b4:	7c 03 03 78 	mr      r3,r0
    b1b8:	80 01 00 84 	lwz     r0,132(r1)
    b1bc:	7c 08 03 a6 	mtlr    r0
    b1c0:	38 21 00 80 	addi    r1,r1,128
    b1c4:	4e 80 00 20 	blr

0000b1c8 <sctp_getsockopt_local_addrs>:


static int sctp_getsockopt_local_addrs(struct sock *sk, int len,
				       char __user *optval, int __user *optlen)
{
    b1c8:	94 21 ff 30 	stwu    r1,-208(r1)
    b1cc:	7c 08 02 a6 	mflr    r0
    b1d0:	90 01 00 d4 	stw     r0,212(r1)
    b1d4:	93 e1 00 cc 	stw     r31,204(r1)
    b1d8:	90 61 00 b8 	stw     r3,184(r1)
    b1dc:	90 81 00 bc 	stw     r4,188(r1)
    b1e0:	90 a1 00 c0 	stw     r5,192(r1)
    b1e4:	90 c1 00 c4 	stw     r6,196(r1)
	struct sctp_bind_addr *bp;
	struct sctp_association *asoc;
	int cnt = 0;
    b1e8:	38 00 00 00 	li      r0,0
    b1ec:	90 01 00 0c 	stw     r0,12(r1)
    b1f0:	80 01 00 b8 	lwz     r0,184(r1)
    b1f4:	90 01 00 50 	stw     r0,80(r1)
    b1f8:	80 01 00 50 	lwz     r0,80(r1)
	struct sctp_getaddrs getaddrs;
	struct sctp_sockaddr_entry *addr;
	void __user *to;
	union sctp_addr temp;
	struct sctp_sock *sp = sctp_sk(sk);
    b1fc:	90 01 00 28 	stw     r0,40(r1)
	int addrlen;
	int err = 0;
    b200:	38 00 00 00 	li      r0,0
    b204:	90 01 00 14 	stw     r0,20(r1)
	size_t space_left;
	int bytes_copied = 0;
    b208:	38 00 00 00 	li      r0,0
    b20c:	90 01 00 ac 	stw     r0,172(r1)
	void *addrs;
	void *buf;

	if (len < sizeof(struct sctp_getaddrs))
    b210:	80 01 00 bc 	lwz     r0,188(r1)
    b214:	2b 80 00 07 	cmplwi  cr7,r0,7
    b218:	41 9d 00 0c 	bgt-    cr7,b224 <sctp_getsockopt_local_addrs+0x5c>
		return -EINVAL;
    b21c:	38 00 ff ea 	li      r0,-22
    b220:	48 00 06 5c 	b       b87c <sctp_getsockopt_local_addrs+0x6b4>

	if (copy_from_user(&getaddrs, optval, sizeof(struct sctp_getaddrs)))
    b224:	38 01 00 88 	addi    r0,r1,136
	int bytes_copied = 0;
	void *addrs;
	void *buf;

	if (len < sizeof(struct sctp_getaddrs))
		return -EINVAL;
    b228:	90 01 00 54 	stw     r0,84(r1)
    b22c:	80 01 00 c0 	lwz     r0,192(r1)
    b230:	90 01 00 58 	stw     r0,88(r1)
    b234:	38 00 00 08 	li      r0,8
    b238:	90 01 00 5c 	stw     r0,92(r1)
static inline unsigned long copy_from_user(void *to,
		const void __user *from, unsigned long n)
{
	unsigned long over;

	if (access_ok(VERIFY_READ, from, n))
    b23c:	81 21 00 58 	lwz     r9,88(r1)
    b240:	7c 40 13 78 	mr      r0,r2
    b244:	7c 07 03 78 	mr      r7,r0
    b248:	80 07 01 d4 	lwz     r0,468(r7)
    b24c:	7f 89 00 40 	cmplw   cr7,r9,r0
    b250:	41 9d 00 3c 	bgt-    cr7,b28c <sctp_getsockopt_local_addrs+0xc4>
    b254:	80 01 00 5c 	lwz     r0,92(r1)
    b258:	2f 80 00 00 	cmpwi   cr7,r0,0
    b25c:	41 9e 00 28 	beq-    cr7,b284 <sctp_getsockopt_local_addrs+0xbc>
    b260:	80 01 00 5c 	lwz     r0,92(r1)
    b264:	31 20 ff ff 	addic   r9,r0,-1
    b268:	7c 40 13 78 	mr      r0,r2
    b26c:	7c 0a 03 78 	mr      r10,r0
    b270:	81 6a 01 d4 	lwz     r11,468(r10)
    b274:	80 01 00 58 	lwz     r0,88(r1)
    b278:	7c 00 58 50 	subf    r0,r0,r11
    b27c:	7f 89 00 40 	cmplw   cr7,r9,r0
    b280:	41 9d 00 0c 	bgt-    cr7,b28c <sctp_getsockopt_local_addrs+0xc4>
    b284:	38 00 00 01 	li      r0,1
    b288:	48 00 00 08 	b       b290 <sctp_getsockopt_local_addrs+0xc8>
    b28c:	38 00 00 00 	li      r0,0
    b290:	2f 80 00 00 	cmpwi   cr7,r0,0
    b294:	41 9e 00 1c 	beq-    cr7,b2b0 <sctp_getsockopt_local_addrs+0xe8>
		return __copy_tofrom_user((__force void __user *)to, from, n);
    b298:	80 61 00 54 	lwz     r3,84(r1)
    b29c:	80 81 00 58 	lwz     r4,88(r1)
    b2a0:	80 a1 00 5c 	lwz     r5,92(r1)
    b2a4:	48 00 00 01 	bl      b2a4 <sctp_getsockopt_local_addrs+0xdc>
    b2a8:	7c 60 1b 78 	mr      r0,r3
    b2ac:	48 00 00 60 	b       b30c <sctp_getsockopt_local_addrs+0x144>
	if ((unsigned long)from < TASK_SIZE) {
    b2b0:	81 21 00 58 	lwz     r9,88(r1)
    b2b4:	3c 00 bf ff 	lis     r0,-16385
    b2b8:	60 00 ff ff 	ori     r0,r0,65535
    b2bc:	7f 89 00 40 	cmplw   cr7,r9,r0
    b2c0:	41 9d 00 48 	bgt-    cr7,b308 <sctp_getsockopt_local_addrs+0x140>
		over = (unsigned long)from + n - TASK_SIZE;
    b2c4:	81 21 00 58 	lwz     r9,88(r1)
    b2c8:	80 01 00 5c 	lwz     r0,92(r1)
    b2cc:	7c 09 02 14 	add     r0,r9,r0
    b2d0:	3d 60 40 00 	lis     r11,16384
    b2d4:	7c 00 5a 14 	add     r0,r0,r11
    b2d8:	90 01 00 60 	stw     r0,96(r1)
		return __copy_tofrom_user((__force void __user *)to, from,
    b2dc:	81 21 00 5c 	lwz     r9,92(r1)
    b2e0:	80 01 00 60 	lwz     r0,96(r1)
    b2e4:	7c 00 48 50 	subf    r0,r0,r9
    b2e8:	80 61 00 54 	lwz     r3,84(r1)
    b2ec:	80 81 00 58 	lwz     r4,88(r1)
    b2f0:	7c 05 03 78 	mr      r5,r0
    b2f4:	48 00 00 01 	bl      b2f4 <sctp_getsockopt_local_addrs+0x12c>
    b2f8:	7c 69 1b 78 	mr      r9,r3
    b2fc:	80 01 00 60 	lwz     r0,96(r1)
    b300:	7c 09 02 14 	add     r0,r9,r0
    b304:	48 00 00 08 	b       b30c <sctp_getsockopt_local_addrs+0x144>
				n - over) + over;
	}
	return n;
    b308:	80 01 00 5c 	lwz     r0,92(r1)

	if (copy_from_user(&getaddrs, optval, sizeof(struct sctp_getaddrs)))
    b30c:	2f 80 00 00 	cmpwi   cr7,r0,0
    b310:	41 9e 00 0c 	beq-    cr7,b31c <sctp_getsockopt_local_addrs+0x154>
		return -EFAULT;
    b314:	38 00 ff f2 	li      r0,-14
    b318:	48 00 05 64 	b       b87c <sctp_getsockopt_local_addrs+0x6b4>
	 *  For UDP-style sockets, id specifies the association to query.
	 *  If the id field is set to the value '0' then the locally bound
	 *  addresses are returned without regard to any particular
	 *  association.
	 */
	if (0 == getaddrs.assoc_id) {
    b31c:	80 01 00 88 	lwz     r0,136(r1)
    b320:	2f 80 00 00 	cmpwi   cr7,r0,0
    b324:	40 9e 00 24 	bne-    cr7,b348 <sctp_getsockopt_local_addrs+0x180>
    b328:	80 01 00 b8 	lwz     r0,184(r1)
    b32c:	90 01 00 64 	stw     r0,100(r1)
    b330:	80 01 00 64 	lwz     r0,100(r1)
		bp = &sctp_sk(sk)->ep->base.bind_addr;
    b334:	7c 07 03 78 	mr      r7,r0
    b338:	80 07 01 d4 	lwz     r0,468(r7)
    b33c:	30 00 00 3c 	addic   r0,r0,60
    b340:	90 01 00 08 	stw     r0,8(r1)
    b344:	48 00 00 38 	b       b37c <sctp_getsockopt_local_addrs+0x1b4>
	} else {
		asoc = sctp_id2assoc(sk, getaddrs.assoc_id);
    b348:	80 01 00 88 	lwz     r0,136(r1)
    b34c:	80 61 00 b8 	lwz     r3,184(r1)
    b350:	7c 04 03 78 	mr      r4,r0
    b354:	48 00 00 01 	bl      b354 <sctp_getsockopt_local_addrs+0x18c>
    b358:	90 61 00 2c 	stw     r3,44(r1)
		if (!asoc)
    b35c:	80 01 00 2c 	lwz     r0,44(r1)
    b360:	2f 80 00 00 	cmpwi   cr7,r0,0
    b364:	40 9e 00 0c 	bne-    cr7,b370 <sctp_getsockopt_local_addrs+0x1a8>
			return -EINVAL;
    b368:	38 00 ff ea 	li      r0,-22
    b36c:	48 00 05 10 	b       b87c <sctp_getsockopt_local_addrs+0x6b4>
		bp = &asoc->base.bind_addr;
    b370:	80 01 00 2c 	lwz     r0,44(r1)
    b374:	30 00 00 3c 	addic   r0,r0,60
    b378:	90 01 00 08 	stw     r0,8(r1)
	}

	to = optval + offsetof(struct sctp_getaddrs,addrs);
    b37c:	80 01 00 c0 	lwz     r0,192(r1)
    b380:	30 00 00 08 	addic   r0,r0,8
    b384:	90 01 00 30 	stw     r0,48(r1)
	space_left = len - offsetof(struct sctp_getaddrs,addrs);
    b388:	80 01 00 bc 	lwz     r0,188(r1)
    b38c:	30 00 ff f8 	addic   r0,r0,-8
    b390:	90 01 00 18 	stw     r0,24(r1)
    b394:	80 01 00 18 	lwz     r0,24(r1)
    b398:	90 01 00 68 	stw     r0,104(r1)
    b39c:	38 00 00 d0 	li      r0,208
    b3a0:	90 01 00 6c 	stw     r0,108(r1)
    b3a4:	80 61 00 68 	lwz     r3,104(r1)
    b3a8:	80 81 00 6c 	lwz     r4,108(r1)
    b3ac:	48 00 00 01 	bl      b3ac <sctp_getsockopt_local_addrs+0x1e4>
    b3b0:	7c 60 1b 78 	mr      r0,r3

	addrs = kmalloc(space_left, GFP_KERNEL);
    b3b4:	90 01 00 34 	stw     r0,52(r1)
	if (!addrs)
    b3b8:	80 01 00 34 	lwz     r0,52(r1)
    b3bc:	2f 80 00 00 	cmpwi   cr7,r0,0
    b3c0:	40 9e 00 0c 	bne-    cr7,b3cc <sctp_getsockopt_local_addrs+0x204>
		return -ENOMEM;
    b3c4:	38 00 ff f4 	li      r0,-12
    b3c8:	48 00 04 b4 	b       b87c <sctp_getsockopt_local_addrs+0x6b4>

	/* If the endpoint is bound to 0.0.0.0 or ::0, get the valid
	 * addresses from the global local address list.
	 */
	if (sctp_list_single_entry(&bp->address_list)) {
    b3cc:	80 01 00 08 	lwz     r0,8(r1)
    b3d0:	30 00 00 04 	addic   r0,r0,4
    b3d4:	90 01 00 70 	stw     r0,112(r1)
}

/* Tests if the list has one and only one entry. */
static inline int sctp_list_single_entry(struct list_head *head)
{
	return (head->next != head) && (head->next == head->prev);
    b3d8:	80 01 00 70 	lwz     r0,112(r1)
    b3dc:	7c 09 03 78 	mr      r9,r0
    b3e0:	80 09 00 00 	lwz     r0,0(r9)
    b3e4:	81 21 00 70 	lwz     r9,112(r1)
    b3e8:	7f 89 00 00 	cmpw    cr7,r9,r0
    b3ec:	41 9e 00 2c 	beq-    cr7,b418 <sctp_getsockopt_local_addrs+0x250>
    b3f0:	80 01 00 70 	lwz     r0,112(r1)
    b3f4:	7c 0a 03 78 	mr      r10,r0
    b3f8:	81 2a 00 00 	lwz     r9,0(r10)
    b3fc:	80 01 00 70 	lwz     r0,112(r1)
    b400:	7c 0b 03 78 	mr      r11,r0
    b404:	80 0b 00 04 	lwz     r0,4(r11)
    b408:	7f 89 00 00 	cmpw    cr7,r9,r0
    b40c:	40 9e 00 0c 	bne-    cr7,b418 <sctp_getsockopt_local_addrs+0x250>
    b410:	38 00 00 01 	li      r0,1
    b414:	48 00 00 08 	b       b41c <sctp_getsockopt_local_addrs+0x254>
    b418:	38 00 00 00 	li      r0,0
    b41c:	2f 80 00 00 	cmpwi   cr7,r0,0
    b420:	41 9e 00 84 	beq-    cr7,b4a4 <sctp_getsockopt_local_addrs+0x2dc>
		addr = list_entry(bp->address_list.next,
    b424:	80 01 00 08 	lwz     r0,8(r1)
    b428:	7c 07 03 78 	mr      r7,r0
    b42c:	80 07 00 04 	lwz     r0,4(r7)
    b430:	90 01 00 38 	stw     r0,56(r1)
    b434:	80 01 00 38 	lwz     r0,56(r1)
    b438:	90 01 00 10 	stw     r0,16(r1)
				  struct sctp_sockaddr_entry, list);
		if (sctp_is_any(sk, &addr->a)) {
    b43c:	80 01 00 10 	lwz     r0,16(r1)
    b440:	30 00 00 10 	addic   r0,r0,16
    b444:	80 61 00 b8 	lwz     r3,184(r1)
    b448:	7c 04 03 78 	mr      r4,r0
    b44c:	48 00 00 01 	bl      b44c <sctp_getsockopt_local_addrs+0x284>
    b450:	7c 60 1b 78 	mr      r0,r3
    b454:	2f 80 00 00 	cmpwi   cr7,r0,0
    b458:	41 9e 00 4c 	beq-    cr7,b4a4 <sctp_getsockopt_local_addrs+0x2dc>
			cnt = sctp_copy_laddrs(sk, bp->port, addrs,
    b45c:	80 01 00 08 	lwz     r0,8(r1)
    b460:	7c 09 03 78 	mr      r9,r0
    b464:	a0 09 00 00 	lhz     r0,0(r9)
    b468:	54 09 04 3e 	clrlwi  r9,r0,16
    b46c:	38 01 00 ac 	addi    r0,r1,172
    b470:	80 61 00 b8 	lwz     r3,184(r1)
    b474:	7d 24 4b 78 	mr      r4,r9
    b478:	80 a1 00 34 	lwz     r5,52(r1)
    b47c:	80 c1 00 18 	lwz     r6,24(r1)
    b480:	7c 07 03 78 	mr      r7,r0
    b484:	4b ff f9 bd 	bl      ae40 <sctp_copy_laddrs>
    b488:	90 61 00 0c 	stw     r3,12(r1)
						space_left, &bytes_copied);
			if (cnt < 0) {
    b48c:	80 01 00 0c 	lwz     r0,12(r1)
    b490:	2f 80 00 00 	cmpwi   cr7,r0,0
    b494:	40 9c 01 b8 	bge-    cr7,b64c <sctp_getsockopt_local_addrs+0x484>
				err = cnt;
    b498:	80 01 00 0c 	lwz     r0,12(r1)
    b49c:	90 01 00 14 	stw     r0,20(r1)
				goto out;
    b4a0:	48 00 03 d0 	b       b870 <sctp_getsockopt_local_addrs+0x6a8>
			}
			goto copy_getaddrs;
		}
	}

	buf = addrs;
    b4a4:	80 01 00 34 	lwz     r0,52(r1)
    b4a8:	90 01 00 1c 	stw     r0,28(r1)
	/* Protection on the bound address list is not needed since
	 * in the socket option context we hold a socket lock and
	 * thus the bound address list can't change.
	 */
	list_for_each_entry(addr, &bp->address_list, list) {
    b4ac:	80 01 00 08 	lwz     r0,8(r1)
    b4b0:	7c 0a 03 78 	mr      r10,r0
    b4b4:	80 0a 00 04 	lwz     r0,4(r10)
    b4b8:	90 01 00 3c 	stw     r0,60(r1)
    b4bc:	80 01 00 3c 	lwz     r0,60(r1)
    b4c0:	90 01 00 10 	stw     r0,16(r1)
    b4c4:	48 00 01 40 	b       b604 <sctp_getsockopt_local_addrs+0x43c>
		memcpy(&temp, &addr->a, sizeof(temp));
    b4c8:	80 01 00 10 	lwz     r0,16(r1)
    b4cc:	7c 0b 03 78 	mr      r11,r0
    b4d0:	81 0b 00 10 	lwz     r8,16(r11)
    b4d4:	7c 07 03 78 	mr      r7,r0
    b4d8:	81 47 00 14 	lwz     r10,20(r7)
    b4dc:	7c 09 03 78 	mr      r9,r0
    b4e0:	81 69 00 18 	lwz     r11,24(r9)
    b4e4:	7c 07 03 78 	mr      r7,r0
    b4e8:	81 27 00 1c 	lwz     r9,28(r7)
    b4ec:	91 01 00 90 	stw     r8,144(r1)
    b4f0:	91 41 00 94 	stw     r10,148(r1)
    b4f4:	91 61 00 98 	stw     r11,152(r1)
    b4f8:	91 21 00 9c 	stw     r9,156(r1)
    b4fc:	7c 09 03 78 	mr      r9,r0
    b500:	81 69 00 20 	lwz     r11,32(r9)
    b504:	7c 0a 03 78 	mr      r10,r0
    b508:	81 2a 00 24 	lwz     r9,36(r10)
    b50c:	7c 07 03 78 	mr      r7,r0
    b510:	80 07 00 28 	lwz     r0,40(r7)
    b514:	91 61 00 a0 	stw     r11,160(r1)
    b518:	91 21 00 a4 	stw     r9,164(r1)
    b51c:	90 01 00 a8 	stw     r0,168(r1)
		sctp_get_pf_specific(sk->sk_family)->addr_v4map(sp, &temp);
    b520:	80 01 00 b8 	lwz     r0,184(r1)
    b524:	7c 09 03 78 	mr      r9,r0
    b528:	a0 09 00 0c 	lhz     r0,12(r9)
    b52c:	54 00 04 3e 	clrlwi  r0,r0,16
    b530:	7c 03 03 78 	mr      r3,r0
    b534:	48 00 00 01 	bl      b534 <sctp_getsockopt_local_addrs+0x36c>
    b538:	7c 60 1b 78 	mr      r0,r3
    b53c:	7c 0a 03 78 	mr      r10,r0
    b540:	80 0a 00 20 	lwz     r0,32(r10)
    b544:	39 21 00 90 	addi    r9,r1,144
    b548:	80 61 00 28 	lwz     r3,40(r1)
    b54c:	7d 24 4b 78 	mr      r4,r9
    b550:	7c 09 03 a6 	mtctr   r0
    b554:	4e 80 04 21 	bctrl
		addrlen = sctp_get_af_specific(temp.sa.sa_family)->sockaddr_len;
    b558:	a0 01 00 90 	lhz     r0,144(r1)
    b55c:	54 00 04 3e 	clrlwi  r0,r0,16
    b560:	7c 03 03 78 	mr      r3,r0
    b564:	48 00 00 01 	bl      b564 <sctp_getsockopt_local_addrs+0x39c>
    b568:	7c 60 1b 78 	mr      r0,r3
    b56c:	7c 07 03 78 	mr      r7,r0
    b570:	80 07 00 6c 	lwz     r0,108(r7)
    b574:	90 01 00 40 	stw     r0,64(r1)
		if (space_left < addrlen) {
    b578:	81 21 00 40 	lwz     r9,64(r1)
    b57c:	80 01 00 18 	lwz     r0,24(r1)
    b580:	7f 89 00 40 	cmplw   cr7,r9,r0
    b584:	40 9d 00 10 	ble-    cr7,b594 <sctp_getsockopt_local_addrs+0x3cc>
			err =  -ENOMEM; /*fixme: right error?*/
    b588:	38 00 ff f4 	li      r0,-12
    b58c:	90 01 00 14 	stw     r0,20(r1)
			goto out;
    b590:	48 00 02 e0 	b       b870 <sctp_getsockopt_local_addrs+0x6a8>
		}
		memcpy(buf, &temp, addrlen);
    b594:	80 01 00 40 	lwz     r0,64(r1)
    b598:	81 61 00 1c 	lwz     r11,28(r1)
    b59c:	39 21 00 90 	addi    r9,r1,144
    b5a0:	7d 63 5b 78 	mr      r3,r11
    b5a4:	7d 24 4b 78 	mr      r4,r9
    b5a8:	7c 05 03 78 	mr      r5,r0
    b5ac:	48 00 00 01 	bl      b5ac <sctp_getsockopt_local_addrs+0x3e4>
		buf += addrlen;
    b5b0:	80 01 00 40 	lwz     r0,64(r1)
    b5b4:	81 21 00 1c 	lwz     r9,28(r1)
    b5b8:	7c 09 02 14 	add     r0,r9,r0
    b5bc:	90 01 00 1c 	stw     r0,28(r1)
		bytes_copied += addrlen;
    b5c0:	81 21 00 ac 	lwz     r9,172(r1)
    b5c4:	80 01 00 40 	lwz     r0,64(r1)
    b5c8:	7c 09 02 14 	add     r0,r9,r0
    b5cc:	90 01 00 ac 	stw     r0,172(r1)
		cnt ++;
    b5d0:	80 01 00 0c 	lwz     r0,12(r1)
    b5d4:	30 00 00 01 	addic   r0,r0,1
    b5d8:	90 01 00 0c 	stw     r0,12(r1)
		space_left -= addrlen;
    b5dc:	80 01 00 40 	lwz     r0,64(r1)
    b5e0:	81 21 00 18 	lwz     r9,24(r1)
    b5e4:	7c 00 48 50 	subf    r0,r0,r9
    b5e8:	90 01 00 18 	stw     r0,24(r1)
	buf = addrs;
	/* Protection on the bound address list is not needed since
	 * in the socket option context we hold a socket lock and
	 * thus the bound address list can't change.
	 */
	list_for_each_entry(addr, &bp->address_list, list) {
    b5ec:	80 01 00 10 	lwz     r0,16(r1)
    b5f0:	7c 09 03 78 	mr      r9,r0
    b5f4:	80 09 00 00 	lwz     r0,0(r9)
    b5f8:	90 01 00 44 	stw     r0,68(r1)
    b5fc:	80 01 00 44 	lwz     r0,68(r1)
    b600:	90 01 00 10 	stw     r0,16(r1)
    b604:	80 01 00 10 	lwz     r0,16(r1)
    b608:	7c 0a 03 78 	mr      r10,r0
    b60c:	80 0a 00 00 	lwz     r0,0(r10)
    b610:	90 01 00 74 	stw     r0,116(r1)
#define ARCH_HAS_PREFETCHW
#define ARCH_HAS_SPINLOCK_PREFETCH

static inline void prefetch(const void *x)
{
	if (unlikely(!x))
    b614:	80 01 00 74 	lwz     r0,116(r1)
    b618:	2f 80 00 00 	cmpwi   cr7,r0,0
    b61c:	7c 00 00 26 	mfcr    r0
    b620:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
    b624:	2f 80 00 00 	cmpwi   cr7,r0,0
    b628:	40 9e 00 0c 	bne-    cr7,b634 <sctp_getsockopt_local_addrs+0x46c>
		return;

	__asm__ __volatile__ ("dcbt 0,%0" : : "r" (x));
    b62c:	80 01 00 74 	lwz     r0,116(r1)
    b630:	7c 00 02 2c 	dcbt    r0,r0
    b634:	81 21 00 10 	lwz     r9,16(r1)
    b638:	80 01 00 08 	lwz     r0,8(r1)
    b63c:	30 00 00 04 	addic   r0,r0,4
    b640:	7f 89 00 00 	cmpw    cr7,r9,r0
    b644:	40 9e fe 84 	bne+    cr7,b4c8 <sctp_getsockopt_local_addrs+0x300>
    b648:	48 00 00 08 	b       b650 <sctp_getsockopt_local_addrs+0x488>
						space_left, &bytes_copied);
			if (cnt < 0) {
				err = cnt;
				goto out;
			}
			goto copy_getaddrs;
    b64c:	60 00 00 00 	nop
		cnt ++;
		space_left -= addrlen;
	}

copy_getaddrs:
	if (copy_to_user(to, addrs, bytes_copied)) {
    b650:	80 01 00 ac 	lwz     r0,172(r1)
    b654:	81 21 00 30 	lwz     r9,48(r1)
    b658:	91 21 00 78 	stw     r9,120(r1)
    b65c:	81 21 00 34 	lwz     r9,52(r1)
    b660:	91 21 00 7c 	stw     r9,124(r1)
    b664:	90 01 00 80 	stw     r0,128(r1)
static inline unsigned long copy_to_user(void __user *to,
		const void *from, unsigned long n)
{
	unsigned long over;

	if (access_ok(VERIFY_WRITE, to, n))
    b668:	81 21 00 78 	lwz     r9,120(r1)
    b66c:	7c 40 13 78 	mr      r0,r2
    b670:	7c 0b 03 78 	mr      r11,r0
    b674:	80 0b 01 d4 	lwz     r0,468(r11)
    b678:	7f 89 00 40 	cmplw   cr7,r9,r0
    b67c:	41 9d 00 3c 	bgt-    cr7,b6b8 <sctp_getsockopt_local_addrs+0x4f0>
    b680:	80 01 00 80 	lwz     r0,128(r1)
    b684:	2f 80 00 00 	cmpwi   cr7,r0,0
    b688:	41 9e 00 28 	beq-    cr7,b6b0 <sctp_getsockopt_local_addrs+0x4e8>
    b68c:	80 01 00 80 	lwz     r0,128(r1)
    b690:	31 20 ff ff 	addic   r9,r0,-1
    b694:	7c 40 13 78 	mr      r0,r2
    b698:	7c 07 03 78 	mr      r7,r0
    b69c:	81 67 01 d4 	lwz     r11,468(r7)
    b6a0:	80 01 00 78 	lwz     r0,120(r1)
    b6a4:	7c 00 58 50 	subf    r0,r0,r11
    b6a8:	7f 89 00 40 	cmplw   cr7,r9,r0
    b6ac:	41 9d 00 0c 	bgt-    cr7,b6b8 <sctp_getsockopt_local_addrs+0x4f0>
    b6b0:	38 00 00 01 	li      r0,1
    b6b4:	48 00 00 08 	b       b6bc <sctp_getsockopt_local_addrs+0x4f4>
    b6b8:	38 00 00 00 	li      r0,0
    b6bc:	2f 80 00 00 	cmpwi   cr7,r0,0
    b6c0:	41 9e 00 1c 	beq-    cr7,b6dc <sctp_getsockopt_local_addrs+0x514>
		return __copy_tofrom_user(to, (__force void __user *)from, n);
    b6c4:	80 61 00 78 	lwz     r3,120(r1)
    b6c8:	80 81 00 7c 	lwz     r4,124(r1)
    b6cc:	80 a1 00 80 	lwz     r5,128(r1)
    b6d0:	48 00 00 01 	bl      b6d0 <sctp_getsockopt_local_addrs+0x508>
    b6d4:	7c 60 1b 78 	mr      r0,r3
    b6d8:	48 00 00 60 	b       b738 <sctp_getsockopt_local_addrs+0x570>
	if ((unsigned long)to < TASK_SIZE) {
    b6dc:	81 21 00 78 	lwz     r9,120(r1)
    b6e0:	3c 00 bf ff 	lis     r0,-16385
    b6e4:	60 00 ff ff 	ori     r0,r0,65535
    b6e8:	7f 89 00 40 	cmplw   cr7,r9,r0
    b6ec:	41 9d 00 48 	bgt-    cr7,b734 <sctp_getsockopt_local_addrs+0x56c>
		over = (unsigned long)to + n - TASK_SIZE;
    b6f0:	81 21 00 78 	lwz     r9,120(r1)
    b6f4:	80 01 00 80 	lwz     r0,128(r1)
    b6f8:	7c 09 02 14 	add     r0,r9,r0
    b6fc:	3d 20 40 00 	lis     r9,16384
    b700:	7c 00 4a 14 	add     r0,r0,r9
    b704:	90 01 00 84 	stw     r0,132(r1)
		return __copy_tofrom_user(to, (__force void __user *)from,
    b708:	81 21 00 80 	lwz     r9,128(r1)
    b70c:	80 01 00 84 	lwz     r0,132(r1)
    b710:	7c 00 48 50 	subf    r0,r0,r9
    b714:	80 61 00 78 	lwz     r3,120(r1)
    b718:	80 81 00 7c 	lwz     r4,124(r1)
    b71c:	7c 05 03 78 	mr      r5,r0
    b720:	48 00 00 01 	bl      b720 <sctp_getsockopt_local_addrs+0x558>
    b724:	7c 69 1b 78 	mr      r9,r3
    b728:	80 01 00 84 	lwz     r0,132(r1)
    b72c:	7c 09 02 14 	add     r0,r9,r0
    b730:	48 00 00 08 	b       b738 <sctp_getsockopt_local_addrs+0x570>
				n - over) + over;
	}
	return n;
    b734:	80 01 00 80 	lwz     r0,128(r1)
    b738:	2f 80 00 00 	cmpwi   cr7,r0,0
    b73c:	41 9e 00 10 	beq-    cr7,b74c <sctp_getsockopt_local_addrs+0x584>
		err = -EFAULT;
    b740:	38 00 ff f2 	li      r0,-14
    b744:	90 01 00 14 	stw     r0,20(r1)
		goto out;
    b748:	48 00 01 28 	b       b870 <sctp_getsockopt_local_addrs+0x6a8>
	}
	if (put_user(cnt, &((struct sctp_getaddrs __user *)optval)->addr_num)) {
    b74c:	38 00 ff f2 	li      r0,-14
    b750:	90 01 00 20 	stw     r0,32(r1)
    b754:	80 01 00 c0 	lwz     r0,192(r1)
    b758:	30 00 00 04 	addic   r0,r0,4
    b75c:	90 01 00 48 	stw     r0,72(r1)
    b760:	81 21 00 48 	lwz     r9,72(r1)
    b764:	7c 40 13 78 	mr      r0,r2
    b768:	7c 0a 03 78 	mr      r10,r0
    b76c:	80 0a 01 d4 	lwz     r0,468(r10)
    b770:	7f 89 00 40 	cmplw   cr7,r9,r0
    b774:	41 9d 00 28 	bgt-    cr7,b79c <sctp_getsockopt_local_addrs+0x5d4>
    b778:	7c 40 13 78 	mr      r0,r2
    b77c:	7c 0b 03 78 	mr      r11,r0
    b780:	81 2b 01 d4 	lwz     r9,468(r11)
    b784:	80 01 00 48 	lwz     r0,72(r1)
    b788:	7c 00 48 50 	subf    r0,r0,r9
    b78c:	2b 80 00 02 	cmplwi  cr7,r0,2
    b790:	40 9d 00 0c 	ble-    cr7,b79c <sctp_getsockopt_local_addrs+0x5d4>
    b794:	38 00 00 01 	li      r0,1
    b798:	48 00 00 08 	b       b7a0 <sctp_getsockopt_local_addrs+0x5d8>
    b79c:	38 00 00 00 	li      r0,0
    b7a0:	2f 80 00 00 	cmpwi   cr7,r0,0
    b7a4:	41 9e 00 24 	beq-    cr7,b7c8 <sctp_getsockopt_local_addrs+0x600>
    b7a8:	38 00 00 00 	li      r0,0
    b7ac:	90 01 00 20 	stw     r0,32(r1)
    b7b0:	80 01 00 0c 	lwz     r0,12(r1)
    b7b4:	81 21 00 48 	lwz     r9,72(r1)
    b7b8:	81 61 00 20 	lwz     r11,32(r1)
    b7bc:	7d 7f 5b 78 	mr      r31,r11
    b7c0:	90 09 00 00 	stw     r0,0(r9)
    b7c4:	93 e1 00 20 	stw     r31,32(r1)
    b7c8:	80 01 00 20 	lwz     r0,32(r1)
    b7cc:	2f 80 00 00 	cmpwi   cr7,r0,0
    b7d0:	41 9e 00 10 	beq-    cr7,b7e0 <sctp_getsockopt_local_addrs+0x618>
		err = -EFAULT;
    b7d4:	38 00 ff f2 	li      r0,-14
    b7d8:	90 01 00 14 	stw     r0,20(r1)
		goto out;
    b7dc:	48 00 00 94 	b       b870 <sctp_getsockopt_local_addrs+0x6a8>
	}
	if (put_user(bytes_copied, optlen))
    b7e0:	38 00 ff f2 	li      r0,-14
    b7e4:	90 01 00 24 	stw     r0,36(r1)
    b7e8:	80 01 00 c4 	lwz     r0,196(r1)
    b7ec:	90 01 00 4c 	stw     r0,76(r1)
    b7f0:	81 21 00 4c 	lwz     r9,76(r1)
    b7f4:	7c 40 13 78 	mr      r0,r2
    b7f8:	7c 07 03 78 	mr      r7,r0
    b7fc:	80 07 01 d4 	lwz     r0,468(r7)
    b800:	7f 89 00 40 	cmplw   cr7,r9,r0
    b804:	41 9d 00 28 	bgt-    cr7,b82c <sctp_getsockopt_local_addrs+0x664>
    b808:	7c 40 13 78 	mr      r0,r2
    b80c:	7c 0a 03 78 	mr      r10,r0
    b810:	81 2a 01 d4 	lwz     r9,468(r10)
    b814:	80 01 00 4c 	lwz     r0,76(r1)
    b818:	7c 00 48 50 	subf    r0,r0,r9
    b81c:	2b 80 00 02 	cmplwi  cr7,r0,2
    b820:	40 9d 00 0c 	ble-    cr7,b82c <sctp_getsockopt_local_addrs+0x664>
    b824:	38 00 00 01 	li      r0,1
    b828:	48 00 00 08 	b       b830 <sctp_getsockopt_local_addrs+0x668>
    b82c:	38 00 00 00 	li      r0,0
    b830:	2f 80 00 00 	cmpwi   cr7,r0,0
    b834:	41 9e 00 28 	beq-    cr7,b85c <sctp_getsockopt_local_addrs+0x694>
    b838:	38 00 00 00 	li      r0,0
    b83c:	90 01 00 24 	stw     r0,36(r1)
    b840:	80 01 00 ac 	lwz     r0,172(r1)
    b844:	81 21 00 4c 	lwz     r9,76(r1)
    b848:	81 61 00 24 	lwz     r11,36(r1)
    b84c:	7d 7f 5b 78 	mr      r31,r11
    b850:	90 09 00 00 	stw     r0,0(r9)
    b854:	93 e1 00 24 	stw     r31,36(r1)
    b858:	60 00 00 00 	nop
    b85c:	80 01 00 24 	lwz     r0,36(r1)
    b860:	2f 80 00 00 	cmpwi   cr7,r0,0
    b864:	41 9e 00 0c 	beq-    cr7,b870 <sctp_getsockopt_local_addrs+0x6a8>
		err = -EFAULT;
    b868:	38 00 ff f2 	li      r0,-14
    b86c:	90 01 00 14 	stw     r0,20(r1)
out:
	kfree(addrs);
    b870:	80 61 00 34 	lwz     r3,52(r1)
    b874:	48 00 00 01 	bl      b874 <sctp_getsockopt_local_addrs+0x6ac>
	return err;
    b878:	80 01 00 14 	lwz     r0,20(r1)
}
    b87c:	7c 03 03 78 	mr      r3,r0
    b880:	80 01 00 d4 	lwz     r0,212(r1)
    b884:	7c 08 03 a6 	mtlr    r0
    b888:	83 e1 00 cc 	lwz     r31,204(r1)
    b88c:	38 21 00 d0 	addi    r1,r1,208
    b890:	4e 80 00 20 	blr

0000b894 <sctp_getsockopt_primary_addr>:
 * the association primary.  The enclosed address must be one of the
 * association peer's addresses.
 */
static int sctp_getsockopt_primary_addr(struct sock *sk, int len,
					char __user *optval, int __user *optlen)
{
    b894:	94 21 ff 20 	stwu    r1,-224(r1)
    b898:	7c 08 02 a6 	mflr    r0
    b89c:	90 01 00 e4 	stw     r0,228(r1)
    b8a0:	93 e1 00 dc 	stw     r31,220(r1)
    b8a4:	90 61 00 c8 	stw     r3,200(r1)
    b8a8:	90 81 00 cc 	stw     r4,204(r1)
    b8ac:	90 a1 00 d0 	stw     r5,208(r1)
    b8b0:	90 c1 00 d4 	stw     r6,212(r1)
    b8b4:	80 01 00 c8 	lwz     r0,200(r1)
    b8b8:	90 01 00 18 	stw     r0,24(r1)
    b8bc:	80 01 00 18 	lwz     r0,24(r1)
	struct sctp_prim prim;
	struct sctp_association *asoc;
	struct sctp_sock *sp = sctp_sk(sk);
    b8c0:	90 01 00 0c 	stw     r0,12(r1)

	if (len < sizeof(struct sctp_prim))
    b8c4:	80 01 00 cc 	lwz     r0,204(r1)
    b8c8:	2b 80 00 83 	cmplwi  cr7,r0,131
    b8cc:	41 9d 00 0c 	bgt-    cr7,b8d8 <sctp_getsockopt_primary_addr+0x44>
		return -EINVAL;
    b8d0:	38 00 ff ea 	li      r0,-22
    b8d4:	48 00 03 54 	b       bc28 <sctp_getsockopt_primary_addr+0x394>

	len = sizeof(struct sctp_prim);
    b8d8:	38 00 00 84 	li      r0,132
    b8dc:	90 01 00 cc 	stw     r0,204(r1)

	if (copy_from_user(&prim, optval, len))
    b8e0:	80 01 00 cc 	lwz     r0,204(r1)
    b8e4:	39 21 00 3c 	addi    r9,r1,60
    b8e8:	91 21 00 1c 	stw     r9,28(r1)
    b8ec:	81 21 00 d0 	lwz     r9,208(r1)
    b8f0:	91 21 00 20 	stw     r9,32(r1)
    b8f4:	90 01 00 24 	stw     r0,36(r1)
static inline unsigned long copy_from_user(void *to,
		const void __user *from, unsigned long n)
{
	unsigned long over;

	if (access_ok(VERIFY_READ, from, n))
    b8f8:	81 21 00 20 	lwz     r9,32(r1)
    b8fc:	7c 40 13 78 	mr      r0,r2
    b900:	7c 0a 03 78 	mr      r10,r0
    b904:	80 0a 01 d4 	lwz     r0,468(r10)
    b908:	7f 89 00 40 	cmplw   cr7,r9,r0
    b90c:	41 9d 00 3c 	bgt-    cr7,b948 <sctp_getsockopt_primary_addr+0xb4>
    b910:	80 01 00 24 	lwz     r0,36(r1)
    b914:	2f 80 00 00 	cmpwi   cr7,r0,0
    b918:	41 9e 00 28 	beq-    cr7,b940 <sctp_getsockopt_primary_addr+0xac>
    b91c:	80 01 00 24 	lwz     r0,36(r1)
    b920:	31 20 ff ff 	addic   r9,r0,-1
    b924:	7c 40 13 78 	mr      r0,r2
    b928:	7c 0a 03 78 	mr      r10,r0
    b92c:	81 6a 01 d4 	lwz     r11,468(r10)
    b930:	80 01 00 20 	lwz     r0,32(r1)
    b934:	7c 00 58 50 	subf    r0,r0,r11
    b938:	7f 89 00 40 	cmplw   cr7,r9,r0
    b93c:	41 9d 00 0c 	bgt-    cr7,b948 <sctp_getsockopt_primary_addr+0xb4>
    b940:	38 00 00 01 	li      r0,1
    b944:	48 00 00 08 	b       b94c <sctp_getsockopt_primary_addr+0xb8>
    b948:	38 00 00 00 	li      r0,0
    b94c:	2f 80 00 00 	cmpwi   cr7,r0,0
    b950:	41 9e 00 1c 	beq-    cr7,b96c <sctp_getsockopt_primary_addr+0xd8>
		return __copy_tofrom_user((__force void __user *)to, from, n);
    b954:	80 61 00 1c 	lwz     r3,28(r1)
    b958:	80 81 00 20 	lwz     r4,32(r1)
    b95c:	80 a1 00 24 	lwz     r5,36(r1)
    b960:	48 00 00 01 	bl      b960 <sctp_getsockopt_primary_addr+0xcc>
    b964:	7c 60 1b 78 	mr      r0,r3
    b968:	48 00 00 60 	b       b9c8 <sctp_getsockopt_primary_addr+0x134>
	if ((unsigned long)from < TASK_SIZE) {
    b96c:	81 21 00 20 	lwz     r9,32(r1)
    b970:	3c 00 bf ff 	lis     r0,-16385
    b974:	60 00 ff ff 	ori     r0,r0,65535
    b978:	7f 89 00 40 	cmplw   cr7,r9,r0
    b97c:	41 9d 00 48 	bgt-    cr7,b9c4 <sctp_getsockopt_primary_addr+0x130>
		over = (unsigned long)from + n - TASK_SIZE;
    b980:	81 21 00 20 	lwz     r9,32(r1)
    b984:	80 01 00 24 	lwz     r0,36(r1)
    b988:	7c 09 02 14 	add     r0,r9,r0
    b98c:	3d 60 40 00 	lis     r11,16384
    b990:	7c 00 5a 14 	add     r0,r0,r11
    b994:	90 01 00 28 	stw     r0,40(r1)
		return __copy_tofrom_user((__force void __user *)to, from,
    b998:	81 21 00 24 	lwz     r9,36(r1)
    b99c:	80 01 00 28 	lwz     r0,40(r1)
    b9a0:	7c 00 48 50 	subf    r0,r0,r9
    b9a4:	80 61 00 1c 	lwz     r3,28(r1)
    b9a8:	80 81 00 20 	lwz     r4,32(r1)
    b9ac:	7c 05 03 78 	mr      r5,r0
    b9b0:	48 00 00 01 	bl      b9b0 <sctp_getsockopt_primary_addr+0x11c>
    b9b4:	7c 69 1b 78 	mr      r9,r3
    b9b8:	80 01 00 28 	lwz     r0,40(r1)
    b9bc:	7c 09 02 14 	add     r0,r9,r0
    b9c0:	48 00 00 08 	b       b9c8 <sctp_getsockopt_primary_addr+0x134>
				n - over) + over;
	}
	return n;
    b9c4:	80 01 00 24 	lwz     r0,36(r1)
    b9c8:	2f 80 00 00 	cmpwi   cr7,r0,0
    b9cc:	41 9e 00 0c 	beq-    cr7,b9d8 <sctp_getsockopt_primary_addr+0x144>
		return -EFAULT;
    b9d0:	38 00 ff f2 	li      r0,-14
    b9d4:	48 00 02 54 	b       bc28 <sctp_getsockopt_primary_addr+0x394>

	asoc = sctp_id2assoc(sk, prim.ssp_assoc_id);
    b9d8:	80 01 00 3c 	lwz     r0,60(r1)
    b9dc:	80 61 00 c8 	lwz     r3,200(r1)
    b9e0:	7c 04 03 78 	mr      r4,r0
    b9e4:	48 00 00 01 	bl      b9e4 <sctp_getsockopt_primary_addr+0x150>
    b9e8:	90 61 00 10 	stw     r3,16(r1)
	if (!asoc)
    b9ec:	80 01 00 10 	lwz     r0,16(r1)
    b9f0:	2f 80 00 00 	cmpwi   cr7,r0,0
    b9f4:	40 9e 00 0c 	bne-    cr7,ba00 <sctp_getsockopt_primary_addr+0x16c>
		return -EINVAL;
    b9f8:	38 00 ff ea 	li      r0,-22
    b9fc:	48 00 02 2c 	b       bc28 <sctp_getsockopt_primary_addr+0x394>

	if (!asoc->peer.primary_path)
    ba00:	80 01 00 10 	lwz     r0,16(r1)
    ba04:	7c 09 03 78 	mr      r9,r0
    ba08:	80 09 00 f4 	lwz     r0,244(r9)
    ba0c:	2f 80 00 00 	cmpwi   cr7,r0,0
    ba10:	40 9e 00 0c 	bne-    cr7,ba1c <sctp_getsockopt_primary_addr+0x188>
		return -ENOTCONN;
    ba14:	38 00 ff 95 	li      r0,-107
    ba18:	48 00 02 10 	b       bc28 <sctp_getsockopt_primary_addr+0x394>

	memcpy(&prim.ssp_addr, &asoc->peer.primary_path->ipaddr,
    ba1c:	80 01 00 10 	lwz     r0,16(r1)
    ba20:	7c 0a 03 78 	mr      r10,r0
    ba24:	80 0a 00 f4 	lwz     r0,244(r10)
    ba28:	31 20 00 10 	addic   r9,r0,16
		asoc->peer.primary_path->af_specific->sockaddr_len);
    ba2c:	80 01 00 10 	lwz     r0,16(r1)
    ba30:	7c 0b 03 78 	mr      r11,r0
    ba34:	80 0b 00 f4 	lwz     r0,244(r11)
    ba38:	7c 0a 03 78 	mr      r10,r0
    ba3c:	80 0a 00 2c 	lwz     r0,44(r10)
    ba40:	7c 0b 03 78 	mr      r11,r0
    ba44:	80 0b 00 6c 	lwz     r0,108(r11)
		return -EINVAL;

	if (!asoc->peer.primary_path)
		return -ENOTCONN;

	memcpy(&prim.ssp_addr, &asoc->peer.primary_path->ipaddr,
    ba48:	39 61 00 3c 	addi    r11,r1,60
    ba4c:	39 6b 00 04 	addi    r11,r11,4
    ba50:	7d 63 5b 78 	mr      r3,r11
    ba54:	7d 24 4b 78 	mr      r4,r9
    ba58:	7c 05 03 78 	mr      r5,r0
    ba5c:	48 00 00 01 	bl      ba5c <sctp_getsockopt_primary_addr+0x1c8>
		asoc->peer.primary_path->af_specific->sockaddr_len);

	sctp_get_pf_specific(sk->sk_family)->addr_v4map(sp,
    ba60:	80 01 00 c8 	lwz     r0,200(r1)
    ba64:	7c 09 03 78 	mr      r9,r0
    ba68:	a0 09 00 0c 	lhz     r0,12(r9)
    ba6c:	54 00 04 3e 	clrlwi  r0,r0,16
    ba70:	7c 03 03 78 	mr      r3,r0
    ba74:	48 00 00 01 	bl      ba74 <sctp_getsockopt_primary_addr+0x1e0>
    ba78:	7c 60 1b 78 	mr      r0,r3
    ba7c:	7c 0a 03 78 	mr      r10,r0
    ba80:	80 0a 00 20 	lwz     r0,32(r10)
			(union sctp_addr *)&prim.ssp_addr);
    ba84:	39 21 00 3c 	addi    r9,r1,60
    ba88:	39 29 00 04 	addi    r9,r9,4
		return -ENOTCONN;

	memcpy(&prim.ssp_addr, &asoc->peer.primary_path->ipaddr,
		asoc->peer.primary_path->af_specific->sockaddr_len);

	sctp_get_pf_specific(sk->sk_family)->addr_v4map(sp,
    ba8c:	80 61 00 0c 	lwz     r3,12(r1)
    ba90:	7d 24 4b 78 	mr      r4,r9
    ba94:	7c 09 03 a6 	mtctr   r0
    ba98:	4e 80 04 21 	bctrl
			(union sctp_addr *)&prim.ssp_addr);

	if (put_user(len, optlen))
    ba9c:	38 00 ff f2 	li      r0,-14
    baa0:	90 01 00 08 	stw     r0,8(r1)
    baa4:	80 01 00 d4 	lwz     r0,212(r1)
    baa8:	90 01 00 14 	stw     r0,20(r1)
    baac:	81 21 00 14 	lwz     r9,20(r1)
    bab0:	7c 40 13 78 	mr      r0,r2
    bab4:	7c 0a 03 78 	mr      r10,r0
    bab8:	80 0a 01 d4 	lwz     r0,468(r10)
    babc:	7f 89 00 40 	cmplw   cr7,r9,r0
    bac0:	41 9d 00 28 	bgt-    cr7,bae8 <sctp_getsockopt_primary_addr+0x254>
    bac4:	7c 40 13 78 	mr      r0,r2
    bac8:	7c 0b 03 78 	mr      r11,r0
    bacc:	81 2b 01 d4 	lwz     r9,468(r11)
    bad0:	80 01 00 14 	lwz     r0,20(r1)
    bad4:	7c 00 48 50 	subf    r0,r0,r9
    bad8:	2b 80 00 02 	cmplwi  cr7,r0,2
    badc:	40 9d 00 0c 	ble-    cr7,bae8 <sctp_getsockopt_primary_addr+0x254>
    bae0:	38 00 00 01 	li      r0,1
    bae4:	48 00 00 08 	b       baec <sctp_getsockopt_primary_addr+0x258>
    bae8:	38 00 00 00 	li      r0,0
    baec:	2f 80 00 00 	cmpwi   cr7,r0,0
    baf0:	41 9e 00 28 	beq-    cr7,bb18 <sctp_getsockopt_primary_addr+0x284>
    baf4:	38 00 00 00 	li      r0,0
    baf8:	90 01 00 08 	stw     r0,8(r1)
    bafc:	80 01 00 cc 	lwz     r0,204(r1)
    bb00:	81 21 00 14 	lwz     r9,20(r1)
    bb04:	81 61 00 08 	lwz     r11,8(r1)
    bb08:	7d 7f 5b 78 	mr      r31,r11
    bb0c:	90 09 00 00 	stw     r0,0(r9)
    bb10:	93 e1 00 08 	stw     r31,8(r1)
    bb14:	60 00 00 00 	nop
    bb18:	80 01 00 08 	lwz     r0,8(r1)
    bb1c:	2f 80 00 00 	cmpwi   cr7,r0,0
    bb20:	41 9e 00 0c 	beq-    cr7,bb2c <sctp_getsockopt_primary_addr+0x298>
		return -EFAULT;
    bb24:	38 00 ff f2 	li      r0,-14
    bb28:	48 00 01 00 	b       bc28 <sctp_getsockopt_primary_addr+0x394>
	if (copy_to_user(optval, &prim, len))
    bb2c:	80 01 00 cc 	lwz     r0,204(r1)
    bb30:	81 21 00 d0 	lwz     r9,208(r1)
    bb34:	91 21 00 2c 	stw     r9,44(r1)
    bb38:	39 21 00 3c 	addi    r9,r1,60
    bb3c:	91 21 00 30 	stw     r9,48(r1)
    bb40:	90 01 00 34 	stw     r0,52(r1)
static inline unsigned long copy_to_user(void __user *to,
		const void *from, unsigned long n)
{
	unsigned long over;

	if (access_ok(VERIFY_WRITE, to, n))
    bb44:	81 21 00 2c 	lwz     r9,44(r1)
    bb48:	7c 40 13 78 	mr      r0,r2
    bb4c:	7c 0a 03 78 	mr      r10,r0
    bb50:	80 0a 01 d4 	lwz     r0,468(r10)
    bb54:	7f 89 00 40 	cmplw   cr7,r9,r0
    bb58:	41 9d 00 3c 	bgt-    cr7,bb94 <sctp_getsockopt_primary_addr+0x300>
    bb5c:	80 01 00 34 	lwz     r0,52(r1)
    bb60:	2f 80 00 00 	cmpwi   cr7,r0,0
    bb64:	41 9e 00 28 	beq-    cr7,bb8c <sctp_getsockopt_primary_addr+0x2f8>
    bb68:	80 01 00 34 	lwz     r0,52(r1)
    bb6c:	31 20 ff ff 	addic   r9,r0,-1
    bb70:	7c 40 13 78 	mr      r0,r2
    bb74:	7c 0a 03 78 	mr      r10,r0
    bb78:	81 6a 01 d4 	lwz     r11,468(r10)
    bb7c:	80 01 00 2c 	lwz     r0,44(r1)
    bb80:	7c 00 58 50 	subf    r0,r0,r11
    bb84:	7f 89 00 40 	cmplw   cr7,r9,r0
    bb88:	41 9d 00 0c 	bgt-    cr7,bb94 <sctp_getsockopt_primary_addr+0x300>
    bb8c:	38 00 00 01 	li      r0,1
    bb90:	48 00 00 08 	b       bb98 <sctp_getsockopt_primary_addr+0x304>
    bb94:	38 00 00 00 	li      r0,0
    bb98:	2f 80 00 00 	cmpwi   cr7,r0,0
    bb9c:	41 9e 00 1c 	beq-    cr7,bbb8 <sctp_getsockopt_primary_addr+0x324>
		return __copy_tofrom_user(to, (__force void __user *)from, n);
    bba0:	80 61 00 2c 	lwz     r3,44(r1)
    bba4:	80 81 00 30 	lwz     r4,48(r1)
    bba8:	80 a1 00 34 	lwz     r5,52(r1)
    bbac:	48 00 00 01 	bl      bbac <sctp_getsockopt_primary_addr+0x318>
    bbb0:	7c 60 1b 78 	mr      r0,r3
    bbb4:	48 00 00 60 	b       bc14 <sctp_getsockopt_primary_addr+0x380>
	if ((unsigned long)to < TASK_SIZE) {
    bbb8:	81 21 00 2c 	lwz     r9,44(r1)
    bbbc:	3c 00 bf ff 	lis     r0,-16385
    bbc0:	60 00 ff ff 	ori     r0,r0,65535
    bbc4:	7f 89 00 40 	cmplw   cr7,r9,r0
    bbc8:	41 9d 00 48 	bgt-    cr7,bc10 <sctp_getsockopt_primary_addr+0x37c>
		over = (unsigned long)to + n - TASK_SIZE;
    bbcc:	81 21 00 2c 	lwz     r9,44(r1)
    bbd0:	80 01 00 34 	lwz     r0,52(r1)
    bbd4:	7c 09 02 14 	add     r0,r9,r0
    bbd8:	3d 60 40 00 	lis     r11,16384
    bbdc:	7c 00 5a 14 	add     r0,r0,r11
    bbe0:	90 01 00 38 	stw     r0,56(r1)
		return __copy_tofrom_user(to, (__force void __user *)from,
    bbe4:	81 21 00 34 	lwz     r9,52(r1)
    bbe8:	80 01 00 38 	lwz     r0,56(r1)
    bbec:	7c 00 48 50 	subf    r0,r0,r9
    bbf0:	80 61 00 2c 	lwz     r3,44(r1)
    bbf4:	80 81 00 30 	lwz     r4,48(r1)
    bbf8:	7c 05 03 78 	mr      r5,r0
    bbfc:	48 00 00 01 	bl      bbfc <sctp_getsockopt_primary_addr+0x368>
    bc00:	7c 69 1b 78 	mr      r9,r3
    bc04:	80 01 00 38 	lwz     r0,56(r1)
    bc08:	7c 09 02 14 	add     r0,r9,r0
    bc0c:	48 00 00 08 	b       bc14 <sctp_getsockopt_primary_addr+0x380>
				n - over) + over;
	}
	return n;
    bc10:	80 01 00 34 	lwz     r0,52(r1)
    bc14:	2f 80 00 00 	cmpwi   cr7,r0,0
    bc18:	41 9e 00 0c 	beq-    cr7,bc24 <sctp_getsockopt_primary_addr+0x390>
		return -EFAULT;
    bc1c:	38 00 ff f2 	li      r0,-14
    bc20:	48 00 00 08 	b       bc28 <sctp_getsockopt_primary_addr+0x394>

	return 0;
    bc24:	38 00 00 00 	li      r0,0
}
    bc28:	7c 03 03 78 	mr      r3,r0
    bc2c:	80 01 00 e4 	lwz     r0,228(r1)
    bc30:	7c 08 03 a6 	mtlr    r0
    bc34:	83 e1 00 dc 	lwz     r31,220(r1)
    bc38:	38 21 00 e0 	addi    r1,r1,224
    bc3c:	4e 80 00 20 	blr

0000bc40 <sctp_getsockopt_adaptation_layer>:
 * Requests that the local endpoint set the specified Adaptation Layer
 * Indication parameter for all future INIT and INIT-ACK exchanges.
 */
static int sctp_getsockopt_adaptation_layer(struct sock *sk, int len,
				  char __user *optval, int __user *optlen)
{
    bc40:	94 21 ff c0 	stwu    r1,-64(r1)
    bc44:	7c 08 02 a6 	mflr    r0
    bc48:	90 01 00 44 	stw     r0,68(r1)
    bc4c:	93 e1 00 3c 	stw     r31,60(r1)
    bc50:	90 61 00 28 	stw     r3,40(r1)
    bc54:	90 81 00 2c 	stw     r4,44(r1)
    bc58:	90 a1 00 30 	stw     r5,48(r1)
    bc5c:	90 c1 00 34 	stw     r6,52(r1)
	struct sctp_setadaptation adaptation;

	if (len < sizeof(struct sctp_setadaptation))
    bc60:	80 01 00 2c 	lwz     r0,44(r1)
    bc64:	2b 80 00 03 	cmplwi  cr7,r0,3
    bc68:	41 9d 00 0c 	bgt-    cr7,bc74 <sctp_getsockopt_adaptation_layer+0x34>
		return -EINVAL;
    bc6c:	38 00 ff ea 	li      r0,-22
    bc70:	48 00 01 b0 	b       be20 <sctp_getsockopt_adaptation_layer+0x1e0>

	len = sizeof(struct sctp_setadaptation);
    bc74:	38 00 00 04 	li      r0,4
    bc78:	90 01 00 2c 	stw     r0,44(r1)
    bc7c:	80 01 00 28 	lwz     r0,40(r1)
    bc80:	90 01 00 10 	stw     r0,16(r1)
    bc84:	80 01 00 10 	lwz     r0,16(r1)

	adaptation.ssb_adaptation_ind = sctp_sk(sk)->adaptation_ind;
    bc88:	7c 09 03 78 	mr      r9,r0
    bc8c:	80 09 02 ec 	lwz     r0,748(r9)
    bc90:	90 01 00 24 	stw     r0,36(r1)

	if (put_user(len, optlen))
    bc94:	38 00 ff f2 	li      r0,-14
    bc98:	90 01 00 08 	stw     r0,8(r1)
    bc9c:	80 01 00 34 	lwz     r0,52(r1)
    bca0:	90 01 00 0c 	stw     r0,12(r1)
    bca4:	81 21 00 0c 	lwz     r9,12(r1)
    bca8:	7c 40 13 78 	mr      r0,r2
    bcac:	7c 0a 03 78 	mr      r10,r0
    bcb0:	80 0a 01 d4 	lwz     r0,468(r10)
    bcb4:	7f 89 00 40 	cmplw   cr7,r9,r0
    bcb8:	41 9d 00 28 	bgt-    cr7,bce0 <sctp_getsockopt_adaptation_layer+0xa0>
    bcbc:	7c 40 13 78 	mr      r0,r2
    bcc0:	7c 0b 03 78 	mr      r11,r0
    bcc4:	81 2b 01 d4 	lwz     r9,468(r11)
    bcc8:	80 01 00 0c 	lwz     r0,12(r1)
    bccc:	7c 00 48 50 	subf    r0,r0,r9
    bcd0:	2b 80 00 02 	cmplwi  cr7,r0,2
    bcd4:	40 9d 00 0c 	ble-    cr7,bce0 <sctp_getsockopt_adaptation_layer+0xa0>
    bcd8:	38 00 00 01 	li      r0,1
    bcdc:	48 00 00 08 	b       bce4 <sctp_getsockopt_adaptation_layer+0xa4>
    bce0:	38 00 00 00 	li      r0,0
    bce4:	2f 80 00 00 	cmpwi   cr7,r0,0
    bce8:	41 9e 00 28 	beq-    cr7,bd10 <sctp_getsockopt_adaptation_layer+0xd0>
    bcec:	38 00 00 00 	li      r0,0
    bcf0:	90 01 00 08 	stw     r0,8(r1)
    bcf4:	80 01 00 2c 	lwz     r0,44(r1)
    bcf8:	81 21 00 0c 	lwz     r9,12(r1)
    bcfc:	81 61 00 08 	lwz     r11,8(r1)
    bd00:	7d 7f 5b 78 	mr      r31,r11
    bd04:	90 09 00 00 	stw     r0,0(r9)
    bd08:	93 e1 00 08 	stw     r31,8(r1)
    bd0c:	60 00 00 00 	nop
    bd10:	80 01 00 08 	lwz     r0,8(r1)
    bd14:	2f 80 00 00 	cmpwi   cr7,r0,0
    bd18:	41 9e 00 0c 	beq-    cr7,bd24 <sctp_getsockopt_adaptation_layer+0xe4>
		return -EFAULT;
    bd1c:	38 00 ff f2 	li      r0,-14
    bd20:	48 00 01 00 	b       be20 <sctp_getsockopt_adaptation_layer+0x1e0>
	if (copy_to_user(optval, &adaptation, len))
    bd24:	80 01 00 2c 	lwz     r0,44(r1)
    bd28:	81 21 00 30 	lwz     r9,48(r1)
    bd2c:	91 21 00 14 	stw     r9,20(r1)
    bd30:	39 21 00 24 	addi    r9,r1,36
    bd34:	91 21 00 18 	stw     r9,24(r1)
    bd38:	90 01 00 1c 	stw     r0,28(r1)
static inline unsigned long copy_to_user(void __user *to,
		const void *from, unsigned long n)
{
	unsigned long over;

	if (access_ok(VERIFY_WRITE, to, n))
    bd3c:	81 21 00 14 	lwz     r9,20(r1)
    bd40:	7c 40 13 78 	mr      r0,r2
    bd44:	7c 0a 03 78 	mr      r10,r0
    bd48:	80 0a 01 d4 	lwz     r0,468(r10)
    bd4c:	7f 89 00 40 	cmplw   cr7,r9,r0
    bd50:	41 9d 00 3c 	bgt-    cr7,bd8c <sctp_getsockopt_adaptation_layer+0x14c>
    bd54:	80 01 00 1c 	lwz     r0,28(r1)
    bd58:	2f 80 00 00 	cmpwi   cr7,r0,0
    bd5c:	41 9e 00 28 	beq-    cr7,bd84 <sctp_getsockopt_adaptation_layer+0x144>
    bd60:	80 01 00 1c 	lwz     r0,28(r1)
    bd64:	31 20 ff ff 	addic   r9,r0,-1
    bd68:	7c 40 13 78 	mr      r0,r2
    bd6c:	7c 0a 03 78 	mr      r10,r0
    bd70:	81 6a 01 d4 	lwz     r11,468(r10)
    bd74:	80 01 00 14 	lwz     r0,20(r1)
    bd78:	7c 00 58 50 	subf    r0,r0,r11
    bd7c:	7f 89 00 40 	cmplw   cr7,r9,r0
    bd80:	41 9d 00 0c 	bgt-    cr7,bd8c <sctp_getsockopt_adaptation_layer+0x14c>
    bd84:	38 00 00 01 	li      r0,1
    bd88:	48 00 00 08 	b       bd90 <sctp_getsockopt_adaptation_layer+0x150>
    bd8c:	38 00 00 00 	li      r0,0
    bd90:	2f 80 00 00 	cmpwi   cr7,r0,0
    bd94:	41 9e 00 1c 	beq-    cr7,bdb0 <sctp_getsockopt_adaptation_layer+0x170>
		return __copy_tofrom_user(to, (__force void __user *)from, n);
    bd98:	80 61 00 14 	lwz     r3,20(r1)
    bd9c:	80 81 00 18 	lwz     r4,24(r1)
    bda0:	80 a1 00 1c 	lwz     r5,28(r1)
    bda4:	48 00 00 01 	bl      bda4 <sctp_getsockopt_adaptation_layer+0x164>
    bda8:	7c 60 1b 78 	mr      r0,r3
    bdac:	48 00 00 60 	b       be0c <sctp_getsockopt_adaptation_layer+0x1cc>
	if ((unsigned long)to < TASK_SIZE) {
    bdb0:	81 21 00 14 	lwz     r9,20(r1)
    bdb4:	3c 00 bf ff 	lis     r0,-16385
    bdb8:	60 00 ff ff 	ori     r0,r0,65535
    bdbc:	7f 89 00 40 	cmplw   cr7,r9,r0
    bdc0:	41 9d 00 48 	bgt-    cr7,be08 <sctp_getsockopt_adaptation_layer+0x1c8>
		over = (unsigned long)to + n - TASK_SIZE;
    bdc4:	81 21 00 14 	lwz     r9,20(r1)
    bdc8:	80 01 00 1c 	lwz     r0,28(r1)
    bdcc:	7c 09 02 14 	add     r0,r9,r0
    bdd0:	3d 60 40 00 	lis     r11,16384
    bdd4:	7c 00 5a 14 	add     r0,r0,r11
    bdd8:	90 01 00 20 	stw     r0,32(r1)
		return __copy_tofrom_user(to, (__force void __user *)from,
    bddc:	81 21 00 1c 	lwz     r9,28(r1)
    bde0:	80 01 00 20 	lwz     r0,32(r1)
    bde4:	7c 00 48 50 	subf    r0,r0,r9
    bde8:	80 61 00 14 	lwz     r3,20(r1)
    bdec:	80 81 00 18 	lwz     r4,24(r1)
    bdf0:	7c 05 03 78 	mr      r5,r0
    bdf4:	48 00 00 01 	bl      bdf4 <sctp_getsockopt_adaptation_layer+0x1b4>
    bdf8:	7c 69 1b 78 	mr      r9,r3
    bdfc:	80 01 00 20 	lwz     r0,32(r1)
    be00:	7c 09 02 14 	add     r0,r9,r0
    be04:	48 00 00 08 	b       be0c <sctp_getsockopt_adaptation_layer+0x1cc>
				n - over) + over;
	}
	return n;
    be08:	80 01 00 1c 	lwz     r0,28(r1)
    be0c:	2f 80 00 00 	cmpwi   cr7,r0,0
    be10:	41 9e 00 0c 	beq-    cr7,be1c <sctp_getsockopt_adaptation_layer+0x1dc>
		return -EFAULT;
    be14:	38 00 ff f2 	li      r0,-14
    be18:	48 00 00 08 	b       be20 <sctp_getsockopt_adaptation_layer+0x1e0>

	return 0;
    be1c:	38 00 00 00 	li      r0,0
}
    be20:	7c 03 03 78 	mr      r3,r0
    be24:	80 01 00 44 	lwz     r0,68(r1)
    be28:	7c 08 03 a6 	mtlr    r0
    be2c:	83 e1 00 3c 	lwz     r31,60(r1)
    be30:	38 21 00 40 	addi    r1,r1,64
    be34:	4e 80 00 20 	blr

0000be38 <sctp_getsockopt_default_send_param>:
 *   For getsockopt, it get the default sctp_sndrcvinfo structure.
 */
static int sctp_getsockopt_default_send_param(struct sock *sk,
					int len, char __user *optval,
					int __user *optlen)
{
    be38:	94 21 ff 80 	stwu    r1,-128(r1)
    be3c:	7c 08 02 a6 	mflr    r0
    be40:	90 01 00 84 	stw     r0,132(r1)
    be44:	93 e1 00 7c 	stw     r31,124(r1)
    be48:	90 61 00 68 	stw     r3,104(r1)
    be4c:	90 81 00 6c 	stw     r4,108(r1)
    be50:	90 a1 00 70 	stw     r5,112(r1)
    be54:	90 c1 00 74 	stw     r6,116(r1)
    be58:	80 01 00 68 	lwz     r0,104(r1)
    be5c:	90 01 00 18 	stw     r0,24(r1)
    be60:	80 01 00 18 	lwz     r0,24(r1)
	struct sctp_sndrcvinfo info;
	struct sctp_association *asoc;
	struct sctp_sock *sp = sctp_sk(sk);
    be64:	90 01 00 0c 	stw     r0,12(r1)

	if (len < sizeof(struct sctp_sndrcvinfo))
    be68:	80 01 00 6c 	lwz     r0,108(r1)
    be6c:	2b 80 00 1f 	cmplwi  cr7,r0,31
    be70:	41 9d 00 0c 	bgt-    cr7,be7c <sctp_getsockopt_default_send_param+0x44>
		return -EINVAL;
    be74:	38 00 ff ea 	li      r0,-22
    be78:	48 00 03 c0 	b       c238 <sctp_getsockopt_default_send_param+0x400>

	len = sizeof(struct sctp_sndrcvinfo);
    be7c:	38 00 00 20 	li      r0,32
    be80:	90 01 00 6c 	stw     r0,108(r1)

	if (copy_from_user(&info, optval, len))
    be84:	80 01 00 6c 	lwz     r0,108(r1)
    be88:	39 21 00 48 	addi    r9,r1,72
    be8c:	91 21 00 1c 	stw     r9,28(r1)
    be90:	81 21 00 70 	lwz     r9,112(r1)
    be94:	91 21 00 20 	stw     r9,32(r1)
    be98:	90 01 00 24 	stw     r0,36(r1)
static inline unsigned long copy_from_user(void *to,
		const void __user *from, unsigned long n)
{
	unsigned long over;

	if (access_ok(VERIFY_READ, from, n))
    be9c:	81 21 00 20 	lwz     r9,32(r1)
    bea0:	7c 40 13 78 	mr      r0,r2
    bea4:	7c 0a 03 78 	mr      r10,r0
    bea8:	80 0a 01 d4 	lwz     r0,468(r10)
    beac:	7f 89 00 40 	cmplw   cr7,r9,r0
    beb0:	41 9d 00 3c 	bgt-    cr7,beec <sctp_getsockopt_default_send_param+0xb4>
    beb4:	80 01 00 24 	lwz     r0,36(r1)
    beb8:	2f 80 00 00 	cmpwi   cr7,r0,0
    bebc:	41 9e 00 28 	beq-    cr7,bee4 <sctp_getsockopt_default_send_param+0xac>
    bec0:	80 01 00 24 	lwz     r0,36(r1)
    bec4:	31 20 ff ff 	addic   r9,r0,-1
    bec8:	7c 40 13 78 	mr      r0,r2
    becc:	7c 0a 03 78 	mr      r10,r0
    bed0:	81 6a 01 d4 	lwz     r11,468(r10)
    bed4:	80 01 00 20 	lwz     r0,32(r1)
    bed8:	7c 00 58 50 	subf    r0,r0,r11
    bedc:	7f 89 00 40 	cmplw   cr7,r9,r0
    bee0:	41 9d 00 0c 	bgt-    cr7,beec <sctp_getsockopt_default_send_param+0xb4>
    bee4:	38 00 00 01 	li      r0,1
    bee8:	48 00 00 08 	b       bef0 <sctp_getsockopt_default_send_param+0xb8>
    beec:	38 00 00 00 	li      r0,0
    bef0:	2f 80 00 00 	cmpwi   cr7,r0,0
    bef4:	41 9e 00 1c 	beq-    cr7,bf10 <sctp_getsockopt_default_send_param+0xd8>
		return __copy_tofrom_user((__force void __user *)to, from, n);
    bef8:	80 61 00 1c 	lwz     r3,28(r1)
    befc:	80 81 00 20 	lwz     r4,32(r1)
    bf00:	80 a1 00 24 	lwz     r5,36(r1)
    bf04:	48 00 00 01 	bl      bf04 <sctp_getsockopt_default_send_param+0xcc>
    bf08:	7c 60 1b 78 	mr      r0,r3
    bf0c:	48 00 00 60 	b       bf6c <sctp_getsockopt_default_send_param+0x134>
	if ((unsigned long)from < TASK_SIZE) {
    bf10:	81 21 00 20 	lwz     r9,32(r1)
    bf14:	3c 00 bf ff 	lis     r0,-16385
    bf18:	60 00 ff ff 	ori     r0,r0,65535
    bf1c:	7f 89 00 40 	cmplw   cr7,r9,r0
    bf20:	41 9d 00 48 	bgt-    cr7,bf68 <sctp_getsockopt_default_send_param+0x130>
		over = (unsigned long)from + n - TASK_SIZE;
    bf24:	81 21 00 20 	lwz     r9,32(r1)
    bf28:	80 01 00 24 	lwz     r0,36(r1)
    bf2c:	7c 09 02 14 	add     r0,r9,r0
    bf30:	3d 60 40 00 	lis     r11,16384
    bf34:	7c 00 5a 14 	add     r0,r0,r11
    bf38:	90 01 00 28 	stw     r0,40(r1)
		return __copy_tofrom_user((__force void __user *)to, from,
    bf3c:	81 21 00 24 	lwz     r9,36(r1)
    bf40:	80 01 00 28 	lwz     r0,40(r1)
    bf44:	7c 00 48 50 	subf    r0,r0,r9
    bf48:	80 61 00 1c 	lwz     r3,28(r1)
    bf4c:	80 81 00 20 	lwz     r4,32(r1)
    bf50:	7c 05 03 78 	mr      r5,r0
    bf54:	48 00 00 01 	bl      bf54 <sctp_getsockopt_default_send_param+0x11c>
    bf58:	7c 69 1b 78 	mr      r9,r3
    bf5c:	80 01 00 28 	lwz     r0,40(r1)
    bf60:	7c 09 02 14 	add     r0,r9,r0
    bf64:	48 00 00 08 	b       bf6c <sctp_getsockopt_default_send_param+0x134>
				n - over) + over;
	}
	return n;
    bf68:	80 01 00 24 	lwz     r0,36(r1)
    bf6c:	2f 80 00 00 	cmpwi   cr7,r0,0
    bf70:	41 9e 00 0c 	beq-    cr7,bf7c <sctp_getsockopt_default_send_param+0x144>
		return -EFAULT;
    bf74:	38 00 ff f2 	li      r0,-14
    bf78:	48 00 02 c0 	b       c238 <sctp_getsockopt_default_send_param+0x400>

	asoc = sctp_id2assoc(sk, info.sinfo_assoc_id);
    bf7c:	80 01 00 64 	lwz     r0,100(r1)
    bf80:	80 61 00 68 	lwz     r3,104(r1)
    bf84:	7c 04 03 78 	mr      r4,r0
    bf88:	48 00 00 01 	bl      bf88 <sctp_getsockopt_default_send_param+0x150>
    bf8c:	90 61 00 10 	stw     r3,16(r1)
	if (!asoc && info.sinfo_assoc_id && sctp_style(sk, UDP))
    bf90:	80 01 00 10 	lwz     r0,16(r1)
    bf94:	2f 80 00 00 	cmpwi   cr7,r0,0
    bf98:	40 9e 00 54 	bne-    cr7,bfec <sctp_getsockopt_default_send_param+0x1b4>
    bf9c:	80 01 00 64 	lwz     r0,100(r1)
    bfa0:	2f 80 00 00 	cmpwi   cr7,r0,0
    bfa4:	41 9e 00 48 	beq-    cr7,bfec <sctp_getsockopt_default_send_param+0x1b4>
    bfa8:	80 01 00 68 	lwz     r0,104(r1)
    bfac:	90 01 00 2c 	stw     r0,44(r1)
    bfb0:	38 00 00 00 	li      r0,0
    bfb4:	90 01 00 30 	stw     r0,48(r1)
    bfb8:	80 01 00 2c 	lwz     r0,44(r1)
    bfbc:	90 01 00 34 	stw     r0,52(r1)
    bfc0:	80 01 00 34 	lwz     r0,52(r1)

/* Is a socket of this style? */
#define sctp_style(sk, style) __sctp_style((sk), (SCTP_SOCKET_##style))
static inline int __sctp_style(const struct sock *sk, sctp_socket_type_t style)
{
	return sctp_sk(sk)->type == style;
    bfc4:	7c 09 03 78 	mr      r9,r0
    bfc8:	80 09 01 c8 	lwz     r0,456(r9)
    bfcc:	81 21 00 30 	lwz     r9,48(r1)
    bfd0:	7f 89 00 00 	cmpw    cr7,r9,r0
    bfd4:	7c 00 00 26 	mfcr    r0
    bfd8:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
    bfdc:	2f 80 00 00 	cmpwi   cr7,r0,0
    bfe0:	41 9e 00 0c 	beq-    cr7,bfec <sctp_getsockopt_default_send_param+0x1b4>
		return -EINVAL;
    bfe4:	38 00 ff ea 	li      r0,-22
    bfe8:	48 00 02 50 	b       c238 <sctp_getsockopt_default_send_param+0x400>

	if (asoc) {
    bfec:	80 01 00 10 	lwz     r0,16(r1)
    bff0:	2f 80 00 00 	cmpwi   cr7,r0,0
    bff4:	41 9e 00 60 	beq-    cr7,c054 <sctp_getsockopt_default_send_param+0x21c>
		info.sinfo_stream = asoc->default_stream;
    bff8:	80 01 00 10 	lwz     r0,16(r1)
    bffc:	7c 0a 03 78 	mr      r10,r0
    c000:	a0 0a 03 94 	lhz     r0,916(r10)
    c004:	54 00 04 3e 	clrlwi  r0,r0,16
    c008:	b0 01 00 48 	sth     r0,72(r1)
		info.sinfo_flags = asoc->default_flags;
    c00c:	80 01 00 10 	lwz     r0,16(r1)
    c010:	7c 0b 03 78 	mr      r11,r0
    c014:	a0 0b 03 96 	lhz     r0,918(r11)
    c018:	54 00 04 3e 	clrlwi  r0,r0,16
    c01c:	b0 01 00 4c 	sth     r0,76(r1)
		info.sinfo_ppid = asoc->default_ppid;
    c020:	80 01 00 10 	lwz     r0,16(r1)
    c024:	7c 09 03 78 	mr      r9,r0
    c028:	80 09 03 98 	lwz     r0,920(r9)
    c02c:	90 01 00 50 	stw     r0,80(r1)
		info.sinfo_context = asoc->default_context;
    c030:	80 01 00 10 	lwz     r0,16(r1)
    c034:	7c 0a 03 78 	mr      r10,r0
    c038:	80 0a 03 9c 	lwz     r0,924(r10)
    c03c:	90 01 00 54 	stw     r0,84(r1)
		info.sinfo_timetolive = asoc->default_timetolive;
    c040:	80 01 00 10 	lwz     r0,16(r1)
    c044:	7c 0b 03 78 	mr      r11,r0
    c048:	80 0b 03 a0 	lwz     r0,928(r11)
    c04c:	90 01 00 58 	stw     r0,88(r1)
    c050:	48 00 00 5c 	b       c0ac <sctp_getsockopt_default_send_param+0x274>
	} else {
		info.sinfo_stream = sp->default_stream;
    c054:	80 01 00 0c 	lwz     r0,12(r1)
    c058:	7c 09 03 78 	mr      r9,r0
    c05c:	a0 09 01 dc 	lhz     r0,476(r9)
    c060:	54 00 04 3e 	clrlwi  r0,r0,16
    c064:	b0 01 00 48 	sth     r0,72(r1)
		info.sinfo_flags = sp->default_flags;
    c068:	80 01 00 0c 	lwz     r0,12(r1)
    c06c:	7c 0a 03 78 	mr      r10,r0
    c070:	a0 0a 01 e4 	lhz     r0,484(r10)
    c074:	54 00 04 3e 	clrlwi  r0,r0,16
    c078:	b0 01 00 4c 	sth     r0,76(r1)
		info.sinfo_ppid = sp->default_ppid;
    c07c:	80 01 00 0c 	lwz     r0,12(r1)
    c080:	7c 0b 03 78 	mr      r11,r0
    c084:	80 0b 01 e0 	lwz     r0,480(r11)
    c088:	90 01 00 50 	stw     r0,80(r1)
		info.sinfo_context = sp->default_context;
    c08c:	80 01 00 0c 	lwz     r0,12(r1)
    c090:	7c 09 03 78 	mr      r9,r0
    c094:	80 09 01 e8 	lwz     r0,488(r9)
    c098:	90 01 00 54 	stw     r0,84(r1)
		info.sinfo_timetolive = sp->default_timetolive;
    c09c:	80 01 00 0c 	lwz     r0,12(r1)
    c0a0:	7c 0a 03 78 	mr      r10,r0
    c0a4:	80 0a 01 ec 	lwz     r0,492(r10)
    c0a8:	90 01 00 58 	stw     r0,88(r1)
	}

	if (put_user(len, optlen))
    c0ac:	38 00 ff f2 	li      r0,-14
    c0b0:	90 01 00 08 	stw     r0,8(r1)
    c0b4:	80 01 00 74 	lwz     r0,116(r1)
    c0b8:	90 01 00 14 	stw     r0,20(r1)
    c0bc:	81 21 00 14 	lwz     r9,20(r1)
    c0c0:	7c 40 13 78 	mr      r0,r2
    c0c4:	7c 0b 03 78 	mr      r11,r0
    c0c8:	80 0b 01 d4 	lwz     r0,468(r11)
    c0cc:	7f 89 00 40 	cmplw   cr7,r9,r0
    c0d0:	41 9d 00 28 	bgt-    cr7,c0f8 <sctp_getsockopt_default_send_param+0x2c0>
    c0d4:	7c 40 13 78 	mr      r0,r2
    c0d8:	7c 0a 03 78 	mr      r10,r0
    c0dc:	81 2a 01 d4 	lwz     r9,468(r10)
    c0e0:	80 01 00 14 	lwz     r0,20(r1)
    c0e4:	7c 00 48 50 	subf    r0,r0,r9
    c0e8:	2b 80 00 02 	cmplwi  cr7,r0,2
    c0ec:	40 9d 00 0c 	ble-    cr7,c0f8 <sctp_getsockopt_default_send_param+0x2c0>
    c0f0:	38 00 00 01 	li      r0,1
    c0f4:	48 00 00 08 	b       c0fc <sctp_getsockopt_default_send_param+0x2c4>
    c0f8:	38 00 00 00 	li      r0,0
    c0fc:	2f 80 00 00 	cmpwi   cr7,r0,0
    c100:	41 9e 00 28 	beq-    cr7,c128 <sctp_getsockopt_default_send_param+0x2f0>
    c104:	38 00 00 00 	li      r0,0
    c108:	90 01 00 08 	stw     r0,8(r1)
    c10c:	80 01 00 6c 	lwz     r0,108(r1)
    c110:	81 21 00 14 	lwz     r9,20(r1)
    c114:	81 61 00 08 	lwz     r11,8(r1)
    c118:	7d 7f 5b 78 	mr      r31,r11
    c11c:	90 09 00 00 	stw     r0,0(r9)
    c120:	93 e1 00 08 	stw     r31,8(r1)
    c124:	60 00 00 00 	nop
    c128:	80 01 00 08 	lwz     r0,8(r1)
    c12c:	2f 80 00 00 	cmpwi   cr7,r0,0
    c130:	41 9e 00 0c 	beq-    cr7,c13c <sctp_getsockopt_default_send_param+0x304>
		return -EFAULT;
    c134:	38 00 ff f2 	li      r0,-14
    c138:	48 00 01 00 	b       c238 <sctp_getsockopt_default_send_param+0x400>
	if (copy_to_user(optval, &info, len))
    c13c:	80 01 00 6c 	lwz     r0,108(r1)
    c140:	81 21 00 70 	lwz     r9,112(r1)
    c144:	91 21 00 38 	stw     r9,56(r1)
    c148:	39 21 00 48 	addi    r9,r1,72
    c14c:	91 21 00 3c 	stw     r9,60(r1)
    c150:	90 01 00 40 	stw     r0,64(r1)
static inline unsigned long copy_to_user(void __user *to,
		const void *from, unsigned long n)
{
	unsigned long over;

	if (access_ok(VERIFY_WRITE, to, n))
    c154:	81 21 00 38 	lwz     r9,56(r1)
    c158:	7c 40 13 78 	mr      r0,r2
    c15c:	7c 0b 03 78 	mr      r11,r0
    c160:	80 0b 01 d4 	lwz     r0,468(r11)
    c164:	7f 89 00 40 	cmplw   cr7,r9,r0
    c168:	41 9d 00 3c 	bgt-    cr7,c1a4 <sctp_getsockopt_default_send_param+0x36c>
    c16c:	80 01 00 40 	lwz     r0,64(r1)
    c170:	2f 80 00 00 	cmpwi   cr7,r0,0
    c174:	41 9e 00 28 	beq-    cr7,c19c <sctp_getsockopt_default_send_param+0x364>
    c178:	80 01 00 40 	lwz     r0,64(r1)
    c17c:	31 20 ff ff 	addic   r9,r0,-1
    c180:	7c 40 13 78 	mr      r0,r2
    c184:	7c 0a 03 78 	mr      r10,r0
    c188:	81 6a 01 d4 	lwz     r11,468(r10)
    c18c:	80 01 00 38 	lwz     r0,56(r1)
    c190:	7c 00 58 50 	subf    r0,r0,r11
    c194:	7f 89 00 40 	cmplw   cr7,r9,r0
    c198:	41 9d 00 0c 	bgt-    cr7,c1a4 <sctp_getsockopt_default_send_param+0x36c>
    c19c:	38 00 00 01 	li      r0,1
    c1a0:	48 00 00 08 	b       c1a8 <sctp_getsockopt_default_send_param+0x370>
    c1a4:	38 00 00 00 	li      r0,0
    c1a8:	2f 80 00 00 	cmpwi   cr7,r0,0
    c1ac:	41 9e 00 1c 	beq-    cr7,c1c8 <sctp_getsockopt_default_send_param+0x390>
		return __copy_tofrom_user(to, (__force void __user *)from, n);
    c1b0:	80 61 00 38 	lwz     r3,56(r1)
    c1b4:	80 81 00 3c 	lwz     r4,60(r1)
    c1b8:	80 a1 00 40 	lwz     r5,64(r1)
    c1bc:	48 00 00 01 	bl      c1bc <sctp_getsockopt_default_send_param+0x384>
    c1c0:	7c 60 1b 78 	mr      r0,r3
    c1c4:	48 00 00 60 	b       c224 <sctp_getsockopt_default_send_param+0x3ec>
	if ((unsigned long)to < TASK_SIZE) {
    c1c8:	81 21 00 38 	lwz     r9,56(r1)
    c1cc:	3c 00 bf ff 	lis     r0,-16385
    c1d0:	60 00 ff ff 	ori     r0,r0,65535
    c1d4:	7f 89 00 40 	cmplw   cr7,r9,r0
    c1d8:	41 9d 00 48 	bgt-    cr7,c220 <sctp_getsockopt_default_send_param+0x3e8>
		over = (unsigned long)to + n - TASK_SIZE;
    c1dc:	81 21 00 38 	lwz     r9,56(r1)
    c1e0:	80 01 00 40 	lwz     r0,64(r1)
    c1e4:	7c 09 02 14 	add     r0,r9,r0
    c1e8:	3d 60 40 00 	lis     r11,16384
    c1ec:	7c 00 5a 14 	add     r0,r0,r11
    c1f0:	90 01 00 44 	stw     r0,68(r1)
		return __copy_tofrom_user(to, (__force void __user *)from,
    c1f4:	81 21 00 40 	lwz     r9,64(r1)
    c1f8:	80 01 00 44 	lwz     r0,68(r1)
    c1fc:	7c 00 48 50 	subf    r0,r0,r9
    c200:	80 61 00 38 	lwz     r3,56(r1)
    c204:	80 81 00 3c 	lwz     r4,60(r1)
    c208:	7c 05 03 78 	mr      r5,r0
    c20c:	48 00 00 01 	bl      c20c <sctp_getsockopt_default_send_param+0x3d4>
    c210:	7c 69 1b 78 	mr      r9,r3
    c214:	80 01 00 44 	lwz     r0,68(r1)
    c218:	7c 09 02 14 	add     r0,r9,r0
    c21c:	48 00 00 08 	b       c224 <sctp_getsockopt_default_send_param+0x3ec>
				n - over) + over;
	}
	return n;
    c220:	80 01 00 40 	lwz     r0,64(r1)
    c224:	2f 80 00 00 	cmpwi   cr7,r0,0
    c228:	41 9e 00 0c 	beq-    cr7,c234 <sctp_getsockopt_default_send_param+0x3fc>
		return -EFAULT;
    c22c:	38 00 ff f2 	li      r0,-14
    c230:	48 00 00 08 	b       c238 <sctp_getsockopt_default_send_param+0x400>

	return 0;
    c234:	38 00 00 00 	li      r0,0
}
    c238:	7c 03 03 78 	mr      r3,r0
    c23c:	80 01 00 84 	lwz     r0,132(r1)
    c240:	7c 08 03 a6 	mtlr    r0
    c244:	83 e1 00 7c 	lwz     r31,124(r1)
    c248:	38 21 00 80 	addi    r1,r1,128
    c24c:	4e 80 00 20 	blr

0000c250 <sctp_getsockopt_nodelay>:
 * integer boolean flag.
 */

static int sctp_getsockopt_nodelay(struct sock *sk, int len,
				   char __user *optval, int __user *optlen)
{
    c250:	94 21 ff c0 	stwu    r1,-64(r1)
    c254:	7c 08 02 a6 	mflr    r0
    c258:	90 01 00 44 	stw     r0,68(r1)
    c25c:	93 e1 00 3c 	stw     r31,60(r1)
    c260:	90 61 00 28 	stw     r3,40(r1)
    c264:	90 81 00 2c 	stw     r4,44(r1)
    c268:	90 a1 00 30 	stw     r5,48(r1)
    c26c:	90 c1 00 34 	stw     r6,52(r1)
	int val;

	if (len < sizeof(int))
    c270:	80 01 00 2c 	lwz     r0,44(r1)
    c274:	2b 80 00 03 	cmplwi  cr7,r0,3
    c278:	41 9d 00 0c 	bgt-    cr7,c284 <sctp_getsockopt_nodelay+0x34>
		return -EINVAL;
    c27c:	38 00 ff ea 	li      r0,-22
    c280:	48 00 01 c0 	b       c440 <sctp_getsockopt_nodelay+0x1f0>

	len = sizeof(int);
    c284:	38 00 00 04 	li      r0,4
    c288:	90 01 00 2c 	stw     r0,44(r1)
    c28c:	80 01 00 28 	lwz     r0,40(r1)
    c290:	90 01 00 10 	stw     r0,16(r1)
    c294:	80 01 00 10 	lwz     r0,16(r1)
	val = (sctp_sk(sk)->nodelay == 1);
    c298:	7c 09 03 78 	mr      r9,r0
    c29c:	88 09 02 e8 	lbz     r0,744(r9)
    c2a0:	54 00 06 3e 	clrlwi  r0,r0,24
    c2a4:	2f 80 00 01 	cmpwi   cr7,r0,1
    c2a8:	7c 00 00 26 	mfcr    r0
    c2ac:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
    c2b0:	90 01 00 24 	stw     r0,36(r1)
	if (put_user(len, optlen))
    c2b4:	38 00 ff f2 	li      r0,-14
    c2b8:	90 01 00 08 	stw     r0,8(r1)
    c2bc:	80 01 00 34 	lwz     r0,52(r1)
    c2c0:	90 01 00 0c 	stw     r0,12(r1)
    c2c4:	81 21 00 0c 	lwz     r9,12(r1)
    c2c8:	7c 40 13 78 	mr      r0,r2
    c2cc:	7c 0a 03 78 	mr      r10,r0
    c2d0:	80 0a 01 d4 	lwz     r0,468(r10)
    c2d4:	7f 89 00 40 	cmplw   cr7,r9,r0
    c2d8:	41 9d 00 28 	bgt-    cr7,c300 <sctp_getsockopt_nodelay+0xb0>
    c2dc:	7c 40 13 78 	mr      r0,r2
    c2e0:	7c 0b 03 78 	mr      r11,r0
    c2e4:	81 2b 01 d4 	lwz     r9,468(r11)
    c2e8:	80 01 00 0c 	lwz     r0,12(r1)
    c2ec:	7c 00 48 50 	subf    r0,r0,r9
    c2f0:	2b 80 00 02 	cmplwi  cr7,r0,2
    c2f4:	40 9d 00 0c 	ble-    cr7,c300 <sctp_getsockopt_nodelay+0xb0>
    c2f8:	38 00 00 01 	li      r0,1
    c2fc:	48 00 00 08 	b       c304 <sctp_getsockopt_nodelay+0xb4>
    c300:	38 00 00 00 	li      r0,0
    c304:	2f 80 00 00 	cmpwi   cr7,r0,0
    c308:	41 9e 00 28 	beq-    cr7,c330 <sctp_getsockopt_nodelay+0xe0>
    c30c:	38 00 00 00 	li      r0,0
    c310:	90 01 00 08 	stw     r0,8(r1)
    c314:	80 01 00 2c 	lwz     r0,44(r1)
    c318:	81 21 00 0c 	lwz     r9,12(r1)
    c31c:	81 61 00 08 	lwz     r11,8(r1)
    c320:	7d 7f 5b 78 	mr      r31,r11
    c324:	90 09 00 00 	stw     r0,0(r9)
    c328:	93 e1 00 08 	stw     r31,8(r1)
    c32c:	60 00 00 00 	nop
    c330:	80 01 00 08 	lwz     r0,8(r1)
    c334:	2f 80 00 00 	cmpwi   cr7,r0,0
    c338:	41 9e 00 0c 	beq-    cr7,c344 <sctp_getsockopt_nodelay+0xf4>
		return -EFAULT;
    c33c:	38 00 ff f2 	li      r0,-14
    c340:	48 00 01 00 	b       c440 <sctp_getsockopt_nodelay+0x1f0>
	if (copy_to_user(optval, &val, len))
    c344:	80 01 00 2c 	lwz     r0,44(r1)
    c348:	81 21 00 30 	lwz     r9,48(r1)
    c34c:	91 21 00 14 	stw     r9,20(r1)
    c350:	39 21 00 24 	addi    r9,r1,36
    c354:	91 21 00 18 	stw     r9,24(r1)
    c358:	90 01 00 1c 	stw     r0,28(r1)
static inline unsigned long copy_to_user(void __user *to,
		const void *from, unsigned long n)
{
	unsigned long over;

	if (access_ok(VERIFY_WRITE, to, n))
    c35c:	81 21 00 14 	lwz     r9,20(r1)
    c360:	7c 40 13 78 	mr      r0,r2
    c364:	7c 0a 03 78 	mr      r10,r0
    c368:	80 0a 01 d4 	lwz     r0,468(r10)
    c36c:	7f 89 00 40 	cmplw   cr7,r9,r0
    c370:	41 9d 00 3c 	bgt-    cr7,c3ac <sctp_getsockopt_nodelay+0x15c>
    c374:	80 01 00 1c 	lwz     r0,28(r1)
    c378:	2f 80 00 00 	cmpwi   cr7,r0,0
    c37c:	41 9e 00 28 	beq-    cr7,c3a4 <sctp_getsockopt_nodelay+0x154>
    c380:	80 01 00 1c 	lwz     r0,28(r1)
    c384:	31 20 ff ff 	addic   r9,r0,-1
    c388:	7c 40 13 78 	mr      r0,r2
    c38c:	7c 0a 03 78 	mr      r10,r0
    c390:	81 6a 01 d4 	lwz     r11,468(r10)
    c394:	80 01 00 14 	lwz     r0,20(r1)
    c398:	7c 00 58 50 	subf    r0,r0,r11
    c39c:	7f 89 00 40 	cmplw   cr7,r9,r0
    c3a0:	41 9d 00 0c 	bgt-    cr7,c3ac <sctp_getsockopt_nodelay+0x15c>
    c3a4:	38 00 00 01 	li      r0,1
    c3a8:	48 00 00 08 	b       c3b0 <sctp_getsockopt_nodelay+0x160>
    c3ac:	38 00 00 00 	li      r0,0
    c3b0:	2f 80 00 00 	cmpwi   cr7,r0,0
    c3b4:	41 9e 00 1c 	beq-    cr7,c3d0 <sctp_getsockopt_nodelay+0x180>
		return __copy_tofrom_user(to, (__force void __user *)from, n);
    c3b8:	80 61 00 14 	lwz     r3,20(r1)
    c3bc:	80 81 00 18 	lwz     r4,24(r1)
    c3c0:	80 a1 00 1c 	lwz     r5,28(r1)
    c3c4:	48 00 00 01 	bl      c3c4 <sctp_getsockopt_nodelay+0x174>
    c3c8:	7c 60 1b 78 	mr      r0,r3
    c3cc:	48 00 00 60 	b       c42c <sctp_getsockopt_nodelay+0x1dc>
	if ((unsigned long)to < TASK_SIZE) {
    c3d0:	81 21 00 14 	lwz     r9,20(r1)
    c3d4:	3c 00 bf ff 	lis     r0,-16385
    c3d8:	60 00 ff ff 	ori     r0,r0,65535
    c3dc:	7f 89 00 40 	cmplw   cr7,r9,r0
    c3e0:	41 9d 00 48 	bgt-    cr7,c428 <sctp_getsockopt_nodelay+0x1d8>
		over = (unsigned long)to + n - TASK_SIZE;
    c3e4:	81 21 00 14 	lwz     r9,20(r1)
    c3e8:	80 01 00 1c 	lwz     r0,28(r1)
    c3ec:	7c 09 02 14 	add     r0,r9,r0
    c3f0:	3d 60 40 00 	lis     r11,16384
    c3f4:	7c 00 5a 14 	add     r0,r0,r11
    c3f8:	90 01 00 20 	stw     r0,32(r1)
		return __copy_tofrom_user(to, (__force void __user *)from,
    c3fc:	81 21 00 1c 	lwz     r9,28(r1)
    c400:	80 01 00 20 	lwz     r0,32(r1)
    c404:	7c 00 48 50 	subf    r0,r0,r9
    c408:	80 61 00 14 	lwz     r3,20(r1)
    c40c:	80 81 00 18 	lwz     r4,24(r1)
    c410:	7c 05 03 78 	mr      r5,r0
    c414:	48 00 00 01 	bl      c414 <sctp_getsockopt_nodelay+0x1c4>
    c418:	7c 69 1b 78 	mr      r9,r3
    c41c:	80 01 00 20 	lwz     r0,32(r1)
    c420:	7c 09 02 14 	add     r0,r9,r0
    c424:	48 00 00 08 	b       c42c <sctp_getsockopt_nodelay+0x1dc>
				n - over) + over;
	}
	return n;
    c428:	80 01 00 1c 	lwz     r0,28(r1)
    c42c:	2f 80 00 00 	cmpwi   cr7,r0,0
    c430:	41 9e 00 0c 	beq-    cr7,c43c <sctp_getsockopt_nodelay+0x1ec>
		return -EFAULT;
    c434:	38 00 ff f2 	li      r0,-14
    c438:	48 00 00 08 	b       c440 <sctp_getsockopt_nodelay+0x1f0>
	return 0;
    c43c:	38 00 00 00 	li      r0,0
}
    c440:	7c 03 03 78 	mr      r3,r0
    c444:	80 01 00 44 	lwz     r0,68(r1)
    c448:	7c 08 03 a6 	mtlr    r0
    c44c:	83 e1 00 3c 	lwz     r31,60(r1)
    c450:	38 21 00 40 	addi    r1,r1,64
    c454:	4e 80 00 20 	blr

0000c458 <sctp_getsockopt_rtoinfo>:
 * be changed.
 *
 */
static int sctp_getsockopt_rtoinfo(struct sock *sk, int len,
				char __user *optval,
				int __user *optlen) {
    c458:	94 21 ff 90 	stwu    r1,-112(r1)
    c45c:	7c 08 02 a6 	mflr    r0
    c460:	90 01 00 74 	stw     r0,116(r1)
    c464:	93 e1 00 6c 	stw     r31,108(r1)
    c468:	90 61 00 58 	stw     r3,88(r1)
    c46c:	90 81 00 5c 	stw     r4,92(r1)
    c470:	90 a1 00 60 	stw     r5,96(r1)
    c474:	90 c1 00 64 	stw     r6,100(r1)
	struct sctp_rtoinfo rtoinfo;
	struct sctp_association *asoc;

	if (len < sizeof (struct sctp_rtoinfo))
    c478:	80 01 00 5c 	lwz     r0,92(r1)
    c47c:	2b 80 00 0f 	cmplwi  cr7,r0,15
    c480:	41 9d 00 0c 	bgt-    cr7,c48c <sctp_getsockopt_rtoinfo+0x34>
		return -EINVAL;
    c484:	38 00 ff ea 	li      r0,-22
    c488:	48 00 03 a4 	b       c82c <sctp_getsockopt_rtoinfo+0x3d4>

	len = sizeof(struct sctp_rtoinfo);
    c48c:	38 00 00 10 	li      r0,16
    c490:	90 01 00 5c 	stw     r0,92(r1)

	if (copy_from_user(&rtoinfo, optval, len))
    c494:	80 01 00 5c 	lwz     r0,92(r1)
    c498:	39 21 00 48 	addi    r9,r1,72
    c49c:	91 21 00 18 	stw     r9,24(r1)
    c4a0:	81 21 00 60 	lwz     r9,96(r1)
    c4a4:	91 21 00 1c 	stw     r9,28(r1)
    c4a8:	90 01 00 20 	stw     r0,32(r1)
static inline unsigned long copy_from_user(void *to,
		const void __user *from, unsigned long n)
{
	unsigned long over;

	if (access_ok(VERIFY_READ, from, n))
    c4ac:	81 21 00 1c 	lwz     r9,28(r1)
    c4b0:	7c 40 13 78 	mr      r0,r2
    c4b4:	7c 0a 03 78 	mr      r10,r0
    c4b8:	80 0a 01 d4 	lwz     r0,468(r10)
    c4bc:	7f 89 00 40 	cmplw   cr7,r9,r0
    c4c0:	41 9d 00 3c 	bgt-    cr7,c4fc <sctp_getsockopt_rtoinfo+0xa4>
    c4c4:	80 01 00 20 	lwz     r0,32(r1)
    c4c8:	2f 80 00 00 	cmpwi   cr7,r0,0
    c4cc:	41 9e 00 28 	beq-    cr7,c4f4 <sctp_getsockopt_rtoinfo+0x9c>
    c4d0:	80 01 00 20 	lwz     r0,32(r1)
    c4d4:	31 20 ff ff 	addic   r9,r0,-1
    c4d8:	7c 40 13 78 	mr      r0,r2
    c4dc:	7c 0a 03 78 	mr      r10,r0
    c4e0:	81 6a 01 d4 	lwz     r11,468(r10)
    c4e4:	80 01 00 1c 	lwz     r0,28(r1)
    c4e8:	7c 00 58 50 	subf    r0,r0,r11
    c4ec:	7f 89 00 40 	cmplw   cr7,r9,r0
    c4f0:	41 9d 00 0c 	bgt-    cr7,c4fc <sctp_getsockopt_rtoinfo+0xa4>
    c4f4:	38 00 00 01 	li      r0,1
    c4f8:	48 00 00 08 	b       c500 <sctp_getsockopt_rtoinfo+0xa8>
    c4fc:	38 00 00 00 	li      r0,0
    c500:	2f 80 00 00 	cmpwi   cr7,r0,0
    c504:	41 9e 00 1c 	beq-    cr7,c520 <sctp_getsockopt_rtoinfo+0xc8>
		return __copy_tofrom_user((__force void __user *)to, from, n);
    c508:	80 61 00 18 	lwz     r3,24(r1)
    c50c:	80 81 00 1c 	lwz     r4,28(r1)
    c510:	80 a1 00 20 	lwz     r5,32(r1)
    c514:	48 00 00 01 	bl      c514 <sctp_getsockopt_rtoinfo+0xbc>
    c518:	7c 60 1b 78 	mr      r0,r3
    c51c:	48 00 00 60 	b       c57c <sctp_getsockopt_rtoinfo+0x124>
	if ((unsigned long)from < TASK_SIZE) {
    c520:	81 21 00 1c 	lwz     r9,28(r1)
    c524:	3c 00 bf ff 	lis     r0,-16385
    c528:	60 00 ff ff 	ori     r0,r0,65535
    c52c:	7f 89 00 40 	cmplw   cr7,r9,r0
    c530:	41 9d 00 48 	bgt-    cr7,c578 <sctp_getsockopt_rtoinfo+0x120>
		over = (unsigned long)from + n - TASK_SIZE;
    c534:	81 21 00 1c 	lwz     r9,28(r1)
    c538:	80 01 00 20 	lwz     r0,32(r1)
    c53c:	7c 09 02 14 	add     r0,r9,r0
    c540:	3d 60 40 00 	lis     r11,16384
    c544:	7c 00 5a 14 	add     r0,r0,r11
    c548:	90 01 00 24 	stw     r0,36(r1)
		return __copy_tofrom_user((__force void __user *)to, from,
    c54c:	81 21 00 20 	lwz     r9,32(r1)
    c550:	80 01 00 24 	lwz     r0,36(r1)
    c554:	7c 00 48 50 	subf    r0,r0,r9
    c558:	80 61 00 18 	lwz     r3,24(r1)
    c55c:	80 81 00 1c 	lwz     r4,28(r1)
    c560:	7c 05 03 78 	mr      r5,r0
    c564:	48 00 00 01 	bl      c564 <sctp_getsockopt_rtoinfo+0x10c>
    c568:	7c 69 1b 78 	mr      r9,r3
    c56c:	80 01 00 24 	lwz     r0,36(r1)
    c570:	7c 09 02 14 	add     r0,r9,r0
    c574:	48 00 00 08 	b       c57c <sctp_getsockopt_rtoinfo+0x124>
				n - over) + over;
	}
	return n;
    c578:	80 01 00 20 	lwz     r0,32(r1)
    c57c:	2f 80 00 00 	cmpwi   cr7,r0,0
    c580:	41 9e 00 0c 	beq-    cr7,c58c <sctp_getsockopt_rtoinfo+0x134>
		return -EFAULT;
    c584:	38 00 ff f2 	li      r0,-14
    c588:	48 00 02 a4 	b       c82c <sctp_getsockopt_rtoinfo+0x3d4>

	asoc = sctp_id2assoc(sk, rtoinfo.srto_assoc_id);
    c58c:	80 01 00 48 	lwz     r0,72(r1)
    c590:	80 61 00 58 	lwz     r3,88(r1)
    c594:	7c 04 03 78 	mr      r4,r0
    c598:	48 00 00 01 	bl      c598 <sctp_getsockopt_rtoinfo+0x140>
    c59c:	90 61 00 0c 	stw     r3,12(r1)

	if (!asoc && rtoinfo.srto_assoc_id && sctp_style(sk, UDP))
    c5a0:	80 01 00 0c 	lwz     r0,12(r1)
    c5a4:	2f 80 00 00 	cmpwi   cr7,r0,0
    c5a8:	40 9e 00 54 	bne-    cr7,c5fc <sctp_getsockopt_rtoinfo+0x1a4>
    c5ac:	80 01 00 48 	lwz     r0,72(r1)
    c5b0:	2f 80 00 00 	cmpwi   cr7,r0,0
    c5b4:	41 9e 00 48 	beq-    cr7,c5fc <sctp_getsockopt_rtoinfo+0x1a4>
    c5b8:	80 01 00 58 	lwz     r0,88(r1)
    c5bc:	90 01 00 28 	stw     r0,40(r1)
    c5c0:	38 00 00 00 	li      r0,0
    c5c4:	90 01 00 2c 	stw     r0,44(r1)
    c5c8:	80 01 00 28 	lwz     r0,40(r1)
    c5cc:	90 01 00 30 	stw     r0,48(r1)
    c5d0:	80 01 00 30 	lwz     r0,48(r1)
    c5d4:	7c 09 03 78 	mr      r9,r0
    c5d8:	80 09 01 c8 	lwz     r0,456(r9)
    c5dc:	81 21 00 2c 	lwz     r9,44(r1)
    c5e0:	7f 89 00 00 	cmpw    cr7,r9,r0
    c5e4:	7c 00 00 26 	mfcr    r0
    c5e8:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
    c5ec:	2f 80 00 00 	cmpwi   cr7,r0,0
    c5f0:	41 9e 00 0c 	beq-    cr7,c5fc <sctp_getsockopt_rtoinfo+0x1a4>
		return -EINVAL;
    c5f4:	38 00 ff ea 	li      r0,-22
    c5f8:	48 00 02 34 	b       c82c <sctp_getsockopt_rtoinfo+0x3d4>

	/* Values corresponding to the specific association. */
	if (asoc) {
    c5fc:	80 01 00 0c 	lwz     r0,12(r1)
    c600:	2f 80 00 00 	cmpwi   cr7,r0,0
    c604:	41 9e 00 5c 	beq-    cr7,c660 <sctp_getsockopt_rtoinfo+0x208>
		rtoinfo.srto_initial = jiffies_to_msecs(asoc->rto_initial);
    c608:	80 01 00 0c 	lwz     r0,12(r1)
    c60c:	7c 0a 03 78 	mr      r10,r0
    c610:	80 0a 01 c8 	lwz     r0,456(r10)
    c614:	7c 03 03 78 	mr      r3,r0
    c618:	48 00 00 01 	bl      c618 <sctp_getsockopt_rtoinfo+0x1c0>
    c61c:	7c 60 1b 78 	mr      r0,r3
    c620:	90 01 00 4c 	stw     r0,76(r1)
		rtoinfo.srto_max = jiffies_to_msecs(asoc->rto_max);
    c624:	80 01 00 0c 	lwz     r0,12(r1)
    c628:	7c 0b 03 78 	mr      r11,r0
    c62c:	80 0b 01 cc 	lwz     r0,460(r11)
    c630:	7c 03 03 78 	mr      r3,r0
    c634:	48 00 00 01 	bl      c634 <sctp_getsockopt_rtoinfo+0x1dc>
    c638:	7c 60 1b 78 	mr      r0,r3
    c63c:	90 01 00 50 	stw     r0,80(r1)
		rtoinfo.srto_min = jiffies_to_msecs(asoc->rto_min);
    c640:	80 01 00 0c 	lwz     r0,12(r1)
    c644:	7c 09 03 78 	mr      r9,r0
    c648:	80 09 01 d0 	lwz     r0,464(r9)
    c64c:	7c 03 03 78 	mr      r3,r0
    c650:	48 00 00 01 	bl      c650 <sctp_getsockopt_rtoinfo+0x1f8>
    c654:	7c 60 1b 78 	mr      r0,r3
    c658:	90 01 00 54 	stw     r0,84(r1)
    c65c:	48 00 00 44 	b       c6a0 <sctp_getsockopt_rtoinfo+0x248>
    c660:	80 01 00 58 	lwz     r0,88(r1)
    c664:	90 01 00 34 	stw     r0,52(r1)
    c668:	80 01 00 34 	lwz     r0,52(r1)
	} else {
		/* Values corresponding to the endpoint. */
		struct sctp_sock *sp = sctp_sk(sk);
    c66c:	90 01 00 10 	stw     r0,16(r1)

		rtoinfo.srto_initial = sp->rtoinfo.srto_initial;
    c670:	80 01 00 10 	lwz     r0,16(r1)
    c674:	7c 0a 03 78 	mr      r10,r0
    c678:	80 0a 02 1c 	lwz     r0,540(r10)
    c67c:	90 01 00 4c 	stw     r0,76(r1)
		rtoinfo.srto_max = sp->rtoinfo.srto_max;
    c680:	80 01 00 10 	lwz     r0,16(r1)
    c684:	7c 0b 03 78 	mr      r11,r0
    c688:	80 0b 02 20 	lwz     r0,544(r11)
    c68c:	90 01 00 50 	stw     r0,80(r1)
		rtoinfo.srto_min = sp->rtoinfo.srto_min;
    c690:	80 01 00 10 	lwz     r0,16(r1)
    c694:	7c 09 03 78 	mr      r9,r0
    c698:	80 09 02 24 	lwz     r0,548(r9)
    c69c:	90 01 00 54 	stw     r0,84(r1)
	}

	if (put_user(len, optlen))
    c6a0:	38 00 ff f2 	li      r0,-14
    c6a4:	90 01 00 08 	stw     r0,8(r1)
    c6a8:	80 01 00 64 	lwz     r0,100(r1)
    c6ac:	90 01 00 14 	stw     r0,20(r1)
    c6b0:	81 21 00 14 	lwz     r9,20(r1)
    c6b4:	7c 40 13 78 	mr      r0,r2
    c6b8:	7c 0a 03 78 	mr      r10,r0
    c6bc:	80 0a 01 d4 	lwz     r0,468(r10)
    c6c0:	7f 89 00 40 	cmplw   cr7,r9,r0
    c6c4:	41 9d 00 28 	bgt-    cr7,c6ec <sctp_getsockopt_rtoinfo+0x294>
    c6c8:	7c 40 13 78 	mr      r0,r2
    c6cc:	7c 0b 03 78 	mr      r11,r0
    c6d0:	81 2b 01 d4 	lwz     r9,468(r11)
    c6d4:	80 01 00 14 	lwz     r0,20(r1)
    c6d8:	7c 00 48 50 	subf    r0,r0,r9
    c6dc:	2b 80 00 02 	cmplwi  cr7,r0,2
    c6e0:	40 9d 00 0c 	ble-    cr7,c6ec <sctp_getsockopt_rtoinfo+0x294>
    c6e4:	38 00 00 01 	li      r0,1
    c6e8:	48 00 00 08 	b       c6f0 <sctp_getsockopt_rtoinfo+0x298>
    c6ec:	38 00 00 00 	li      r0,0
    c6f0:	2f 80 00 00 	cmpwi   cr7,r0,0
    c6f4:	41 9e 00 28 	beq-    cr7,c71c <sctp_getsockopt_rtoinfo+0x2c4>
    c6f8:	38 00 00 00 	li      r0,0
    c6fc:	90 01 00 08 	stw     r0,8(r1)
    c700:	80 01 00 5c 	lwz     r0,92(r1)
    c704:	81 21 00 14 	lwz     r9,20(r1)
    c708:	81 61 00 08 	lwz     r11,8(r1)
    c70c:	7d 7f 5b 78 	mr      r31,r11
    c710:	90 09 00 00 	stw     r0,0(r9)
    c714:	93 e1 00 08 	stw     r31,8(r1)
    c718:	60 00 00 00 	nop
    c71c:	80 01 00 08 	lwz     r0,8(r1)
    c720:	2f 80 00 00 	cmpwi   cr7,r0,0
    c724:	41 9e 00 0c 	beq-    cr7,c730 <sctp_getsockopt_rtoinfo+0x2d8>
		return -EFAULT;
    c728:	38 00 ff f2 	li      r0,-14
    c72c:	48 00 01 00 	b       c82c <sctp_getsockopt_rtoinfo+0x3d4>

	if (copy_to_user(optval, &rtoinfo, len))
    c730:	80 01 00 5c 	lwz     r0,92(r1)
    c734:	81 21 00 60 	lwz     r9,96(r1)
    c738:	91 21 00 38 	stw     r9,56(r1)
    c73c:	39 21 00 48 	addi    r9,r1,72
    c740:	91 21 00 3c 	stw     r9,60(r1)
    c744:	90 01 00 40 	stw     r0,64(r1)
static inline unsigned long copy_to_user(void __user *to,
		const void *from, unsigned long n)
{
	unsigned long over;

	if (access_ok(VERIFY_WRITE, to, n))
    c748:	81 21 00 38 	lwz     r9,56(r1)
    c74c:	7c 40 13 78 	mr      r0,r2
    c750:	7c 0a 03 78 	mr      r10,r0
    c754:	80 0a 01 d4 	lwz     r0,468(r10)
    c758:	7f 89 00 40 	cmplw   cr7,r9,r0
    c75c:	41 9d 00 3c 	bgt-    cr7,c798 <sctp_getsockopt_rtoinfo+0x340>
    c760:	80 01 00 40 	lwz     r0,64(r1)
    c764:	2f 80 00 00 	cmpwi   cr7,r0,0
    c768:	41 9e 00 28 	beq-    cr7,c790 <sctp_getsockopt_rtoinfo+0x338>
    c76c:	80 01 00 40 	lwz     r0,64(r1)
    c770:	31 20 ff ff 	addic   r9,r0,-1
    c774:	7c 40 13 78 	mr      r0,r2
    c778:	7c 0a 03 78 	mr      r10,r0
    c77c:	81 6a 01 d4 	lwz     r11,468(r10)
    c780:	80 01 00 38 	lwz     r0,56(r1)
    c784:	7c 00 58 50 	subf    r0,r0,r11
    c788:	7f 89 00 40 	cmplw   cr7,r9,r0
    c78c:	41 9d 00 0c 	bgt-    cr7,c798 <sctp_getsockopt_rtoinfo+0x340>
    c790:	38 00 00 01 	li      r0,1
    c794:	48 00 00 08 	b       c79c <sctp_getsockopt_rtoinfo+0x344>
    c798:	38 00 00 00 	li      r0,0
    c79c:	2f 80 00 00 	cmpwi   cr7,r0,0
    c7a0:	41 9e 00 1c 	beq-    cr7,c7bc <sctp_getsockopt_rtoinfo+0x364>
		return __copy_tofrom_user(to, (__force void __user *)from, n);
    c7a4:	80 61 00 38 	lwz     r3,56(r1)
    c7a8:	80 81 00 3c 	lwz     r4,60(r1)
    c7ac:	80 a1 00 40 	lwz     r5,64(r1)
    c7b0:	48 00 00 01 	bl      c7b0 <sctp_getsockopt_rtoinfo+0x358>
    c7b4:	7c 60 1b 78 	mr      r0,r3
    c7b8:	48 00 00 60 	b       c818 <sctp_getsockopt_rtoinfo+0x3c0>
	if ((unsigned long)to < TASK_SIZE) {
    c7bc:	81 21 00 38 	lwz     r9,56(r1)
    c7c0:	3c 00 bf ff 	lis     r0,-16385
    c7c4:	60 00 ff ff 	ori     r0,r0,65535
    c7c8:	7f 89 00 40 	cmplw   cr7,r9,r0
    c7cc:	41 9d 00 48 	bgt-    cr7,c814 <sctp_getsockopt_rtoinfo+0x3bc>
		over = (unsigned long)to + n - TASK_SIZE;
    c7d0:	81 21 00 38 	lwz     r9,56(r1)
    c7d4:	80 01 00 40 	lwz     r0,64(r1)
    c7d8:	7c 09 02 14 	add     r0,r9,r0
    c7dc:	3d 60 40 00 	lis     r11,16384
    c7e0:	7c 00 5a 14 	add     r0,r0,r11
    c7e4:	90 01 00 44 	stw     r0,68(r1)
		return __copy_tofrom_user(to, (__force void __user *)from,
    c7e8:	81 21 00 40 	lwz     r9,64(r1)
    c7ec:	80 01 00 44 	lwz     r0,68(r1)
    c7f0:	7c 00 48 50 	subf    r0,r0,r9
    c7f4:	80 61 00 38 	lwz     r3,56(r1)
    c7f8:	80 81 00 3c 	lwz     r4,60(r1)
    c7fc:	7c 05 03 78 	mr      r5,r0
    c800:	48 00 00 01 	bl      c800 <sctp_getsockopt_rtoinfo+0x3a8>
    c804:	7c 69 1b 78 	mr      r9,r3
    c808:	80 01 00 44 	lwz     r0,68(r1)
    c80c:	7c 09 02 14 	add     r0,r9,r0
    c810:	48 00 00 08 	b       c818 <sctp_getsockopt_rtoinfo+0x3c0>
				n - over) + over;
	}
	return n;
    c814:	80 01 00 40 	lwz     r0,64(r1)
    c818:	2f 80 00 00 	cmpwi   cr7,r0,0
    c81c:	41 9e 00 0c 	beq-    cr7,c828 <sctp_getsockopt_rtoinfo+0x3d0>
		return -EFAULT;
    c820:	38 00 ff f2 	li      r0,-14
    c824:	48 00 00 08 	b       c82c <sctp_getsockopt_rtoinfo+0x3d4>

	return 0;
    c828:	38 00 00 00 	li      r0,0
}
    c82c:	7c 03 03 78 	mr      r3,r0
    c830:	80 01 00 74 	lwz     r0,116(r1)
    c834:	7c 08 03 a6 	mtlr    r0
    c838:	83 e1 00 6c 	lwz     r31,108(r1)
    c83c:	38 21 00 70 	addi    r1,r1,112
    c840:	4e 80 00 20 	blr

0000c844 <sctp_getsockopt_associnfo>:
 *
 */
static int sctp_getsockopt_associnfo(struct sock *sk, int len,
				     char __user *optval,
				     int __user *optlen)
{
    c844:	94 21 ff 80 	stwu    r1,-128(r1)
    c848:	7c 08 02 a6 	mflr    r0
    c84c:	90 01 00 84 	stw     r0,132(r1)
    c850:	93 e1 00 7c 	stw     r31,124(r1)
    c854:	90 61 00 68 	stw     r3,104(r1)
    c858:	90 81 00 6c 	stw     r4,108(r1)
    c85c:	90 a1 00 70 	stw     r5,112(r1)
    c860:	90 c1 00 74 	stw     r6,116(r1)

	struct sctp_assocparams assocparams;
	struct sctp_association *asoc;
	struct list_head *pos;
	int cnt = 0;
    c864:	38 00 00 00 	li      r0,0
    c868:	90 01 00 0c 	stw     r0,12(r1)

	if (len < sizeof (struct sctp_assocparams))
    c86c:	80 01 00 6c 	lwz     r0,108(r1)
    c870:	2b 80 00 13 	cmplwi  cr7,r0,19
    c874:	41 9d 00 0c 	bgt-    cr7,c880 <sctp_getsockopt_associnfo+0x3c>
		return -EINVAL;
    c878:	38 00 ff ea 	li      r0,-22
    c87c:	48 00 04 68 	b       cce4 <sctp_getsockopt_associnfo+0x4a0>

	len = sizeof(struct sctp_assocparams);
    c880:	38 00 00 14 	li      r0,20
    c884:	90 01 00 6c 	stw     r0,108(r1)

	if (copy_from_user(&assocparams, optval, len))
    c888:	80 01 00 6c 	lwz     r0,108(r1)
    c88c:	39 21 00 54 	addi    r9,r1,84
    c890:	91 21 00 20 	stw     r9,32(r1)
    c894:	81 21 00 70 	lwz     r9,112(r1)
    c898:	91 21 00 24 	stw     r9,36(r1)
    c89c:	90 01 00 28 	stw     r0,40(r1)
static inline unsigned long copy_from_user(void *to,
		const void __user *from, unsigned long n)
{
	unsigned long over;

	if (access_ok(VERIFY_READ, from, n))
    c8a0:	81 21 00 24 	lwz     r9,36(r1)
    c8a4:	7c 40 13 78 	mr      r0,r2
    c8a8:	7c 0a 03 78 	mr      r10,r0
    c8ac:	80 0a 01 d4 	lwz     r0,468(r10)
    c8b0:	7f 89 00 40 	cmplw   cr7,r9,r0
    c8b4:	41 9d 00 3c 	bgt-    cr7,c8f0 <sctp_getsockopt_associnfo+0xac>
    c8b8:	80 01 00 28 	lwz     r0,40(r1)
    c8bc:	2f 80 00 00 	cmpwi   cr7,r0,0
    c8c0:	41 9e 00 28 	beq-    cr7,c8e8 <sctp_getsockopt_associnfo+0xa4>
    c8c4:	80 01 00 28 	lwz     r0,40(r1)
    c8c8:	31 20 ff ff 	addic   r9,r0,-1
    c8cc:	7c 40 13 78 	mr      r0,r2
    c8d0:	7c 0a 03 78 	mr      r10,r0
    c8d4:	81 6a 01 d4 	lwz     r11,468(r10)
    c8d8:	80 01 00 24 	lwz     r0,36(r1)
    c8dc:	7c 00 58 50 	subf    r0,r0,r11
    c8e0:	7f 89 00 40 	cmplw   cr7,r9,r0
    c8e4:	41 9d 00 0c 	bgt-    cr7,c8f0 <sctp_getsockopt_associnfo+0xac>
    c8e8:	38 00 00 01 	li      r0,1
    c8ec:	48 00 00 08 	b       c8f4 <sctp_getsockopt_associnfo+0xb0>
    c8f0:	38 00 00 00 	li      r0,0
    c8f4:	2f 80 00 00 	cmpwi   cr7,r0,0
    c8f8:	41 9e 00 1c 	beq-    cr7,c914 <sctp_getsockopt_associnfo+0xd0>
		return __copy_tofrom_user((__force void __user *)to, from, n);
    c8fc:	80 61 00 20 	lwz     r3,32(r1)
    c900:	80 81 00 24 	lwz     r4,36(r1)
    c904:	80 a1 00 28 	lwz     r5,40(r1)
    c908:	48 00 00 01 	bl      c908 <sctp_getsockopt_associnfo+0xc4>
    c90c:	7c 60 1b 78 	mr      r0,r3
    c910:	48 00 00 60 	b       c970 <sctp_getsockopt_associnfo+0x12c>
	if ((unsigned long)from < TASK_SIZE) {
    c914:	81 21 00 24 	lwz     r9,36(r1)
    c918:	3c 00 bf ff 	lis     r0,-16385
    c91c:	60 00 ff ff 	ori     r0,r0,65535
    c920:	7f 89 00 40 	cmplw   cr7,r9,r0
    c924:	41 9d 00 48 	bgt-    cr7,c96c <sctp_getsockopt_associnfo+0x128>
		over = (unsigned long)from + n - TASK_SIZE;
    c928:	81 21 00 24 	lwz     r9,36(r1)
    c92c:	80 01 00 28 	lwz     r0,40(r1)
    c930:	7c 09 02 14 	add     r0,r9,r0
    c934:	3d 60 40 00 	lis     r11,16384
    c938:	7c 00 5a 14 	add     r0,r0,r11
    c93c:	90 01 00 2c 	stw     r0,44(r1)
		return __copy_tofrom_user((__force void __user *)to, from,
    c940:	81 21 00 28 	lwz     r9,40(r1)
    c944:	80 01 00 2c 	lwz     r0,44(r1)
    c948:	7c 00 48 50 	subf    r0,r0,r9
    c94c:	80 61 00 20 	lwz     r3,32(r1)
    c950:	80 81 00 24 	lwz     r4,36(r1)
    c954:	7c 05 03 78 	mr      r5,r0
    c958:	48 00 00 01 	bl      c958 <sctp_getsockopt_associnfo+0x114>
    c95c:	7c 69 1b 78 	mr      r9,r3
    c960:	80 01 00 2c 	lwz     r0,44(r1)
    c964:	7c 09 02 14 	add     r0,r9,r0
    c968:	48 00 00 08 	b       c970 <sctp_getsockopt_associnfo+0x12c>
				n - over) + over;
	}
	return n;
    c96c:	80 01 00 28 	lwz     r0,40(r1)
    c970:	2f 80 00 00 	cmpwi   cr7,r0,0
    c974:	41 9e 00 0c 	beq-    cr7,c980 <sctp_getsockopt_associnfo+0x13c>
		return -EFAULT;
    c978:	38 00 ff f2 	li      r0,-14
    c97c:	48 00 03 68 	b       cce4 <sctp_getsockopt_associnfo+0x4a0>

	asoc = sctp_id2assoc(sk, assocparams.sasoc_assoc_id);
    c980:	80 01 00 54 	lwz     r0,84(r1)
    c984:	80 61 00 68 	lwz     r3,104(r1)
    c988:	7c 04 03 78 	mr      r4,r0
    c98c:	48 00 00 01 	bl      c98c <sctp_getsockopt_associnfo+0x148>
    c990:	90 61 00 14 	stw     r3,20(r1)

	if (!asoc && assocparams.sasoc_assoc_id && sctp_style(sk, UDP))
    c994:	80 01 00 14 	lwz     r0,20(r1)
    c998:	2f 80 00 00 	cmpwi   cr7,r0,0
    c99c:	40 9e 00 54 	bne-    cr7,c9f0 <sctp_getsockopt_associnfo+0x1ac>
    c9a0:	80 01 00 54 	lwz     r0,84(r1)
    c9a4:	2f 80 00 00 	cmpwi   cr7,r0,0
    c9a8:	41 9e 00 48 	beq-    cr7,c9f0 <sctp_getsockopt_associnfo+0x1ac>
    c9ac:	80 01 00 68 	lwz     r0,104(r1)
    c9b0:	90 01 00 30 	stw     r0,48(r1)
    c9b4:	38 00 00 00 	li      r0,0
    c9b8:	90 01 00 34 	stw     r0,52(r1)
    c9bc:	80 01 00 30 	lwz     r0,48(r1)
    c9c0:	90 01 00 38 	stw     r0,56(r1)
    c9c4:	80 01 00 38 	lwz     r0,56(r1)
    c9c8:	7c 09 03 78 	mr      r9,r0
    c9cc:	80 09 01 c8 	lwz     r0,456(r9)
    c9d0:	81 21 00 34 	lwz     r9,52(r1)
    c9d4:	7f 89 00 00 	cmpw    cr7,r9,r0
    c9d8:	7c 00 00 26 	mfcr    r0
    c9dc:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
    c9e0:	2f 80 00 00 	cmpwi   cr7,r0,0
    c9e4:	41 9e 00 0c 	beq-    cr7,c9f0 <sctp_getsockopt_associnfo+0x1ac>
		return -EINVAL;
    c9e8:	38 00 ff ea 	li      r0,-22
    c9ec:	48 00 02 f8 	b       cce4 <sctp_getsockopt_associnfo+0x4a0>

	/* Values correspoinding to the specific association */
	if (asoc) {
    c9f0:	80 01 00 14 	lwz     r0,20(r1)
    c9f4:	2f 80 00 00 	cmpwi   cr7,r0,0
    c9f8:	41 9e 00 f8 	beq-    cr7,caf0 <sctp_getsockopt_associnfo+0x2ac>
		assocparams.sasoc_asocmaxrxt = asoc->max_retrans;
    c9fc:	80 01 00 14 	lwz     r0,20(r1)
    ca00:	7c 0a 03 78 	mr      r10,r0
    ca04:	80 0a 01 d8 	lwz     r0,472(r10)
    ca08:	54 00 04 3e 	clrlwi  r0,r0,16
    ca0c:	b0 01 00 58 	sth     r0,88(r1)
		assocparams.sasoc_peer_rwnd = asoc->peer.rwnd;
    ca10:	80 01 00 14 	lwz     r0,20(r1)
    ca14:	7c 0b 03 78 	mr      r11,r0
    ca18:	80 0b 00 e4 	lwz     r0,228(r11)
    ca1c:	90 01 00 5c 	stw     r0,92(r1)
		assocparams.sasoc_local_rwnd = asoc->a_rwnd;
    ca20:	80 01 00 14 	lwz     r0,20(r1)
    ca24:	7c 09 03 78 	mr      r9,r0
    ca28:	80 09 03 68 	lwz     r0,872(r9)
    ca2c:	90 01 00 60 	stw     r0,96(r1)
		assocparams.sasoc_cookie_life = (asoc->cookie_life.tv_sec
    ca30:	80 01 00 14 	lwz     r0,20(r1)
    ca34:	7c 0a 03 78 	mr      r10,r0
    ca38:	80 0a 01 bc 	lwz     r0,444(r10)
						* 1000) +
    ca3c:	1d 20 03 e8 	mulli   r9,r0,1000
						(asoc->cookie_life.tv_usec
    ca40:	80 01 00 14 	lwz     r0,20(r1)
    ca44:	7c 0b 03 78 	mr      r11,r0
    ca48:	80 0b 01 c0 	lwz     r0,448(r11)
						/ 1000);
    ca4c:	3d 60 10 62 	lis     r11,4194
    ca50:	61 6b 4d d3 	ori     r11,r11,19923
    ca54:	7d 60 58 96 	mulhw   r11,r0,r11
    ca58:	7d 6b 36 70 	srawi   r11,r11,6
    ca5c:	7c 00 fe 70 	srawi   r0,r0,31
    ca60:	7c 00 58 50 	subf    r0,r0,r11
	if (asoc) {
		assocparams.sasoc_asocmaxrxt = asoc->max_retrans;
		assocparams.sasoc_peer_rwnd = asoc->peer.rwnd;
		assocparams.sasoc_local_rwnd = asoc->a_rwnd;
		assocparams.sasoc_cookie_life = (asoc->cookie_life.tv_sec
						* 1000) +
    ca64:	7c 09 02 14 	add     r0,r9,r0
	/* Values correspoinding to the specific association */
	if (asoc) {
		assocparams.sasoc_asocmaxrxt = asoc->max_retrans;
		assocparams.sasoc_peer_rwnd = asoc->peer.rwnd;
		assocparams.sasoc_local_rwnd = asoc->a_rwnd;
		assocparams.sasoc_cookie_life = (asoc->cookie_life.tv_sec
    ca68:	90 01 00 64 	stw     r0,100(r1)
						* 1000) +
						(asoc->cookie_life.tv_usec
						/ 1000);

		list_for_each(pos, &asoc->peer.transport_addr_list) {
    ca6c:	80 01 00 14 	lwz     r0,20(r1)
    ca70:	7c 09 03 78 	mr      r9,r0
    ca74:	80 09 00 e8 	lwz     r0,232(r9)
    ca78:	90 01 00 08 	stw     r0,8(r1)
    ca7c:	48 00 00 20 	b       ca9c <sctp_getsockopt_associnfo+0x258>
			cnt ++;
    ca80:	80 01 00 0c 	lwz     r0,12(r1)
    ca84:	30 00 00 01 	addic   r0,r0,1
    ca88:	90 01 00 0c 	stw     r0,12(r1)
		assocparams.sasoc_cookie_life = (asoc->cookie_life.tv_sec
						* 1000) +
						(asoc->cookie_life.tv_usec
						/ 1000);

		list_for_each(pos, &asoc->peer.transport_addr_list) {
    ca8c:	80 01 00 08 	lwz     r0,8(r1)
    ca90:	7c 0a 03 78 	mr      r10,r0
    ca94:	80 0a 00 00 	lwz     r0,0(r10)
    ca98:	90 01 00 08 	stw     r0,8(r1)
    ca9c:	80 01 00 08 	lwz     r0,8(r1)
    caa0:	7c 0b 03 78 	mr      r11,r0
    caa4:	80 0b 00 00 	lwz     r0,0(r11)
    caa8:	90 01 00 3c 	stw     r0,60(r1)
#define ARCH_HAS_PREFETCHW
#define ARCH_HAS_SPINLOCK_PREFETCH

static inline void prefetch(const void *x)
{
	if (unlikely(!x))
    caac:	80 01 00 3c 	lwz     r0,60(r1)
    cab0:	2f 80 00 00 	cmpwi   cr7,r0,0
    cab4:	7c 00 00 26 	mfcr    r0
    cab8:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
    cabc:	2f 80 00 00 	cmpwi   cr7,r0,0
    cac0:	40 9e 00 0c 	bne-    cr7,cacc <sctp_getsockopt_associnfo+0x288>
		return;

	__asm__ __volatile__ ("dcbt 0,%0" : : "r" (x));
    cac4:	80 01 00 3c 	lwz     r0,60(r1)
    cac8:	7c 00 02 2c 	dcbt    r0,r0
    cacc:	80 01 00 14 	lwz     r0,20(r1)
    cad0:	31 20 00 e8 	addic   r9,r0,232
    cad4:	80 01 00 08 	lwz     r0,8(r1)
    cad8:	7f 89 00 00 	cmpw    cr7,r9,r0
    cadc:	40 9e ff a4 	bne+    cr7,ca80 <sctp_getsockopt_associnfo+0x23c>
			cnt ++;
		}

		assocparams.sasoc_number_peer_destinations = cnt;
    cae0:	80 01 00 0c 	lwz     r0,12(r1)
    cae4:	54 00 04 3e 	clrlwi  r0,r0,16
    cae8:	b0 01 00 5a 	sth     r0,90(r1)
    caec:	48 00 00 6c 	b       cb58 <sctp_getsockopt_associnfo+0x314>
    caf0:	80 01 00 68 	lwz     r0,104(r1)
    caf4:	90 01 00 40 	stw     r0,64(r1)
    caf8:	80 01 00 40 	lwz     r0,64(r1)
	} else {
		/* Values corresponding to the endpoint */
		struct sctp_sock *sp = sctp_sk(sk);
    cafc:	90 01 00 18 	stw     r0,24(r1)

		assocparams.sasoc_asocmaxrxt = sp->assocparams.sasoc_asocmaxrxt;
    cb00:	80 01 00 18 	lwz     r0,24(r1)
    cb04:	7c 09 03 78 	mr      r9,r0
    cb08:	a0 09 02 d0 	lhz     r0,720(r9)
    cb0c:	54 00 04 3e 	clrlwi  r0,r0,16
    cb10:	b0 01 00 58 	sth     r0,88(r1)
		assocparams.sasoc_peer_rwnd = sp->assocparams.sasoc_peer_rwnd;
    cb14:	80 01 00 18 	lwz     r0,24(r1)
    cb18:	7c 0a 03 78 	mr      r10,r0
    cb1c:	80 0a 02 d4 	lwz     r0,724(r10)
    cb20:	90 01 00 5c 	stw     r0,92(r1)
		assocparams.sasoc_local_rwnd = sp->assocparams.sasoc_local_rwnd;
    cb24:	80 01 00 18 	lwz     r0,24(r1)
    cb28:	7c 0b 03 78 	mr      r11,r0
    cb2c:	80 0b 02 d8 	lwz     r0,728(r11)
    cb30:	90 01 00 60 	stw     r0,96(r1)
		assocparams.sasoc_cookie_life =
					sp->assocparams.sasoc_cookie_life;
    cb34:	80 01 00 18 	lwz     r0,24(r1)
    cb38:	7c 09 03 78 	mr      r9,r0
    cb3c:	80 09 02 dc 	lwz     r0,732(r9)
		struct sctp_sock *sp = sctp_sk(sk);

		assocparams.sasoc_asocmaxrxt = sp->assocparams.sasoc_asocmaxrxt;
		assocparams.sasoc_peer_rwnd = sp->assocparams.sasoc_peer_rwnd;
		assocparams.sasoc_local_rwnd = sp->assocparams.sasoc_local_rwnd;
		assocparams.sasoc_cookie_life =
    cb40:	90 01 00 64 	stw     r0,100(r1)
					sp->assocparams.sasoc_cookie_life;
		assocparams.sasoc_number_peer_destinations =
					sp->assocparams.
    cb44:	80 01 00 18 	lwz     r0,24(r1)
    cb48:	7c 0a 03 78 	mr      r10,r0
    cb4c:	a0 0a 02 d2 	lhz     r0,722(r10)
    cb50:	54 00 04 3e 	clrlwi  r0,r0,16
		assocparams.sasoc_asocmaxrxt = sp->assocparams.sasoc_asocmaxrxt;
		assocparams.sasoc_peer_rwnd = sp->assocparams.sasoc_peer_rwnd;
		assocparams.sasoc_local_rwnd = sp->assocparams.sasoc_local_rwnd;
		assocparams.sasoc_cookie_life =
					sp->assocparams.sasoc_cookie_life;
		assocparams.sasoc_number_peer_destinations =
    cb54:	b0 01 00 5a 	sth     r0,90(r1)
					sp->assocparams.
					sasoc_number_peer_destinations;
	}

	if (put_user(len, optlen))
    cb58:	38 00 ff f2 	li      r0,-14
    cb5c:	90 01 00 10 	stw     r0,16(r1)
    cb60:	80 01 00 74 	lwz     r0,116(r1)
    cb64:	90 01 00 1c 	stw     r0,28(r1)
    cb68:	81 21 00 1c 	lwz     r9,28(r1)
    cb6c:	7c 40 13 78 	mr      r0,r2
    cb70:	7c 0b 03 78 	mr      r11,r0
    cb74:	80 0b 01 d4 	lwz     r0,468(r11)
    cb78:	7f 89 00 40 	cmplw   cr7,r9,r0
    cb7c:	41 9d 00 28 	bgt-    cr7,cba4 <sctp_getsockopt_associnfo+0x360>
    cb80:	7c 40 13 78 	mr      r0,r2
    cb84:	7c 0a 03 78 	mr      r10,r0
    cb88:	81 2a 01 d4 	lwz     r9,468(r10)
    cb8c:	80 01 00 1c 	lwz     r0,28(r1)
    cb90:	7c 00 48 50 	subf    r0,r0,r9
    cb94:	2b 80 00 02 	cmplwi  cr7,r0,2
    cb98:	40 9d 00 0c 	ble-    cr7,cba4 <sctp_getsockopt_associnfo+0x360>
    cb9c:	38 00 00 01 	li      r0,1
    cba0:	48 00 00 08 	b       cba8 <sctp_getsockopt_associnfo+0x364>
    cba4:	38 00 00 00 	li      r0,0
    cba8:	2f 80 00 00 	cmpwi   cr7,r0,0
    cbac:	41 9e 00 28 	beq-    cr7,cbd4 <sctp_getsockopt_associnfo+0x390>
    cbb0:	38 00 00 00 	li      r0,0
    cbb4:	90 01 00 10 	stw     r0,16(r1)
    cbb8:	80 01 00 6c 	lwz     r0,108(r1)
    cbbc:	81 21 00 1c 	lwz     r9,28(r1)
    cbc0:	81 61 00 10 	lwz     r11,16(r1)
    cbc4:	7d 7f 5b 78 	mr      r31,r11
    cbc8:	90 09 00 00 	stw     r0,0(r9)
    cbcc:	93 e1 00 10 	stw     r31,16(r1)
    cbd0:	60 00 00 00 	nop
    cbd4:	80 01 00 10 	lwz     r0,16(r1)
    cbd8:	2f 80 00 00 	cmpwi   cr7,r0,0
    cbdc:	41 9e 00 0c 	beq-    cr7,cbe8 <sctp_getsockopt_associnfo+0x3a4>
		return -EFAULT;
    cbe0:	38 00 ff f2 	li      r0,-14
    cbe4:	48 00 01 00 	b       cce4 <sctp_getsockopt_associnfo+0x4a0>

	if (copy_to_user(optval, &assocparams, len))
    cbe8:	80 01 00 6c 	lwz     r0,108(r1)
    cbec:	81 21 00 70 	lwz     r9,112(r1)
    cbf0:	91 21 00 44 	stw     r9,68(r1)
    cbf4:	39 21 00 54 	addi    r9,r1,84
    cbf8:	91 21 00 48 	stw     r9,72(r1)
    cbfc:	90 01 00 4c 	stw     r0,76(r1)
static inline unsigned long copy_to_user(void __user *to,
		const void *from, unsigned long n)
{
	unsigned long over;

	if (access_ok(VERIFY_WRITE, to, n))
    cc00:	81 21 00 44 	lwz     r9,68(r1)
    cc04:	7c 40 13 78 	mr      r0,r2
    cc08:	7c 0b 03 78 	mr      r11,r0
    cc0c:	80 0b 01 d4 	lwz     r0,468(r11)
    cc10:	7f 89 00 40 	cmplw   cr7,r9,r0
    cc14:	41 9d 00 3c 	bgt-    cr7,cc50 <sctp_getsockopt_associnfo+0x40c>
    cc18:	80 01 00 4c 	lwz     r0,76(r1)
    cc1c:	2f 80 00 00 	cmpwi   cr7,r0,0
    cc20:	41 9e 00 28 	beq-    cr7,cc48 <sctp_getsockopt_associnfo+0x404>
    cc24:	80 01 00 4c 	lwz     r0,76(r1)
    cc28:	31 20 ff ff 	addic   r9,r0,-1
    cc2c:	7c 40 13 78 	mr      r0,r2
    cc30:	7c 0a 03 78 	mr      r10,r0
    cc34:	81 6a 01 d4 	lwz     r11,468(r10)
    cc38:	80 01 00 44 	lwz     r0,68(r1)
    cc3c:	7c 00 58 50 	subf    r0,r0,r11
    cc40:	7f 89 00 40 	cmplw   cr7,r9,r0
    cc44:	41 9d 00 0c 	bgt-    cr7,cc50 <sctp_getsockopt_associnfo+0x40c>
    cc48:	38 00 00 01 	li      r0,1
    cc4c:	48 00 00 08 	b       cc54 <sctp_getsockopt_associnfo+0x410>
    cc50:	38 00 00 00 	li      r0,0
    cc54:	2f 80 00 00 	cmpwi   cr7,r0,0
    cc58:	41 9e 00 1c 	beq-    cr7,cc74 <sctp_getsockopt_associnfo+0x430>
		return __copy_tofrom_user(to, (__force void __user *)from, n);
    cc5c:	80 61 00 44 	lwz     r3,68(r1)
    cc60:	80 81 00 48 	lwz     r4,72(r1)
    cc64:	80 a1 00 4c 	lwz     r5,76(r1)
    cc68:	48 00 00 01 	bl      cc68 <sctp_getsockopt_associnfo+0x424>
    cc6c:	7c 60 1b 78 	mr      r0,r3
    cc70:	48 00 00 60 	b       ccd0 <sctp_getsockopt_associnfo+0x48c>
	if ((unsigned long)to < TASK_SIZE) {
    cc74:	81 21 00 44 	lwz     r9,68(r1)
    cc78:	3c 00 bf ff 	lis     r0,-16385
    cc7c:	60 00 ff ff 	ori     r0,r0,65535
    cc80:	7f 89 00 40 	cmplw   cr7,r9,r0
    cc84:	41 9d 00 48 	bgt-    cr7,cccc <sctp_getsockopt_associnfo+0x488>
		over = (unsigned long)to + n - TASK_SIZE;
    cc88:	81 21 00 44 	lwz     r9,68(r1)
    cc8c:	80 01 00 4c 	lwz     r0,76(r1)
    cc90:	7c 09 02 14 	add     r0,r9,r0
    cc94:	3d 60 40 00 	lis     r11,16384
    cc98:	7c 00 5a 14 	add     r0,r0,r11
    cc9c:	90 01 00 50 	stw     r0,80(r1)
		return __copy_tofrom_user(to, (__force void __user *)from,
    cca0:	81 21 00 4c 	lwz     r9,76(r1)
    cca4:	80 01 00 50 	lwz     r0,80(r1)
    cca8:	7c 00 48 50 	subf    r0,r0,r9
    ccac:	80 61 00 44 	lwz     r3,68(r1)
    ccb0:	80 81 00 48 	lwz     r4,72(r1)
    ccb4:	7c 05 03 78 	mr      r5,r0
    ccb8:	48 00 00 01 	bl      ccb8 <sctp_getsockopt_associnfo+0x474>
    ccbc:	7c 69 1b 78 	mr      r9,r3
    ccc0:	80 01 00 50 	lwz     r0,80(r1)
    ccc4:	7c 09 02 14 	add     r0,r9,r0
    ccc8:	48 00 00 08 	b       ccd0 <sctp_getsockopt_associnfo+0x48c>
				n - over) + over;
	}
	return n;
    cccc:	80 01 00 4c 	lwz     r0,76(r1)
    ccd0:	2f 80 00 00 	cmpwi   cr7,r0,0
    ccd4:	41 9e 00 0c 	beq-    cr7,cce0 <sctp_getsockopt_associnfo+0x49c>
		return -EFAULT;
    ccd8:	38 00 ff f2 	li      r0,-14
    ccdc:	48 00 00 08 	b       cce4 <sctp_getsockopt_associnfo+0x4a0>

	return 0;
    cce0:	38 00 00 00 	li      r0,0
}
    cce4:	7c 03 03 78 	mr      r3,r0
    cce8:	80 01 00 84 	lwz     r0,132(r1)
    ccec:	7c 08 03 a6 	mtlr    r0
    ccf0:	83 e1 00 7c 	lwz     r31,124(r1)
    ccf4:	38 21 00 80 	addi    r1,r1,128
    ccf8:	4e 80 00 20 	blr

0000ccfc <sctp_getsockopt_mappedv4>:
 * addresses and a user will receive both PF_INET6 and PF_INET type
 * addresses on the socket.
 */
static int sctp_getsockopt_mappedv4(struct sock *sk, int len,
				    char __user *optval, int __user *optlen)
{
    ccfc:	94 21 ff b0 	stwu    r1,-80(r1)
    cd00:	7c 08 02 a6 	mflr    r0
    cd04:	90 01 00 54 	stw     r0,84(r1)
    cd08:	93 e1 00 4c 	stw     r31,76(r1)
    cd0c:	90 61 00 38 	stw     r3,56(r1)
    cd10:	90 81 00 3c 	stw     r4,60(r1)
    cd14:	90 a1 00 40 	stw     r5,64(r1)
    cd18:	90 c1 00 44 	stw     r6,68(r1)
    cd1c:	80 01 00 38 	lwz     r0,56(r1)
    cd20:	90 01 00 14 	stw     r0,20(r1)
    cd24:	80 01 00 14 	lwz     r0,20(r1)
	int val;
	struct sctp_sock *sp = sctp_sk(sk);
    cd28:	90 01 00 0c 	stw     r0,12(r1)

	if (len < sizeof(int))
    cd2c:	80 01 00 3c 	lwz     r0,60(r1)
    cd30:	2b 80 00 03 	cmplwi  cr7,r0,3
    cd34:	41 9d 00 0c 	bgt-    cr7,cd40 <sctp_getsockopt_mappedv4+0x44>
		return -EINVAL;
    cd38:	38 00 ff ea 	li      r0,-22
    cd3c:	48 00 01 ac 	b       cee8 <sctp_getsockopt_mappedv4+0x1ec>

	len = sizeof(int);
    cd40:	38 00 00 04 	li      r0,4
    cd44:	90 01 00 3c 	stw     r0,60(r1)
	val = sp->v4mapped;
    cd48:	80 01 00 0c 	lwz     r0,12(r1)
    cd4c:	7c 09 03 78 	mr      r9,r0
    cd50:	88 09 02 ea 	lbz     r0,746(r9)
    cd54:	54 00 06 3e 	clrlwi  r0,r0,24
    cd58:	90 01 00 28 	stw     r0,40(r1)
	if (put_user(len, optlen))
    cd5c:	38 00 ff f2 	li      r0,-14
    cd60:	90 01 00 08 	stw     r0,8(r1)
    cd64:	80 01 00 44 	lwz     r0,68(r1)
    cd68:	90 01 00 10 	stw     r0,16(r1)
    cd6c:	81 21 00 10 	lwz     r9,16(r1)
    cd70:	7c 40 13 78 	mr      r0,r2
    cd74:	7c 0a 03 78 	mr      r10,r0
    cd78:	80 0a 01 d4 	lwz     r0,468(r10)
    cd7c:	7f 89 00 40 	cmplw   cr7,r9,r0
    cd80:	41 9d 00 28 	bgt-    cr7,cda8 <sctp_getsockopt_mappedv4+0xac>
    cd84:	7c 40 13 78 	mr      r0,r2
    cd88:	7c 0b 03 78 	mr      r11,r0
    cd8c:	81 2b 01 d4 	lwz     r9,468(r11)
    cd90:	80 01 00 10 	lwz     r0,16(r1)
    cd94:	7c 00 48 50 	subf    r0,r0,r9
    cd98:	2b 80 00 02 	cmplwi  cr7,r0,2
    cd9c:	40 9d 00 0c 	ble-    cr7,cda8 <sctp_getsockopt_mappedv4+0xac>
    cda0:	38 00 00 01 	li      r0,1
    cda4:	48 00 00 08 	b       cdac <sctp_getsockopt_mappedv4+0xb0>
    cda8:	38 00 00 00 	li      r0,0
    cdac:	2f 80 00 00 	cmpwi   cr7,r0,0
    cdb0:	41 9e 00 28 	beq-    cr7,cdd8 <sctp_getsockopt_mappedv4+0xdc>
    cdb4:	38 00 00 00 	li      r0,0
    cdb8:	90 01 00 08 	stw     r0,8(r1)
    cdbc:	80 01 00 3c 	lwz     r0,60(r1)
    cdc0:	81 21 00 10 	lwz     r9,16(r1)
    cdc4:	81 61 00 08 	lwz     r11,8(r1)
    cdc8:	7d 7f 5b 78 	mr      r31,r11
    cdcc:	90 09 00 00 	stw     r0,0(r9)
    cdd0:	93 e1 00 08 	stw     r31,8(r1)
    cdd4:	60 00 00 00 	nop
    cdd8:	80 01 00 08 	lwz     r0,8(r1)
    cddc:	2f 80 00 00 	cmpwi   cr7,r0,0
    cde0:	41 9e 00 0c 	beq-    cr7,cdec <sctp_getsockopt_mappedv4+0xf0>
		return -EFAULT;
    cde4:	38 00 ff f2 	li      r0,-14
    cde8:	48 00 01 00 	b       cee8 <sctp_getsockopt_mappedv4+0x1ec>
	if (copy_to_user(optval, &val, len))
    cdec:	80 01 00 3c 	lwz     r0,60(r1)
    cdf0:	81 21 00 40 	lwz     r9,64(r1)
    cdf4:	91 21 00 18 	stw     r9,24(r1)
    cdf8:	39 21 00 28 	addi    r9,r1,40
    cdfc:	91 21 00 1c 	stw     r9,28(r1)
    ce00:	90 01 00 20 	stw     r0,32(r1)
static inline unsigned long copy_to_user(void __user *to,
		const void *from, unsigned long n)
{
	unsigned long over;

	if (access_ok(VERIFY_WRITE, to, n))
    ce04:	81 21 00 18 	lwz     r9,24(r1)
    ce08:	7c 40 13 78 	mr      r0,r2
    ce0c:	7c 0a 03 78 	mr      r10,r0
    ce10:	80 0a 01 d4 	lwz     r0,468(r10)
    ce14:	7f 89 00 40 	cmplw   cr7,r9,r0
    ce18:	41 9d 00 3c 	bgt-    cr7,ce54 <sctp_getsockopt_mappedv4+0x158>
    ce1c:	80 01 00 20 	lwz     r0,32(r1)
    ce20:	2f 80 00 00 	cmpwi   cr7,r0,0
    ce24:	41 9e 00 28 	beq-    cr7,ce4c <sctp_getsockopt_mappedv4+0x150>
    ce28:	80 01 00 20 	lwz     r0,32(r1)
    ce2c:	31 20 ff ff 	addic   r9,r0,-1
    ce30:	7c 40 13 78 	mr      r0,r2
    ce34:	7c 0a 03 78 	mr      r10,r0
    ce38:	81 6a 01 d4 	lwz     r11,468(r10)
    ce3c:	80 01 00 18 	lwz     r0,24(r1)
    ce40:	7c 00 58 50 	subf    r0,r0,r11
    ce44:	7f 89 00 40 	cmplw   cr7,r9,r0
    ce48:	41 9d 00 0c 	bgt-    cr7,ce54 <sctp_getsockopt_mappedv4+0x158>
    ce4c:	38 00 00 01 	li      r0,1
    ce50:	48 00 00 08 	b       ce58 <sctp_getsockopt_mappedv4+0x15c>
    ce54:	38 00 00 00 	li      r0,0
    ce58:	2f 80 00 00 	cmpwi   cr7,r0,0
    ce5c:	41 9e 00 1c 	beq-    cr7,ce78 <sctp_getsockopt_mappedv4+0x17c>
		return __copy_tofrom_user(to, (__force void __user *)from, n);
    ce60:	80 61 00 18 	lwz     r3,24(r1)
    ce64:	80 81 00 1c 	lwz     r4,28(r1)
    ce68:	80 a1 00 20 	lwz     r5,32(r1)
    ce6c:	48 00 00 01 	bl      ce6c <sctp_getsockopt_mappedv4+0x170>
    ce70:	7c 60 1b 78 	mr      r0,r3
    ce74:	48 00 00 60 	b       ced4 <sctp_getsockopt_mappedv4+0x1d8>
	if ((unsigned long)to < TASK_SIZE) {
    ce78:	81 21 00 18 	lwz     r9,24(r1)
    ce7c:	3c 00 bf ff 	lis     r0,-16385
    ce80:	60 00 ff ff 	ori     r0,r0,65535
    ce84:	7f 89 00 40 	cmplw   cr7,r9,r0
    ce88:	41 9d 00 48 	bgt-    cr7,ced0 <sctp_getsockopt_mappedv4+0x1d4>
		over = (unsigned long)to + n - TASK_SIZE;
    ce8c:	81 21 00 18 	lwz     r9,24(r1)
    ce90:	80 01 00 20 	lwz     r0,32(r1)
    ce94:	7c 09 02 14 	add     r0,r9,r0
    ce98:	3d 60 40 00 	lis     r11,16384
    ce9c:	7c 00 5a 14 	add     r0,r0,r11
    cea0:	90 01 00 24 	stw     r0,36(r1)
		return __copy_tofrom_user(to, (__force void __user *)from,
    cea4:	81 21 00 20 	lwz     r9,32(r1)
    cea8:	80 01 00 24 	lwz     r0,36(r1)
    ceac:	7c 00 48 50 	subf    r0,r0,r9
    ceb0:	80 61 00 18 	lwz     r3,24(r1)
    ceb4:	80 81 00 1c 	lwz     r4,28(r1)
    ceb8:	7c 05 03 78 	mr      r5,r0
    cebc:	48 00 00 01 	bl      cebc <sctp_getsockopt_mappedv4+0x1c0>
    cec0:	7c 69 1b 78 	mr      r9,r3
    cec4:	80 01 00 24 	lwz     r0,36(r1)
    cec8:	7c 09 02 14 	add     r0,r9,r0
    cecc:	48 00 00 08 	b       ced4 <sctp_getsockopt_mappedv4+0x1d8>
				n - over) + over;
	}
	return n;
    ced0:	80 01 00 20 	lwz     r0,32(r1)
    ced4:	2f 80 00 00 	cmpwi   cr7,r0,0
    ced8:	41 9e 00 0c 	beq-    cr7,cee4 <sctp_getsockopt_mappedv4+0x1e8>
		return -EFAULT;
    cedc:	38 00 ff f2 	li      r0,-14
    cee0:	48 00 00 08 	b       cee8 <sctp_getsockopt_mappedv4+0x1ec>

	return 0;
    cee4:	38 00 00 00 	li      r0,0
}
    cee8:	7c 03 03 78 	mr      r3,r0
    ceec:	80 01 00 54 	lwz     r0,84(r1)
    cef0:	7c 08 03 a6 	mtlr    r0
    cef4:	83 e1 00 4c 	lwz     r31,76(r1)
    cef8:	38 21 00 50 	addi    r1,r1,80
    cefc:	4e 80 00 20 	blr

0000cf00 <sctp_getsockopt_context>:
 * 7.1.29.  Set or Get the default context (SCTP_CONTEXT)
 * (chapter and verse is quoted at sctp_setsockopt_context())
 */
static int sctp_getsockopt_context(struct sock *sk, int len,
				   char __user *optval, int __user *optlen)
{
    cf00:	94 21 ff a0 	stwu    r1,-96(r1)
    cf04:	7c 08 02 a6 	mflr    r0
    cf08:	90 01 00 64 	stw     r0,100(r1)
    cf0c:	93 e1 00 5c 	stw     r31,92(r1)
    cf10:	90 61 00 48 	stw     r3,72(r1)
    cf14:	90 81 00 4c 	stw     r4,76(r1)
    cf18:	90 a1 00 50 	stw     r5,80(r1)
    cf1c:	90 c1 00 54 	stw     r6,84(r1)
	struct sctp_assoc_value params;
	struct sctp_sock *sp;
	struct sctp_association *asoc;

	if (len < sizeof(struct sctp_assoc_value))
    cf20:	80 01 00 4c 	lwz     r0,76(r1)
    cf24:	2b 80 00 07 	cmplwi  cr7,r0,7
    cf28:	41 9d 00 0c 	bgt-    cr7,cf34 <sctp_getsockopt_context+0x34>
		return -EINVAL;
    cf2c:	38 00 ff ea 	li      r0,-22
    cf30:	48 00 02 f8 	b       d228 <sctp_getsockopt_context+0x328>

	len = sizeof(struct sctp_assoc_value);
    cf34:	38 00 00 08 	li      r0,8
    cf38:	90 01 00 4c 	stw     r0,76(r1)

	if (copy_from_user(&params, optval, len))
    cf3c:	80 01 00 4c 	lwz     r0,76(r1)
    cf40:	39 21 00 3c 	addi    r9,r1,60
    cf44:	91 21 00 18 	stw     r9,24(r1)
    cf48:	81 21 00 50 	lwz     r9,80(r1)
    cf4c:	91 21 00 1c 	stw     r9,28(r1)
    cf50:	90 01 00 20 	stw     r0,32(r1)
static inline unsigned long copy_from_user(void *to,
		const void __user *from, unsigned long n)
{
	unsigned long over;

	if (access_ok(VERIFY_READ, from, n))
    cf54:	81 21 00 1c 	lwz     r9,28(r1)
    cf58:	7c 40 13 78 	mr      r0,r2
    cf5c:	7c 0a 03 78 	mr      r10,r0
    cf60:	80 0a 01 d4 	lwz     r0,468(r10)
    cf64:	7f 89 00 40 	cmplw   cr7,r9,r0
    cf68:	41 9d 00 3c 	bgt-    cr7,cfa4 <sctp_getsockopt_context+0xa4>
    cf6c:	80 01 00 20 	lwz     r0,32(r1)
    cf70:	2f 80 00 00 	cmpwi   cr7,r0,0
    cf74:	41 9e 00 28 	beq-    cr7,cf9c <sctp_getsockopt_context+0x9c>
    cf78:	80 01 00 20 	lwz     r0,32(r1)
    cf7c:	31 20 ff ff 	addic   r9,r0,-1
    cf80:	7c 40 13 78 	mr      r0,r2
    cf84:	7c 0a 03 78 	mr      r10,r0
    cf88:	81 6a 01 d4 	lwz     r11,468(r10)
    cf8c:	80 01 00 1c 	lwz     r0,28(r1)
    cf90:	7c 00 58 50 	subf    r0,r0,r11
    cf94:	7f 89 00 40 	cmplw   cr7,r9,r0
    cf98:	41 9d 00 0c 	bgt-    cr7,cfa4 <sctp_getsockopt_context+0xa4>
    cf9c:	38 00 00 01 	li      r0,1
    cfa0:	48 00 00 08 	b       cfa8 <sctp_getsockopt_context+0xa8>
    cfa4:	38 00 00 00 	li      r0,0
    cfa8:	2f 80 00 00 	cmpwi   cr7,r0,0
    cfac:	41 9e 00 1c 	beq-    cr7,cfc8 <sctp_getsockopt_context+0xc8>
		return __copy_tofrom_user((__force void __user *)to, from, n);
    cfb0:	80 61 00 18 	lwz     r3,24(r1)
    cfb4:	80 81 00 1c 	lwz     r4,28(r1)
    cfb8:	80 a1 00 20 	lwz     r5,32(r1)
    cfbc:	48 00 00 01 	bl      cfbc <sctp_getsockopt_context+0xbc>
    cfc0:	7c 60 1b 78 	mr      r0,r3
    cfc4:	48 00 00 60 	b       d024 <sctp_getsockopt_context+0x124>
	if ((unsigned long)from < TASK_SIZE) {
    cfc8:	81 21 00 1c 	lwz     r9,28(r1)
    cfcc:	3c 00 bf ff 	lis     r0,-16385
    cfd0:	60 00 ff ff 	ori     r0,r0,65535
    cfd4:	7f 89 00 40 	cmplw   cr7,r9,r0
    cfd8:	41 9d 00 48 	bgt-    cr7,d020 <sctp_getsockopt_context+0x120>
		over = (unsigned long)from + n - TASK_SIZE;
    cfdc:	81 21 00 1c 	lwz     r9,28(r1)
    cfe0:	80 01 00 20 	lwz     r0,32(r1)
    cfe4:	7c 09 02 14 	add     r0,r9,r0
    cfe8:	3d 60 40 00 	lis     r11,16384
    cfec:	7c 00 5a 14 	add     r0,r0,r11
    cff0:	90 01 00 24 	stw     r0,36(r1)
		return __copy_tofrom_user((__force void __user *)to, from,
    cff4:	81 21 00 20 	lwz     r9,32(r1)
    cff8:	80 01 00 24 	lwz     r0,36(r1)
    cffc:	7c 00 48 50 	subf    r0,r0,r9
    d000:	80 61 00 18 	lwz     r3,24(r1)
    d004:	80 81 00 1c 	lwz     r4,28(r1)
    d008:	7c 05 03 78 	mr      r5,r0
    d00c:	48 00 00 01 	bl      d00c <sctp_getsockopt_context+0x10c>
    d010:	7c 69 1b 78 	mr      r9,r3
    d014:	80 01 00 24 	lwz     r0,36(r1)
    d018:	7c 09 02 14 	add     r0,r9,r0
    d01c:	48 00 00 08 	b       d024 <sctp_getsockopt_context+0x124>
				n - over) + over;
	}
	return n;
    d020:	80 01 00 20 	lwz     r0,32(r1)
    d024:	2f 80 00 00 	cmpwi   cr7,r0,0
    d028:	41 9e 00 0c 	beq-    cr7,d034 <sctp_getsockopt_context+0x134>
		return -EFAULT;
    d02c:	38 00 ff f2 	li      r0,-14
    d030:	48 00 01 f8 	b       d228 <sctp_getsockopt_context+0x328>
    d034:	80 01 00 48 	lwz     r0,72(r1)
    d038:	90 01 00 28 	stw     r0,40(r1)
    d03c:	80 01 00 28 	lwz     r0,40(r1)

	sp = sctp_sk(sk);
    d040:	90 01 00 0c 	stw     r0,12(r1)

	if (params.assoc_id != 0) {
    d044:	80 01 00 3c 	lwz     r0,60(r1)
    d048:	2f 80 00 00 	cmpwi   cr7,r0,0
    d04c:	41 9e 00 40 	beq-    cr7,d08c <sctp_getsockopt_context+0x18c>
		asoc = sctp_id2assoc(sk, params.assoc_id);
    d050:	80 01 00 3c 	lwz     r0,60(r1)
    d054:	80 61 00 48 	lwz     r3,72(r1)
    d058:	7c 04 03 78 	mr      r4,r0
    d05c:	48 00 00 01 	bl      d05c <sctp_getsockopt_context+0x15c>
    d060:	90 61 00 10 	stw     r3,16(r1)
		if (!asoc)
    d064:	80 01 00 10 	lwz     r0,16(r1)
    d068:	2f 80 00 00 	cmpwi   cr7,r0,0
    d06c:	40 9e 00 0c 	bne-    cr7,d078 <sctp_getsockopt_context+0x178>
			return -EINVAL;
    d070:	38 00 ff ea 	li      r0,-22
    d074:	48 00 01 b4 	b       d228 <sctp_getsockopt_context+0x328>
		params.assoc_value = asoc->default_rcv_context;
    d078:	80 01 00 10 	lwz     r0,16(r1)
    d07c:	7c 09 03 78 	mr      r9,r0
    d080:	80 09 03 a4 	lwz     r0,932(r9)
    d084:	90 01 00 40 	stw     r0,64(r1)
    d088:	48 00 00 14 	b       d09c <sctp_getsockopt_context+0x19c>
	} else {
		params.assoc_value = sp->default_rcv_context;
    d08c:	80 01 00 0c 	lwz     r0,12(r1)
    d090:	7c 0a 03 78 	mr      r10,r0
    d094:	80 0a 01 f0 	lwz     r0,496(r10)
    d098:	90 01 00 40 	stw     r0,64(r1)
	}

	if (put_user(len, optlen))
    d09c:	38 00 ff f2 	li      r0,-14
    d0a0:	90 01 00 08 	stw     r0,8(r1)
    d0a4:	80 01 00 54 	lwz     r0,84(r1)
    d0a8:	90 01 00 14 	stw     r0,20(r1)
    d0ac:	81 21 00 14 	lwz     r9,20(r1)
    d0b0:	7c 40 13 78 	mr      r0,r2
    d0b4:	7c 0b 03 78 	mr      r11,r0
    d0b8:	80 0b 01 d4 	lwz     r0,468(r11)
    d0bc:	7f 89 00 40 	cmplw   cr7,r9,r0
    d0c0:	41 9d 00 28 	bgt-    cr7,d0e8 <sctp_getsockopt_context+0x1e8>
    d0c4:	7c 40 13 78 	mr      r0,r2
    d0c8:	7c 0a 03 78 	mr      r10,r0
    d0cc:	81 2a 01 d4 	lwz     r9,468(r10)
    d0d0:	80 01 00 14 	lwz     r0,20(r1)
    d0d4:	7c 00 48 50 	subf    r0,r0,r9
    d0d8:	2b 80 00 02 	cmplwi  cr7,r0,2
    d0dc:	40 9d 00 0c 	ble-    cr7,d0e8 <sctp_getsockopt_context+0x1e8>
    d0e0:	38 00 00 01 	li      r0,1
    d0e4:	48 00 00 08 	b       d0ec <sctp_getsockopt_context+0x1ec>
    d0e8:	38 00 00 00 	li      r0,0
    d0ec:	2f 80 00 00 	cmpwi   cr7,r0,0
    d0f0:	41 9e 00 28 	beq-    cr7,d118 <sctp_getsockopt_context+0x218>
    d0f4:	38 00 00 00 	li      r0,0
    d0f8:	90 01 00 08 	stw     r0,8(r1)
    d0fc:	80 01 00 4c 	lwz     r0,76(r1)
    d100:	81 21 00 14 	lwz     r9,20(r1)
    d104:	81 61 00 08 	lwz     r11,8(r1)
    d108:	7d 7f 5b 78 	mr      r31,r11
    d10c:	90 09 00 00 	stw     r0,0(r9)
    d110:	93 e1 00 08 	stw     r31,8(r1)
    d114:	60 00 00 00 	nop
    d118:	80 01 00 08 	lwz     r0,8(r1)
    d11c:	2f 80 00 00 	cmpwi   cr7,r0,0
    d120:	41 9e 00 0c 	beq-    cr7,d12c <sctp_getsockopt_context+0x22c>
		return -EFAULT;
    d124:	38 00 ff f2 	li      r0,-14
    d128:	48 00 01 00 	b       d228 <sctp_getsockopt_context+0x328>
	if (copy_to_user(optval, &params, len))
    d12c:	80 01 00 4c 	lwz     r0,76(r1)
    d130:	81 21 00 50 	lwz     r9,80(r1)
    d134:	91 21 00 2c 	stw     r9,44(r1)
    d138:	39 21 00 3c 	addi    r9,r1,60
    d13c:	91 21 00 30 	stw     r9,48(r1)
    d140:	90 01 00 34 	stw     r0,52(r1)
static inline unsigned long copy_to_user(void __user *to,
		const void *from, unsigned long n)
{
	unsigned long over;

	if (access_ok(VERIFY_WRITE, to, n))
    d144:	81 21 00 2c 	lwz     r9,44(r1)
    d148:	7c 40 13 78 	mr      r0,r2
    d14c:	7c 0b 03 78 	mr      r11,r0
    d150:	80 0b 01 d4 	lwz     r0,468(r11)
    d154:	7f 89 00 40 	cmplw   cr7,r9,r0
    d158:	41 9d 00 3c 	bgt-    cr7,d194 <sctp_getsockopt_context+0x294>
    d15c:	80 01 00 34 	lwz     r0,52(r1)
    d160:	2f 80 00 00 	cmpwi   cr7,r0,0
    d164:	41 9e 00 28 	beq-    cr7,d18c <sctp_getsockopt_context+0x28c>
    d168:	80 01 00 34 	lwz     r0,52(r1)
    d16c:	31 20 ff ff 	addic   r9,r0,-1
    d170:	7c 40 13 78 	mr      r0,r2
    d174:	7c 0a 03 78 	mr      r10,r0
    d178:	81 6a 01 d4 	lwz     r11,468(r10)
    d17c:	80 01 00 2c 	lwz     r0,44(r1)
    d180:	7c 00 58 50 	subf    r0,r0,r11
    d184:	7f 89 00 40 	cmplw   cr7,r9,r0
    d188:	41 9d 00 0c 	bgt-    cr7,d194 <sctp_getsockopt_context+0x294>
    d18c:	38 00 00 01 	li      r0,1
    d190:	48 00 00 08 	b       d198 <sctp_getsockopt_context+0x298>
    d194:	38 00 00 00 	li      r0,0
    d198:	2f 80 00 00 	cmpwi   cr7,r0,0
    d19c:	41 9e 00 1c 	beq-    cr7,d1b8 <sctp_getsockopt_context+0x2b8>
		return __copy_tofrom_user(to, (__force void __user *)from, n);
    d1a0:	80 61 00 2c 	lwz     r3,44(r1)
    d1a4:	80 81 00 30 	lwz     r4,48(r1)
    d1a8:	80 a1 00 34 	lwz     r5,52(r1)
    d1ac:	48 00 00 01 	bl      d1ac <sctp_getsockopt_context+0x2ac>
    d1b0:	7c 60 1b 78 	mr      r0,r3
    d1b4:	48 00 00 60 	b       d214 <sctp_getsockopt_context+0x314>
	if ((unsigned long)to < TASK_SIZE) {
    d1b8:	81 21 00 2c 	lwz     r9,44(r1)
    d1bc:	3c 00 bf ff 	lis     r0,-16385
    d1c0:	60 00 ff ff 	ori     r0,r0,65535
    d1c4:	7f 89 00 40 	cmplw   cr7,r9,r0
    d1c8:	41 9d 00 48 	bgt-    cr7,d210 <sctp_getsockopt_context+0x310>
		over = (unsigned long)to + n - TASK_SIZE;
    d1cc:	81 21 00 2c 	lwz     r9,44(r1)
    d1d0:	80 01 00 34 	lwz     r0,52(r1)
    d1d4:	7c 09 02 14 	add     r0,r9,r0
    d1d8:	3d 60 40 00 	lis     r11,16384
    d1dc:	7c 00 5a 14 	add     r0,r0,r11
    d1e0:	90 01 00 38 	stw     r0,56(r1)
		return __copy_tofrom_user(to, (__force void __user *)from,
    d1e4:	81 21 00 34 	lwz     r9,52(r1)
    d1e8:	80 01 00 38 	lwz     r0,56(r1)
    d1ec:	7c 00 48 50 	subf    r0,r0,r9
    d1f0:	80 61 00 2c 	lwz     r3,44(r1)
    d1f4:	80 81 00 30 	lwz     r4,48(r1)
    d1f8:	7c 05 03 78 	mr      r5,r0
    d1fc:	48 00 00 01 	bl      d1fc <sctp_getsockopt_context+0x2fc>
    d200:	7c 69 1b 78 	mr      r9,r3
    d204:	80 01 00 38 	lwz     r0,56(r1)
    d208:	7c 09 02 14 	add     r0,r9,r0
    d20c:	48 00 00 08 	b       d214 <sctp_getsockopt_context+0x314>
				n - over) + over;
	}
	return n;
    d210:	80 01 00 34 	lwz     r0,52(r1)
    d214:	2f 80 00 00 	cmpwi   cr7,r0,0
    d218:	41 9e 00 0c 	beq-    cr7,d224 <sctp_getsockopt_context+0x324>
		return -EFAULT;
    d21c:	38 00 ff f2 	li      r0,-14
    d220:	48 00 00 08 	b       d228 <sctp_getsockopt_context+0x328>

	return 0;
    d224:	38 00 00 00 	li      r0,0
}
    d228:	7c 03 03 78 	mr      r3,r0
    d22c:	80 01 00 64 	lwz     r0,100(r1)
    d230:	7c 08 03 a6 	mtlr    r0
    d234:	83 e1 00 5c 	lwz     r31,92(r1)
    d238:	38 21 00 60 	addi    r1,r1,96
    d23c:	4e 80 00 20 	blr

0000d240 <sctp_getsockopt_maxseg>:
 *    changed (effecting future associations only).
 * assoc_value:  This parameter specifies the maximum size in bytes.
 */
static int sctp_getsockopt_maxseg(struct sock *sk, int len,
				  char __user *optval, int __user *optlen)
{
    d240:	94 21 ff 80 	stwu    r1,-128(r1)
    d244:	7c 08 02 a6 	mflr    r0
    d248:	90 01 00 84 	stw     r0,132(r1)
    d24c:	93 e1 00 7c 	stw     r31,124(r1)
    d250:	90 61 00 68 	stw     r3,104(r1)
    d254:	90 81 00 6c 	stw     r4,108(r1)
    d258:	90 a1 00 70 	stw     r5,112(r1)
    d25c:	90 c1 00 74 	stw     r6,116(r1)
	struct sctp_assoc_value params;
	struct sctp_association *asoc;

	if (len == sizeof(int)) {
    d260:	80 01 00 6c 	lwz     r0,108(r1)
    d264:	2f 80 00 04 	cmpwi   cr7,r0,4
    d268:	40 9e 00 28 	bne-    cr7,d290 <sctp_getsockopt_maxseg+0x50>
		pr_warn("Use of int in maxseg socket option deprecated\n");
    d26c:	3c 00 00 00 	lis     r0,0
    d270:	30 60 00 ac 	addic   r3,r0,172
    d274:	48 00 00 01 	bl      d274 <sctp_getsockopt_maxseg+0x34>
		pr_warn("Use struct sctp_assoc_value instead\n");
    d278:	3c 00 00 00 	lis     r0,0
    d27c:	30 60 00 e4 	addic   r3,r0,228
    d280:	48 00 00 01 	bl      d280 <sctp_getsockopt_maxseg+0x40>
		params.assoc_id = 0;
    d284:	38 00 00 00 	li      r0,0
    d288:	90 01 00 54 	stw     r0,84(r1)
    d28c:	48 00 01 18 	b       d3a4 <sctp_getsockopt_maxseg+0x164>
	} else if (len >= sizeof(struct sctp_assoc_value)) {
    d290:	80 01 00 6c 	lwz     r0,108(r1)
    d294:	2b 80 00 07 	cmplwi  cr7,r0,7
    d298:	40 9d 01 04 	ble-    cr7,d39c <sctp_getsockopt_maxseg+0x15c>
		len = sizeof(struct sctp_assoc_value);
    d29c:	38 00 00 08 	li      r0,8
    d2a0:	90 01 00 6c 	stw     r0,108(r1)
		if (copy_from_user(&params, optval, sizeof(params)))
    d2a4:	38 01 00 54 	addi    r0,r1,84
	if (len == sizeof(int)) {
		pr_warn("Use of int in maxseg socket option deprecated\n");
		pr_warn("Use struct sctp_assoc_value instead\n");
		params.assoc_id = 0;
	} else if (len >= sizeof(struct sctp_assoc_value)) {
		len = sizeof(struct sctp_assoc_value);
    d2a8:	90 01 00 14 	stw     r0,20(r1)
    d2ac:	80 01 00 70 	lwz     r0,112(r1)
    d2b0:	90 01 00 18 	stw     r0,24(r1)
    d2b4:	38 00 00 08 	li      r0,8
    d2b8:	90 01 00 1c 	stw     r0,28(r1)
static inline unsigned long copy_from_user(void *to,
		const void __user *from, unsigned long n)
{
	unsigned long over;

	if (access_ok(VERIFY_READ, from, n))
    d2bc:	81 21 00 18 	lwz     r9,24(r1)
    d2c0:	7c 40 13 78 	mr      r0,r2
    d2c4:	7c 0a 03 78 	mr      r10,r0
    d2c8:	80 0a 01 d4 	lwz     r0,468(r10)
    d2cc:	7f 89 00 40 	cmplw   cr7,r9,r0
    d2d0:	41 9d 00 3c 	bgt-    cr7,d30c <sctp_getsockopt_maxseg+0xcc>
    d2d4:	80 01 00 1c 	lwz     r0,28(r1)
    d2d8:	2f 80 00 00 	cmpwi   cr7,r0,0
    d2dc:	41 9e 00 28 	beq-    cr7,d304 <sctp_getsockopt_maxseg+0xc4>
    d2e0:	80 01 00 1c 	lwz     r0,28(r1)
    d2e4:	31 20 ff ff 	addic   r9,r0,-1
    d2e8:	7c 40 13 78 	mr      r0,r2
    d2ec:	7c 0a 03 78 	mr      r10,r0
    d2f0:	81 6a 01 d4 	lwz     r11,468(r10)
    d2f4:	80 01 00 18 	lwz     r0,24(r1)
    d2f8:	7c 00 58 50 	subf    r0,r0,r11
    d2fc:	7f 89 00 40 	cmplw   cr7,r9,r0
    d300:	41 9d 00 0c 	bgt-    cr7,d30c <sctp_getsockopt_maxseg+0xcc>
    d304:	38 00 00 01 	li      r0,1
    d308:	48 00 00 08 	b       d310 <sctp_getsockopt_maxseg+0xd0>
    d30c:	38 00 00 00 	li      r0,0
    d310:	2f 80 00 00 	cmpwi   cr7,r0,0
    d314:	41 9e 00 1c 	beq-    cr7,d330 <sctp_getsockopt_maxseg+0xf0>
		return __copy_tofrom_user((__force void __user *)to, from, n);
    d318:	80 61 00 14 	lwz     r3,20(r1)
    d31c:	80 81 00 18 	lwz     r4,24(r1)
    d320:	80 a1 00 1c 	lwz     r5,28(r1)
    d324:	48 00 00 01 	bl      d324 <sctp_getsockopt_maxseg+0xe4>
    d328:	7c 60 1b 78 	mr      r0,r3
    d32c:	48 00 00 60 	b       d38c <sctp_getsockopt_maxseg+0x14c>
	if ((unsigned long)from < TASK_SIZE) {
    d330:	81 21 00 18 	lwz     r9,24(r1)
    d334:	3c 00 bf ff 	lis     r0,-16385
    d338:	60 00 ff ff 	ori     r0,r0,65535
    d33c:	7f 89 00 40 	cmplw   cr7,r9,r0
    d340:	41 9d 00 48 	bgt-    cr7,d388 <sctp_getsockopt_maxseg+0x148>
		over = (unsigned long)from + n - TASK_SIZE;
    d344:	81 21 00 18 	lwz     r9,24(r1)
    d348:	80 01 00 1c 	lwz     r0,28(r1)
    d34c:	7c 09 02 14 	add     r0,r9,r0
    d350:	3d 60 40 00 	lis     r11,16384
    d354:	7c 00 5a 14 	add     r0,r0,r11
    d358:	90 01 00 20 	stw     r0,32(r1)
		return __copy_tofrom_user((__force void __user *)to, from,
    d35c:	81 21 00 1c 	lwz     r9,28(r1)
    d360:	80 01 00 20 	lwz     r0,32(r1)
    d364:	7c 00 48 50 	subf    r0,r0,r9
    d368:	80 61 00 14 	lwz     r3,20(r1)
    d36c:	80 81 00 18 	lwz     r4,24(r1)
    d370:	7c 05 03 78 	mr      r5,r0
    d374:	48 00 00 01 	bl      d374 <sctp_getsockopt_maxseg+0x134>
    d378:	7c 69 1b 78 	mr      r9,r3
    d37c:	80 01 00 20 	lwz     r0,32(r1)
    d380:	7c 09 02 14 	add     r0,r9,r0
    d384:	48 00 00 08 	b       d38c <sctp_getsockopt_maxseg+0x14c>
				n - over) + over;
	}
	return n;
    d388:	80 01 00 1c 	lwz     r0,28(r1)
		if (copy_from_user(&params, optval, sizeof(params)))
    d38c:	2f 80 00 00 	cmpwi   cr7,r0,0
    d390:	41 9e 00 14 	beq-    cr7,d3a4 <sctp_getsockopt_maxseg+0x164>
			return -EFAULT;
    d394:	38 00 ff f2 	li      r0,-14
    d398:	48 00 03 48 	b       d6e0 <sctp_getsockopt_maxseg+0x4a0>
	} else
		return -EINVAL;
    d39c:	38 00 ff ea 	li      r0,-22
    d3a0:	48 00 03 40 	b       d6e0 <sctp_getsockopt_maxseg+0x4a0>

	asoc = sctp_id2assoc(sk, params.assoc_id);
    d3a4:	80 01 00 54 	lwz     r0,84(r1)
    d3a8:	80 61 00 68 	lwz     r3,104(r1)
    d3ac:	7c 04 03 78 	mr      r4,r0
    d3b0:	48 00 00 01 	bl      d3b0 <sctp_getsockopt_maxseg+0x170>
    d3b4:	90 61 00 0c 	stw     r3,12(r1)
	if (!asoc && params.assoc_id && sctp_style(sk, UDP))
    d3b8:	80 01 00 0c 	lwz     r0,12(r1)
    d3bc:	2f 80 00 00 	cmpwi   cr7,r0,0
    d3c0:	40 9e 00 54 	bne-    cr7,d414 <sctp_getsockopt_maxseg+0x1d4>
    d3c4:	80 01 00 54 	lwz     r0,84(r1)
    d3c8:	2f 80 00 00 	cmpwi   cr7,r0,0
    d3cc:	41 9e 00 48 	beq-    cr7,d414 <sctp_getsockopt_maxseg+0x1d4>
    d3d0:	80 01 00 68 	lwz     r0,104(r1)
    d3d4:	90 01 00 24 	stw     r0,36(r1)
    d3d8:	38 00 00 00 	li      r0,0
    d3dc:	90 01 00 28 	stw     r0,40(r1)
    d3e0:	80 01 00 24 	lwz     r0,36(r1)
    d3e4:	90 01 00 2c 	stw     r0,44(r1)
    d3e8:	80 01 00 2c 	lwz     r0,44(r1)
    d3ec:	7c 09 03 78 	mr      r9,r0
    d3f0:	80 09 01 c8 	lwz     r0,456(r9)
    d3f4:	81 21 00 28 	lwz     r9,40(r1)
    d3f8:	7f 89 00 00 	cmpw    cr7,r9,r0
    d3fc:	7c 00 00 26 	mfcr    r0
    d400:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
    d404:	2f 80 00 00 	cmpwi   cr7,r0,0
    d408:	41 9e 00 0c 	beq-    cr7,d414 <sctp_getsockopt_maxseg+0x1d4>
		return -EINVAL;
    d40c:	38 00 ff ea 	li      r0,-22
    d410:	48 00 02 d0 	b       d6e0 <sctp_getsockopt_maxseg+0x4a0>

	if (asoc)
    d414:	80 01 00 0c 	lwz     r0,12(r1)
    d418:	2f 80 00 00 	cmpwi   cr7,r0,0
    d41c:	41 9e 00 18 	beq-    cr7,d434 <sctp_getsockopt_maxseg+0x1f4>
		params.assoc_value = asoc->frag_point;
    d420:	80 01 00 0c 	lwz     r0,12(r1)
    d424:	7c 0a 03 78 	mr      r10,r0
    d428:	80 0a 03 84 	lwz     r0,900(r10)
    d42c:	90 01 00 58 	stw     r0,88(r1)
    d430:	48 00 00 1c 	b       d44c <sctp_getsockopt_maxseg+0x20c>
    d434:	80 01 00 68 	lwz     r0,104(r1)
    d438:	90 01 00 30 	stw     r0,48(r1)
    d43c:	80 01 00 30 	lwz     r0,48(r1)
	else
		params.assoc_value = sctp_sk(sk)->user_frag;
    d440:	7c 0b 03 78 	mr      r11,r0
    d444:	80 0b 02 e0 	lwz     r0,736(r11)
    d448:	90 01 00 58 	stw     r0,88(r1)

	if (put_user(len, optlen))
    d44c:	38 00 ff f2 	li      r0,-14
    d450:	90 01 00 08 	stw     r0,8(r1)
    d454:	80 01 00 74 	lwz     r0,116(r1)
    d458:	90 01 00 10 	stw     r0,16(r1)
    d45c:	81 21 00 10 	lwz     r9,16(r1)
    d460:	7c 40 13 78 	mr      r0,r2
    d464:	7c 0a 03 78 	mr      r10,r0
    d468:	80 0a 01 d4 	lwz     r0,468(r10)
    d46c:	7f 89 00 40 	cmplw   cr7,r9,r0
    d470:	41 9d 00 28 	bgt-    cr7,d498 <sctp_getsockopt_maxseg+0x258>
    d474:	7c 40 13 78 	mr      r0,r2
    d478:	7c 0b 03 78 	mr      r11,r0
    d47c:	81 2b 01 d4 	lwz     r9,468(r11)
    d480:	80 01 00 10 	lwz     r0,16(r1)
    d484:	7c 00 48 50 	subf    r0,r0,r9
    d488:	2b 80 00 02 	cmplwi  cr7,r0,2
    d48c:	40 9d 00 0c 	ble-    cr7,d498 <sctp_getsockopt_maxseg+0x258>
    d490:	38 00 00 01 	li      r0,1
    d494:	48 00 00 08 	b       d49c <sctp_getsockopt_maxseg+0x25c>
    d498:	38 00 00 00 	li      r0,0
    d49c:	2f 80 00 00 	cmpwi   cr7,r0,0
    d4a0:	41 9e 00 28 	beq-    cr7,d4c8 <sctp_getsockopt_maxseg+0x288>
    d4a4:	38 00 00 00 	li      r0,0
    d4a8:	90 01 00 08 	stw     r0,8(r1)
    d4ac:	80 01 00 6c 	lwz     r0,108(r1)
    d4b0:	81 21 00 10 	lwz     r9,16(r1)
    d4b4:	81 61 00 08 	lwz     r11,8(r1)
    d4b8:	7d 7f 5b 78 	mr      r31,r11
    d4bc:	90 09 00 00 	stw     r0,0(r9)
    d4c0:	93 e1 00 08 	stw     r31,8(r1)
    d4c4:	60 00 00 00 	nop
    d4c8:	80 01 00 08 	lwz     r0,8(r1)
    d4cc:	2f 80 00 00 	cmpwi   cr7,r0,0
    d4d0:	41 9e 00 0c 	beq-    cr7,d4dc <sctp_getsockopt_maxseg+0x29c>
		return -EFAULT;
    d4d4:	38 00 ff f2 	li      r0,-14
    d4d8:	48 00 02 08 	b       d6e0 <sctp_getsockopt_maxseg+0x4a0>
	if (len == sizeof(int)) {
    d4dc:	80 01 00 6c 	lwz     r0,108(r1)
    d4e0:	2f 80 00 04 	cmpwi   cr7,r0,4
    d4e4:	40 9e 01 00 	bne-    cr7,d5e4 <sctp_getsockopt_maxseg+0x3a4>
		if (copy_to_user(optval, &params.assoc_value, len))
    d4e8:	80 01 00 6c 	lwz     r0,108(r1)
    d4ec:	81 21 00 70 	lwz     r9,112(r1)
    d4f0:	91 21 00 34 	stw     r9,52(r1)
    d4f4:	39 21 00 54 	addi    r9,r1,84
    d4f8:	39 29 00 04 	addi    r9,r9,4
    d4fc:	91 21 00 38 	stw     r9,56(r1)
    d500:	90 01 00 3c 	stw     r0,60(r1)
static inline unsigned long copy_to_user(void __user *to,
		const void *from, unsigned long n)
{
	unsigned long over;

	if (access_ok(VERIFY_WRITE, to, n))
    d504:	81 21 00 34 	lwz     r9,52(r1)
    d508:	7c 40 13 78 	mr      r0,r2
    d50c:	7c 0a 03 78 	mr      r10,r0
    d510:	80 0a 01 d4 	lwz     r0,468(r10)
    d514:	7f 89 00 40 	cmplw   cr7,r9,r0
    d518:	41 9d 00 3c 	bgt-    cr7,d554 <sctp_getsockopt_maxseg+0x314>
    d51c:	80 01 00 3c 	lwz     r0,60(r1)
    d520:	2f 80 00 00 	cmpwi   cr7,r0,0
    d524:	41 9e 00 28 	beq-    cr7,d54c <sctp_getsockopt_maxseg+0x30c>
    d528:	80 01 00 3c 	lwz     r0,60(r1)
    d52c:	31 20 ff ff 	addic   r9,r0,-1
    d530:	7c 40 13 78 	mr      r0,r2
    d534:	7c 0a 03 78 	mr      r10,r0
    d538:	81 6a 01 d4 	lwz     r11,468(r10)
    d53c:	80 01 00 34 	lwz     r0,52(r1)
    d540:	7c 00 58 50 	subf    r0,r0,r11
    d544:	7f 89 00 40 	cmplw   cr7,r9,r0
    d548:	41 9d 00 0c 	bgt-    cr7,d554 <sctp_getsockopt_maxseg+0x314>
    d54c:	38 00 00 01 	li      r0,1
    d550:	48 00 00 08 	b       d558 <sctp_getsockopt_maxseg+0x318>
    d554:	38 00 00 00 	li      r0,0
    d558:	2f 80 00 00 	cmpwi   cr7,r0,0
    d55c:	41 9e 00 1c 	beq-    cr7,d578 <sctp_getsockopt_maxseg+0x338>
		return __copy_tofrom_user(to, (__force void __user *)from, n);
    d560:	80 61 00 34 	lwz     r3,52(r1)
    d564:	80 81 00 38 	lwz     r4,56(r1)
    d568:	80 a1 00 3c 	lwz     r5,60(r1)
    d56c:	48 00 00 01 	bl      d56c <sctp_getsockopt_maxseg+0x32c>
    d570:	7c 60 1b 78 	mr      r0,r3
    d574:	48 00 00 60 	b       d5d4 <sctp_getsockopt_maxseg+0x394>
	if ((unsigned long)to < TASK_SIZE) {
    d578:	81 21 00 34 	lwz     r9,52(r1)
    d57c:	3c 00 bf ff 	lis     r0,-16385
    d580:	60 00 ff ff 	ori     r0,r0,65535
    d584:	7f 89 00 40 	cmplw   cr7,r9,r0
    d588:	41 9d 00 48 	bgt-    cr7,d5d0 <sctp_getsockopt_maxseg+0x390>
		over = (unsigned long)to + n - TASK_SIZE;
    d58c:	81 21 00 34 	lwz     r9,52(r1)
    d590:	80 01 00 3c 	lwz     r0,60(r1)
    d594:	7c 09 02 14 	add     r0,r9,r0
    d598:	3d 60 40 00 	lis     r11,16384
    d59c:	7c 00 5a 14 	add     r0,r0,r11
    d5a0:	90 01 00 40 	stw     r0,64(r1)
		return __copy_tofrom_user(to, (__force void __user *)from,
    d5a4:	81 21 00 3c 	lwz     r9,60(r1)
    d5a8:	80 01 00 40 	lwz     r0,64(r1)
    d5ac:	7c 00 48 50 	subf    r0,r0,r9
    d5b0:	80 61 00 34 	lwz     r3,52(r1)
    d5b4:	80 81 00 38 	lwz     r4,56(r1)
    d5b8:	7c 05 03 78 	mr      r5,r0
    d5bc:	48 00 00 01 	bl      d5bc <sctp_getsockopt_maxseg+0x37c>
    d5c0:	7c 69 1b 78 	mr      r9,r3
    d5c4:	80 01 00 40 	lwz     r0,64(r1)
    d5c8:	7c 09 02 14 	add     r0,r9,r0
    d5cc:	48 00 00 08 	b       d5d4 <sctp_getsockopt_maxseg+0x394>
				n - over) + over;
	}
	return n;
    d5d0:	80 01 00 3c 	lwz     r0,60(r1)
    d5d4:	2f 80 00 00 	cmpwi   cr7,r0,0
    d5d8:	41 9e 01 04 	beq-    cr7,d6dc <sctp_getsockopt_maxseg+0x49c>
			return -EFAULT;
    d5dc:	38 00 ff f2 	li      r0,-14
    d5e0:	48 00 01 00 	b       d6e0 <sctp_getsockopt_maxseg+0x4a0>
	} else {
		if (copy_to_user(optval, &params, len))
    d5e4:	80 01 00 6c 	lwz     r0,108(r1)
    d5e8:	81 21 00 70 	lwz     r9,112(r1)
    d5ec:	91 21 00 44 	stw     r9,68(r1)
    d5f0:	39 21 00 54 	addi    r9,r1,84
    d5f4:	91 21 00 48 	stw     r9,72(r1)
    d5f8:	90 01 00 4c 	stw     r0,76(r1)
static inline unsigned long copy_to_user(void __user *to,
		const void *from, unsigned long n)
{
	unsigned long over;

	if (access_ok(VERIFY_WRITE, to, n))
    d5fc:	81 21 00 44 	lwz     r9,68(r1)
    d600:	7c 40 13 78 	mr      r0,r2
    d604:	7c 0a 03 78 	mr      r10,r0
    d608:	80 0a 01 d4 	lwz     r0,468(r10)
    d60c:	7f 89 00 40 	cmplw   cr7,r9,r0
    d610:	41 9d 00 3c 	bgt-    cr7,d64c <sctp_getsockopt_maxseg+0x40c>
    d614:	80 01 00 4c 	lwz     r0,76(r1)
    d618:	2f 80 00 00 	cmpwi   cr7,r0,0
    d61c:	41 9e 00 28 	beq-    cr7,d644 <sctp_getsockopt_maxseg+0x404>
    d620:	80 01 00 4c 	lwz     r0,76(r1)
    d624:	31 20 ff ff 	addic   r9,r0,-1
    d628:	7c 40 13 78 	mr      r0,r2
    d62c:	7c 0a 03 78 	mr      r10,r0
    d630:	81 6a 01 d4 	lwz     r11,468(r10)
    d634:	80 01 00 44 	lwz     r0,68(r1)
    d638:	7c 00 58 50 	subf    r0,r0,r11
    d63c:	7f 89 00 40 	cmplw   cr7,r9,r0
    d640:	41 9d 00 0c 	bgt-    cr7,d64c <sctp_getsockopt_maxseg+0x40c>
    d644:	38 00 00 01 	li      r0,1
    d648:	48 00 00 08 	b       d650 <sctp_getsockopt_maxseg+0x410>
    d64c:	38 00 00 00 	li      r0,0
    d650:	2f 80 00 00 	cmpwi   cr7,r0,0
    d654:	41 9e 00 1c 	beq-    cr7,d670 <sctp_getsockopt_maxseg+0x430>
		return __copy_tofrom_user(to, (__force void __user *)from, n);
    d658:	80 61 00 44 	lwz     r3,68(r1)
    d65c:	80 81 00 48 	lwz     r4,72(r1)
    d660:	80 a1 00 4c 	lwz     r5,76(r1)
    d664:	48 00 00 01 	bl      d664 <sctp_getsockopt_maxseg+0x424>
    d668:	7c 60 1b 78 	mr      r0,r3
    d66c:	48 00 00 60 	b       d6cc <sctp_getsockopt_maxseg+0x48c>
	if ((unsigned long)to < TASK_SIZE) {
    d670:	81 21 00 44 	lwz     r9,68(r1)
    d674:	3c 00 bf ff 	lis     r0,-16385
    d678:	60 00 ff ff 	ori     r0,r0,65535
    d67c:	7f 89 00 40 	cmplw   cr7,r9,r0
    d680:	41 9d 00 48 	bgt-    cr7,d6c8 <sctp_getsockopt_maxseg+0x488>
		over = (unsigned long)to + n - TASK_SIZE;
    d684:	81 21 00 44 	lwz     r9,68(r1)
    d688:	80 01 00 4c 	lwz     r0,76(r1)
    d68c:	7c 09 02 14 	add     r0,r9,r0
    d690:	3d 60 40 00 	lis     r11,16384
    d694:	7c 00 5a 14 	add     r0,r0,r11
    d698:	90 01 00 50 	stw     r0,80(r1)
		return __copy_tofrom_user(to, (__force void __user *)from,
    d69c:	81 21 00 4c 	lwz     r9,76(r1)
    d6a0:	80 01 00 50 	lwz     r0,80(r1)
    d6a4:	7c 00 48 50 	subf    r0,r0,r9
    d6a8:	80 61 00 44 	lwz     r3,68(r1)
    d6ac:	80 81 00 48 	lwz     r4,72(r1)
    d6b0:	7c 05 03 78 	mr      r5,r0
    d6b4:	48 00 00 01 	bl      d6b4 <sctp_getsockopt_maxseg+0x474>
    d6b8:	7c 69 1b 78 	mr      r9,r3
    d6bc:	80 01 00 50 	lwz     r0,80(r1)
    d6c0:	7c 09 02 14 	add     r0,r9,r0
    d6c4:	48 00 00 08 	b       d6cc <sctp_getsockopt_maxseg+0x48c>
				n - over) + over;
	}
	return n;
    d6c8:	80 01 00 4c 	lwz     r0,76(r1)
    d6cc:	2f 80 00 00 	cmpwi   cr7,r0,0
    d6d0:	41 9e 00 0c 	beq-    cr7,d6dc <sctp_getsockopt_maxseg+0x49c>
			return -EFAULT;
    d6d4:	38 00 ff f2 	li      r0,-14
    d6d8:	48 00 00 08 	b       d6e0 <sctp_getsockopt_maxseg+0x4a0>
	}

	return 0;
    d6dc:	38 00 00 00 	li      r0,0
}
    d6e0:	7c 03 03 78 	mr      r3,r0
    d6e4:	80 01 00 84 	lwz     r0,132(r1)
    d6e8:	7c 08 03 a6 	mtlr    r0
    d6ec:	83 e1 00 7c 	lwz     r31,124(r1)
    d6f0:	38 21 00 80 	addi    r1,r1,128
    d6f4:	4e 80 00 20 	blr

0000d6f8 <sctp_getsockopt_fragment_interleave>:
 * 7.1.24.  Get or set fragmented interleave (SCTP_FRAGMENT_INTERLEAVE)
 * (chapter and verse is quoted at sctp_setsockopt_fragment_interleave())
 */
static int sctp_getsockopt_fragment_interleave(struct sock *sk, int len,
					       char __user *optval, int __user *optlen)
{
    d6f8:	94 21 ff c0 	stwu    r1,-64(r1)
    d6fc:	7c 08 02 a6 	mflr    r0
    d700:	90 01 00 44 	stw     r0,68(r1)
    d704:	93 e1 00 3c 	stw     r31,60(r1)
    d708:	90 61 00 28 	stw     r3,40(r1)
    d70c:	90 81 00 2c 	stw     r4,44(r1)
    d710:	90 a1 00 30 	stw     r5,48(r1)
    d714:	90 c1 00 34 	stw     r6,52(r1)
	int val;

	if (len < sizeof(int))
    d718:	80 01 00 2c 	lwz     r0,44(r1)
    d71c:	2b 80 00 03 	cmplwi  cr7,r0,3
    d720:	41 9d 00 0c 	bgt-    cr7,d72c <sctp_getsockopt_fragment_interleave+0x34>
		return -EINVAL;
    d724:	38 00 ff ea 	li      r0,-22
    d728:	48 00 01 b4 	b       d8dc <sctp_getsockopt_fragment_interleave+0x1e4>

	len = sizeof(int);
    d72c:	38 00 00 04 	li      r0,4
    d730:	90 01 00 2c 	stw     r0,44(r1)
    d734:	80 01 00 28 	lwz     r0,40(r1)
    d738:	90 01 00 10 	stw     r0,16(r1)
    d73c:	80 01 00 10 	lwz     r0,16(r1)

	val = sctp_sk(sk)->frag_interleave;
    d740:	7c 09 03 78 	mr      r9,r0
    d744:	88 09 02 eb 	lbz     r0,747(r9)
    d748:	54 00 06 3e 	clrlwi  r0,r0,24
    d74c:	90 01 00 24 	stw     r0,36(r1)
	if (put_user(len, optlen))
    d750:	38 00 ff f2 	li      r0,-14
    d754:	90 01 00 08 	stw     r0,8(r1)
    d758:	80 01 00 34 	lwz     r0,52(r1)
    d75c:	90 01 00 0c 	stw     r0,12(r1)
    d760:	81 21 00 0c 	lwz     r9,12(r1)
    d764:	7c 40 13 78 	mr      r0,r2
    d768:	7c 0a 03 78 	mr      r10,r0
    d76c:	80 0a 01 d4 	lwz     r0,468(r10)
    d770:	7f 89 00 40 	cmplw   cr7,r9,r0
    d774:	41 9d 00 28 	bgt-    cr7,d79c <sctp_getsockopt_fragment_interleave+0xa4>
    d778:	7c 40 13 78 	mr      r0,r2
    d77c:	7c 0b 03 78 	mr      r11,r0
    d780:	81 2b 01 d4 	lwz     r9,468(r11)
    d784:	80 01 00 0c 	lwz     r0,12(r1)
    d788:	7c 00 48 50 	subf    r0,r0,r9
    d78c:	2b 80 00 02 	cmplwi  cr7,r0,2
    d790:	40 9d 00 0c 	ble-    cr7,d79c <sctp_getsockopt_fragment_interleave+0xa4>
    d794:	38 00 00 01 	li      r0,1
    d798:	48 00 00 08 	b       d7a0 <sctp_getsockopt_fragment_interleave+0xa8>
    d79c:	38 00 00 00 	li      r0,0
    d7a0:	2f 80 00 00 	cmpwi   cr7,r0,0
    d7a4:	41 9e 00 28 	beq-    cr7,d7cc <sctp_getsockopt_fragment_interleave+0xd4>
    d7a8:	38 00 00 00 	li      r0,0
    d7ac:	90 01 00 08 	stw     r0,8(r1)
    d7b0:	80 01 00 2c 	lwz     r0,44(r1)
    d7b4:	81 21 00 0c 	lwz     r9,12(r1)
    d7b8:	81 61 00 08 	lwz     r11,8(r1)
    d7bc:	7d 7f 5b 78 	mr      r31,r11
    d7c0:	90 09 00 00 	stw     r0,0(r9)
    d7c4:	93 e1 00 08 	stw     r31,8(r1)
    d7c8:	60 00 00 00 	nop
    d7cc:	80 01 00 08 	lwz     r0,8(r1)
    d7d0:	2f 80 00 00 	cmpwi   cr7,r0,0
    d7d4:	41 9e 00 0c 	beq-    cr7,d7e0 <sctp_getsockopt_fragment_interleave+0xe8>
		return -EFAULT;
    d7d8:	38 00 ff f2 	li      r0,-14
    d7dc:	48 00 01 00 	b       d8dc <sctp_getsockopt_fragment_interleave+0x1e4>
	if (copy_to_user(optval, &val, len))
    d7e0:	80 01 00 2c 	lwz     r0,44(r1)
    d7e4:	81 21 00 30 	lwz     r9,48(r1)
    d7e8:	91 21 00 14 	stw     r9,20(r1)
    d7ec:	39 21 00 24 	addi    r9,r1,36
    d7f0:	91 21 00 18 	stw     r9,24(r1)
    d7f4:	90 01 00 1c 	stw     r0,28(r1)
static inline unsigned long copy_to_user(void __user *to,
		const void *from, unsigned long n)
{
	unsigned long over;

	if (access_ok(VERIFY_WRITE, to, n))
    d7f8:	81 21 00 14 	lwz     r9,20(r1)
    d7fc:	7c 40 13 78 	mr      r0,r2
    d800:	7c 0a 03 78 	mr      r10,r0
    d804:	80 0a 01 d4 	lwz     r0,468(r10)
    d808:	7f 89 00 40 	cmplw   cr7,r9,r0
    d80c:	41 9d 00 3c 	bgt-    cr7,d848 <sctp_getsockopt_fragment_interleave+0x150>
    d810:	80 01 00 1c 	lwz     r0,28(r1)
    d814:	2f 80 00 00 	cmpwi   cr7,r0,0
    d818:	41 9e 00 28 	beq-    cr7,d840 <sctp_getsockopt_fragment_interleave+0x148>
    d81c:	80 01 00 1c 	lwz     r0,28(r1)
    d820:	31 20 ff ff 	addic   r9,r0,-1
    d824:	7c 40 13 78 	mr      r0,r2
    d828:	7c 0a 03 78 	mr      r10,r0
    d82c:	81 6a 01 d4 	lwz     r11,468(r10)
    d830:	80 01 00 14 	lwz     r0,20(r1)
    d834:	7c 00 58 50 	subf    r0,r0,r11
    d838:	7f 89 00 40 	cmplw   cr7,r9,r0
    d83c:	41 9d 00 0c 	bgt-    cr7,d848 <sctp_getsockopt_fragment_interleave+0x150>
    d840:	38 00 00 01 	li      r0,1
    d844:	48 00 00 08 	b       d84c <sctp_getsockopt_fragment_interleave+0x154>
    d848:	38 00 00 00 	li      r0,0
    d84c:	2f 80 00 00 	cmpwi   cr7,r0,0
    d850:	41 9e 00 1c 	beq-    cr7,d86c <sctp_getsockopt_fragment_interleave+0x174>
		return __copy_tofrom_user(to, (__force void __user *)from, n);
    d854:	80 61 00 14 	lwz     r3,20(r1)
    d858:	80 81 00 18 	lwz     r4,24(r1)
    d85c:	80 a1 00 1c 	lwz     r5,28(r1)
    d860:	48 00 00 01 	bl      d860 <sctp_getsockopt_fragment_interleave+0x168>
    d864:	7c 60 1b 78 	mr      r0,r3
    d868:	48 00 00 60 	b       d8c8 <sctp_getsockopt_fragment_interleave+0x1d0>
	if ((unsigned long)to < TASK_SIZE) {
    d86c:	81 21 00 14 	lwz     r9,20(r1)
    d870:	3c 00 bf ff 	lis     r0,-16385
    d874:	60 00 ff ff 	ori     r0,r0,65535
    d878:	7f 89 00 40 	cmplw   cr7,r9,r0
    d87c:	41 9d 00 48 	bgt-    cr7,d8c4 <sctp_getsockopt_fragment_interleave+0x1cc>
		over = (unsigned long)to + n - TASK_SIZE;
    d880:	81 21 00 14 	lwz     r9,20(r1)
    d884:	80 01 00 1c 	lwz     r0,28(r1)
    d888:	7c 09 02 14 	add     r0,r9,r0
    d88c:	3d 60 40 00 	lis     r11,16384
    d890:	7c 00 5a 14 	add     r0,r0,r11
    d894:	90 01 00 20 	stw     r0,32(r1)
		return __copy_tofrom_user(to, (__force void __user *)from,
    d898:	81 21 00 1c 	lwz     r9,28(r1)
    d89c:	80 01 00 20 	lwz     r0,32(r1)
    d8a0:	7c 00 48 50 	subf    r0,r0,r9
    d8a4:	80 61 00 14 	lwz     r3,20(r1)
    d8a8:	80 81 00 18 	lwz     r4,24(r1)
    d8ac:	7c 05 03 78 	mr      r5,r0
    d8b0:	48 00 00 01 	bl      d8b0 <sctp_getsockopt_fragment_interleave+0x1b8>
    d8b4:	7c 69 1b 78 	mr      r9,r3
    d8b8:	80 01 00 20 	lwz     r0,32(r1)
    d8bc:	7c 09 02 14 	add     r0,r9,r0
    d8c0:	48 00 00 08 	b       d8c8 <sctp_getsockopt_fragment_interleave+0x1d0>
				n - over) + over;
	}
	return n;
    d8c4:	80 01 00 1c 	lwz     r0,28(r1)
    d8c8:	2f 80 00 00 	cmpwi   cr7,r0,0
    d8cc:	41 9e 00 0c 	beq-    cr7,d8d8 <sctp_getsockopt_fragment_interleave+0x1e0>
		return -EFAULT;
    d8d0:	38 00 ff f2 	li      r0,-14
    d8d4:	48 00 00 08 	b       d8dc <sctp_getsockopt_fragment_interleave+0x1e4>

	return 0;
    d8d8:	38 00 00 00 	li      r0,0
}
    d8dc:	7c 03 03 78 	mr      r3,r0
    d8e0:	80 01 00 44 	lwz     r0,68(r1)
    d8e4:	7c 08 03 a6 	mtlr    r0
    d8e8:	83 e1 00 3c 	lwz     r31,60(r1)
    d8ec:	38 21 00 40 	addi    r1,r1,64
    d8f0:	4e 80 00 20 	blr

0000d8f4 <sctp_getsockopt_partial_delivery_point>:
 * (chapter and verse is quoted at sctp_setsockopt_partial_delivery_point())
 */
static int sctp_getsockopt_partial_delivery_point(struct sock *sk, int len,
						  char __user *optval,
						  int __user *optlen)
{
    d8f4:	94 21 ff c0 	stwu    r1,-64(r1)
    d8f8:	7c 08 02 a6 	mflr    r0
    d8fc:	90 01 00 44 	stw     r0,68(r1)
    d900:	93 e1 00 3c 	stw     r31,60(r1)
    d904:	90 61 00 28 	stw     r3,40(r1)
    d908:	90 81 00 2c 	stw     r4,44(r1)
    d90c:	90 a1 00 30 	stw     r5,48(r1)
    d910:	90 c1 00 34 	stw     r6,52(r1)
	u32 val;

	if (len < sizeof(u32))
    d914:	80 01 00 2c 	lwz     r0,44(r1)
    d918:	2b 80 00 03 	cmplwi  cr7,r0,3
    d91c:	41 9d 00 0c 	bgt-    cr7,d928 <sctp_getsockopt_partial_delivery_point+0x34>
		return -EINVAL;
    d920:	38 00 ff ea 	li      r0,-22
    d924:	48 00 01 b0 	b       dad4 <sctp_getsockopt_partial_delivery_point+0x1e0>

	len = sizeof(u32);
    d928:	38 00 00 04 	li      r0,4
    d92c:	90 01 00 2c 	stw     r0,44(r1)
    d930:	80 01 00 28 	lwz     r0,40(r1)
    d934:	90 01 00 10 	stw     r0,16(r1)
    d938:	80 01 00 10 	lwz     r0,16(r1)

	val = sctp_sk(sk)->pd_point;
    d93c:	7c 09 03 78 	mr      r9,r0
    d940:	80 09 02 f0 	lwz     r0,752(r9)
    d944:	90 01 00 24 	stw     r0,36(r1)
	if (put_user(len, optlen))
    d948:	38 00 ff f2 	li      r0,-14
    d94c:	90 01 00 08 	stw     r0,8(r1)
    d950:	80 01 00 34 	lwz     r0,52(r1)
    d954:	90 01 00 0c 	stw     r0,12(r1)
    d958:	81 21 00 0c 	lwz     r9,12(r1)
    d95c:	7c 40 13 78 	mr      r0,r2
    d960:	7c 0a 03 78 	mr      r10,r0
    d964:	80 0a 01 d4 	lwz     r0,468(r10)
    d968:	7f 89 00 40 	cmplw   cr7,r9,r0
    d96c:	41 9d 00 28 	bgt-    cr7,d994 <sctp_getsockopt_partial_delivery_point+0xa0>
    d970:	7c 40 13 78 	mr      r0,r2
    d974:	7c 0b 03 78 	mr      r11,r0
    d978:	81 2b 01 d4 	lwz     r9,468(r11)
    d97c:	80 01 00 0c 	lwz     r0,12(r1)
    d980:	7c 00 48 50 	subf    r0,r0,r9
    d984:	2b 80 00 02 	cmplwi  cr7,r0,2
    d988:	40 9d 00 0c 	ble-    cr7,d994 <sctp_getsockopt_partial_delivery_point+0xa0>
    d98c:	38 00 00 01 	li      r0,1
    d990:	48 00 00 08 	b       d998 <sctp_getsockopt_partial_delivery_point+0xa4>
    d994:	38 00 00 00 	li      r0,0
    d998:	2f 80 00 00 	cmpwi   cr7,r0,0
    d99c:	41 9e 00 28 	beq-    cr7,d9c4 <sctp_getsockopt_partial_delivery_point+0xd0>
    d9a0:	38 00 00 00 	li      r0,0
    d9a4:	90 01 00 08 	stw     r0,8(r1)
    d9a8:	80 01 00 2c 	lwz     r0,44(r1)
    d9ac:	81 21 00 0c 	lwz     r9,12(r1)
    d9b0:	81 61 00 08 	lwz     r11,8(r1)
    d9b4:	7d 7f 5b 78 	mr      r31,r11
    d9b8:	90 09 00 00 	stw     r0,0(r9)
    d9bc:	93 e1 00 08 	stw     r31,8(r1)
    d9c0:	60 00 00 00 	nop
    d9c4:	80 01 00 08 	lwz     r0,8(r1)
    d9c8:	2f 80 00 00 	cmpwi   cr7,r0,0
    d9cc:	41 9e 00 0c 	beq-    cr7,d9d8 <sctp_getsockopt_partial_delivery_point+0xe4>
		return -EFAULT;
    d9d0:	38 00 ff f2 	li      r0,-14
    d9d4:	48 00 01 00 	b       dad4 <sctp_getsockopt_partial_delivery_point+0x1e0>
	if (copy_to_user(optval, &val, len))
    d9d8:	80 01 00 2c 	lwz     r0,44(r1)
    d9dc:	81 21 00 30 	lwz     r9,48(r1)
    d9e0:	91 21 00 14 	stw     r9,20(r1)
    d9e4:	39 21 00 24 	addi    r9,r1,36
    d9e8:	91 21 00 18 	stw     r9,24(r1)
    d9ec:	90 01 00 1c 	stw     r0,28(r1)
static inline unsigned long copy_to_user(void __user *to,
		const void *from, unsigned long n)
{
	unsigned long over;

	if (access_ok(VERIFY_WRITE, to, n))
    d9f0:	81 21 00 14 	lwz     r9,20(r1)
    d9f4:	7c 40 13 78 	mr      r0,r2
    d9f8:	7c 0a 03 78 	mr      r10,r0
    d9fc:	80 0a 01 d4 	lwz     r0,468(r10)
    da00:	7f 89 00 40 	cmplw   cr7,r9,r0
    da04:	41 9d 00 3c 	bgt-    cr7,da40 <sctp_getsockopt_partial_delivery_point+0x14c>
    da08:	80 01 00 1c 	lwz     r0,28(r1)
    da0c:	2f 80 00 00 	cmpwi   cr7,r0,0
    da10:	41 9e 00 28 	beq-    cr7,da38 <sctp_getsockopt_partial_delivery_point+0x144>
    da14:	80 01 00 1c 	lwz     r0,28(r1)
    da18:	31 20 ff ff 	addic   r9,r0,-1
    da1c:	7c 40 13 78 	mr      r0,r2
    da20:	7c 0a 03 78 	mr      r10,r0
    da24:	81 6a 01 d4 	lwz     r11,468(r10)
    da28:	80 01 00 14 	lwz     r0,20(r1)
    da2c:	7c 00 58 50 	subf    r0,r0,r11
    da30:	7f 89 00 40 	cmplw   cr7,r9,r0
    da34:	41 9d 00 0c 	bgt-    cr7,da40 <sctp_getsockopt_partial_delivery_point+0x14c>
    da38:	38 00 00 01 	li      r0,1
    da3c:	48 00 00 08 	b       da44 <sctp_getsockopt_partial_delivery_point+0x150>
    da40:	38 00 00 00 	li      r0,0
    da44:	2f 80 00 00 	cmpwi   cr7,r0,0
    da48:	41 9e 00 1c 	beq-    cr7,da64 <sctp_getsockopt_partial_delivery_point+0x170>
		return __copy_tofrom_user(to, (__force void __user *)from, n);
    da4c:	80 61 00 14 	lwz     r3,20(r1)
    da50:	80 81 00 18 	lwz     r4,24(r1)
    da54:	80 a1 00 1c 	lwz     r5,28(r1)
    da58:	48 00 00 01 	bl      da58 <sctp_getsockopt_partial_delivery_point+0x164>
    da5c:	7c 60 1b 78 	mr      r0,r3
    da60:	48 00 00 60 	b       dac0 <sctp_getsockopt_partial_delivery_point+0x1cc>
	if ((unsigned long)to < TASK_SIZE) {
    da64:	81 21 00 14 	lwz     r9,20(r1)
    da68:	3c 00 bf ff 	lis     r0,-16385
    da6c:	60 00 ff ff 	ori     r0,r0,65535
    da70:	7f 89 00 40 	cmplw   cr7,r9,r0
    da74:	41 9d 00 48 	bgt-    cr7,dabc <sctp_getsockopt_partial_delivery_point+0x1c8>
		over = (unsigned long)to + n - TASK_SIZE;
    da78:	81 21 00 14 	lwz     r9,20(r1)
    da7c:	80 01 00 1c 	lwz     r0,28(r1)
    da80:	7c 09 02 14 	add     r0,r9,r0
    da84:	3d 60 40 00 	lis     r11,16384
    da88:	7c 00 5a 14 	add     r0,r0,r11
    da8c:	90 01 00 20 	stw     r0,32(r1)
		return __copy_tofrom_user(to, (__force void __user *)from,
    da90:	81 21 00 1c 	lwz     r9,28(r1)
    da94:	80 01 00 20 	lwz     r0,32(r1)
    da98:	7c 00 48 50 	subf    r0,r0,r9
    da9c:	80 61 00 14 	lwz     r3,20(r1)
    daa0:	80 81 00 18 	lwz     r4,24(r1)
    daa4:	7c 05 03 78 	mr      r5,r0
    daa8:	48 00 00 01 	bl      daa8 <sctp_getsockopt_partial_delivery_point+0x1b4>
    daac:	7c 69 1b 78 	mr      r9,r3
    dab0:	80 01 00 20 	lwz     r0,32(r1)
    dab4:	7c 09 02 14 	add     r0,r9,r0
    dab8:	48 00 00 08 	b       dac0 <sctp_getsockopt_partial_delivery_point+0x1cc>
				n - over) + over;
	}
	return n;
    dabc:	80 01 00 1c 	lwz     r0,28(r1)
    dac0:	2f 80 00 00 	cmpwi   cr7,r0,0
    dac4:	41 9e 00 0c 	beq-    cr7,dad0 <sctp_getsockopt_partial_delivery_point+0x1dc>
		return -EFAULT;
    dac8:	38 00 ff f2 	li      r0,-14
    dacc:	48 00 00 08 	b       dad4 <sctp_getsockopt_partial_delivery_point+0x1e0>

	return 0;
    dad0:	38 00 00 00 	li      r0,0
}
    dad4:	7c 03 03 78 	mr      r3,r0
    dad8:	80 01 00 44 	lwz     r0,68(r1)
    dadc:	7c 08 03 a6 	mtlr    r0
    dae0:	83 e1 00 3c 	lwz     r31,60(r1)
    dae4:	38 21 00 40 	addi    r1,r1,64
    dae8:	4e 80 00 20 	blr

0000daec <sctp_getsockopt_maxburst>:
 * (chapter and verse is quoted at sctp_setsockopt_maxburst())
 */
static int sctp_getsockopt_maxburst(struct sock *sk, int len,
				    char __user *optval,
				    int __user *optlen)
{
    daec:	94 21 ff 90 	stwu    r1,-112(r1)
    daf0:	7c 08 02 a6 	mflr    r0
    daf4:	90 01 00 74 	stw     r0,116(r1)
    daf8:	90 61 00 58 	stw     r3,88(r1)
    dafc:	90 81 00 5c 	stw     r4,92(r1)
    db00:	90 a1 00 60 	stw     r5,96(r1)
    db04:	90 c1 00 64 	stw     r6,100(r1)
	struct sctp_assoc_value params;
	struct sctp_sock *sp;
	struct sctp_association *asoc;

	if (len == sizeof(int)) {
    db08:	80 01 00 5c 	lwz     r0,92(r1)
    db0c:	2f 80 00 04 	cmpwi   cr7,r0,4
    db10:	40 9e 00 28 	bne-    cr7,db38 <sctp_getsockopt_maxburst+0x4c>
		pr_warn("Use of int in max_burst socket option deprecated\n");
    db14:	3c 00 00 00 	lis     r0,0
    db18:	30 60 01 14 	addic   r3,r0,276
    db1c:	48 00 00 01 	bl      db1c <sctp_getsockopt_maxburst+0x30>
		pr_warn("Use struct sctp_assoc_value instead\n");
    db20:	3c 00 00 00 	lis     r0,0
    db24:	30 60 00 e4 	addic   r3,r0,228
    db28:	48 00 00 01 	bl      db28 <sctp_getsockopt_maxburst+0x3c>
		params.assoc_id = 0;
    db2c:	38 00 00 00 	li      r0,0
    db30:	90 01 00 44 	stw     r0,68(r1)
    db34:	48 00 01 18 	b       dc4c <sctp_getsockopt_maxburst+0x160>
	} else if (len >= sizeof(struct sctp_assoc_value)) {
    db38:	80 01 00 5c 	lwz     r0,92(r1)
    db3c:	2b 80 00 07 	cmplwi  cr7,r0,7
    db40:	40 9d 01 04 	ble-    cr7,dc44 <sctp_getsockopt_maxburst+0x158>
		len = sizeof(struct sctp_assoc_value);
    db44:	38 00 00 08 	li      r0,8
    db48:	90 01 00 5c 	stw     r0,92(r1)
		if (copy_from_user(&params, optval, len))
    db4c:	80 01 00 5c 	lwz     r0,92(r1)
    db50:	39 21 00 44 	addi    r9,r1,68
    db54:	91 21 00 10 	stw     r9,16(r1)
    db58:	81 21 00 60 	lwz     r9,96(r1)
    db5c:	91 21 00 14 	stw     r9,20(r1)
    db60:	90 01 00 18 	stw     r0,24(r1)
static inline unsigned long copy_from_user(void *to,
		const void __user *from, unsigned long n)
{
	unsigned long over;

	if (access_ok(VERIFY_READ, from, n))
    db64:	81 21 00 14 	lwz     r9,20(r1)
    db68:	7c 40 13 78 	mr      r0,r2
    db6c:	7c 0a 03 78 	mr      r10,r0
    db70:	80 0a 01 d4 	lwz     r0,468(r10)
    db74:	7f 89 00 40 	cmplw   cr7,r9,r0
    db78:	41 9d 00 3c 	bgt-    cr7,dbb4 <sctp_getsockopt_maxburst+0xc8>
    db7c:	80 01 00 18 	lwz     r0,24(r1)
    db80:	2f 80 00 00 	cmpwi   cr7,r0,0
    db84:	41 9e 00 28 	beq-    cr7,dbac <sctp_getsockopt_maxburst+0xc0>
    db88:	80 01 00 18 	lwz     r0,24(r1)
    db8c:	31 20 ff ff 	addic   r9,r0,-1
    db90:	7c 40 13 78 	mr      r0,r2
    db94:	7c 0a 03 78 	mr      r10,r0
    db98:	81 6a 01 d4 	lwz     r11,468(r10)
    db9c:	80 01 00 14 	lwz     r0,20(r1)
    dba0:	7c 00 58 50 	subf    r0,r0,r11
    dba4:	7f 89 00 40 	cmplw   cr7,r9,r0
    dba8:	41 9d 00 0c 	bgt-    cr7,dbb4 <sctp_getsockopt_maxburst+0xc8>
    dbac:	38 00 00 01 	li      r0,1
    dbb0:	48 00 00 08 	b       dbb8 <sctp_getsockopt_maxburst+0xcc>
    dbb4:	38 00 00 00 	li      r0,0
    dbb8:	2f 80 00 00 	cmpwi   cr7,r0,0
    dbbc:	41 9e 00 1c 	beq-    cr7,dbd8 <sctp_getsockopt_maxburst+0xec>
		return __copy_tofrom_user((__force void __user *)to, from, n);
    dbc0:	80 61 00 10 	lwz     r3,16(r1)
    dbc4:	80 81 00 14 	lwz     r4,20(r1)
    dbc8:	80 a1 00 18 	lwz     r5,24(r1)
    dbcc:	48 00 00 01 	bl      dbcc <sctp_getsockopt_maxburst+0xe0>
    dbd0:	7c 60 1b 78 	mr      r0,r3
    dbd4:	48 00 00 60 	b       dc34 <sctp_getsockopt_maxburst+0x148>
	if ((unsigned long)from < TASK_SIZE) {
    dbd8:	81 21 00 14 	lwz     r9,20(r1)
    dbdc:	3c 00 bf ff 	lis     r0,-16385
    dbe0:	60 00 ff ff 	ori     r0,r0,65535
    dbe4:	7f 89 00 40 	cmplw   cr7,r9,r0
    dbe8:	41 9d 00 48 	bgt-    cr7,dc30 <sctp_getsockopt_maxburst+0x144>
		over = (unsigned long)from + n - TASK_SIZE;
    dbec:	81 21 00 14 	lwz     r9,20(r1)
    dbf0:	80 01 00 18 	lwz     r0,24(r1)
    dbf4:	7c 09 02 14 	add     r0,r9,r0
    dbf8:	3d 60 40 00 	lis     r11,16384
    dbfc:	7c 00 5a 14 	add     r0,r0,r11
    dc00:	90 01 00 1c 	stw     r0,28(r1)
		return __copy_tofrom_user((__force void __user *)to, from,
    dc04:	81 21 00 18 	lwz     r9,24(r1)
    dc08:	80 01 00 1c 	lwz     r0,28(r1)
    dc0c:	7c 00 48 50 	subf    r0,r0,r9
    dc10:	80 61 00 10 	lwz     r3,16(r1)
    dc14:	80 81 00 14 	lwz     r4,20(r1)
    dc18:	7c 05 03 78 	mr      r5,r0
    dc1c:	48 00 00 01 	bl      dc1c <sctp_getsockopt_maxburst+0x130>
    dc20:	7c 69 1b 78 	mr      r9,r3
    dc24:	80 01 00 1c 	lwz     r0,28(r1)
    dc28:	7c 09 02 14 	add     r0,r9,r0
    dc2c:	48 00 00 08 	b       dc34 <sctp_getsockopt_maxburst+0x148>
				n - over) + over;
	}
	return n;
    dc30:	80 01 00 18 	lwz     r0,24(r1)
    dc34:	2f 80 00 00 	cmpwi   cr7,r0,0
    dc38:	41 9e 00 14 	beq-    cr7,dc4c <sctp_getsockopt_maxburst+0x160>
			return -EFAULT;
    dc3c:	38 00 ff f2 	li      r0,-14
    dc40:	48 00 02 78 	b       deb8 <sctp_getsockopt_maxburst+0x3cc>
	} else
		return -EINVAL;
    dc44:	38 00 ff ea 	li      r0,-22
    dc48:	48 00 02 70 	b       deb8 <sctp_getsockopt_maxburst+0x3cc>
    dc4c:	80 01 00 58 	lwz     r0,88(r1)
    dc50:	90 01 00 20 	stw     r0,32(r1)
    dc54:	80 01 00 20 	lwz     r0,32(r1)

	sp = sctp_sk(sk);
    dc58:	90 01 00 08 	stw     r0,8(r1)

	if (params.assoc_id != 0) {
    dc5c:	80 01 00 44 	lwz     r0,68(r1)
    dc60:	2f 80 00 00 	cmpwi   cr7,r0,0
    dc64:	41 9e 00 40 	beq-    cr7,dca4 <sctp_getsockopt_maxburst+0x1b8>
		asoc = sctp_id2assoc(sk, params.assoc_id);
    dc68:	80 01 00 44 	lwz     r0,68(r1)
    dc6c:	80 61 00 58 	lwz     r3,88(r1)
    dc70:	7c 04 03 78 	mr      r4,r0
    dc74:	48 00 00 01 	bl      dc74 <sctp_getsockopt_maxburst+0x188>
    dc78:	90 61 00 0c 	stw     r3,12(r1)
		if (!asoc)
    dc7c:	80 01 00 0c 	lwz     r0,12(r1)
    dc80:	2f 80 00 00 	cmpwi   cr7,r0,0
    dc84:	40 9e 00 0c 	bne-    cr7,dc90 <sctp_getsockopt_maxburst+0x1a4>
			return -EINVAL;
    dc88:	38 00 ff ea 	li      r0,-22
    dc8c:	48 00 02 2c 	b       deb8 <sctp_getsockopt_maxburst+0x3cc>
		params.assoc_value = asoc->max_burst;
    dc90:	80 01 00 0c 	lwz     r0,12(r1)
    dc94:	7c 09 03 78 	mr      r9,r0
    dc98:	80 09 01 d4 	lwz     r0,468(r9)
    dc9c:	90 01 00 48 	stw     r0,72(r1)
    dca0:	48 00 00 14 	b       dcb4 <sctp_getsockopt_maxburst+0x1c8>
	} else
		params.assoc_value = sp->max_burst;
    dca4:	80 01 00 08 	lwz     r0,8(r1)
    dca8:	7c 0a 03 78 	mr      r10,r0
    dcac:	80 0a 01 f4 	lwz     r0,500(r10)
    dcb0:	90 01 00 48 	stw     r0,72(r1)

	if (len == sizeof(int)) {
    dcb4:	80 01 00 5c 	lwz     r0,92(r1)
    dcb8:	2f 80 00 04 	cmpwi   cr7,r0,4
    dcbc:	40 9e 01 00 	bne-    cr7,ddbc <sctp_getsockopt_maxburst+0x2d0>
		if (copy_to_user(optval, &params.assoc_value, len))
    dcc0:	80 01 00 5c 	lwz     r0,92(r1)
    dcc4:	81 21 00 60 	lwz     r9,96(r1)
    dcc8:	91 21 00 24 	stw     r9,36(r1)
    dccc:	39 21 00 44 	addi    r9,r1,68
    dcd0:	39 29 00 04 	addi    r9,r9,4
    dcd4:	91 21 00 28 	stw     r9,40(r1)
    dcd8:	90 01 00 2c 	stw     r0,44(r1)
static inline unsigned long copy_to_user(void __user *to,
		const void *from, unsigned long n)
{
	unsigned long over;

	if (access_ok(VERIFY_WRITE, to, n))
    dcdc:	81 21 00 24 	lwz     r9,36(r1)
    dce0:	7c 40 13 78 	mr      r0,r2
    dce4:	7c 0b 03 78 	mr      r11,r0
    dce8:	80 0b 01 d4 	lwz     r0,468(r11)
    dcec:	7f 89 00 40 	cmplw   cr7,r9,r0
    dcf0:	41 9d 00 3c 	bgt-    cr7,dd2c <sctp_getsockopt_maxburst+0x240>
    dcf4:	80 01 00 2c 	lwz     r0,44(r1)
    dcf8:	2f 80 00 00 	cmpwi   cr7,r0,0
    dcfc:	41 9e 00 28 	beq-    cr7,dd24 <sctp_getsockopt_maxburst+0x238>
    dd00:	80 01 00 2c 	lwz     r0,44(r1)
    dd04:	31 20 ff ff 	addic   r9,r0,-1
    dd08:	7c 40 13 78 	mr      r0,r2
    dd0c:	7c 0a 03 78 	mr      r10,r0
    dd10:	81 6a 01 d4 	lwz     r11,468(r10)
    dd14:	80 01 00 24 	lwz     r0,36(r1)
    dd18:	7c 00 58 50 	subf    r0,r0,r11
    dd1c:	7f 89 00 40 	cmplw   cr7,r9,r0
    dd20:	41 9d 00 0c 	bgt-    cr7,dd2c <sctp_getsockopt_maxburst+0x240>
    dd24:	38 00 00 01 	li      r0,1
    dd28:	48 00 00 08 	b       dd30 <sctp_getsockopt_maxburst+0x244>
    dd2c:	38 00 00 00 	li      r0,0
    dd30:	2f 80 00 00 	cmpwi   cr7,r0,0
    dd34:	41 9e 00 1c 	beq-    cr7,dd50 <sctp_getsockopt_maxburst+0x264>
		return __copy_tofrom_user(to, (__force void __user *)from, n);
    dd38:	80 61 00 24 	lwz     r3,36(r1)
    dd3c:	80 81 00 28 	lwz     r4,40(r1)
    dd40:	80 a1 00 2c 	lwz     r5,44(r1)
    dd44:	48 00 00 01 	bl      dd44 <sctp_getsockopt_maxburst+0x258>
    dd48:	7c 60 1b 78 	mr      r0,r3
    dd4c:	48 00 00 60 	b       ddac <sctp_getsockopt_maxburst+0x2c0>
	if ((unsigned long)to < TASK_SIZE) {
    dd50:	81 21 00 24 	lwz     r9,36(r1)
    dd54:	3c 00 bf ff 	lis     r0,-16385
    dd58:	60 00 ff ff 	ori     r0,r0,65535
    dd5c:	7f 89 00 40 	cmplw   cr7,r9,r0
    dd60:	41 9d 00 48 	bgt-    cr7,dda8 <sctp_getsockopt_maxburst+0x2bc>
		over = (unsigned long)to + n - TASK_SIZE;
    dd64:	81 21 00 24 	lwz     r9,36(r1)
    dd68:	80 01 00 2c 	lwz     r0,44(r1)
    dd6c:	7c 09 02 14 	add     r0,r9,r0
    dd70:	3d 60 40 00 	lis     r11,16384
    dd74:	7c 00 5a 14 	add     r0,r0,r11
    dd78:	90 01 00 30 	stw     r0,48(r1)
		return __copy_tofrom_user(to, (__force void __user *)from,
    dd7c:	81 21 00 2c 	lwz     r9,44(r1)
    dd80:	80 01 00 30 	lwz     r0,48(r1)
    dd84:	7c 00 48 50 	subf    r0,r0,r9
    dd88:	80 61 00 24 	lwz     r3,36(r1)
    dd8c:	80 81 00 28 	lwz     r4,40(r1)
    dd90:	7c 05 03 78 	mr      r5,r0
    dd94:	48 00 00 01 	bl      dd94 <sctp_getsockopt_maxburst+0x2a8>
    dd98:	7c 69 1b 78 	mr      r9,r3
    dd9c:	80 01 00 30 	lwz     r0,48(r1)
    dda0:	7c 09 02 14 	add     r0,r9,r0
    dda4:	48 00 00 08 	b       ddac <sctp_getsockopt_maxburst+0x2c0>
				n - over) + over;
	}
	return n;
    dda8:	80 01 00 2c 	lwz     r0,44(r1)
    ddac:	2f 80 00 00 	cmpwi   cr7,r0,0
    ddb0:	41 9e 01 04 	beq-    cr7,deb4 <sctp_getsockopt_maxburst+0x3c8>
			return -EFAULT;
    ddb4:	38 00 ff f2 	li      r0,-14
    ddb8:	48 00 01 00 	b       deb8 <sctp_getsockopt_maxburst+0x3cc>
	} else {
		if (copy_to_user(optval, &params, len))
    ddbc:	80 01 00 5c 	lwz     r0,92(r1)
    ddc0:	81 21 00 60 	lwz     r9,96(r1)
    ddc4:	91 21 00 34 	stw     r9,52(r1)
    ddc8:	39 21 00 44 	addi    r9,r1,68
    ddcc:	91 21 00 38 	stw     r9,56(r1)
    ddd0:	90 01 00 3c 	stw     r0,60(r1)
static inline unsigned long copy_to_user(void __user *to,
		const void *from, unsigned long n)
{
	unsigned long over;

	if (access_ok(VERIFY_WRITE, to, n))
    ddd4:	81 21 00 34 	lwz     r9,52(r1)
    ddd8:	7c 40 13 78 	mr      r0,r2
    dddc:	7c 0a 03 78 	mr      r10,r0
    dde0:	80 0a 01 d4 	lwz     r0,468(r10)
    dde4:	7f 89 00 40 	cmplw   cr7,r9,r0
    dde8:	41 9d 00 3c 	bgt-    cr7,de24 <sctp_getsockopt_maxburst+0x338>
    ddec:	80 01 00 3c 	lwz     r0,60(r1)
    ddf0:	2f 80 00 00 	cmpwi   cr7,r0,0
    ddf4:	41 9e 00 28 	beq-    cr7,de1c <sctp_getsockopt_maxburst+0x330>
    ddf8:	80 01 00 3c 	lwz     r0,60(r1)
    ddfc:	31 20 ff ff 	addic   r9,r0,-1
    de00:	7c 40 13 78 	mr      r0,r2
    de04:	7c 0a 03 78 	mr      r10,r0
    de08:	81 6a 01 d4 	lwz     r11,468(r10)
    de0c:	80 01 00 34 	lwz     r0,52(r1)
    de10:	7c 00 58 50 	subf    r0,r0,r11
    de14:	7f 89 00 40 	cmplw   cr7,r9,r0
    de18:	41 9d 00 0c 	bgt-    cr7,de24 <sctp_getsockopt_maxburst+0x338>
    de1c:	38 00 00 01 	li      r0,1
    de20:	48 00 00 08 	b       de28 <sctp_getsockopt_maxburst+0x33c>
    de24:	38 00 00 00 	li      r0,0
    de28:	2f 80 00 00 	cmpwi   cr7,r0,0
    de2c:	41 9e 00 1c 	beq-    cr7,de48 <sctp_getsockopt_maxburst+0x35c>
		return __copy_tofrom_user(to, (__force void __user *)from, n);
    de30:	80 61 00 34 	lwz     r3,52(r1)
    de34:	80 81 00 38 	lwz     r4,56(r1)
    de38:	80 a1 00 3c 	lwz     r5,60(r1)
    de3c:	48 00 00 01 	bl      de3c <sctp_getsockopt_maxburst+0x350>
    de40:	7c 60 1b 78 	mr      r0,r3
    de44:	48 00 00 60 	b       dea4 <sctp_getsockopt_maxburst+0x3b8>
	if ((unsigned long)to < TASK_SIZE) {
    de48:	81 21 00 34 	lwz     r9,52(r1)
    de4c:	3c 00 bf ff 	lis     r0,-16385
    de50:	60 00 ff ff 	ori     r0,r0,65535
    de54:	7f 89 00 40 	cmplw   cr7,r9,r0
    de58:	41 9d 00 48 	bgt-    cr7,dea0 <sctp_getsockopt_maxburst+0x3b4>
		over = (unsigned long)to + n - TASK_SIZE;
    de5c:	81 21 00 34 	lwz     r9,52(r1)
    de60:	80 01 00 3c 	lwz     r0,60(r1)
    de64:	7c 09 02 14 	add     r0,r9,r0
    de68:	3d 60 40 00 	lis     r11,16384
    de6c:	7c 00 5a 14 	add     r0,r0,r11
    de70:	90 01 00 40 	stw     r0,64(r1)
		return __copy_tofrom_user(to, (__force void __user *)from,
    de74:	81 21 00 3c 	lwz     r9,60(r1)
    de78:	80 01 00 40 	lwz     r0,64(r1)
    de7c:	7c 00 48 50 	subf    r0,r0,r9
    de80:	80 61 00 34 	lwz     r3,52(r1)
    de84:	80 81 00 38 	lwz     r4,56(r1)
    de88:	7c 05 03 78 	mr      r5,r0
    de8c:	48 00 00 01 	bl      de8c <sctp_getsockopt_maxburst+0x3a0>
    de90:	7c 69 1b 78 	mr      r9,r3
    de94:	80 01 00 40 	lwz     r0,64(r1)
    de98:	7c 09 02 14 	add     r0,r9,r0
    de9c:	48 00 00 08 	b       dea4 <sctp_getsockopt_maxburst+0x3b8>
				n - over) + over;
	}
	return n;
    dea0:	80 01 00 3c 	lwz     r0,60(r1)
    dea4:	2f 80 00 00 	cmpwi   cr7,r0,0
    dea8:	41 9e 00 0c 	beq-    cr7,deb4 <sctp_getsockopt_maxburst+0x3c8>
			return -EFAULT;
    deac:	38 00 ff f2 	li      r0,-14
    deb0:	48 00 00 08 	b       deb8 <sctp_getsockopt_maxburst+0x3cc>
	}

	return 0;
    deb4:	38 00 00 00 	li      r0,0

}
    deb8:	7c 03 03 78 	mr      r3,r0
    debc:	80 01 00 74 	lwz     r0,116(r1)
    dec0:	7c 08 03 a6 	mtlr    r0
    dec4:	38 21 00 70 	addi    r1,r1,112
    dec8:	4e 80 00 20 	blr

0000decc <sctp_getsockopt_hmac_ident>:

static int sctp_getsockopt_hmac_ident(struct sock *sk, int len,
				    char __user *optval, int __user *optlen)
{
    decc:	94 21 ff a0 	stwu    r1,-96(r1)
    ded0:	7c 08 02 a6 	mflr    r0
    ded4:	90 01 00 64 	stw     r0,100(r1)
    ded8:	93 e1 00 5c 	stw     r31,92(r1)
    dedc:	90 61 00 48 	stw     r3,72(r1)
    dee0:	90 81 00 4c 	stw     r4,76(r1)
    dee4:	90 a1 00 50 	stw     r5,80(r1)
    dee8:	90 c1 00 54 	stw     r6,84(r1)
	struct sctp_hmacalgo  __user *p = (void __user *)optval;
    deec:	80 01 00 50 	lwz     r0,80(r1)
    def0:	90 01 00 10 	stw     r0,16(r1)
	struct sctp_hmac_algo_param *hmacs;
	__u16 data_len = 0;
    def4:	38 00 00 00 	li      r0,0
    def8:	b0 01 00 14 	sth     r0,20(r1)
	u32 num_idents;

	if (!sctp_auth_enable)
    defc:	3c 00 00 00 	lis     r0,0
    df00:	30 00 00 00 	addic   r0,r0,0
    df04:	7c 09 03 78 	mr      r9,r0
    df08:	80 09 00 74 	lwz     r0,116(r9)
    df0c:	2f 80 00 00 	cmpwi   cr7,r0,0
    df10:	40 9e 00 0c 	bne-    cr7,df1c <sctp_getsockopt_hmac_ident+0x50>
		return -EACCES;
    df14:	38 00 ff f3 	li      r0,-13
    df18:	48 00 02 a8 	b       e1c0 <sctp_getsockopt_hmac_ident+0x2f4>
    df1c:	80 01 00 48 	lwz     r0,72(r1)
    df20:	90 01 00 28 	stw     r0,40(r1)
    df24:	80 01 00 28 	lwz     r0,40(r1)

	hmacs = sctp_sk(sk)->ep->auth_hmacs_list;
    df28:	7c 0a 03 78 	mr      r10,r0
    df2c:	80 0a 01 d4 	lwz     r0,468(r10)
    df30:	7c 0b 03 78 	mr      r11,r0
    df34:	80 0b 00 b0 	lwz     r0,176(r11)
    df38:	90 01 00 18 	stw     r0,24(r1)
	data_len = ntohs(hmacs->param_hdr.length) - sizeof(sctp_paramhdr_t);
    df3c:	80 01 00 18 	lwz     r0,24(r1)
    df40:	7c 09 03 78 	mr      r9,r0
    df44:	a0 09 00 02 	lhz     r0,2(r9)
    df48:	54 00 04 3e 	clrlwi  r0,r0,16
    df4c:	30 00 ff fc 	addic   r0,r0,-4
    df50:	b0 01 00 14 	sth     r0,20(r1)

	if (len < sizeof(struct sctp_hmacalgo) + data_len)
    df54:	81 21 00 4c 	lwz     r9,76(r1)
    df58:	a0 01 00 14 	lhz     r0,20(r1)
    df5c:	54 00 04 3e 	clrlwi  r0,r0,16
    df60:	30 00 00 04 	addic   r0,r0,4
    df64:	7f 89 00 40 	cmplw   cr7,r9,r0
    df68:	40 9c 00 0c 	bge-    cr7,df74 <sctp_getsockopt_hmac_ident+0xa8>
		return -EINVAL;
    df6c:	38 00 ff ea 	li      r0,-22
    df70:	48 00 02 50 	b       e1c0 <sctp_getsockopt_hmac_ident+0x2f4>

	len = sizeof(struct sctp_hmacalgo) + data_len;
    df74:	a0 01 00 14 	lhz     r0,20(r1)
    df78:	54 00 04 3e 	clrlwi  r0,r0,16
    df7c:	30 00 00 04 	addic   r0,r0,4
    df80:	90 01 00 4c 	stw     r0,76(r1)
	num_idents = data_len / sizeof(u16);
    df84:	a0 01 00 14 	lhz     r0,20(r1)
    df88:	54 00 04 3e 	clrlwi  r0,r0,16
    df8c:	54 00 f8 7e 	rlwinm  r0,r0,31,1,31
    df90:	54 00 04 3e 	clrlwi  r0,r0,16
    df94:	90 01 00 1c 	stw     r0,28(r1)

	if (put_user(len, optlen))
    df98:	38 00 ff f2 	li      r0,-14
    df9c:	90 01 00 08 	stw     r0,8(r1)
    dfa0:	80 01 00 54 	lwz     r0,84(r1)
    dfa4:	90 01 00 20 	stw     r0,32(r1)
    dfa8:	81 21 00 20 	lwz     r9,32(r1)
    dfac:	7c 40 13 78 	mr      r0,r2
    dfb0:	7c 0a 03 78 	mr      r10,r0
    dfb4:	80 0a 01 d4 	lwz     r0,468(r10)
    dfb8:	7f 89 00 40 	cmplw   cr7,r9,r0
    dfbc:	41 9d 00 28 	bgt-    cr7,dfe4 <sctp_getsockopt_hmac_ident+0x118>
    dfc0:	7c 40 13 78 	mr      r0,r2
    dfc4:	7c 0b 03 78 	mr      r11,r0
    dfc8:	81 2b 01 d4 	lwz     r9,468(r11)
    dfcc:	80 01 00 20 	lwz     r0,32(r1)
    dfd0:	7c 00 48 50 	subf    r0,r0,r9
    dfd4:	2b 80 00 02 	cmplwi  cr7,r0,2
    dfd8:	40 9d 00 0c 	ble-    cr7,dfe4 <sctp_getsockopt_hmac_ident+0x118>
    dfdc:	38 00 00 01 	li      r0,1
    dfe0:	48 00 00 08 	b       dfe8 <sctp_getsockopt_hmac_ident+0x11c>
    dfe4:	38 00 00 00 	li      r0,0
    dfe8:	2f 80 00 00 	cmpwi   cr7,r0,0
    dfec:	41 9e 00 28 	beq-    cr7,e014 <sctp_getsockopt_hmac_ident+0x148>
    dff0:	38 00 00 00 	li      r0,0
    dff4:	90 01 00 08 	stw     r0,8(r1)
    dff8:	80 01 00 4c 	lwz     r0,76(r1)
    dffc:	81 21 00 20 	lwz     r9,32(r1)
    e000:	81 61 00 08 	lwz     r11,8(r1)
    e004:	7d 7f 5b 78 	mr      r31,r11
    e008:	90 09 00 00 	stw     r0,0(r9)
    e00c:	93 e1 00 08 	stw     r31,8(r1)
    e010:	60 00 00 00 	nop
    e014:	80 01 00 08 	lwz     r0,8(r1)
    e018:	2f 80 00 00 	cmpwi   cr7,r0,0
    e01c:	41 9e 00 0c 	beq-    cr7,e028 <sctp_getsockopt_hmac_ident+0x15c>
		return -EFAULT;
    e020:	38 00 ff f2 	li      r0,-14
    e024:	48 00 01 9c 	b       e1c0 <sctp_getsockopt_hmac_ident+0x2f4>
	if (put_user(num_idents, &p->shmac_num_idents))
    e028:	38 00 ff f2 	li      r0,-14
    e02c:	90 01 00 0c 	stw     r0,12(r1)
    e030:	80 01 00 10 	lwz     r0,16(r1)
    e034:	90 01 00 24 	stw     r0,36(r1)
    e038:	81 21 00 24 	lwz     r9,36(r1)
    e03c:	7c 40 13 78 	mr      r0,r2
    e040:	7c 0a 03 78 	mr      r10,r0
    e044:	80 0a 01 d4 	lwz     r0,468(r10)
    e048:	7f 89 00 40 	cmplw   cr7,r9,r0
    e04c:	41 9d 00 28 	bgt-    cr7,e074 <sctp_getsockopt_hmac_ident+0x1a8>
    e050:	7c 40 13 78 	mr      r0,r2
    e054:	7c 0b 03 78 	mr      r11,r0
    e058:	81 2b 01 d4 	lwz     r9,468(r11)
    e05c:	80 01 00 24 	lwz     r0,36(r1)
    e060:	7c 00 48 50 	subf    r0,r0,r9
    e064:	2b 80 00 02 	cmplwi  cr7,r0,2
    e068:	40 9d 00 0c 	ble-    cr7,e074 <sctp_getsockopt_hmac_ident+0x1a8>
    e06c:	38 00 00 01 	li      r0,1
    e070:	48 00 00 08 	b       e078 <sctp_getsockopt_hmac_ident+0x1ac>
    e074:	38 00 00 00 	li      r0,0
    e078:	2f 80 00 00 	cmpwi   cr7,r0,0
    e07c:	41 9e 00 28 	beq-    cr7,e0a4 <sctp_getsockopt_hmac_ident+0x1d8>
    e080:	38 00 00 00 	li      r0,0
    e084:	90 01 00 0c 	stw     r0,12(r1)
    e088:	80 01 00 1c 	lwz     r0,28(r1)
    e08c:	81 21 00 24 	lwz     r9,36(r1)
    e090:	81 61 00 0c 	lwz     r11,12(r1)
    e094:	7d 7f 5b 78 	mr      r31,r11
    e098:	90 09 00 00 	stw     r0,0(r9)
    e09c:	93 e1 00 0c 	stw     r31,12(r1)
    e0a0:	60 00 00 00 	nop
    e0a4:	80 01 00 0c 	lwz     r0,12(r1)
    e0a8:	2f 80 00 00 	cmpwi   cr7,r0,0
    e0ac:	41 9e 00 0c 	beq-    cr7,e0b8 <sctp_getsockopt_hmac_ident+0x1ec>
		return -EFAULT;
    e0b0:	38 00 ff f2 	li      r0,-14
    e0b4:	48 00 01 0c 	b       e1c0 <sctp_getsockopt_hmac_ident+0x2f4>
	if (copy_to_user(p->shmac_idents, hmacs->hmac_ids, data_len))
    e0b8:	80 01 00 10 	lwz     r0,16(r1)
    e0bc:	31 60 00 04 	addic   r11,r0,4
    e0c0:	80 01 00 18 	lwz     r0,24(r1)
    e0c4:	31 20 00 04 	addic   r9,r0,4
    e0c8:	a0 01 00 14 	lhz     r0,20(r1)
    e0cc:	54 00 04 3e 	clrlwi  r0,r0,16
    e0d0:	91 61 00 2c 	stw     r11,44(r1)
    e0d4:	91 21 00 30 	stw     r9,48(r1)
    e0d8:	90 01 00 34 	stw     r0,52(r1)
static inline unsigned long copy_to_user(void __user *to,
		const void *from, unsigned long n)
{
	unsigned long over;

	if (access_ok(VERIFY_WRITE, to, n))
    e0dc:	81 21 00 2c 	lwz     r9,44(r1)
    e0e0:	7c 40 13 78 	mr      r0,r2
    e0e4:	7c 0a 03 78 	mr      r10,r0
    e0e8:	80 0a 01 d4 	lwz     r0,468(r10)
    e0ec:	7f 89 00 40 	cmplw   cr7,r9,r0
    e0f0:	41 9d 00 3c 	bgt-    cr7,e12c <sctp_getsockopt_hmac_ident+0x260>
    e0f4:	80 01 00 34 	lwz     r0,52(r1)
    e0f8:	2f 80 00 00 	cmpwi   cr7,r0,0
    e0fc:	41 9e 00 28 	beq-    cr7,e124 <sctp_getsockopt_hmac_ident+0x258>
    e100:	80 01 00 34 	lwz     r0,52(r1)
    e104:	31 20 ff ff 	addic   r9,r0,-1
    e108:	7c 40 13 78 	mr      r0,r2
    e10c:	7c 0a 03 78 	mr      r10,r0
    e110:	81 6a 01 d4 	lwz     r11,468(r10)
    e114:	80 01 00 2c 	lwz     r0,44(r1)
    e118:	7c 00 58 50 	subf    r0,r0,r11
    e11c:	7f 89 00 40 	cmplw   cr7,r9,r0
    e120:	41 9d 00 0c 	bgt-    cr7,e12c <sctp_getsockopt_hmac_ident+0x260>
    e124:	38 00 00 01 	li      r0,1
    e128:	48 00 00 08 	b       e130 <sctp_getsockopt_hmac_ident+0x264>
    e12c:	38 00 00 00 	li      r0,0
    e130:	2f 80 00 00 	cmpwi   cr7,r0,0
    e134:	41 9e 00 1c 	beq-    cr7,e150 <sctp_getsockopt_hmac_ident+0x284>
		return __copy_tofrom_user(to, (__force void __user *)from, n);
    e138:	80 61 00 2c 	lwz     r3,44(r1)
    e13c:	80 81 00 30 	lwz     r4,48(r1)
    e140:	80 a1 00 34 	lwz     r5,52(r1)
    e144:	48 00 00 01 	bl      e144 <sctp_getsockopt_hmac_ident+0x278>
    e148:	7c 60 1b 78 	mr      r0,r3
    e14c:	48 00 00 60 	b       e1ac <sctp_getsockopt_hmac_ident+0x2e0>
	if ((unsigned long)to < TASK_SIZE) {
    e150:	81 21 00 2c 	lwz     r9,44(r1)
    e154:	3c 00 bf ff 	lis     r0,-16385
    e158:	60 00 ff ff 	ori     r0,r0,65535
    e15c:	7f 89 00 40 	cmplw   cr7,r9,r0
    e160:	41 9d 00 48 	bgt-    cr7,e1a8 <sctp_getsockopt_hmac_ident+0x2dc>
		over = (unsigned long)to + n - TASK_SIZE;
    e164:	81 21 00 2c 	lwz     r9,44(r1)
    e168:	80 01 00 34 	lwz     r0,52(r1)
    e16c:	7c 09 02 14 	add     r0,r9,r0
    e170:	3d 60 40 00 	lis     r11,16384
    e174:	7c 00 5a 14 	add     r0,r0,r11
    e178:	90 01 00 38 	stw     r0,56(r1)
		return __copy_tofrom_user(to, (__force void __user *)from,
    e17c:	81 21 00 34 	lwz     r9,52(r1)
    e180:	80 01 00 38 	lwz     r0,56(r1)
    e184:	7c 00 48 50 	subf    r0,r0,r9
    e188:	80 61 00 2c 	lwz     r3,44(r1)
    e18c:	80 81 00 30 	lwz     r4,48(r1)
    e190:	7c 05 03 78 	mr      r5,r0
    e194:	48 00 00 01 	bl      e194 <sctp_getsockopt_hmac_ident+0x2c8>
    e198:	7c 69 1b 78 	mr      r9,r3
    e19c:	80 01 00 38 	lwz     r0,56(r1)
    e1a0:	7c 09 02 14 	add     r0,r9,r0
    e1a4:	48 00 00 08 	b       e1ac <sctp_getsockopt_hmac_ident+0x2e0>
				n - over) + over;
	}
	return n;
    e1a8:	80 01 00 34 	lwz     r0,52(r1)
    e1ac:	2f 80 00 00 	cmpwi   cr7,r0,0
    e1b0:	41 9e 00 0c 	beq-    cr7,e1bc <sctp_getsockopt_hmac_ident+0x2f0>
		return -EFAULT;
    e1b4:	38 00 ff f2 	li      r0,-14
    e1b8:	48 00 00 08 	b       e1c0 <sctp_getsockopt_hmac_ident+0x2f4>
	return 0;
    e1bc:	38 00 00 00 	li      r0,0
}
    e1c0:	7c 03 03 78 	mr      r3,r0
    e1c4:	80 01 00 64 	lwz     r0,100(r1)
    e1c8:	7c 08 03 a6 	mtlr    r0
    e1cc:	83 e1 00 5c 	lwz     r31,92(r1)
    e1d0:	38 21 00 60 	addi    r1,r1,96
    e1d4:	4e 80 00 20 	blr

0000e1d8 <sctp_getsockopt_active_key>:

static int sctp_getsockopt_active_key(struct sock *sk, int len,
				    char __user *optval, int __user *optlen)
{
    e1d8:	94 21 ff 90 	stwu    r1,-112(r1)
    e1dc:	7c 08 02 a6 	mflr    r0
    e1e0:	90 01 00 74 	stw     r0,116(r1)
    e1e4:	93 e1 00 6c 	stw     r31,108(r1)
    e1e8:	90 61 00 58 	stw     r3,88(r1)
    e1ec:	90 81 00 5c 	stw     r4,92(r1)
    e1f0:	90 a1 00 60 	stw     r5,96(r1)
    e1f4:	90 c1 00 64 	stw     r6,100(r1)
	struct sctp_authkeyid val;
	struct sctp_association *asoc;

	if (!sctp_auth_enable)
    e1f8:	3c 00 00 00 	lis     r0,0
    e1fc:	30 00 00 00 	addic   r0,r0,0
    e200:	7c 09 03 78 	mr      r9,r0
    e204:	80 09 00 74 	lwz     r0,116(r9)
    e208:	2f 80 00 00 	cmpwi   cr7,r0,0
    e20c:	40 9e 00 0c 	bne-    cr7,e218 <sctp_getsockopt_active_key+0x40>
		return -EACCES;
    e210:	38 00 ff f3 	li      r0,-13
    e214:	48 00 03 5c 	b       e570 <sctp_getsockopt_active_key+0x398>

	if (len < sizeof(struct sctp_authkeyid))
    e218:	80 01 00 5c 	lwz     r0,92(r1)
    e21c:	2b 80 00 07 	cmplwi  cr7,r0,7
    e220:	41 9d 00 0c 	bgt-    cr7,e22c <sctp_getsockopt_active_key+0x54>
		return -EINVAL;
    e224:	38 00 ff ea 	li      r0,-22
    e228:	48 00 03 48 	b       e570 <sctp_getsockopt_active_key+0x398>
	if (copy_from_user(&val, optval, sizeof(struct sctp_authkeyid)))
    e22c:	38 01 00 44 	addi    r0,r1,68

	if (!sctp_auth_enable)
		return -EACCES;

	if (len < sizeof(struct sctp_authkeyid))
		return -EINVAL;
    e230:	90 01 00 14 	stw     r0,20(r1)
    e234:	80 01 00 60 	lwz     r0,96(r1)
    e238:	90 01 00 18 	stw     r0,24(r1)
    e23c:	38 00 00 08 	li      r0,8
    e240:	90 01 00 1c 	stw     r0,28(r1)
static inline unsigned long copy_from_user(void *to,
		const void __user *from, unsigned long n)
{
	unsigned long over;

	if (access_ok(VERIFY_READ, from, n))
    e244:	81 21 00 18 	lwz     r9,24(r1)
    e248:	7c 40 13 78 	mr      r0,r2
    e24c:	7c 0a 03 78 	mr      r10,r0
    e250:	80 0a 01 d4 	lwz     r0,468(r10)
    e254:	7f 89 00 40 	cmplw   cr7,r9,r0
    e258:	41 9d 00 3c 	bgt-    cr7,e294 <sctp_getsockopt_active_key+0xbc>
    e25c:	80 01 00 1c 	lwz     r0,28(r1)
    e260:	2f 80 00 00 	cmpwi   cr7,r0,0
    e264:	41 9e 00 28 	beq-    cr7,e28c <sctp_getsockopt_active_key+0xb4>
    e268:	80 01 00 1c 	lwz     r0,28(r1)
    e26c:	31 20 ff ff 	addic   r9,r0,-1
    e270:	7c 40 13 78 	mr      r0,r2
    e274:	7c 0a 03 78 	mr      r10,r0
    e278:	81 6a 01 d4 	lwz     r11,468(r10)
    e27c:	80 01 00 18 	lwz     r0,24(r1)
    e280:	7c 00 58 50 	subf    r0,r0,r11
    e284:	7f 89 00 40 	cmplw   cr7,r9,r0
    e288:	41 9d 00 0c 	bgt-    cr7,e294 <sctp_getsockopt_active_key+0xbc>
    e28c:	38 00 00 01 	li      r0,1
    e290:	48 00 00 08 	b       e298 <sctp_getsockopt_active_key+0xc0>
    e294:	38 00 00 00 	li      r0,0
    e298:	2f 80 00 00 	cmpwi   cr7,r0,0
    e29c:	41 9e 00 1c 	beq-    cr7,e2b8 <sctp_getsockopt_active_key+0xe0>
		return __copy_tofrom_user((__force void __user *)to, from, n);
    e2a0:	80 61 00 14 	lwz     r3,20(r1)
    e2a4:	80 81 00 18 	lwz     r4,24(r1)
    e2a8:	80 a1 00 1c 	lwz     r5,28(r1)
    e2ac:	48 00 00 01 	bl      e2ac <sctp_getsockopt_active_key+0xd4>
    e2b0:	7c 60 1b 78 	mr      r0,r3
    e2b4:	48 00 00 60 	b       e314 <sctp_getsockopt_active_key+0x13c>
	if ((unsigned long)from < TASK_SIZE) {
    e2b8:	81 21 00 18 	lwz     r9,24(r1)
    e2bc:	3c 00 bf ff 	lis     r0,-16385
    e2c0:	60 00 ff ff 	ori     r0,r0,65535
    e2c4:	7f 89 00 40 	cmplw   cr7,r9,r0
    e2c8:	41 9d 00 48 	bgt-    cr7,e310 <sctp_getsockopt_active_key+0x138>
		over = (unsigned long)from + n - TASK_SIZE;
    e2cc:	81 21 00 18 	lwz     r9,24(r1)
    e2d0:	80 01 00 1c 	lwz     r0,28(r1)
    e2d4:	7c 09 02 14 	add     r0,r9,r0
    e2d8:	3d 60 40 00 	lis     r11,16384
    e2dc:	7c 00 5a 14 	add     r0,r0,r11
    e2e0:	90 01 00 20 	stw     r0,32(r1)
		return __copy_tofrom_user((__force void __user *)to, from,
    e2e4:	81 21 00 1c 	lwz     r9,28(r1)
    e2e8:	80 01 00 20 	lwz     r0,32(r1)
    e2ec:	7c 00 48 50 	subf    r0,r0,r9
    e2f0:	80 61 00 14 	lwz     r3,20(r1)
    e2f4:	80 81 00 18 	lwz     r4,24(r1)
    e2f8:	7c 05 03 78 	mr      r5,r0
    e2fc:	48 00 00 01 	bl      e2fc <sctp_getsockopt_active_key+0x124>
    e300:	7c 69 1b 78 	mr      r9,r3
    e304:	80 01 00 20 	lwz     r0,32(r1)
    e308:	7c 09 02 14 	add     r0,r9,r0
    e30c:	48 00 00 08 	b       e314 <sctp_getsockopt_active_key+0x13c>
				n - over) + over;
	}
	return n;
    e310:	80 01 00 1c 	lwz     r0,28(r1)
	if (copy_from_user(&val, optval, sizeof(struct sctp_authkeyid)))
    e314:	2f 80 00 00 	cmpwi   cr7,r0,0
    e318:	41 9e 00 0c 	beq-    cr7,e324 <sctp_getsockopt_active_key+0x14c>
		return -EFAULT;
    e31c:	38 00 ff f2 	li      r0,-14
    e320:	48 00 02 50 	b       e570 <sctp_getsockopt_active_key+0x398>

	asoc = sctp_id2assoc(sk, val.scact_assoc_id);
    e324:	80 01 00 44 	lwz     r0,68(r1)
    e328:	80 61 00 58 	lwz     r3,88(r1)
    e32c:	7c 04 03 78 	mr      r4,r0
    e330:	48 00 00 01 	bl      e330 <sctp_getsockopt_active_key+0x158>
    e334:	90 61 00 0c 	stw     r3,12(r1)
	if (!asoc && val.scact_assoc_id && sctp_style(sk, UDP))
    e338:	80 01 00 0c 	lwz     r0,12(r1)
    e33c:	2f 80 00 00 	cmpwi   cr7,r0,0
    e340:	40 9e 00 54 	bne-    cr7,e394 <sctp_getsockopt_active_key+0x1bc>
    e344:	80 01 00 44 	lwz     r0,68(r1)
    e348:	2f 80 00 00 	cmpwi   cr7,r0,0
    e34c:	41 9e 00 48 	beq-    cr7,e394 <sctp_getsockopt_active_key+0x1bc>
    e350:	80 01 00 58 	lwz     r0,88(r1)
    e354:	90 01 00 24 	stw     r0,36(r1)
    e358:	38 00 00 00 	li      r0,0
    e35c:	90 01 00 28 	stw     r0,40(r1)
    e360:	80 01 00 24 	lwz     r0,36(r1)
    e364:	90 01 00 2c 	stw     r0,44(r1)
    e368:	80 01 00 2c 	lwz     r0,44(r1)
    e36c:	7c 09 03 78 	mr      r9,r0
    e370:	80 09 01 c8 	lwz     r0,456(r9)
    e374:	81 21 00 28 	lwz     r9,40(r1)
    e378:	7f 89 00 00 	cmpw    cr7,r9,r0
    e37c:	7c 00 00 26 	mfcr    r0
    e380:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
    e384:	2f 80 00 00 	cmpwi   cr7,r0,0
    e388:	41 9e 00 0c 	beq-    cr7,e394 <sctp_getsockopt_active_key+0x1bc>
		return -EINVAL;
    e38c:	38 00 ff ea 	li      r0,-22
    e390:	48 00 01 e0 	b       e570 <sctp_getsockopt_active_key+0x398>

	if (asoc)
    e394:	80 01 00 0c 	lwz     r0,12(r1)
    e398:	2f 80 00 00 	cmpwi   cr7,r0,0
    e39c:	41 9e 00 1c 	beq-    cr7,e3b8 <sctp_getsockopt_active_key+0x1e0>
		val.scact_keynumber = asoc->active_key_id;
    e3a0:	80 01 00 0c 	lwz     r0,12(r1)
    e3a4:	7c 0a 03 78 	mr      r10,r0
    e3a8:	a0 0a 04 3e 	lhz     r0,1086(r10)
    e3ac:	54 00 04 3e 	clrlwi  r0,r0,16
    e3b0:	b0 01 00 48 	sth     r0,72(r1)
    e3b4:	48 00 00 28 	b       e3dc <sctp_getsockopt_active_key+0x204>
    e3b8:	80 01 00 58 	lwz     r0,88(r1)
    e3bc:	90 01 00 30 	stw     r0,48(r1)
    e3c0:	80 01 00 30 	lwz     r0,48(r1)
	else
		val.scact_keynumber = sctp_sk(sk)->ep->active_key_id;
    e3c4:	7c 0b 03 78 	mr      r11,r0
    e3c8:	80 0b 01 d4 	lwz     r0,468(r11)
    e3cc:	7c 09 03 78 	mr      r9,r0
    e3d0:	a0 09 00 c0 	lhz     r0,192(r9)
    e3d4:	54 00 04 3e 	clrlwi  r0,r0,16
    e3d8:	b0 01 00 48 	sth     r0,72(r1)

	len = sizeof(struct sctp_authkeyid);
    e3dc:	38 00 00 08 	li      r0,8
    e3e0:	90 01 00 5c 	stw     r0,92(r1)
	if (put_user(len, optlen))
    e3e4:	38 00 ff f2 	li      r0,-14
    e3e8:	90 01 00 08 	stw     r0,8(r1)
    e3ec:	80 01 00 64 	lwz     r0,100(r1)
    e3f0:	90 01 00 10 	stw     r0,16(r1)
    e3f4:	81 21 00 10 	lwz     r9,16(r1)
    e3f8:	7c 40 13 78 	mr      r0,r2
    e3fc:	7c 0a 03 78 	mr      r10,r0
    e400:	80 0a 01 d4 	lwz     r0,468(r10)
    e404:	7f 89 00 40 	cmplw   cr7,r9,r0
    e408:	41 9d 00 28 	bgt-    cr7,e430 <sctp_getsockopt_active_key+0x258>
    e40c:	7c 40 13 78 	mr      r0,r2
    e410:	7c 0b 03 78 	mr      r11,r0
    e414:	81 2b 01 d4 	lwz     r9,468(r11)
    e418:	80 01 00 10 	lwz     r0,16(r1)
    e41c:	7c 00 48 50 	subf    r0,r0,r9
    e420:	2b 80 00 02 	cmplwi  cr7,r0,2
    e424:	40 9d 00 0c 	ble-    cr7,e430 <sctp_getsockopt_active_key+0x258>
    e428:	38 00 00 01 	li      r0,1
    e42c:	48 00 00 08 	b       e434 <sctp_getsockopt_active_key+0x25c>
    e430:	38 00 00 00 	li      r0,0
    e434:	2f 80 00 00 	cmpwi   cr7,r0,0
    e438:	41 9e 00 28 	beq-    cr7,e460 <sctp_getsockopt_active_key+0x288>
    e43c:	38 00 00 00 	li      r0,0
    e440:	90 01 00 08 	stw     r0,8(r1)
    e444:	80 01 00 5c 	lwz     r0,92(r1)
    e448:	81 21 00 10 	lwz     r9,16(r1)
    e44c:	81 61 00 08 	lwz     r11,8(r1)
    e450:	7d 7f 5b 78 	mr      r31,r11
    e454:	90 09 00 00 	stw     r0,0(r9)
    e458:	93 e1 00 08 	stw     r31,8(r1)
    e45c:	60 00 00 00 	nop
    e460:	80 01 00 08 	lwz     r0,8(r1)
    e464:	2f 80 00 00 	cmpwi   cr7,r0,0
    e468:	41 9e 00 0c 	beq-    cr7,e474 <sctp_getsockopt_active_key+0x29c>
		return -EFAULT;
    e46c:	38 00 ff f2 	li      r0,-14
    e470:	48 00 01 00 	b       e570 <sctp_getsockopt_active_key+0x398>
	if (copy_to_user(optval, &val, len))
    e474:	80 01 00 5c 	lwz     r0,92(r1)
    e478:	81 21 00 60 	lwz     r9,96(r1)
    e47c:	91 21 00 34 	stw     r9,52(r1)
    e480:	39 21 00 44 	addi    r9,r1,68
    e484:	91 21 00 38 	stw     r9,56(r1)
    e488:	90 01 00 3c 	stw     r0,60(r1)
static inline unsigned long copy_to_user(void __user *to,
		const void *from, unsigned long n)
{
	unsigned long over;

	if (access_ok(VERIFY_WRITE, to, n))
    e48c:	81 21 00 34 	lwz     r9,52(r1)
    e490:	7c 40 13 78 	mr      r0,r2
    e494:	7c 0a 03 78 	mr      r10,r0
    e498:	80 0a 01 d4 	lwz     r0,468(r10)
    e49c:	7f 89 00 40 	cmplw   cr7,r9,r0
    e4a0:	41 9d 00 3c 	bgt-    cr7,e4dc <sctp_getsockopt_active_key+0x304>
    e4a4:	80 01 00 3c 	lwz     r0,60(r1)
    e4a8:	2f 80 00 00 	cmpwi   cr7,r0,0
    e4ac:	41 9e 00 28 	beq-    cr7,e4d4 <sctp_getsockopt_active_key+0x2fc>
    e4b0:	80 01 00 3c 	lwz     r0,60(r1)
    e4b4:	31 20 ff ff 	addic   r9,r0,-1
    e4b8:	7c 40 13 78 	mr      r0,r2
    e4bc:	7c 0a 03 78 	mr      r10,r0
    e4c0:	81 6a 01 d4 	lwz     r11,468(r10)
    e4c4:	80 01 00 34 	lwz     r0,52(r1)
    e4c8:	7c 00 58 50 	subf    r0,r0,r11
    e4cc:	7f 89 00 40 	cmplw   cr7,r9,r0
    e4d0:	41 9d 00 0c 	bgt-    cr7,e4dc <sctp_getsockopt_active_key+0x304>
    e4d4:	38 00 00 01 	li      r0,1
    e4d8:	48 00 00 08 	b       e4e0 <sctp_getsockopt_active_key+0x308>
    e4dc:	38 00 00 00 	li      r0,0
    e4e0:	2f 80 00 00 	cmpwi   cr7,r0,0
    e4e4:	41 9e 00 1c 	beq-    cr7,e500 <sctp_getsockopt_active_key+0x328>
		return __copy_tofrom_user(to, (__force void __user *)from, n);
    e4e8:	80 61 00 34 	lwz     r3,52(r1)
    e4ec:	80 81 00 38 	lwz     r4,56(r1)
    e4f0:	80 a1 00 3c 	lwz     r5,60(r1)
    e4f4:	48 00 00 01 	bl      e4f4 <sctp_getsockopt_active_key+0x31c>
    e4f8:	7c 60 1b 78 	mr      r0,r3
    e4fc:	48 00 00 60 	b       e55c <sctp_getsockopt_active_key+0x384>
	if ((unsigned long)to < TASK_SIZE) {
    e500:	81 21 00 34 	lwz     r9,52(r1)
    e504:	3c 00 bf ff 	lis     r0,-16385
    e508:	60 00 ff ff 	ori     r0,r0,65535
    e50c:	7f 89 00 40 	cmplw   cr7,r9,r0
    e510:	41 9d 00 48 	bgt-    cr7,e558 <sctp_getsockopt_active_key+0x380>
		over = (unsigned long)to + n - TASK_SIZE;
    e514:	81 21 00 34 	lwz     r9,52(r1)
    e518:	80 01 00 3c 	lwz     r0,60(r1)
    e51c:	7c 09 02 14 	add     r0,r9,r0
    e520:	3d 60 40 00 	lis     r11,16384
    e524:	7c 00 5a 14 	add     r0,r0,r11
    e528:	90 01 00 40 	stw     r0,64(r1)
		return __copy_tofrom_user(to, (__force void __user *)from,
    e52c:	81 21 00 3c 	lwz     r9,60(r1)
    e530:	80 01 00 40 	lwz     r0,64(r1)
    e534:	7c 00 48 50 	subf    r0,r0,r9
    e538:	80 61 00 34 	lwz     r3,52(r1)
    e53c:	80 81 00 38 	lwz     r4,56(r1)
    e540:	7c 05 03 78 	mr      r5,r0
    e544:	48 00 00 01 	bl      e544 <sctp_getsockopt_active_key+0x36c>
    e548:	7c 69 1b 78 	mr      r9,r3
    e54c:	80 01 00 40 	lwz     r0,64(r1)
    e550:	7c 09 02 14 	add     r0,r9,r0
    e554:	48 00 00 08 	b       e55c <sctp_getsockopt_active_key+0x384>
				n - over) + over;
	}
	return n;
    e558:	80 01 00 3c 	lwz     r0,60(r1)
    e55c:	2f 80 00 00 	cmpwi   cr7,r0,0
    e560:	41 9e 00 0c 	beq-    cr7,e56c <sctp_getsockopt_active_key+0x394>
		return -EFAULT;
    e564:	38 00 ff f2 	li      r0,-14
    e568:	48 00 00 08 	b       e570 <sctp_getsockopt_active_key+0x398>

	return 0;
    e56c:	38 00 00 00 	li      r0,0
}
    e570:	7c 03 03 78 	mr      r3,r0
    e574:	80 01 00 74 	lwz     r0,116(r1)
    e578:	7c 08 03 a6 	mtlr    r0
    e57c:	83 e1 00 6c 	lwz     r31,108(r1)
    e580:	38 21 00 70 	addi    r1,r1,112
    e584:	4e 80 00 20 	blr

0000e588 <sctp_getsockopt_peer_auth_chunks>:

static int sctp_getsockopt_peer_auth_chunks(struct sock *sk, int len,
				    char __user *optval, int __user *optlen)
{
    e588:	94 21 ff 90 	stwu    r1,-112(r1)
    e58c:	7c 08 02 a6 	mflr    r0
    e590:	90 01 00 74 	stw     r0,116(r1)
    e594:	93 e1 00 6c 	stw     r31,108(r1)
    e598:	90 61 00 58 	stw     r3,88(r1)
    e59c:	90 81 00 5c 	stw     r4,92(r1)
    e5a0:	90 a1 00 60 	stw     r5,96(r1)
    e5a4:	90 c1 00 64 	stw     r6,100(r1)
	struct sctp_authchunks __user *p = (void __user *)optval;
    e5a8:	80 01 00 60 	lwz     r0,96(r1)
    e5ac:	90 01 00 14 	stw     r0,20(r1)
	struct sctp_authchunks val;
	struct sctp_association *asoc;
	struct sctp_chunks_param *ch;
	u32    num_chunks = 0;
    e5b0:	38 00 00 00 	li      r0,0
    e5b4:	90 01 00 08 	stw     r0,8(r1)
	char __user *to;

	if (!sctp_auth_enable)
    e5b8:	3c 00 00 00 	lis     r0,0
    e5bc:	30 00 00 00 	addic   r0,r0,0
    e5c0:	7c 09 03 78 	mr      r9,r0
    e5c4:	80 09 00 74 	lwz     r0,116(r9)
    e5c8:	2f 80 00 00 	cmpwi   cr7,r0,0
    e5cc:	40 9e 00 0c 	bne-    cr7,e5d8 <sctp_getsockopt_peer_auth_chunks+0x50>
		return -EACCES;
    e5d0:	38 00 ff f3 	li      r0,-13
    e5d4:	48 00 03 c4 	b       e998 <sctp_getsockopt_peer_auth_chunks+0x410>

	if (len < sizeof(struct sctp_authchunks))
    e5d8:	80 01 00 5c 	lwz     r0,92(r1)
    e5dc:	2b 80 00 07 	cmplwi  cr7,r0,7
    e5e0:	41 9d 00 0c 	bgt-    cr7,e5ec <sctp_getsockopt_peer_auth_chunks+0x64>
		return -EINVAL;
    e5e4:	38 00 ff ea 	li      r0,-22
    e5e8:	48 00 03 b0 	b       e998 <sctp_getsockopt_peer_auth_chunks+0x410>

	if (copy_from_user(&val, optval, sizeof(struct sctp_authchunks)))
    e5ec:	38 01 00 4c 	addi    r0,r1,76

	if (!sctp_auth_enable)
		return -EACCES;

	if (len < sizeof(struct sctp_authchunks))
		return -EINVAL;
    e5f0:	90 01 00 2c 	stw     r0,44(r1)
    e5f4:	80 01 00 60 	lwz     r0,96(r1)
    e5f8:	90 01 00 30 	stw     r0,48(r1)
    e5fc:	38 00 00 08 	li      r0,8
    e600:	90 01 00 34 	stw     r0,52(r1)
static inline unsigned long copy_from_user(void *to,
		const void __user *from, unsigned long n)
{
	unsigned long over;

	if (access_ok(VERIFY_READ, from, n))
    e604:	81 21 00 30 	lwz     r9,48(r1)
    e608:	7c 40 13 78 	mr      r0,r2
    e60c:	7c 0a 03 78 	mr      r10,r0
    e610:	80 0a 01 d4 	lwz     r0,468(r10)
    e614:	7f 89 00 40 	cmplw   cr7,r9,r0
    e618:	41 9d 00 3c 	bgt-    cr7,e654 <sctp_getsockopt_peer_auth_chunks+0xcc>
    e61c:	80 01 00 34 	lwz     r0,52(r1)
    e620:	2f 80 00 00 	cmpwi   cr7,r0,0
    e624:	41 9e 00 28 	beq-    cr7,e64c <sctp_getsockopt_peer_auth_chunks+0xc4>
    e628:	80 01 00 34 	lwz     r0,52(r1)
    e62c:	31 20 ff ff 	addic   r9,r0,-1
    e630:	7c 40 13 78 	mr      r0,r2
    e634:	7c 0a 03 78 	mr      r10,r0
    e638:	81 6a 01 d4 	lwz     r11,468(r10)
    e63c:	80 01 00 30 	lwz     r0,48(r1)
    e640:	7c 00 58 50 	subf    r0,r0,r11
    e644:	7f 89 00 40 	cmplw   cr7,r9,r0
    e648:	41 9d 00 0c 	bgt-    cr7,e654 <sctp_getsockopt_peer_auth_chunks+0xcc>
    e64c:	38 00 00 01 	li      r0,1
    e650:	48 00 00 08 	b       e658 <sctp_getsockopt_peer_auth_chunks+0xd0>
    e654:	38 00 00 00 	li      r0,0
    e658:	2f 80 00 00 	cmpwi   cr7,r0,0
    e65c:	41 9e 00 1c 	beq-    cr7,e678 <sctp_getsockopt_peer_auth_chunks+0xf0>
		return __copy_tofrom_user((__force void __user *)to, from, n);
    e660:	80 61 00 2c 	lwz     r3,44(r1)
    e664:	80 81 00 30 	lwz     r4,48(r1)
    e668:	80 a1 00 34 	lwz     r5,52(r1)
    e66c:	48 00 00 01 	bl      e66c <sctp_getsockopt_peer_auth_chunks+0xe4>
    e670:	7c 60 1b 78 	mr      r0,r3
    e674:	48 00 00 60 	b       e6d4 <sctp_getsockopt_peer_auth_chunks+0x14c>
	if ((unsigned long)from < TASK_SIZE) {
    e678:	81 21 00 30 	lwz     r9,48(r1)
    e67c:	3c 00 bf ff 	lis     r0,-16385
    e680:	60 00 ff ff 	ori     r0,r0,65535
    e684:	7f 89 00 40 	cmplw   cr7,r9,r0
    e688:	41 9d 00 48 	bgt-    cr7,e6d0 <sctp_getsockopt_peer_auth_chunks+0x148>
		over = (unsigned long)from + n - TASK_SIZE;
    e68c:	81 21 00 30 	lwz     r9,48(r1)
    e690:	80 01 00 34 	lwz     r0,52(r1)
    e694:	7c 09 02 14 	add     r0,r9,r0
    e698:	3d 60 40 00 	lis     r11,16384
    e69c:	7c 00 5a 14 	add     r0,r0,r11
    e6a0:	90 01 00 38 	stw     r0,56(r1)
		return __copy_tofrom_user((__force void __user *)to, from,
    e6a4:	81 21 00 34 	lwz     r9,52(r1)
    e6a8:	80 01 00 38 	lwz     r0,56(r1)
    e6ac:	7c 00 48 50 	subf    r0,r0,r9
    e6b0:	80 61 00 2c 	lwz     r3,44(r1)
    e6b4:	80 81 00 30 	lwz     r4,48(r1)
    e6b8:	7c 05 03 78 	mr      r5,r0
    e6bc:	48 00 00 01 	bl      e6bc <sctp_getsockopt_peer_auth_chunks+0x134>
    e6c0:	7c 69 1b 78 	mr      r9,r3
    e6c4:	80 01 00 38 	lwz     r0,56(r1)
    e6c8:	7c 09 02 14 	add     r0,r9,r0
    e6cc:	48 00 00 08 	b       e6d4 <sctp_getsockopt_peer_auth_chunks+0x14c>
				n - over) + over;
	}
	return n;
    e6d0:	80 01 00 34 	lwz     r0,52(r1)

	if (copy_from_user(&val, optval, sizeof(struct sctp_authchunks)))
    e6d4:	2f 80 00 00 	cmpwi   cr7,r0,0
    e6d8:	41 9e 00 0c 	beq-    cr7,e6e4 <sctp_getsockopt_peer_auth_chunks+0x15c>
		return -EFAULT;
    e6dc:	38 00 ff f2 	li      r0,-14
    e6e0:	48 00 02 b8 	b       e998 <sctp_getsockopt_peer_auth_chunks+0x410>

	to = p->gauth_chunks;
    e6e4:	80 01 00 14 	lwz     r0,20(r1)
    e6e8:	30 00 00 08 	addic   r0,r0,8
    e6ec:	90 01 00 18 	stw     r0,24(r1)
	asoc = sctp_id2assoc(sk, val.gauth_assoc_id);
    e6f0:	80 01 00 4c 	lwz     r0,76(r1)
    e6f4:	80 61 00 58 	lwz     r3,88(r1)
    e6f8:	7c 04 03 78 	mr      r4,r0
    e6fc:	48 00 00 01 	bl      e6fc <sctp_getsockopt_peer_auth_chunks+0x174>
    e700:	90 61 00 1c 	stw     r3,28(r1)
	if (!asoc)
    e704:	80 01 00 1c 	lwz     r0,28(r1)
    e708:	2f 80 00 00 	cmpwi   cr7,r0,0
    e70c:	40 9e 00 0c 	bne-    cr7,e718 <sctp_getsockopt_peer_auth_chunks+0x190>
		return -EINVAL;
    e710:	38 00 ff ea 	li      r0,-22
    e714:	48 00 02 84 	b       e998 <sctp_getsockopt_peer_auth_chunks+0x410>

	ch = asoc->peer.peer_chunks;
    e718:	80 01 00 1c 	lwz     r0,28(r1)
    e71c:	7c 09 03 78 	mr      r9,r0
    e720:	80 09 01 b0 	lwz     r0,432(r9)
    e724:	90 01 00 20 	stw     r0,32(r1)
	if (!ch)
    e728:	80 01 00 20 	lwz     r0,32(r1)
    e72c:	2f 80 00 00 	cmpwi   cr7,r0,0
    e730:	41 9e 01 30 	beq-    cr7,e860 <sctp_getsockopt_peer_auth_chunks+0x2d8>
		goto num;

	/* See if the user provided enough room for all the data */
	num_chunks = ntohs(ch->param_hdr.length) - sizeof(sctp_paramhdr_t);
    e734:	80 01 00 20 	lwz     r0,32(r1)
    e738:	7c 0a 03 78 	mr      r10,r0
    e73c:	a0 0a 00 02 	lhz     r0,2(r10)
    e740:	54 00 04 3e 	clrlwi  r0,r0,16
    e744:	30 00 ff fc 	addic   r0,r0,-4
    e748:	90 01 00 08 	stw     r0,8(r1)
	if (len < num_chunks)
    e74c:	81 21 00 5c 	lwz     r9,92(r1)
    e750:	80 01 00 08 	lwz     r0,8(r1)
    e754:	7f 89 00 40 	cmplw   cr7,r9,r0
    e758:	40 9c 00 0c 	bge-    cr7,e764 <sctp_getsockopt_peer_auth_chunks+0x1dc>
		return -EINVAL;
    e75c:	38 00 ff ea 	li      r0,-22
    e760:	48 00 02 38 	b       e998 <sctp_getsockopt_peer_auth_chunks+0x410>

	if (copy_to_user(to, ch->chunks, num_chunks))
    e764:	80 01 00 20 	lwz     r0,32(r1)
    e768:	30 00 00 04 	addic   r0,r0,4
    e76c:	81 21 00 18 	lwz     r9,24(r1)
    e770:	91 21 00 3c 	stw     r9,60(r1)
    e774:	90 01 00 40 	stw     r0,64(r1)
    e778:	80 01 00 08 	lwz     r0,8(r1)
    e77c:	90 01 00 44 	stw     r0,68(r1)
static inline unsigned long copy_to_user(void __user *to,
		const void *from, unsigned long n)
{
	unsigned long over;

	if (access_ok(VERIFY_WRITE, to, n))
    e780:	81 21 00 3c 	lwz     r9,60(r1)
    e784:	7c 40 13 78 	mr      r0,r2
    e788:	7c 0b 03 78 	mr      r11,r0
    e78c:	80 0b 01 d4 	lwz     r0,468(r11)
    e790:	7f 89 00 40 	cmplw   cr7,r9,r0
    e794:	41 9d 00 3c 	bgt-    cr7,e7d0 <sctp_getsockopt_peer_auth_chunks+0x248>
    e798:	80 01 00 44 	lwz     r0,68(r1)
    e79c:	2f 80 00 00 	cmpwi   cr7,r0,0
    e7a0:	41 9e 00 28 	beq-    cr7,e7c8 <sctp_getsockopt_peer_auth_chunks+0x240>
    e7a4:	80 01 00 44 	lwz     r0,68(r1)
    e7a8:	31 20 ff ff 	addic   r9,r0,-1
    e7ac:	7c 40 13 78 	mr      r0,r2
    e7b0:	7c 0a 03 78 	mr      r10,r0
    e7b4:	81 6a 01 d4 	lwz     r11,468(r10)
    e7b8:	80 01 00 3c 	lwz     r0,60(r1)
    e7bc:	7c 00 58 50 	subf    r0,r0,r11
    e7c0:	7f 89 00 40 	cmplw   cr7,r9,r0
    e7c4:	41 9d 00 0c 	bgt-    cr7,e7d0 <sctp_getsockopt_peer_auth_chunks+0x248>
    e7c8:	38 00 00 01 	li      r0,1
    e7cc:	48 00 00 08 	b       e7d4 <sctp_getsockopt_peer_auth_chunks+0x24c>
    e7d0:	38 00 00 00 	li      r0,0
    e7d4:	2f 80 00 00 	cmpwi   cr7,r0,0
    e7d8:	41 9e 00 1c 	beq-    cr7,e7f4 <sctp_getsockopt_peer_auth_chunks+0x26c>
		return __copy_tofrom_user(to, (__force void __user *)from, n);
    e7dc:	80 61 00 3c 	lwz     r3,60(r1)
    e7e0:	80 81 00 40 	lwz     r4,64(r1)
    e7e4:	80 a1 00 44 	lwz     r5,68(r1)
    e7e8:	48 00 00 01 	bl      e7e8 <sctp_getsockopt_peer_auth_chunks+0x260>
    e7ec:	7c 60 1b 78 	mr      r0,r3
    e7f0:	48 00 00 60 	b       e850 <sctp_getsockopt_peer_auth_chunks+0x2c8>
	if ((unsigned long)to < TASK_SIZE) {
    e7f4:	81 21 00 3c 	lwz     r9,60(r1)
    e7f8:	3c 00 bf ff 	lis     r0,-16385
    e7fc:	60 00 ff ff 	ori     r0,r0,65535
    e800:	7f 89 00 40 	cmplw   cr7,r9,r0
    e804:	41 9d 00 48 	bgt-    cr7,e84c <sctp_getsockopt_peer_auth_chunks+0x2c4>
		over = (unsigned long)to + n - TASK_SIZE;
    e808:	81 21 00 3c 	lwz     r9,60(r1)
    e80c:	80 01 00 44 	lwz     r0,68(r1)
    e810:	7c 09 02 14 	add     r0,r9,r0
    e814:	3d 60 40 00 	lis     r11,16384
    e818:	7c 00 5a 14 	add     r0,r0,r11
    e81c:	90 01 00 48 	stw     r0,72(r1)
		return __copy_tofrom_user(to, (__force void __user *)from,
    e820:	81 21 00 44 	lwz     r9,68(r1)
    e824:	80 01 00 48 	lwz     r0,72(r1)
    e828:	7c 00 48 50 	subf    r0,r0,r9
    e82c:	80 61 00 3c 	lwz     r3,60(r1)
    e830:	80 81 00 40 	lwz     r4,64(r1)
    e834:	7c 05 03 78 	mr      r5,r0
    e838:	48 00 00 01 	bl      e838 <sctp_getsockopt_peer_auth_chunks+0x2b0>
    e83c:	7c 69 1b 78 	mr      r9,r3
    e840:	80 01 00 48 	lwz     r0,72(r1)
    e844:	7c 09 02 14 	add     r0,r9,r0
    e848:	48 00 00 08 	b       e850 <sctp_getsockopt_peer_auth_chunks+0x2c8>
				n - over) + over;
	}
	return n;
    e84c:	80 01 00 44 	lwz     r0,68(r1)
    e850:	2f 80 00 00 	cmpwi   cr7,r0,0
    e854:	41 9e 00 10 	beq-    cr7,e864 <sctp_getsockopt_peer_auth_chunks+0x2dc>
		return -EFAULT;
    e858:	38 00 ff f2 	li      r0,-14
    e85c:	48 00 01 3c 	b       e998 <sctp_getsockopt_peer_auth_chunks+0x410>
	if (!asoc)
		return -EINVAL;

	ch = asoc->peer.peer_chunks;
	if (!ch)
		goto num;
    e860:	60 00 00 00 	nop
		return -EINVAL;

	if (copy_to_user(to, ch->chunks, num_chunks))
		return -EFAULT;
num:
	len = sizeof(struct sctp_authchunks) + num_chunks;
    e864:	80 01 00 08 	lwz     r0,8(r1)
    e868:	30 00 00 08 	addic   r0,r0,8
    e86c:	90 01 00 5c 	stw     r0,92(r1)
	if (put_user(len, optlen)) return -EFAULT;
    e870:	38 00 ff f2 	li      r0,-14
    e874:	90 01 00 0c 	stw     r0,12(r1)
    e878:	80 01 00 64 	lwz     r0,100(r1)
    e87c:	90 01 00 24 	stw     r0,36(r1)
    e880:	81 21 00 24 	lwz     r9,36(r1)
    e884:	7c 40 13 78 	mr      r0,r2
    e888:	7c 0a 03 78 	mr      r10,r0
    e88c:	80 0a 01 d4 	lwz     r0,468(r10)
    e890:	7f 89 00 40 	cmplw   cr7,r9,r0
    e894:	41 9d 00 28 	bgt-    cr7,e8bc <sctp_getsockopt_peer_auth_chunks+0x334>
    e898:	7c 40 13 78 	mr      r0,r2
    e89c:	7c 0b 03 78 	mr      r11,r0
    e8a0:	81 2b 01 d4 	lwz     r9,468(r11)
    e8a4:	80 01 00 24 	lwz     r0,36(r1)
    e8a8:	7c 00 48 50 	subf    r0,r0,r9
    e8ac:	2b 80 00 02 	cmplwi  cr7,r0,2
    e8b0:	40 9d 00 0c 	ble-    cr7,e8bc <sctp_getsockopt_peer_auth_chunks+0x334>
    e8b4:	38 00 00 01 	li      r0,1
    e8b8:	48 00 00 08 	b       e8c0 <sctp_getsockopt_peer_auth_chunks+0x338>
    e8bc:	38 00 00 00 	li      r0,0
    e8c0:	2f 80 00 00 	cmpwi   cr7,r0,0
    e8c4:	41 9e 00 28 	beq-    cr7,e8ec <sctp_getsockopt_peer_auth_chunks+0x364>
    e8c8:	38 00 00 00 	li      r0,0
    e8cc:	90 01 00 0c 	stw     r0,12(r1)
    e8d0:	80 01 00 5c 	lwz     r0,92(r1)
    e8d4:	81 21 00 24 	lwz     r9,36(r1)
    e8d8:	81 61 00 0c 	lwz     r11,12(r1)
    e8dc:	7d 7f 5b 78 	mr      r31,r11
    e8e0:	90 09 00 00 	stw     r0,0(r9)
    e8e4:	93 e1 00 0c 	stw     r31,12(r1)
    e8e8:	60 00 00 00 	nop
    e8ec:	80 01 00 0c 	lwz     r0,12(r1)
    e8f0:	2f 80 00 00 	cmpwi   cr7,r0,0
    e8f4:	41 9e 00 0c 	beq-    cr7,e900 <sctp_getsockopt_peer_auth_chunks+0x378>
    e8f8:	38 00 ff f2 	li      r0,-14
    e8fc:	48 00 00 9c 	b       e998 <sctp_getsockopt_peer_auth_chunks+0x410>
	if (put_user(num_chunks, &p->gauth_number_of_chunks))
    e900:	38 00 ff f2 	li      r0,-14
    e904:	90 01 00 10 	stw     r0,16(r1)
    e908:	80 01 00 14 	lwz     r0,20(r1)
    e90c:	30 00 00 04 	addic   r0,r0,4
    e910:	90 01 00 28 	stw     r0,40(r1)
    e914:	81 21 00 28 	lwz     r9,40(r1)
    e918:	7c 40 13 78 	mr      r0,r2
    e91c:	7c 0a 03 78 	mr      r10,r0
    e920:	80 0a 01 d4 	lwz     r0,468(r10)
    e924:	7f 89 00 40 	cmplw   cr7,r9,r0
    e928:	41 9d 00 28 	bgt-    cr7,e950 <sctp_getsockopt_peer_auth_chunks+0x3c8>
    e92c:	7c 40 13 78 	mr      r0,r2
    e930:	7c 0b 03 78 	mr      r11,r0
    e934:	81 2b 01 d4 	lwz     r9,468(r11)
    e938:	80 01 00 28 	lwz     r0,40(r1)
    e93c:	7c 00 48 50 	subf    r0,r0,r9
    e940:	2b 80 00 02 	cmplwi  cr7,r0,2
    e944:	40 9d 00 0c 	ble-    cr7,e950 <sctp_getsockopt_peer_auth_chunks+0x3c8>
    e948:	38 00 00 01 	li      r0,1
    e94c:	48 00 00 08 	b       e954 <sctp_getsockopt_peer_auth_chunks+0x3cc>
    e950:	38 00 00 00 	li      r0,0
    e954:	2f 80 00 00 	cmpwi   cr7,r0,0
    e958:	41 9e 00 28 	beq-    cr7,e980 <sctp_getsockopt_peer_auth_chunks+0x3f8>
    e95c:	38 00 00 00 	li      r0,0
    e960:	90 01 00 10 	stw     r0,16(r1)
    e964:	80 01 00 08 	lwz     r0,8(r1)
    e968:	81 21 00 28 	lwz     r9,40(r1)
    e96c:	81 61 00 10 	lwz     r11,16(r1)
    e970:	7d 7f 5b 78 	mr      r31,r11
    e974:	90 09 00 00 	stw     r0,0(r9)
    e978:	93 e1 00 10 	stw     r31,16(r1)
    e97c:	60 00 00 00 	nop
    e980:	80 01 00 10 	lwz     r0,16(r1)
    e984:	2f 80 00 00 	cmpwi   cr7,r0,0
    e988:	41 9e 00 0c 	beq-    cr7,e994 <sctp_getsockopt_peer_auth_chunks+0x40c>
		return -EFAULT;
    e98c:	38 00 ff f2 	li      r0,-14
    e990:	48 00 00 08 	b       e998 <sctp_getsockopt_peer_auth_chunks+0x410>
	return 0;
    e994:	38 00 00 00 	li      r0,0
}
    e998:	7c 03 03 78 	mr      r3,r0
    e99c:	80 01 00 74 	lwz     r0,116(r1)
    e9a0:	7c 08 03 a6 	mtlr    r0
    e9a4:	83 e1 00 6c 	lwz     r31,108(r1)
    e9a8:	38 21 00 70 	addi    r1,r1,112
    e9ac:	4e 80 00 20 	blr

0000e9b0 <sctp_getsockopt_local_auth_chunks>:

static int sctp_getsockopt_local_auth_chunks(struct sock *sk, int len,
				    char __user *optval, int __user *optlen)
{
    e9b0:	94 21 ff 80 	stwu    r1,-128(r1)
    e9b4:	7c 08 02 a6 	mflr    r0
    e9b8:	90 01 00 84 	stw     r0,132(r1)
    e9bc:	93 e1 00 7c 	stw     r31,124(r1)
    e9c0:	90 61 00 68 	stw     r3,104(r1)
    e9c4:	90 81 00 6c 	stw     r4,108(r1)
    e9c8:	90 a1 00 70 	stw     r5,112(r1)
    e9cc:	90 c1 00 74 	stw     r6,116(r1)
	struct sctp_authchunks __user *p = (void __user *)optval;
    e9d0:	80 01 00 70 	lwz     r0,112(r1)
    e9d4:	90 01 00 18 	stw     r0,24(r1)
	struct sctp_authchunks val;
	struct sctp_association *asoc;
	struct sctp_chunks_param *ch;
	u32    num_chunks = 0;
    e9d8:	38 00 00 00 	li      r0,0
    e9dc:	90 01 00 0c 	stw     r0,12(r1)
	char __user *to;

	if (!sctp_auth_enable)
    e9e0:	3c 00 00 00 	lis     r0,0
    e9e4:	30 00 00 00 	addic   r0,r0,0
    e9e8:	7c 09 03 78 	mr      r9,r0
    e9ec:	80 09 00 74 	lwz     r0,116(r9)
    e9f0:	2f 80 00 00 	cmpwi   cr7,r0,0
    e9f4:	40 9e 00 0c 	bne-    cr7,ea00 <sctp_getsockopt_local_auth_chunks+0x50>
		return -EACCES;
    e9f8:	38 00 ff f3 	li      r0,-13
    e9fc:	48 00 04 3c 	b       ee38 <sctp_getsockopt_local_auth_chunks+0x488>

	if (len < sizeof(struct sctp_authchunks))
    ea00:	80 01 00 6c 	lwz     r0,108(r1)
    ea04:	2b 80 00 07 	cmplwi  cr7,r0,7
    ea08:	41 9d 00 0c 	bgt-    cr7,ea14 <sctp_getsockopt_local_auth_chunks+0x64>
		return -EINVAL;
    ea0c:	38 00 ff ea 	li      r0,-22
    ea10:	48 00 04 28 	b       ee38 <sctp_getsockopt_local_auth_chunks+0x488>

	if (copy_from_user(&val, optval, sizeof(struct sctp_authchunks)))
    ea14:	38 01 00 5c 	addi    r0,r1,92

	if (!sctp_auth_enable)
		return -EACCES;

	if (len < sizeof(struct sctp_authchunks))
		return -EINVAL;
    ea18:	90 01 00 2c 	stw     r0,44(r1)
    ea1c:	80 01 00 70 	lwz     r0,112(r1)
    ea20:	90 01 00 30 	stw     r0,48(r1)
    ea24:	38 00 00 08 	li      r0,8
    ea28:	90 01 00 34 	stw     r0,52(r1)
static inline unsigned long copy_from_user(void *to,
		const void __user *from, unsigned long n)
{
	unsigned long over;

	if (access_ok(VERIFY_READ, from, n))
    ea2c:	81 21 00 30 	lwz     r9,48(r1)
    ea30:	7c 40 13 78 	mr      r0,r2
    ea34:	7c 0a 03 78 	mr      r10,r0
    ea38:	80 0a 01 d4 	lwz     r0,468(r10)
    ea3c:	7f 89 00 40 	cmplw   cr7,r9,r0
    ea40:	41 9d 00 3c 	bgt-    cr7,ea7c <sctp_getsockopt_local_auth_chunks+0xcc>
    ea44:	80 01 00 34 	lwz     r0,52(r1)
    ea48:	2f 80 00 00 	cmpwi   cr7,r0,0
    ea4c:	41 9e 00 28 	beq-    cr7,ea74 <sctp_getsockopt_local_auth_chunks+0xc4>
    ea50:	80 01 00 34 	lwz     r0,52(r1)
    ea54:	31 20 ff ff 	addic   r9,r0,-1
    ea58:	7c 40 13 78 	mr      r0,r2
    ea5c:	7c 0a 03 78 	mr      r10,r0
    ea60:	81 6a 01 d4 	lwz     r11,468(r10)
    ea64:	80 01 00 30 	lwz     r0,48(r1)
    ea68:	7c 00 58 50 	subf    r0,r0,r11
    ea6c:	7f 89 00 40 	cmplw   cr7,r9,r0
    ea70:	41 9d 00 0c 	bgt-    cr7,ea7c <sctp_getsockopt_local_auth_chunks+0xcc>
    ea74:	38 00 00 01 	li      r0,1
    ea78:	48 00 00 08 	b       ea80 <sctp_getsockopt_local_auth_chunks+0xd0>
    ea7c:	38 00 00 00 	li      r0,0
    ea80:	2f 80 00 00 	cmpwi   cr7,r0,0
    ea84:	41 9e 00 1c 	beq-    cr7,eaa0 <sctp_getsockopt_local_auth_chunks+0xf0>
		return __copy_tofrom_user((__force void __user *)to, from, n);
    ea88:	80 61 00 2c 	lwz     r3,44(r1)
    ea8c:	80 81 00 30 	lwz     r4,48(r1)
    ea90:	80 a1 00 34 	lwz     r5,52(r1)
    ea94:	48 00 00 01 	bl      ea94 <sctp_getsockopt_local_auth_chunks+0xe4>
    ea98:	7c 60 1b 78 	mr      r0,r3
    ea9c:	48 00 00 60 	b       eafc <sctp_getsockopt_local_auth_chunks+0x14c>
	if ((unsigned long)from < TASK_SIZE) {
    eaa0:	81 21 00 30 	lwz     r9,48(r1)
    eaa4:	3c 00 bf ff 	lis     r0,-16385
    eaa8:	60 00 ff ff 	ori     r0,r0,65535
    eaac:	7f 89 00 40 	cmplw   cr7,r9,r0
    eab0:	41 9d 00 48 	bgt-    cr7,eaf8 <sctp_getsockopt_local_auth_chunks+0x148>
		over = (unsigned long)from + n - TASK_SIZE;
    eab4:	81 21 00 30 	lwz     r9,48(r1)
    eab8:	80 01 00 34 	lwz     r0,52(r1)
    eabc:	7c 09 02 14 	add     r0,r9,r0
    eac0:	3d 60 40 00 	lis     r11,16384
    eac4:	7c 00 5a 14 	add     r0,r0,r11
    eac8:	90 01 00 38 	stw     r0,56(r1)
		return __copy_tofrom_user((__force void __user *)to, from,
    eacc:	81 21 00 34 	lwz     r9,52(r1)
    ead0:	80 01 00 38 	lwz     r0,56(r1)
    ead4:	7c 00 48 50 	subf    r0,r0,r9
    ead8:	80 61 00 2c 	lwz     r3,44(r1)
    eadc:	80 81 00 30 	lwz     r4,48(r1)
    eae0:	7c 05 03 78 	mr      r5,r0
    eae4:	48 00 00 01 	bl      eae4 <sctp_getsockopt_local_auth_chunks+0x134>
    eae8:	7c 69 1b 78 	mr      r9,r3
    eaec:	80 01 00 38 	lwz     r0,56(r1)
    eaf0:	7c 09 02 14 	add     r0,r9,r0
    eaf4:	48 00 00 08 	b       eafc <sctp_getsockopt_local_auth_chunks+0x14c>
				n - over) + over;
	}
	return n;
    eaf8:	80 01 00 34 	lwz     r0,52(r1)

	if (copy_from_user(&val, optval, sizeof(struct sctp_authchunks)))
    eafc:	2f 80 00 00 	cmpwi   cr7,r0,0
    eb00:	41 9e 00 0c 	beq-    cr7,eb0c <sctp_getsockopt_local_auth_chunks+0x15c>
		return -EFAULT;
    eb04:	38 00 ff f2 	li      r0,-14
    eb08:	48 00 03 30 	b       ee38 <sctp_getsockopt_local_auth_chunks+0x488>

	to = p->gauth_chunks;
    eb0c:	80 01 00 18 	lwz     r0,24(r1)
    eb10:	30 00 00 08 	addic   r0,r0,8
    eb14:	90 01 00 1c 	stw     r0,28(r1)
	asoc = sctp_id2assoc(sk, val.gauth_assoc_id);
    eb18:	80 01 00 5c 	lwz     r0,92(r1)
    eb1c:	80 61 00 68 	lwz     r3,104(r1)
    eb20:	7c 04 03 78 	mr      r4,r0
    eb24:	48 00 00 01 	bl      eb24 <sctp_getsockopt_local_auth_chunks+0x174>
    eb28:	90 61 00 20 	stw     r3,32(r1)
	if (!asoc && val.gauth_assoc_id && sctp_style(sk, UDP))
    eb2c:	80 01 00 20 	lwz     r0,32(r1)
    eb30:	2f 80 00 00 	cmpwi   cr7,r0,0
    eb34:	40 9e 00 54 	bne-    cr7,eb88 <sctp_getsockopt_local_auth_chunks+0x1d8>
    eb38:	80 01 00 5c 	lwz     r0,92(r1)
    eb3c:	2f 80 00 00 	cmpwi   cr7,r0,0
    eb40:	41 9e 00 48 	beq-    cr7,eb88 <sctp_getsockopt_local_auth_chunks+0x1d8>
    eb44:	80 01 00 68 	lwz     r0,104(r1)
    eb48:	90 01 00 3c 	stw     r0,60(r1)
    eb4c:	38 00 00 00 	li      r0,0
    eb50:	90 01 00 40 	stw     r0,64(r1)
    eb54:	80 01 00 3c 	lwz     r0,60(r1)
    eb58:	90 01 00 44 	stw     r0,68(r1)
    eb5c:	80 01 00 44 	lwz     r0,68(r1)
    eb60:	7c 09 03 78 	mr      r9,r0
    eb64:	80 09 01 c8 	lwz     r0,456(r9)
    eb68:	81 21 00 40 	lwz     r9,64(r1)
    eb6c:	7f 89 00 00 	cmpw    cr7,r9,r0
    eb70:	7c 00 00 26 	mfcr    r0
    eb74:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
    eb78:	2f 80 00 00 	cmpwi   cr7,r0,0
    eb7c:	41 9e 00 0c 	beq-    cr7,eb88 <sctp_getsockopt_local_auth_chunks+0x1d8>
		return -EINVAL;
    eb80:	38 00 ff ea 	li      r0,-22
    eb84:	48 00 02 b4 	b       ee38 <sctp_getsockopt_local_auth_chunks+0x488>

	if (asoc)
    eb88:	80 01 00 20 	lwz     r0,32(r1)
    eb8c:	2f 80 00 00 	cmpwi   cr7,r0,0
    eb90:	41 9e 00 14 	beq-    cr7,eba4 <sctp_getsockopt_local_auth_chunks+0x1f4>
		ch = (struct sctp_chunks_param*)asoc->c.auth_chunks;
    eb94:	80 01 00 20 	lwz     r0,32(r1)
    eb98:	30 00 00 ca 	addic   r0,r0,202
    eb9c:	90 01 00 08 	stw     r0,8(r1)
    eba0:	48 00 00 24 	b       ebc4 <sctp_getsockopt_local_auth_chunks+0x214>
    eba4:	80 01 00 68 	lwz     r0,104(r1)
    eba8:	90 01 00 48 	stw     r0,72(r1)
    ebac:	80 01 00 48 	lwz     r0,72(r1)
	else
		ch = sctp_sk(sk)->ep->auth_chunk_list;
    ebb0:	7c 0a 03 78 	mr      r10,r0
    ebb4:	80 0a 01 d4 	lwz     r0,468(r10)
    ebb8:	7c 0b 03 78 	mr      r11,r0
    ebbc:	80 0b 00 b4 	lwz     r0,180(r11)
    ebc0:	90 01 00 08 	stw     r0,8(r1)

	if (!ch)
    ebc4:	80 01 00 08 	lwz     r0,8(r1)
    ebc8:	2f 80 00 00 	cmpwi   cr7,r0,0
    ebcc:	41 9e 01 34 	beq-    cr7,ed00 <sctp_getsockopt_local_auth_chunks+0x350>
		goto num;

	num_chunks = ntohs(ch->param_hdr.length) - sizeof(sctp_paramhdr_t);
    ebd0:	80 01 00 08 	lwz     r0,8(r1)
    ebd4:	7c 09 03 78 	mr      r9,r0
    ebd8:	a0 09 00 02 	lhz     r0,2(r9)
    ebdc:	54 00 04 3e 	clrlwi  r0,r0,16
    ebe0:	30 00 ff fc 	addic   r0,r0,-4
    ebe4:	90 01 00 0c 	stw     r0,12(r1)
	if (len < sizeof(struct sctp_authchunks) + num_chunks)
    ebe8:	81 21 00 6c 	lwz     r9,108(r1)
    ebec:	80 01 00 0c 	lwz     r0,12(r1)
    ebf0:	30 00 00 08 	addic   r0,r0,8
    ebf4:	7f 89 00 40 	cmplw   cr7,r9,r0
    ebf8:	40 9c 00 0c 	bge-    cr7,ec04 <sctp_getsockopt_local_auth_chunks+0x254>
		return -EINVAL;
    ebfc:	38 00 ff ea 	li      r0,-22
    ec00:	48 00 02 38 	b       ee38 <sctp_getsockopt_local_auth_chunks+0x488>

	if (copy_to_user(to, ch->chunks, num_chunks))
    ec04:	80 01 00 08 	lwz     r0,8(r1)
    ec08:	30 00 00 04 	addic   r0,r0,4
    ec0c:	81 21 00 1c 	lwz     r9,28(r1)
    ec10:	91 21 00 4c 	stw     r9,76(r1)
    ec14:	90 01 00 50 	stw     r0,80(r1)
    ec18:	80 01 00 0c 	lwz     r0,12(r1)
    ec1c:	90 01 00 54 	stw     r0,84(r1)
static inline unsigned long copy_to_user(void __user *to,
		const void *from, unsigned long n)
{
	unsigned long over;

	if (access_ok(VERIFY_WRITE, to, n))
    ec20:	81 21 00 4c 	lwz     r9,76(r1)
    ec24:	7c 40 13 78 	mr      r0,r2
    ec28:	7c 0a 03 78 	mr      r10,r0
    ec2c:	80 0a 01 d4 	lwz     r0,468(r10)
    ec30:	7f 89 00 40 	cmplw   cr7,r9,r0
    ec34:	41 9d 00 3c 	bgt-    cr7,ec70 <sctp_getsockopt_local_auth_chunks+0x2c0>
    ec38:	80 01 00 54 	lwz     r0,84(r1)
    ec3c:	2f 80 00 00 	cmpwi   cr7,r0,0
    ec40:	41 9e 00 28 	beq-    cr7,ec68 <sctp_getsockopt_local_auth_chunks+0x2b8>
    ec44:	80 01 00 54 	lwz     r0,84(r1)
    ec48:	31 20 ff ff 	addic   r9,r0,-1
    ec4c:	7c 40 13 78 	mr      r0,r2
    ec50:	7c 0a 03 78 	mr      r10,r0
    ec54:	81 6a 01 d4 	lwz     r11,468(r10)
    ec58:	80 01 00 4c 	lwz     r0,76(r1)
    ec5c:	7c 00 58 50 	subf    r0,r0,r11
    ec60:	7f 89 00 40 	cmplw   cr7,r9,r0
    ec64:	41 9d 00 0c 	bgt-    cr7,ec70 <sctp_getsockopt_local_auth_chunks+0x2c0>
    ec68:	38 00 00 01 	li      r0,1
    ec6c:	48 00 00 08 	b       ec74 <sctp_getsockopt_local_auth_chunks+0x2c4>
    ec70:	38 00 00 00 	li      r0,0
    ec74:	2f 80 00 00 	cmpwi   cr7,r0,0
    ec78:	41 9e 00 1c 	beq-    cr7,ec94 <sctp_getsockopt_local_auth_chunks+0x2e4>
		return __copy_tofrom_user(to, (__force void __user *)from, n);
    ec7c:	80 61 00 4c 	lwz     r3,76(r1)
    ec80:	80 81 00 50 	lwz     r4,80(r1)
    ec84:	80 a1 00 54 	lwz     r5,84(r1)
    ec88:	48 00 00 01 	bl      ec88 <sctp_getsockopt_local_auth_chunks+0x2d8>
    ec8c:	7c 60 1b 78 	mr      r0,r3
    ec90:	48 00 00 60 	b       ecf0 <sctp_getsockopt_local_auth_chunks+0x340>
	if ((unsigned long)to < TASK_SIZE) {
    ec94:	81 21 00 4c 	lwz     r9,76(r1)
    ec98:	3c 00 bf ff 	lis     r0,-16385
    ec9c:	60 00 ff ff 	ori     r0,r0,65535
    eca0:	7f 89 00 40 	cmplw   cr7,r9,r0
    eca4:	41 9d 00 48 	bgt-    cr7,ecec <sctp_getsockopt_local_auth_chunks+0x33c>
		over = (unsigned long)to + n - TASK_SIZE;
    eca8:	81 21 00 4c 	lwz     r9,76(r1)
    ecac:	80 01 00 54 	lwz     r0,84(r1)
    ecb0:	7c 09 02 14 	add     r0,r9,r0
    ecb4:	3d 60 40 00 	lis     r11,16384
    ecb8:	7c 00 5a 14 	add     r0,r0,r11
    ecbc:	90 01 00 58 	stw     r0,88(r1)
		return __copy_tofrom_user(to, (__force void __user *)from,
    ecc0:	81 21 00 54 	lwz     r9,84(r1)
    ecc4:	80 01 00 58 	lwz     r0,88(r1)
    ecc8:	7c 00 48 50 	subf    r0,r0,r9
    eccc:	80 61 00 4c 	lwz     r3,76(r1)
    ecd0:	80 81 00 50 	lwz     r4,80(r1)
    ecd4:	7c 05 03 78 	mr      r5,r0
    ecd8:	48 00 00 01 	bl      ecd8 <sctp_getsockopt_local_auth_chunks+0x328>
    ecdc:	7c 69 1b 78 	mr      r9,r3
    ece0:	80 01 00 58 	lwz     r0,88(r1)
    ece4:	7c 09 02 14 	add     r0,r9,r0
    ece8:	48 00 00 08 	b       ecf0 <sctp_getsockopt_local_auth_chunks+0x340>
				n - over) + over;
	}
	return n;
    ecec:	80 01 00 54 	lwz     r0,84(r1)
    ecf0:	2f 80 00 00 	cmpwi   cr7,r0,0
    ecf4:	41 9e 00 10 	beq-    cr7,ed04 <sctp_getsockopt_local_auth_chunks+0x354>
		return -EFAULT;
    ecf8:	38 00 ff f2 	li      r0,-14
    ecfc:	48 00 01 3c 	b       ee38 <sctp_getsockopt_local_auth_chunks+0x488>
		ch = (struct sctp_chunks_param*)asoc->c.auth_chunks;
	else
		ch = sctp_sk(sk)->ep->auth_chunk_list;

	if (!ch)
		goto num;
    ed00:	60 00 00 00 	nop
		return -EINVAL;

	if (copy_to_user(to, ch->chunks, num_chunks))
		return -EFAULT;
num:
	len = sizeof(struct sctp_authchunks) + num_chunks;
    ed04:	80 01 00 0c 	lwz     r0,12(r1)
    ed08:	30 00 00 08 	addic   r0,r0,8
    ed0c:	90 01 00 6c 	stw     r0,108(r1)
	if (put_user(len, optlen))
    ed10:	38 00 ff f2 	li      r0,-14
    ed14:	90 01 00 10 	stw     r0,16(r1)
    ed18:	80 01 00 74 	lwz     r0,116(r1)
    ed1c:	90 01 00 24 	stw     r0,36(r1)
    ed20:	81 21 00 24 	lwz     r9,36(r1)
    ed24:	7c 40 13 78 	mr      r0,r2
    ed28:	7c 0a 03 78 	mr      r10,r0
    ed2c:	80 0a 01 d4 	lwz     r0,468(r10)
    ed30:	7f 89 00 40 	cmplw   cr7,r9,r0
    ed34:	41 9d 00 28 	bgt-    cr7,ed5c <sctp_getsockopt_local_auth_chunks+0x3ac>
    ed38:	7c 40 13 78 	mr      r0,r2
    ed3c:	7c 0b 03 78 	mr      r11,r0
    ed40:	81 2b 01 d4 	lwz     r9,468(r11)
    ed44:	80 01 00 24 	lwz     r0,36(r1)
    ed48:	7c 00 48 50 	subf    r0,r0,r9
    ed4c:	2b 80 00 02 	cmplwi  cr7,r0,2
    ed50:	40 9d 00 0c 	ble-    cr7,ed5c <sctp_getsockopt_local_auth_chunks+0x3ac>
    ed54:	38 00 00 01 	li      r0,1
    ed58:	48 00 00 08 	b       ed60 <sctp_getsockopt_local_auth_chunks+0x3b0>
    ed5c:	38 00 00 00 	li      r0,0
    ed60:	2f 80 00 00 	cmpwi   cr7,r0,0
    ed64:	41 9e 00 28 	beq-    cr7,ed8c <sctp_getsockopt_local_auth_chunks+0x3dc>
    ed68:	38 00 00 00 	li      r0,0
    ed6c:	90 01 00 10 	stw     r0,16(r1)
    ed70:	80 01 00 6c 	lwz     r0,108(r1)
    ed74:	81 21 00 24 	lwz     r9,36(r1)
    ed78:	81 61 00 10 	lwz     r11,16(r1)
    ed7c:	7d 7f 5b 78 	mr      r31,r11
    ed80:	90 09 00 00 	stw     r0,0(r9)
    ed84:	93 e1 00 10 	stw     r31,16(r1)
    ed88:	60 00 00 00 	nop
    ed8c:	80 01 00 10 	lwz     r0,16(r1)
    ed90:	2f 80 00 00 	cmpwi   cr7,r0,0
    ed94:	41 9e 00 0c 	beq-    cr7,eda0 <sctp_getsockopt_local_auth_chunks+0x3f0>
		return -EFAULT;
    ed98:	38 00 ff f2 	li      r0,-14
    ed9c:	48 00 00 9c 	b       ee38 <sctp_getsockopt_local_auth_chunks+0x488>
	if (put_user(num_chunks, &p->gauth_number_of_chunks))
    eda0:	38 00 ff f2 	li      r0,-14
    eda4:	90 01 00 14 	stw     r0,20(r1)
    eda8:	80 01 00 18 	lwz     r0,24(r1)
    edac:	30 00 00 04 	addic   r0,r0,4
    edb0:	90 01 00 28 	stw     r0,40(r1)
    edb4:	81 21 00 28 	lwz     r9,40(r1)
    edb8:	7c 40 13 78 	mr      r0,r2
    edbc:	7c 0a 03 78 	mr      r10,r0
    edc0:	80 0a 01 d4 	lwz     r0,468(r10)
    edc4:	7f 89 00 40 	cmplw   cr7,r9,r0
    edc8:	41 9d 00 28 	bgt-    cr7,edf0 <sctp_getsockopt_local_auth_chunks+0x440>
    edcc:	7c 40 13 78 	mr      r0,r2
    edd0:	7c 0b 03 78 	mr      r11,r0
    edd4:	81 2b 01 d4 	lwz     r9,468(r11)
    edd8:	80 01 00 28 	lwz     r0,40(r1)
    eddc:	7c 00 48 50 	subf    r0,r0,r9
    ede0:	2b 80 00 02 	cmplwi  cr7,r0,2
    ede4:	40 9d 00 0c 	ble-    cr7,edf0 <sctp_getsockopt_local_auth_chunks+0x440>
    ede8:	38 00 00 01 	li      r0,1
    edec:	48 00 00 08 	b       edf4 <sctp_getsockopt_local_auth_chunks+0x444>
    edf0:	38 00 00 00 	li      r0,0
    edf4:	2f 80 00 00 	cmpwi   cr7,r0,0
    edf8:	41 9e 00 28 	beq-    cr7,ee20 <sctp_getsockopt_local_auth_chunks+0x470>
    edfc:	38 00 00 00 	li      r0,0
    ee00:	90 01 00 14 	stw     r0,20(r1)
    ee04:	80 01 00 0c 	lwz     r0,12(r1)
    ee08:	81 21 00 28 	lwz     r9,40(r1)
    ee0c:	81 61 00 14 	lwz     r11,20(r1)
    ee10:	7d 7f 5b 78 	mr      r31,r11
    ee14:	90 09 00 00 	stw     r0,0(r9)
    ee18:	93 e1 00 14 	stw     r31,20(r1)
    ee1c:	60 00 00 00 	nop
    ee20:	80 01 00 14 	lwz     r0,20(r1)
    ee24:	2f 80 00 00 	cmpwi   cr7,r0,0
    ee28:	41 9e 00 0c 	beq-    cr7,ee34 <sctp_getsockopt_local_auth_chunks+0x484>
		return -EFAULT;
    ee2c:	38 00 ff f2 	li      r0,-14
    ee30:	48 00 00 08 	b       ee38 <sctp_getsockopt_local_auth_chunks+0x488>

	return 0;
    ee34:	38 00 00 00 	li      r0,0
}
    ee38:	7c 03 03 78 	mr      r3,r0
    ee3c:	80 01 00 84 	lwz     r0,132(r1)
    ee40:	7c 08 03 a6 	mtlr    r0
    ee44:	83 e1 00 7c 	lwz     r31,124(r1)
    ee48:	38 21 00 80 	addi    r1,r1,128
    ee4c:	4e 80 00 20 	blr

0000ee50 <sctp_getsockopt_assoc_number>:
 * This option gets the current number of associations that are attached
 * to a one-to-many style socket.  The option value is an uint32_t.
 */
static int sctp_getsockopt_assoc_number(struct sock *sk, int len,
				    char __user *optval, int __user *optlen)
{
    ee50:	94 21 ff a0 	stwu    r1,-96(r1)
    ee54:	7c 08 02 a6 	mflr    r0
    ee58:	90 01 00 64 	stw     r0,100(r1)
    ee5c:	93 e1 00 5c 	stw     r31,92(r1)
    ee60:	90 61 00 48 	stw     r3,72(r1)
    ee64:	90 81 00 4c 	stw     r4,76(r1)
    ee68:	90 a1 00 50 	stw     r5,80(r1)
    ee6c:	90 c1 00 54 	stw     r6,84(r1)
    ee70:	80 01 00 48 	lwz     r0,72(r1)
    ee74:	90 01 00 20 	stw     r0,32(r1)
    ee78:	80 01 00 20 	lwz     r0,32(r1)
	struct sctp_sock *sp = sctp_sk(sk);
    ee7c:	90 01 00 10 	stw     r0,16(r1)
	struct sctp_association *asoc;
	u32 val = 0;
    ee80:	38 00 00 00 	li      r0,0
    ee84:	90 01 00 44 	stw     r0,68(r1)
    ee88:	80 01 00 48 	lwz     r0,72(r1)
    ee8c:	90 01 00 24 	stw     r0,36(r1)
    ee90:	38 00 00 02 	li      r0,2
    ee94:	90 01 00 28 	stw     r0,40(r1)
    ee98:	80 01 00 24 	lwz     r0,36(r1)
    ee9c:	90 01 00 2c 	stw     r0,44(r1)
    eea0:	80 01 00 2c 	lwz     r0,44(r1)
    eea4:	7c 09 03 78 	mr      r9,r0
    eea8:	80 09 01 c8 	lwz     r0,456(r9)
    eeac:	81 21 00 28 	lwz     r9,40(r1)
    eeb0:	7f 89 00 00 	cmpw    cr7,r9,r0
    eeb4:	7c 00 00 26 	mfcr    r0
    eeb8:	54 00 ff fe 	rlwinm  r0,r0,31,31,31

	if (sctp_style(sk, TCP))
    eebc:	2f 80 00 00 	cmpwi   cr7,r0,0
    eec0:	41 9e 00 0c 	beq-    cr7,eecc <sctp_getsockopt_assoc_number+0x7c>
		return -EOPNOTSUPP;
    eec4:	38 00 ff a1 	li      r0,-95
    eec8:	48 00 02 44 	b       f10c <sctp_getsockopt_assoc_number+0x2bc>

	if (len < sizeof(u32))
    eecc:	80 01 00 4c 	lwz     r0,76(r1)
    eed0:	2b 80 00 03 	cmplwi  cr7,r0,3
    eed4:	41 9d 00 0c 	bgt-    cr7,eee0 <sctp_getsockopt_assoc_number+0x90>
		return -EINVAL;
    eed8:	38 00 ff ea 	li      r0,-22
    eedc:	48 00 02 30 	b       f10c <sctp_getsockopt_assoc_number+0x2bc>

	len = sizeof(u32);
    eee0:	38 00 00 04 	li      r0,4
    eee4:	90 01 00 4c 	stw     r0,76(r1)

	list_for_each_entry(asoc, &(sp->ep->asocs), asocs) {
    eee8:	80 01 00 10 	lwz     r0,16(r1)
    eeec:	7c 0a 03 78 	mr      r10,r0
    eef0:	80 0a 01 d4 	lwz     r0,468(r10)
    eef4:	7c 0b 03 78 	mr      r11,r0
    eef8:	80 0b 00 4c 	lwz     r0,76(r11)
    eefc:	90 01 00 14 	stw     r0,20(r1)
    ef00:	80 01 00 14 	lwz     r0,20(r1)
    ef04:	30 00 ff b4 	addic   r0,r0,-76
    ef08:	90 01 00 08 	stw     r0,8(r1)
    ef0c:	48 00 00 2c 	b       ef38 <sctp_getsockopt_assoc_number+0xe8>
		val++;
    ef10:	80 01 00 44 	lwz     r0,68(r1)
    ef14:	30 00 00 01 	addic   r0,r0,1
    ef18:	90 01 00 44 	stw     r0,68(r1)
	if (len < sizeof(u32))
		return -EINVAL;

	len = sizeof(u32);

	list_for_each_entry(asoc, &(sp->ep->asocs), asocs) {
    ef1c:	80 01 00 08 	lwz     r0,8(r1)
    ef20:	7c 09 03 78 	mr      r9,r0
    ef24:	80 09 00 4c 	lwz     r0,76(r9)
    ef28:	90 01 00 18 	stw     r0,24(r1)
    ef2c:	80 01 00 18 	lwz     r0,24(r1)
    ef30:	30 00 ff b4 	addic   r0,r0,-76
    ef34:	90 01 00 08 	stw     r0,8(r1)
    ef38:	80 01 00 08 	lwz     r0,8(r1)
    ef3c:	7c 0a 03 78 	mr      r10,r0
    ef40:	80 0a 00 4c 	lwz     r0,76(r10)
    ef44:	90 01 00 30 	stw     r0,48(r1)
#define ARCH_HAS_PREFETCHW
#define ARCH_HAS_SPINLOCK_PREFETCH

static inline void prefetch(const void *x)
{
	if (unlikely(!x))
    ef48:	80 01 00 30 	lwz     r0,48(r1)
    ef4c:	2f 80 00 00 	cmpwi   cr7,r0,0
    ef50:	7c 00 00 26 	mfcr    r0
    ef54:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
    ef58:	2f 80 00 00 	cmpwi   cr7,r0,0
    ef5c:	40 9e 00 0c 	bne-    cr7,ef68 <sctp_getsockopt_assoc_number+0x118>
		return;

	__asm__ __volatile__ ("dcbt 0,%0" : : "r" (x));
    ef60:	80 01 00 30 	lwz     r0,48(r1)
    ef64:	7c 00 02 2c 	dcbt    r0,r0
    ef68:	80 01 00 10 	lwz     r0,16(r1)
    ef6c:	7c 0b 03 78 	mr      r11,r0
    ef70:	81 2b 01 d4 	lwz     r9,468(r11)
    ef74:	80 01 00 08 	lwz     r0,8(r1)
    ef78:	7f 89 00 00 	cmpw    cr7,r9,r0
    ef7c:	40 9e ff 94 	bne+    cr7,ef10 <sctp_getsockopt_assoc_number+0xc0>
		val++;
	}

	if (put_user(len, optlen))
    ef80:	38 00 ff f2 	li      r0,-14
    ef84:	90 01 00 0c 	stw     r0,12(r1)
    ef88:	80 01 00 54 	lwz     r0,84(r1)
    ef8c:	90 01 00 1c 	stw     r0,28(r1)
    ef90:	81 21 00 1c 	lwz     r9,28(r1)
    ef94:	7c 40 13 78 	mr      r0,r2
    ef98:	7c 0a 03 78 	mr      r10,r0
    ef9c:	80 0a 01 d4 	lwz     r0,468(r10)
    efa0:	7f 89 00 40 	cmplw   cr7,r9,r0
    efa4:	41 9d 00 28 	bgt-    cr7,efcc <sctp_getsockopt_assoc_number+0x17c>
    efa8:	7c 40 13 78 	mr      r0,r2
    efac:	7c 0b 03 78 	mr      r11,r0
    efb0:	81 2b 01 d4 	lwz     r9,468(r11)
    efb4:	80 01 00 1c 	lwz     r0,28(r1)
    efb8:	7c 00 48 50 	subf    r0,r0,r9
    efbc:	2b 80 00 02 	cmplwi  cr7,r0,2
    efc0:	40 9d 00 0c 	ble-    cr7,efcc <sctp_getsockopt_assoc_number+0x17c>
    efc4:	38 00 00 01 	li      r0,1
    efc8:	48 00 00 08 	b       efd0 <sctp_getsockopt_assoc_number+0x180>
    efcc:	38 00 00 00 	li      r0,0
    efd0:	2f 80 00 00 	cmpwi   cr7,r0,0
    efd4:	41 9e 00 28 	beq-    cr7,effc <sctp_getsockopt_assoc_number+0x1ac>
    efd8:	38 00 00 00 	li      r0,0
    efdc:	90 01 00 0c 	stw     r0,12(r1)
    efe0:	80 01 00 4c 	lwz     r0,76(r1)
    efe4:	81 21 00 1c 	lwz     r9,28(r1)
    efe8:	81 61 00 0c 	lwz     r11,12(r1)
    efec:	7d 7f 5b 78 	mr      r31,r11
    eff0:	90 09 00 00 	stw     r0,0(r9)
    eff4:	93 e1 00 0c 	stw     r31,12(r1)
    eff8:	60 00 00 00 	nop
    effc:	80 01 00 0c 	lwz     r0,12(r1)
    f000:	2f 80 00 00 	cmpwi   cr7,r0,0
    f004:	41 9e 00 0c 	beq-    cr7,f010 <sctp_getsockopt_assoc_number+0x1c0>
		return -EFAULT;
    f008:	38 00 ff f2 	li      r0,-14
    f00c:	48 00 01 00 	b       f10c <sctp_getsockopt_assoc_number+0x2bc>
	if (copy_to_user(optval, &val, len))
    f010:	80 01 00 4c 	lwz     r0,76(r1)
    f014:	81 21 00 50 	lwz     r9,80(r1)
    f018:	91 21 00 34 	stw     r9,52(r1)
    f01c:	39 21 00 44 	addi    r9,r1,68
    f020:	91 21 00 38 	stw     r9,56(r1)
    f024:	90 01 00 3c 	stw     r0,60(r1)
static inline unsigned long copy_to_user(void __user *to,
		const void *from, unsigned long n)
{
	unsigned long over;

	if (access_ok(VERIFY_WRITE, to, n))
    f028:	81 21 00 34 	lwz     r9,52(r1)
    f02c:	7c 40 13 78 	mr      r0,r2
    f030:	7c 0a 03 78 	mr      r10,r0
    f034:	80 0a 01 d4 	lwz     r0,468(r10)
    f038:	7f 89 00 40 	cmplw   cr7,r9,r0
    f03c:	41 9d 00 3c 	bgt-    cr7,f078 <sctp_getsockopt_assoc_number+0x228>
    f040:	80 01 00 3c 	lwz     r0,60(r1)
    f044:	2f 80 00 00 	cmpwi   cr7,r0,0
    f048:	41 9e 00 28 	beq-    cr7,f070 <sctp_getsockopt_assoc_number+0x220>
    f04c:	80 01 00 3c 	lwz     r0,60(r1)
    f050:	31 20 ff ff 	addic   r9,r0,-1
    f054:	7c 40 13 78 	mr      r0,r2
    f058:	7c 0a 03 78 	mr      r10,r0
    f05c:	81 6a 01 d4 	lwz     r11,468(r10)
    f060:	80 01 00 34 	lwz     r0,52(r1)
    f064:	7c 00 58 50 	subf    r0,r0,r11
    f068:	7f 89 00 40 	cmplw   cr7,r9,r0
    f06c:	41 9d 00 0c 	bgt-    cr7,f078 <sctp_getsockopt_assoc_number+0x228>
    f070:	38 00 00 01 	li      r0,1
    f074:	48 00 00 08 	b       f07c <sctp_getsockopt_assoc_number+0x22c>
    f078:	38 00 00 00 	li      r0,0
    f07c:	2f 80 00 00 	cmpwi   cr7,r0,0
    f080:	41 9e 00 1c 	beq-    cr7,f09c <sctp_getsockopt_assoc_number+0x24c>
		return __copy_tofrom_user(to, (__force void __user *)from, n);
    f084:	80 61 00 34 	lwz     r3,52(r1)
    f088:	80 81 00 38 	lwz     r4,56(r1)
    f08c:	80 a1 00 3c 	lwz     r5,60(r1)
    f090:	48 00 00 01 	bl      f090 <sctp_getsockopt_assoc_number+0x240>
    f094:	7c 60 1b 78 	mr      r0,r3
    f098:	48 00 00 60 	b       f0f8 <sctp_getsockopt_assoc_number+0x2a8>
	if ((unsigned long)to < TASK_SIZE) {
    f09c:	81 21 00 34 	lwz     r9,52(r1)
    f0a0:	3c 00 bf ff 	lis     r0,-16385
    f0a4:	60 00 ff ff 	ori     r0,r0,65535
    f0a8:	7f 89 00 40 	cmplw   cr7,r9,r0
    f0ac:	41 9d 00 48 	bgt-    cr7,f0f4 <sctp_getsockopt_assoc_number+0x2a4>
		over = (unsigned long)to + n - TASK_SIZE;
    f0b0:	81 21 00 34 	lwz     r9,52(r1)
    f0b4:	80 01 00 3c 	lwz     r0,60(r1)
    f0b8:	7c 09 02 14 	add     r0,r9,r0
    f0bc:	3d 60 40 00 	lis     r11,16384
    f0c0:	7c 00 5a 14 	add     r0,r0,r11
    f0c4:	90 01 00 40 	stw     r0,64(r1)
		return __copy_tofrom_user(to, (__force void __user *)from,
    f0c8:	81 21 00 3c 	lwz     r9,60(r1)
    f0cc:	80 01 00 40 	lwz     r0,64(r1)
    f0d0:	7c 00 48 50 	subf    r0,r0,r9
    f0d4:	80 61 00 34 	lwz     r3,52(r1)
    f0d8:	80 81 00 38 	lwz     r4,56(r1)
    f0dc:	7c 05 03 78 	mr      r5,r0
    f0e0:	48 00 00 01 	bl      f0e0 <sctp_getsockopt_assoc_number+0x290>
    f0e4:	7c 69 1b 78 	mr      r9,r3
    f0e8:	80 01 00 40 	lwz     r0,64(r1)
    f0ec:	7c 09 02 14 	add     r0,r9,r0
    f0f0:	48 00 00 08 	b       f0f8 <sctp_getsockopt_assoc_number+0x2a8>
				n - over) + over;
	}
	return n;
    f0f4:	80 01 00 3c 	lwz     r0,60(r1)
    f0f8:	2f 80 00 00 	cmpwi   cr7,r0,0
    f0fc:	41 9e 00 0c 	beq-    cr7,f108 <sctp_getsockopt_assoc_number+0x2b8>
		return -EFAULT;
    f100:	38 00 ff f2 	li      r0,-14
    f104:	48 00 00 08 	b       f10c <sctp_getsockopt_assoc_number+0x2bc>

	return 0;
    f108:	38 00 00 00 	li      r0,0
}
    f10c:	7c 03 03 78 	mr      r3,r0
    f110:	80 01 00 64 	lwz     r0,100(r1)
    f114:	7c 08 03 a6 	mtlr    r0
    f118:	83 e1 00 5c 	lwz     r31,92(r1)
    f11c:	38 21 00 60 	addi    r1,r1,96
    f120:	4e 80 00 20 	blr

0000f124 <sctp_getsockopt>:

SCTP_STATIC int sctp_getsockopt(struct sock *sk, int level, int optname,
				char __user *optval, int __user *optlen)
{
    f124:	94 21 ff b0 	stwu    r1,-80(r1)
    f128:	7c 08 02 a6 	mflr    r0
    f12c:	90 01 00 54 	stw     r0,84(r1)
    f130:	bf c1 00 48 	stmw    r30,72(r1)
    f134:	90 61 00 28 	stw     r3,40(r1)
    f138:	90 81 00 2c 	stw     r4,44(r1)
    f13c:	90 a1 00 30 	stw     r5,48(r1)
    f140:	90 c1 00 34 	stw     r6,52(r1)
    f144:	90 e1 00 38 	stw     r7,56(r1)
	int retval = 0;
    f148:	38 00 00 00 	li      r0,0
    f14c:	90 01 00 08 	stw     r0,8(r1)
	 * so broken as to be worse than useless.  The API draft
	 * REALLY is NOT helpful here...  I am not convinced that the
	 * semantics of getsockopt() with a level OTHER THAN SOL_SCTP
	 * are at all well-founded.
	 */
	if (level != SOL_SCTP) {
    f150:	80 01 00 2c 	lwz     r0,44(r1)
    f154:	2f 80 00 84 	cmpwi   cr7,r0,132
    f158:	41 9e 00 58 	beq-    cr7,f1b0 <sctp_getsockopt+0x8c>
    f15c:	80 01 00 28 	lwz     r0,40(r1)
    f160:	90 01 00 20 	stw     r0,32(r1)
    f164:	80 01 00 20 	lwz     r0,32(r1)
		struct sctp_af *af = sctp_sk(sk)->pf->af;
    f168:	7c 09 03 78 	mr      r9,r0
    f16c:	80 09 01 cc 	lwz     r0,460(r9)
    f170:	7c 0b 03 78 	mr      r11,r0
    f174:	80 0b 00 24 	lwz     r0,36(r11)
    f178:	90 01 00 14 	stw     r0,20(r1)

		retval = af->getsockopt(sk, level, optname, optval, optlen);
    f17c:	80 01 00 14 	lwz     r0,20(r1)
    f180:	7c 09 03 78 	mr      r9,r0
    f184:	80 09 00 08 	lwz     r0,8(r9)
    f188:	80 61 00 28 	lwz     r3,40(r1)
    f18c:	80 81 00 2c 	lwz     r4,44(r1)
    f190:	80 a1 00 30 	lwz     r5,48(r1)
    f194:	80 c1 00 34 	lwz     r6,52(r1)
    f198:	80 e1 00 38 	lwz     r7,56(r1)
    f19c:	7c 09 03 a6 	mtctr   r0
    f1a0:	4e 80 04 21 	bctrl
    f1a4:	90 61 00 08 	stw     r3,8(r1)
		return retval;
    f1a8:	80 01 00 08 	lwz     r0,8(r1)
    f1ac:	48 00 04 48 	b       f5f4 <sctp_getsockopt+0x4d0>
	}

	if (get_user(len, optlen))
    f1b0:	38 00 ff f2 	li      r0,-14
    f1b4:	90 01 00 0c 	stw     r0,12(r1)
    f1b8:	38 00 00 00 	li      r0,0
    f1bc:	90 01 00 10 	stw     r0,16(r1)
    f1c0:	80 01 00 38 	lwz     r0,56(r1)
    f1c4:	90 01 00 18 	stw     r0,24(r1)
    f1c8:	81 21 00 18 	lwz     r9,24(r1)
    f1cc:	7c 40 13 78 	mr      r0,r2
    f1d0:	7c 0b 03 78 	mr      r11,r0
    f1d4:	80 0b 01 d4 	lwz     r0,468(r11)
    f1d8:	7f 89 00 40 	cmplw   cr7,r9,r0
    f1dc:	41 9d 00 28 	bgt-    cr7,f204 <sctp_getsockopt+0xe0>
    f1e0:	7c 40 13 78 	mr      r0,r2
    f1e4:	7c 0b 03 78 	mr      r11,r0
    f1e8:	81 2b 01 d4 	lwz     r9,468(r11)
    f1ec:	80 01 00 18 	lwz     r0,24(r1)
    f1f0:	7c 00 48 50 	subf    r0,r0,r9
    f1f4:	2b 80 00 02 	cmplwi  cr7,r0,2
    f1f8:	40 9d 00 0c 	ble-    cr7,f204 <sctp_getsockopt+0xe0>
    f1fc:	38 00 00 01 	li      r0,1
    f200:	48 00 00 08 	b       f208 <sctp_getsockopt+0xe4>
    f204:	38 00 00 00 	li      r0,0
    f208:	2f 80 00 00 	cmpwi   cr7,r0,0
    f20c:	41 9e 00 2c 	beq-    cr7,f238 <sctp_getsockopt+0x114>
    f210:	38 00 00 00 	li      r0,0
    f214:	90 01 00 0c 	stw     r0,12(r1)
    f218:	80 01 00 18 	lwz     r0,24(r1)
    f21c:	81 21 00 0c 	lwz     r9,12(r1)
    f220:	7d 3f 4b 78 	mr      r31,r9
    f224:	7c 09 03 78 	mr      r9,r0
    f228:	83 c9 00 00 	lwz     r30,0(r9)
    f22c:	93 e1 00 0c 	stw     r31,12(r1)
    f230:	93 c1 00 10 	stw     r30,16(r1)
    f234:	60 00 00 00 	nop
    f238:	80 01 00 10 	lwz     r0,16(r1)
    f23c:	90 01 00 1c 	stw     r0,28(r1)
    f240:	80 01 00 0c 	lwz     r0,12(r1)
    f244:	2f 80 00 00 	cmpwi   cr7,r0,0
    f248:	41 9e 00 0c 	beq-    cr7,f254 <sctp_getsockopt+0x130>
		return -EFAULT;
    f24c:	38 00 ff f2 	li      r0,-14
    f250:	48 00 03 a4 	b       f5f4 <sctp_getsockopt+0x4d0>
    f254:	80 01 00 28 	lwz     r0,40(r1)
    f258:	90 01 00 24 	stw     r0,36(r1)

extern void lock_sock_nested(struct sock *sk, int subclass);

static inline void lock_sock(struct sock *sk)
{
	lock_sock_nested(sk, 0);
    f25c:	80 61 00 24 	lwz     r3,36(r1)
    f260:	38 80 00 00 	li      r4,0
    f264:	48 00 00 01 	bl      f264 <sctp_getsockopt+0x140>

	sctp_lock_sock(sk);

	switch (optname) {
    f268:	80 01 00 30 	lwz     r0,48(r1)
    f26c:	2b 80 00 6f 	cmplwi  cr7,r0,111
    f270:	41 9d 03 6c 	bgt-    cr7,f5dc <sctp_getsockopt+0x4b8>
    f274:	80 01 00 30 	lwz     r0,48(r1)
    f278:	54 09 10 3a 	rlwinm  r9,r0,2,0,29
    f27c:	3c 00 00 00 	lis     r0,0
    f280:	30 00 03 0c 	addic   r0,r0,780
    f284:	7c 09 02 14 	add     r0,r9,r0
    f288:	7c 0b 03 78 	mr      r11,r0
    f28c:	81 2b 00 00 	lwz     r9,0(r11)
    f290:	3c 00 00 00 	lis     r0,0
    f294:	30 00 03 0c 	addic   r0,r0,780
    f298:	7c 09 02 14 	add     r0,r9,r0
    f29c:	7c 09 03 a6 	mtctr   r0
    f2a0:	4e 80 04 20 	bctr
	case SCTP_STATUS:
		retval = sctp_getsockopt_sctp_status(sk, len, optval, optlen);
    f2a4:	80 61 00 28 	lwz     r3,40(r1)
    f2a8:	80 81 00 1c 	lwz     r4,28(r1)
    f2ac:	80 a1 00 34 	lwz     r5,52(r1)
    f2b0:	80 c1 00 38 	lwz     r6,56(r1)
    f2b4:	4b ff 96 69 	bl      891c <sctp_getsockopt_sctp_status>
    f2b8:	90 61 00 08 	stw     r3,8(r1)
		break;
    f2bc:	48 00 03 2c 	b       f5e8 <sctp_getsockopt+0x4c4>
	case SCTP_DISABLE_FRAGMENTS:
		retval = sctp_getsockopt_disable_fragments(sk, len, optval,
    f2c0:	80 61 00 28 	lwz     r3,40(r1)
    f2c4:	80 81 00 1c 	lwz     r4,28(r1)
    f2c8:	80 a1 00 34 	lwz     r5,52(r1)
    f2cc:	80 c1 00 38 	lwz     r6,56(r1)
    f2d0:	4b ff 9f 31 	bl      9200 <sctp_getsockopt_disable_fragments>
    f2d4:	90 61 00 08 	stw     r3,8(r1)
							   optlen);
		break;
    f2d8:	48 00 03 10 	b       f5e8 <sctp_getsockopt+0x4c4>
	case SCTP_EVENTS:
		retval = sctp_getsockopt_events(sk, len, optval, optlen);
    f2dc:	80 61 00 28 	lwz     r3,40(r1)
    f2e0:	80 81 00 1c 	lwz     r4,28(r1)
    f2e4:	80 a1 00 34 	lwz     r5,52(r1)
    f2e8:	80 c1 00 38 	lwz     r6,56(r1)
    f2ec:	4b ff a1 1d 	bl      9408 <sctp_getsockopt_events>
    f2f0:	90 61 00 08 	stw     r3,8(r1)
		break;
    f2f4:	48 00 02 f4 	b       f5e8 <sctp_getsockopt+0x4c4>
	case SCTP_AUTOCLOSE:
		retval = sctp_getsockopt_autoclose(sk, len, optval, optlen);
    f2f8:	80 61 00 28 	lwz     r3,40(r1)
    f2fc:	80 81 00 1c 	lwz     r4,28(r1)
    f300:	80 a1 00 34 	lwz     r5,52(r1)
    f304:	80 c1 00 38 	lwz     r6,56(r1)
    f308:	4b ff a2 ed 	bl      95f4 <sctp_getsockopt_autoclose>
    f30c:	90 61 00 08 	stw     r3,8(r1)
		break;
    f310:	48 00 02 d8 	b       f5e8 <sctp_getsockopt+0x4c4>
	case SCTP_SOCKOPT_PEELOFF:
		retval = sctp_getsockopt_peeloff(sk, len, optval, optlen);
    f314:	80 61 00 28 	lwz     r3,40(r1)
    f318:	80 81 00 1c 	lwz     r4,28(r1)
    f31c:	80 a1 00 34 	lwz     r5,52(r1)
    f320:	80 c1 00 38 	lwz     r6,56(r1)
    f324:	4b ff a6 59 	bl      997c <sctp_getsockopt_peeloff>
    f328:	90 61 00 08 	stw     r3,8(r1)
		break;
    f32c:	48 00 02 bc 	b       f5e8 <sctp_getsockopt+0x4c4>
	case SCTP_PEER_ADDR_PARAMS:
		retval = sctp_getsockopt_peer_addr_params(sk, len, optval,
    f330:	80 61 00 28 	lwz     r3,40(r1)
    f334:	80 81 00 1c 	lwz     r4,28(r1)
    f338:	80 a1 00 34 	lwz     r5,52(r1)
    f33c:	80 c1 00 38 	lwz     r6,56(r1)
    f340:	4b ff a9 a9 	bl      9ce8 <sctp_getsockopt_peer_addr_params>
    f344:	90 61 00 08 	stw     r3,8(r1)
							  optlen);
		break;
    f348:	48 00 02 a0 	b       f5e8 <sctp_getsockopt+0x4c4>
	case SCTP_DELAYED_SACK:
		retval = sctp_getsockopt_delayed_ack(sk, len, optval,
    f34c:	80 61 00 28 	lwz     r3,40(r1)
    f350:	80 81 00 1c 	lwz     r4,28(r1)
    f354:	80 a1 00 34 	lwz     r5,52(r1)
    f358:	80 c1 00 38 	lwz     r6,56(r1)
    f35c:	4b ff ae 95 	bl      a1f0 <sctp_getsockopt_delayed_ack>
    f360:	90 61 00 08 	stw     r3,8(r1)
							  optlen);
		break;
    f364:	48 00 02 84 	b       f5e8 <sctp_getsockopt+0x4c4>
	case SCTP_INITMSG:
		retval = sctp_getsockopt_initmsg(sk, len, optval, optlen);
    f368:	80 61 00 28 	lwz     r3,40(r1)
    f36c:	80 81 00 1c 	lwz     r4,28(r1)
    f370:	80 a1 00 34 	lwz     r5,52(r1)
    f374:	80 c1 00 38 	lwz     r6,56(r1)
    f378:	4b ff b3 a9 	bl      a720 <sctp_getsockopt_initmsg>
    f37c:	90 61 00 08 	stw     r3,8(r1)
		break;
    f380:	48 00 02 68 	b       f5e8 <sctp_getsockopt+0x4c4>
	case SCTP_GET_PEER_ADDRS:
		retval = sctp_getsockopt_peer_addrs(sk, len, optval,
    f384:	80 61 00 28 	lwz     r3,40(r1)
    f388:	80 81 00 1c 	lwz     r4,28(r1)
    f38c:	80 a1 00 34 	lwz     r5,52(r1)
    f390:	80 c1 00 38 	lwz     r6,56(r1)
    f394:	4b ff b5 79 	bl      a90c <sctp_getsockopt_peer_addrs>
    f398:	90 61 00 08 	stw     r3,8(r1)
						    optlen);
		break;
    f39c:	48 00 02 4c 	b       f5e8 <sctp_getsockopt+0x4c4>
	case SCTP_GET_LOCAL_ADDRS:
		retval = sctp_getsockopt_local_addrs(sk, len, optval,
    f3a0:	80 61 00 28 	lwz     r3,40(r1)
    f3a4:	80 81 00 1c 	lwz     r4,28(r1)
    f3a8:	80 a1 00 34 	lwz     r5,52(r1)
    f3ac:	80 c1 00 38 	lwz     r6,56(r1)
    f3b0:	4b ff be 19 	bl      b1c8 <sctp_getsockopt_local_addrs>
    f3b4:	90 61 00 08 	stw     r3,8(r1)
						     optlen);
		break;
    f3b8:	48 00 02 30 	b       f5e8 <sctp_getsockopt+0x4c4>
	case SCTP_SOCKOPT_CONNECTX3:
		retval = sctp_getsockopt_connectx3(sk, len, optval, optlen);
    f3bc:	80 61 00 28 	lwz     r3,40(r1)
    f3c0:	80 81 00 1c 	lwz     r4,28(r1)
    f3c4:	80 a1 00 34 	lwz     r5,52(r1)
    f3c8:	80 c1 00 38 	lwz     r6,56(r1)
    f3cc:	4b ff 2b b1 	bl      1f7c <sctp_getsockopt_connectx3>
    f3d0:	90 61 00 08 	stw     r3,8(r1)
		break;
    f3d4:	48 00 02 14 	b       f5e8 <sctp_getsockopt+0x4c4>
	case SCTP_DEFAULT_SEND_PARAM:
		retval = sctp_getsockopt_default_send_param(sk, len,
    f3d8:	80 61 00 28 	lwz     r3,40(r1)
    f3dc:	80 81 00 1c 	lwz     r4,28(r1)
    f3e0:	80 a1 00 34 	lwz     r5,52(r1)
    f3e4:	80 c1 00 38 	lwz     r6,56(r1)
    f3e8:	4b ff ca 51 	bl      be38 <sctp_getsockopt_default_send_param>
    f3ec:	90 61 00 08 	stw     r3,8(r1)
							    optval, optlen);
		break;
    f3f0:	48 00 01 f8 	b       f5e8 <sctp_getsockopt+0x4c4>
	case SCTP_PRIMARY_ADDR:
		retval = sctp_getsockopt_primary_addr(sk, len, optval, optlen);
    f3f4:	80 61 00 28 	lwz     r3,40(r1)
    f3f8:	80 81 00 1c 	lwz     r4,28(r1)
    f3fc:	80 a1 00 34 	lwz     r5,52(r1)
    f400:	80 c1 00 38 	lwz     r6,56(r1)
    f404:	4b ff c4 91 	bl      b894 <sctp_getsockopt_primary_addr>
    f408:	90 61 00 08 	stw     r3,8(r1)
		break;
    f40c:	48 00 01 dc 	b       f5e8 <sctp_getsockopt+0x4c4>
	case SCTP_NODELAY:
		retval = sctp_getsockopt_nodelay(sk, len, optval, optlen);
    f410:	80 61 00 28 	lwz     r3,40(r1)
    f414:	80 81 00 1c 	lwz     r4,28(r1)
    f418:	80 a1 00 34 	lwz     r5,52(r1)
    f41c:	80 c1 00 38 	lwz     r6,56(r1)
    f420:	4b ff ce 31 	bl      c250 <sctp_getsockopt_nodelay>
    f424:	90 61 00 08 	stw     r3,8(r1)
		break;
    f428:	48 00 01 c0 	b       f5e8 <sctp_getsockopt+0x4c4>
	case SCTP_RTOINFO:
		retval = sctp_getsockopt_rtoinfo(sk, len, optval, optlen);
    f42c:	80 61 00 28 	lwz     r3,40(r1)
    f430:	80 81 00 1c 	lwz     r4,28(r1)
    f434:	80 a1 00 34 	lwz     r5,52(r1)
    f438:	80 c1 00 38 	lwz     r6,56(r1)
    f43c:	4b ff d0 1d 	bl      c458 <sctp_getsockopt_rtoinfo>
    f440:	90 61 00 08 	stw     r3,8(r1)
		break;
    f444:	48 00 01 a4 	b       f5e8 <sctp_getsockopt+0x4c4>
	case SCTP_ASSOCINFO:
		retval = sctp_getsockopt_associnfo(sk, len, optval, optlen);
    f448:	80 61 00 28 	lwz     r3,40(r1)
    f44c:	80 81 00 1c 	lwz     r4,28(r1)
    f450:	80 a1 00 34 	lwz     r5,52(r1)
    f454:	80 c1 00 38 	lwz     r6,56(r1)
    f458:	4b ff d3 ed 	bl      c844 <sctp_getsockopt_associnfo>
    f45c:	90 61 00 08 	stw     r3,8(r1)
		break;
    f460:	48 00 01 88 	b       f5e8 <sctp_getsockopt+0x4c4>
	case SCTP_I_WANT_MAPPED_V4_ADDR:
		retval = sctp_getsockopt_mappedv4(sk, len, optval, optlen);
    f464:	80 61 00 28 	lwz     r3,40(r1)
    f468:	80 81 00 1c 	lwz     r4,28(r1)
    f46c:	80 a1 00 34 	lwz     r5,52(r1)
    f470:	80 c1 00 38 	lwz     r6,56(r1)
    f474:	4b ff d8 89 	bl      ccfc <sctp_getsockopt_mappedv4>
    f478:	90 61 00 08 	stw     r3,8(r1)
		break;
    f47c:	48 00 01 6c 	b       f5e8 <sctp_getsockopt+0x4c4>
	case SCTP_MAXSEG:
		retval = sctp_getsockopt_maxseg(sk, len, optval, optlen);
    f480:	80 61 00 28 	lwz     r3,40(r1)
    f484:	80 81 00 1c 	lwz     r4,28(r1)
    f488:	80 a1 00 34 	lwz     r5,52(r1)
    f48c:	80 c1 00 38 	lwz     r6,56(r1)
    f490:	4b ff dd b1 	bl      d240 <sctp_getsockopt_maxseg>
    f494:	90 61 00 08 	stw     r3,8(r1)
		break;
    f498:	48 00 01 50 	b       f5e8 <sctp_getsockopt+0x4c4>
	case SCTP_GET_PEER_ADDR_INFO:
		retval = sctp_getsockopt_peer_addr_info(sk, len, optval,
    f49c:	80 61 00 28 	lwz     r3,40(r1)
    f4a0:	80 81 00 1c 	lwz     r4,28(r1)
    f4a4:	80 a1 00 34 	lwz     r5,52(r1)
    f4a8:	80 c1 00 38 	lwz     r6,56(r1)
    f4ac:	4b ff 99 85 	bl      8e30 <sctp_getsockopt_peer_addr_info>
    f4b0:	90 61 00 08 	stw     r3,8(r1)
							optlen);
		break;
    f4b4:	48 00 01 34 	b       f5e8 <sctp_getsockopt+0x4c4>
	case SCTP_ADAPTATION_LAYER:
		retval = sctp_getsockopt_adaptation_layer(sk, len, optval,
    f4b8:	80 61 00 28 	lwz     r3,40(r1)
    f4bc:	80 81 00 1c 	lwz     r4,28(r1)
    f4c0:	80 a1 00 34 	lwz     r5,52(r1)
    f4c4:	80 c1 00 38 	lwz     r6,56(r1)
    f4c8:	4b ff c7 79 	bl      bc40 <sctp_getsockopt_adaptation_layer>
    f4cc:	90 61 00 08 	stw     r3,8(r1)
							optlen);
		break;
    f4d0:	48 00 01 18 	b       f5e8 <sctp_getsockopt+0x4c4>
	case SCTP_CONTEXT:
		retval = sctp_getsockopt_context(sk, len, optval, optlen);
    f4d4:	80 61 00 28 	lwz     r3,40(r1)
    f4d8:	80 81 00 1c 	lwz     r4,28(r1)
    f4dc:	80 a1 00 34 	lwz     r5,52(r1)
    f4e0:	80 c1 00 38 	lwz     r6,56(r1)
    f4e4:	4b ff da 1d 	bl      cf00 <sctp_getsockopt_context>
    f4e8:	90 61 00 08 	stw     r3,8(r1)
		break;
    f4ec:	48 00 00 fc 	b       f5e8 <sctp_getsockopt+0x4c4>
	case SCTP_FRAGMENT_INTERLEAVE:
		retval = sctp_getsockopt_fragment_interleave(sk, len, optval,
    f4f0:	80 61 00 28 	lwz     r3,40(r1)
    f4f4:	80 81 00 1c 	lwz     r4,28(r1)
    f4f8:	80 a1 00 34 	lwz     r5,52(r1)
    f4fc:	80 c1 00 38 	lwz     r6,56(r1)
    f500:	4b ff e1 f9 	bl      d6f8 <sctp_getsockopt_fragment_interleave>
    f504:	90 61 00 08 	stw     r3,8(r1)
							     optlen);
		break;
    f508:	48 00 00 e0 	b       f5e8 <sctp_getsockopt+0x4c4>
	case SCTP_PARTIAL_DELIVERY_POINT:
		retval = sctp_getsockopt_partial_delivery_point(sk, len, optval,
    f50c:	80 61 00 28 	lwz     r3,40(r1)
    f510:	80 81 00 1c 	lwz     r4,28(r1)
    f514:	80 a1 00 34 	lwz     r5,52(r1)
    f518:	80 c1 00 38 	lwz     r6,56(r1)
    f51c:	4b ff e3 d9 	bl      d8f4 <sctp_getsockopt_partial_delivery_point>
    f520:	90 61 00 08 	stw     r3,8(r1)
								optlen);
		break;
    f524:	48 00 00 c4 	b       f5e8 <sctp_getsockopt+0x4c4>
	case SCTP_MAX_BURST:
		retval = sctp_getsockopt_maxburst(sk, len, optval, optlen);
    f528:	80 61 00 28 	lwz     r3,40(r1)
    f52c:	80 81 00 1c 	lwz     r4,28(r1)
    f530:	80 a1 00 34 	lwz     r5,52(r1)
    f534:	80 c1 00 38 	lwz     r6,56(r1)
    f538:	4b ff e5 b5 	bl      daec <sctp_getsockopt_maxburst>
    f53c:	90 61 00 08 	stw     r3,8(r1)
		break;
    f540:	48 00 00 a8 	b       f5e8 <sctp_getsockopt+0x4c4>
	case SCTP_AUTH_KEY:
	case SCTP_AUTH_CHUNK:
	case SCTP_AUTH_DELETE_KEY:
		retval = -EOPNOTSUPP;
    f544:	38 00 ff a1 	li      r0,-95
    f548:	90 01 00 08 	stw     r0,8(r1)
		break;
    f54c:	48 00 00 9c 	b       f5e8 <sctp_getsockopt+0x4c4>
	case SCTP_HMAC_IDENT:
		retval = sctp_getsockopt_hmac_ident(sk, len, optval, optlen);
    f550:	80 61 00 28 	lwz     r3,40(r1)
    f554:	80 81 00 1c 	lwz     r4,28(r1)
    f558:	80 a1 00 34 	lwz     r5,52(r1)
    f55c:	80 c1 00 38 	lwz     r6,56(r1)
    f560:	4b ff e9 6d 	bl      decc <sctp_getsockopt_hmac_ident>
    f564:	90 61 00 08 	stw     r3,8(r1)
		break;
    f568:	48 00 00 80 	b       f5e8 <sctp_getsockopt+0x4c4>
	case SCTP_AUTH_ACTIVE_KEY:
		retval = sctp_getsockopt_active_key(sk, len, optval, optlen);
    f56c:	80 61 00 28 	lwz     r3,40(r1)
    f570:	80 81 00 1c 	lwz     r4,28(r1)
    f574:	80 a1 00 34 	lwz     r5,52(r1)
    f578:	80 c1 00 38 	lwz     r6,56(r1)
    f57c:	4b ff ec 5d 	bl      e1d8 <sctp_getsockopt_active_key>
    f580:	90 61 00 08 	stw     r3,8(r1)
		break;
    f584:	48 00 00 64 	b       f5e8 <sctp_getsockopt+0x4c4>
	case SCTP_PEER_AUTH_CHUNKS:
		retval = sctp_getsockopt_peer_auth_chunks(sk, len, optval,
    f588:	80 61 00 28 	lwz     r3,40(r1)
    f58c:	80 81 00 1c 	lwz     r4,28(r1)
    f590:	80 a1 00 34 	lwz     r5,52(r1)
    f594:	80 c1 00 38 	lwz     r6,56(r1)
    f598:	4b ff ef f1 	bl      e588 <sctp_getsockopt_peer_auth_chunks>
    f59c:	90 61 00 08 	stw     r3,8(r1)
							optlen);
		break;
    f5a0:	48 00 00 48 	b       f5e8 <sctp_getsockopt+0x4c4>
	case SCTP_LOCAL_AUTH_CHUNKS:
		retval = sctp_getsockopt_local_auth_chunks(sk, len, optval,
    f5a4:	80 61 00 28 	lwz     r3,40(r1)
    f5a8:	80 81 00 1c 	lwz     r4,28(r1)
    f5ac:	80 a1 00 34 	lwz     r5,52(r1)
    f5b0:	80 c1 00 38 	lwz     r6,56(r1)
    f5b4:	4b ff f3 fd 	bl      e9b0 <sctp_getsockopt_local_auth_chunks>
    f5b8:	90 61 00 08 	stw     r3,8(r1)
							optlen);
		break;
    f5bc:	48 00 00 2c 	b       f5e8 <sctp_getsockopt+0x4c4>
	case SCTP_GET_ASSOC_NUMBER:
		retval = sctp_getsockopt_assoc_number(sk, len, optval, optlen);
    f5c0:	80 61 00 28 	lwz     r3,40(r1)
    f5c4:	80 81 00 1c 	lwz     r4,28(r1)
    f5c8:	80 a1 00 34 	lwz     r5,52(r1)
    f5cc:	80 c1 00 38 	lwz     r6,56(r1)
    f5d0:	4b ff f8 81 	bl      ee50 <sctp_getsockopt_assoc_number>
    f5d4:	90 61 00 08 	stw     r3,8(r1)
		break;
    f5d8:	48 00 00 10 	b       f5e8 <sctp_getsockopt+0x4c4>
	default:
		retval = -ENOPROTOOPT;
    f5dc:	38 00 ff a4 	li      r0,-92
    f5e0:	90 01 00 08 	stw     r0,8(r1)
		break;
    f5e4:	60 00 00 00 	nop
	}

	sctp_release_sock(sk);
    f5e8:	80 61 00 28 	lwz     r3,40(r1)
    f5ec:	48 00 00 01 	bl      f5ec <sctp_getsockopt+0x4c8>
	return retval;
    f5f0:	80 01 00 08 	lwz     r0,8(r1)
}
    f5f4:	7c 03 03 78 	mr      r3,r0
    f5f8:	80 01 00 54 	lwz     r0,84(r1)
    f5fc:	7c 08 03 a6 	mtlr    r0
    f600:	bb c1 00 48 	lmw     r30,72(r1)
    f604:	38 21 00 50 	addi    r1,r1,80
    f608:	4e 80 00 20 	blr

0000f60c <sctp_hash>:

static void sctp_hash(struct sock *sk)
{
    f60c:	94 21 ff f0 	stwu    r1,-16(r1)
    f610:	90 61 00 08 	stw     r3,8(r1)
	/* STUB */
}
    f614:	38 21 00 10 	addi    r1,r1,16
    f618:	4e 80 00 20 	blr

0000f61c <sctp_unhash>:

static void sctp_unhash(struct sock *sk)
{
    f61c:	94 21 ff f0 	stwu    r1,-16(r1)
    f620:	90 61 00 08 	stw     r3,8(r1)
	/* STUB */
}
    f624:	38 21 00 10 	addi    r1,r1,16
    f628:	4e 80 00 20 	blr

0000f62c <sctp_get_port_local>:
 */
static struct sctp_bind_bucket *sctp_bucket_create(
	struct sctp_bind_hashbucket *head, unsigned short snum);

static long sctp_get_port_local(struct sock *sk, union sctp_addr *addr)
{
    f62c:	94 21 ff 40 	stwu    r1,-192(r1)
    f630:	7c 08 02 a6 	mflr    r0
    f634:	90 01 00 c4 	stw     r0,196(r1)
    f638:	90 61 00 b8 	stw     r3,184(r1)
    f63c:	90 81 00 bc 	stw     r4,188(r1)
	struct sctp_bind_bucket *pp; /* hash list port iterator */
	struct hlist_node *node;
	unsigned short snum;
	int ret;

	snum = ntohs(addr->v4.sin_port);
    f640:	80 01 00 bc 	lwz     r0,188(r1)
    f644:	7c 09 03 78 	mr      r9,r0
    f648:	a0 09 00 02 	lhz     r0,2(r9)
    f64c:	b0 01 00 14 	sth     r0,20(r1)

	SCTP_DEBUG_PRINTK("sctp_get_port() begins, snum=%d\n", snum);
	sctp_local_bh_disable();
    f650:	48 00 00 01 	bl      f650 <sctp_get_port_local+0x24>

	if (snum == 0) {
    f654:	a0 01 00 14 	lhz     r0,20(r1)
    f658:	54 00 04 3e 	clrlwi  r0,r0,16
    f65c:	2f 80 00 00 	cmpwi   cr7,r0,0
    f660:	40 9e 02 40 	bne-    cr7,f8a0 <sctp_get_port_local+0x274>
		/* Search for an available port. */
		int low, high, remaining, index;
		unsigned int rover;

		inet_get_local_port_range(&low, &high);
    f664:	39 21 00 a4 	addi    r9,r1,164
    f668:	38 01 00 a8 	addi    r0,r1,168
    f66c:	7d 23 4b 78 	mr      r3,r9
    f670:	7c 04 03 78 	mr      r4,r0
    f674:	48 00 00 01 	bl      f674 <sctp_get_port_local+0x48>
		remaining = (high - low) + 1;
    f678:	81 21 00 a8 	lwz     r9,168(r1)
    f67c:	80 01 00 a4 	lwz     r0,164(r1)
    f680:	7c 00 48 50 	subf    r0,r0,r9
    f684:	30 00 00 01 	addic   r0,r0,1
    f688:	90 01 00 1c 	stw     r0,28(r1)
		rover = net_random() % remaining + low;
    f68c:	48 00 00 01 	bl      f68c <sctp_get_port_local+0x60>
    f690:	7c 60 1b 78 	mr      r0,r3
    f694:	81 21 00 1c 	lwz     r9,28(r1)
    f698:	7d 60 4b 96 	divwu   r11,r0,r9
    f69c:	7d 2b 49 d6 	mullw   r9,r11,r9
    f6a0:	7d 29 00 50 	subf    r9,r9,r0
    f6a4:	80 01 00 a4 	lwz     r0,164(r1)
    f6a8:	7c 09 02 14 	add     r0,r9,r0
    f6ac:	90 01 00 20 	stw     r0,32(r1)

		do {
			rover++;
    f6b0:	80 01 00 20 	lwz     r0,32(r1)
    f6b4:	30 00 00 01 	addic   r0,r0,1
    f6b8:	90 01 00 20 	stw     r0,32(r1)
			if ((rover < low) || (rover > high))
    f6bc:	80 01 00 a4 	lwz     r0,164(r1)
    f6c0:	7c 09 03 78 	mr      r9,r0
    f6c4:	80 01 00 20 	lwz     r0,32(r1)
    f6c8:	7f 89 00 40 	cmplw   cr7,r9,r0
    f6cc:	41 9d 00 18 	bgt-    cr7,f6e4 <sctp_get_port_local+0xb8>
    f6d0:	80 01 00 a8 	lwz     r0,168(r1)
    f6d4:	7c 09 03 78 	mr      r9,r0
    f6d8:	80 01 00 20 	lwz     r0,32(r1)
    f6dc:	7f 89 00 40 	cmplw   cr7,r9,r0
    f6e0:	40 9c 00 0c 	bge-    cr7,f6ec <sctp_get_port_local+0xc0>
				rover = low;
    f6e4:	80 01 00 a4 	lwz     r0,164(r1)
    f6e8:	90 01 00 20 	stw     r0,32(r1)
			if (inet_is_reserved_local_port(rover))
    f6ec:	80 01 00 20 	lwz     r0,32(r1)
    f6f0:	90 01 00 40 	stw     r0,64(r1)
extern void inet_get_local_port_range(int *low, int *high);

extern unsigned long *sysctl_local_reserved_ports;
static inline int inet_is_reserved_local_port(int port)
{
	return test_bit(port, sysctl_local_reserved_ports);
    f6f4:	3c 00 00 00 	lis     r0,0
    f6f8:	7c 0a 03 78 	mr      r10,r0
    f6fc:	80 0a 00 00 	lwz     r0,0(r10)
    f700:	81 21 00 40 	lwz     r9,64(r1)
    f704:	91 21 00 44 	stw     r9,68(r1)
    f708:	90 01 00 48 	stw     r0,72(r1)
    f70c:	80 01 00 44 	lwz     r0,68(r1)
    f710:	7c 00 2e 70 	srawi   r0,r0,5
    f714:	7c 00 01 94 	addze   r0,r0
    f718:	54 00 10 3a 	rlwinm  r0,r0,2,0,29
    f71c:	81 21 00 48 	lwz     r9,72(r1)
    f720:	7c 09 02 14 	add     r0,r9,r0
    f724:	7c 0b 03 78 	mr      r11,r0
    f728:	81 2b 00 00 	lwz     r9,0(r11)
    f72c:	80 01 00 44 	lwz     r0,68(r1)
    f730:	54 00 06 fe 	clrlwi  r0,r0,27
    f734:	7d 20 04 30 	srw     r0,r9,r0
    f738:	54 00 07 fe 	clrlwi  r0,r0,31
    f73c:	2f 80 00 00 	cmpwi   cr7,r0,0
    f740:	40 9e 01 1c 	bne-    cr7,f85c <sctp_get_port_local+0x230>
				continue;
			index = sctp_phashfn(rover);
    f744:	80 01 00 20 	lwz     r0,32(r1)
    f748:	54 00 04 3e 	clrlwi  r0,r0,16
    f74c:	b0 01 00 4c 	sth     r0,76(r1)

/* Warning: The following hash functions assume a power of two 'size'. */
/* This is the hash function for the SCTP port hash table. */
static inline int sctp_phashfn(__u16 lport)
{
	return lport & (sctp_port_hashsize - 1);
    f750:	a0 01 00 4c 	lhz     r0,76(r1)
    f754:	54 09 04 3e 	clrlwi  r9,r0,16
    f758:	3c 00 00 00 	lis     r0,0
    f75c:	30 00 00 00 	addic   r0,r0,0
    f760:	7c 0a 03 78 	mr      r10,r0
    f764:	80 0a 00 58 	lwz     r0,88(r10)
    f768:	30 00 ff ff 	addic   r0,r0,-1
    f76c:	7d 20 00 38 	and     r0,r9,r0
    f770:	90 01 00 24 	stw     r0,36(r1)
			head = &sctp_port_hashtable[index];
    f774:	3c 00 00 00 	lis     r0,0
    f778:	30 00 00 00 	addic   r0,r0,0
    f77c:	7c 0b 03 78 	mr      r11,r0
    f780:	81 2b 00 5c 	lwz     r9,92(r11)
    f784:	80 01 00 24 	lwz     r0,36(r1)
    f788:	54 00 10 3a 	rlwinm  r0,r0,2,0,29
    f78c:	7c 09 02 14 	add     r0,r9,r0
    f790:	90 01 00 08 	stw     r0,8(r1)
			sctp_spin_lock(&head->lock);
    f794:	80 01 00 08 	lwz     r0,8(r1)
    f798:	90 01 00 94 	stw     r0,148(r1)
			sctp_for_each_hentry(pp, node, &head->chain)
    f79c:	80 01 00 08 	lwz     r0,8(r1)
    f7a0:	7c 09 03 78 	mr      r9,r0
    f7a4:	80 09 00 00 	lwz     r0,0(r9)
    f7a8:	90 01 00 10 	stw     r0,16(r1)
    f7ac:	48 00 00 34 	b       f7e0 <sctp_get_port_local+0x1b4>
				if (pp->port == rover)
    f7b0:	80 01 00 0c 	lwz     r0,12(r1)
    f7b4:	7c 0a 03 78 	mr      r10,r0
    f7b8:	a0 0a 00 00 	lhz     r0,0(r10)
    f7bc:	54 00 04 3e 	clrlwi  r0,r0,16
    f7c0:	7c 09 03 78 	mr      r9,r0
    f7c4:	80 01 00 20 	lwz     r0,32(r1)
    f7c8:	7f 89 00 00 	cmpw    cr7,r9,r0
    f7cc:	41 9e 00 80 	beq-    cr7,f84c <sctp_get_port_local+0x220>
			if (inet_is_reserved_local_port(rover))
				continue;
			index = sctp_phashfn(rover);
			head = &sctp_port_hashtable[index];
			sctp_spin_lock(&head->lock);
			sctp_for_each_hentry(pp, node, &head->chain)
    f7d0:	80 01 00 10 	lwz     r0,16(r1)
    f7d4:	7c 0b 03 78 	mr      r11,r0
    f7d8:	80 0b 00 00 	lwz     r0,0(r11)
    f7dc:	90 01 00 10 	stw     r0,16(r1)
    f7e0:	80 01 00 10 	lwz     r0,16(r1)
    f7e4:	2f 80 00 00 	cmpwi   cr7,r0,0
    f7e8:	41 9e 00 94 	beq-    cr7,f87c <sctp_get_port_local+0x250>
    f7ec:	80 01 00 10 	lwz     r0,16(r1)
    f7f0:	7c 09 03 78 	mr      r9,r0
    f7f4:	80 09 00 00 	lwz     r0,0(r9)
    f7f8:	90 01 00 50 	stw     r0,80(r1)
#define ARCH_HAS_PREFETCHW
#define ARCH_HAS_SPINLOCK_PREFETCH

static inline void prefetch(const void *x)
{
	if (unlikely(!x))
    f7fc:	80 01 00 50 	lwz     r0,80(r1)
    f800:	2f 80 00 00 	cmpwi   cr7,r0,0
    f804:	7c 00 00 26 	mfcr    r0
    f808:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
    f80c:	2f 80 00 00 	cmpwi   cr7,r0,0
    f810:	40 9e 00 0c 	bne-    cr7,f81c <sctp_get_port_local+0x1f0>
		return;

	__asm__ __volatile__ ("dcbt 0,%0" : : "r" (x));
    f814:	80 01 00 50 	lwz     r0,80(r1)
    f818:	7c 00 02 2c 	dcbt    r0,r0
    f81c:	38 00 00 01 	li      r0,1
    f820:	2f 80 00 00 	cmpwi   cr7,r0,0
    f824:	41 9e 00 58 	beq-    cr7,f87c <sctp_get_port_local+0x250>
    f828:	80 01 00 10 	lwz     r0,16(r1)
    f82c:	90 01 00 28 	stw     r0,40(r1)
    f830:	80 01 00 28 	lwz     r0,40(r1)
    f834:	30 00 ff fc 	addic   r0,r0,-4
    f838:	90 01 00 0c 	stw     r0,12(r1)
    f83c:	38 00 00 01 	li      r0,1
    f840:	2f 80 00 00 	cmpwi   cr7,r0,0
    f844:	40 9e ff 6c 	bne+    cr7,f7b0 <sctp_get_port_local+0x184>
				if (pp->port == rover)
					goto next;
			break;
    f848:	48 00 00 34 	b       f87c <sctp_get_port_local+0x250>
			index = sctp_phashfn(rover);
			head = &sctp_port_hashtable[index];
			sctp_spin_lock(&head->lock);
			sctp_for_each_hentry(pp, node, &head->chain)
				if (pp->port == rover)
					goto next;
    f84c:	60 00 00 00 	nop
			break;
		next:
			sctp_spin_unlock(&head->lock);
    f850:	80 01 00 08 	lwz     r0,8(r1)
    f854:	90 01 00 98 	stw     r0,152(r1)
    f858:	48 00 00 08 	b       f860 <sctp_get_port_local+0x234>
		do {
			rover++;
			if ((rover < low) || (rover > high))
				rover = low;
			if (inet_is_reserved_local_port(rover))
				continue;
    f85c:	60 00 00 00 	nop
				if (pp->port == rover)
					goto next;
			break;
		next:
			sctp_spin_unlock(&head->lock);
		} while (--remaining > 0);
    f860:	80 01 00 1c 	lwz     r0,28(r1)
    f864:	30 00 ff ff 	addic   r0,r0,-1
    f868:	90 01 00 1c 	stw     r0,28(r1)
    f86c:	80 01 00 1c 	lwz     r0,28(r1)
    f870:	2f 80 00 00 	cmpwi   cr7,r0,0
    f874:	41 9d fe 3c 	bgt+    cr7,f6b0 <sctp_get_port_local+0x84>
    f878:	48 00 00 08 	b       f880 <sctp_get_port_local+0x254>
			head = &sctp_port_hashtable[index];
			sctp_spin_lock(&head->lock);
			sctp_for_each_hentry(pp, node, &head->chain)
				if (pp->port == rover)
					goto next;
			break;
    f87c:	60 00 00 00 	nop
		next:
			sctp_spin_unlock(&head->lock);
		} while (--remaining > 0);

		/* Exhausted local port range during search? */
		ret = 1;
    f880:	38 00 00 01 	li      r0,1
    f884:	90 01 00 18 	stw     r0,24(r1)
		if (remaining <= 0)
    f888:	80 01 00 1c 	lwz     r0,28(r1)
    f88c:	2f 80 00 00 	cmpwi   cr7,r0,0
    f890:	40 9d 04 ec 	ble-    cr7,fd7c <sctp_get_port_local+0x750>

		/* OK, here is the one we will use.  HEAD (the port
		 * hash table list entry) is non-NULL and we hold it's
		 * mutex.
		 */
		snum = rover;
    f894:	80 01 00 20 	lwz     r0,32(r1)
    f898:	b0 01 00 14 	sth     r0,20(r1)
    f89c:	48 00 00 fc 	b       f998 <sctp_get_port_local+0x36c>
		 * that it is not being used. If it is used, we will
		 * exahust the search in the hash list corresponding
		 * to the port number (snum) - we detect that with the
		 * port iterator, pp being NULL.
		 */
		head = &sctp_port_hashtable[sctp_phashfn(snum)];
    f8a0:	3c 00 00 00 	lis     r0,0
    f8a4:	30 00 00 00 	addic   r0,r0,0
    f8a8:	7c 0a 03 78 	mr      r10,r0
    f8ac:	81 2a 00 5c 	lwz     r9,92(r10)
    f8b0:	a0 01 00 14 	lhz     r0,20(r1)
    f8b4:	b0 01 00 54 	sth     r0,84(r1)
    f8b8:	a0 01 00 54 	lhz     r0,84(r1)
    f8bc:	54 0b 04 3e 	clrlwi  r11,r0,16
    f8c0:	3c 00 00 00 	lis     r0,0
    f8c4:	30 00 00 00 	addic   r0,r0,0
    f8c8:	7c 0a 03 78 	mr      r10,r0
    f8cc:	80 0a 00 58 	lwz     r0,88(r10)
    f8d0:	30 00 ff ff 	addic   r0,r0,-1
    f8d4:	7d 60 00 38 	and     r0,r11,r0
    f8d8:	54 00 10 3a 	rlwinm  r0,r0,2,0,29
    f8dc:	7c 09 02 14 	add     r0,r9,r0
    f8e0:	90 01 00 08 	stw     r0,8(r1)
		sctp_spin_lock(&head->lock);
    f8e4:	80 01 00 08 	lwz     r0,8(r1)
    f8e8:	90 01 00 9c 	stw     r0,156(r1)
		sctp_for_each_hentry(pp, node, &head->chain) {
    f8ec:	80 01 00 08 	lwz     r0,8(r1)
    f8f0:	7c 0b 03 78 	mr      r11,r0
    f8f4:	80 0b 00 00 	lwz     r0,0(r11)
    f8f8:	90 01 00 10 	stw     r0,16(r1)
    f8fc:	48 00 00 34 	b       f930 <sctp_get_port_local+0x304>
			if (pp->port == snum)
    f900:	80 01 00 0c 	lwz     r0,12(r1)
    f904:	7c 09 03 78 	mr      r9,r0
    f908:	a0 09 00 00 	lhz     r0,0(r9)
    f90c:	54 00 04 3e 	clrlwi  r0,r0,16
    f910:	a1 21 00 14 	lhz     r9,20(r1)
    f914:	55 29 04 3e 	clrlwi  r9,r9,16
    f918:	7f 89 00 00 	cmpw    cr7,r9,r0
    f91c:	41 9e 00 88 	beq-    cr7,f9a4 <sctp_get_port_local+0x378>
		 * to the port number (snum) - we detect that with the
		 * port iterator, pp being NULL.
		 */
		head = &sctp_port_hashtable[sctp_phashfn(snum)];
		sctp_spin_lock(&head->lock);
		sctp_for_each_hentry(pp, node, &head->chain) {
    f920:	80 01 00 10 	lwz     r0,16(r1)
    f924:	7c 0a 03 78 	mr      r10,r0
    f928:	80 0a 00 00 	lwz     r0,0(r10)
    f92c:	90 01 00 10 	stw     r0,16(r1)
    f930:	80 01 00 10 	lwz     r0,16(r1)
    f934:	2f 80 00 00 	cmpwi   cr7,r0,0
    f938:	41 9e 00 60 	beq-    cr7,f998 <sctp_get_port_local+0x36c>
    f93c:	80 01 00 10 	lwz     r0,16(r1)
    f940:	7c 0b 03 78 	mr      r11,r0
    f944:	80 0b 00 00 	lwz     r0,0(r11)
    f948:	90 01 00 58 	stw     r0,88(r1)
#define ARCH_HAS_PREFETCHW
#define ARCH_HAS_SPINLOCK_PREFETCH

static inline void prefetch(const void *x)
{
	if (unlikely(!x))
    f94c:	80 01 00 58 	lwz     r0,88(r1)
    f950:	2f 80 00 00 	cmpwi   cr7,r0,0
    f954:	7c 00 00 26 	mfcr    r0
    f958:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
    f95c:	2f 80 00 00 	cmpwi   cr7,r0,0
    f960:	40 9e 00 0c 	bne-    cr7,f96c <sctp_get_port_local+0x340>
		return;

	__asm__ __volatile__ ("dcbt 0,%0" : : "r" (x));
    f964:	80 01 00 58 	lwz     r0,88(r1)
    f968:	7c 00 02 2c 	dcbt    r0,r0
    f96c:	38 00 00 01 	li      r0,1
    f970:	2f 80 00 00 	cmpwi   cr7,r0,0
    f974:	41 9e 00 24 	beq-    cr7,f998 <sctp_get_port_local+0x36c>
    f978:	80 01 00 10 	lwz     r0,16(r1)
    f97c:	90 01 00 2c 	stw     r0,44(r1)
    f980:	80 01 00 2c 	lwz     r0,44(r1)
    f984:	30 00 ff fc 	addic   r0,r0,-4
    f988:	90 01 00 0c 	stw     r0,12(r1)
    f98c:	38 00 00 01 	li      r0,1
    f990:	2f 80 00 00 	cmpwi   cr7,r0,0
    f994:	40 9e ff 6c 	bne+    cr7,f900 <sctp_get_port_local+0x2d4>
			if (pp->port == snum)
				goto pp_found;
		}
	}
	pp = NULL;
    f998:	38 00 00 00 	li      r0,0
    f99c:	90 01 00 0c 	stw     r0,12(r1)
	goto pp_not_found;
    f9a0:	48 00 01 d4 	b       fb74 <sctp_get_port_local+0x548>
		 */
		head = &sctp_port_hashtable[sctp_phashfn(snum)];
		sctp_spin_lock(&head->lock);
		sctp_for_each_hentry(pp, node, &head->chain) {
			if (pp->port == snum)
				goto pp_found;
    f9a4:	60 00 00 00 	nop
		}
	}
	pp = NULL;
	goto pp_not_found;
pp_found:
	if (!hlist_empty(&pp->owner)) {
    f9a8:	80 01 00 0c 	lwz     r0,12(r1)
    f9ac:	30 00 00 0c 	addic   r0,r0,12
    f9b0:	90 01 00 5c 	stw     r0,92(r1)
	return !h->pprev;
}

static inline int hlist_empty(const struct hlist_head *h)
{
	return !h->first;
    f9b4:	80 01 00 5c 	lwz     r0,92(r1)
    f9b8:	7c 09 03 78 	mr      r9,r0
    f9bc:	80 09 00 00 	lwz     r0,0(r9)
    f9c0:	2f 80 00 00 	cmpwi   cr7,r0,0
    f9c4:	7c 00 00 26 	mfcr    r0
    f9c8:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
    f9cc:	2f 80 00 00 	cmpwi   cr7,r0,0
    f9d0:	40 9e 01 a4 	bne-    cr7,fb74 <sctp_get_port_local+0x548>
		/* We had a port hash table hit - there is an
		 * available port (pp != NULL) and it is being
		 * used by other socket (pp->owner not empty); that other
		 * socket is going to be sk2.
		 */
		int reuse = sk->sk_reuse;
    f9d4:	80 01 00 b8 	lwz     r0,184(r1)
    f9d8:	7c 0a 03 78 	mr      r10,r0
    f9dc:	88 0a 00 0f 	lbz     r0,15(r10)
    f9e0:	54 00 06 3e 	clrlwi  r0,r0,24
    f9e4:	90 01 00 30 	stw     r0,48(r1)
		struct sock *sk2;

		SCTP_DEBUG_PRINTK("sctp_get_port() found a possible match\n");
		if (pp->fastreuse && sk->sk_reuse &&
    f9e8:	80 01 00 0c 	lwz     r0,12(r1)
    f9ec:	7c 0b 03 78 	mr      r11,r0
    f9f0:	a0 0b 00 02 	lhz     r0,2(r11)
    f9f4:	54 00 04 3e 	clrlwi  r0,r0,16
    f9f8:	2f 80 00 00 	cmpwi   cr7,r0,0
    f9fc:	41 9e 00 34 	beq-    cr7,fa30 <sctp_get_port_local+0x404>
    fa00:	80 01 00 b8 	lwz     r0,184(r1)
    fa04:	7c 09 03 78 	mr      r9,r0
    fa08:	88 09 00 0f 	lbz     r0,15(r9)
    fa0c:	54 00 06 3e 	clrlwi  r0,r0,24
    fa10:	2f 80 00 00 	cmpwi   cr7,r0,0
    fa14:	41 9e 00 1c 	beq-    cr7,fa30 <sctp_get_port_local+0x404>
			sk->sk_state != SCTP_SS_LISTENING)
    fa18:	80 01 00 b8 	lwz     r0,184(r1)
    fa1c:	7c 0a 03 78 	mr      r10,r0
    fa20:	88 0a 00 0e 	lbz     r0,14(r10)
    fa24:	54 00 06 3e 	clrlwi  r0,r0,24
		 */
		int reuse = sk->sk_reuse;
		struct sock *sk2;

		SCTP_DEBUG_PRINTK("sctp_get_port() found a possible match\n");
		if (pp->fastreuse && sk->sk_reuse &&
    fa28:	2f 80 00 0a 	cmpwi   cr7,r0,10
    fa2c:	40 9e 02 60 	bne-    cr7,fc8c <sctp_get_port_local+0x660>
		 * comparing each of the addresses with the address of
		 * the socket sk. If we find a match, then that means
		 * that this port/socket (sk) combination are already
		 * in an endpoint.
		 */
		sk_for_each_bound(sk2, node, &pp->owner) {
    fa30:	80 01 00 0c 	lwz     r0,12(r1)
    fa34:	7c 0b 03 78 	mr      r11,r0
    fa38:	80 0b 00 0c 	lwz     r0,12(r11)
    fa3c:	90 01 00 10 	stw     r0,16(r1)
    fa40:	48 00 00 cc 	b       fb0c <sctp_get_port_local+0x4e0>
    fa44:	80 01 00 38 	lwz     r0,56(r1)
    fa48:	90 01 00 60 	stw     r0,96(r1)
    fa4c:	80 01 00 60 	lwz     r0,96(r1)
			struct sctp_endpoint *ep2;
			ep2 = sctp_sk(sk2)->ep;
    fa50:	7c 09 03 78 	mr      r9,r0
    fa54:	80 09 01 d4 	lwz     r0,468(r9)
    fa58:	90 01 00 3c 	stw     r0,60(r1)

			if (sk == sk2 ||
    fa5c:	81 21 00 b8 	lwz     r9,184(r1)
    fa60:	80 01 00 38 	lwz     r0,56(r1)
    fa64:	7f 89 00 00 	cmpw    cr7,r9,r0
    fa68:	41 9e 00 90 	beq-    cr7,faf8 <sctp_get_port_local+0x4cc>
    fa6c:	80 01 00 30 	lwz     r0,48(r1)
    fa70:	2f 80 00 00 	cmpwi   cr7,r0,0
    fa74:	41 9e 00 34 	beq-    cr7,faa8 <sctp_get_port_local+0x47c>
			    (reuse && sk2->sk_reuse &&
    fa78:	80 01 00 38 	lwz     r0,56(r1)
    fa7c:	7c 0a 03 78 	mr      r10,r0
    fa80:	88 0a 00 0f 	lbz     r0,15(r10)
    fa84:	54 00 06 3e 	clrlwi  r0,r0,24
    fa88:	2f 80 00 00 	cmpwi   cr7,r0,0
    fa8c:	41 9e 00 1c 	beq-    cr7,faa8 <sctp_get_port_local+0x47c>
			     sk2->sk_state != SCTP_SS_LISTENING))
    fa90:	80 01 00 38 	lwz     r0,56(r1)
    fa94:	7c 0b 03 78 	mr      r11,r0
    fa98:	88 0b 00 0e 	lbz     r0,14(r11)
    fa9c:	54 00 06 3e 	clrlwi  r0,r0,24
		sk_for_each_bound(sk2, node, &pp->owner) {
			struct sctp_endpoint *ep2;
			ep2 = sctp_sk(sk2)->ep;

			if (sk == sk2 ||
			    (reuse && sk2->sk_reuse &&
    faa0:	2f 80 00 0a 	cmpwi   cr7,r0,10
    faa4:	40 9e 00 54 	bne-    cr7,faf8 <sctp_get_port_local+0x4cc>
			     sk2->sk_state != SCTP_SS_LISTENING))
				continue;

			if (sctp_bind_addr_conflict(&ep2->base.bind_addr, addr,
    faa8:	80 01 00 3c 	lwz     r0,60(r1)
    faac:	31 60 00 3c 	addic   r11,r0,60
    fab0:	80 01 00 38 	lwz     r0,56(r1)
    fab4:	90 01 00 64 	stw     r0,100(r1)
    fab8:	80 01 00 64 	lwz     r0,100(r1)
    fabc:	7c 09 03 78 	mr      r9,r0
    fac0:	80 01 00 b8 	lwz     r0,184(r1)
    fac4:	90 01 00 68 	stw     r0,104(r1)
    fac8:	80 01 00 68 	lwz     r0,104(r1)
    facc:	7d 63 5b 78 	mr      r3,r11
    fad0:	80 81 00 bc 	lwz     r4,188(r1)
    fad4:	7d 25 4b 78 	mr      r5,r9
    fad8:	7c 06 03 78 	mr      r6,r0
    fadc:	48 00 00 01 	bl      fadc <sctp_get_port_local+0x4b0>
    fae0:	7c 60 1b 78 	mr      r0,r3
    fae4:	2f 80 00 00 	cmpwi   cr7,r0,0
    fae8:	41 9e 00 14 	beq-    cr7,fafc <sctp_get_port_local+0x4d0>
						 sctp_sk(sk2), sctp_sk(sk))) {
				ret = (long)sk2;
    faec:	80 01 00 38 	lwz     r0,56(r1)
    faf0:	90 01 00 18 	stw     r0,24(r1)
				goto fail_unlock;
    faf4:	48 00 02 7c 	b       fd70 <sctp_get_port_local+0x744>
			ep2 = sctp_sk(sk2)->ep;

			if (sk == sk2 ||
			    (reuse && sk2->sk_reuse &&
			     sk2->sk_state != SCTP_SS_LISTENING))
				continue;
    faf8:	60 00 00 00 	nop
		 * comparing each of the addresses with the address of
		 * the socket sk. If we find a match, then that means
		 * that this port/socket (sk) combination are already
		 * in an endpoint.
		 */
		sk_for_each_bound(sk2, node, &pp->owner) {
    fafc:	80 01 00 10 	lwz     r0,16(r1)
    fb00:	7c 09 03 78 	mr      r9,r0
    fb04:	80 09 00 00 	lwz     r0,0(r9)
    fb08:	90 01 00 10 	stw     r0,16(r1)
    fb0c:	80 01 00 10 	lwz     r0,16(r1)
    fb10:	2f 80 00 00 	cmpwi   cr7,r0,0
    fb14:	41 9e 00 60 	beq-    cr7,fb74 <sctp_get_port_local+0x548>
    fb18:	80 01 00 10 	lwz     r0,16(r1)
    fb1c:	7c 0a 03 78 	mr      r10,r0
    fb20:	80 0a 00 00 	lwz     r0,0(r10)
    fb24:	90 01 00 6c 	stw     r0,108(r1)
#define ARCH_HAS_PREFETCHW
#define ARCH_HAS_SPINLOCK_PREFETCH

static inline void prefetch(const void *x)
{
	if (unlikely(!x))
    fb28:	80 01 00 6c 	lwz     r0,108(r1)
    fb2c:	2f 80 00 00 	cmpwi   cr7,r0,0
    fb30:	7c 00 00 26 	mfcr    r0
    fb34:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
    fb38:	2f 80 00 00 	cmpwi   cr7,r0,0
    fb3c:	40 9e 00 0c 	bne-    cr7,fb48 <sctp_get_port_local+0x51c>
		return;

	__asm__ __volatile__ ("dcbt 0,%0" : : "r" (x));
    fb40:	80 01 00 6c 	lwz     r0,108(r1)
    fb44:	7c 00 02 2c 	dcbt    r0,r0
    fb48:	38 00 00 01 	li      r0,1
    fb4c:	2f 80 00 00 	cmpwi   cr7,r0,0
    fb50:	41 9e 00 24 	beq-    cr7,fb74 <sctp_get_port_local+0x548>
    fb54:	80 01 00 10 	lwz     r0,16(r1)
    fb58:	90 01 00 34 	stw     r0,52(r1)
    fb5c:	80 01 00 34 	lwz     r0,52(r1)
    fb60:	30 00 ff ec 	addic   r0,r0,-20
    fb64:	90 01 00 38 	stw     r0,56(r1)
    fb68:	38 00 00 01 	li      r0,1
    fb6c:	2f 80 00 00 	cmpwi   cr7,r0,0
    fb70:	40 9e fe d4 	bne+    cr7,fa44 <sctp_get_port_local+0x418>
		}
		SCTP_DEBUG_PRINTK("sctp_get_port(): Found a match\n");
	}
pp_not_found:
	/* If there was a hash table miss, create a new port.  */
	ret = 1;
    fb74:	38 00 00 01 	li      r0,1
    fb78:	90 01 00 18 	stw     r0,24(r1)
	if (!pp && !(pp = sctp_bucket_create(head, snum)))
    fb7c:	80 01 00 0c 	lwz     r0,12(r1)
    fb80:	2f 80 00 00 	cmpwi   cr7,r0,0
    fb84:	40 9e 00 28 	bne-    cr7,fbac <sctp_get_port_local+0x580>
    fb88:	a0 01 00 14 	lhz     r0,20(r1)
    fb8c:	54 00 04 3e 	clrlwi  r0,r0,16
    fb90:	80 61 00 08 	lwz     r3,8(r1)
    fb94:	7c 04 03 78 	mr      r4,r0
    fb98:	48 00 0a 7d 	bl      10614 <sctp_bucket_create>
    fb9c:	90 61 00 0c 	stw     r3,12(r1)
    fba0:	80 01 00 0c 	lwz     r0,12(r1)
    fba4:	2f 80 00 00 	cmpwi   cr7,r0,0
    fba8:	41 9e 01 c4 	beq-    cr7,fd6c <sctp_get_port_local+0x740>

	/* In either case (hit or miss), make sure fastreuse is 1 only
	 * if sk->sk_reuse is too (that is, if the caller requested
	 * SO_REUSEADDR on this socket -sk-).
	 */
	if (hlist_empty(&pp->owner)) {
    fbac:	80 01 00 0c 	lwz     r0,12(r1)
    fbb0:	30 00 00 0c 	addic   r0,r0,12
    fbb4:	90 01 00 70 	stw     r0,112(r1)
    fbb8:	80 01 00 70 	lwz     r0,112(r1)
    fbbc:	7c 0b 03 78 	mr      r11,r0
    fbc0:	80 0b 00 00 	lwz     r0,0(r11)
    fbc4:	2f 80 00 00 	cmpwi   cr7,r0,0
    fbc8:	7c 00 00 26 	mfcr    r0
    fbcc:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
    fbd0:	2f 80 00 00 	cmpwi   cr7,r0,0
    fbd4:	41 9e 00 5c 	beq-    cr7,fc30 <sctp_get_port_local+0x604>
		if (sk->sk_reuse && sk->sk_state != SCTP_SS_LISTENING)
    fbd8:	80 01 00 b8 	lwz     r0,184(r1)
    fbdc:	7c 09 03 78 	mr      r9,r0
    fbe0:	88 09 00 0f 	lbz     r0,15(r9)
    fbe4:	54 00 06 3e 	clrlwi  r0,r0,24
    fbe8:	2f 80 00 00 	cmpwi   cr7,r0,0
    fbec:	41 9e 00 30 	beq-    cr7,fc1c <sctp_get_port_local+0x5f0>
    fbf0:	80 01 00 b8 	lwz     r0,184(r1)
    fbf4:	7c 0a 03 78 	mr      r10,r0
    fbf8:	88 0a 00 0e 	lbz     r0,14(r10)
    fbfc:	54 00 06 3e 	clrlwi  r0,r0,24
    fc00:	2f 80 00 0a 	cmpwi   cr7,r0,10
    fc04:	41 9e 00 18 	beq-    cr7,fc1c <sctp_get_port_local+0x5f0>
			pp->fastreuse = 1;
    fc08:	80 01 00 0c 	lwz     r0,12(r1)
    fc0c:	39 20 00 01 	li      r9,1
    fc10:	7c 0b 03 78 	mr      r11,r0
    fc14:	b1 2b 00 02 	sth     r9,2(r11)
    fc18:	48 00 00 78 	b       fc90 <sctp_get_port_local+0x664>
		else
			pp->fastreuse = 0;
    fc1c:	80 01 00 0c 	lwz     r0,12(r1)
    fc20:	39 20 00 00 	li      r9,0
    fc24:	7c 0a 03 78 	mr      r10,r0
    fc28:	b1 2a 00 02 	sth     r9,2(r10)
    fc2c:	48 00 00 64 	b       fc90 <sctp_get_port_local+0x664>
	} else if (pp->fastreuse &&
    fc30:	80 01 00 0c 	lwz     r0,12(r1)
    fc34:	7c 0b 03 78 	mr      r11,r0
    fc38:	a0 0b 00 02 	lhz     r0,2(r11)
    fc3c:	54 00 04 3e 	clrlwi  r0,r0,16
    fc40:	2f 80 00 00 	cmpwi   cr7,r0,0
    fc44:	41 9e 00 4c 	beq-    cr7,fc90 <sctp_get_port_local+0x664>
		(!sk->sk_reuse || sk->sk_state == SCTP_SS_LISTENING))
    fc48:	80 01 00 b8 	lwz     r0,184(r1)
    fc4c:	7c 09 03 78 	mr      r9,r0
    fc50:	88 09 00 0f 	lbz     r0,15(r9)
    fc54:	54 00 06 3e 	clrlwi  r0,r0,24
	if (hlist_empty(&pp->owner)) {
		if (sk->sk_reuse && sk->sk_state != SCTP_SS_LISTENING)
			pp->fastreuse = 1;
		else
			pp->fastreuse = 0;
	} else if (pp->fastreuse &&
    fc58:	2f 80 00 00 	cmpwi   cr7,r0,0
    fc5c:	41 9e 00 1c 	beq-    cr7,fc78 <sctp_get_port_local+0x64c>
		(!sk->sk_reuse || sk->sk_state == SCTP_SS_LISTENING))
    fc60:	80 01 00 b8 	lwz     r0,184(r1)
    fc64:	7c 0a 03 78 	mr      r10,r0
    fc68:	88 0a 00 0e 	lbz     r0,14(r10)
    fc6c:	54 00 06 3e 	clrlwi  r0,r0,24
    fc70:	2f 80 00 0a 	cmpwi   cr7,r0,10
    fc74:	40 9e 00 1c 	bne-    cr7,fc90 <sctp_get_port_local+0x664>
		pp->fastreuse = 0;
    fc78:	80 01 00 0c 	lwz     r0,12(r1)
    fc7c:	39 20 00 00 	li      r9,0
    fc80:	7c 0b 03 78 	mr      r11,r0
    fc84:	b1 2b 00 02 	sth     r9,2(r11)
    fc88:	48 00 00 08 	b       fc90 <sctp_get_port_local+0x664>
		struct sock *sk2;

		SCTP_DEBUG_PRINTK("sctp_get_port() found a possible match\n");
		if (pp->fastreuse && sk->sk_reuse &&
			sk->sk_state != SCTP_SS_LISTENING)
			goto success;
    fc8c:	60 00 00 00 	nop
			pp->fastreuse = 1;
		else
			pp->fastreuse = 0;
	} else if (pp->fastreuse &&
		(!sk->sk_reuse || sk->sk_state == SCTP_SS_LISTENING))
		pp->fastreuse = 0;
    fc90:	80 01 00 b8 	lwz     r0,184(r1)
    fc94:	90 01 00 74 	stw     r0,116(r1)
    fc98:	80 01 00 74 	lwz     r0,116(r1)
	/* We are set, so fill up all the data in the hash table
	 * entry, tie the socket list information with the rest of the
	 * sockets FIXME: Blurry, NPI (ipg).
	 */
success:
	if (!sctp_sk(sk)->bind_hash) {
    fc9c:	7c 09 03 78 	mr      r9,r0
    fca0:	80 09 01 d8 	lwz     r0,472(r9)
    fca4:	2f 80 00 00 	cmpwi   cr7,r0,0
    fca8:	40 9e 00 b8 	bne-    cr7,fd60 <sctp_get_port_local+0x734>
    fcac:	80 01 00 b8 	lwz     r0,184(r1)
    fcb0:	90 01 00 78 	stw     r0,120(r1)
    fcb4:	80 01 00 78 	lwz     r0,120(r1)
		inet_sk(sk)->inet_num = snum;
    fcb8:	a1 21 00 14 	lhz     r9,20(r1)
    fcbc:	7c 0a 03 78 	mr      r10,r0
    fcc0:	b1 2a 01 4e 	sth     r9,334(r10)
		sk_add_bind_node(sk, &pp->owner);
    fcc4:	80 01 00 0c 	lwz     r0,12(r1)
    fcc8:	30 00 00 0c 	addic   r0,r0,12
    fccc:	81 21 00 b8 	lwz     r9,184(r1)
    fcd0:	91 21 00 7c 	stw     r9,124(r1)
    fcd4:	90 01 00 80 	stw     r0,128(r1)
}

static __inline__ void sk_add_bind_node(struct sock *sk,
					struct hlist_head *list)
{
	hlist_add_head(&sk->sk_bind_node, list);
    fcd8:	80 01 00 7c 	lwz     r0,124(r1)
    fcdc:	30 00 00 14 	addic   r0,r0,20
    fce0:	90 01 00 84 	stw     r0,132(r1)
    fce4:	80 01 00 80 	lwz     r0,128(r1)
    fce8:	90 01 00 88 	stw     r0,136(r1)
	}
}

static inline void hlist_add_head(struct hlist_node *n, struct hlist_head *h)
{
	struct hlist_node *first = h->first;
    fcec:	80 01 00 88 	lwz     r0,136(r1)
    fcf0:	7c 0b 03 78 	mr      r11,r0
    fcf4:	80 0b 00 00 	lwz     r0,0(r11)
    fcf8:	90 01 00 8c 	stw     r0,140(r1)
	n->next = first;
    fcfc:	80 01 00 84 	lwz     r0,132(r1)
    fd00:	81 21 00 8c 	lwz     r9,140(r1)
    fd04:	7c 0a 03 78 	mr      r10,r0
    fd08:	91 2a 00 00 	stw     r9,0(r10)
	if (first)
    fd0c:	80 01 00 8c 	lwz     r0,140(r1)
    fd10:	2f 80 00 00 	cmpwi   cr7,r0,0
    fd14:	41 9e 00 14 	beq-    cr7,fd28 <sctp_get_port_local+0x6fc>
		first->pprev = &n->next;
    fd18:	81 21 00 84 	lwz     r9,132(r1)
    fd1c:	80 01 00 8c 	lwz     r0,140(r1)
    fd20:	7c 0b 03 78 	mr      r11,r0
    fd24:	91 2b 00 04 	stw     r9,4(r11)
	h->first = n;
    fd28:	80 01 00 88 	lwz     r0,136(r1)
    fd2c:	81 21 00 84 	lwz     r9,132(r1)
    fd30:	7c 0a 03 78 	mr      r10,r0
    fd34:	91 2a 00 00 	stw     r9,0(r10)
	n->pprev = &h->first;
    fd38:	81 21 00 88 	lwz     r9,136(r1)
    fd3c:	80 01 00 84 	lwz     r0,132(r1)
    fd40:	7c 0b 03 78 	mr      r11,r0
    fd44:	91 2b 00 04 	stw     r9,4(r11)
    fd48:	80 01 00 b8 	lwz     r0,184(r1)
    fd4c:	90 01 00 90 	stw     r0,144(r1)
    fd50:	80 01 00 90 	lwz     r0,144(r1)
		sctp_sk(sk)->bind_hash = pp;
    fd54:	81 21 00 0c 	lwz     r9,12(r1)
    fd58:	7c 0a 03 78 	mr      r10,r0
    fd5c:	91 2a 01 d8 	stw     r9,472(r10)
	}
	ret = 0;
    fd60:	38 00 00 00 	li      r0,0
    fd64:	90 01 00 18 	stw     r0,24(r1)
    fd68:	48 00 00 08 	b       fd70 <sctp_get_port_local+0x744>
	}
pp_not_found:
	/* If there was a hash table miss, create a new port.  */
	ret = 1;
	if (!pp && !(pp = sctp_bucket_create(head, snum)))
		goto fail_unlock;
    fd6c:	60 00 00 00 	nop
		sctp_sk(sk)->bind_hash = pp;
	}
	ret = 0;

fail_unlock:
	sctp_spin_unlock(&head->lock);
    fd70:	80 01 00 08 	lwz     r0,8(r1)
    fd74:	90 01 00 a0 	stw     r0,160(r1)
    fd78:	48 00 00 08 	b       fd80 <sctp_get_port_local+0x754>
		} while (--remaining > 0);

		/* Exhausted local port range during search? */
		ret = 1;
		if (remaining <= 0)
			goto fail;
    fd7c:	60 00 00 00 	nop

fail_unlock:
	sctp_spin_unlock(&head->lock);

fail:
	sctp_local_bh_enable();
    fd80:	48 00 00 01 	bl      fd80 <sctp_get_port_local+0x754>
	return ret;
    fd84:	80 01 00 18 	lwz     r0,24(r1)
}
    fd88:	7c 03 03 78 	mr      r3,r0
    fd8c:	80 01 00 c4 	lwz     r0,196(r1)
    fd90:	7c 08 03 a6 	mtlr    r0
    fd94:	38 21 00 c0 	addi    r1,r1,192
    fd98:	4e 80 00 20 	blr

0000fd9c <sctp_get_port>:

/* Assign a 'snum' port to the socket.  If snum == 0, an ephemeral
 * port is requested.
 */
static int sctp_get_port(struct sock *sk, unsigned short snum)
{
    fd9c:	94 21 ff c0 	stwu    r1,-64(r1)
    fda0:	7c 08 02 a6 	mflr    r0
    fda4:	90 01 00 44 	stw     r0,68(r1)
    fda8:	90 61 00 38 	stw     r3,56(r1)
    fdac:	7c 80 23 78 	mr      r0,r4
    fdb0:	b0 01 00 3c 	sth     r0,60(r1)
    fdb4:	80 01 00 38 	lwz     r0,56(r1)
    fdb8:	90 01 00 10 	stw     r0,16(r1)
    fdbc:	80 01 00 10 	lwz     r0,16(r1)
	long ret;
	union sctp_addr addr;
	struct sctp_af *af = sctp_sk(sk)->pf->af;
    fdc0:	7c 09 03 78 	mr      r9,r0
    fdc4:	80 09 01 cc 	lwz     r0,460(r9)
    fdc8:	7c 09 03 78 	mr      r9,r0
    fdcc:	80 09 00 24 	lwz     r0,36(r9)
    fdd0:	90 01 00 08 	stw     r0,8(r1)

	/* Set up a dummy address struct from the sk. */
	af->from_sk(&addr, sk);
    fdd4:	80 01 00 08 	lwz     r0,8(r1)
    fdd8:	7c 09 03 78 	mr      r9,r0
    fddc:	80 09 00 30 	lwz     r0,48(r9)
    fde0:	39 21 00 14 	addi    r9,r1,20
    fde4:	7d 23 4b 78 	mr      r3,r9
    fde8:	80 81 00 38 	lwz     r4,56(r1)
    fdec:	7c 09 03 a6 	mtctr   r0
    fdf0:	4e 80 04 21 	bctrl
	addr.v4.sin_port = htons(snum);
    fdf4:	a0 01 00 3c 	lhz     r0,60(r1)
    fdf8:	b0 01 00 16 	sth     r0,22(r1)

	/* Note: sk->sk_num gets filled in if ephemeral port request. */
	ret = sctp_get_port_local(sk, &addr);
    fdfc:	38 01 00 14 	addi    r0,r1,20
    fe00:	80 61 00 38 	lwz     r3,56(r1)
    fe04:	7c 04 03 78 	mr      r4,r0
    fe08:	4b ff f8 25 	bl      f62c <sctp_get_port_local>
    fe0c:	90 61 00 0c 	stw     r3,12(r1)

	return ret ? 1 : 0;
    fe10:	80 01 00 0c 	lwz     r0,12(r1)
    fe14:	2f 80 00 00 	cmpwi   cr7,r0,0
    fe18:	7c 00 00 26 	mfcr    r0
    fe1c:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
    fe20:	68 00 00 01 	xori    r0,r0,1
}
    fe24:	7c 03 03 78 	mr      r3,r0
    fe28:	80 01 00 44 	lwz     r0,68(r1)
    fe2c:	7c 08 03 a6 	mtlr    r0
    fe30:	38 21 00 40 	addi    r1,r1,64
    fe34:	4e 80 00 20 	blr

0000fe38 <sctp_listen_start>:

/*
 *  Move a socket to LISTENING state.
 */
SCTP_STATIC int sctp_listen_start(struct sock *sk, int backlog)
{
    fe38:	94 21 ff b0 	stwu    r1,-80(r1)
    fe3c:	7c 08 02 a6 	mflr    r0
    fe40:	90 01 00 54 	stw     r0,84(r1)
    fe44:	90 61 00 48 	stw     r3,72(r1)
    fe48:	90 81 00 4c 	stw     r4,76(r1)
    fe4c:	80 01 00 48 	lwz     r0,72(r1)
    fe50:	90 01 00 14 	stw     r0,20(r1)
    fe54:	80 01 00 14 	lwz     r0,20(r1)
	struct sctp_sock *sp = sctp_sk(sk);
    fe58:	90 01 00 08 	stw     r0,8(r1)
	struct sctp_endpoint *ep = sp->ep;
    fe5c:	80 01 00 08 	lwz     r0,8(r1)
    fe60:	7c 09 03 78 	mr      r9,r0
    fe64:	80 09 01 d4 	lwz     r0,468(r9)
    fe68:	90 01 00 0c 	stw     r0,12(r1)
	struct crypto_hash *tfm = NULL;
    fe6c:	38 00 00 00 	li      r0,0
    fe70:	90 01 00 10 	stw     r0,16(r1)
    fe74:	80 01 00 48 	lwz     r0,72(r1)
    fe78:	90 01 00 18 	stw     r0,24(r1)
    fe7c:	80 01 00 18 	lwz     r0,24(r1)

	/* Allocate HMAC for generating cookie. */
	if (!sctp_sk(sk)->hmac && sctp_hmac_alg) {
    fe80:	7c 0b 03 78 	mr      r11,r0
    fe84:	80 0b 01 d0 	lwz     r0,464(r11)
    fe88:	2f 80 00 00 	cmpwi   cr7,r0,0
    fe8c:	40 9e 01 08 	bne-    cr7,ff94 <sctp_listen_start+0x15c>
    fe90:	3c 00 00 00 	lis     r0,0
    fe94:	7c 09 03 78 	mr      r9,r0
    fe98:	80 09 00 00 	lwz     r0,0(r9)
    fe9c:	2f 80 00 00 	cmpwi   cr7,r0,0
    fea0:	41 9e 00 f4 	beq-    cr7,ff94 <sctp_listen_start+0x15c>
		tfm = crypto_alloc_hash(sctp_hmac_alg, 0, CRYPTO_ALG_ASYNC);
    fea4:	3c 00 00 00 	lis     r0,0
    fea8:	7c 0b 03 78 	mr      r11,r0
    feac:	80 0b 00 00 	lwz     r0,0(r11)
    feb0:	90 01 00 1c 	stw     r0,28(r1)
    feb4:	38 00 00 00 	li      r0,0
    feb8:	90 01 00 20 	stw     r0,32(r1)
    febc:	38 00 00 80 	li      r0,128
    fec0:	90 01 00 24 	stw     r0,36(r1)
}

static inline struct crypto_hash *crypto_alloc_hash(const char *alg_name,
						    u32 type, u32 mask)
{
	type &= ~CRYPTO_ALG_TYPE_MASK;
    fec4:	80 01 00 20 	lwz     r0,32(r1)
    fec8:	54 00 00 36 	rlwinm  r0,r0,0,0,27
    fecc:	90 01 00 20 	stw     r0,32(r1)
	mask &= ~CRYPTO_ALG_TYPE_MASK;
    fed0:	80 01 00 24 	lwz     r0,36(r1)
    fed4:	54 00 00 36 	rlwinm  r0,r0,0,0,27
    fed8:	90 01 00 24 	stw     r0,36(r1)
	type |= CRYPTO_ALG_TYPE_HASH;
    fedc:	80 01 00 20 	lwz     r0,32(r1)
    fee0:	60 00 00 08 	ori     r0,r0,8
    fee4:	90 01 00 20 	stw     r0,32(r1)
	mask |= CRYPTO_ALG_TYPE_HASH_MASK;
    fee8:	80 01 00 24 	lwz     r0,36(r1)
    feec:	60 00 00 0e 	ori     r0,r0,14
    fef0:	90 01 00 24 	stw     r0,36(r1)

	return __crypto_hash_cast(crypto_alloc_base(alg_name, type, mask));
    fef4:	80 61 00 1c 	lwz     r3,28(r1)
    fef8:	80 81 00 20 	lwz     r4,32(r1)
    fefc:	80 a1 00 24 	lwz     r5,36(r1)
    ff00:	48 00 00 01 	bl      ff00 <sctp_listen_start+0xc8>
    ff04:	7c 60 1b 78 	mr      r0,r3
    ff08:	90 01 00 28 	stw     r0,40(r1)
						dst, src);
}

static inline struct crypto_hash *__crypto_hash_cast(struct crypto_tfm *tfm)
{
	return (struct crypto_hash *)tfm;
    ff0c:	80 01 00 28 	lwz     r0,40(r1)
    ff10:	90 01 00 10 	stw     r0,16(r1)
    ff14:	80 01 00 10 	lwz     r0,16(r1)
    ff18:	90 01 00 2c 	stw     r0,44(r1)
	return (long) ptr;
}

static inline long __must_check IS_ERR(const void *ptr)
{
	return IS_ERR_VALUE((unsigned long)ptr);
    ff1c:	81 21 00 2c 	lwz     r9,44(r1)
    ff20:	38 00 f0 00 	li      r0,-4096
    ff24:	7f 89 00 40 	cmplw   cr7,r9,r0
    ff28:	7c 00 00 26 	mfcr    r0
    ff2c:	54 00 f7 fe 	rlwinm  r0,r0,30,31,31
		if (IS_ERR(tfm)) {
    ff30:	2f 80 00 00 	cmpwi   cr7,r0,0
    ff34:	41 9e 00 48 	beq-    cr7,ff7c <sctp_listen_start+0x144>
			if (net_ratelimit()) {
    ff38:	48 00 00 01 	bl      ff38 <sctp_listen_start+0x100>
    ff3c:	7c 60 1b 78 	mr      r0,r3
    ff40:	2f 80 00 00 	cmpwi   cr7,r0,0
    ff44:	41 9e 00 30 	beq-    cr7,ff74 <sctp_listen_start+0x13c>
				pr_info("failed to load transform for %s: %ld\n",
    ff48:	3c 00 00 00 	lis     r0,0
    ff4c:	7c 0b 03 78 	mr      r11,r0
    ff50:	81 2b 00 00 	lwz     r9,0(r11)
    ff54:	80 01 00 10 	lwz     r0,16(r1)
    ff58:	90 01 00 30 	stw     r0,48(r1)
	return (void *) error;
}

static inline long __must_check PTR_ERR(const void *ptr)
{
	return (long) ptr;
    ff5c:	80 01 00 30 	lwz     r0,48(r1)
    ff60:	3d 60 00 00 	lis     r11,0
    ff64:	38 6b 04 cc 	addi    r3,r11,1228
    ff68:	7d 24 4b 78 	mr      r4,r9
    ff6c:	7c 05 03 78 	mr      r5,r0
    ff70:	48 00 00 01 	bl      ff70 <sctp_listen_start+0x138>
					sctp_hmac_alg, PTR_ERR(tfm));
			}
			return -ENOSYS;
    ff74:	38 00 ff da 	li      r0,-38
    ff78:	48 00 00 c8 	b       10040 <sctp_listen_start+0x208>
    ff7c:	80 01 00 48 	lwz     r0,72(r1)
    ff80:	90 01 00 34 	stw     r0,52(r1)
    ff84:	80 01 00 34 	lwz     r0,52(r1)
		}
		sctp_sk(sk)->hmac = tfm;
    ff88:	81 21 00 10 	lwz     r9,16(r1)
    ff8c:	7c 0b 03 78 	mr      r11,r0
    ff90:	91 2b 01 d0 	stw     r9,464(r11)
	 * This is not currently spelled out in the SCTP sockets
	 * extensions draft, but follows the practice as seen in TCP
	 * sockets.
	 *
	 */
	sk->sk_state = SCTP_SS_LISTENING;
    ff94:	80 01 00 48 	lwz     r0,72(r1)
    ff98:	39 20 00 0a 	li      r9,10
    ff9c:	7c 0b 03 78 	mr      r11,r0
    ffa0:	99 2b 00 0e 	stb     r9,14(r11)
	if (!ep->base.bind_addr.port) {
    ffa4:	80 01 00 0c 	lwz     r0,12(r1)
    ffa8:	7c 09 03 78 	mr      r9,r0
    ffac:	a0 09 00 3c 	lhz     r0,60(r9)
    ffb0:	54 00 04 3e 	clrlwi  r0,r0,16
    ffb4:	2f 80 00 00 	cmpwi   cr7,r0,0
    ffb8:	40 9e 00 20 	bne-    cr7,ffd8 <sctp_listen_start+0x1a0>
		if (sctp_autobind(sk))
    ffbc:	80 61 00 48 	lwz     r3,72(r1)
    ffc0:	48 00 09 5d 	bl      1091c <sctp_autobind>
    ffc4:	7c 60 1b 78 	mr      r0,r3
    ffc8:	2f 80 00 00 	cmpwi   cr7,r0,0
    ffcc:	41 9e 00 54 	beq-    cr7,10020 <sctp_listen_start+0x1e8>
			return -EAGAIN;
    ffd0:	38 00 ff f5 	li      r0,-11
    ffd4:	48 00 00 6c 	b       10040 <sctp_listen_start+0x208>
    ffd8:	80 01 00 48 	lwz     r0,72(r1)
    ffdc:	90 01 00 38 	stw     r0,56(r1)
    ffe0:	80 01 00 38 	lwz     r0,56(r1)
	} else {
		if (sctp_get_port(sk, inet_sk(sk)->inet_num)) {
    ffe4:	7c 0b 03 78 	mr      r11,r0
    ffe8:	a0 0b 01 4e 	lhz     r0,334(r11)
    ffec:	54 00 04 3e 	clrlwi  r0,r0,16
    fff0:	80 61 00 48 	lwz     r3,72(r1)
    fff4:	7c 04 03 78 	mr      r4,r0
    fff8:	4b ff fd a5 	bl      fd9c <sctp_get_port>
    fffc:	7c 60 1b 78 	mr      r0,r3
   10000:	2f 80 00 00 	cmpwi   cr7,r0,0
   10004:	41 9e 00 1c 	beq-    cr7,10020 <sctp_listen_start+0x1e8>
			sk->sk_state = SCTP_SS_CLOSED;
   10008:	80 01 00 48 	lwz     r0,72(r1)
   1000c:	39 20 00 07 	li      r9,7
   10010:	7c 0b 03 78 	mr      r11,r0
   10014:	99 2b 00 0e 	stb     r9,14(r11)
			return -EADDRINUSE;
   10018:	38 00 ff 9e 	li      r0,-98
   1001c:	48 00 00 24 	b       10040 <sctp_listen_start+0x208>
		}
	}

	sk->sk_max_ack_backlog = backlog;
   10020:	80 01 00 4c 	lwz     r0,76(r1)
   10024:	54 09 04 3e 	clrlwi  r9,r0,16
   10028:	80 01 00 48 	lwz     r0,72(r1)
   1002c:	7c 0b 03 78 	mr      r11,r0
   10030:	b1 2b 00 d2 	sth     r9,210(r11)
	sctp_hash_endpoint(ep);
   10034:	80 61 00 0c 	lwz     r3,12(r1)
   10038:	48 00 00 01 	bl      10038 <sctp_listen_start+0x200>
	return 0;
   1003c:	38 00 00 00 	li      r0,0
}
   10040:	7c 03 03 78 	mr      r3,r0
   10044:	80 01 00 54 	lwz     r0,84(r1)
   10048:	7c 08 03 a6 	mtlr    r0
   1004c:	38 21 00 50 	addi    r1,r1,80
   10050:	4e 80 00 20 	blr

00010054 <sctp_inet_listen>:
 *   On both types of endpoints a backlog of '0' disables listening.
 *
 *  Move a socket to LISTENING state.
 */
int sctp_inet_listen(struct socket *sock, int backlog)
{
   10054:	94 21 ff b0 	stwu    r1,-80(r1)
   10058:	7c 08 02 a6 	mflr    r0
   1005c:	90 01 00 54 	stw     r0,84(r1)
   10060:	90 61 00 48 	stw     r3,72(r1)
   10064:	90 81 00 4c 	stw     r4,76(r1)
	struct sock *sk = sock->sk;
   10068:	80 01 00 48 	lwz     r0,72(r1)
   1006c:	7c 09 03 78 	mr      r9,r0
   10070:	80 09 00 14 	lwz     r0,20(r9)
   10074:	90 01 00 0c 	stw     r0,12(r1)
   10078:	80 01 00 0c 	lwz     r0,12(r1)
   1007c:	90 01 00 14 	stw     r0,20(r1)
   10080:	80 01 00 14 	lwz     r0,20(r1)
	struct sctp_endpoint *ep = sctp_sk(sk)->ep;
   10084:	7c 0b 03 78 	mr      r11,r0
   10088:	80 0b 01 d4 	lwz     r0,468(r11)
   1008c:	90 01 00 10 	stw     r0,16(r1)
	int err = -EINVAL;
   10090:	38 00 ff ea 	li      r0,-22
   10094:	90 01 00 08 	stw     r0,8(r1)

	if (unlikely(backlog < 0))
   10098:	80 01 00 4c 	lwz     r0,76(r1)
   1009c:	54 00 0f fe 	rlwinm  r0,r0,1,31,31
   100a0:	2f 80 00 00 	cmpwi   cr7,r0,0
   100a4:	41 9e 00 0c 	beq-    cr7,100b0 <sctp_inet_listen+0x5c>
		return err;
   100a8:	80 01 00 08 	lwz     r0,8(r1)
   100ac:	48 00 01 b0 	b       1025c <sctp_inet_listen+0x208>
   100b0:	80 01 00 0c 	lwz     r0,12(r1)
   100b4:	90 01 00 18 	stw     r0,24(r1)

extern void lock_sock_nested(struct sock *sk, int subclass);

static inline void lock_sock(struct sock *sk)
{
	lock_sock_nested(sk, 0);
   100b8:	80 61 00 18 	lwz     r3,24(r1)
   100bc:	38 80 00 00 	li      r4,0
   100c0:	48 00 00 01 	bl      100c0 <sctp_inet_listen+0x6c>
   100c4:	80 01 00 0c 	lwz     r0,12(r1)
   100c8:	90 01 00 1c 	stw     r0,28(r1)
   100cc:	38 00 00 01 	li      r0,1
   100d0:	90 01 00 20 	stw     r0,32(r1)
   100d4:	80 01 00 1c 	lwz     r0,28(r1)
   100d8:	90 01 00 24 	stw     r0,36(r1)
   100dc:	80 01 00 24 	lwz     r0,36(r1)

/* Is a socket of this style? */
#define sctp_style(sk, style) __sctp_style((sk), (SCTP_SOCKET_##style))
static inline int __sctp_style(const struct sock *sk, sctp_socket_type_t style)
{
	return sctp_sk(sk)->type == style;
   100e0:	7c 09 03 78 	mr      r9,r0
   100e4:	80 09 01 c8 	lwz     r0,456(r9)
   100e8:	81 21 00 20 	lwz     r9,32(r1)
   100ec:	7f 89 00 00 	cmpw    cr7,r9,r0
   100f0:	7c 00 00 26 	mfcr    r0
   100f4:	54 00 ff fe 	rlwinm  r0,r0,31,31,31

	sctp_lock_sock(sk);

	/* Peeled-off sockets are not allowed to listen().  */
	if (sctp_style(sk, UDP_HIGH_BANDWIDTH))
   100f8:	2f 80 00 00 	cmpwi   cr7,r0,0
   100fc:	40 9e 01 30 	bne-    cr7,1022c <sctp_inet_listen+0x1d8>
		goto out;

	if (sock->state != SS_UNCONNECTED)
   10100:	80 01 00 48 	lwz     r0,72(r1)
   10104:	7c 0b 03 78 	mr      r11,r0
   10108:	80 0b 00 00 	lwz     r0,0(r11)
   1010c:	2f 80 00 01 	cmpwi   cr7,r0,1
   10110:	40 9e 01 24 	bne-    cr7,10234 <sctp_inet_listen+0x1e0>
		goto out;

	/* If backlog is zero, disable listening. */
	if (!backlog) {
   10114:	80 01 00 4c 	lwz     r0,76(r1)
   10118:	2f 80 00 00 	cmpwi   cr7,r0,0
   1011c:	40 9e 00 98 	bne-    cr7,101b4 <sctp_inet_listen+0x160>
   10120:	80 01 00 0c 	lwz     r0,12(r1)
   10124:	90 01 00 28 	stw     r0,40(r1)
   10128:	38 00 00 07 	li      r0,7
   1012c:	90 01 00 2c 	stw     r0,44(r1)

/* Is the socket in this state? */
#define sctp_sstate(sk, state) __sctp_sstate((sk), (SCTP_SS_##state))
static inline int __sctp_sstate(const struct sock *sk, sctp_sock_state_t state)
{
	return sk->sk_state == state;
   10130:	80 01 00 28 	lwz     r0,40(r1)
   10134:	7c 09 03 78 	mr      r9,r0
   10138:	88 09 00 0e 	lbz     r0,14(r9)
   1013c:	54 00 06 3e 	clrlwi  r0,r0,24
   10140:	81 21 00 2c 	lwz     r9,44(r1)
   10144:	7f 89 00 00 	cmpw    cr7,r9,r0
   10148:	7c 00 00 26 	mfcr    r0
   1014c:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
		if (sctp_sstate(sk, CLOSED))
   10150:	2f 80 00 00 	cmpwi   cr7,r0,0
   10154:	40 9e 00 e8 	bne-    cr7,1023c <sctp_inet_listen+0x1e8>
			goto out;

		err = 0;
   10158:	38 00 00 00 	li      r0,0
   1015c:	90 01 00 08 	stw     r0,8(r1)
		sctp_unhash_endpoint(ep);
   10160:	80 61 00 10 	lwz     r3,16(r1)
   10164:	48 00 00 01 	bl      10164 <sctp_inet_listen+0x110>
		sk->sk_state = SCTP_SS_CLOSED;
   10168:	80 01 00 0c 	lwz     r0,12(r1)
   1016c:	39 20 00 07 	li      r9,7
   10170:	7c 0b 03 78 	mr      r11,r0
   10174:	99 2b 00 0e 	stb     r9,14(r11)
		if (sk->sk_reuse)
   10178:	80 01 00 0c 	lwz     r0,12(r1)
   1017c:	7c 09 03 78 	mr      r9,r0
   10180:	88 09 00 0f 	lbz     r0,15(r9)
   10184:	54 00 06 3e 	clrlwi  r0,r0,24
   10188:	2f 80 00 00 	cmpwi   cr7,r0,0
   1018c:	41 9e 00 b8 	beq-    cr7,10244 <sctp_inet_listen+0x1f0>
   10190:	80 01 00 0c 	lwz     r0,12(r1)
   10194:	90 01 00 30 	stw     r0,48(r1)
   10198:	80 01 00 30 	lwz     r0,48(r1)
			sctp_sk(sk)->bind_hash->fastreuse = 1;
   1019c:	7c 0b 03 78 	mr      r11,r0
   101a0:	80 0b 01 d8 	lwz     r0,472(r11)
   101a4:	39 20 00 01 	li      r9,1
   101a8:	7c 0b 03 78 	mr      r11,r0
   101ac:	b1 2b 00 02 	sth     r9,2(r11)
		goto out;
   101b0:	48 00 00 94 	b       10244 <sctp_inet_listen+0x1f0>
   101b4:	80 01 00 0c 	lwz     r0,12(r1)
   101b8:	90 01 00 34 	stw     r0,52(r1)
   101bc:	38 00 00 0a 	li      r0,10
   101c0:	90 01 00 38 	stw     r0,56(r1)
   101c4:	80 01 00 34 	lwz     r0,52(r1)
   101c8:	7c 09 03 78 	mr      r9,r0
   101cc:	88 09 00 0e 	lbz     r0,14(r9)
   101d0:	54 00 06 3e 	clrlwi  r0,r0,24
   101d4:	81 21 00 38 	lwz     r9,56(r1)
   101d8:	7f 89 00 00 	cmpw    cr7,r9,r0
   101dc:	7c 00 00 26 	mfcr    r0
   101e0:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
	}

	/* If we are already listening, just update the backlog */
	if (sctp_sstate(sk, LISTENING))
   101e4:	2f 80 00 00 	cmpwi   cr7,r0,0
   101e8:	41 9e 00 1c 	beq-    cr7,10204 <sctp_inet_listen+0x1b0>
		sk->sk_max_ack_backlog = backlog;
   101ec:	80 01 00 4c 	lwz     r0,76(r1)
   101f0:	54 09 04 3e 	clrlwi  r9,r0,16
   101f4:	80 01 00 0c 	lwz     r0,12(r1)
   101f8:	7c 0b 03 78 	mr      r11,r0
   101fc:	b1 2b 00 d2 	sth     r9,210(r11)
   10200:	48 00 00 20 	b       10220 <sctp_inet_listen+0x1cc>
	else {
		err = sctp_listen_start(sk, backlog);
   10204:	80 61 00 0c 	lwz     r3,12(r1)
   10208:	80 81 00 4c 	lwz     r4,76(r1)
   1020c:	4b ff fc 2d 	bl      fe38 <sctp_listen_start>
   10210:	90 61 00 08 	stw     r3,8(r1)
		if (err)
   10214:	80 01 00 08 	lwz     r0,8(r1)
   10218:	2f 80 00 00 	cmpwi   cr7,r0,0
   1021c:	40 9e 00 30 	bne-    cr7,1024c <sctp_inet_listen+0x1f8>
			goto out;
	}

	err = 0;
   10220:	38 00 00 00 	li      r0,0
   10224:	90 01 00 08 	stw     r0,8(r1)
   10228:	48 00 00 28 	b       10250 <sctp_inet_listen+0x1fc>

	sctp_lock_sock(sk);

	/* Peeled-off sockets are not allowed to listen().  */
	if (sctp_style(sk, UDP_HIGH_BANDWIDTH))
		goto out;
   1022c:	60 00 00 00 	nop
   10230:	48 00 00 20 	b       10250 <sctp_inet_listen+0x1fc>

	if (sock->state != SS_UNCONNECTED)
		goto out;
   10234:	60 00 00 00 	nop
   10238:	48 00 00 18 	b       10250 <sctp_inet_listen+0x1fc>

	/* If backlog is zero, disable listening. */
	if (!backlog) {
		if (sctp_sstate(sk, CLOSED))
			goto out;
   1023c:	60 00 00 00 	nop
   10240:	48 00 00 10 	b       10250 <sctp_inet_listen+0x1fc>
		err = 0;
		sctp_unhash_endpoint(ep);
		sk->sk_state = SCTP_SS_CLOSED;
		if (sk->sk_reuse)
			sctp_sk(sk)->bind_hash->fastreuse = 1;
		goto out;
   10244:	60 00 00 00 	nop
   10248:	48 00 00 08 	b       10250 <sctp_inet_listen+0x1fc>
	if (sctp_sstate(sk, LISTENING))
		sk->sk_max_ack_backlog = backlog;
	else {
		err = sctp_listen_start(sk, backlog);
		if (err)
			goto out;
   1024c:	60 00 00 00 	nop
	}

	err = 0;
out:
	sctp_release_sock(sk);
   10250:	80 61 00 0c 	lwz     r3,12(r1)
   10254:	48 00 00 01 	bl      10254 <sctp_inet_listen+0x200>
	return err;
   10258:	80 01 00 08 	lwz     r0,8(r1)
}
   1025c:	7c 03 03 78 	mr      r3,r0
   10260:	80 01 00 54 	lwz     r0,84(r1)
   10264:	7c 08 03 a6 	mtlr    r0
   10268:	38 21 00 50 	addi    r1,r1,80
   1026c:	4e 80 00 20 	blr

00010270 <sctp_poll>:
 * Another thing to note is that we include the Async I/O support
 * here, again, by modeling the current TCP/UDP code.  We don't have
 * a good way to test with it yet.
 */
unsigned int sctp_poll(struct file *file, struct socket *sock, poll_table *wait)
{
   10270:	94 21 ff 70 	stwu    r1,-144(r1)
   10274:	7c 08 02 a6 	mflr    r0
   10278:	90 01 00 94 	stw     r0,148(r1)
   1027c:	93 e1 00 8c 	stw     r31,140(r1)
   10280:	90 61 00 78 	stw     r3,120(r1)
   10284:	90 81 00 7c 	stw     r4,124(r1)
   10288:	90 a1 00 80 	stw     r5,128(r1)
	struct sock *sk = sock->sk;
   1028c:	80 01 00 7c 	lwz     r0,124(r1)
   10290:	7c 09 03 78 	mr      r9,r0
   10294:	80 09 00 14 	lwz     r0,20(r9)
   10298:	90 01 00 0c 	stw     r0,12(r1)
   1029c:	80 01 00 0c 	lwz     r0,12(r1)
   102a0:	90 01 00 14 	stw     r0,20(r1)
   102a4:	80 01 00 14 	lwz     r0,20(r1)
	struct sctp_sock *sp = sctp_sk(sk);
   102a8:	90 01 00 10 	stw     r0,16(r1)
   102ac:	80 01 00 0c 	lwz     r0,12(r1)
   102b0:	90 01 00 18 	stw     r0,24(r1)
	sk->sk_socket = sock;
}

static inline wait_queue_head_t *sk_sleep(struct sock *sk)
{
	return &sk->sk_wq->wait;
   102b4:	80 01 00 18 	lwz     r0,24(r1)
   102b8:	7c 09 03 78 	mr      r9,r0
   102bc:	80 09 00 68 	lwz     r0,104(r9)
	unsigned int mask;

	poll_wait(file, sk_sleep(sk), wait);
   102c0:	81 21 00 78 	lwz     r9,120(r1)
   102c4:	91 21 00 1c 	stw     r9,28(r1)
   102c8:	90 01 00 20 	stw     r0,32(r1)
   102cc:	80 01 00 80 	lwz     r0,128(r1)
   102d0:	90 01 00 24 	stw     r0,36(r1)
	unsigned long key;
} poll_table;

static inline void poll_wait(struct file * filp, wait_queue_head_t * wait_address, poll_table *p)
{
	if (p && wait_address)
   102d4:	80 01 00 24 	lwz     r0,36(r1)
   102d8:	2f 80 00 00 	cmpwi   cr7,r0,0
   102dc:	41 9e 00 30 	beq-    cr7,1030c <sctp_poll+0x9c>
   102e0:	80 01 00 20 	lwz     r0,32(r1)
   102e4:	2f 80 00 00 	cmpwi   cr7,r0,0
   102e8:	41 9e 00 24 	beq-    cr7,1030c <sctp_poll+0x9c>
		p->qproc(filp, wait_address, p);
   102ec:	80 01 00 24 	lwz     r0,36(r1)
   102f0:	7c 09 03 78 	mr      r9,r0
   102f4:	80 09 00 00 	lwz     r0,0(r9)
   102f8:	80 61 00 1c 	lwz     r3,28(r1)
   102fc:	80 81 00 20 	lwz     r4,32(r1)
   10300:	80 a1 00 24 	lwz     r5,36(r1)
   10304:	7c 09 03 a6 	mtctr   r0
   10308:	4e 80 04 21 	bctrl
   1030c:	80 01 00 0c 	lwz     r0,12(r1)
   10310:	90 01 00 28 	stw     r0,40(r1)
   10314:	38 00 00 02 	li      r0,2
   10318:	90 01 00 2c 	stw     r0,44(r1)
   1031c:	80 01 00 28 	lwz     r0,40(r1)
   10320:	90 01 00 30 	stw     r0,48(r1)
   10324:	80 01 00 30 	lwz     r0,48(r1)

/* Is a socket of this style? */
#define sctp_style(sk, style) __sctp_style((sk), (SCTP_SOCKET_##style))
static inline int __sctp_style(const struct sock *sk, sctp_socket_type_t style)
{
	return sctp_sk(sk)->type == style;
   10328:	7c 09 03 78 	mr      r9,r0
   1032c:	80 09 01 c8 	lwz     r0,456(r9)
   10330:	81 21 00 2c 	lwz     r9,44(r1)
   10334:	7f 89 00 00 	cmpw    cr7,r9,r0
   10338:	7c 00 00 26 	mfcr    r0
   1033c:	54 00 ff fe 	rlwinm  r0,r0,31,31,31

	/* A TCP-style listening socket becomes readable when the accept queue
	 * is not empty.
	 */
	if (sctp_style(sk, TCP) && sctp_sstate(sk, LISTENING))
   10340:	2f 80 00 00 	cmpwi   cr7,r0,0
   10344:	41 9e 00 84 	beq-    cr7,103c8 <sctp_poll+0x158>
   10348:	80 01 00 0c 	lwz     r0,12(r1)
   1034c:	90 01 00 34 	stw     r0,52(r1)
   10350:	38 00 00 0a 	li      r0,10
   10354:	90 01 00 38 	stw     r0,56(r1)

/* Is the socket in this state? */
#define sctp_sstate(sk, state) __sctp_sstate((sk), (SCTP_SS_##state))
static inline int __sctp_sstate(const struct sock *sk, sctp_sock_state_t state)
{
	return sk->sk_state == state;
   10358:	80 01 00 34 	lwz     r0,52(r1)
   1035c:	7c 09 03 78 	mr      r9,r0
   10360:	88 09 00 0e 	lbz     r0,14(r9)
   10364:	54 00 06 3e 	clrlwi  r0,r0,24
   10368:	81 21 00 38 	lwz     r9,56(r1)
   1036c:	7f 89 00 00 	cmpw    cr7,r9,r0
   10370:	7c 00 00 26 	mfcr    r0
   10374:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
   10378:	2f 80 00 00 	cmpwi   cr7,r0,0
   1037c:	41 9e 00 4c 	beq-    cr7,103c8 <sctp_poll+0x158>
		return (!list_empty(&sp->ep->asocs)) ?
   10380:	80 01 00 10 	lwz     r0,16(r1)
   10384:	7c 09 03 78 	mr      r9,r0
   10388:	80 09 01 d4 	lwz     r0,468(r9)
   1038c:	30 00 00 4c 	addic   r0,r0,76
   10390:	90 01 00 3c 	stw     r0,60(r1)
 * list_empty - tests whether a list is empty
 * @head: the list to test.
 */
static inline int list_empty(const struct list_head *head)
{
	return head->next == head;
   10394:	80 01 00 3c 	lwz     r0,60(r1)
   10398:	7c 09 03 78 	mr      r9,r0
   1039c:	80 09 00 00 	lwz     r0,0(r9)
   103a0:	81 21 00 3c 	lwz     r9,60(r1)
   103a4:	7f 89 00 00 	cmpw    cr7,r9,r0
   103a8:	7c 00 00 26 	mfcr    r0
   103ac:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
   103b0:	2f 80 00 00 	cmpwi   cr7,r0,0
   103b4:	40 9e 00 0c 	bne-    cr7,103c0 <sctp_poll+0x150>
   103b8:	38 00 00 41 	li      r0,65
   103bc:	48 00 00 08 	b       103c4 <sctp_poll+0x154>
   103c0:	38 00 00 00 	li      r0,0
   103c4:	48 00 02 38 	b       105fc <sctp_poll+0x38c>
			(POLLIN | POLLRDNORM) : 0;

	mask = 0;
   103c8:	38 00 00 00 	li      r0,0
   103cc:	90 01 00 08 	stw     r0,8(r1)

	/* Is there any exceptional events?  */
	if (sk->sk_err || !skb_queue_empty(&sk->sk_error_queue))
   103d0:	80 01 00 0c 	lwz     r0,12(r1)
   103d4:	7c 09 03 78 	mr      r9,r0
   103d8:	80 09 00 c8 	lwz     r0,200(r9)
   103dc:	2f 80 00 00 	cmpwi   cr7,r0,0
   103e0:	40 9e 00 34 	bne-    cr7,10414 <sctp_poll+0x1a4>
   103e4:	80 01 00 0c 	lwz     r0,12(r1)
   103e8:	30 00 00 b8 	addic   r0,r0,184
   103ec:	90 01 00 40 	stw     r0,64(r1)
 *
 *	Returns true if the queue is empty, false otherwise.
 */
static inline int skb_queue_empty(const struct sk_buff_head *list)
{
	return list->next == (struct sk_buff *)list;
   103f0:	80 01 00 40 	lwz     r0,64(r1)
   103f4:	7c 09 03 78 	mr      r9,r0
   103f8:	80 09 00 00 	lwz     r0,0(r9)
   103fc:	81 21 00 40 	lwz     r9,64(r1)
   10400:	7f 89 00 00 	cmpw    cr7,r9,r0
   10404:	7c 00 00 26 	mfcr    r0
   10408:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
   1040c:	2f 80 00 00 	cmpwi   cr7,r0,0
   10410:	40 9e 00 10 	bne-    cr7,10420 <sctp_poll+0x1b0>
		mask |= POLLERR;
   10414:	80 01 00 08 	lwz     r0,8(r1)
   10418:	60 00 00 08 	ori     r0,r0,8
   1041c:	90 01 00 08 	stw     r0,8(r1)
	if (sk->sk_shutdown & RCV_SHUTDOWN)
   10420:	80 01 00 0c 	lwz     r0,12(r1)
   10424:	7c 09 03 78 	mr      r9,r0
   10428:	80 09 00 94 	lwz     r0,148(r9)
   1042c:	54 00 17 be 	rlwinm  r0,r0,2,30,31
   10430:	54 00 06 3e 	clrlwi  r0,r0,24
   10434:	54 00 07 fe 	clrlwi  r0,r0,31
   10438:	54 00 06 3e 	clrlwi  r0,r0,24
   1043c:	2f 80 00 00 	cmpwi   cr7,r0,0
   10440:	41 9e 00 10 	beq-    cr7,10450 <sctp_poll+0x1e0>
		mask |= POLLRDHUP | POLLIN | POLLRDNORM;
   10444:	80 01 00 08 	lwz     r0,8(r1)
   10448:	60 00 20 41 	ori     r0,r0,8257
   1044c:	90 01 00 08 	stw     r0,8(r1)
	if (sk->sk_shutdown == SHUTDOWN_MASK)
   10450:	80 01 00 0c 	lwz     r0,12(r1)
   10454:	7c 09 03 78 	mr      r9,r0
   10458:	80 09 00 94 	lwz     r0,148(r9)
   1045c:	54 09 00 02 	rlwinm  r9,r0,0,0,1
   10460:	3c 00 c0 00 	lis     r0,-16384
   10464:	7f 89 00 00 	cmpw    cr7,r9,r0
   10468:	40 9e 00 10 	bne-    cr7,10478 <sctp_poll+0x208>
		mask |= POLLHUP;
   1046c:	80 01 00 08 	lwz     r0,8(r1)
   10470:	60 00 00 10 	ori     r0,r0,16
   10474:	90 01 00 08 	stw     r0,8(r1)

	/* Is it readable?  Reconsider this code with TCP-style support.  */
	if (!skb_queue_empty(&sk->sk_receive_queue))
   10478:	80 01 00 0c 	lwz     r0,12(r1)
   1047c:	30 00 00 3c 	addic   r0,r0,60
   10480:	90 01 00 44 	stw     r0,68(r1)
   10484:	80 01 00 44 	lwz     r0,68(r1)
   10488:	7c 09 03 78 	mr      r9,r0
   1048c:	80 09 00 00 	lwz     r0,0(r9)
   10490:	81 21 00 44 	lwz     r9,68(r1)
   10494:	7f 89 00 00 	cmpw    cr7,r9,r0
   10498:	7c 00 00 26 	mfcr    r0
   1049c:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
   104a0:	2f 80 00 00 	cmpwi   cr7,r0,0
   104a4:	40 9e 00 10 	bne-    cr7,104b4 <sctp_poll+0x244>
		mask |= POLLIN | POLLRDNORM;
   104a8:	80 01 00 08 	lwz     r0,8(r1)
   104ac:	60 00 00 41 	ori     r0,r0,65
   104b0:	90 01 00 08 	stw     r0,8(r1)
   104b4:	80 01 00 0c 	lwz     r0,12(r1)
   104b8:	90 01 00 48 	stw     r0,72(r1)
   104bc:	38 00 00 00 	li      r0,0
   104c0:	90 01 00 4c 	stw     r0,76(r1)
   104c4:	80 01 00 48 	lwz     r0,72(r1)
   104c8:	90 01 00 50 	stw     r0,80(r1)
   104cc:	80 01 00 50 	lwz     r0,80(r1)

/* Is a socket of this style? */
#define sctp_style(sk, style) __sctp_style((sk), (SCTP_SOCKET_##style))
static inline int __sctp_style(const struct sock *sk, sctp_socket_type_t style)
{
	return sctp_sk(sk)->type == style;
   104d0:	7c 09 03 78 	mr      r9,r0
   104d4:	80 09 01 c8 	lwz     r0,456(r9)
   104d8:	81 21 00 4c 	lwz     r9,76(r1)
   104dc:	7f 89 00 00 	cmpw    cr7,r9,r0
   104e0:	7c 00 00 26 	mfcr    r0
   104e4:	54 00 ff fe 	rlwinm  r0,r0,31,31,31

	/* The association is either gone or not ready.  */
	if (!sctp_style(sk, UDP) && sctp_sstate(sk, CLOSED))
   104e8:	2f 80 00 00 	cmpwi   cr7,r0,0
   104ec:	40 9e 00 44 	bne-    cr7,10530 <sctp_poll+0x2c0>
   104f0:	80 01 00 0c 	lwz     r0,12(r1)
   104f4:	90 01 00 54 	stw     r0,84(r1)
   104f8:	38 00 00 07 	li      r0,7
   104fc:	90 01 00 58 	stw     r0,88(r1)

/* Is the socket in this state? */
#define sctp_sstate(sk, state) __sctp_sstate((sk), (SCTP_SS_##state))
static inline int __sctp_sstate(const struct sock *sk, sctp_sock_state_t state)
{
	return sk->sk_state == state;
   10500:	80 01 00 54 	lwz     r0,84(r1)
   10504:	7c 09 03 78 	mr      r9,r0
   10508:	88 09 00 0e 	lbz     r0,14(r9)
   1050c:	54 00 06 3e 	clrlwi  r0,r0,24
   10510:	81 21 00 58 	lwz     r9,88(r1)
   10514:	7f 89 00 00 	cmpw    cr7,r9,r0
   10518:	7c 00 00 26 	mfcr    r0
   1051c:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
   10520:	2f 80 00 00 	cmpwi   cr7,r0,0
   10524:	41 9e 00 0c 	beq-    cr7,10530 <sctp_poll+0x2c0>
		return mask;
   10528:	80 01 00 08 	lwz     r0,8(r1)
   1052c:	48 00 00 d0 	b       105fc <sctp_poll+0x38c>

	/* Is it writable?  */
	if (sctp_writeable(sk)) {
   10530:	80 61 00 0c 	lwz     r3,12(r1)
   10534:	48 00 18 65 	bl      11d98 <sctp_writeable>
   10538:	7c 60 1b 78 	mr      r0,r3
   1053c:	2f 80 00 00 	cmpwi   cr7,r0,0
   10540:	41 9e 00 14 	beq-    cr7,10554 <sctp_poll+0x2e4>
		mask |= POLLOUT | POLLWRNORM;
   10544:	80 01 00 08 	lwz     r0,8(r1)
   10548:	60 00 01 04 	ori     r0,r0,260
   1054c:	90 01 00 08 	stw     r0,8(r1)
   10550:	48 00 00 a8 	b       105f8 <sctp_poll+0x388>
	} else {
		set_bit(SOCK_ASYNC_NOSPACE, &sk->sk_socket->flags);
   10554:	80 01 00 0c 	lwz     r0,12(r1)
   10558:	7c 09 03 78 	mr      r9,r0
   1055c:	80 09 01 10 	lwz     r0,272(r9)
   10560:	30 00 00 08 	addic   r0,r0,8
   10564:	39 20 00 00 	li      r9,0
   10568:	91 21 00 5c 	stw     r9,92(r1)
   1056c:	90 01 00 60 	stw     r0,96(r1)
DEFINE_BITOP(clear_bits_unlock, andc, PPC_RELEASE_BARRIER, "")
DEFINE_BITOP(change_bits, xor, "", "")

static __inline__ void set_bit(int nr, volatile unsigned long *addr)
{
	set_bits(BITOP_MASK(nr), addr + BITOP_WORD(nr));
   10570:	80 01 00 5c 	lwz     r0,92(r1)
   10574:	7c 09 2e 70 	srawi   r9,r0,5
   10578:	7d 29 01 94 	addze   r9,r9
   1057c:	55 29 28 34 	rlwinm  r9,r9,5,0,26
   10580:	7c 09 00 50 	subf    r0,r9,r0
   10584:	39 20 00 01 	li      r9,1
   10588:	7d 29 00 30 	slw     r9,r9,r0
   1058c:	80 01 00 5c 	lwz     r0,92(r1)
   10590:	7c 00 2e 70 	srawi   r0,r0,5
   10594:	7c 00 01 94 	addze   r0,r0
   10598:	54 00 10 3a 	rlwinm  r0,r0,2,0,29
   1059c:	81 61 00 60 	lwz     r11,96(r1)
   105a0:	7c 0b 02 14 	add     r0,r11,r0
   105a4:	91 21 00 64 	stw     r9,100(r1)
   105a8:	90 01 00 68 	stw     r0,104(r1)
	: "=&r" (old), "+m" (*p)		\
	: "r" (mask), "r" (p)			\
	: "cc", "memory");			\
}

DEFINE_BITOP(set_bits, or, "", "")
   105ac:	80 01 00 68 	lwz     r0,104(r1)
   105b0:	90 01 00 6c 	stw     r0,108(r1)
   105b4:	81 41 00 6c 	lwz     r10,108(r1)
   105b8:	80 01 00 64 	lwz     r0,100(r1)
   105bc:	81 21 00 6c 	lwz     r9,108(r1)
   105c0:	81 61 00 6c 	lwz     r11,108(r1)
   105c4:	7f e0 48 28 	lwarx   r31,0,r9
   105c8:	7f ff 03 78 	or      r31,r31,r0
   105cc:	7f e0 49 2d 	stwcx.  r31,0,r9
   105d0:	40 a2 ff f4 	bne-    105c4 <sctp_poll+0x354>
   105d4:	93 e1 00 70 	stw     r31,112(r1)
		 * before the bit is set.  This could cause a lost I/O
		 * signal.  tcp_poll() has a race breaker for this race
		 * condition.  Based on their implementation, we put
		 * in the following code to cover it as well.
		 */
		if (sctp_writeable(sk))
   105d8:	80 61 00 0c 	lwz     r3,12(r1)
   105dc:	48 00 17 bd 	bl      11d98 <sctp_writeable>
   105e0:	7c 60 1b 78 	mr      r0,r3
   105e4:	2f 80 00 00 	cmpwi   cr7,r0,0
   105e8:	41 9e 00 10 	beq-    cr7,105f8 <sctp_poll+0x388>
			mask |= POLLOUT | POLLWRNORM;
   105ec:	80 01 00 08 	lwz     r0,8(r1)
   105f0:	60 00 01 04 	ori     r0,r0,260
   105f4:	90 01 00 08 	stw     r0,8(r1)
	}
	return mask;
   105f8:	80 01 00 08 	lwz     r0,8(r1)
}
   105fc:	7c 03 03 78 	mr      r3,r0
   10600:	80 01 00 94 	lwz     r0,148(r1)
   10604:	7c 08 03 a6 	mtlr    r0
   10608:	83 e1 00 8c 	lwz     r31,140(r1)
   1060c:	38 21 00 90 	addi    r1,r1,144
   10610:	4e 80 00 20 	blr

00010614 <sctp_bucket_create>:
 * 2nd Level Abstractions
 ********************************************************************/

static struct sctp_bind_bucket *sctp_bucket_create(
	struct sctp_bind_hashbucket *head, unsigned short snum)
{
   10614:	94 21 ff e0 	stwu    r1,-32(r1)
   10618:	7c 08 02 a6 	mflr    r0
   1061c:	90 01 00 24 	stw     r0,36(r1)
   10620:	90 61 00 18 	stw     r3,24(r1)
   10624:	7c 80 23 78 	mr      r0,r4
   10628:	b0 01 00 1c 	sth     r0,28(r1)
	struct sctp_bind_bucket *pp;

	pp = kmem_cache_alloc(sctp_bucket_cachep, GFP_ATOMIC);
   1062c:	3c 00 00 00 	lis     r0,0
   10630:	7c 09 03 78 	mr      r9,r0
   10634:	80 09 00 00 	lwz     r0,0(r9)
   10638:	7c 03 03 78 	mr      r3,r0
   1063c:	38 80 00 20 	li      r4,32
   10640:	48 00 00 01 	bl      10640 <sctp_bucket_create+0x2c>
   10644:	90 61 00 08 	stw     r3,8(r1)
	if (pp) {
   10648:	80 01 00 08 	lwz     r0,8(r1)
   1064c:	2f 80 00 00 	cmpwi   cr7,r0,0
   10650:	41 9e 00 a4 	beq-    cr7,106f4 <sctp_bucket_create+0xe0>
		SCTP_DBG_OBJCNT_INC(bind_bucket);
		pp->port = snum;
   10654:	80 01 00 08 	lwz     r0,8(r1)
   10658:	a1 21 00 1c 	lhz     r9,28(r1)
   1065c:	7c 0b 03 78 	mr      r11,r0
   10660:	b1 2b 00 00 	sth     r9,0(r11)
		pp->fastreuse = 0;
   10664:	80 01 00 08 	lwz     r0,8(r1)
   10668:	39 20 00 00 	li      r9,0
   1066c:	7c 0b 03 78 	mr      r11,r0
   10670:	b1 2b 00 02 	sth     r9,2(r11)
		INIT_HLIST_HEAD(&pp->owner);
   10674:	80 01 00 08 	lwz     r0,8(r1)
   10678:	39 20 00 00 	li      r9,0
   1067c:	7c 0b 03 78 	mr      r11,r0
   10680:	91 2b 00 0c 	stw     r9,12(r11)
		hlist_add_head(&pp->node, &head->chain);
   10684:	80 01 00 08 	lwz     r0,8(r1)
   10688:	31 20 00 04 	addic   r9,r0,4
   1068c:	80 01 00 18 	lwz     r0,24(r1)
   10690:	91 21 00 0c 	stw     r9,12(r1)
   10694:	90 01 00 10 	stw     r0,16(r1)
	}
}

static inline void hlist_add_head(struct hlist_node *n, struct hlist_head *h)
{
	struct hlist_node *first = h->first;
   10698:	80 01 00 10 	lwz     r0,16(r1)
   1069c:	7c 09 03 78 	mr      r9,r0
   106a0:	80 09 00 00 	lwz     r0,0(r9)
   106a4:	90 01 00 14 	stw     r0,20(r1)
	n->next = first;
   106a8:	80 01 00 0c 	lwz     r0,12(r1)
   106ac:	81 21 00 14 	lwz     r9,20(r1)
   106b0:	7c 0b 03 78 	mr      r11,r0
   106b4:	91 2b 00 00 	stw     r9,0(r11)
	if (first)
   106b8:	80 01 00 14 	lwz     r0,20(r1)
   106bc:	2f 80 00 00 	cmpwi   cr7,r0,0
   106c0:	41 9e 00 14 	beq-    cr7,106d4 <sctp_bucket_create+0xc0>
		first->pprev = &n->next;
   106c4:	81 21 00 0c 	lwz     r9,12(r1)
   106c8:	80 01 00 14 	lwz     r0,20(r1)
   106cc:	7c 0b 03 78 	mr      r11,r0
   106d0:	91 2b 00 04 	stw     r9,4(r11)
	h->first = n;
   106d4:	80 01 00 10 	lwz     r0,16(r1)
   106d8:	81 21 00 0c 	lwz     r9,12(r1)
   106dc:	7c 0b 03 78 	mr      r11,r0
   106e0:	91 2b 00 00 	stw     r9,0(r11)
	n->pprev = &h->first;
   106e4:	81 21 00 10 	lwz     r9,16(r1)
   106e8:	80 01 00 0c 	lwz     r0,12(r1)
   106ec:	7c 0b 03 78 	mr      r11,r0
   106f0:	91 2b 00 04 	stw     r9,4(r11)
	}
	return pp;
   106f4:	80 01 00 08 	lwz     r0,8(r1)
}
   106f8:	7c 03 03 78 	mr      r3,r0
   106fc:	80 01 00 24 	lwz     r0,36(r1)
   10700:	7c 08 03 a6 	mtlr    r0
   10704:	38 21 00 20 	addi    r1,r1,32
   10708:	4e 80 00 20 	blr

0001070c <sctp_bucket_destroy>:

/* Caller must hold hashbucket lock for this tb with local BH disabled */
static void sctp_bucket_destroy(struct sctp_bind_bucket *pp)
{
   1070c:	94 21 ff e0 	stwu    r1,-32(r1)
   10710:	7c 08 02 a6 	mflr    r0
   10714:	90 01 00 24 	stw     r0,36(r1)
   10718:	90 61 00 18 	stw     r3,24(r1)
	if (pp && hlist_empty(&pp->owner)) {
   1071c:	80 01 00 18 	lwz     r0,24(r1)
   10720:	2f 80 00 00 	cmpwi   cr7,r0,0
   10724:	41 9e 00 a0 	beq-    cr7,107c4 <sctp_bucket_destroy+0xb8>
   10728:	80 01 00 18 	lwz     r0,24(r1)
   1072c:	30 00 00 0c 	addic   r0,r0,12
   10730:	90 01 00 08 	stw     r0,8(r1)
	return !h->pprev;
}

static inline int hlist_empty(const struct hlist_head *h)
{
	return !h->first;
   10734:	80 01 00 08 	lwz     r0,8(r1)
   10738:	7c 09 03 78 	mr      r9,r0
   1073c:	80 09 00 00 	lwz     r0,0(r9)
   10740:	2f 80 00 00 	cmpwi   cr7,r0,0
   10744:	7c 00 00 26 	mfcr    r0
   10748:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
   1074c:	2f 80 00 00 	cmpwi   cr7,r0,0
   10750:	41 9e 00 74 	beq-    cr7,107c4 <sctp_bucket_destroy+0xb8>
		__hlist_del(&pp->node);
   10754:	80 01 00 18 	lwz     r0,24(r1)
   10758:	30 00 00 04 	addic   r0,r0,4
   1075c:	90 01 00 0c 	stw     r0,12(r1)
}

static inline void __hlist_del(struct hlist_node *n)
{
	struct hlist_node *next = n->next;
   10760:	80 01 00 0c 	lwz     r0,12(r1)
   10764:	7c 0b 03 78 	mr      r11,r0
   10768:	80 0b 00 00 	lwz     r0,0(r11)
   1076c:	90 01 00 10 	stw     r0,16(r1)
	struct hlist_node **pprev = n->pprev;
   10770:	80 01 00 0c 	lwz     r0,12(r1)
   10774:	7c 09 03 78 	mr      r9,r0
   10778:	80 09 00 04 	lwz     r0,4(r9)
   1077c:	90 01 00 14 	stw     r0,20(r1)
	*pprev = next;
   10780:	80 01 00 14 	lwz     r0,20(r1)
   10784:	81 21 00 10 	lwz     r9,16(r1)
   10788:	7c 0b 03 78 	mr      r11,r0
   1078c:	91 2b 00 00 	stw     r9,0(r11)
	if (next)
   10790:	80 01 00 10 	lwz     r0,16(r1)
   10794:	2f 80 00 00 	cmpwi   cr7,r0,0
   10798:	41 9e 00 14 	beq-    cr7,107ac <sctp_bucket_destroy+0xa0>
		next->pprev = pprev;
   1079c:	80 01 00 10 	lwz     r0,16(r1)
   107a0:	81 21 00 14 	lwz     r9,20(r1)
   107a4:	7c 0b 03 78 	mr      r11,r0
   107a8:	91 2b 00 04 	stw     r9,4(r11)
		kmem_cache_free(sctp_bucket_cachep, pp);
   107ac:	3c 00 00 00 	lis     r0,0
   107b0:	7c 09 03 78 	mr      r9,r0
   107b4:	80 09 00 00 	lwz     r0,0(r9)
   107b8:	7c 03 03 78 	mr      r3,r0
   107bc:	80 81 00 18 	lwz     r4,24(r1)
   107c0:	48 00 00 01 	bl      107c0 <sctp_bucket_destroy+0xb4>
		SCTP_DBG_OBJCNT_DEC(bind_bucket);
	}
}
   107c4:	80 01 00 24 	lwz     r0,36(r1)
   107c8:	7c 08 03 a6 	mtlr    r0
   107cc:	38 21 00 20 	addi    r1,r1,32
   107d0:	4e 80 00 20 	blr

000107d4 <sctp_put_port>:
	sctp_bucket_destroy(pp);
	sctp_spin_unlock(&head->lock);
}

void sctp_put_port(struct sock *sk)
{
   107d4:	94 21 ff b0 	stwu    r1,-80(r1)
   107d8:	7c 08 02 a6 	mflr    r0
   107dc:	90 01 00 54 	stw     r0,84(r1)
   107e0:	90 61 00 48 	stw     r3,72(r1)
	sctp_local_bh_disable();
   107e4:	48 00 00 01 	bl      107e4 <sctp_put_port+0x10>
   107e8:	80 01 00 48 	lwz     r0,72(r1)
   107ec:	90 01 00 08 	stw     r0,8(r1)

/* Release this socket's reference to a local port.  */
static inline void __sctp_put_port(struct sock *sk)
{
	struct sctp_bind_hashbucket *head =
		&sctp_port_hashtable[sctp_phashfn(inet_sk(sk)->inet_num)];
   107f0:	3c 00 00 00 	lis     r0,0
   107f4:	30 00 00 00 	addic   r0,r0,0
   107f8:	7c 0a 03 78 	mr      r10,r0
   107fc:	81 2a 00 5c 	lwz     r9,92(r10)
   10800:	80 01 00 08 	lwz     r0,8(r1)
   10804:	90 01 00 0c 	stw     r0,12(r1)
   10808:	80 01 00 0c 	lwz     r0,12(r1)
   1080c:	7c 0b 03 78 	mr      r11,r0
   10810:	a0 0b 01 4e 	lhz     r0,334(r11)
   10814:	54 00 04 3e 	clrlwi  r0,r0,16
   10818:	b0 01 00 10 	sth     r0,16(r1)

/* Warning: The following hash functions assume a power of two 'size'. */
/* This is the hash function for the SCTP port hash table. */
static inline int sctp_phashfn(__u16 lport)
{
	return lport & (sctp_port_hashsize - 1);
   1081c:	a0 01 00 10 	lhz     r0,16(r1)
   10820:	54 0b 04 3e 	clrlwi  r11,r0,16
   10824:	3c 00 00 00 	lis     r0,0
   10828:	30 00 00 00 	addic   r0,r0,0
   1082c:	7c 0a 03 78 	mr      r10,r0
   10830:	80 0a 00 58 	lwz     r0,88(r10)
   10834:	30 00 ff ff 	addic   r0,r0,-1
   10838:	7d 60 00 38 	and     r0,r11,r0
   1083c:	54 00 10 3a 	rlwinm  r0,r0,2,0,29
}

/* Release this socket's reference to a local port.  */
static inline void __sctp_put_port(struct sock *sk)
{
	struct sctp_bind_hashbucket *head =
   10840:	7c 09 02 14 	add     r0,r9,r0
   10844:	90 01 00 14 	stw     r0,20(r1)
		&sctp_port_hashtable[sctp_phashfn(inet_sk(sk)->inet_num)];
	struct sctp_bind_bucket *pp;

	sctp_spin_lock(&head->lock);
   10848:	80 01 00 14 	lwz     r0,20(r1)
   1084c:	90 01 00 18 	stw     r0,24(r1)
   10850:	80 01 00 08 	lwz     r0,8(r1)
   10854:	90 01 00 1c 	stw     r0,28(r1)
   10858:	80 01 00 1c 	lwz     r0,28(r1)
	pp = sctp_sk(sk)->bind_hash;
   1085c:	7c 0b 03 78 	mr      r11,r0
   10860:	80 0b 01 d8 	lwz     r0,472(r11)
   10864:	90 01 00 20 	stw     r0,32(r1)
   10868:	80 01 00 08 	lwz     r0,8(r1)
   1086c:	90 01 00 24 	stw     r0,36(r1)
	__sk_nulls_add_node_rcu(sk, list);
}

static __inline__ void __sk_del_bind_node(struct sock *sk)
{
	__hlist_del(&sk->sk_bind_node);
   10870:	80 01 00 24 	lwz     r0,36(r1)
   10874:	30 00 00 14 	addic   r0,r0,20
   10878:	90 01 00 28 	stw     r0,40(r1)
	return !h->first;
}

static inline void __hlist_del(struct hlist_node *n)
{
	struct hlist_node *next = n->next;
   1087c:	80 01 00 28 	lwz     r0,40(r1)
   10880:	7c 09 03 78 	mr      r9,r0
   10884:	80 09 00 00 	lwz     r0,0(r9)
   10888:	90 01 00 2c 	stw     r0,44(r1)
	struct hlist_node **pprev = n->pprev;
   1088c:	80 01 00 28 	lwz     r0,40(r1)
   10890:	7c 0a 03 78 	mr      r10,r0
   10894:	80 0a 00 04 	lwz     r0,4(r10)
   10898:	90 01 00 30 	stw     r0,48(r1)
	*pprev = next;
   1089c:	80 01 00 30 	lwz     r0,48(r1)
   108a0:	81 21 00 2c 	lwz     r9,44(r1)
   108a4:	7c 0b 03 78 	mr      r11,r0
   108a8:	91 2b 00 00 	stw     r9,0(r11)
	if (next)
   108ac:	80 01 00 2c 	lwz     r0,44(r1)
   108b0:	2f 80 00 00 	cmpwi   cr7,r0,0
   108b4:	41 9e 00 14 	beq-    cr7,108c8 <sctp_put_port+0xf4>
		next->pprev = pprev;
   108b8:	80 01 00 2c 	lwz     r0,44(r1)
   108bc:	81 21 00 30 	lwz     r9,48(r1)
   108c0:	7c 0a 03 78 	mr      r10,r0
   108c4:	91 2a 00 04 	stw     r9,4(r10)
   108c8:	80 01 00 08 	lwz     r0,8(r1)
   108cc:	90 01 00 34 	stw     r0,52(r1)
   108d0:	80 01 00 34 	lwz     r0,52(r1)
	__sk_del_bind_node(sk);
	sctp_sk(sk)->bind_hash = NULL;
   108d4:	39 20 00 00 	li      r9,0
   108d8:	7c 0b 03 78 	mr      r11,r0
   108dc:	91 2b 01 d8 	stw     r9,472(r11)
   108e0:	80 01 00 08 	lwz     r0,8(r1)
   108e4:	90 01 00 38 	stw     r0,56(r1)
   108e8:	80 01 00 38 	lwz     r0,56(r1)
	inet_sk(sk)->inet_num = 0;
   108ec:	39 20 00 00 	li      r9,0
   108f0:	7c 0a 03 78 	mr      r10,r0
   108f4:	b1 2a 01 4e 	sth     r9,334(r10)
	sctp_bucket_destroy(pp);
   108f8:	80 61 00 20 	lwz     r3,32(r1)
   108fc:	4b ff fe 11 	bl      1070c <sctp_bucket_destroy>
	sctp_spin_unlock(&head->lock);
   10900:	80 01 00 14 	lwz     r0,20(r1)
   10904:	90 01 00 3c 	stw     r0,60(r1)

void sctp_put_port(struct sock *sk)
{
	sctp_local_bh_disable();
	__sctp_put_port(sk);
	sctp_local_bh_enable();
   10908:	48 00 00 01 	bl      10908 <sctp_put_port+0x134>
}
   1090c:	80 01 00 54 	lwz     r0,84(r1)
   10910:	7c 08 03 a6 	mtlr    r0
   10914:	38 21 00 50 	addi    r1,r1,80
   10918:	4e 80 00 20 	blr

0001091c <sctp_autobind>:
 * to binding with a wildcard address.
 * One of those addresses will be the primary address for the association.
 * This automatically enables the multihoming capability of SCTP.
 */
static int sctp_autobind(struct sock *sk)
{
   1091c:	94 21 ff c0 	stwu    r1,-64(r1)
   10920:	7c 08 02 a6 	mflr    r0
   10924:	90 01 00 44 	stw     r0,68(r1)
   10928:	90 61 00 38 	stw     r3,56(r1)
   1092c:	80 01 00 38 	lwz     r0,56(r1)
   10930:	90 01 00 10 	stw     r0,16(r1)
   10934:	80 01 00 10 	lwz     r0,16(r1)
	union sctp_addr autoaddr;
	struct sctp_af *af;
	__be16 port;

	/* Initialize a local sockaddr structure to INADDR_ANY. */
	af = sctp_sk(sk)->pf->af;
   10938:	7c 09 03 78 	mr      r9,r0
   1093c:	80 09 01 cc 	lwz     r0,460(r9)
   10940:	7c 09 03 78 	mr      r9,r0
   10944:	80 09 00 24 	lwz     r0,36(r9)
   10948:	90 01 00 08 	stw     r0,8(r1)
   1094c:	80 01 00 38 	lwz     r0,56(r1)
   10950:	90 01 00 14 	stw     r0,20(r1)
   10954:	80 01 00 14 	lwz     r0,20(r1)

	port = htons(inet_sk(sk)->inet_num);
   10958:	7c 09 03 78 	mr      r9,r0
   1095c:	a0 09 01 4e 	lhz     r0,334(r9)
   10960:	b0 01 00 0c 	sth     r0,12(r1)
	af->inaddr_any(&autoaddr, port);
   10964:	80 01 00 08 	lwz     r0,8(r1)
   10968:	7c 09 03 78 	mr      r9,r0
   1096c:	80 09 00 4c 	lwz     r0,76(r9)
   10970:	39 61 00 18 	addi    r11,r1,24
   10974:	a1 21 00 0c 	lhz     r9,12(r1)
   10978:	55 29 04 3e 	clrlwi  r9,r9,16
   1097c:	7d 63 5b 78 	mr      r3,r11
   10980:	7d 24 4b 78 	mr      r4,r9
   10984:	7c 09 03 a6 	mtctr   r0
   10988:	4e 80 04 21 	bctrl

	return sctp_do_bind(sk, &autoaddr, af->sockaddr_len);
   1098c:	80 01 00 08 	lwz     r0,8(r1)
   10990:	7c 09 03 78 	mr      r9,r0
   10994:	80 09 00 6c 	lwz     r0,108(r9)
   10998:	39 21 00 18 	addi    r9,r1,24
   1099c:	80 61 00 38 	lwz     r3,56(r1)
   109a0:	7d 24 4b 78 	mr      r4,r9
   109a4:	7c 05 03 78 	mr      r5,r0
   109a8:	4b fe fb 35 	bl      4dc <sctp_do_bind>
   109ac:	7c 60 1b 78 	mr      r0,r3
}
   109b0:	7c 03 03 78 	mr      r3,r0
   109b4:	80 01 00 44 	lwz     r0,68(r1)
   109b8:	7c 08 03 a6 	mtlr    r0
   109bc:	38 21 00 40 	addi    r1,r1,64
   109c0:	4e 80 00 20 	blr

000109c4 <sctp_msghdr_parse>:
 * msg_control
 * points here
 */
SCTP_STATIC int sctp_msghdr_parse(const struct msghdr *msg,
				  sctp_cmsgs_t *cmsgs)
{
   109c4:	94 21 ff d0 	stwu    r1,-48(r1)
   109c8:	90 61 00 28 	stw     r3,40(r1)
   109cc:	90 81 00 2c 	stw     r4,44(r1)
	struct cmsghdr *cmsg;
	struct msghdr *my_msg = (struct msghdr *)msg;
   109d0:	80 01 00 28 	lwz     r0,40(r1)
   109d4:	90 01 00 0c 	stw     r0,12(r1)

	for (cmsg = CMSG_FIRSTHDR(msg);
   109d8:	80 01 00 28 	lwz     r0,40(r1)
   109dc:	7c 09 03 78 	mr      r9,r0
   109e0:	80 09 00 14 	lwz     r0,20(r9)
   109e4:	2b 80 00 0b 	cmplwi  cr7,r0,11
   109e8:	40 9d 00 14 	ble-    cr7,109fc <sctp_msghdr_parse+0x38>
   109ec:	80 01 00 28 	lwz     r0,40(r1)
   109f0:	7c 0a 03 78 	mr      r10,r0
   109f4:	80 0a 00 10 	lwz     r0,16(r10)
   109f8:	48 00 00 08 	b       10a00 <sctp_msghdr_parse+0x3c>
   109fc:	38 00 00 00 	li      r0,0
   10a00:	90 01 00 08 	stw     r0,8(r1)
   10a04:	48 00 01 c4 	b       10bc8 <sctp_msghdr_parse+0x204>
	     cmsg != NULL;
	     cmsg = CMSG_NXTHDR(my_msg, cmsg)) {
		if (!CMSG_OK(my_msg, cmsg))
   10a08:	80 01 00 08 	lwz     r0,8(r1)
   10a0c:	7c 0b 03 78 	mr      r11,r0
   10a10:	80 0b 00 00 	lwz     r0,0(r11)
   10a14:	2b 80 00 0b 	cmplwi  cr7,r0,11
   10a18:	40 9d 00 40 	ble-    cr7,10a58 <sctp_msghdr_parse+0x94>
   10a1c:	80 01 00 08 	lwz     r0,8(r1)
   10a20:	7c 0a 03 78 	mr      r10,r0
   10a24:	81 2a 00 00 	lwz     r9,0(r10)
   10a28:	80 01 00 0c 	lwz     r0,12(r1)
   10a2c:	7c 0a 03 78 	mr      r10,r0
   10a30:	81 6a 00 14 	lwz     r11,20(r10)
   10a34:	80 01 00 0c 	lwz     r0,12(r1)
   10a38:	7c 0a 03 78 	mr      r10,r0
   10a3c:	80 0a 00 10 	lwz     r0,16(r10)
   10a40:	7c 0a 03 78 	mr      r10,r0
   10a44:	80 01 00 08 	lwz     r0,8(r1)
   10a48:	7c 00 50 50 	subf    r0,r0,r10
   10a4c:	7c 0b 02 14 	add     r0,r11,r0
   10a50:	7f 89 00 40 	cmplw   cr7,r9,r0
   10a54:	40 9d 00 0c 	ble-    cr7,10a60 <sctp_msghdr_parse+0x9c>
			return -EINVAL;
   10a58:	38 00 ff ea 	li      r0,-22
   10a5c:	48 00 01 7c 	b       10bd8 <sctp_msghdr_parse+0x214>

		/* Should we parse this header or ignore?  */
		if (cmsg->cmsg_level != IPPROTO_SCTP)
   10a60:	80 01 00 08 	lwz     r0,8(r1)
   10a64:	7c 0b 03 78 	mr      r11,r0
   10a68:	80 0b 00 04 	lwz     r0,4(r11)
   10a6c:	2f 80 00 84 	cmpwi   cr7,r0,132
   10a70:	40 9e 00 c4 	bne-    cr7,10b34 <sctp_msghdr_parse+0x170>
			continue;

		/* Strictly check lengths following example in SCM code.  */
		switch (cmsg->cmsg_type) {
   10a74:	80 01 00 08 	lwz     r0,8(r1)
   10a78:	7c 09 03 78 	mr      r9,r0
   10a7c:	80 09 00 08 	lwz     r0,8(r9)
   10a80:	2f 80 00 00 	cmpwi   cr7,r0,0
   10a84:	41 9e 00 10 	beq-    cr7,10a94 <sctp_msghdr_parse+0xd0>
   10a88:	2f 80 00 01 	cmpwi   cr7,r0,1
   10a8c:	41 9e 00 3c 	beq-    cr7,10ac8 <sctp_msghdr_parse+0x104>
   10a90:	48 00 00 9c 	b       10b2c <sctp_msghdr_parse+0x168>
			 *
			 * cmsg_level    cmsg_type      cmsg_data[]
			 * ------------  ------------   ----------------------
			 * IPPROTO_SCTP  SCTP_INIT      struct sctp_initmsg
			 */
			if (cmsg->cmsg_len !=
   10a94:	80 01 00 08 	lwz     r0,8(r1)
   10a98:	7c 0a 03 78 	mr      r10,r0
   10a9c:	80 0a 00 00 	lwz     r0,0(r10)
   10aa0:	2f 80 00 14 	cmpwi   cr7,r0,20
   10aa4:	41 9e 00 0c 	beq-    cr7,10ab0 <sctp_msghdr_parse+0xec>
			    CMSG_LEN(sizeof(struct sctp_initmsg)))
				return -EINVAL;
   10aa8:	38 00 ff ea 	li      r0,-22
   10aac:	48 00 01 2c 	b       10bd8 <sctp_msghdr_parse+0x214>
			cmsgs->init = (struct sctp_initmsg *)CMSG_DATA(cmsg);
   10ab0:	80 01 00 08 	lwz     r0,8(r1)
   10ab4:	31 20 00 0c 	addic   r9,r0,12
   10ab8:	80 01 00 2c 	lwz     r0,44(r1)
   10abc:	7c 0b 03 78 	mr      r11,r0
   10ac0:	91 2b 00 00 	stw     r9,0(r11)
			break;
   10ac4:	48 00 00 7c 	b       10b40 <sctp_msghdr_parse+0x17c>
			 *
			 * cmsg_level    cmsg_type      cmsg_data[]
			 * ------------  ------------   ----------------------
			 * IPPROTO_SCTP  SCTP_SNDRCV    struct sctp_sndrcvinfo
			 */
			if (cmsg->cmsg_len !=
   10ac8:	80 01 00 08 	lwz     r0,8(r1)
   10acc:	7c 09 03 78 	mr      r9,r0
   10ad0:	80 09 00 00 	lwz     r0,0(r9)
   10ad4:	2f 80 00 2c 	cmpwi   cr7,r0,44
   10ad8:	41 9e 00 0c 	beq-    cr7,10ae4 <sctp_msghdr_parse+0x120>
			    CMSG_LEN(sizeof(struct sctp_sndrcvinfo)))
				return -EINVAL;
   10adc:	38 00 ff ea 	li      r0,-22
   10ae0:	48 00 00 f8 	b       10bd8 <sctp_msghdr_parse+0x214>

			cmsgs->info =
				(struct sctp_sndrcvinfo *)CMSG_DATA(cmsg);
   10ae4:	80 01 00 08 	lwz     r0,8(r1)
   10ae8:	31 20 00 0c 	addic   r9,r0,12
			 */
			if (cmsg->cmsg_len !=
			    CMSG_LEN(sizeof(struct sctp_sndrcvinfo)))
				return -EINVAL;

			cmsgs->info =
   10aec:	80 01 00 2c 	lwz     r0,44(r1)
   10af0:	7c 0a 03 78 	mr      r10,r0
   10af4:	91 2a 00 04 	stw     r9,4(r10)
				(struct sctp_sndrcvinfo *)CMSG_DATA(cmsg);

			/* Minimally, validate the sinfo_flags. */
			if (cmsgs->info->sinfo_flags &
   10af8:	80 01 00 2c 	lwz     r0,44(r1)
   10afc:	7c 0b 03 78 	mr      r11,r0
   10b00:	80 0b 00 04 	lwz     r0,4(r11)
   10b04:	7c 09 03 78 	mr      r9,r0
   10b08:	a0 09 00 04 	lhz     r0,4(r9)
   10b0c:	54 00 04 3e 	clrlwi  r0,r0,16
   10b10:	7c 09 03 78 	mr      r9,r0
   10b14:	38 00 fd f8 	li      r0,-520
   10b18:	7d 20 00 38 	and     r0,r9,r0
   10b1c:	2f 80 00 00 	cmpwi   cr7,r0,0
   10b20:	41 9e 00 1c 	beq-    cr7,10b3c <sctp_msghdr_parse+0x178>
			    ~(SCTP_UNORDERED | SCTP_ADDR_OVER |
			      SCTP_ABORT | SCTP_EOF))
				return -EINVAL;
   10b24:	38 00 ff ea 	li      r0,-22
   10b28:	48 00 00 b0 	b       10bd8 <sctp_msghdr_parse+0x214>
			break;

		default:
			return -EINVAL;
   10b2c:	38 00 ff ea 	li      r0,-22
   10b30:	48 00 00 a8 	b       10bd8 <sctp_msghdr_parse+0x214>
		if (!CMSG_OK(my_msg, cmsg))
			return -EINVAL;

		/* Should we parse this header or ignore?  */
		if (cmsg->cmsg_level != IPPROTO_SCTP)
			continue;
   10b34:	60 00 00 00 	nop
   10b38:	48 00 00 08 	b       10b40 <sctp_msghdr_parse+0x17c>
			/* Minimally, validate the sinfo_flags. */
			if (cmsgs->info->sinfo_flags &
			    ~(SCTP_UNORDERED | SCTP_ADDR_OVER |
			      SCTP_ABORT | SCTP_EOF))
				return -EINVAL;
			break;
   10b3c:	60 00 00 00 	nop

		default:
			return -EINVAL;
   10b40:	80 01 00 0c 	lwz     r0,12(r1)
   10b44:	90 01 00 10 	stw     r0,16(r1)
   10b48:	80 01 00 08 	lwz     r0,8(r1)
   10b4c:	90 01 00 14 	stw     r0,20(r1)
	return __ptr;
}

static inline struct cmsghdr * cmsg_nxthdr (struct msghdr *__msg, struct cmsghdr *__cmsg)
{
	return __cmsg_nxthdr(__msg->msg_control, __msg->msg_controllen, __cmsg);
   10b50:	80 01 00 10 	lwz     r0,16(r1)
   10b54:	7c 0a 03 78 	mr      r10,r0
   10b58:	81 2a 00 10 	lwz     r9,16(r10)
   10b5c:	80 01 00 10 	lwz     r0,16(r1)
   10b60:	7c 0b 03 78 	mr      r11,r0
   10b64:	80 0b 00 14 	lwz     r0,20(r11)
   10b68:	91 21 00 18 	stw     r9,24(r1)
   10b6c:	90 01 00 1c 	stw     r0,28(r1)
   10b70:	80 01 00 14 	lwz     r0,20(r1)
   10b74:	90 01 00 20 	stw     r0,32(r1)
static inline struct cmsghdr * __cmsg_nxthdr(void *__ctl, __kernel_size_t __size,
					       struct cmsghdr *__cmsg)
{
	struct cmsghdr * __ptr;

	__ptr = (struct cmsghdr*)(((unsigned char *) __cmsg) +  CMSG_ALIGN(__cmsg->cmsg_len));
   10b78:	80 01 00 20 	lwz     r0,32(r1)
   10b7c:	7c 09 03 78 	mr      r9,r0
   10b80:	80 09 00 00 	lwz     r0,0(r9)
   10b84:	30 00 00 03 	addic   r0,r0,3
   10b88:	54 00 00 3a 	rlwinm  r0,r0,0,0,29
   10b8c:	81 21 00 20 	lwz     r9,32(r1)
   10b90:	7c 09 02 14 	add     r0,r9,r0
   10b94:	90 01 00 24 	stw     r0,36(r1)
	if ((unsigned long)((char*)(__ptr+1) - (char *) __ctl) > __size)
   10b98:	80 01 00 24 	lwz     r0,36(r1)
   10b9c:	30 00 00 0c 	addic   r0,r0,12
   10ba0:	7c 09 03 78 	mr      r9,r0
   10ba4:	80 01 00 18 	lwz     r0,24(r1)
   10ba8:	7c 00 48 50 	subf    r0,r0,r9
   10bac:	81 21 00 1c 	lwz     r9,28(r1)
   10bb0:	7f 89 00 40 	cmplw   cr7,r9,r0
   10bb4:	40 9c 00 0c 	bge-    cr7,10bc0 <sctp_msghdr_parse+0x1fc>
		return (struct cmsghdr *)0;
   10bb8:	38 00 00 00 	li      r0,0
   10bbc:	48 00 00 08 	b       10bc4 <sctp_msghdr_parse+0x200>

	return __ptr;
   10bc0:	80 01 00 24 	lwz     r0,36(r1)
	struct cmsghdr *cmsg;
	struct msghdr *my_msg = (struct msghdr *)msg;

	for (cmsg = CMSG_FIRSTHDR(msg);
	     cmsg != NULL;
	     cmsg = CMSG_NXTHDR(my_msg, cmsg)) {
   10bc4:	90 01 00 08 	stw     r0,8(r1)
				  sctp_cmsgs_t *cmsgs)
{
	struct cmsghdr *cmsg;
	struct msghdr *my_msg = (struct msghdr *)msg;

	for (cmsg = CMSG_FIRSTHDR(msg);
   10bc8:	80 01 00 08 	lwz     r0,8(r1)
   10bcc:	2f 80 00 00 	cmpwi   cr7,r0,0
   10bd0:	40 9e fe 38 	bne+    cr7,10a08 <sctp_msghdr_parse+0x44>

		default:
			return -EINVAL;
		}
	}
	return 0;
   10bd4:	38 00 00 00 	li      r0,0
}
   10bd8:	7c 03 03 78 	mr      r3,r0
   10bdc:	38 21 00 30 	addi    r1,r1,48
   10be0:	4e 80 00 20 	blr

00010be4 <sctp_wait_for_packet>:
 * Wait for a packet..
 * Note: This function is the same function as in core/datagram.c
 * with a few modifications to make lksctp work.
 */
static int sctp_wait_for_packet(struct sock * sk, int *err, long *timeo_p)
{
   10be4:	94 21 ff 60 	stwu    r1,-160(r1)
   10be8:	7c 08 02 a6 	mflr    r0
   10bec:	90 01 00 a4 	stw     r0,164(r1)
   10bf0:	93 e1 00 9c 	stw     r31,156(r1)
   10bf4:	90 61 00 88 	stw     r3,136(r1)
   10bf8:	90 81 00 8c 	stw     r4,140(r1)
   10bfc:	90 a1 00 90 	stw     r5,144(r1)
	int error;
	DEFINE_WAIT(wait);
   10c00:	38 00 00 00 	li      r0,0
   10c04:	90 01 00 74 	stw     r0,116(r1)
   10c08:	38 00 00 00 	li      r0,0
   10c0c:	90 01 00 78 	stw     r0,120(r1)
   10c10:	38 00 00 00 	li      r0,0
   10c14:	90 01 00 7c 	stw     r0,124(r1)
   10c18:	38 00 00 00 	li      r0,0
   10c1c:	90 01 00 80 	stw     r0,128(r1)
   10c20:	38 00 00 00 	li      r0,0
   10c24:	90 01 00 84 	stw     r0,132(r1)
   10c28:	7c 40 13 78 	mr      r0,r2
   10c2c:	90 01 00 78 	stw     r0,120(r1)
   10c30:	3c 00 00 00 	lis     r0,0
   10c34:	30 00 00 00 	addic   r0,r0,0
   10c38:	90 01 00 7c 	stw     r0,124(r1)
   10c3c:	38 01 00 74 	addi    r0,r1,116
   10c40:	30 00 00 0c 	addic   r0,r0,12
   10c44:	90 01 00 80 	stw     r0,128(r1)
   10c48:	38 01 00 74 	addi    r0,r1,116
   10c4c:	30 00 00 0c 	addic   r0,r0,12
   10c50:	90 01 00 84 	stw     r0,132(r1)
   10c54:	80 01 00 88 	lwz     r0,136(r1)
   10c58:	90 01 00 0c 	stw     r0,12(r1)
	sk->sk_socket = sock;
}

static inline wait_queue_head_t *sk_sleep(struct sock *sk)
{
	return &sk->sk_wq->wait;
   10c5c:	80 01 00 0c 	lwz     r0,12(r1)
   10c60:	7c 09 03 78 	mr      r9,r0
   10c64:	80 09 00 68 	lwz     r0,104(r9)

	prepare_to_wait_exclusive(sk_sleep(sk), &wait, TASK_INTERRUPTIBLE);
   10c68:	7c 09 03 78 	mr      r9,r0
   10c6c:	38 01 00 74 	addi    r0,r1,116
   10c70:	7d 23 4b 78 	mr      r3,r9
   10c74:	7c 04 03 78 	mr      r4,r0
   10c78:	38 a0 00 01 	li      r5,1
   10c7c:	48 00 00 01 	bl      10c7c <sctp_wait_for_packet+0x98>
   10c80:	80 01 00 88 	lwz     r0,136(r1)
   10c84:	90 01 00 10 	stw     r0,16(r1)
 */
 
static inline int sock_error(struct sock *sk)
{
	int err;
	if (likely(!sk->sk_err))
   10c88:	80 01 00 10 	lwz     r0,16(r1)
   10c8c:	7c 0b 03 78 	mr      r11,r0
   10c90:	80 0b 00 c8 	lwz     r0,200(r11)
   10c94:	2f 80 00 00 	cmpwi   cr7,r0,0
   10c98:	7c 00 00 26 	mfcr    r0
   10c9c:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
   10ca0:	2f 80 00 00 	cmpwi   cr7,r0,0
   10ca4:	41 9e 00 0c 	beq-    cr7,10cb0 <sctp_wait_for_packet+0xcc>
		return 0;
   10ca8:	38 00 00 00 	li      r0,0
   10cac:	48 00 00 80 	b       10d2c <sctp_wait_for_packet+0x148>
	err = xchg(&sk->sk_err, 0);
   10cb0:	38 00 00 00 	li      r0,0
   10cb4:	90 01 00 14 	stw     r0,20(r1)
   10cb8:	80 01 00 10 	lwz     r0,16(r1)
   10cbc:	31 20 00 c8 	addic   r9,r0,200
   10cc0:	80 01 00 14 	lwz     r0,20(r1)
   10cc4:	91 21 00 18 	stw     r9,24(r1)
   10cc8:	90 01 00 1c 	stw     r0,28(r1)
   10ccc:	38 00 00 04 	li      r0,4
   10cd0:	90 01 00 20 	stw     r0,32(r1)
extern void __xchg_called_with_bad_pointer(void);

static __always_inline unsigned long
__xchg(volatile void *ptr, unsigned long x, unsigned int size)
{
	switch (size) {
   10cd4:	80 01 00 20 	lwz     r0,32(r1)
   10cd8:	2f 80 00 04 	cmpwi   cr7,r0,4
   10cdc:	40 9e 00 3c 	bne-    cr7,10d18 <sctp_wait_for_packet+0x134>
   10ce0:	80 01 00 18 	lwz     r0,24(r1)
   10ce4:	90 01 00 24 	stw     r0,36(r1)
   10ce8:	80 01 00 1c 	lwz     r0,28(r1)
   10cec:	90 01 00 28 	stw     r0,40(r1)
static __always_inline unsigned long
__xchg_u32(volatile void *p, unsigned long val)
{
	unsigned long prev;

	__asm__ __volatile__(
   10cf0:	81 41 00 24 	lwz     r10,36(r1)
   10cf4:	80 01 00 24 	lwz     r0,36(r1)
   10cf8:	81 21 00 28 	lwz     r9,40(r1)
   10cfc:	81 61 00 24 	lwz     r11,36(r1)
   10d00:	7f e0 00 28 	lwarx   r31,0,r0
   10d04:	7d 20 01 2d 	stwcx.  r9,0,r0
   10d08:	40 a2 ff f8 	bne-    10d00 <sctp_wait_for_packet+0x11c>
   10d0c:	93 e1 00 2c 	stw     r31,44(r1)
	PPC_ACQUIRE_BARRIER
	: "=&r" (prev), "+m" (*(volatile unsigned int *)p)
	: "r" (p), "r" (val)
	: "cc", "memory");

	return prev;
   10d10:	80 01 00 2c 	lwz     r0,44(r1)
   10d14:	48 00 00 0c 	b       10d20 <sctp_wait_for_packet+0x13c>
#ifdef CONFIG_PPC64
	case 8:
		return __xchg_u64(ptr, x);
#endif
	}
	__xchg_called_with_bad_pointer();
   10d18:	48 00 00 01 	bl      10d18 <sctp_wait_for_packet+0x134>
	return x;
   10d1c:	80 01 00 1c 	lwz     r0,28(r1)
   10d20:	90 01 00 30 	stw     r0,48(r1)
	return -err;
   10d24:	80 01 00 30 	lwz     r0,48(r1)
   10d28:	7c 00 00 d0 	neg     r0,r0

	/* Socket errors? */
	error = sock_error(sk);
   10d2c:	90 01 00 08 	stw     r0,8(r1)
	if (error)
   10d30:	80 01 00 08 	lwz     r0,8(r1)
   10d34:	2f 80 00 00 	cmpwi   cr7,r0,0
   10d38:	40 9e 02 18 	bne-    cr7,10f50 <sctp_wait_for_packet+0x36c>
		goto out;

	if (!skb_queue_empty(&sk->sk_receive_queue))
   10d3c:	80 01 00 88 	lwz     r0,136(r1)
   10d40:	30 00 00 3c 	addic   r0,r0,60
   10d44:	90 01 00 34 	stw     r0,52(r1)
   10d48:	80 01 00 34 	lwz     r0,52(r1)
   10d4c:	7c 09 03 78 	mr      r9,r0
   10d50:	80 09 00 00 	lwz     r0,0(r9)
   10d54:	81 21 00 34 	lwz     r9,52(r1)
   10d58:	7f 89 00 00 	cmpw    cr7,r9,r0
   10d5c:	7c 00 00 26 	mfcr    r0
   10d60:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
   10d64:	2f 80 00 00 	cmpwi   cr7,r0,0
   10d68:	41 9e 01 78 	beq-    cr7,10ee0 <sctp_wait_for_packet+0x2fc>
		goto ready;

	/* Socket shut down?  */
	if (sk->sk_shutdown & RCV_SHUTDOWN)
   10d6c:	80 01 00 88 	lwz     r0,136(r1)
   10d70:	7c 0b 03 78 	mr      r11,r0
   10d74:	80 0b 00 94 	lwz     r0,148(r11)
   10d78:	54 00 17 be 	rlwinm  r0,r0,2,30,31
   10d7c:	54 00 06 3e 	clrlwi  r0,r0,24
   10d80:	54 00 07 fe 	clrlwi  r0,r0,31
   10d84:	54 00 06 3e 	clrlwi  r0,r0,24
   10d88:	2f 80 00 00 	cmpwi   cr7,r0,0
   10d8c:	40 9e 01 cc 	bne-    cr7,10f58 <sctp_wait_for_packet+0x374>
		goto out;

	/* Sequenced packets can come disconnected.  If so we report the
	 * problem.
	 */
	error = -ENOTCONN;
   10d90:	38 00 ff 95 	li      r0,-107
   10d94:	90 01 00 08 	stw     r0,8(r1)
   10d98:	80 01 00 88 	lwz     r0,136(r1)
   10d9c:	90 01 00 38 	stw     r0,56(r1)
   10da0:	80 01 00 38 	lwz     r0,56(r1)

	/* Is there a good reason to think that we may receive some data?  */
	if (list_empty(&sctp_sk(sk)->ep->asocs) && !sctp_sstate(sk, LISTENING))
   10da4:	7c 09 03 78 	mr      r9,r0
   10da8:	80 09 01 d4 	lwz     r0,468(r9)
   10dac:	30 00 00 4c 	addic   r0,r0,76
   10db0:	90 01 00 3c 	stw     r0,60(r1)
 * list_empty - tests whether a list is empty
 * @head: the list to test.
 */
static inline int list_empty(const struct list_head *head)
{
	return head->next == head;
   10db4:	80 01 00 3c 	lwz     r0,60(r1)
   10db8:	7c 0b 03 78 	mr      r11,r0
   10dbc:	80 0b 00 00 	lwz     r0,0(r11)
   10dc0:	81 21 00 3c 	lwz     r9,60(r1)
   10dc4:	7f 89 00 00 	cmpw    cr7,r9,r0
   10dc8:	7c 00 00 26 	mfcr    r0
   10dcc:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
   10dd0:	2f 80 00 00 	cmpwi   cr7,r0,0
   10dd4:	41 9e 00 3c 	beq-    cr7,10e10 <sctp_wait_for_packet+0x22c>
   10dd8:	80 01 00 88 	lwz     r0,136(r1)
   10ddc:	90 01 00 40 	stw     r0,64(r1)
   10de0:	38 00 00 0a 	li      r0,10
   10de4:	90 01 00 44 	stw     r0,68(r1)

/* Is the socket in this state? */
#define sctp_sstate(sk, state) __sctp_sstate((sk), (SCTP_SS_##state))
static inline int __sctp_sstate(const struct sock *sk, sctp_sock_state_t state)
{
	return sk->sk_state == state;
   10de8:	80 01 00 40 	lwz     r0,64(r1)
   10dec:	7c 09 03 78 	mr      r9,r0
   10df0:	88 09 00 0e 	lbz     r0,14(r9)
   10df4:	54 00 06 3e 	clrlwi  r0,r0,24
   10df8:	81 21 00 44 	lwz     r9,68(r1)
   10dfc:	7f 89 00 00 	cmpw    cr7,r9,r0
   10e00:	7c 00 00 26 	mfcr    r0
   10e04:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
   10e08:	2f 80 00 00 	cmpwi   cr7,r0,0
   10e0c:	41 9e 01 54 	beq-    cr7,10f60 <sctp_wait_for_packet+0x37c>
		goto out;

	/* Handle signals.  */
	if (signal_pending(current))
   10e10:	7c 40 13 78 	mr      r0,r2
   10e14:	90 01 00 48 	stw     r0,72(r1)
   10e18:	80 01 00 48 	lwz     r0,72(r1)
   10e1c:	90 01 00 4c 	stw     r0,76(r1)
   10e20:	38 00 00 01 	li      r0,1
   10e24:	90 01 00 50 	stw     r0,80(r1)
	return test_and_clear_ti_thread_flag(task_thread_info(tsk), flag);
}

static inline int test_tsk_thread_flag(struct task_struct *tsk, int flag)
{
	return test_ti_thread_flag(task_thread_info(tsk), flag);
   10e28:	80 01 00 4c 	lwz     r0,76(r1)
   10e2c:	7c 0b 03 78 	mr      r11,r0
   10e30:	80 0b 00 04 	lwz     r0,4(r11)
   10e34:	90 01 00 54 	stw     r0,84(r1)
   10e38:	80 01 00 50 	lwz     r0,80(r1)
   10e3c:	90 01 00 58 	stw     r0,88(r1)
	return test_and_clear_bit(flag, (unsigned long *)&ti->flags);
}

static inline int test_ti_thread_flag(struct thread_info *ti, int flag)
{
	return test_bit(flag, (unsigned long *)&ti->flags);
   10e40:	80 01 00 54 	lwz     r0,84(r1)
   10e44:	30 00 00 3c 	addic   r0,r0,60
   10e48:	81 21 00 58 	lwz     r9,88(r1)
   10e4c:	91 21 00 5c 	stw     r9,92(r1)
   10e50:	90 01 00 60 	stw     r0,96(r1)
   10e54:	80 01 00 5c 	lwz     r0,92(r1)
   10e58:	7c 00 2e 70 	srawi   r0,r0,5
   10e5c:	7c 00 01 94 	addze   r0,r0
   10e60:	54 00 10 3a 	rlwinm  r0,r0,2,0,29
   10e64:	81 21 00 60 	lwz     r9,96(r1)
   10e68:	7c 09 02 14 	add     r0,r9,r0
   10e6c:	7c 0b 03 78 	mr      r11,r0
   10e70:	81 2b 00 00 	lwz     r9,0(r11)
   10e74:	80 01 00 5c 	lwz     r0,92(r1)
   10e78:	54 00 06 fe 	clrlwi  r0,r0,27
   10e7c:	7d 20 04 30 	srw     r0,r9,r0
   10e80:	54 00 07 fe 	clrlwi  r0,r0,31
	return -ERESTARTNOINTR;
}

static inline int signal_pending(struct task_struct *p)
{
	return unlikely(test_tsk_thread_flag(p,TIF_SIGPENDING));
   10e84:	2f 80 00 00 	cmpwi   cr7,r0,0
   10e88:	7c 00 00 26 	mfcr    r0
   10e8c:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
   10e90:	68 00 00 01 	xori    r0,r0,1
   10e94:	2f 80 00 00 	cmpwi   cr7,r0,0
   10e98:	40 9e 00 7c 	bne-    cr7,10f14 <sctp_wait_for_packet+0x330>
	/* Let another process have a go.  Since we are going to sleep
	 * anyway.  Note: This may cause odd behaviors if the message
	 * does not fit in the user's buffer, but this seems to be the
	 * only way to honor MSG_DONTWAIT realistically.
	 */
	sctp_release_sock(sk);
   10e9c:	80 61 00 88 	lwz     r3,136(r1)
   10ea0:	48 00 00 01 	bl      10ea0 <sctp_wait_for_packet+0x2bc>
	*timeo_p = schedule_timeout(*timeo_p);
   10ea4:	80 01 00 90 	lwz     r0,144(r1)
   10ea8:	7c 09 03 78 	mr      r9,r0
   10eac:	80 09 00 00 	lwz     r0,0(r9)
   10eb0:	7c 03 03 78 	mr      r3,r0
   10eb4:	48 00 00 01 	bl      10eb4 <sctp_wait_for_packet+0x2d0>
   10eb8:	7c 69 1b 78 	mr      r9,r3
   10ebc:	80 01 00 90 	lwz     r0,144(r1)
   10ec0:	7c 0b 03 78 	mr      r11,r0
   10ec4:	91 2b 00 00 	stw     r9,0(r11)
   10ec8:	80 01 00 88 	lwz     r0,136(r1)
   10ecc:	90 01 00 64 	stw     r0,100(r1)

extern void lock_sock_nested(struct sock *sk, int subclass);

static inline void lock_sock(struct sock *sk)
{
	lock_sock_nested(sk, 0);
   10ed0:	80 61 00 64 	lwz     r3,100(r1)
   10ed4:	38 80 00 00 	li      r4,0
   10ed8:	48 00 00 01 	bl      10ed8 <sctp_wait_for_packet+0x2f4>
   10edc:	48 00 00 08 	b       10ee4 <sctp_wait_for_packet+0x300>
	error = sock_error(sk);
	if (error)
		goto out;

	if (!skb_queue_empty(&sk->sk_receive_queue))
		goto ready;
   10ee0:	60 00 00 00 	nop
   10ee4:	80 01 00 88 	lwz     r0,136(r1)
   10ee8:	90 01 00 68 	stw     r0,104(r1)
	sk->sk_socket = sock;
}

static inline wait_queue_head_t *sk_sleep(struct sock *sk)
{
	return &sk->sk_wq->wait;
   10eec:	80 01 00 68 	lwz     r0,104(r1)
   10ef0:	7c 09 03 78 	mr      r9,r0
   10ef4:	80 09 00 68 	lwz     r0,104(r9)
	sctp_release_sock(sk);
	*timeo_p = schedule_timeout(*timeo_p);
	sctp_lock_sock(sk);

ready:
	finish_wait(sk_sleep(sk), &wait);
   10ef8:	7c 09 03 78 	mr      r9,r0
   10efc:	38 01 00 74 	addi    r0,r1,116
   10f00:	7d 23 4b 78 	mr      r3,r9
   10f04:	7c 04 03 78 	mr      r4,r0
   10f08:	48 00 00 01 	bl      10f08 <sctp_wait_for_packet+0x324>
	return 0;
   10f0c:	38 00 00 00 	li      r0,0
   10f10:	48 00 00 90 	b       10fa0 <sctp_wait_for_packet+0x3bc>
	if (list_empty(&sctp_sk(sk)->ep->asocs) && !sctp_sstate(sk, LISTENING))
		goto out;

	/* Handle signals.  */
	if (signal_pending(current))
		goto interrupted;
   10f14:	60 00 00 00 	nop
ready:
	finish_wait(sk_sleep(sk), &wait);
	return 0;

interrupted:
	error = sock_intr_errno(*timeo_p);
   10f18:	80 01 00 90 	lwz     r0,144(r1)
   10f1c:	7c 0b 03 78 	mr      r11,r0
   10f20:	80 0b 00 00 	lwz     r0,0(r11)
   10f24:	90 01 00 6c 	stw     r0,108(r1)
/* Alas, with timeout socket operations are not restartable.
 * Compare this to poll().
 */
static inline int sock_intr_errno(long timeo)
{
	return timeo == MAX_SCHEDULE_TIMEOUT ? -ERESTARTSYS : -EINTR;
   10f28:	81 21 00 6c 	lwz     r9,108(r1)
   10f2c:	3c 00 7f ff 	lis     r0,32767
   10f30:	60 00 ff ff 	ori     r0,r0,65535
   10f34:	7f 89 00 00 	cmpw    cr7,r9,r0
   10f38:	40 9e 00 0c 	bne-    cr7,10f44 <sctp_wait_for_packet+0x360>
   10f3c:	38 00 fe 00 	li      r0,-512
   10f40:	48 00 00 08 	b       10f48 <sctp_wait_for_packet+0x364>
   10f44:	38 00 ff fc 	li      r0,-4
   10f48:	90 01 00 08 	stw     r0,8(r1)
   10f4c:	48 00 00 18 	b       10f64 <sctp_wait_for_packet+0x380>
	prepare_to_wait_exclusive(sk_sleep(sk), &wait, TASK_INTERRUPTIBLE);

	/* Socket errors? */
	error = sock_error(sk);
	if (error)
		goto out;
   10f50:	60 00 00 00 	nop
   10f54:	48 00 00 10 	b       10f64 <sctp_wait_for_packet+0x380>
	if (!skb_queue_empty(&sk->sk_receive_queue))
		goto ready;

	/* Socket shut down?  */
	if (sk->sk_shutdown & RCV_SHUTDOWN)
		goto out;
   10f58:	60 00 00 00 	nop
   10f5c:	48 00 00 08 	b       10f64 <sctp_wait_for_packet+0x380>
	 */
	error = -ENOTCONN;

	/* Is there a good reason to think that we may receive some data?  */
	if (list_empty(&sctp_sk(sk)->ep->asocs) && !sctp_sstate(sk, LISTENING))
		goto out;
   10f60:	60 00 00 00 	nop
ready:
	finish_wait(sk_sleep(sk), &wait);
	return 0;

interrupted:
	error = sock_intr_errno(*timeo_p);
   10f64:	80 01 00 88 	lwz     r0,136(r1)
   10f68:	90 01 00 70 	stw     r0,112(r1)
	sk->sk_socket = sock;
}

static inline wait_queue_head_t *sk_sleep(struct sock *sk)
{
	return &sk->sk_wq->wait;
   10f6c:	80 01 00 70 	lwz     r0,112(r1)
   10f70:	7c 09 03 78 	mr      r9,r0
   10f74:	80 09 00 68 	lwz     r0,104(r9)

out:
	finish_wait(sk_sleep(sk), &wait);
   10f78:	7c 09 03 78 	mr      r9,r0
   10f7c:	38 01 00 74 	addi    r0,r1,116
   10f80:	7d 23 4b 78 	mr      r3,r9
   10f84:	7c 04 03 78 	mr      r4,r0
   10f88:	48 00 00 01 	bl      10f88 <sctp_wait_for_packet+0x3a4>
	*err = error;
   10f8c:	80 01 00 8c 	lwz     r0,140(r1)
   10f90:	81 21 00 08 	lwz     r9,8(r1)
   10f94:	7c 0b 03 78 	mr      r11,r0
   10f98:	91 2b 00 00 	stw     r9,0(r11)
	return error;
   10f9c:	80 01 00 08 	lwz     r0,8(r1)
}
   10fa0:	7c 03 03 78 	mr      r3,r0
   10fa4:	80 01 00 a4 	lwz     r0,164(r1)
   10fa8:	7c 08 03 a6 	mtlr    r0
   10fac:	83 e1 00 9c 	lwz     r31,156(r1)
   10fb0:	38 21 00 a0 	addi    r1,r1,160
   10fb4:	4e 80 00 20 	blr

00010fb8 <sctp_skb_recv_datagram>:
 * Note: This is pretty much the same routine as in core/datagram.c
 * with a few changes to make lksctp work.
 */
static struct sk_buff *sctp_skb_recv_datagram(struct sock *sk, int flags,
					      int noblock, int *err)
{
   10fb8:	94 21 ff 90 	stwu    r1,-112(r1)
   10fbc:	7c 08 02 a6 	mflr    r0
   10fc0:	90 01 00 74 	stw     r0,116(r1)
   10fc4:	93 e1 00 6c 	stw     r31,108(r1)
   10fc8:	90 61 00 58 	stw     r3,88(r1)
   10fcc:	90 81 00 5c 	stw     r4,92(r1)
   10fd0:	90 a1 00 60 	stw     r5,96(r1)
   10fd4:	90 c1 00 64 	stw     r6,100(r1)
   10fd8:	80 01 00 58 	lwz     r0,88(r1)
   10fdc:	90 01 00 10 	stw     r0,16(r1)
   10fe0:	80 01 00 60 	lwz     r0,96(r1)
   10fe4:	90 01 00 14 	stw     r0,20(r1)
	return in_softirq() ? GFP_ATOMIC : GFP_KERNEL;
}

static inline long sock_rcvtimeo(const struct sock *sk, int noblock)
{
	return noblock ? 0 : sk->sk_rcvtimeo;
   10fe8:	80 01 00 14 	lwz     r0,20(r1)
   10fec:	2f 80 00 00 	cmpwi   cr7,r0,0
   10ff0:	40 9e 00 14 	bne-    cr7,11004 <sctp_skb_recv_datagram+0x4c>
   10ff4:	80 01 00 10 	lwz     r0,16(r1)
   10ff8:	7c 09 03 78 	mr      r9,r0
   10ffc:	80 09 00 e0 	lwz     r0,224(r9)
   11000:	48 00 00 08 	b       11008 <sctp_skb_recv_datagram+0x50>
   11004:	38 00 00 00 	li      r0,0
	int error;
	struct sk_buff *skb;
	long timeo;

	timeo = sock_rcvtimeo(sk, noblock);
   11008:	90 01 00 54 	stw     r0,84(r1)
		 * will suddenly eat the receive_queue.
		 *
		 *  Look at current nfs client by the way...
		 *  However, this function was correct in any case. 8)
		 */
		if (flags & MSG_PEEK) {
   1100c:	80 01 00 5c 	lwz     r0,92(r1)
   11010:	54 00 07 bc 	rlwinm  r0,r0,0,30,30
   11014:	2f 80 00 00 	cmpwi   cr7,r0,0
   11018:	41 9e 00 9c 	beq-    cr7,110b4 <sctp_skb_recv_datagram+0xfc>
			spin_lock_bh(&sk->sk_receive_queue.lock);
   1101c:	80 01 00 58 	lwz     r0,88(r1)
   11020:	30 00 00 48 	addic   r0,r0,72
   11024:	90 01 00 4c 	stw     r0,76(r1)
	raw_spin_lock(&lock->rlock);
}

static inline void spin_lock_bh(spinlock_t *lock)
{
	raw_spin_lock_bh(&lock->rlock);
   11028:	48 00 00 01 	bl      11028 <sctp_skb_recv_datagram+0x70>
			skb = skb_peek(&sk->sk_receive_queue);
   1102c:	80 01 00 58 	lwz     r0,88(r1)
   11030:	30 00 00 3c 	addic   r0,r0,60
   11034:	90 01 00 18 	stw     r0,24(r1)
 *	The reference count is not incremented and the reference is therefore
 *	volatile. Use with caution.
 */
static inline struct sk_buff *skb_peek(struct sk_buff_head *list_)
{
	struct sk_buff *list = ((struct sk_buff *)list_)->next;
   11038:	80 01 00 18 	lwz     r0,24(r1)
   1103c:	7c 0b 03 78 	mr      r11,r0
   11040:	80 0b 00 00 	lwz     r0,0(r11)
   11044:	90 01 00 1c 	stw     r0,28(r1)
	if (list == (struct sk_buff *)list_)
   11048:	81 21 00 18 	lwz     r9,24(r1)
   1104c:	80 01 00 1c 	lwz     r0,28(r1)
   11050:	7f 89 00 00 	cmpw    cr7,r9,r0
   11054:	40 9e 00 0c 	bne-    cr7,11060 <sctp_skb_recv_datagram+0xa8>
		list = NULL;
   11058:	38 00 00 00 	li      r0,0
   1105c:	90 01 00 1c 	stw     r0,28(r1)
	return list;
   11060:	80 01 00 1c 	lwz     r0,28(r1)
   11064:	90 01 00 0c 	stw     r0,12(r1)
			if (skb)
   11068:	80 01 00 0c 	lwz     r0,12(r1)
   1106c:	2f 80 00 00 	cmpwi   cr7,r0,0
   11070:	41 9e 00 30 	beq-    cr7,110a0 <sctp_skb_recv_datagram+0xe8>
				atomic_inc(&skb->users);
   11074:	80 01 00 0c 	lwz     r0,12(r1)
   11078:	30 00 00 a0 	addic   r0,r0,160
   1107c:	90 01 00 20 	stw     r0,32(r1)
	addic	%0,%0,1\n"
	PPC405_ERR77(0,%2)
"	stwcx.	%0,0,%2 \n\
	bne-	1b"
	: "=&r" (t), "+m" (v->counter)
	: "r" (&v->counter)
   11080:	80 01 00 20 	lwz     r0,32(r1)
"1:	lwarx	%0,0,%2		# atomic_inc\n\
	addic	%0,%0,1\n"
	PPC405_ERR77(0,%2)
"	stwcx.	%0,0,%2 \n\
	bne-	1b"
	: "=&r" (t), "+m" (v->counter)
   11084:	81 61 00 20 	lwz     r11,32(r1)
   11088:	81 21 00 20 	lwz     r9,32(r1)

static __inline__ void atomic_inc(atomic_t *v)
{
	int t;

	__asm__ __volatile__(
   1108c:	7f e0 00 28 	lwarx   r31,0,r0
   11090:	33 ff 00 01 	addic   r31,r31,1
   11094:	7f e0 01 2d 	stwcx.  r31,0,r0
   11098:	40 a2 ff f4 	bne-    1108c <sctp_skb_recv_datagram+0xd4>
   1109c:	93 e1 00 24 	stw     r31,36(r1)
			spin_unlock_bh(&sk->sk_receive_queue.lock);
   110a0:	80 01 00 58 	lwz     r0,88(r1)
   110a4:	30 00 00 48 	addic   r0,r0,72
   110a8:	90 01 00 50 	stw     r0,80(r1)
	raw_spin_unlock(&lock->rlock);
}

static inline void spin_unlock_bh(spinlock_t *lock)
{
	raw_spin_unlock_bh(&lock->rlock);
   110ac:	48 00 00 01 	bl      110ac <sctp_skb_recv_datagram+0xf4>
   110b0:	48 00 00 18 	b       110c8 <sctp_skb_recv_datagram+0x110>
		} else {
			skb = skb_dequeue(&sk->sk_receive_queue);
   110b4:	80 01 00 58 	lwz     r0,88(r1)
   110b8:	30 00 00 3c 	addic   r0,r0,60
   110bc:	7c 03 03 78 	mr      r3,r0
   110c0:	48 00 00 01 	bl      110c0 <sctp_skb_recv_datagram+0x108>
   110c4:	90 61 00 0c 	stw     r3,12(r1)
		}

		if (skb)
   110c8:	80 01 00 0c 	lwz     r0,12(r1)
   110cc:	2f 80 00 00 	cmpwi   cr7,r0,0
   110d0:	41 9e 00 0c 	beq-    cr7,110dc <sctp_skb_recv_datagram+0x124>
			return skb;
   110d4:	80 01 00 0c 	lwz     r0,12(r1)
   110d8:	48 00 01 48 	b       11220 <sctp_skb_recv_datagram+0x268>
   110dc:	80 01 00 58 	lwz     r0,88(r1)
   110e0:	90 01 00 28 	stw     r0,40(r1)
 */
 
static inline int sock_error(struct sock *sk)
{
	int err;
	if (likely(!sk->sk_err))
   110e4:	80 01 00 28 	lwz     r0,40(r1)
   110e8:	7c 09 03 78 	mr      r9,r0
   110ec:	80 09 00 c8 	lwz     r0,200(r9)
   110f0:	2f 80 00 00 	cmpwi   cr7,r0,0
   110f4:	7c 00 00 26 	mfcr    r0
   110f8:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
   110fc:	2f 80 00 00 	cmpwi   cr7,r0,0
   11100:	41 9e 00 0c 	beq-    cr7,1110c <sctp_skb_recv_datagram+0x154>
		return 0;
   11104:	38 00 00 00 	li      r0,0
   11108:	48 00 00 80 	b       11188 <sctp_skb_recv_datagram+0x1d0>
	err = xchg(&sk->sk_err, 0);
   1110c:	38 00 00 00 	li      r0,0
   11110:	90 01 00 2c 	stw     r0,44(r1)
   11114:	80 01 00 28 	lwz     r0,40(r1)
   11118:	31 20 00 c8 	addic   r9,r0,200
   1111c:	80 01 00 2c 	lwz     r0,44(r1)
   11120:	91 21 00 30 	stw     r9,48(r1)
   11124:	90 01 00 34 	stw     r0,52(r1)
   11128:	38 00 00 04 	li      r0,4
   1112c:	90 01 00 38 	stw     r0,56(r1)
extern void __xchg_called_with_bad_pointer(void);

static __always_inline unsigned long
__xchg(volatile void *ptr, unsigned long x, unsigned int size)
{
	switch (size) {
   11130:	80 01 00 38 	lwz     r0,56(r1)
   11134:	2f 80 00 04 	cmpwi   cr7,r0,4
   11138:	40 9e 00 3c 	bne-    cr7,11174 <sctp_skb_recv_datagram+0x1bc>
   1113c:	80 01 00 30 	lwz     r0,48(r1)
   11140:	90 01 00 3c 	stw     r0,60(r1)
   11144:	80 01 00 34 	lwz     r0,52(r1)
   11148:	90 01 00 40 	stw     r0,64(r1)
static __always_inline unsigned long
__xchg_u32(volatile void *p, unsigned long val)
{
	unsigned long prev;

	__asm__ __volatile__(
   1114c:	81 41 00 3c 	lwz     r10,60(r1)
   11150:	80 01 00 3c 	lwz     r0,60(r1)
   11154:	81 21 00 40 	lwz     r9,64(r1)
   11158:	81 61 00 3c 	lwz     r11,60(r1)
   1115c:	7f e0 00 28 	lwarx   r31,0,r0
   11160:	7d 20 01 2d 	stwcx.  r9,0,r0
   11164:	40 a2 ff f8 	bne-    1115c <sctp_skb_recv_datagram+0x1a4>
   11168:	93 e1 00 44 	stw     r31,68(r1)
	PPC_ACQUIRE_BARRIER
	: "=&r" (prev), "+m" (*(volatile unsigned int *)p)
	: "r" (p), "r" (val)
	: "cc", "memory");

	return prev;
   1116c:	80 01 00 44 	lwz     r0,68(r1)
   11170:	48 00 00 0c 	b       1117c <sctp_skb_recv_datagram+0x1c4>
#ifdef CONFIG_PPC64
	case 8:
		return __xchg_u64(ptr, x);
#endif
	}
	__xchg_called_with_bad_pointer();
   11174:	48 00 00 01 	bl      11174 <sctp_skb_recv_datagram+0x1bc>
	return x;
   11178:	80 01 00 34 	lwz     r0,52(r1)
   1117c:	90 01 00 48 	stw     r0,72(r1)
	return -err;
   11180:	80 01 00 48 	lwz     r0,72(r1)
   11184:	7c 00 00 d0 	neg     r0,r0

		/* Caller is allowed not to check sk->sk_err before calling. */
		error = sock_error(sk);
   11188:	90 01 00 08 	stw     r0,8(r1)
		if (error)
   1118c:	80 01 00 08 	lwz     r0,8(r1)
   11190:	2f 80 00 00 	cmpwi   cr7,r0,0
   11194:	40 9e 00 6c 	bne-    cr7,11200 <sctp_skb_recv_datagram+0x248>
			goto no_packet;

		if (sk->sk_shutdown & RCV_SHUTDOWN)
   11198:	80 01 00 58 	lwz     r0,88(r1)
   1119c:	7c 0b 03 78 	mr      r11,r0
   111a0:	80 0b 00 94 	lwz     r0,148(r11)
   111a4:	54 00 17 be 	rlwinm  r0,r0,2,30,31
   111a8:	54 00 06 3e 	clrlwi  r0,r0,24
   111ac:	54 00 07 fe 	clrlwi  r0,r0,31
   111b0:	54 00 06 3e 	clrlwi  r0,r0,24
   111b4:	2f 80 00 00 	cmpwi   cr7,r0,0
   111b8:	40 9e 00 3c 	bne-    cr7,111f4 <sctp_skb_recv_datagram+0x23c>
			break;

		/* User doesn't want to wait.  */
		error = -EAGAIN;
   111bc:	38 00 ff f5 	li      r0,-11
   111c0:	90 01 00 08 	stw     r0,8(r1)
		if (!timeo)
   111c4:	80 01 00 54 	lwz     r0,84(r1)
   111c8:	2f 80 00 00 	cmpwi   cr7,r0,0
   111cc:	41 9e 00 3c 	beq-    cr7,11208 <sctp_skb_recv_datagram+0x250>
			goto no_packet;
	} while (sctp_wait_for_packet(sk, err, &timeo) == 0);
   111d0:	38 01 00 54 	addi    r0,r1,84
   111d4:	80 61 00 58 	lwz     r3,88(r1)
   111d8:	80 81 00 64 	lwz     r4,100(r1)
   111dc:	7c 05 03 78 	mr      r5,r0
   111e0:	4b ff fa 05 	bl      10be4 <sctp_wait_for_packet>
   111e4:	7c 60 1b 78 	mr      r0,r3
   111e8:	2f 80 00 00 	cmpwi   cr7,r0,0
   111ec:	41 9e fe 20 	beq+    cr7,1100c <sctp_skb_recv_datagram+0x54>
   111f0:	48 00 00 08 	b       111f8 <sctp_skb_recv_datagram+0x240>
		error = sock_error(sk);
		if (error)
			goto no_packet;

		if (sk->sk_shutdown & RCV_SHUTDOWN)
			break;
   111f4:	60 00 00 00 	nop
		error = -EAGAIN;
		if (!timeo)
			goto no_packet;
	} while (sctp_wait_for_packet(sk, err, &timeo) == 0);

	return NULL;
   111f8:	38 00 00 00 	li      r0,0
   111fc:	48 00 00 24 	b       11220 <sctp_skb_recv_datagram+0x268>
			return skb;

		/* Caller is allowed not to check sk->sk_err before calling. */
		error = sock_error(sk);
		if (error)
			goto no_packet;
   11200:	60 00 00 00 	nop
   11204:	48 00 00 08 	b       1120c <sctp_skb_recv_datagram+0x254>
			break;

		/* User doesn't want to wait.  */
		error = -EAGAIN;
		if (!timeo)
			goto no_packet;
   11208:	60 00 00 00 	nop
	} while (sctp_wait_for_packet(sk, err, &timeo) == 0);

	return NULL;

no_packet:
	*err = error;
   1120c:	80 01 00 64 	lwz     r0,100(r1)
   11210:	81 21 00 08 	lwz     r9,8(r1)
   11214:	7c 0b 03 78 	mr      r11,r0
   11218:	91 2b 00 00 	stw     r9,0(r11)
	return NULL;
   1121c:	38 00 00 00 	li      r0,0
}
   11220:	7c 03 03 78 	mr      r3,r0
   11224:	80 01 00 74 	lwz     r0,116(r1)
   11228:	7c 08 03 a6 	mtlr    r0
   1122c:	83 e1 00 6c 	lwz     r31,108(r1)
   11230:	38 21 00 70 	addi    r1,r1,112
   11234:	4e 80 00 20 	blr

00011238 <__sctp_write_space>:

/* If sndbuf has changed, wake up per association sndbuf waiters.  */
static void __sctp_write_space(struct sctp_association *asoc)
{
   11238:	94 21 ff a0 	stwu    r1,-96(r1)
   1123c:	7c 08 02 a6 	mflr    r0
   11240:	90 01 00 64 	stw     r0,100(r1)
   11244:	93 e1 00 5c 	stw     r31,92(r1)
   11248:	90 61 00 48 	stw     r3,72(r1)
	struct sock *sk = asoc->base.sk;
   1124c:	80 01 00 48 	lwz     r0,72(r1)
   11250:	7c 09 03 78 	mr      r9,r0
   11254:	80 09 00 18 	lwz     r0,24(r9)
   11258:	90 01 00 08 	stw     r0,8(r1)
	struct socket *sock = sk->sk_socket;
   1125c:	80 01 00 08 	lwz     r0,8(r1)
   11260:	7c 0b 03 78 	mr      r11,r0
   11264:	80 0b 01 10 	lwz     r0,272(r11)
   11268:	90 01 00 0c 	stw     r0,12(r1)
   1126c:	80 01 00 48 	lwz     r0,72(r1)
   11270:	90 01 00 10 	stw     r0,16(r1)
/* Get the sndbuf space available at the time on the association.  */
static inline int sctp_wspace(struct sctp_association *asoc)
{
	int amt;

	if (asoc->ep->sndbuf_policy)
   11274:	80 01 00 10 	lwz     r0,16(r1)
   11278:	7c 09 03 78 	mr      r9,r0
   1127c:	80 09 00 58 	lwz     r0,88(r9)
   11280:	7c 0b 03 78 	mr      r11,r0
   11284:	80 0b 00 a4 	lwz     r0,164(r11)
   11288:	2f 80 00 00 	cmpwi   cr7,r0,0
   1128c:	41 9e 00 18 	beq-    cr7,112a4 <__sctp_write_space+0x6c>
		amt = asoc->sndbuf_used;
   11290:	80 01 00 10 	lwz     r0,16(r1)
   11294:	7c 09 03 78 	mr      r9,r0
   11298:	80 09 03 74 	lwz     r0,884(r9)
   1129c:	90 01 00 14 	stw     r0,20(r1)
   112a0:	48 00 00 3c 	b       112dc <__sctp_write_space+0xa4>
	else
		amt = sk_wmem_alloc_get(asoc->base.sk);
   112a4:	80 01 00 10 	lwz     r0,16(r1)
   112a8:	7c 0b 03 78 	mr      r11,r0
   112ac:	80 0b 00 18 	lwz     r0,24(r11)
   112b0:	90 01 00 18 	stw     r0,24(r1)
 *
 * Returns sk_wmem_alloc minus initial offset of one
 */
static inline int sk_wmem_alloc_get(const struct sock *sk)
{
	return atomic_read(&sk->sk_wmem_alloc) - 1;
   112b4:	80 01 00 18 	lwz     r0,24(r1)
   112b8:	30 00 00 7c 	addic   r0,r0,124
   112bc:	90 01 00 1c 	stw     r0,28(r1)

static __inline__ int atomic_read(const atomic_t *v)
{
	int t;

	__asm__ __volatile__("lwz%U1%X1 %0,%1" : "=r"(t) : "m"(v->counter));
   112c0:	80 01 00 1c 	lwz     r0,28(r1)
   112c4:	7c 09 03 78 	mr      r9,r0
   112c8:	83 e9 00 00 	lwz     r31,0(r9)
   112cc:	93 e1 00 20 	stw     r31,32(r1)

	return t;
   112d0:	80 01 00 20 	lwz     r0,32(r1)
   112d4:	30 00 ff ff 	addic   r0,r0,-1
   112d8:	90 01 00 14 	stw     r0,20(r1)

	if (amt >= asoc->base.sk->sk_sndbuf) {
   112dc:	80 01 00 10 	lwz     r0,16(r1)
   112e0:	7c 0b 03 78 	mr      r11,r0
   112e4:	80 0b 00 18 	lwz     r0,24(r11)
   112e8:	7c 0b 03 78 	mr      r11,r0
   112ec:	81 2b 00 84 	lwz     r9,132(r11)
   112f0:	80 01 00 14 	lwz     r0,20(r1)
   112f4:	7f 89 00 00 	cmpw    cr7,r9,r0
   112f8:	41 9d 00 88 	bgt-    cr7,11380 <__sctp_write_space+0x148>
		if (asoc->base.sk->sk_userlocks & SOCK_SNDBUF_LOCK)
   112fc:	80 01 00 10 	lwz     r0,16(r1)
   11300:	7c 09 03 78 	mr      r9,r0
   11304:	80 09 00 18 	lwz     r0,24(r9)
   11308:	7c 0b 03 78 	mr      r11,r0
   1130c:	80 0b 00 94 	lwz     r0,148(r11)
   11310:	54 00 46 3e 	rlwinm  r0,r0,8,24,31
   11314:	54 00 07 3e 	clrlwi  r0,r0,28
   11318:	54 00 06 3e 	clrlwi  r0,r0,24
   1131c:	54 00 07 fe 	clrlwi  r0,r0,31
   11320:	54 00 06 3e 	clrlwi  r0,r0,24
   11324:	2f 80 00 00 	cmpwi   cr7,r0,0
   11328:	41 9e 00 10 	beq-    cr7,11338 <__sctp_write_space+0x100>
			amt = 0;
   1132c:	38 00 00 00 	li      r0,0
   11330:	90 01 00 14 	stw     r0,20(r1)
   11334:	48 00 00 6c 	b       113a0 <__sctp_write_space+0x168>
		else {
			amt = sk_stream_wspace(asoc->base.sk);
   11338:	80 01 00 10 	lwz     r0,16(r1)
   1133c:	7c 09 03 78 	mr      r9,r0
   11340:	80 09 00 18 	lwz     r0,24(r9)
   11344:	90 01 00 24 	stw     r0,36(r1)
	return sk->sk_wmem_queued >> 1;
}

static inline int sk_stream_wspace(struct sock *sk)
{
	return sk->sk_sndbuf - sk->sk_wmem_queued;
   11348:	80 01 00 24 	lwz     r0,36(r1)
   1134c:	7c 0b 03 78 	mr      r11,r0
   11350:	81 2b 00 84 	lwz     r9,132(r11)
   11354:	80 01 00 24 	lwz     r0,36(r1)
   11358:	7c 0b 03 78 	mr      r11,r0
   1135c:	80 0b 00 98 	lwz     r0,152(r11)
   11360:	7c 00 48 50 	subf    r0,r0,r9
   11364:	90 01 00 14 	stw     r0,20(r1)
			if (amt < 0)
   11368:	80 01 00 14 	lwz     r0,20(r1)
   1136c:	2f 80 00 00 	cmpwi   cr7,r0,0
   11370:	40 9c 00 30 	bge-    cr7,113a0 <__sctp_write_space+0x168>
				amt = 0;
   11374:	38 00 00 00 	li      r0,0
   11378:	90 01 00 14 	stw     r0,20(r1)
   1137c:	48 00 00 24 	b       113a0 <__sctp_write_space+0x168>
		}
	} else {
		amt = asoc->base.sk->sk_sndbuf - amt;
   11380:	80 01 00 10 	lwz     r0,16(r1)
   11384:	7c 09 03 78 	mr      r9,r0
   11388:	80 09 00 18 	lwz     r0,24(r9)
   1138c:	7c 0b 03 78 	mr      r11,r0
   11390:	81 2b 00 84 	lwz     r9,132(r11)
   11394:	80 01 00 14 	lwz     r0,20(r1)
   11398:	7c 00 48 50 	subf    r0,r0,r9
   1139c:	90 01 00 14 	stw     r0,20(r1)
	}
	return amt;
   113a0:	80 01 00 14 	lwz     r0,20(r1)
static void __sctp_write_space(struct sctp_association *asoc)
{
	struct sock *sk = asoc->base.sk;
	struct socket *sock = sk->sk_socket;

	if ((sctp_wspace(asoc) > 0) && sock) {
   113a4:	2f 80 00 00 	cmpwi   cr7,r0,0
   113a8:	40 9d 01 68 	ble-    cr7,11510 <__sctp_write_space+0x2d8>
   113ac:	80 01 00 0c 	lwz     r0,12(r1)
   113b0:	2f 80 00 00 	cmpwi   cr7,r0,0
   113b4:	41 9e 01 5c 	beq-    cr7,11510 <__sctp_write_space+0x2d8>
		if (waitqueue_active(&asoc->wait))
   113b8:	80 01 00 48 	lwz     r0,72(r1)
   113bc:	30 00 03 7c 	addic   r0,r0,892
   113c0:	90 01 00 28 	stw     r0,40(r1)
	q->func = func;
}

static inline int waitqueue_active(wait_queue_head_t *q)
{
	return !list_empty(&q->task_list);
   113c4:	80 01 00 28 	lwz     r0,40(r1)
   113c8:	90 01 00 2c 	stw     r0,44(r1)
   113cc:	80 01 00 2c 	lwz     r0,44(r1)
   113d0:	7c 09 03 78 	mr      r9,r0
   113d4:	80 09 00 00 	lwz     r0,0(r9)
   113d8:	81 21 00 2c 	lwz     r9,44(r1)
   113dc:	7f 89 00 00 	cmpw    cr7,r9,r0
   113e0:	7c 00 00 26 	mfcr    r0
   113e4:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
   113e8:	2f 80 00 00 	cmpwi   cr7,r0,0
   113ec:	7c 00 00 26 	mfcr    r0
   113f0:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
   113f4:	2f 80 00 00 	cmpwi   cr7,r0,0
   113f8:	41 9e 00 20 	beq-    cr7,11418 <__sctp_write_space+0x1e0>
			wake_up_interruptible(&asoc->wait);
   113fc:	80 01 00 48 	lwz     r0,72(r1)
   11400:	30 00 03 7c 	addic   r0,r0,892
   11404:	7c 03 03 78 	mr      r3,r0
   11408:	38 80 00 01 	li      r4,1
   1140c:	38 a0 00 01 	li      r5,1
   11410:	38 c0 00 00 	li      r6,0
   11414:	48 00 00 01 	bl      11414 <__sctp_write_space+0x1dc>

		if (sctp_writeable(sk)) {
   11418:	80 61 00 08 	lwz     r3,8(r1)
   1141c:	48 00 09 7d 	bl      11d98 <sctp_writeable>
   11420:	7c 60 1b 78 	mr      r0,r3
   11424:	2f 80 00 00 	cmpwi   cr7,r0,0
   11428:	41 9e 00 e8 	beq-    cr7,11510 <__sctp_write_space+0x2d8>
   1142c:	80 01 00 08 	lwz     r0,8(r1)
   11430:	90 01 00 30 	stw     r0,48(r1)
	sk->sk_socket = sock;
}

static inline wait_queue_head_t *sk_sleep(struct sock *sk)
{
	return &sk->sk_wq->wait;
   11434:	80 01 00 30 	lwz     r0,48(r1)
   11438:	7c 0b 03 78 	mr      r11,r0
   1143c:	80 0b 00 68 	lwz     r0,104(r11)
			if (sk_sleep(sk) && waitqueue_active(sk_sleep(sk)))
   11440:	2f 80 00 00 	cmpwi   cr7,r0,0
   11444:	41 9e 00 7c 	beq-    cr7,114c0 <__sctp_write_space+0x288>
   11448:	80 01 00 08 	lwz     r0,8(r1)
   1144c:	90 01 00 34 	stw     r0,52(r1)
   11450:	80 01 00 34 	lwz     r0,52(r1)
   11454:	7c 09 03 78 	mr      r9,r0
   11458:	80 09 00 68 	lwz     r0,104(r9)
   1145c:	90 01 00 38 	stw     r0,56(r1)
   11460:	80 01 00 38 	lwz     r0,56(r1)
   11464:	90 01 00 3c 	stw     r0,60(r1)
   11468:	80 01 00 3c 	lwz     r0,60(r1)
   1146c:	7c 0b 03 78 	mr      r11,r0
   11470:	80 0b 00 00 	lwz     r0,0(r11)
   11474:	81 21 00 3c 	lwz     r9,60(r1)
   11478:	7f 89 00 00 	cmpw    cr7,r9,r0
   1147c:	7c 00 00 26 	mfcr    r0
   11480:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
   11484:	2f 80 00 00 	cmpwi   cr7,r0,0
   11488:	7c 00 00 26 	mfcr    r0
   1148c:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
   11490:	2f 80 00 00 	cmpwi   cr7,r0,0
   11494:	41 9e 00 2c 	beq-    cr7,114c0 <__sctp_write_space+0x288>
   11498:	80 01 00 08 	lwz     r0,8(r1)
   1149c:	90 01 00 40 	stw     r0,64(r1)
   114a0:	80 01 00 40 	lwz     r0,64(r1)
   114a4:	7c 09 03 78 	mr      r9,r0
   114a8:	80 09 00 68 	lwz     r0,104(r9)
				wake_up_interruptible(sk_sleep(sk));
   114ac:	7c 03 03 78 	mr      r3,r0
   114b0:	38 80 00 01 	li      r4,1
   114b4:	38 a0 00 01 	li      r5,1
   114b8:	38 c0 00 00 	li      r6,0
   114bc:	48 00 00 01 	bl      114bc <__sctp_write_space+0x284>

			/* Note that we try to include the Async I/O support
			 * here by modeling from the current TCP/UDP code.
			 * We have not tested with it yet.
			 */
			if (sock->wq->fasync_list &&
   114c0:	80 01 00 0c 	lwz     r0,12(r1)
   114c4:	7c 0b 03 78 	mr      r11,r0
   114c8:	80 0b 00 0c 	lwz     r0,12(r11)
   114cc:	7c 09 03 78 	mr      r9,r0
   114d0:	80 09 00 08 	lwz     r0,8(r9)
   114d4:	2f 80 00 00 	cmpwi   cr7,r0,0
   114d8:	41 9e 00 38 	beq-    cr7,11510 <__sctp_write_space+0x2d8>
			    !(sk->sk_shutdown & SEND_SHUTDOWN))
   114dc:	80 01 00 08 	lwz     r0,8(r1)
   114e0:	7c 0b 03 78 	mr      r11,r0
   114e4:	80 0b 00 94 	lwz     r0,148(r11)
   114e8:	54 00 17 be 	rlwinm  r0,r0,2,30,31
   114ec:	54 00 06 3e 	clrlwi  r0,r0,24
   114f0:	54 00 07 bc 	rlwinm  r0,r0,0,30,30

			/* Note that we try to include the Async I/O support
			 * here by modeling from the current TCP/UDP code.
			 * We have not tested with it yet.
			 */
			if (sock->wq->fasync_list &&
   114f4:	2f 80 00 00 	cmpwi   cr7,r0,0
   114f8:	40 9e 00 18 	bne-    cr7,11510 <__sctp_write_space+0x2d8>
			    !(sk->sk_shutdown & SEND_SHUTDOWN))
				sock_wake_async(sock,
   114fc:	80 61 00 0c 	lwz     r3,12(r1)
   11500:	38 80 00 02 	li      r4,2
   11504:	3c 00 00 02 	lis     r0,2
   11508:	60 05 00 02 	ori     r5,r0,2
   1150c:	48 00 00 01 	bl      1150c <__sctp_write_space+0x2d4>
						SOCK_WAKE_SPACE, POLL_OUT);
		}
	}
}
   11510:	80 01 00 64 	lwz     r0,100(r1)
   11514:	7c 08 03 a6 	mtlr    r0
   11518:	83 e1 00 5c 	lwz     r31,92(r1)
   1151c:	38 21 00 60 	addi    r1,r1,96
   11520:	4e 80 00 20 	blr

00011524 <sctp_wfree>:
/* Do accounting for the sndbuf space.
 * Decrement the used sndbuf space of the corresponding association by the
 * data size which was just transmitted(freed).
 */
static void sctp_wfree(struct sk_buff *skb)
{
   11524:	94 21 ff b0 	stwu    r1,-80(r1)
   11528:	7c 08 02 a6 	mflr    r0
   1152c:	90 01 00 54 	stw     r0,84(r1)
   11530:	93 e1 00 4c 	stw     r31,76(r1)
   11534:	90 61 00 38 	stw     r3,56(r1)
	struct sctp_association *asoc;
	struct sctp_chunk *chunk;
	struct sock *sk;

	/* Get the saved chunk pointer.  */
	chunk = *((struct sctp_chunk **)(skb->cb));
   11538:	80 01 00 38 	lwz     r0,56(r1)
   1153c:	30 00 00 18 	addic   r0,r0,24
   11540:	7c 09 03 78 	mr      r9,r0
   11544:	80 09 00 00 	lwz     r0,0(r9)
   11548:	90 01 00 08 	stw     r0,8(r1)
	asoc = chunk->asoc;
   1154c:	80 01 00 08 	lwz     r0,8(r1)
   11550:	7c 0a 03 78 	mr      r10,r0
   11554:	80 0a 00 54 	lwz     r0,84(r10)
   11558:	90 01 00 0c 	stw     r0,12(r1)
	sk = asoc->base.sk;
   1155c:	80 01 00 0c 	lwz     r0,12(r1)
   11560:	7c 0b 03 78 	mr      r11,r0
   11564:	80 0b 00 18 	lwz     r0,24(r11)
   11568:	90 01 00 10 	stw     r0,16(r1)
	asoc->sndbuf_used -= SCTP_DATA_SNDSIZE(chunk) +
   1156c:	80 01 00 0c 	lwz     r0,12(r1)
   11570:	7c 09 03 78 	mr      r9,r0
   11574:	80 09 03 74 	lwz     r0,884(r9)
   11578:	7c 09 03 78 	mr      r9,r0
   1157c:	80 01 00 08 	lwz     r0,8(r1)
   11580:	7c 0a 03 78 	mr      r10,r0
   11584:	80 0a 00 2c 	lwz     r0,44(r10)
   11588:	7c 0b 03 78 	mr      r11,r0
   1158c:	80 01 00 08 	lwz     r0,8(r1)
   11590:	7c 0a 03 78 	mr      r10,r0
   11594:	80 0a 00 28 	lwz     r0,40(r10)
   11598:	7c 00 58 50 	subf    r0,r0,r11
   1159c:	7c 09 02 14 	add     r0,r9,r0
   115a0:	30 00 fe c0 	addic   r0,r0,-320
   115a4:	7c 09 03 78 	mr      r9,r0
   115a8:	80 01 00 0c 	lwz     r0,12(r1)
   115ac:	7c 0b 03 78 	mr      r11,r0
   115b0:	91 2b 03 74 	stw     r9,884(r11)
				sizeof(struct sk_buff) +
				sizeof(struct sctp_chunk);

	atomic_sub(sizeof(struct sctp_chunk), &sk->sk_wmem_alloc);
   115b4:	80 01 00 10 	lwz     r0,16(r1)
   115b8:	30 00 00 7c 	addic   r0,r0,124
   115bc:	39 20 00 a8 	li      r9,168
   115c0:	91 21 00 14 	stw     r9,20(r1)
   115c4:	90 01 00 18 	stw     r0,24(r1)
	subf	%0,%2,%0\n"
	PPC405_ERR77(0,%3)
"	stwcx.	%0,0,%3 \n\
	bne-	1b"
	: "=&r" (t), "+m" (v->counter)
	: "r" (a), "r" (&v->counter)
   115c8:	81 21 00 18 	lwz     r9,24(r1)
"1:	lwarx	%0,0,%3		# atomic_sub\n\
	subf	%0,%2,%0\n"
	PPC405_ERR77(0,%3)
"	stwcx.	%0,0,%3 \n\
	bne-	1b"
	: "=&r" (t), "+m" (v->counter)
   115cc:	81 41 00 18 	lwz     r10,24(r1)

static __inline__ void atomic_sub(int a, atomic_t *v)
{
	int t;

	__asm__ __volatile__(
   115d0:	80 01 00 14 	lwz     r0,20(r1)
"1:	lwarx	%0,0,%3		# atomic_sub\n\
	subf	%0,%2,%0\n"
	PPC405_ERR77(0,%3)
"	stwcx.	%0,0,%3 \n\
	bne-	1b"
	: "=&r" (t), "+m" (v->counter)
   115d4:	81 61 00 18 	lwz     r11,24(r1)

static __inline__ void atomic_sub(int a, atomic_t *v)
{
	int t;

	__asm__ __volatile__(
   115d8:	7f e0 48 28 	lwarx   r31,0,r9
   115dc:	7f e0 f8 50 	subf    r31,r0,r31
   115e0:	7f e0 49 2d 	stwcx.  r31,0,r9
   115e4:	40 a2 ff f4 	bne-    115d8 <sctp_wfree+0xb4>
   115e8:	93 e1 00 1c 	stw     r31,28(r1)

	/*
	 * This undoes what is done via sctp_set_owner_w and sk_mem_charge
	 */
	sk->sk_wmem_queued   -= skb->truesize;
   115ec:	80 01 00 10 	lwz     r0,16(r1)
   115f0:	7c 09 03 78 	mr      r9,r0
   115f4:	80 09 00 98 	lwz     r0,152(r9)
   115f8:	7c 09 03 78 	mr      r9,r0
   115fc:	80 01 00 38 	lwz     r0,56(r1)
   11600:	7c 0a 03 78 	mr      r10,r0
   11604:	80 0a 00 9c 	lwz     r0,156(r10)
   11608:	7c 00 48 50 	subf    r0,r0,r9
   1160c:	7c 09 03 78 	mr      r9,r0
   11610:	80 01 00 10 	lwz     r0,16(r1)
   11614:	7c 0b 03 78 	mr      r11,r0
   11618:	91 2b 00 98 	stw     r9,152(r11)
	sk_mem_uncharge(sk, skb->truesize);
   1161c:	80 01 00 38 	lwz     r0,56(r1)
   11620:	7c 09 03 78 	mr      r9,r0
   11624:	80 09 00 9c 	lwz     r0,156(r9)
   11628:	81 21 00 10 	lwz     r9,16(r1)
   1162c:	91 21 00 20 	stw     r9,32(r1)
   11630:	90 01 00 24 	stw     r0,36(r1)
   11634:	80 01 00 20 	lwz     r0,32(r1)
   11638:	90 01 00 28 	stw     r0,40(r1)
}

static inline int sk_has_account(struct sock *sk)
{
	/* return true if protocol supports memory accounting */
	return !!sk->sk_prot->memory_allocated;
   1163c:	80 01 00 28 	lwz     r0,40(r1)
   11640:	7c 0a 03 78 	mr      r10,r0
   11644:	80 0a 00 1c 	lwz     r0,28(r10)
   11648:	7c 0b 03 78 	mr      r11,r0
   1164c:	80 0b 00 58 	lwz     r0,88(r11)
   11650:	2f 80 00 00 	cmpwi   cr7,r0,0
   11654:	7c 00 00 26 	mfcr    r0
   11658:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
   1165c:	68 00 00 01 	xori    r0,r0,1
	sk->sk_forward_alloc -= size;
}

static inline void sk_mem_uncharge(struct sock *sk, int size)
{
	if (!sk_has_account(sk))
   11660:	2f 80 00 00 	cmpwi   cr7,r0,0
   11664:	41 9e 00 24 	beq-    cr7,11688 <sctp_wfree+0x164>
		return;
	sk->sk_forward_alloc += size;
   11668:	80 01 00 20 	lwz     r0,32(r1)
   1166c:	7c 0a 03 78 	mr      r10,r0
   11670:	81 2a 00 58 	lwz     r9,88(r10)
   11674:	80 01 00 24 	lwz     r0,36(r1)
   11678:	7d 29 02 14 	add     r9,r9,r0
   1167c:	80 01 00 20 	lwz     r0,32(r1)
   11680:	7c 0b 03 78 	mr      r11,r0
   11684:	91 2b 00 58 	stw     r9,88(r11)

	sock_wfree(skb);
   11688:	80 61 00 38 	lwz     r3,56(r1)
   1168c:	48 00 00 01 	bl      1168c <sctp_wfree+0x168>
	__sctp_write_space(asoc);
   11690:	80 61 00 0c 	lwz     r3,12(r1)
   11694:	4b ff fb a5 	bl      11238 <__sctp_write_space>

	sctp_association_put(asoc);
   11698:	80 61 00 0c 	lwz     r3,12(r1)
   1169c:	48 00 00 01 	bl      1169c <sctp_wfree+0x178>
}
   116a0:	80 01 00 54 	lwz     r0,84(r1)
   116a4:	7c 08 03 a6 	mtlr    r0
   116a8:	83 e1 00 4c 	lwz     r31,76(r1)
   116ac:	38 21 00 50 	addi    r1,r1,80
   116b0:	4e 80 00 20 	blr

000116b4 <sctp_sock_rfree>:
 * Accounting for the association is done in ulpevent.c
 * We set this as a destructor for the cloned data skbs so that
 * accounting is done at the correct time.
 */
void sctp_sock_rfree(struct sk_buff *skb)
{
   116b4:	94 21 ff b0 	stwu    r1,-80(r1)
   116b8:	93 e1 00 4c 	stw     r31,76(r1)
   116bc:	90 61 00 38 	stw     r3,56(r1)
	struct sock *sk = skb->sk;
   116c0:	80 01 00 38 	lwz     r0,56(r1)
   116c4:	7c 09 03 78 	mr      r9,r0
   116c8:	80 09 00 10 	lwz     r0,16(r9)
   116cc:	90 01 00 08 	stw     r0,8(r1)
   116d0:	80 01 00 38 	lwz     r0,56(r1)
   116d4:	90 01 00 10 	stw     r0,16(r1)
   116d8:	80 01 00 10 	lwz     r0,16(r1)
   116dc:	30 00 00 18 	addic   r0,r0,24
	struct sctp_ulpevent *event = sctp_skb2event(skb);
   116e0:	90 01 00 0c 	stw     r0,12(r1)

	atomic_sub(event->rmem_len, &sk->sk_rmem_alloc);
   116e4:	80 01 00 0c 	lwz     r0,12(r1)
   116e8:	7c 0b 03 78 	mr      r11,r0
   116ec:	80 0b 00 20 	lwz     r0,32(r11)
   116f0:	7c 09 03 78 	mr      r9,r0
   116f4:	80 01 00 08 	lwz     r0,8(r1)
   116f8:	30 00 00 48 	addic   r0,r0,72
   116fc:	91 21 00 14 	stw     r9,20(r1)
   11700:	90 01 00 18 	stw     r0,24(r1)
	subf	%0,%2,%0\n"
	PPC405_ERR77(0,%3)
"	stwcx.	%0,0,%3 \n\
	bne-	1b"
	: "=&r" (t), "+m" (v->counter)
	: "r" (a), "r" (&v->counter)
   11704:	81 21 00 18 	lwz     r9,24(r1)
"1:	lwarx	%0,0,%3		# atomic_sub\n\
	subf	%0,%2,%0\n"
	PPC405_ERR77(0,%3)
"	stwcx.	%0,0,%3 \n\
	bne-	1b"
	: "=&r" (t), "+m" (v->counter)
   11708:	81 41 00 18 	lwz     r10,24(r1)

static __inline__ void atomic_sub(int a, atomic_t *v)
{
	int t;

	__asm__ __volatile__(
   1170c:	80 01 00 14 	lwz     r0,20(r1)
"1:	lwarx	%0,0,%3		# atomic_sub\n\
	subf	%0,%2,%0\n"
	PPC405_ERR77(0,%3)
"	stwcx.	%0,0,%3 \n\
	bne-	1b"
	: "=&r" (t), "+m" (v->counter)
   11710:	81 61 00 18 	lwz     r11,24(r1)

static __inline__ void atomic_sub(int a, atomic_t *v)
{
	int t;

	__asm__ __volatile__(
   11714:	7f e0 48 28 	lwarx   r31,0,r9
   11718:	7f e0 f8 50 	subf    r31,r0,r31
   1171c:	7f e0 49 2d 	stwcx.  r31,0,r9
   11720:	40 a2 ff f4 	bne-    11714 <sctp_sock_rfree+0x60>
   11724:	93 e1 00 1c 	stw     r31,28(r1)

	/*
	 * Mimic the behavior of sock_rfree
	 */
	sk_mem_uncharge(sk, event->rmem_len);
   11728:	80 01 00 0c 	lwz     r0,12(r1)
   1172c:	7c 09 03 78 	mr      r9,r0
   11730:	80 09 00 20 	lwz     r0,32(r9)
   11734:	81 21 00 08 	lwz     r9,8(r1)
   11738:	91 21 00 20 	stw     r9,32(r1)
   1173c:	90 01 00 24 	stw     r0,36(r1)
   11740:	80 01 00 20 	lwz     r0,32(r1)
   11744:	90 01 00 28 	stw     r0,40(r1)
}

static inline int sk_has_account(struct sock *sk)
{
	/* return true if protocol supports memory accounting */
	return !!sk->sk_prot->memory_allocated;
   11748:	80 01 00 28 	lwz     r0,40(r1)
   1174c:	7c 0b 03 78 	mr      r11,r0
   11750:	80 0b 00 1c 	lwz     r0,28(r11)
   11754:	7c 09 03 78 	mr      r9,r0
   11758:	80 09 00 58 	lwz     r0,88(r9)
   1175c:	2f 80 00 00 	cmpwi   cr7,r0,0
   11760:	7c 00 00 26 	mfcr    r0
   11764:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
   11768:	68 00 00 01 	xori    r0,r0,1
	sk->sk_forward_alloc -= size;
}

static inline void sk_mem_uncharge(struct sock *sk, int size)
{
	if (!sk_has_account(sk))
   1176c:	2f 80 00 00 	cmpwi   cr7,r0,0
   11770:	41 9e 00 24 	beq-    cr7,11794 <sctp_sock_rfree+0xe0>
		return;
	sk->sk_forward_alloc += size;
   11774:	80 01 00 20 	lwz     r0,32(r1)
   11778:	7c 0b 03 78 	mr      r11,r0
   1177c:	81 2b 00 58 	lwz     r9,88(r11)
   11780:	80 01 00 24 	lwz     r0,36(r1)
   11784:	7d 29 02 14 	add     r9,r9,r0
   11788:	80 01 00 20 	lwz     r0,32(r1)
   1178c:	7c 0b 03 78 	mr      r11,r0
   11790:	91 2b 00 58 	stw     r9,88(r11)
}
   11794:	83 e1 00 4c 	lwz     r31,76(r1)
   11798:	38 21 00 50 	addi    r1,r1,80
   1179c:	4e 80 00 20 	blr

000117a0 <sctp_wait_for_sndbuf>:


/* Helper function to wait for space in the sndbuf.  */
static int sctp_wait_for_sndbuf(struct sctp_association *asoc, long *timeo_p,
				size_t msg_len)
{
   117a0:	94 21 ff 80 	stwu    r1,-128(r1)
   117a4:	7c 08 02 a6 	mflr    r0
   117a8:	90 01 00 84 	stw     r0,132(r1)
   117ac:	93 e1 00 7c 	stw     r31,124(r1)
   117b0:	90 61 00 68 	stw     r3,104(r1)
   117b4:	90 81 00 6c 	stw     r4,108(r1)
   117b8:	90 a1 00 70 	stw     r5,112(r1)
	struct sock *sk = asoc->base.sk;
   117bc:	80 01 00 68 	lwz     r0,104(r1)
   117c0:	7c 09 03 78 	mr      r9,r0
   117c4:	80 09 00 18 	lwz     r0,24(r9)
   117c8:	90 01 00 10 	stw     r0,16(r1)
	int err = 0;
   117cc:	38 00 00 00 	li      r0,0
   117d0:	90 01 00 08 	stw     r0,8(r1)
	long current_timeo = *timeo_p;
   117d4:	80 01 00 6c 	lwz     r0,108(r1)
   117d8:	7c 0b 03 78 	mr      r11,r0
   117dc:	80 0b 00 00 	lwz     r0,0(r11)
   117e0:	90 01 00 0c 	stw     r0,12(r1)
	DEFINE_WAIT(wait);
   117e4:	38 00 00 00 	li      r0,0
   117e8:	90 01 00 50 	stw     r0,80(r1)
   117ec:	38 00 00 00 	li      r0,0
   117f0:	90 01 00 54 	stw     r0,84(r1)
   117f4:	38 00 00 00 	li      r0,0
   117f8:	90 01 00 58 	stw     r0,88(r1)
   117fc:	38 00 00 00 	li      r0,0
   11800:	90 01 00 5c 	stw     r0,92(r1)
   11804:	38 00 00 00 	li      r0,0
   11808:	90 01 00 60 	stw     r0,96(r1)
   1180c:	7c 40 13 78 	mr      r0,r2
   11810:	90 01 00 54 	stw     r0,84(r1)
   11814:	3c 00 00 00 	lis     r0,0
   11818:	30 00 00 00 	addic   r0,r0,0
   1181c:	90 01 00 58 	stw     r0,88(r1)
   11820:	38 01 00 50 	addi    r0,r1,80
   11824:	30 00 00 0c 	addic   r0,r0,12
   11828:	90 01 00 5c 	stw     r0,92(r1)
   1182c:	38 01 00 50 	addi    r0,r1,80
   11830:	30 00 00 0c 	addic   r0,r0,12
   11834:	90 01 00 60 	stw     r0,96(r1)

	SCTP_DEBUG_PRINTK("wait_for_sndbuf: asoc=%p, timeo=%ld, msg_len=%zu\n",
			  asoc, (long)(*timeo_p), msg_len);

	/* Increment the association's refcnt.  */
	sctp_association_hold(asoc);
   11838:	80 61 00 68 	lwz     r3,104(r1)
   1183c:	48 00 00 01 	bl      1183c <sctp_wait_for_sndbuf+0x9c>

	/* Wait on the association specific sndbuf space. */
	for (;;) {
		prepare_to_wait_exclusive(&asoc->wait, &wait,
   11840:	80 01 00 68 	lwz     r0,104(r1)
   11844:	31 20 03 7c 	addic   r9,r0,892
   11848:	38 01 00 50 	addi    r0,r1,80
   1184c:	7d 23 4b 78 	mr      r3,r9
   11850:	7c 04 03 78 	mr      r4,r0
   11854:	38 a0 00 01 	li      r5,1
   11858:	48 00 00 01 	bl      11858 <sctp_wait_for_sndbuf+0xb8>
					  TASK_INTERRUPTIBLE);
		if (!*timeo_p)
   1185c:	80 01 00 6c 	lwz     r0,108(r1)
   11860:	7c 09 03 78 	mr      r9,r0
   11864:	80 09 00 00 	lwz     r0,0(r9)
   11868:	2f 80 00 00 	cmpwi   cr7,r0,0
   1186c:	41 9e 03 04 	beq-    cr7,11b70 <sctp_wait_for_sndbuf+0x3d0>
			goto do_nonblock;
		if (sk->sk_err || asoc->state >= SCTP_STATE_SHUTDOWN_PENDING ||
   11870:	80 01 00 10 	lwz     r0,16(r1)
   11874:	7c 0b 03 78 	mr      r11,r0
   11878:	80 0b 00 c8 	lwz     r0,200(r11)
   1187c:	2f 80 00 00 	cmpwi   cr7,r0,0
   11880:	40 9e 02 a8 	bne-    cr7,11b28 <sctp_wait_for_sndbuf+0x388>
   11884:	80 01 00 68 	lwz     r0,104(r1)
   11888:	7c 09 03 78 	mr      r9,r0
   1188c:	80 09 01 b8 	lwz     r0,440(r9)
   11890:	2b 80 00 04 	cmplwi  cr7,r0,4
   11894:	41 9d 02 94 	bgt-    cr7,11b28 <sctp_wait_for_sndbuf+0x388>
		    asoc->base.dead)
   11898:	80 01 00 68 	lwz     r0,104(r1)
   1189c:	7c 0b 03 78 	mr      r11,r0
   118a0:	88 0b 00 14 	lbz     r0,20(r11)
   118a4:	54 00 06 3e 	clrlwi  r0,r0,24
	for (;;) {
		prepare_to_wait_exclusive(&asoc->wait, &wait,
					  TASK_INTERRUPTIBLE);
		if (!*timeo_p)
			goto do_nonblock;
		if (sk->sk_err || asoc->state >= SCTP_STATE_SHUTDOWN_PENDING ||
   118a8:	2f 80 00 00 	cmpwi   cr7,r0,0
   118ac:	40 9e 02 7c 	bne-    cr7,11b28 <sctp_wait_for_sndbuf+0x388>
		    asoc->base.dead)
			goto do_error;
		if (signal_pending(current))
   118b0:	7c 40 13 78 	mr      r0,r2
   118b4:	90 01 00 14 	stw     r0,20(r1)
   118b8:	80 01 00 14 	lwz     r0,20(r1)
   118bc:	90 01 00 18 	stw     r0,24(r1)
   118c0:	38 00 00 01 	li      r0,1
   118c4:	90 01 00 1c 	stw     r0,28(r1)
	return test_and_clear_ti_thread_flag(task_thread_info(tsk), flag);
}

static inline int test_tsk_thread_flag(struct task_struct *tsk, int flag)
{
	return test_ti_thread_flag(task_thread_info(tsk), flag);
   118c8:	80 01 00 18 	lwz     r0,24(r1)
   118cc:	7c 09 03 78 	mr      r9,r0
   118d0:	80 09 00 04 	lwz     r0,4(r9)
   118d4:	90 01 00 20 	stw     r0,32(r1)
   118d8:	80 01 00 1c 	lwz     r0,28(r1)
   118dc:	90 01 00 24 	stw     r0,36(r1)
   118e0:	80 01 00 20 	lwz     r0,32(r1)
   118e4:	30 00 00 3c 	addic   r0,r0,60
   118e8:	81 21 00 24 	lwz     r9,36(r1)
   118ec:	91 21 00 28 	stw     r9,40(r1)
   118f0:	90 01 00 2c 	stw     r0,44(r1)
   118f4:	80 01 00 28 	lwz     r0,40(r1)
   118f8:	7c 00 2e 70 	srawi   r0,r0,5
   118fc:	7c 00 01 94 	addze   r0,r0
   11900:	54 00 10 3a 	rlwinm  r0,r0,2,0,29
   11904:	81 21 00 2c 	lwz     r9,44(r1)
   11908:	7c 09 02 14 	add     r0,r9,r0
   1190c:	7c 0b 03 78 	mr      r11,r0
   11910:	81 2b 00 00 	lwz     r9,0(r11)
   11914:	80 01 00 28 	lwz     r0,40(r1)
   11918:	54 00 06 fe 	clrlwi  r0,r0,27
   1191c:	7d 20 04 30 	srw     r0,r9,r0
   11920:	54 00 07 fe 	clrlwi  r0,r0,31
	return -ERESTARTNOINTR;
}

static inline int signal_pending(struct task_struct *p)
{
	return unlikely(test_tsk_thread_flag(p,TIF_SIGPENDING));
   11924:	2f 80 00 00 	cmpwi   cr7,r0,0
   11928:	7c 00 00 26 	mfcr    r0
   1192c:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
   11930:	68 00 00 01 	xori    r0,r0,1
   11934:	2f 80 00 00 	cmpwi   cr7,r0,0
   11938:	40 9e 01 fc 	bne-    cr7,11b34 <sctp_wait_for_sndbuf+0x394>
			goto do_interrupted;
   1193c:	80 01 00 68 	lwz     r0,104(r1)
   11940:	90 01 00 30 	stw     r0,48(r1)
/* Get the sndbuf space available at the time on the association.  */
static inline int sctp_wspace(struct sctp_association *asoc)
{
	int amt;

	if (asoc->ep->sndbuf_policy)
   11944:	80 01 00 30 	lwz     r0,48(r1)
   11948:	7c 09 03 78 	mr      r9,r0
   1194c:	80 09 00 58 	lwz     r0,88(r9)
   11950:	7c 0b 03 78 	mr      r11,r0
   11954:	80 0b 00 a4 	lwz     r0,164(r11)
   11958:	2f 80 00 00 	cmpwi   cr7,r0,0
   1195c:	41 9e 00 18 	beq-    cr7,11974 <sctp_wait_for_sndbuf+0x1d4>
		amt = asoc->sndbuf_used;
   11960:	80 01 00 30 	lwz     r0,48(r1)
   11964:	7c 09 03 78 	mr      r9,r0
   11968:	80 09 03 74 	lwz     r0,884(r9)
   1196c:	90 01 00 34 	stw     r0,52(r1)
   11970:	48 00 00 3c 	b       119ac <sctp_wait_for_sndbuf+0x20c>
	else
		amt = sk_wmem_alloc_get(asoc->base.sk);
   11974:	80 01 00 30 	lwz     r0,48(r1)
   11978:	7c 0b 03 78 	mr      r11,r0
   1197c:	80 0b 00 18 	lwz     r0,24(r11)
   11980:	90 01 00 38 	stw     r0,56(r1)
 *
 * Returns sk_wmem_alloc minus initial offset of one
 */
static inline int sk_wmem_alloc_get(const struct sock *sk)
{
	return atomic_read(&sk->sk_wmem_alloc) - 1;
   11984:	80 01 00 38 	lwz     r0,56(r1)
   11988:	30 00 00 7c 	addic   r0,r0,124
   1198c:	90 01 00 3c 	stw     r0,60(r1)

static __inline__ int atomic_read(const atomic_t *v)
{
	int t;

	__asm__ __volatile__("lwz%U1%X1 %0,%1" : "=r"(t) : "m"(v->counter));
   11990:	80 01 00 3c 	lwz     r0,60(r1)
   11994:	7c 09 03 78 	mr      r9,r0
   11998:	83 e9 00 00 	lwz     r31,0(r9)
   1199c:	93 e1 00 40 	stw     r31,64(r1)

	return t;
   119a0:	80 01 00 40 	lwz     r0,64(r1)
   119a4:	30 00 ff ff 	addic   r0,r0,-1
   119a8:	90 01 00 34 	stw     r0,52(r1)

	if (amt >= asoc->base.sk->sk_sndbuf) {
   119ac:	80 01 00 30 	lwz     r0,48(r1)
   119b0:	7c 0b 03 78 	mr      r11,r0
   119b4:	80 0b 00 18 	lwz     r0,24(r11)
   119b8:	7c 0b 03 78 	mr      r11,r0
   119bc:	81 2b 00 84 	lwz     r9,132(r11)
   119c0:	80 01 00 34 	lwz     r0,52(r1)
   119c4:	7f 89 00 00 	cmpw    cr7,r9,r0
   119c8:	41 9d 00 88 	bgt-    cr7,11a50 <sctp_wait_for_sndbuf+0x2b0>
		if (asoc->base.sk->sk_userlocks & SOCK_SNDBUF_LOCK)
   119cc:	80 01 00 30 	lwz     r0,48(r1)
   119d0:	7c 09 03 78 	mr      r9,r0
   119d4:	80 09 00 18 	lwz     r0,24(r9)
   119d8:	7c 0b 03 78 	mr      r11,r0
   119dc:	80 0b 00 94 	lwz     r0,148(r11)
   119e0:	54 00 46 3e 	rlwinm  r0,r0,8,24,31
   119e4:	54 00 07 3e 	clrlwi  r0,r0,28
   119e8:	54 00 06 3e 	clrlwi  r0,r0,24
   119ec:	54 00 07 fe 	clrlwi  r0,r0,31
   119f0:	54 00 06 3e 	clrlwi  r0,r0,24
   119f4:	2f 80 00 00 	cmpwi   cr7,r0,0
   119f8:	41 9e 00 10 	beq-    cr7,11a08 <sctp_wait_for_sndbuf+0x268>
			amt = 0;
   119fc:	38 00 00 00 	li      r0,0
   11a00:	90 01 00 34 	stw     r0,52(r1)
   11a04:	48 00 00 6c 	b       11a70 <sctp_wait_for_sndbuf+0x2d0>
		else {
			amt = sk_stream_wspace(asoc->base.sk);
   11a08:	80 01 00 30 	lwz     r0,48(r1)
   11a0c:	7c 09 03 78 	mr      r9,r0
   11a10:	80 09 00 18 	lwz     r0,24(r9)
   11a14:	90 01 00 44 	stw     r0,68(r1)
	return sk->sk_wmem_queued >> 1;
}

static inline int sk_stream_wspace(struct sock *sk)
{
	return sk->sk_sndbuf - sk->sk_wmem_queued;
   11a18:	80 01 00 44 	lwz     r0,68(r1)
   11a1c:	7c 0b 03 78 	mr      r11,r0
   11a20:	81 2b 00 84 	lwz     r9,132(r11)
   11a24:	80 01 00 44 	lwz     r0,68(r1)
   11a28:	7c 0b 03 78 	mr      r11,r0
   11a2c:	80 0b 00 98 	lwz     r0,152(r11)
   11a30:	7c 00 48 50 	subf    r0,r0,r9
   11a34:	90 01 00 34 	stw     r0,52(r1)
			if (amt < 0)
   11a38:	80 01 00 34 	lwz     r0,52(r1)
   11a3c:	2f 80 00 00 	cmpwi   cr7,r0,0
   11a40:	40 9c 00 30 	bge-    cr7,11a70 <sctp_wait_for_sndbuf+0x2d0>
				amt = 0;
   11a44:	38 00 00 00 	li      r0,0
   11a48:	90 01 00 34 	stw     r0,52(r1)
   11a4c:	48 00 00 24 	b       11a70 <sctp_wait_for_sndbuf+0x2d0>
		}
	} else {
		amt = asoc->base.sk->sk_sndbuf - amt;
   11a50:	80 01 00 30 	lwz     r0,48(r1)
   11a54:	7c 09 03 78 	mr      r9,r0
   11a58:	80 09 00 18 	lwz     r0,24(r9)
   11a5c:	7c 0b 03 78 	mr      r11,r0
   11a60:	81 2b 00 84 	lwz     r9,132(r11)
   11a64:	80 01 00 34 	lwz     r0,52(r1)
   11a68:	7c 00 48 50 	subf    r0,r0,r9
   11a6c:	90 01 00 34 	stw     r0,52(r1)
	}
	return amt;
   11a70:	80 01 00 34 	lwz     r0,52(r1)
		if (sk->sk_err || asoc->state >= SCTP_STATE_SHUTDOWN_PENDING ||
		    asoc->base.dead)
			goto do_error;
		if (signal_pending(current))
			goto do_interrupted;
		if (msg_len <= sctp_wspace(asoc))
   11a74:	7c 09 03 78 	mr      r9,r0
   11a78:	80 01 00 70 	lwz     r0,112(r1)
   11a7c:	7f 89 00 40 	cmplw   cr7,r9,r0
   11a80:	40 9c 00 68 	bge-    cr7,11ae8 <sctp_wait_for_sndbuf+0x348>
			break;

		/* Let another process have a go.  Since we are going
		 * to sleep anyway.
		 */
		sctp_release_sock(sk);
   11a84:	80 61 00 10 	lwz     r3,16(r1)
   11a88:	48 00 00 01 	bl      11a88 <sctp_wait_for_sndbuf+0x2e8>
		current_timeo = schedule_timeout(current_timeo);
   11a8c:	80 61 00 0c 	lwz     r3,12(r1)
   11a90:	48 00 00 01 	bl      11a90 <sctp_wait_for_sndbuf+0x2f0>
   11a94:	90 61 00 0c 	stw     r3,12(r1)
		BUG_ON(sk != asoc->base.sk);
   11a98:	80 01 00 68 	lwz     r0,104(r1)
   11a9c:	7c 0b 03 78 	mr      r11,r0
   11aa0:	81 2b 00 18 	lwz     r9,24(r11)
   11aa4:	80 01 00 10 	lwz     r0,16(r1)
   11aa8:	7d 20 02 78 	xor     r0,r9,r0
   11aac:	2f 80 00 00 	cmpwi   cr7,r0,0
   11ab0:	7c 00 00 26 	mfcr    r0
   11ab4:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
   11ab8:	68 00 00 01 	xori    r0,r0,1
   11abc:	0f 00 00 00 	twnei   r0,0
   11ac0:	80 01 00 10 	lwz     r0,16(r1)
   11ac4:	90 01 00 48 	stw     r0,72(r1)

extern void lock_sock_nested(struct sock *sk, int subclass);

static inline void lock_sock(struct sock *sk)
{
	lock_sock_nested(sk, 0);
   11ac8:	80 61 00 48 	lwz     r3,72(r1)
   11acc:	38 80 00 00 	li      r4,0
   11ad0:	48 00 00 01 	bl      11ad0 <sctp_wait_for_sndbuf+0x330>
		sctp_lock_sock(sk);

		*timeo_p = current_timeo;
   11ad4:	80 01 00 6c 	lwz     r0,108(r1)
   11ad8:	81 21 00 0c 	lwz     r9,12(r1)
   11adc:	7c 0b 03 78 	mr      r11,r0
   11ae0:	91 2b 00 00 	stw     r9,0(r11)
	}
   11ae4:	4b ff fd 5c 	b       11840 <sctp_wait_for_sndbuf+0xa0>
		    asoc->base.dead)
			goto do_error;
		if (signal_pending(current))
			goto do_interrupted;
		if (msg_len <= sctp_wspace(asoc))
			break;
   11ae8:	60 00 00 00 	nop

		*timeo_p = current_timeo;
	}

out:
	finish_wait(&asoc->wait, &wait);
   11aec:	80 01 00 68 	lwz     r0,104(r1)
   11af0:	31 20 03 7c 	addic   r9,r0,892
   11af4:	38 01 00 50 	addi    r0,r1,80
   11af8:	7d 23 4b 78 	mr      r3,r9
   11afc:	7c 04 03 78 	mr      r4,r0
   11b00:	48 00 00 01 	bl      11b00 <sctp_wait_for_sndbuf+0x360>

	/* Release the association's refcnt.  */
	sctp_association_put(asoc);
   11b04:	80 61 00 68 	lwz     r3,104(r1)
   11b08:	48 00 00 01 	bl      11b08 <sctp_wait_for_sndbuf+0x368>

	return err;
   11b0c:	80 01 00 08 	lwz     r0,8(r1)
	goto out;

do_nonblock:
	err = -EAGAIN;
	goto out;
}
   11b10:	7c 03 03 78 	mr      r3,r0
   11b14:	80 01 00 84 	lwz     r0,132(r1)
   11b18:	7c 08 03 a6 	mtlr    r0
   11b1c:	83 e1 00 7c 	lwz     r31,124(r1)
   11b20:	38 21 00 80 	addi    r1,r1,128
   11b24:	4e 80 00 20 	blr
	sctp_association_put(asoc);

	return err;

do_error:
	err = -EPIPE;
   11b28:	38 00 ff e0 	li      r0,-32
   11b2c:	90 01 00 08 	stw     r0,8(r1)
	goto out;
   11b30:	4b ff ff bc 	b       11aec <sctp_wait_for_sndbuf+0x34c>
			goto do_nonblock;
		if (sk->sk_err || asoc->state >= SCTP_STATE_SHUTDOWN_PENDING ||
		    asoc->base.dead)
			goto do_error;
		if (signal_pending(current))
			goto do_interrupted;
   11b34:	60 00 00 00 	nop
do_error:
	err = -EPIPE;
	goto out;

do_interrupted:
	err = sock_intr_errno(*timeo_p);
   11b38:	80 01 00 6c 	lwz     r0,108(r1)
   11b3c:	7c 09 03 78 	mr      r9,r0
   11b40:	80 09 00 00 	lwz     r0,0(r9)
   11b44:	90 01 00 4c 	stw     r0,76(r1)
/* Alas, with timeout socket operations are not restartable.
 * Compare this to poll().
 */
static inline int sock_intr_errno(long timeo)
{
	return timeo == MAX_SCHEDULE_TIMEOUT ? -ERESTARTSYS : -EINTR;
   11b48:	81 21 00 4c 	lwz     r9,76(r1)
   11b4c:	3c 00 7f ff 	lis     r0,32767
   11b50:	60 00 ff ff 	ori     r0,r0,65535
   11b54:	7f 89 00 00 	cmpw    cr7,r9,r0
   11b58:	40 9e 00 0c 	bne-    cr7,11b64 <sctp_wait_for_sndbuf+0x3c4>
   11b5c:	38 00 fe 00 	li      r0,-512
   11b60:	48 00 00 08 	b       11b68 <sctp_wait_for_sndbuf+0x3c8>
   11b64:	38 00 ff fc 	li      r0,-4
   11b68:	90 01 00 08 	stw     r0,8(r1)
	goto out;
   11b6c:	4b ff ff 80 	b       11aec <sctp_wait_for_sndbuf+0x34c>
	/* Wait on the association specific sndbuf space. */
	for (;;) {
		prepare_to_wait_exclusive(&asoc->wait, &wait,
					  TASK_INTERRUPTIBLE);
		if (!*timeo_p)
			goto do_nonblock;
   11b70:	60 00 00 00 	nop
do_interrupted:
	err = sock_intr_errno(*timeo_p);
	goto out;

do_nonblock:
	err = -EAGAIN;
   11b74:	38 00 ff f5 	li      r0,-11
   11b78:	90 01 00 08 	stw     r0,8(r1)
	goto out;
   11b7c:	4b ff ff 70 	b       11aec <sctp_wait_for_sndbuf+0x34c>

00011b80 <sctp_data_ready>:
}

void sctp_data_ready(struct sock *sk, int len)
{
   11b80:	94 21 ff c0 	stwu    r1,-64(r1)
   11b84:	7c 08 02 a6 	mflr    r0
   11b88:	90 01 00 44 	stw     r0,68(r1)
   11b8c:	90 61 00 38 	stw     r3,56(r1)
   11b90:	90 81 00 3c 	stw     r4,60(r1)
	struct socket_wq *wq;

	rcu_read_lock();
	wq = rcu_dereference(sk->sk_wq);
   11b94:	80 01 00 38 	lwz     r0,56(r1)
   11b98:	7c 09 03 78 	mr      r9,r0
   11b9c:	80 09 00 68 	lwz     r0,104(r9)
   11ba0:	90 01 00 08 	stw     r0,8(r1)
   11ba4:	80 01 00 08 	lwz     r0,8(r1)
   11ba8:	90 01 00 0c 	stw     r0,12(r1)
   11bac:	80 01 00 0c 	lwz     r0,12(r1)
   11bb0:	90 01 00 10 	stw     r0,16(r1)
	 * add_wait_queue modifications to the wait queue.
	 *
	 * This memory barrier is paired in the sock_poll_wait.
	 */
	smp_mb();
	return wq && waitqueue_active(&wq->wait);
   11bb4:	80 01 00 10 	lwz     r0,16(r1)
   11bb8:	2f 80 00 00 	cmpwi   cr7,r0,0
   11bbc:	41 9e 00 4c 	beq-    cr7,11c08 <sctp_data_ready+0x88>
   11bc0:	80 01 00 10 	lwz     r0,16(r1)
   11bc4:	90 01 00 14 	stw     r0,20(r1)
   11bc8:	80 01 00 14 	lwz     r0,20(r1)
   11bcc:	90 01 00 18 	stw     r0,24(r1)
   11bd0:	80 01 00 18 	lwz     r0,24(r1)
   11bd4:	7c 0b 03 78 	mr      r11,r0
   11bd8:	80 0b 00 00 	lwz     r0,0(r11)
   11bdc:	81 21 00 18 	lwz     r9,24(r1)
   11be0:	7f 89 00 00 	cmpw    cr7,r9,r0
   11be4:	7c 00 00 26 	mfcr    r0
   11be8:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
   11bec:	2f 80 00 00 	cmpwi   cr7,r0,0
   11bf0:	7c 00 00 26 	mfcr    r0
   11bf4:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
   11bf8:	2f 80 00 00 	cmpwi   cr7,r0,0
   11bfc:	41 9e 00 0c 	beq-    cr7,11c08 <sctp_data_ready+0x88>
   11c00:	38 00 00 01 	li      r0,1
   11c04:	48 00 00 08 	b       11c0c <sctp_data_ready+0x8c>
   11c08:	38 00 00 00 	li      r0,0
   11c0c:	54 00 06 3e 	clrlwi  r0,r0,24
	if (wq_has_sleeper(wq))
   11c10:	2f 80 00 00 	cmpwi   cr7,r0,0
   11c14:	41 9e 00 1c 	beq-    cr7,11c30 <sctp_data_ready+0xb0>
		wake_up_interruptible_sync_poll(&wq->wait, POLLIN |
   11c18:	80 01 00 0c 	lwz     r0,12(r1)
   11c1c:	7c 03 03 78 	mr      r3,r0
   11c20:	38 80 00 01 	li      r4,1
   11c24:	38 a0 00 01 	li      r5,1
   11c28:	38 c0 00 c1 	li      r6,193
   11c2c:	48 00 00 01 	bl      11c2c <sctp_data_ready+0xac>
   11c30:	80 01 00 38 	lwz     r0,56(r1)
   11c34:	90 01 00 1c 	stw     r0,28(r1)
   11c38:	38 00 00 01 	li      r0,1
   11c3c:	90 01 00 20 	stw     r0,32(r1)
   11c40:	3c 00 00 02 	lis     r0,2
   11c44:	60 00 00 01 	ori     r0,r0,1
   11c48:	90 01 00 24 	stw     r0,36(r1)
   11c4c:	80 01 00 1c 	lwz     r0,28(r1)
   11c50:	90 01 00 28 	stw     r0,40(r1)
   11c54:	38 00 00 16 	li      r0,22
   11c58:	90 01 00 2c 	stw     r0,44(r1)
	__clear_bit(flag, &sk->sk_flags);
}

static inline int sock_flag(struct sock *sk, enum sock_flags flag)
{
	return test_bit(flag, &sk->sk_flags);
   11c5c:	81 21 00 2c 	lwz     r9,44(r1)
   11c60:	80 01 00 28 	lwz     r0,40(r1)
   11c64:	30 00 00 74 	addic   r0,r0,116
   11c68:	91 21 00 30 	stw     r9,48(r1)
   11c6c:	90 01 00 34 	stw     r0,52(r1)
   11c70:	80 01 00 30 	lwz     r0,48(r1)
   11c74:	7c 00 2e 70 	srawi   r0,r0,5
   11c78:	7c 00 01 94 	addze   r0,r0
   11c7c:	54 00 10 3a 	rlwinm  r0,r0,2,0,29
   11c80:	81 21 00 34 	lwz     r9,52(r1)
   11c84:	7c 09 02 14 	add     r0,r9,r0
   11c88:	7c 0b 03 78 	mr      r11,r0
   11c8c:	81 2b 00 00 	lwz     r9,0(r11)
   11c90:	80 01 00 30 	lwz     r0,48(r1)
   11c94:	54 00 06 fe 	clrlwi  r0,r0,27
   11c98:	7d 20 04 30 	srw     r0,r9,r0
   11c9c:	54 00 07 fe 	clrlwi  r0,r0,31
	return amt;
}

static inline void sk_wake_async(struct sock *sk, int how, int band)
{
	if (sock_flag(sk, SOCK_FASYNC))
   11ca0:	2f 80 00 00 	cmpwi   cr7,r0,0
   11ca4:	41 9e 00 20 	beq-    cr7,11cc4 <sctp_data_ready+0x144>
		sock_wake_async(sk->sk_socket, how, band);
   11ca8:	80 01 00 1c 	lwz     r0,28(r1)
   11cac:	7c 09 03 78 	mr      r9,r0
   11cb0:	80 09 01 10 	lwz     r0,272(r9)
   11cb4:	7c 03 03 78 	mr      r3,r0
   11cb8:	80 81 00 20 	lwz     r4,32(r1)
   11cbc:	80 a1 00 24 	lwz     r5,36(r1)
   11cc0:	48 00 00 01 	bl      11cc0 <sctp_data_ready+0x140>
						POLLRDNORM | POLLRDBAND);
	sk_wake_async(sk, SOCK_WAKE_WAITD, POLL_IN);
	rcu_read_unlock();
}
   11cc4:	80 01 00 44 	lwz     r0,68(r1)
   11cc8:	7c 08 03 a6 	mtlr    r0
   11ccc:	38 21 00 40 	addi    r1,r1,64
   11cd0:	4e 80 00 20 	blr

00011cd4 <sctp_write_space>:

/* If socket sndbuf has changed, wake up all per association waiters.  */
void sctp_write_space(struct sock *sk)
{
   11cd4:	94 21 ff d0 	stwu    r1,-48(r1)
   11cd8:	7c 08 02 a6 	mflr    r0
   11cdc:	90 01 00 34 	stw     r0,52(r1)
   11ce0:	90 61 00 28 	stw     r3,40(r1)
   11ce4:	80 01 00 28 	lwz     r0,40(r1)
   11ce8:	90 01 00 14 	stw     r0,20(r1)
   11cec:	80 01 00 14 	lwz     r0,20(r1)
	struct sctp_association *asoc;

	/* Wake up the tasks in each wait queue.  */
	list_for_each_entry(asoc, &((sctp_sk(sk))->ep->asocs), asocs) {
   11cf0:	7c 09 03 78 	mr      r9,r0
   11cf4:	80 09 01 d4 	lwz     r0,468(r9)
   11cf8:	7c 0b 03 78 	mr      r11,r0
   11cfc:	80 0b 00 4c 	lwz     r0,76(r11)
   11d00:	90 01 00 0c 	stw     r0,12(r1)
   11d04:	80 01 00 0c 	lwz     r0,12(r1)
   11d08:	30 00 ff b4 	addic   r0,r0,-76
   11d0c:	90 01 00 08 	stw     r0,8(r1)
   11d10:	48 00 00 28 	b       11d38 <sctp_write_space+0x64>
		__sctp_write_space(asoc);
   11d14:	80 61 00 08 	lwz     r3,8(r1)
   11d18:	4b ff f5 21 	bl      11238 <__sctp_write_space>
void sctp_write_space(struct sock *sk)
{
	struct sctp_association *asoc;

	/* Wake up the tasks in each wait queue.  */
	list_for_each_entry(asoc, &((sctp_sk(sk))->ep->asocs), asocs) {
   11d1c:	80 01 00 08 	lwz     r0,8(r1)
   11d20:	7c 09 03 78 	mr      r9,r0
   11d24:	80 09 00 4c 	lwz     r0,76(r9)
   11d28:	90 01 00 10 	stw     r0,16(r1)
   11d2c:	80 01 00 10 	lwz     r0,16(r1)
   11d30:	30 00 ff b4 	addic   r0,r0,-76
   11d34:	90 01 00 08 	stw     r0,8(r1)
   11d38:	80 01 00 08 	lwz     r0,8(r1)
   11d3c:	7c 0b 03 78 	mr      r11,r0
   11d40:	80 0b 00 4c 	lwz     r0,76(r11)
   11d44:	90 01 00 18 	stw     r0,24(r1)
#define ARCH_HAS_PREFETCHW
#define ARCH_HAS_SPINLOCK_PREFETCH

static inline void prefetch(const void *x)
{
	if (unlikely(!x))
   11d48:	80 01 00 18 	lwz     r0,24(r1)
   11d4c:	2f 80 00 00 	cmpwi   cr7,r0,0
   11d50:	7c 00 00 26 	mfcr    r0
   11d54:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
   11d58:	2f 80 00 00 	cmpwi   cr7,r0,0
   11d5c:	40 9e 00 0c 	bne-    cr7,11d68 <sctp_write_space+0x94>
		return;

	__asm__ __volatile__ ("dcbt 0,%0" : : "r" (x));
   11d60:	80 01 00 18 	lwz     r0,24(r1)
   11d64:	7c 00 02 2c 	dcbt    r0,r0
   11d68:	80 01 00 28 	lwz     r0,40(r1)
   11d6c:	90 01 00 1c 	stw     r0,28(r1)
   11d70:	80 01 00 1c 	lwz     r0,28(r1)
   11d74:	7c 0b 03 78 	mr      r11,r0
   11d78:	81 2b 01 d4 	lwz     r9,468(r11)
   11d7c:	80 01 00 08 	lwz     r0,8(r1)
   11d80:	7f 89 00 00 	cmpw    cr7,r9,r0
   11d84:	40 9e ff 90 	bne+    cr7,11d14 <sctp_write_space+0x40>
		__sctp_write_space(asoc);
	}
}
   11d88:	80 01 00 34 	lwz     r0,52(r1)
   11d8c:	7c 08 03 a6 	mtlr    r0
   11d90:	38 21 00 30 	addi    r1,r1,48
   11d94:	4e 80 00 20 	blr

00011d98 <sctp_writeable>:
 * would cause an unwanted block under certain circumstances.  For the 1-1
 * UDP-style sockets or TCP-style sockets, this code should work.
 *  - Daisy
 */
static int sctp_writeable(struct sock *sk)
{
   11d98:	94 21 ff d0 	stwu    r1,-48(r1)
   11d9c:	93 e1 00 2c 	stw     r31,44(r1)
   11da0:	90 61 00 18 	stw     r3,24(r1)
	int amt = 0;
   11da4:	38 00 00 00 	li      r0,0
   11da8:	90 01 00 08 	stw     r0,8(r1)

	amt = sk->sk_sndbuf - sk_wmem_alloc_get(sk);
   11dac:	80 01 00 18 	lwz     r0,24(r1)
   11db0:	7c 0b 03 78 	mr      r11,r0
   11db4:	81 2b 00 84 	lwz     r9,132(r11)
   11db8:	80 01 00 18 	lwz     r0,24(r1)
   11dbc:	90 01 00 0c 	stw     r0,12(r1)
 *
 * Returns sk_wmem_alloc minus initial offset of one
 */
static inline int sk_wmem_alloc_get(const struct sock *sk)
{
	return atomic_read(&sk->sk_wmem_alloc) - 1;
   11dc0:	80 01 00 0c 	lwz     r0,12(r1)
   11dc4:	30 00 00 7c 	addic   r0,r0,124
   11dc8:	90 01 00 10 	stw     r0,16(r1)

static __inline__ int atomic_read(const atomic_t *v)
{
	int t;

	__asm__ __volatile__("lwz%U1%X1 %0,%1" : "=r"(t) : "m"(v->counter));
   11dcc:	80 01 00 10 	lwz     r0,16(r1)
   11dd0:	7c 0b 03 78 	mr      r11,r0
   11dd4:	83 eb 00 00 	lwz     r31,0(r11)
   11dd8:	93 e1 00 14 	stw     r31,20(r1)

	return t;
   11ddc:	80 01 00 14 	lwz     r0,20(r1)
   11de0:	30 00 ff ff 	addic   r0,r0,-1
   11de4:	7c 00 48 50 	subf    r0,r0,r9
   11de8:	90 01 00 08 	stw     r0,8(r1)
	if (amt < 0)
   11dec:	80 01 00 08 	lwz     r0,8(r1)
   11df0:	2f 80 00 00 	cmpwi   cr7,r0,0
   11df4:	40 9c 00 0c 	bge-    cr7,11e00 <sctp_writeable+0x68>
		amt = 0;
   11df8:	38 00 00 00 	li      r0,0
   11dfc:	90 01 00 08 	stw     r0,8(r1)
	return amt;
   11e00:	80 01 00 08 	lwz     r0,8(r1)
}
   11e04:	7c 03 03 78 	mr      r3,r0
   11e08:	83 e1 00 2c 	lwz     r31,44(r1)
   11e0c:	38 21 00 30 	addi    r1,r1,48
   11e10:	4e 80 00 20 	blr

00011e14 <sctp_wait_for_connect>:

/* Wait for an association to go into ESTABLISHED state. If timeout is 0,
 * returns immediately with EINPROGRESS.
 */
static int sctp_wait_for_connect(struct sctp_association *asoc, long *timeo_p)
{
   11e14:	94 21 ff a0 	stwu    r1,-96(r1)
   11e18:	7c 08 02 a6 	mflr    r0
   11e1c:	90 01 00 64 	stw     r0,100(r1)
   11e20:	90 61 00 58 	stw     r3,88(r1)
   11e24:	90 81 00 5c 	stw     r4,92(r1)
	struct sock *sk = asoc->base.sk;
   11e28:	80 01 00 58 	lwz     r0,88(r1)
   11e2c:	7c 09 03 78 	mr      r9,r0
   11e30:	80 09 00 18 	lwz     r0,24(r9)
   11e34:	90 01 00 10 	stw     r0,16(r1)
	int err = 0;
   11e38:	38 00 00 00 	li      r0,0
   11e3c:	90 01 00 08 	stw     r0,8(r1)
	long current_timeo = *timeo_p;
   11e40:	80 01 00 5c 	lwz     r0,92(r1)
   11e44:	7c 0b 03 78 	mr      r11,r0
   11e48:	80 0b 00 00 	lwz     r0,0(r11)
   11e4c:	90 01 00 0c 	stw     r0,12(r1)
	DEFINE_WAIT(wait);
   11e50:	38 00 00 00 	li      r0,0
   11e54:	90 01 00 40 	stw     r0,64(r1)
   11e58:	38 00 00 00 	li      r0,0
   11e5c:	90 01 00 44 	stw     r0,68(r1)
   11e60:	38 00 00 00 	li      r0,0
   11e64:	90 01 00 48 	stw     r0,72(r1)
   11e68:	38 00 00 00 	li      r0,0
   11e6c:	90 01 00 4c 	stw     r0,76(r1)
   11e70:	38 00 00 00 	li      r0,0
   11e74:	90 01 00 50 	stw     r0,80(r1)
   11e78:	7c 40 13 78 	mr      r0,r2
   11e7c:	90 01 00 44 	stw     r0,68(r1)
   11e80:	3c 00 00 00 	lis     r0,0
   11e84:	30 00 00 00 	addic   r0,r0,0
   11e88:	90 01 00 48 	stw     r0,72(r1)
   11e8c:	38 01 00 40 	addi    r0,r1,64
   11e90:	30 00 00 0c 	addic   r0,r0,12
   11e94:	90 01 00 4c 	stw     r0,76(r1)
   11e98:	38 01 00 40 	addi    r0,r1,64
   11e9c:	30 00 00 0c 	addic   r0,r0,12
   11ea0:	90 01 00 50 	stw     r0,80(r1)

	SCTP_DEBUG_PRINTK("%s: asoc=%p, timeo=%ld\n", __func__, asoc,
			  (long)(*timeo_p));

	/* Increment the association's refcnt.  */
	sctp_association_hold(asoc);
   11ea4:	80 61 00 58 	lwz     r3,88(r1)
   11ea8:	48 00 00 01 	bl      11ea8 <sctp_wait_for_connect+0x94>

	for (;;) {
		prepare_to_wait_exclusive(&asoc->wait, &wait,
   11eac:	80 01 00 58 	lwz     r0,88(r1)
   11eb0:	31 20 03 7c 	addic   r9,r0,892
   11eb4:	38 01 00 40 	addi    r0,r1,64
   11eb8:	7d 23 4b 78 	mr      r3,r9
   11ebc:	7c 04 03 78 	mr      r4,r0
   11ec0:	38 a0 00 01 	li      r5,1
   11ec4:	48 00 00 01 	bl      11ec4 <sctp_wait_for_connect+0xb0>
					  TASK_INTERRUPTIBLE);
		if (!*timeo_p)
   11ec8:	80 01 00 5c 	lwz     r0,92(r1)
   11ecc:	7c 09 03 78 	mr      r9,r0
   11ed0:	80 09 00 00 	lwz     r0,0(r9)
   11ed4:	2f 80 00 00 	cmpwi   cr7,r0,0
   11ed8:	41 9e 02 24 	beq-    cr7,120fc <sctp_wait_for_connect+0x2e8>
			goto do_nonblock;
		if (sk->sk_shutdown & RCV_SHUTDOWN)
   11edc:	80 01 00 10 	lwz     r0,16(r1)
   11ee0:	7c 0b 03 78 	mr      r11,r0
   11ee4:	80 0b 00 94 	lwz     r0,148(r11)
   11ee8:	54 00 17 be 	rlwinm  r0,r0,2,30,31
   11eec:	54 00 06 3e 	clrlwi  r0,r0,24
   11ef0:	54 00 07 fe 	clrlwi  r0,r0,31
   11ef4:	54 00 06 3e 	clrlwi  r0,r0,24
   11ef8:	2f 80 00 00 	cmpwi   cr7,r0,0
   11efc:	40 9e 01 40 	bne-    cr7,1203c <sctp_wait_for_connect+0x228>
			break;
		if (sk->sk_err || asoc->state >= SCTP_STATE_SHUTDOWN_PENDING ||
   11f00:	80 01 00 10 	lwz     r0,16(r1)
   11f04:	7c 09 03 78 	mr      r9,r0
   11f08:	80 09 00 c8 	lwz     r0,200(r9)
   11f0c:	2f 80 00 00 	cmpwi   cr7,r0,0
   11f10:	40 9e 01 70 	bne-    cr7,12080 <sctp_wait_for_connect+0x26c>
   11f14:	80 01 00 58 	lwz     r0,88(r1)
   11f18:	7c 0b 03 78 	mr      r11,r0
   11f1c:	80 0b 01 b8 	lwz     r0,440(r11)
   11f20:	2b 80 00 04 	cmplwi  cr7,r0,4
   11f24:	41 9d 01 5c 	bgt-    cr7,12080 <sctp_wait_for_connect+0x26c>
		    asoc->base.dead)
   11f28:	80 01 00 58 	lwz     r0,88(r1)
   11f2c:	7c 09 03 78 	mr      r9,r0
   11f30:	88 09 00 14 	lbz     r0,20(r9)
   11f34:	54 00 06 3e 	clrlwi  r0,r0,24
					  TASK_INTERRUPTIBLE);
		if (!*timeo_p)
			goto do_nonblock;
		if (sk->sk_shutdown & RCV_SHUTDOWN)
			break;
		if (sk->sk_err || asoc->state >= SCTP_STATE_SHUTDOWN_PENDING ||
   11f38:	2f 80 00 00 	cmpwi   cr7,r0,0
   11f3c:	40 9e 01 44 	bne-    cr7,12080 <sctp_wait_for_connect+0x26c>
		    asoc->base.dead)
			goto do_error;
		if (signal_pending(current))
   11f40:	7c 40 13 78 	mr      r0,r2
   11f44:	90 01 00 14 	stw     r0,20(r1)
   11f48:	80 01 00 14 	lwz     r0,20(r1)
   11f4c:	90 01 00 18 	stw     r0,24(r1)
   11f50:	38 00 00 01 	li      r0,1
   11f54:	90 01 00 1c 	stw     r0,28(r1)
	return test_and_clear_ti_thread_flag(task_thread_info(tsk), flag);
}

static inline int test_tsk_thread_flag(struct task_struct *tsk, int flag)
{
	return test_ti_thread_flag(task_thread_info(tsk), flag);
   11f58:	80 01 00 18 	lwz     r0,24(r1)
   11f5c:	7c 0b 03 78 	mr      r11,r0
   11f60:	80 0b 00 04 	lwz     r0,4(r11)
   11f64:	90 01 00 20 	stw     r0,32(r1)
   11f68:	80 01 00 1c 	lwz     r0,28(r1)
   11f6c:	90 01 00 24 	stw     r0,36(r1)
   11f70:	80 01 00 20 	lwz     r0,32(r1)
   11f74:	30 00 00 3c 	addic   r0,r0,60
   11f78:	81 21 00 24 	lwz     r9,36(r1)
   11f7c:	91 21 00 28 	stw     r9,40(r1)
   11f80:	90 01 00 2c 	stw     r0,44(r1)
   11f84:	80 01 00 28 	lwz     r0,40(r1)
   11f88:	7c 00 2e 70 	srawi   r0,r0,5
   11f8c:	7c 00 01 94 	addze   r0,r0
   11f90:	54 00 10 3a 	rlwinm  r0,r0,2,0,29
   11f94:	81 21 00 2c 	lwz     r9,44(r1)
   11f98:	7c 09 02 14 	add     r0,r9,r0
   11f9c:	7c 0b 03 78 	mr      r11,r0
   11fa0:	81 2b 00 00 	lwz     r9,0(r11)
   11fa4:	80 01 00 28 	lwz     r0,40(r1)
   11fa8:	54 00 06 fe 	clrlwi  r0,r0,27
   11fac:	7d 20 04 30 	srw     r0,r9,r0
   11fb0:	54 00 07 fe 	clrlwi  r0,r0,31
	return -ERESTARTNOINTR;
}

static inline int signal_pending(struct task_struct *p)
{
	return unlikely(test_tsk_thread_flag(p,TIF_SIGPENDING));
   11fb4:	2f 80 00 00 	cmpwi   cr7,r0,0
   11fb8:	7c 00 00 26 	mfcr    r0
   11fbc:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
   11fc0:	68 00 00 01 	xori    r0,r0,1
   11fc4:	2f 80 00 00 	cmpwi   cr7,r0,0
   11fc8:	40 9e 00 f8 	bne-    cr7,120c0 <sctp_wait_for_connect+0x2ac>
			goto do_interrupted;
   11fcc:	80 01 00 58 	lwz     r0,88(r1)
   11fd0:	90 01 00 30 	stw     r0,48(r1)
   11fd4:	38 00 00 04 	li      r0,4
   11fd8:	90 01 00 34 	stw     r0,52(r1)
/* Is the association in this state? */
#define sctp_state(asoc, state) __sctp_state((asoc), (SCTP_STATE_##state))
static inline int __sctp_state(const struct sctp_association *asoc,
			       sctp_state_t state)
{
	return asoc->state == state;
   11fdc:	80 01 00 30 	lwz     r0,48(r1)
   11fe0:	7c 09 03 78 	mr      r9,r0
   11fe4:	80 09 01 b8 	lwz     r0,440(r9)
   11fe8:	81 21 00 34 	lwz     r9,52(r1)
   11fec:	7f 89 00 00 	cmpw    cr7,r9,r0
   11ff0:	7c 00 00 26 	mfcr    r0
   11ff4:	54 00 ff fe 	rlwinm  r0,r0,31,31,31

		if (sctp_state(asoc, ESTABLISHED))
   11ff8:	2f 80 00 00 	cmpwi   cr7,r0,0
   11ffc:	40 9e 00 48 	bne-    cr7,12044 <sctp_wait_for_connect+0x230>
			break;

		/* Let another process have a go.  Since we are going
		 * to sleep anyway.
		 */
		sctp_release_sock(sk);
   12000:	80 61 00 10 	lwz     r3,16(r1)
   12004:	48 00 00 01 	bl      12004 <sctp_wait_for_connect+0x1f0>
		current_timeo = schedule_timeout(current_timeo);
   12008:	80 61 00 0c 	lwz     r3,12(r1)
   1200c:	48 00 00 01 	bl      1200c <sctp_wait_for_connect+0x1f8>
   12010:	90 61 00 0c 	stw     r3,12(r1)
   12014:	80 01 00 10 	lwz     r0,16(r1)
   12018:	90 01 00 38 	stw     r0,56(r1)

extern void lock_sock_nested(struct sock *sk, int subclass);

static inline void lock_sock(struct sock *sk)
{
	lock_sock_nested(sk, 0);
   1201c:	80 61 00 38 	lwz     r3,56(r1)
   12020:	38 80 00 00 	li      r4,0
   12024:	48 00 00 01 	bl      12024 <sctp_wait_for_connect+0x210>
		sctp_lock_sock(sk);

		*timeo_p = current_timeo;
   12028:	80 01 00 5c 	lwz     r0,92(r1)
   1202c:	81 21 00 0c 	lwz     r9,12(r1)
   12030:	7c 0b 03 78 	mr      r11,r0
   12034:	91 2b 00 00 	stw     r9,0(r11)
	}
   12038:	4b ff fe 74 	b       11eac <sctp_wait_for_connect+0x98>
		prepare_to_wait_exclusive(&asoc->wait, &wait,
					  TASK_INTERRUPTIBLE);
		if (!*timeo_p)
			goto do_nonblock;
		if (sk->sk_shutdown & RCV_SHUTDOWN)
			break;
   1203c:	60 00 00 00 	nop
   12040:	48 00 00 08 	b       12048 <sctp_wait_for_connect+0x234>
			goto do_error;
		if (signal_pending(current))
			goto do_interrupted;

		if (sctp_state(asoc, ESTABLISHED))
			break;
   12044:	60 00 00 00 	nop

		*timeo_p = current_timeo;
	}

out:
	finish_wait(&asoc->wait, &wait);
   12048:	80 01 00 58 	lwz     r0,88(r1)
   1204c:	31 20 03 7c 	addic   r9,r0,892
   12050:	38 01 00 40 	addi    r0,r1,64
   12054:	7d 23 4b 78 	mr      r3,r9
   12058:	7c 04 03 78 	mr      r4,r0
   1205c:	48 00 00 01 	bl      1205c <sctp_wait_for_connect+0x248>

	/* Release the association's refcnt.  */
	sctp_association_put(asoc);
   12060:	80 61 00 58 	lwz     r3,88(r1)
   12064:	48 00 00 01 	bl      12064 <sctp_wait_for_connect+0x250>

	return err;
   12068:	80 01 00 08 	lwz     r0,8(r1)
	goto out;

do_nonblock:
	err = -EINPROGRESS;
	goto out;
}
   1206c:	7c 03 03 78 	mr      r3,r0
   12070:	80 01 00 64 	lwz     r0,100(r1)
   12074:	7c 08 03 a6 	mtlr    r0
   12078:	38 21 00 60 	addi    r1,r1,96
   1207c:	4e 80 00 20 	blr
	sctp_association_put(asoc);

	return err;

do_error:
	if (asoc->init_err_counter + 1 > asoc->max_init_attempts)
   12080:	80 01 00 58 	lwz     r0,88(r1)
   12084:	7c 09 03 78 	mr      r9,r0
   12088:	80 09 03 8c 	lwz     r0,908(r9)
   1208c:	31 20 00 01 	addic   r9,r0,1
   12090:	80 01 00 58 	lwz     r0,88(r1)
   12094:	7c 0b 03 78 	mr      r11,r0
   12098:	a0 0b 01 dc 	lhz     r0,476(r11)
   1209c:	54 00 04 3e 	clrlwi  r0,r0,16
   120a0:	7f 89 00 00 	cmpw    cr7,r9,r0
   120a4:	40 9d 00 10 	ble-    cr7,120b4 <sctp_wait_for_connect+0x2a0>
		err = -ETIMEDOUT;
   120a8:	38 00 ff 92 	li      r0,-110
   120ac:	90 01 00 08 	stw     r0,8(r1)
	else
		err = -ECONNREFUSED;
	goto out;
   120b0:	4b ff ff 98 	b       12048 <sctp_wait_for_connect+0x234>

do_error:
	if (asoc->init_err_counter + 1 > asoc->max_init_attempts)
		err = -ETIMEDOUT;
	else
		err = -ECONNREFUSED;
   120b4:	38 00 ff 91 	li      r0,-111
   120b8:	90 01 00 08 	stw     r0,8(r1)
	goto out;
   120bc:	4b ff ff 8c 	b       12048 <sctp_wait_for_connect+0x234>
			break;
		if (sk->sk_err || asoc->state >= SCTP_STATE_SHUTDOWN_PENDING ||
		    asoc->base.dead)
			goto do_error;
		if (signal_pending(current))
			goto do_interrupted;
   120c0:	60 00 00 00 	nop
	else
		err = -ECONNREFUSED;
	goto out;

do_interrupted:
	err = sock_intr_errno(*timeo_p);
   120c4:	80 01 00 5c 	lwz     r0,92(r1)
   120c8:	7c 09 03 78 	mr      r9,r0
   120cc:	80 09 00 00 	lwz     r0,0(r9)
   120d0:	90 01 00 3c 	stw     r0,60(r1)
/* Alas, with timeout socket operations are not restartable.
 * Compare this to poll().
 */
static inline int sock_intr_errno(long timeo)
{
	return timeo == MAX_SCHEDULE_TIMEOUT ? -ERESTARTSYS : -EINTR;
   120d4:	81 21 00 3c 	lwz     r9,60(r1)
   120d8:	3c 00 7f ff 	lis     r0,32767
   120dc:	60 00 ff ff 	ori     r0,r0,65535
   120e0:	7f 89 00 00 	cmpw    cr7,r9,r0
   120e4:	40 9e 00 0c 	bne-    cr7,120f0 <sctp_wait_for_connect+0x2dc>
   120e8:	38 00 fe 00 	li      r0,-512
   120ec:	48 00 00 08 	b       120f4 <sctp_wait_for_connect+0x2e0>
   120f0:	38 00 ff fc 	li      r0,-4
   120f4:	90 01 00 08 	stw     r0,8(r1)
	goto out;
   120f8:	4b ff ff 50 	b       12048 <sctp_wait_for_connect+0x234>

	for (;;) {
		prepare_to_wait_exclusive(&asoc->wait, &wait,
					  TASK_INTERRUPTIBLE);
		if (!*timeo_p)
			goto do_nonblock;
   120fc:	60 00 00 00 	nop
do_interrupted:
	err = sock_intr_errno(*timeo_p);
	goto out;

do_nonblock:
	err = -EINPROGRESS;
   12100:	38 00 ff 8d 	li      r0,-115
   12104:	90 01 00 08 	stw     r0,8(r1)
	goto out;
   12108:	4b ff ff 40 	b       12048 <sctp_wait_for_connect+0x234>

0001210c <sctp_wait_for_accept>:
}

static int sctp_wait_for_accept(struct sock *sk, long timeo)
{
   1210c:	94 21 ff 90 	stwu    r1,-112(r1)
   12110:	7c 08 02 a6 	mflr    r0
   12114:	90 01 00 74 	stw     r0,116(r1)
   12118:	90 61 00 68 	stw     r3,104(r1)
   1211c:	90 81 00 6c 	stw     r4,108(r1)
	struct sctp_endpoint *ep;
	int err = 0;
   12120:	38 00 00 00 	li      r0,0
   12124:	90 01 00 08 	stw     r0,8(r1)
	DEFINE_WAIT(wait);
   12128:	38 00 00 00 	li      r0,0
   1212c:	90 01 00 50 	stw     r0,80(r1)
   12130:	38 00 00 00 	li      r0,0
   12134:	90 01 00 54 	stw     r0,84(r1)
   12138:	38 00 00 00 	li      r0,0
   1213c:	90 01 00 58 	stw     r0,88(r1)
   12140:	38 00 00 00 	li      r0,0
   12144:	90 01 00 5c 	stw     r0,92(r1)
   12148:	38 00 00 00 	li      r0,0
   1214c:	90 01 00 60 	stw     r0,96(r1)
   12150:	7c 40 13 78 	mr      r0,r2
   12154:	90 01 00 54 	stw     r0,84(r1)
   12158:	3c 00 00 00 	lis     r0,0
   1215c:	30 00 00 00 	addic   r0,r0,0
   12160:	90 01 00 58 	stw     r0,88(r1)
   12164:	38 01 00 50 	addi    r0,r1,80
   12168:	30 00 00 0c 	addic   r0,r0,12
   1216c:	90 01 00 5c 	stw     r0,92(r1)
   12170:	38 01 00 50 	addi    r0,r1,80
   12174:	30 00 00 0c 	addic   r0,r0,12
   12178:	90 01 00 60 	stw     r0,96(r1)
   1217c:	80 01 00 68 	lwz     r0,104(r1)
   12180:	90 01 00 10 	stw     r0,16(r1)
   12184:	80 01 00 10 	lwz     r0,16(r1)

	ep = sctp_sk(sk)->ep;
   12188:	7c 09 03 78 	mr      r9,r0
   1218c:	80 09 01 d4 	lwz     r0,468(r9)
   12190:	90 01 00 0c 	stw     r0,12(r1)
   12194:	48 00 00 08 	b       1219c <sctp_wait_for_accept+0x90>
			break;

		err = -EAGAIN;
		if (!timeo)
			break;
	}
   12198:	60 00 00 00 	nop
{
	struct sctp_endpoint *ep;
	int err = 0;
	DEFINE_WAIT(wait);

	ep = sctp_sk(sk)->ep;
   1219c:	80 01 00 68 	lwz     r0,104(r1)
   121a0:	90 01 00 14 	stw     r0,20(r1)
	sk->sk_socket = sock;
}

static inline wait_queue_head_t *sk_sleep(struct sock *sk)
{
	return &sk->sk_wq->wait;
   121a4:	80 01 00 14 	lwz     r0,20(r1)
   121a8:	7c 0b 03 78 	mr      r11,r0
   121ac:	80 0b 00 68 	lwz     r0,104(r11)


	for (;;) {
		prepare_to_wait_exclusive(sk_sleep(sk), &wait,
   121b0:	7c 09 03 78 	mr      r9,r0
   121b4:	38 01 00 50 	addi    r0,r1,80
   121b8:	7d 23 4b 78 	mr      r3,r9
   121bc:	7c 04 03 78 	mr      r4,r0
   121c0:	38 a0 00 01 	li      r5,1
   121c4:	48 00 00 01 	bl      121c4 <sctp_wait_for_accept+0xb8>
					  TASK_INTERRUPTIBLE);

		if (list_empty(&ep->asocs)) {
   121c8:	80 01 00 0c 	lwz     r0,12(r1)
   121cc:	30 00 00 4c 	addic   r0,r0,76
   121d0:	90 01 00 18 	stw     r0,24(r1)
   121d4:	80 01 00 18 	lwz     r0,24(r1)
   121d8:	7c 09 03 78 	mr      r9,r0
   121dc:	80 09 00 00 	lwz     r0,0(r9)
   121e0:	81 21 00 18 	lwz     r9,24(r1)
   121e4:	7f 89 00 00 	cmpw    cr7,r9,r0
   121e8:	7c 00 00 26 	mfcr    r0
   121ec:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
   121f0:	2f 80 00 00 	cmpwi   cr7,r0,0
   121f4:	41 9e 00 2c 	beq-    cr7,12220 <sctp_wait_for_accept+0x114>
			sctp_release_sock(sk);
   121f8:	80 61 00 68 	lwz     r3,104(r1)
   121fc:	48 00 00 01 	bl      121fc <sctp_wait_for_accept+0xf0>
			timeo = schedule_timeout(timeo);
   12200:	80 61 00 6c 	lwz     r3,108(r1)
   12204:	48 00 00 01 	bl      12204 <sctp_wait_for_accept+0xf8>
   12208:	90 61 00 6c 	stw     r3,108(r1)
   1220c:	80 01 00 68 	lwz     r0,104(r1)
   12210:	90 01 00 1c 	stw     r0,28(r1)

extern void lock_sock_nested(struct sock *sk, int subclass);

static inline void lock_sock(struct sock *sk)
{
	lock_sock_nested(sk, 0);
   12214:	80 61 00 1c 	lwz     r3,28(r1)
   12218:	38 80 00 00 	li      r4,0
   1221c:	48 00 00 01 	bl      1221c <sctp_wait_for_accept+0x110>
			sctp_lock_sock(sk);
		}

		err = -EINVAL;
   12220:	38 00 ff ea 	li      r0,-22
   12224:	90 01 00 08 	stw     r0,8(r1)
   12228:	80 01 00 68 	lwz     r0,104(r1)
   1222c:	90 01 00 20 	stw     r0,32(r1)
   12230:	38 00 00 0a 	li      r0,10
   12234:	90 01 00 24 	stw     r0,36(r1)

/* Is the socket in this state? */
#define sctp_sstate(sk, state) __sctp_sstate((sk), (SCTP_SS_##state))
static inline int __sctp_sstate(const struct sock *sk, sctp_sock_state_t state)
{
	return sk->sk_state == state;
   12238:	80 01 00 20 	lwz     r0,32(r1)
   1223c:	7c 0b 03 78 	mr      r11,r0
   12240:	88 0b 00 0e 	lbz     r0,14(r11)
   12244:	54 00 06 3e 	clrlwi  r0,r0,24
   12248:	81 21 00 24 	lwz     r9,36(r1)
   1224c:	7f 89 00 00 	cmpw    cr7,r9,r0
   12250:	7c 00 00 26 	mfcr    r0
   12254:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
		if (!sctp_sstate(sk, LISTENING))
   12258:	2f 80 00 00 	cmpwi   cr7,r0,0
   1225c:	41 9e 01 0c 	beq-    cr7,12368 <sctp_wait_for_accept+0x25c>
			break;

		err = 0;
   12260:	38 00 00 00 	li      r0,0
   12264:	90 01 00 08 	stw     r0,8(r1)
		if (!list_empty(&ep->asocs))
   12268:	80 01 00 0c 	lwz     r0,12(r1)
   1226c:	30 00 00 4c 	addic   r0,r0,76
   12270:	90 01 00 28 	stw     r0,40(r1)
   12274:	80 01 00 28 	lwz     r0,40(r1)
   12278:	7c 09 03 78 	mr      r9,r0
   1227c:	80 09 00 00 	lwz     r0,0(r9)
   12280:	81 21 00 28 	lwz     r9,40(r1)
   12284:	7f 89 00 00 	cmpw    cr7,r9,r0
   12288:	7c 00 00 26 	mfcr    r0
   1228c:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
   12290:	2f 80 00 00 	cmpwi   cr7,r0,0
   12294:	41 9e 00 dc 	beq-    cr7,12370 <sctp_wait_for_accept+0x264>
			break;
   12298:	80 01 00 6c 	lwz     r0,108(r1)
   1229c:	90 01 00 2c 	stw     r0,44(r1)
/* Alas, with timeout socket operations are not restartable.
 * Compare this to poll().
 */
static inline int sock_intr_errno(long timeo)
{
	return timeo == MAX_SCHEDULE_TIMEOUT ? -ERESTARTSYS : -EINTR;
   122a0:	81 21 00 2c 	lwz     r9,44(r1)
   122a4:	3c 00 7f ff 	lis     r0,32767
   122a8:	60 00 ff ff 	ori     r0,r0,65535
   122ac:	7f 89 00 00 	cmpw    cr7,r9,r0
   122b0:	40 9e 00 0c 	bne-    cr7,122bc <sctp_wait_for_accept+0x1b0>
   122b4:	38 00 fe 00 	li      r0,-512
   122b8:	48 00 00 08 	b       122c0 <sctp_wait_for_accept+0x1b4>
   122bc:	38 00 ff fc 	li      r0,-4

		err = sock_intr_errno(timeo);
   122c0:	90 01 00 08 	stw     r0,8(r1)
		if (signal_pending(current))
   122c4:	7c 40 13 78 	mr      r0,r2
   122c8:	90 01 00 30 	stw     r0,48(r1)
   122cc:	80 01 00 30 	lwz     r0,48(r1)
   122d0:	90 01 00 34 	stw     r0,52(r1)
   122d4:	38 00 00 01 	li      r0,1
   122d8:	90 01 00 38 	stw     r0,56(r1)
	return test_and_clear_ti_thread_flag(task_thread_info(tsk), flag);
}

static inline int test_tsk_thread_flag(struct task_struct *tsk, int flag)
{
	return test_ti_thread_flag(task_thread_info(tsk), flag);
   122dc:	80 01 00 34 	lwz     r0,52(r1)
   122e0:	7c 0b 03 78 	mr      r11,r0
   122e4:	80 0b 00 04 	lwz     r0,4(r11)
   122e8:	90 01 00 3c 	stw     r0,60(r1)
   122ec:	80 01 00 38 	lwz     r0,56(r1)
   122f0:	90 01 00 40 	stw     r0,64(r1)
   122f4:	80 01 00 3c 	lwz     r0,60(r1)
   122f8:	30 00 00 3c 	addic   r0,r0,60
   122fc:	81 21 00 40 	lwz     r9,64(r1)
   12300:	91 21 00 44 	stw     r9,68(r1)
   12304:	90 01 00 48 	stw     r0,72(r1)
   12308:	80 01 00 44 	lwz     r0,68(r1)
   1230c:	7c 00 2e 70 	srawi   r0,r0,5
   12310:	7c 00 01 94 	addze   r0,r0
   12314:	54 00 10 3a 	rlwinm  r0,r0,2,0,29
   12318:	81 21 00 48 	lwz     r9,72(r1)
   1231c:	7c 09 02 14 	add     r0,r9,r0
   12320:	7c 0b 03 78 	mr      r11,r0
   12324:	81 2b 00 00 	lwz     r9,0(r11)
   12328:	80 01 00 44 	lwz     r0,68(r1)
   1232c:	54 00 06 fe 	clrlwi  r0,r0,27
   12330:	7d 20 04 30 	srw     r0,r9,r0
   12334:	54 00 07 fe 	clrlwi  r0,r0,31
	return -ERESTARTNOINTR;
}

static inline int signal_pending(struct task_struct *p)
{
	return unlikely(test_tsk_thread_flag(p,TIF_SIGPENDING));
   12338:	2f 80 00 00 	cmpwi   cr7,r0,0
   1233c:	7c 00 00 26 	mfcr    r0
   12340:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
   12344:	68 00 00 01 	xori    r0,r0,1
   12348:	2f 80 00 00 	cmpwi   cr7,r0,0
   1234c:	40 9e 00 2c 	bne-    cr7,12378 <sctp_wait_for_accept+0x26c>
			break;

		err = -EAGAIN;
   12350:	38 00 ff f5 	li      r0,-11
   12354:	90 01 00 08 	stw     r0,8(r1)
		if (!timeo)
   12358:	80 01 00 6c 	lwz     r0,108(r1)
   1235c:	2f 80 00 00 	cmpwi   cr7,r0,0
   12360:	40 9e fe 38 	bne+    cr7,12198 <sctp_wait_for_accept+0x8c>
			break;
   12364:	48 00 00 18 	b       1237c <sctp_wait_for_accept+0x270>
			sctp_lock_sock(sk);
		}

		err = -EINVAL;
		if (!sctp_sstate(sk, LISTENING))
			break;
   12368:	60 00 00 00 	nop
   1236c:	48 00 00 10 	b       1237c <sctp_wait_for_accept+0x270>

		err = 0;
		if (!list_empty(&ep->asocs))
			break;
   12370:	60 00 00 00 	nop
   12374:	48 00 00 08 	b       1237c <sctp_wait_for_accept+0x270>

		err = sock_intr_errno(timeo);
		if (signal_pending(current))
			break;
   12378:	60 00 00 00 	nop

		err = -EAGAIN;
		if (!timeo)
			break;
	}
   1237c:	80 01 00 68 	lwz     r0,104(r1)
   12380:	90 01 00 4c 	stw     r0,76(r1)
	sk->sk_socket = sock;
}

static inline wait_queue_head_t *sk_sleep(struct sock *sk)
{
	return &sk->sk_wq->wait;
   12384:	80 01 00 4c 	lwz     r0,76(r1)
   12388:	7c 09 03 78 	mr      r9,r0
   1238c:	80 09 00 68 	lwz     r0,104(r9)

	finish_wait(sk_sleep(sk), &wait);
   12390:	7c 09 03 78 	mr      r9,r0
   12394:	38 01 00 50 	addi    r0,r1,80
   12398:	7d 23 4b 78 	mr      r3,r9
   1239c:	7c 04 03 78 	mr      r4,r0
   123a0:	48 00 00 01 	bl      123a0 <sctp_wait_for_accept+0x294>

	return err;
   123a4:	80 01 00 08 	lwz     r0,8(r1)
}
   123a8:	7c 03 03 78 	mr      r3,r0
   123ac:	80 01 00 74 	lwz     r0,116(r1)
   123b0:	7c 08 03 a6 	mtlr    r0
   123b4:	38 21 00 70 	addi    r1,r1,112
   123b8:	4e 80 00 20 	blr

000123bc <sctp_wait_for_close>:

static void sctp_wait_for_close(struct sock *sk, long timeout)
{
   123bc:	94 21 ff a0 	stwu    r1,-96(r1)
   123c0:	7c 08 02 a6 	mflr    r0
   123c4:	90 01 00 64 	stw     r0,100(r1)
   123c8:	90 61 00 58 	stw     r3,88(r1)
   123cc:	90 81 00 5c 	stw     r4,92(r1)
	DEFINE_WAIT(wait);
   123d0:	38 00 00 00 	li      r0,0
   123d4:	90 01 00 38 	stw     r0,56(r1)
   123d8:	38 00 00 00 	li      r0,0
   123dc:	90 01 00 3c 	stw     r0,60(r1)
   123e0:	38 00 00 00 	li      r0,0
   123e4:	90 01 00 40 	stw     r0,64(r1)
   123e8:	38 00 00 00 	li      r0,0
   123ec:	90 01 00 44 	stw     r0,68(r1)
   123f0:	38 00 00 00 	li      r0,0
   123f4:	90 01 00 48 	stw     r0,72(r1)
   123f8:	7c 40 13 78 	mr      r0,r2
   123fc:	90 01 00 3c 	stw     r0,60(r1)
   12400:	3c 00 00 00 	lis     r0,0
   12404:	30 00 00 00 	addic   r0,r0,0
   12408:	90 01 00 40 	stw     r0,64(r1)
   1240c:	38 01 00 38 	addi    r0,r1,56
   12410:	30 00 00 0c 	addic   r0,r0,12
   12414:	90 01 00 44 	stw     r0,68(r1)
   12418:	38 01 00 38 	addi    r0,r1,56
   1241c:	30 00 00 0c 	addic   r0,r0,12
   12420:	90 01 00 48 	stw     r0,72(r1)
   12424:	80 01 00 58 	lwz     r0,88(r1)
   12428:	90 01 00 08 	stw     r0,8(r1)
   1242c:	80 01 00 08 	lwz     r0,8(r1)
   12430:	7c 09 03 78 	mr      r9,r0
   12434:	80 09 00 68 	lwz     r0,104(r9)

	do {
		prepare_to_wait(sk_sleep(sk), &wait, TASK_INTERRUPTIBLE);
   12438:	7c 09 03 78 	mr      r9,r0
   1243c:	38 01 00 38 	addi    r0,r1,56
   12440:	7d 23 4b 78 	mr      r3,r9
   12444:	7c 04 03 78 	mr      r4,r0
   12448:	38 a0 00 01 	li      r5,1
   1244c:	48 00 00 01 	bl      1244c <sctp_wait_for_close+0x90>
   12450:	80 01 00 58 	lwz     r0,88(r1)
   12454:	90 01 00 0c 	stw     r0,12(r1)
   12458:	80 01 00 0c 	lwz     r0,12(r1)
		if (list_empty(&sctp_sk(sk)->ep->asocs))
   1245c:	7c 0b 03 78 	mr      r11,r0
   12460:	80 0b 01 d4 	lwz     r0,468(r11)
   12464:	30 00 00 4c 	addic   r0,r0,76
   12468:	90 01 00 10 	stw     r0,16(r1)
   1246c:	80 01 00 10 	lwz     r0,16(r1)
   12470:	7c 09 03 78 	mr      r9,r0
   12474:	80 09 00 00 	lwz     r0,0(r9)
   12478:	81 21 00 10 	lwz     r9,16(r1)
   1247c:	7f 89 00 00 	cmpw    cr7,r9,r0
   12480:	7c 00 00 26 	mfcr    r0
   12484:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
   12488:	2f 80 00 00 	cmpwi   cr7,r0,0
   1248c:	40 9e 00 c8 	bne-    cr7,12554 <sctp_wait_for_close+0x198>
			break;
		sctp_release_sock(sk);
   12490:	80 61 00 58 	lwz     r3,88(r1)
   12494:	48 00 00 01 	bl      12494 <sctp_wait_for_close+0xd8>
		timeout = schedule_timeout(timeout);
   12498:	80 61 00 5c 	lwz     r3,92(r1)
   1249c:	48 00 00 01 	bl      1249c <sctp_wait_for_close+0xe0>
   124a0:	90 61 00 5c 	stw     r3,92(r1)
   124a4:	80 01 00 58 	lwz     r0,88(r1)
   124a8:	90 01 00 14 	stw     r0,20(r1)

extern void lock_sock_nested(struct sock *sk, int subclass);

static inline void lock_sock(struct sock *sk)
{
	lock_sock_nested(sk, 0);
   124ac:	80 61 00 14 	lwz     r3,20(r1)
   124b0:	38 80 00 00 	li      r4,0
   124b4:	48 00 00 01 	bl      124b4 <sctp_wait_for_close+0xf8>
		sctp_lock_sock(sk);
	} while (!signal_pending(current) && timeout);
   124b8:	7c 40 13 78 	mr      r0,r2
   124bc:	90 01 00 18 	stw     r0,24(r1)
   124c0:	80 01 00 18 	lwz     r0,24(r1)
   124c4:	90 01 00 1c 	stw     r0,28(r1)
   124c8:	38 00 00 01 	li      r0,1
   124cc:	90 01 00 20 	stw     r0,32(r1)
	return test_and_clear_ti_thread_flag(task_thread_info(tsk), flag);
}

static inline int test_tsk_thread_flag(struct task_struct *tsk, int flag)
{
	return test_ti_thread_flag(task_thread_info(tsk), flag);
   124d0:	80 01 00 1c 	lwz     r0,28(r1)
   124d4:	7c 0b 03 78 	mr      r11,r0
   124d8:	80 0b 00 04 	lwz     r0,4(r11)
   124dc:	90 01 00 24 	stw     r0,36(r1)
   124e0:	80 01 00 20 	lwz     r0,32(r1)
   124e4:	90 01 00 28 	stw     r0,40(r1)
   124e8:	80 01 00 24 	lwz     r0,36(r1)
   124ec:	30 00 00 3c 	addic   r0,r0,60
   124f0:	81 21 00 28 	lwz     r9,40(r1)
   124f4:	91 21 00 2c 	stw     r9,44(r1)
   124f8:	90 01 00 30 	stw     r0,48(r1)
   124fc:	80 01 00 2c 	lwz     r0,44(r1)
   12500:	7c 00 2e 70 	srawi   r0,r0,5
   12504:	7c 00 01 94 	addze   r0,r0
   12508:	54 00 10 3a 	rlwinm  r0,r0,2,0,29
   1250c:	81 21 00 30 	lwz     r9,48(r1)
   12510:	7c 09 02 14 	add     r0,r9,r0
   12514:	7c 0b 03 78 	mr      r11,r0
   12518:	81 2b 00 00 	lwz     r9,0(r11)
   1251c:	80 01 00 2c 	lwz     r0,44(r1)
   12520:	54 00 06 fe 	clrlwi  r0,r0,27
   12524:	7d 20 04 30 	srw     r0,r9,r0
   12528:	54 00 07 fe 	clrlwi  r0,r0,31
	return -ERESTARTNOINTR;
}

static inline int signal_pending(struct task_struct *p)
{
	return unlikely(test_tsk_thread_flag(p,TIF_SIGPENDING));
   1252c:	2f 80 00 00 	cmpwi   cr7,r0,0
   12530:	7c 00 00 26 	mfcr    r0
   12534:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
   12538:	68 00 00 01 	xori    r0,r0,1
   1253c:	2f 80 00 00 	cmpwi   cr7,r0,0
   12540:	40 9e 00 18 	bne-    cr7,12558 <sctp_wait_for_close+0x19c>
   12544:	80 01 00 5c 	lwz     r0,92(r1)
   12548:	2f 80 00 00 	cmpwi   cr7,r0,0
   1254c:	40 9e fe d8 	bne+    cr7,12424 <sctp_wait_for_close+0x68>
   12550:	48 00 00 08 	b       12558 <sctp_wait_for_close+0x19c>
	DEFINE_WAIT(wait);

	do {
		prepare_to_wait(sk_sleep(sk), &wait, TASK_INTERRUPTIBLE);
		if (list_empty(&sctp_sk(sk)->ep->asocs))
			break;
   12554:	60 00 00 00 	nop
		sctp_release_sock(sk);
		timeout = schedule_timeout(timeout);
		sctp_lock_sock(sk);
	} while (!signal_pending(current) && timeout);
   12558:	80 01 00 58 	lwz     r0,88(r1)
   1255c:	90 01 00 34 	stw     r0,52(r1)
	sk->sk_socket = sock;
}

static inline wait_queue_head_t *sk_sleep(struct sock *sk)
{
	return &sk->sk_wq->wait;
   12560:	80 01 00 34 	lwz     r0,52(r1)
   12564:	7c 09 03 78 	mr      r9,r0
   12568:	80 09 00 68 	lwz     r0,104(r9)

	finish_wait(sk_sleep(sk), &wait);
   1256c:	7c 09 03 78 	mr      r9,r0
   12570:	38 01 00 38 	addi    r0,r1,56
   12574:	7d 23 4b 78 	mr      r3,r9
   12578:	7c 04 03 78 	mr      r4,r0
   1257c:	48 00 00 01 	bl      1257c <sctp_wait_for_close+0x1c0>
}
   12580:	80 01 00 64 	lwz     r0,100(r1)
   12584:	7c 08 03 a6 	mtlr    r0
   12588:	38 21 00 60 	addi    r1,r1,96
   1258c:	4e 80 00 20 	blr

00012590 <sctp_skb_set_owner_r_frag>:

static void sctp_skb_set_owner_r_frag(struct sk_buff *skb, struct sock *sk)
{
   12590:	94 21 ff b0 	stwu    r1,-80(r1)
   12594:	7c 08 02 a6 	mflr    r0
   12598:	90 01 00 54 	stw     r0,84(r1)
   1259c:	93 e1 00 4c 	stw     r31,76(r1)
   125a0:	90 61 00 38 	stw     r3,56(r1)
   125a4:	90 81 00 3c 	stw     r4,60(r1)
	struct sk_buff *frag;

	if (!skb->data_len)
   125a8:	80 01 00 38 	lwz     r0,56(r1)
   125ac:	7c 09 03 78 	mr      r9,r0
   125b0:	80 09 00 54 	lwz     r0,84(r9)
   125b4:	2f 80 00 00 	cmpwi   cr7,r0,0
   125b8:	41 9e 00 54 	beq-    cr7,1260c <sctp_skb_set_owner_r_frag+0x7c>
		goto done;
   125bc:	80 01 00 38 	lwz     r0,56(r1)
   125c0:	90 01 00 0c 	stw     r0,12(r1)
	return skb->head + skb->end;
}
#else
static inline unsigned char *skb_end_pointer(const struct sk_buff *skb)
{
	return skb->end;
   125c4:	80 01 00 0c 	lwz     r0,12(r1)
   125c8:	7c 0b 03 78 	mr      r11,r0
   125cc:	80 0b 00 90 	lwz     r0,144(r11)

	/* Don't forget the fragments. */
	skb_walk_frags(skb, frag)
   125d0:	7c 09 03 78 	mr      r9,r0
   125d4:	80 09 00 10 	lwz     r0,16(r9)
   125d8:	90 01 00 08 	stw     r0,8(r1)
   125dc:	48 00 00 20 	b       125fc <sctp_skb_set_owner_r_frag+0x6c>
		sctp_skb_set_owner_r_frag(frag, sk);
   125e0:	80 61 00 08 	lwz     r3,8(r1)
   125e4:	80 81 00 3c 	lwz     r4,60(r1)
   125e8:	4b ff ff a9 	bl      12590 <sctp_skb_set_owner_r_frag>

	if (!skb->data_len)
		goto done;

	/* Don't forget the fragments. */
	skb_walk_frags(skb, frag)
   125ec:	80 01 00 08 	lwz     r0,8(r1)
   125f0:	7c 0b 03 78 	mr      r11,r0
   125f4:	80 0b 00 00 	lwz     r0,0(r11)
   125f8:	90 01 00 08 	stw     r0,8(r1)
   125fc:	80 01 00 08 	lwz     r0,8(r1)
   12600:	2f 80 00 00 	cmpwi   cr7,r0,0
   12604:	40 9e ff dc 	bne+    cr7,125e0 <sctp_skb_set_owner_r_frag+0x50>
   12608:	48 00 00 08 	b       12610 <sctp_skb_set_owner_r_frag+0x80>
static void sctp_skb_set_owner_r_frag(struct sk_buff *skb, struct sock *sk)
{
	struct sk_buff *frag;

	if (!skb->data_len)
		goto done;
   1260c:	60 00 00 00 	nop

	/* Don't forget the fragments. */
	skb_walk_frags(skb, frag)
   12610:	80 01 00 38 	lwz     r0,56(r1)
   12614:	90 01 00 10 	stw     r0,16(r1)
   12618:	80 01 00 3c 	lwz     r0,60(r1)
   1261c:	90 01 00 14 	stw     r0,20(r1)
   12620:	80 01 00 10 	lwz     r0,16(r1)
   12624:	90 01 00 18 	stw     r0,24(r1)
   12628:	80 01 00 18 	lwz     r0,24(r1)
   1262c:	30 00 00 18 	addic   r0,r0,24
 * of the way we have to do receive buffer accounting on bundled
 * chunks.
 */
static inline void sctp_skb_set_owner_r(struct sk_buff *skb, struct sock *sk)
{
	struct sctp_ulpevent *event = sctp_skb2event(skb);
   12630:	90 01 00 1c 	stw     r0,28(r1)
   12634:	80 01 00 10 	lwz     r0,16(r1)
   12638:	90 01 00 20 	stw     r0,32(r1)
 *	destructor function and make the @skb unowned. The buffer continues
 *	to exist but is no longer charged to its former owner.
 */
static inline void skb_orphan(struct sk_buff *skb)
{
	if (skb->destructor)
   1263c:	80 01 00 20 	lwz     r0,32(r1)
   12640:	7c 09 03 78 	mr      r9,r0
   12644:	80 09 00 68 	lwz     r0,104(r9)
   12648:	2f 80 00 00 	cmpwi   cr7,r0,0
   1264c:	41 9e 00 1c 	beq-    cr7,12668 <sctp_skb_set_owner_r_frag+0xd8>
		skb->destructor(skb);
   12650:	80 01 00 20 	lwz     r0,32(r1)
   12654:	7c 0b 03 78 	mr      r11,r0
   12658:	80 0b 00 68 	lwz     r0,104(r11)
   1265c:	80 61 00 20 	lwz     r3,32(r1)
   12660:	7c 09 03 a6 	mtctr   r0
   12664:	4e 80 04 21 	bctrl
	skb->destructor = NULL;
   12668:	80 01 00 20 	lwz     r0,32(r1)
   1266c:	39 20 00 00 	li      r9,0
   12670:	7c 0b 03 78 	mr      r11,r0
   12674:	91 2b 00 68 	stw     r9,104(r11)
	skb->sk		= NULL;
   12678:	80 01 00 20 	lwz     r0,32(r1)
   1267c:	39 20 00 00 	li      r9,0
   12680:	7c 0b 03 78 	mr      r11,r0
   12684:	91 2b 00 10 	stw     r9,16(r11)

	skb_orphan(skb);
	skb->sk = sk;
   12688:	80 01 00 10 	lwz     r0,16(r1)
   1268c:	81 21 00 14 	lwz     r9,20(r1)
   12690:	7c 0b 03 78 	mr      r11,r0
   12694:	91 2b 00 10 	stw     r9,16(r11)
	skb->destructor = sctp_sock_rfree;
   12698:	80 01 00 10 	lwz     r0,16(r1)
   1269c:	3d 20 00 00 	lis     r9,0
   126a0:	39 29 00 00 	addi    r9,r9,0
   126a4:	7c 0b 03 78 	mr      r11,r0
   126a8:	91 2b 00 68 	stw     r9,104(r11)
	atomic_add(event->rmem_len, &sk->sk_rmem_alloc);
   126ac:	80 01 00 1c 	lwz     r0,28(r1)
   126b0:	7c 09 03 78 	mr      r9,r0
   126b4:	80 09 00 20 	lwz     r0,32(r9)
   126b8:	7c 09 03 78 	mr      r9,r0
   126bc:	80 01 00 14 	lwz     r0,20(r1)
   126c0:	30 00 00 48 	addic   r0,r0,72
   126c4:	91 21 00 24 	stw     r9,36(r1)
   126c8:	90 01 00 28 	stw     r0,40(r1)
	add	%0,%2,%0\n"
	PPC405_ERR77(0,%3)
"	stwcx.	%0,0,%3 \n\
	bne-	1b"
	: "=&r" (t), "+m" (v->counter)
	: "r" (a), "r" (&v->counter)
   126cc:	81 21 00 28 	lwz     r9,40(r1)
"1:	lwarx	%0,0,%3		# atomic_add\n\
	add	%0,%2,%0\n"
	PPC405_ERR77(0,%3)
"	stwcx.	%0,0,%3 \n\
	bne-	1b"
	: "=&r" (t), "+m" (v->counter)
   126d0:	81 41 00 28 	lwz     r10,40(r1)

static __inline__ void atomic_add(int a, atomic_t *v)
{
	int t;

	__asm__ __volatile__(
   126d4:	80 01 00 24 	lwz     r0,36(r1)
"1:	lwarx	%0,0,%3		# atomic_add\n\
	add	%0,%2,%0\n"
	PPC405_ERR77(0,%3)
"	stwcx.	%0,0,%3 \n\
	bne-	1b"
	: "=&r" (t), "+m" (v->counter)
   126d8:	81 61 00 28 	lwz     r11,40(r1)

static __inline__ void atomic_add(int a, atomic_t *v)
{
	int t;

	__asm__ __volatile__(
   126dc:	7f e0 48 28 	lwarx   r31,0,r9
   126e0:	7f e0 fa 14 	add     r31,r0,r31
   126e4:	7f e0 49 2d 	stwcx.  r31,0,r9
   126e8:	40 a2 ff f4 	bne-    126dc <sctp_skb_set_owner_r_frag+0x14c>
   126ec:	93 e1 00 2c 	stw     r31,44(r1)
	/*
	 * This mimics the behavior of skb_set_owner_r
	 */
	sk->sk_forward_alloc -= event->rmem_len;
   126f0:	80 01 00 14 	lwz     r0,20(r1)
   126f4:	7c 0b 03 78 	mr      r11,r0
   126f8:	80 0b 00 58 	lwz     r0,88(r11)
   126fc:	7c 09 03 78 	mr      r9,r0
   12700:	80 01 00 1c 	lwz     r0,28(r1)
   12704:	7c 0b 03 78 	mr      r11,r0
   12708:	80 0b 00 20 	lwz     r0,32(r11)
   1270c:	7c 00 48 50 	subf    r0,r0,r9
   12710:	7c 09 03 78 	mr      r9,r0
   12714:	80 01 00 14 	lwz     r0,20(r1)
   12718:	7c 0b 03 78 	mr      r11,r0
   1271c:	91 2b 00 58 	stw     r9,88(r11)
		sctp_skb_set_owner_r_frag(frag, sk);

done:
	sctp_skb_set_owner_r(skb, sk);
}
   12720:	80 01 00 54 	lwz     r0,84(r1)
   12724:	7c 08 03 a6 	mtlr    r0
   12728:	83 e1 00 4c 	lwz     r31,76(r1)
   1272c:	38 21 00 50 	addi    r1,r1,80
   12730:	4e 80 00 20 	blr

00012734 <sctp_copy_sock>:

void sctp_copy_sock(struct sock *newsk, struct sock *sk,
		    struct sctp_association *asoc)
{
   12734:	94 21 ff d0 	stwu    r1,-48(r1)
   12738:	90 61 00 18 	stw     r3,24(r1)
   1273c:	90 81 00 1c 	stw     r4,28(r1)
   12740:	90 a1 00 20 	stw     r5,32(r1)
   12744:	80 01 00 1c 	lwz     r0,28(r1)
   12748:	90 01 00 10 	stw     r0,16(r1)
   1274c:	80 01 00 10 	lwz     r0,16(r1)
	struct inet_sock *inet = inet_sk(sk);
   12750:	90 01 00 08 	stw     r0,8(r1)
	struct inet_sock *newinet;

	newsk->sk_type = sk->sk_type;
   12754:	80 01 00 1c 	lwz     r0,28(r1)
   12758:	7c 09 03 78 	mr      r9,r0
   1275c:	a0 09 00 96 	lhz     r0,150(r9)
   12760:	54 09 04 3e 	clrlwi  r9,r0,16
   12764:	80 01 00 18 	lwz     r0,24(r1)
   12768:	7c 0b 03 78 	mr      r11,r0
   1276c:	b1 2b 00 96 	sth     r9,150(r11)
	newsk->sk_bound_dev_if = sk->sk_bound_dev_if;
   12770:	80 01 00 1c 	lwz     r0,28(r1)
   12774:	7c 0b 03 78 	mr      r11,r0
   12778:	81 2b 00 10 	lwz     r9,16(r11)
   1277c:	80 01 00 18 	lwz     r0,24(r1)
   12780:	7c 0b 03 78 	mr      r11,r0
   12784:	91 2b 00 10 	stw     r9,16(r11)
	newsk->sk_flags = sk->sk_flags;
   12788:	80 01 00 1c 	lwz     r0,28(r1)
   1278c:	7c 0b 03 78 	mr      r11,r0
   12790:	81 2b 00 74 	lwz     r9,116(r11)
   12794:	80 01 00 18 	lwz     r0,24(r1)
   12798:	7c 0b 03 78 	mr      r11,r0
   1279c:	91 2b 00 74 	stw     r9,116(r11)
	newsk->sk_no_check = sk->sk_no_check;
   127a0:	80 01 00 1c 	lwz     r0,28(r1)
   127a4:	7c 09 03 78 	mr      r9,r0
   127a8:	80 09 00 94 	lwz     r0,148(r9)
   127ac:	54 00 27 3e 	rlwinm  r0,r0,4,28,31
   127b0:	54 00 07 be 	clrlwi  r0,r0,30
   127b4:	54 0b 06 3e 	clrlwi  r11,r0,24
   127b8:	81 21 00 18 	lwz     r9,24(r1)
   127bc:	80 09 00 94 	lwz     r0,148(r9)
   127c0:	51 60 e0 86 	rlwimi  r0,r11,28,2,3
   127c4:	90 09 00 94 	stw     r0,148(r9)
	newsk->sk_reuse = sk->sk_reuse;
   127c8:	80 01 00 1c 	lwz     r0,28(r1)
   127cc:	7c 0b 03 78 	mr      r11,r0
   127d0:	88 0b 00 0f 	lbz     r0,15(r11)
   127d4:	54 09 06 3e 	clrlwi  r9,r0,24
   127d8:	80 01 00 18 	lwz     r0,24(r1)
   127dc:	7c 0b 03 78 	mr      r11,r0
   127e0:	99 2b 00 0f 	stb     r9,15(r11)

	newsk->sk_shutdown = sk->sk_shutdown;
   127e4:	80 01 00 1c 	lwz     r0,28(r1)
   127e8:	7c 09 03 78 	mr      r9,r0
   127ec:	80 09 00 94 	lwz     r0,148(r9)
   127f0:	54 00 17 be 	rlwinm  r0,r0,2,30,31
   127f4:	54 0b 06 3e 	clrlwi  r11,r0,24
   127f8:	81 21 00 18 	lwz     r9,24(r1)
   127fc:	80 09 00 94 	lwz     r0,148(r9)
   12800:	51 60 f0 02 	rlwimi  r0,r11,30,0,1
   12804:	90 09 00 94 	stw     r0,148(r9)
	newsk->sk_destruct = inet_sock_destruct;
   12808:	80 01 00 18 	lwz     r0,24(r1)
   1280c:	3d 20 00 00 	lis     r9,0
   12810:	39 29 00 00 	addi    r9,r9,0
   12814:	7c 0b 03 78 	mr      r11,r0
   12818:	91 2b 01 44 	stw     r9,324(r11)
	newsk->sk_family = sk->sk_family;
   1281c:	80 01 00 1c 	lwz     r0,28(r1)
   12820:	7c 09 03 78 	mr      r9,r0
   12824:	a0 09 00 0c 	lhz     r0,12(r9)
   12828:	54 09 04 3e 	clrlwi  r9,r0,16
   1282c:	80 01 00 18 	lwz     r0,24(r1)
   12830:	7c 0b 03 78 	mr      r11,r0
   12834:	b1 2b 00 0c 	sth     r9,12(r11)
	newsk->sk_protocol = IPPROTO_SCTP;
   12838:	80 01 00 18 	lwz     r0,24(r1)
   1283c:	39 20 ff 84 	li      r9,-124
   12840:	7c 0b 03 78 	mr      r11,r0
   12844:	99 2b 00 95 	stb     r9,149(r11)
	newsk->sk_backlog_rcv = sk->sk_prot->backlog_rcv;
   12848:	80 01 00 1c 	lwz     r0,28(r1)
   1284c:	7c 09 03 78 	mr      r9,r0
   12850:	80 09 00 1c 	lwz     r0,28(r9)
   12854:	7c 0b 03 78 	mr      r11,r0
   12858:	81 2b 00 38 	lwz     r9,56(r11)
   1285c:	80 01 00 18 	lwz     r0,24(r1)
   12860:	7c 0b 03 78 	mr      r11,r0
   12864:	91 2b 01 40 	stw     r9,320(r11)
	newsk->sk_sndbuf = sk->sk_sndbuf;
   12868:	80 01 00 1c 	lwz     r0,28(r1)
   1286c:	7c 0b 03 78 	mr      r11,r0
   12870:	81 2b 00 84 	lwz     r9,132(r11)
   12874:	80 01 00 18 	lwz     r0,24(r1)
   12878:	7c 0b 03 78 	mr      r11,r0
   1287c:	91 2b 00 84 	stw     r9,132(r11)
	newsk->sk_rcvbuf = sk->sk_rcvbuf;
   12880:	80 01 00 1c 	lwz     r0,28(r1)
   12884:	7c 0b 03 78 	mr      r11,r0
   12888:	81 2b 00 60 	lwz     r9,96(r11)
   1288c:	80 01 00 18 	lwz     r0,24(r1)
   12890:	7c 0b 03 78 	mr      r11,r0
   12894:	91 2b 00 60 	stw     r9,96(r11)
	newsk->sk_lingertime = sk->sk_lingertime;
   12898:	80 01 00 1c 	lwz     r0,28(r1)
   1289c:	7c 0b 03 78 	mr      r11,r0
   128a0:	81 2b 00 b4 	lwz     r9,180(r11)
   128a4:	80 01 00 18 	lwz     r0,24(r1)
   128a8:	7c 0b 03 78 	mr      r11,r0
   128ac:	91 2b 00 b4 	stw     r9,180(r11)
	newsk->sk_rcvtimeo = sk->sk_rcvtimeo;
   128b0:	80 01 00 1c 	lwz     r0,28(r1)
   128b4:	7c 0b 03 78 	mr      r11,r0
   128b8:	81 2b 00 e0 	lwz     r9,224(r11)
   128bc:	80 01 00 18 	lwz     r0,24(r1)
   128c0:	7c 0b 03 78 	mr      r11,r0
   128c4:	91 2b 00 e0 	stw     r9,224(r11)
	newsk->sk_sndtimeo = sk->sk_sndtimeo;
   128c8:	80 01 00 1c 	lwz     r0,28(r1)
   128cc:	7c 0b 03 78 	mr      r11,r0
   128d0:	81 2b 00 e4 	lwz     r9,228(r11)
   128d4:	80 01 00 18 	lwz     r0,24(r1)
   128d8:	7c 0b 03 78 	mr      r11,r0
   128dc:	91 2b 00 e4 	stw     r9,228(r11)
   128e0:	80 01 00 18 	lwz     r0,24(r1)
   128e4:	90 01 00 14 	stw     r0,20(r1)
   128e8:	80 01 00 14 	lwz     r0,20(r1)

	newinet = inet_sk(newsk);
   128ec:	90 01 00 0c 	stw     r0,12(r1)

	/* Initialize sk's sport, dport, rcv_saddr and daddr for
	 * getsockname() and getpeername()
	 */
	newinet->inet_sport = inet->inet_sport;
   128f0:	80 01 00 08 	lwz     r0,8(r1)
   128f4:	7c 09 03 78 	mr      r9,r0
   128f8:	a0 09 01 58 	lhz     r0,344(r9)
   128fc:	54 09 04 3e 	clrlwi  r9,r0,16
   12900:	80 01 00 0c 	lwz     r0,12(r1)
   12904:	7c 0b 03 78 	mr      r11,r0
   12908:	b1 2b 01 58 	sth     r9,344(r11)
	newinet->inet_saddr = inet->inet_saddr;
   1290c:	80 01 00 08 	lwz     r0,8(r1)
   12910:	7c 0b 03 78 	mr      r11,r0
   12914:	81 2b 01 50 	lwz     r9,336(r11)
   12918:	80 01 00 0c 	lwz     r0,12(r1)
   1291c:	7c 0b 03 78 	mr      r11,r0
   12920:	91 2b 01 50 	stw     r9,336(r11)
	newinet->inet_rcv_saddr = inet->inet_rcv_saddr;
   12924:	80 01 00 08 	lwz     r0,8(r1)
   12928:	7c 0b 03 78 	mr      r11,r0
   1292c:	81 2b 00 04 	lwz     r9,4(r11)
   12930:	80 01 00 0c 	lwz     r0,12(r1)
   12934:	7c 0b 03 78 	mr      r11,r0
   12938:	91 2b 00 04 	stw     r9,4(r11)
	newinet->inet_dport = htons(asoc->peer.port);
   1293c:	80 01 00 20 	lwz     r0,32(r1)
   12940:	7c 09 03 78 	mr      r9,r0
   12944:	a0 09 00 f2 	lhz     r0,242(r9)
   12948:	54 09 04 3e 	clrlwi  r9,r0,16
   1294c:	80 01 00 0c 	lwz     r0,12(r1)
   12950:	7c 0b 03 78 	mr      r11,r0
   12954:	b1 2b 01 4c 	sth     r9,332(r11)
	newinet->pmtudisc = inet->pmtudisc;
   12958:	80 01 00 08 	lwz     r0,8(r1)
   1295c:	7c 09 03 78 	mr      r9,r0
   12960:	88 09 01 63 	lbz     r0,355(r9)
   12964:	54 09 06 3e 	clrlwi  r9,r0,24
   12968:	80 01 00 0c 	lwz     r0,12(r1)
   1296c:	7c 0b 03 78 	mr      r11,r0
   12970:	99 2b 01 63 	stb     r9,355(r11)
	newinet->inet_id = asoc->next_tsn ^ jiffies;
   12974:	80 01 00 20 	lwz     r0,32(r1)
   12978:	7c 09 03 78 	mr      r9,r0
   1297c:	80 09 03 48 	lwz     r0,840(r9)
   12980:	54 09 04 3e 	clrlwi  r9,r0,16
   12984:	3c 00 00 00 	lis     r0,0
   12988:	7c 0b 03 78 	mr      r11,r0
   1298c:	80 0b 00 00 	lwz     r0,0(r11)
   12990:	54 00 04 3e 	clrlwi  r0,r0,16
   12994:	7d 20 02 78 	xor     r0,r9,r0
   12998:	54 09 04 3e 	clrlwi  r9,r0,16
   1299c:	80 01 00 0c 	lwz     r0,12(r1)
   129a0:	7c 0b 03 78 	mr      r11,r0
   129a4:	b1 2b 01 5a 	sth     r9,346(r11)

	newinet->uc_ttl = inet->uc_ttl;
   129a8:	80 01 00 08 	lwz     r0,8(r1)
   129ac:	7c 09 03 78 	mr      r9,r0
   129b0:	a0 09 01 54 	lhz     r0,340(r9)
   129b4:	7c 09 07 34 	extsh   r9,r0
   129b8:	80 01 00 0c 	lwz     r0,12(r1)
   129bc:	7c 0b 03 78 	mr      r11,r0
   129c0:	b1 2b 01 54 	sth     r9,340(r11)
	newinet->mc_loop = 1;
   129c4:	81 21 00 0c 	lwz     r9,12(r1)
   129c8:	80 09 01 64 	lwz     r0,356(r9)
   129cc:	39 60 00 01 	li      r11,1
   129d0:	51 60 d9 08 	rlwimi  r0,r11,27,4,4
   129d4:	90 09 01 64 	stw     r0,356(r9)
	newinet->mc_ttl = 1;
   129d8:	80 01 00 0c 	lwz     r0,12(r1)
   129dc:	39 20 00 01 	li      r9,1
   129e0:	7c 0b 03 78 	mr      r11,r0
   129e4:	99 2b 01 62 	stb     r9,354(r11)
	newinet->mc_index = 0;
   129e8:	80 01 00 0c 	lwz     r0,12(r1)
   129ec:	39 20 00 00 	li      r9,0
   129f0:	7c 0b 03 78 	mr      r11,r0
   129f4:	91 2b 01 68 	stw     r9,360(r11)
	newinet->mc_list = NULL;
   129f8:	80 01 00 0c 	lwz     r0,12(r1)
   129fc:	39 20 00 00 	li      r9,0
   12a00:	7c 0b 03 78 	mr      r11,r0
   12a04:	91 2b 01 70 	stw     r9,368(r11)
}
   12a08:	38 21 00 30 	addi    r1,r1,48
   12a0c:	4e 80 00 20 	blr

00012a10 <sctp_sock_migrate>:
 * and its messages to the newsk.
 */
static void sctp_sock_migrate(struct sock *oldsk, struct sock *newsk,
			      struct sctp_association *assoc,
			      sctp_socket_type_t type)
{
   12a10:	94 21 fe b0 	stwu    r1,-336(r1)
   12a14:	7c 08 02 a6 	mflr    r0
   12a18:	90 01 01 54 	stw     r0,340(r1)
   12a1c:	93 e1 01 4c 	stw     r31,332(r1)
   12a20:	90 61 01 38 	stw     r3,312(r1)
   12a24:	90 81 01 3c 	stw     r4,316(r1)
   12a28:	90 a1 01 40 	stw     r5,320(r1)
   12a2c:	90 c1 01 44 	stw     r6,324(r1)
   12a30:	80 01 01 38 	lwz     r0,312(r1)
   12a34:	90 01 00 2c 	stw     r0,44(r1)
   12a38:	80 01 00 2c 	lwz     r0,44(r1)
	struct sctp_sock *oldsp = sctp_sk(oldsk);
   12a3c:	90 01 00 14 	stw     r0,20(r1)
   12a40:	80 01 01 3c 	lwz     r0,316(r1)
   12a44:	90 01 00 30 	stw     r0,48(r1)
   12a48:	80 01 00 30 	lwz     r0,48(r1)
	struct sctp_sock *newsp = sctp_sk(newsk);
   12a4c:	90 01 00 18 	stw     r0,24(r1)
	struct sctp_bind_bucket *pp; /* hash list port iterator */
	struct sctp_endpoint *newep = newsp->ep;
   12a50:	80 01 00 18 	lwz     r0,24(r1)
   12a54:	7c 08 03 78 	mr      r8,r0
   12a58:	80 08 01 d4 	lwz     r0,468(r8)
   12a5c:	90 01 00 1c 	stw     r0,28(r1)
	struct sctp_bind_hashbucket *head;

	/* Migrate socket buffer sizes and all the socket level options to the
	 * new socket.
	 */
	newsk->sk_sndbuf = oldsk->sk_sndbuf;
   12a60:	80 01 01 38 	lwz     r0,312(r1)
   12a64:	7c 0a 03 78 	mr      r10,r0
   12a68:	81 2a 00 84 	lwz     r9,132(r10)
   12a6c:	80 01 01 3c 	lwz     r0,316(r1)
   12a70:	7c 0b 03 78 	mr      r11,r0
   12a74:	91 2b 00 84 	stw     r9,132(r11)
	newsk->sk_rcvbuf = oldsk->sk_rcvbuf;
   12a78:	80 01 01 38 	lwz     r0,312(r1)
   12a7c:	7c 08 03 78 	mr      r8,r0
   12a80:	81 28 00 60 	lwz     r9,96(r8)
   12a84:	80 01 01 3c 	lwz     r0,316(r1)
   12a88:	7c 0a 03 78 	mr      r10,r0
   12a8c:	91 2a 00 60 	stw     r9,96(r10)
   12a90:	80 01 01 3c 	lwz     r0,316(r1)
   12a94:	90 01 00 34 	stw     r0,52(r1)
   12a98:	80 01 01 38 	lwz     r0,312(r1)
   12a9c:	90 01 00 38 	stw     r0,56(r1)
}

static inline void inet_sk_copy_descendant(struct sock *sk_to,
					   const struct sock *sk_from)
{
	int ancestor_size = sizeof(struct inet_sock);
   12aa0:	38 00 01 c8 	li      r0,456
   12aa4:	90 01 00 3c 	stw     r0,60(r1)

	if (sk_from->sk_family == PF_INET6)
   12aa8:	80 01 00 38 	lwz     r0,56(r1)
   12aac:	7c 0b 03 78 	mr      r11,r0
   12ab0:	a0 0b 00 0c 	lhz     r0,12(r11)
   12ab4:	54 00 04 3e 	clrlwi  r0,r0,16
   12ab8:	2f 80 00 0a 	cmpwi   cr7,r0,10
   12abc:	40 9e 00 10 	bne-    cr7,12acc <sctp_sock_migrate+0xbc>
		ancestor_size += sizeof(struct ipv6_pinfo);
   12ac0:	80 01 00 3c 	lwz     r0,60(r1)
   12ac4:	30 00 00 84 	addic   r0,r0,132
   12ac8:	90 01 00 3c 	stw     r0,60(r1)
   12acc:	80 01 00 34 	lwz     r0,52(r1)
   12ad0:	90 01 00 40 	stw     r0,64(r1)
   12ad4:	80 01 00 38 	lwz     r0,56(r1)
   12ad8:	90 01 00 44 	stw     r0,68(r1)
   12adc:	80 01 00 3c 	lwz     r0,60(r1)
   12ae0:	90 01 00 48 	stw     r0,72(r1)
   12ae4:	80 01 00 40 	lwz     r0,64(r1)
   12ae8:	90 01 00 4c 	stw     r0,76(r1)
   12aec:	80 01 00 4c 	lwz     r0,76(r1)

static inline void __inet_sk_copy_descendant(struct sock *sk_to,
					     const struct sock *sk_from,
					     const int ancestor_size)
{
	memcpy(inet_sk(sk_to) + 1, inet_sk(sk_from) + 1,
   12af0:	31 60 01 c8 	addic   r11,r0,456
   12af4:	80 01 00 44 	lwz     r0,68(r1)
   12af8:	90 01 00 50 	stw     r0,80(r1)
#define IPCORK_OPT	1	/* ip-options has been held in ipcork.opt */
#define IPCORK_ALLFRAG	2	/* always fragment (for ipv6 for now) */

static inline struct inet_sock *inet_sk(const struct sock *sk)
{
	return (struct inet_sock *)sk;
   12afc:	80 01 00 50 	lwz     r0,80(r1)

static inline void __inet_sk_copy_descendant(struct sock *sk_to,
					     const struct sock *sk_from,
					     const int ancestor_size)
{
	memcpy(inet_sk(sk_to) + 1, inet_sk(sk_from) + 1,
   12b00:	31 20 01 c8 	addic   r9,r0,456
	       sk_from->sk_prot->obj_size - ancestor_size);
   12b04:	80 01 00 44 	lwz     r0,68(r1)
   12b08:	7c 08 03 78 	mr      r8,r0
   12b0c:	80 08 00 1c 	lwz     r0,28(r8)
   12b10:	7c 08 03 78 	mr      r8,r0
   12b14:	81 48 00 7c 	lwz     r10,124(r8)

static inline void __inet_sk_copy_descendant(struct sock *sk_to,
					     const struct sock *sk_from,
					     const int ancestor_size)
{
	memcpy(inet_sk(sk_to) + 1, inet_sk(sk_from) + 1,
   12b18:	80 01 00 48 	lwz     r0,72(r1)
   12b1c:	7c 00 50 50 	subf    r0,r0,r10
   12b20:	7d 63 5b 78 	mr      r3,r11
   12b24:	7d 24 4b 78 	mr      r4,r9
   12b28:	7c 05 03 78 	mr      r5,r0
   12b2c:	48 00 00 01 	bl      12b2c <sctp_sock_migrate+0x11c>
	inet_sk_copy_descendant(newsk, oldsk);

	/* Restore the ep value that was overwritten with the above structure
	 * copy.
	 */
	newsp->ep = newep;
   12b30:	80 01 00 18 	lwz     r0,24(r1)
   12b34:	81 21 00 1c 	lwz     r9,28(r1)
   12b38:	7c 0a 03 78 	mr      r10,r0
   12b3c:	91 2a 01 d4 	stw     r9,468(r10)
	newsp->hmac = NULL;
   12b40:	80 01 00 18 	lwz     r0,24(r1)
   12b44:	39 20 00 00 	li      r9,0
   12b48:	7c 0b 03 78 	mr      r11,r0
   12b4c:	91 2b 01 d0 	stw     r9,464(r11)

	/* Hook this new socket in to the bind_hash list. */
	head = &sctp_port_hashtable[sctp_phashfn(inet_sk(oldsk)->inet_num)];
   12b50:	3c 00 00 00 	lis     r0,0
   12b54:	30 00 00 00 	addic   r0,r0,0
   12b58:	7c 08 03 78 	mr      r8,r0
   12b5c:	81 28 00 5c 	lwz     r9,92(r8)
   12b60:	80 01 01 38 	lwz     r0,312(r1)
   12b64:	90 01 00 54 	stw     r0,84(r1)
#define IPCORK_OPT	1	/* ip-options has been held in ipcork.opt */
#define IPCORK_ALLFRAG	2	/* always fragment (for ipv6 for now) */

static inline struct inet_sock *inet_sk(const struct sock *sk)
{
	return (struct inet_sock *)sk;
   12b68:	80 01 00 54 	lwz     r0,84(r1)
   12b6c:	7c 0a 03 78 	mr      r10,r0
   12b70:	a0 0a 01 4e 	lhz     r0,334(r10)
   12b74:	54 00 04 3e 	clrlwi  r0,r0,16
   12b78:	b0 01 00 58 	sth     r0,88(r1)

/* Warning: The following hash functions assume a power of two 'size'. */
/* This is the hash function for the SCTP port hash table. */
static inline int sctp_phashfn(__u16 lport)
{
	return lport & (sctp_port_hashsize - 1);
   12b7c:	a0 01 00 58 	lhz     r0,88(r1)
   12b80:	54 0b 04 3e 	clrlwi  r11,r0,16
   12b84:	3c 00 00 00 	lis     r0,0
   12b88:	30 00 00 00 	addic   r0,r0,0
   12b8c:	7c 08 03 78 	mr      r8,r0
   12b90:	80 08 00 58 	lwz     r0,88(r8)
   12b94:	30 00 ff ff 	addic   r0,r0,-1
   12b98:	7d 60 00 38 	and     r0,r11,r0
   12b9c:	54 00 10 3a 	rlwinm  r0,r0,2,0,29
   12ba0:	7c 09 02 14 	add     r0,r9,r0
   12ba4:	90 01 00 20 	stw     r0,32(r1)
	sctp_local_bh_disable();
   12ba8:	48 00 00 01 	bl      12ba8 <sctp_sock_migrate+0x198>
	sctp_spin_lock(&head->lock);
   12bac:	80 01 00 20 	lwz     r0,32(r1)
   12bb0:	90 01 01 28 	stw     r0,296(r1)
   12bb4:	80 01 01 38 	lwz     r0,312(r1)
   12bb8:	90 01 00 5c 	stw     r0,92(r1)
   12bbc:	80 01 00 5c 	lwz     r0,92(r1)
	pp = sctp_sk(oldsk)->bind_hash;
   12bc0:	7c 09 03 78 	mr      r9,r0
   12bc4:	80 09 01 d8 	lwz     r0,472(r9)
   12bc8:	90 01 00 24 	stw     r0,36(r1)
	sk_add_bind_node(newsk, &pp->owner);
   12bcc:	80 01 00 24 	lwz     r0,36(r1)
   12bd0:	30 00 00 0c 	addic   r0,r0,12
   12bd4:	81 21 01 3c 	lwz     r9,316(r1)
   12bd8:	91 21 00 60 	stw     r9,96(r1)
   12bdc:	90 01 00 64 	stw     r0,100(r1)
}

static __inline__ void sk_add_bind_node(struct sock *sk,
					struct hlist_head *list)
{
	hlist_add_head(&sk->sk_bind_node, list);
   12be0:	80 01 00 60 	lwz     r0,96(r1)
   12be4:	30 00 00 14 	addic   r0,r0,20
   12be8:	90 01 00 68 	stw     r0,104(r1)
   12bec:	80 01 00 64 	lwz     r0,100(r1)
   12bf0:	90 01 00 6c 	stw     r0,108(r1)
	}
}

static inline void hlist_add_head(struct hlist_node *n, struct hlist_head *h)
{
	struct hlist_node *first = h->first;
   12bf4:	80 01 00 6c 	lwz     r0,108(r1)
   12bf8:	7c 0a 03 78 	mr      r10,r0
   12bfc:	80 0a 00 00 	lwz     r0,0(r10)
   12c00:	90 01 00 70 	stw     r0,112(r1)
	n->next = first;
   12c04:	80 01 00 68 	lwz     r0,104(r1)
   12c08:	81 21 00 70 	lwz     r9,112(r1)
   12c0c:	7c 0b 03 78 	mr      r11,r0
   12c10:	91 2b 00 00 	stw     r9,0(r11)
	if (first)
   12c14:	80 01 00 70 	lwz     r0,112(r1)
   12c18:	2f 80 00 00 	cmpwi   cr7,r0,0
   12c1c:	41 9e 00 14 	beq-    cr7,12c30 <sctp_sock_migrate+0x220>
		first->pprev = &n->next;
   12c20:	81 21 00 68 	lwz     r9,104(r1)
   12c24:	80 01 00 70 	lwz     r0,112(r1)
   12c28:	7c 08 03 78 	mr      r8,r0
   12c2c:	91 28 00 04 	stw     r9,4(r8)
	h->first = n;
   12c30:	80 01 00 6c 	lwz     r0,108(r1)
   12c34:	81 21 00 68 	lwz     r9,104(r1)
   12c38:	7c 0a 03 78 	mr      r10,r0
   12c3c:	91 2a 00 00 	stw     r9,0(r10)
	n->pprev = &h->first;
   12c40:	81 21 00 6c 	lwz     r9,108(r1)
   12c44:	80 01 00 68 	lwz     r0,104(r1)
   12c48:	7c 0b 03 78 	mr      r11,r0
   12c4c:	91 2b 00 04 	stw     r9,4(r11)
   12c50:	80 01 01 3c 	lwz     r0,316(r1)
   12c54:	90 01 00 74 	stw     r0,116(r1)
   12c58:	80 01 00 74 	lwz     r0,116(r1)
	sctp_sk(newsk)->bind_hash = pp;
   12c5c:	81 21 00 24 	lwz     r9,36(r1)
   12c60:	7c 08 03 78 	mr      r8,r0
   12c64:	91 28 01 d8 	stw     r9,472(r8)
   12c68:	80 01 01 3c 	lwz     r0,316(r1)
   12c6c:	90 01 00 78 	stw     r0,120(r1)
   12c70:	80 01 00 78 	lwz     r0,120(r1)
	inet_sk(newsk)->inet_num = inet_sk(oldsk)->inet_num;
   12c74:	81 21 01 38 	lwz     r9,312(r1)
   12c78:	91 21 00 7c 	stw     r9,124(r1)
   12c7c:	81 21 00 7c 	lwz     r9,124(r1)
   12c80:	a1 29 01 4e 	lhz     r9,334(r9)
   12c84:	55 29 04 3e 	clrlwi  r9,r9,16
   12c88:	7c 0a 03 78 	mr      r10,r0
   12c8c:	b1 2a 01 4e 	sth     r9,334(r10)
	sctp_spin_unlock(&head->lock);
   12c90:	80 01 00 20 	lwz     r0,32(r1)
   12c94:	90 01 01 2c 	stw     r0,300(r1)
	sctp_local_bh_enable();
   12c98:	48 00 00 01 	bl      12c98 <sctp_sock_migrate+0x288>

	/* Copy the bind_addr list from the original endpoint to the new
	 * endpoint so that we can handle restarts properly
	 */
	sctp_bind_addr_dup(&newsp->ep->base.bind_addr,
   12c9c:	80 01 00 18 	lwz     r0,24(r1)
   12ca0:	7c 0b 03 78 	mr      r11,r0
   12ca4:	80 0b 01 d4 	lwz     r0,468(r11)
   12ca8:	31 20 00 3c 	addic   r9,r0,60
				&oldsp->ep->base.bind_addr, GFP_KERNEL);
   12cac:	80 01 00 14 	lwz     r0,20(r1)
   12cb0:	7c 08 03 78 	mr      r8,r0
   12cb4:	80 08 01 d4 	lwz     r0,468(r8)
   12cb8:	30 00 00 3c 	addic   r0,r0,60
	sctp_local_bh_enable();

	/* Copy the bind_addr list from the original endpoint to the new
	 * endpoint so that we can handle restarts properly
	 */
	sctp_bind_addr_dup(&newsp->ep->base.bind_addr,
   12cbc:	7d 23 4b 78 	mr      r3,r9
   12cc0:	7c 04 03 78 	mr      r4,r0
   12cc4:	38 a0 00 d0 	li      r5,208
   12cc8:	48 00 00 01 	bl      12cc8 <sctp_sock_migrate+0x2b8>
				&oldsp->ep->base.bind_addr, GFP_KERNEL);

	/* Move any messages in the old socket's receive queue that are for the
	 * peeled off association to the new socket's receive queue.
	 */
	sctp_skb_for_each(skb, &oldsk->sk_receive_queue, tmp) {
   12ccc:	80 01 01 38 	lwz     r0,312(r1)
   12cd0:	7c 09 03 78 	mr      r9,r0
   12cd4:	80 09 00 3c 	lwz     r0,60(r9)
   12cd8:	90 01 00 08 	stw     r0,8(r1)
   12cdc:	80 01 00 08 	lwz     r0,8(r1)
   12ce0:	7c 0a 03 78 	mr      r10,r0
   12ce4:	80 0a 00 00 	lwz     r0,0(r10)
   12ce8:	90 01 00 0c 	stw     r0,12(r1)
   12cec:	48 00 01 a4 	b       12e90 <sctp_sock_migrate+0x480>
   12cf0:	80 01 00 08 	lwz     r0,8(r1)
   12cf4:	90 01 00 80 	stw     r0,128(r1)
   12cf8:	80 01 00 80 	lwz     r0,128(r1)
   12cfc:	30 00 00 18 	addic   r0,r0,24
		event = sctp_skb2event(skb);
   12d00:	90 01 00 28 	stw     r0,40(r1)
		if (event->asoc == assoc) {
   12d04:	80 01 00 28 	lwz     r0,40(r1)
   12d08:	7c 0b 03 78 	mr      r11,r0
   12d0c:	81 2b 00 00 	lwz     r9,0(r11)
   12d10:	80 01 01 40 	lwz     r0,320(r1)
   12d14:	7f 89 00 00 	cmpw    cr7,r9,r0
   12d18:	40 9e 01 60 	bne-    cr7,12e78 <sctp_sock_migrate+0x468>
			__skb_unlink(skb, &oldsk->sk_receive_queue);
   12d1c:	80 01 01 38 	lwz     r0,312(r1)
   12d20:	30 00 00 3c 	addic   r0,r0,60
   12d24:	81 21 00 08 	lwz     r9,8(r1)
   12d28:	91 21 00 84 	stw     r9,132(r1)
   12d2c:	90 01 00 88 	stw     r0,136(r1)
extern void	   skb_unlink(struct sk_buff *skb, struct sk_buff_head *list);
static inline void __skb_unlink(struct sk_buff *skb, struct sk_buff_head *list)
{
	struct sk_buff *next, *prev;

	list->qlen--;
   12d30:	80 01 00 88 	lwz     r0,136(r1)
   12d34:	7c 08 03 78 	mr      r8,r0
   12d38:	80 08 00 08 	lwz     r0,8(r8)
   12d3c:	31 20 ff ff 	addic   r9,r0,-1
   12d40:	80 01 00 88 	lwz     r0,136(r1)
   12d44:	7c 0a 03 78 	mr      r10,r0
   12d48:	91 2a 00 08 	stw     r9,8(r10)
	next	   = skb->next;
   12d4c:	80 01 00 84 	lwz     r0,132(r1)
   12d50:	7c 0b 03 78 	mr      r11,r0
   12d54:	80 0b 00 00 	lwz     r0,0(r11)
   12d58:	90 01 00 8c 	stw     r0,140(r1)
	prev	   = skb->prev;
   12d5c:	80 01 00 84 	lwz     r0,132(r1)
   12d60:	7c 08 03 78 	mr      r8,r0
   12d64:	80 08 00 04 	lwz     r0,4(r8)
   12d68:	90 01 00 90 	stw     r0,144(r1)
	skb->next  = skb->prev = NULL;
   12d6c:	80 01 00 84 	lwz     r0,132(r1)
   12d70:	39 20 00 00 	li      r9,0
   12d74:	7c 0a 03 78 	mr      r10,r0
   12d78:	91 2a 00 04 	stw     r9,4(r10)
   12d7c:	80 01 00 84 	lwz     r0,132(r1)
   12d80:	7c 0b 03 78 	mr      r11,r0
   12d84:	81 2b 00 04 	lwz     r9,4(r11)
   12d88:	80 01 00 84 	lwz     r0,132(r1)
   12d8c:	7c 08 03 78 	mr      r8,r0
   12d90:	91 28 00 00 	stw     r9,0(r8)
	next->prev = prev;
   12d94:	80 01 00 8c 	lwz     r0,140(r1)
   12d98:	81 21 00 90 	lwz     r9,144(r1)
   12d9c:	7c 0a 03 78 	mr      r10,r0
   12da0:	91 2a 00 04 	stw     r9,4(r10)
	prev->next = next;
   12da4:	80 01 00 90 	lwz     r0,144(r1)
   12da8:	81 21 00 8c 	lwz     r9,140(r1)
   12dac:	7c 0b 03 78 	mr      r11,r0
   12db0:	91 2b 00 00 	stw     r9,0(r11)
			__skb_queue_tail(&newsk->sk_receive_queue, skb);
   12db4:	80 01 01 3c 	lwz     r0,316(r1)
   12db8:	30 00 00 3c 	addic   r0,r0,60
   12dbc:	90 01 00 94 	stw     r0,148(r1)
   12dc0:	80 01 00 08 	lwz     r0,8(r1)
   12dc4:	90 01 00 98 	stw     r0,152(r1)
   12dc8:	80 01 00 94 	lwz     r0,148(r1)
   12dcc:	90 01 00 9c 	stw     r0,156(r1)
   12dd0:	80 01 00 94 	lwz     r0,148(r1)
   12dd4:	90 01 00 a0 	stw     r0,160(r1)
   12dd8:	80 01 00 98 	lwz     r0,152(r1)
   12ddc:	90 01 00 a4 	stw     r0,164(r1)

static inline void __skb_queue_before(struct sk_buff_head *list,
				      struct sk_buff *next,
				      struct sk_buff *newsk)
{
	__skb_insert(newsk, next->prev, next, list);
   12de0:	80 01 00 a0 	lwz     r0,160(r1)
   12de4:	7c 08 03 78 	mr      r8,r0
   12de8:	80 08 00 04 	lwz     r0,4(r8)
   12dec:	81 21 00 a4 	lwz     r9,164(r1)
   12df0:	91 21 00 a8 	stw     r9,168(r1)
   12df4:	90 01 00 ac 	stw     r0,172(r1)
   12df8:	80 01 00 a0 	lwz     r0,160(r1)
   12dfc:	90 01 00 b0 	stw     r0,176(r1)
   12e00:	80 01 00 9c 	lwz     r0,156(r1)
   12e04:	90 01 00 b4 	stw     r0,180(r1)
extern void        skb_insert(struct sk_buff *old, struct sk_buff *newsk, struct sk_buff_head *list);
static inline void __skb_insert(struct sk_buff *newsk,
				struct sk_buff *prev, struct sk_buff *next,
				struct sk_buff_head *list)
{
	newsk->next = next;
   12e08:	80 01 00 a8 	lwz     r0,168(r1)
   12e0c:	81 21 00 b0 	lwz     r9,176(r1)
   12e10:	7c 0a 03 78 	mr      r10,r0
   12e14:	91 2a 00 00 	stw     r9,0(r10)
	newsk->prev = prev;
   12e18:	80 01 00 a8 	lwz     r0,168(r1)
   12e1c:	81 21 00 ac 	lwz     r9,172(r1)
   12e20:	7c 0b 03 78 	mr      r11,r0
   12e24:	91 2b 00 04 	stw     r9,4(r11)
	next->prev  = prev->next = newsk;
   12e28:	80 01 00 ac 	lwz     r0,172(r1)
   12e2c:	81 21 00 a8 	lwz     r9,168(r1)
   12e30:	7c 08 03 78 	mr      r8,r0
   12e34:	91 28 00 00 	stw     r9,0(r8)
   12e38:	80 01 00 ac 	lwz     r0,172(r1)
   12e3c:	7c 0a 03 78 	mr      r10,r0
   12e40:	81 2a 00 00 	lwz     r9,0(r10)
   12e44:	80 01 00 b0 	lwz     r0,176(r1)
   12e48:	7c 0b 03 78 	mr      r11,r0
   12e4c:	91 2b 00 04 	stw     r9,4(r11)
	list->qlen++;
   12e50:	80 01 00 b4 	lwz     r0,180(r1)
   12e54:	7c 08 03 78 	mr      r8,r0
   12e58:	80 08 00 08 	lwz     r0,8(r8)
   12e5c:	31 20 00 01 	addic   r9,r0,1
   12e60:	80 01 00 b4 	lwz     r0,180(r1)
   12e64:	7c 0a 03 78 	mr      r10,r0
   12e68:	91 2a 00 08 	stw     r9,8(r10)
			sctp_skb_set_owner_r_frag(skb, newsk);
   12e6c:	80 61 00 08 	lwz     r3,8(r1)
   12e70:	80 81 01 3c 	lwz     r4,316(r1)
   12e74:	4b ff f7 1d 	bl      12590 <sctp_skb_set_owner_r_frag>
				&oldsp->ep->base.bind_addr, GFP_KERNEL);

	/* Move any messages in the old socket's receive queue that are for the
	 * peeled off association to the new socket's receive queue.
	 */
	sctp_skb_for_each(skb, &oldsk->sk_receive_queue, tmp) {
   12e78:	80 01 00 0c 	lwz     r0,12(r1)
   12e7c:	90 01 00 08 	stw     r0,8(r1)
   12e80:	80 01 00 08 	lwz     r0,8(r1)
   12e84:	7c 0b 03 78 	mr      r11,r0
   12e88:	80 0b 00 00 	lwz     r0,0(r11)
   12e8c:	90 01 00 0c 	stw     r0,12(r1)
   12e90:	80 01 01 38 	lwz     r0,312(r1)
   12e94:	31 20 00 3c 	addic   r9,r0,60
   12e98:	80 01 00 08 	lwz     r0,8(r1)
   12e9c:	7f 89 00 00 	cmpw    cr7,r9,r0
   12ea0:	40 9e fe 50 	bne+    cr7,12cf0 <sctp_sock_migrate+0x2e0>
	 * delivery.   Three cases:
	 * 1) No partial deliver;  no work.
	 * 2) Peeling off partial delivery; keep pd_lobby in new pd_lobby.
	 * 3) Peeling off non-partial delivery; move pd_lobby to receive_queue.
	 */
	skb_queue_head_init(&newsp->pd_lobby);
   12ea4:	80 01 00 18 	lwz     r0,24(r1)
   12ea8:	30 00 02 f8 	addic   r0,r0,760
   12eac:	90 01 00 b8 	stw     r0,184(r1)
 * network layer or drivers should need annotation to consolidate the
 * main types of usage into 3 classes.
 */
static inline void skb_queue_head_init(struct sk_buff_head *list)
{
	spin_lock_init(&list->lock);
   12eb0:	80 01 00 b8 	lwz     r0,184(r1)
   12eb4:	30 00 00 0c 	addic   r0,r0,12
   12eb8:	90 01 00 bc 	stw     r0,188(r1)
 * Map the spin_lock functions to the raw variants for PREEMPT_RT=n
 */

static inline raw_spinlock_t *spinlock_check(spinlock_t *lock)
{
	return &lock->rlock;
   12ebc:	80 01 00 b8 	lwz     r0,184(r1)
   12ec0:	90 01 00 c0 	stw     r0,192(r1)
 *	the spinlock.  It can also be used for on-stack sk_buff_head
 *	objects where the spinlock is known to not be used.
 */
static inline void __skb_queue_head_init(struct sk_buff_head *list)
{
	list->prev = list->next = (struct sk_buff *)list;
   12ec4:	80 01 00 c0 	lwz     r0,192(r1)
   12ec8:	81 21 00 c0 	lwz     r9,192(r1)
   12ecc:	7c 08 03 78 	mr      r8,r0
   12ed0:	91 28 00 00 	stw     r9,0(r8)
   12ed4:	80 01 00 c0 	lwz     r0,192(r1)
   12ed8:	7c 0a 03 78 	mr      r10,r0
   12edc:	81 2a 00 00 	lwz     r9,0(r10)
   12ee0:	80 01 00 c0 	lwz     r0,192(r1)
   12ee4:	7c 0b 03 78 	mr      r11,r0
   12ee8:	91 2b 00 04 	stw     r9,4(r11)
	list->qlen = 0;
   12eec:	80 01 00 c0 	lwz     r0,192(r1)
   12ef0:	39 20 00 00 	li      r9,0
   12ef4:	7c 08 03 78 	mr      r8,r0
   12ef8:	91 28 00 08 	stw     r9,8(r8)
   12efc:	80 01 01 3c 	lwz     r0,316(r1)
   12f00:	90 01 00 c4 	stw     r0,196(r1)
   12f04:	80 01 00 c4 	lwz     r0,196(r1)
	atomic_set(&sctp_sk(newsk)->pd_mode, assoc->ulpq.pd_mode);
   12f08:	31 20 02 f4 	addic   r9,r0,756
   12f0c:	80 01 01 40 	lwz     r0,320(r1)
   12f10:	7c 0a 03 78 	mr      r10,r0
   12f14:	88 0a 03 e9 	lbz     r0,1001(r10)
   12f18:	54 00 06 3e 	clrlwi  r0,r0,24
   12f1c:	91 21 00 c8 	stw     r9,200(r1)
   12f20:	90 01 00 cc 	stw     r0,204(r1)
	return t;
}

static __inline__ void atomic_set(atomic_t *v, int i)
{
	__asm__ __volatile__("stw%U0%X0 %1,%0" : "=m"(v->counter) : "r"(i));
   12f24:	80 01 00 c8 	lwz     r0,200(r1)
   12f28:	81 21 00 cc 	lwz     r9,204(r1)
   12f2c:	7c 0b 03 78 	mr      r11,r0
   12f30:	91 2b 00 00 	stw     r9,0(r11)
   12f34:	80 01 01 38 	lwz     r0,312(r1)
   12f38:	90 01 00 d0 	stw     r0,208(r1)
   12f3c:	80 01 00 d0 	lwz     r0,208(r1)

	if (atomic_read(&sctp_sk(oldsk)->pd_mode)) {
   12f40:	30 00 02 f4 	addic   r0,r0,756
   12f44:	90 01 00 d4 	stw     r0,212(r1)

static __inline__ int atomic_read(const atomic_t *v)
{
	int t;

	__asm__ __volatile__("lwz%U1%X1 %0,%1" : "=r"(t) : "m"(v->counter));
   12f48:	80 01 00 d4 	lwz     r0,212(r1)
   12f4c:	7c 08 03 78 	mr      r8,r0
   12f50:	83 e8 00 00 	lwz     r31,0(r8)
   12f54:	93 e1 00 d8 	stw     r31,216(r1)

	return t;
   12f58:	80 01 00 d8 	lwz     r0,216(r1)
   12f5c:	2f 80 00 00 	cmpwi   cr7,r0,0
   12f60:	41 9e 02 30 	beq-    cr7,13190 <sctp_sock_migrate+0x780>
		struct sk_buff_head *queue;

		/* Decide which queue to move pd_lobby skbs to. */
		if (assoc->ulpq.pd_mode) {
   12f64:	80 01 01 40 	lwz     r0,320(r1)
   12f68:	7c 09 03 78 	mr      r9,r0
   12f6c:	88 09 03 e9 	lbz     r0,1001(r9)
   12f70:	54 00 06 3e 	clrlwi  r0,r0,24
   12f74:	2f 80 00 00 	cmpwi   cr7,r0,0
   12f78:	41 9e 00 14 	beq-    cr7,12f8c <sctp_sock_migrate+0x57c>
			queue = &newsp->pd_lobby;
   12f7c:	80 01 00 18 	lwz     r0,24(r1)
   12f80:	30 00 02 f8 	addic   r0,r0,760
   12f84:	90 01 00 10 	stw     r0,16(r1)
   12f88:	48 00 00 10 	b       12f98 <sctp_sock_migrate+0x588>
		} else
			queue = &newsk->sk_receive_queue;
   12f8c:	80 01 01 3c 	lwz     r0,316(r1)
   12f90:	30 00 00 3c 	addic   r0,r0,60
   12f94:	90 01 00 10 	stw     r0,16(r1)

		/* Walk through the pd_lobby, looking for skbs that
		 * need moved to the new socket.
		 */
		sctp_skb_for_each(skb, &oldsp->pd_lobby, tmp) {
   12f98:	80 01 00 14 	lwz     r0,20(r1)
   12f9c:	7c 0a 03 78 	mr      r10,r0
   12fa0:	80 0a 02 f8 	lwz     r0,760(r10)
   12fa4:	90 01 00 08 	stw     r0,8(r1)
   12fa8:	80 01 00 08 	lwz     r0,8(r1)
   12fac:	7c 0b 03 78 	mr      r11,r0
   12fb0:	80 0b 00 00 	lwz     r0,0(r11)
   12fb4:	90 01 00 0c 	stw     r0,12(r1)
   12fb8:	48 00 01 a0 	b       13158 <sctp_sock_migrate+0x748>
   12fbc:	80 01 00 08 	lwz     r0,8(r1)
   12fc0:	90 01 00 dc 	stw     r0,220(r1)
   12fc4:	80 01 00 dc 	lwz     r0,220(r1)
   12fc8:	30 00 00 18 	addic   r0,r0,24
			event = sctp_skb2event(skb);
   12fcc:	90 01 00 28 	stw     r0,40(r1)
			if (event->asoc == assoc) {
   12fd0:	80 01 00 28 	lwz     r0,40(r1)
   12fd4:	7c 08 03 78 	mr      r8,r0
   12fd8:	81 28 00 00 	lwz     r9,0(r8)
   12fdc:	80 01 01 40 	lwz     r0,320(r1)
   12fe0:	7f 89 00 00 	cmpw    cr7,r9,r0
   12fe4:	40 9e 01 5c 	bne-    cr7,13140 <sctp_sock_migrate+0x730>
				__skb_unlink(skb, &oldsp->pd_lobby);
   12fe8:	80 01 00 14 	lwz     r0,20(r1)
   12fec:	30 00 02 f8 	addic   r0,r0,760
   12ff0:	81 21 00 08 	lwz     r9,8(r1)
   12ff4:	91 21 00 e0 	stw     r9,224(r1)
   12ff8:	90 01 00 e4 	stw     r0,228(r1)
extern void	   skb_unlink(struct sk_buff *skb, struct sk_buff_head *list);
static inline void __skb_unlink(struct sk_buff *skb, struct sk_buff_head *list)
{
	struct sk_buff *next, *prev;

	list->qlen--;
   12ffc:	80 01 00 e4 	lwz     r0,228(r1)
   13000:	7c 09 03 78 	mr      r9,r0
   13004:	80 09 00 08 	lwz     r0,8(r9)
   13008:	31 20 ff ff 	addic   r9,r0,-1
   1300c:	80 01 00 e4 	lwz     r0,228(r1)
   13010:	7c 0a 03 78 	mr      r10,r0
   13014:	91 2a 00 08 	stw     r9,8(r10)
	next	   = skb->next;
   13018:	80 01 00 e0 	lwz     r0,224(r1)
   1301c:	7c 0b 03 78 	mr      r11,r0
   13020:	80 0b 00 00 	lwz     r0,0(r11)
   13024:	90 01 00 e8 	stw     r0,232(r1)
	prev	   = skb->prev;
   13028:	80 01 00 e0 	lwz     r0,224(r1)
   1302c:	7c 08 03 78 	mr      r8,r0
   13030:	80 08 00 04 	lwz     r0,4(r8)
   13034:	90 01 00 ec 	stw     r0,236(r1)
	skb->next  = skb->prev = NULL;
   13038:	80 01 00 e0 	lwz     r0,224(r1)
   1303c:	39 20 00 00 	li      r9,0
   13040:	7c 0a 03 78 	mr      r10,r0
   13044:	91 2a 00 04 	stw     r9,4(r10)
   13048:	80 01 00 e0 	lwz     r0,224(r1)
   1304c:	7c 0b 03 78 	mr      r11,r0
   13050:	81 2b 00 04 	lwz     r9,4(r11)
   13054:	80 01 00 e0 	lwz     r0,224(r1)
   13058:	7c 08 03 78 	mr      r8,r0
   1305c:	91 28 00 00 	stw     r9,0(r8)
	next->prev = prev;
   13060:	80 01 00 e8 	lwz     r0,232(r1)
   13064:	81 21 00 ec 	lwz     r9,236(r1)
   13068:	7c 0a 03 78 	mr      r10,r0
   1306c:	91 2a 00 04 	stw     r9,4(r10)
	prev->next = next;
   13070:	80 01 00 ec 	lwz     r0,236(r1)
   13074:	81 21 00 e8 	lwz     r9,232(r1)
   13078:	7c 0b 03 78 	mr      r11,r0
   1307c:	91 2b 00 00 	stw     r9,0(r11)
   13080:	80 01 00 10 	lwz     r0,16(r1)
   13084:	90 01 00 f0 	stw     r0,240(r1)
   13088:	80 01 00 08 	lwz     r0,8(r1)
   1308c:	90 01 00 f4 	stw     r0,244(r1)
   13090:	80 01 00 f0 	lwz     r0,240(r1)
   13094:	90 01 00 f8 	stw     r0,248(r1)
   13098:	80 01 00 f0 	lwz     r0,240(r1)
   1309c:	90 01 00 fc 	stw     r0,252(r1)
   130a0:	80 01 00 f4 	lwz     r0,244(r1)
   130a4:	90 01 01 00 	stw     r0,256(r1)

static inline void __skb_queue_before(struct sk_buff_head *list,
				      struct sk_buff *next,
				      struct sk_buff *newsk)
{
	__skb_insert(newsk, next->prev, next, list);
   130a8:	80 01 00 fc 	lwz     r0,252(r1)
   130ac:	7c 08 03 78 	mr      r8,r0
   130b0:	80 08 00 04 	lwz     r0,4(r8)
   130b4:	81 21 01 00 	lwz     r9,256(r1)
   130b8:	91 21 01 04 	stw     r9,260(r1)
   130bc:	90 01 01 08 	stw     r0,264(r1)
   130c0:	80 01 00 fc 	lwz     r0,252(r1)
   130c4:	90 01 01 0c 	stw     r0,268(r1)
   130c8:	80 01 00 f8 	lwz     r0,248(r1)
   130cc:	90 01 01 10 	stw     r0,272(r1)
extern void        skb_insert(struct sk_buff *old, struct sk_buff *newsk, struct sk_buff_head *list);
static inline void __skb_insert(struct sk_buff *newsk,
				struct sk_buff *prev, struct sk_buff *next,
				struct sk_buff_head *list)
{
	newsk->next = next;
   130d0:	80 01 01 04 	lwz     r0,260(r1)
   130d4:	81 21 01 0c 	lwz     r9,268(r1)
   130d8:	7c 0a 03 78 	mr      r10,r0
   130dc:	91 2a 00 00 	stw     r9,0(r10)
	newsk->prev = prev;
   130e0:	80 01 01 04 	lwz     r0,260(r1)
   130e4:	81 21 01 08 	lwz     r9,264(r1)
   130e8:	7c 0b 03 78 	mr      r11,r0
   130ec:	91 2b 00 04 	stw     r9,4(r11)
	next->prev  = prev->next = newsk;
   130f0:	80 01 01 08 	lwz     r0,264(r1)
   130f4:	81 21 01 04 	lwz     r9,260(r1)
   130f8:	7c 08 03 78 	mr      r8,r0
   130fc:	91 28 00 00 	stw     r9,0(r8)
   13100:	80 01 01 08 	lwz     r0,264(r1)
   13104:	7c 0a 03 78 	mr      r10,r0
   13108:	81 2a 00 00 	lwz     r9,0(r10)
   1310c:	80 01 01 0c 	lwz     r0,268(r1)
   13110:	7c 0b 03 78 	mr      r11,r0
   13114:	91 2b 00 04 	stw     r9,4(r11)
	list->qlen++;
   13118:	80 01 01 10 	lwz     r0,272(r1)
   1311c:	7c 08 03 78 	mr      r8,r0
   13120:	80 08 00 08 	lwz     r0,8(r8)
   13124:	31 20 00 01 	addic   r9,r0,1
   13128:	80 01 01 10 	lwz     r0,272(r1)
   1312c:	7c 0a 03 78 	mr      r10,r0
   13130:	91 2a 00 08 	stw     r9,8(r10)
				__skb_queue_tail(queue, skb);
				sctp_skb_set_owner_r_frag(skb, newsk);
   13134:	80 61 00 08 	lwz     r3,8(r1)
   13138:	80 81 01 3c 	lwz     r4,316(r1)
   1313c:	4b ff f4 55 	bl      12590 <sctp_skb_set_owner_r_frag>
			queue = &newsk->sk_receive_queue;

		/* Walk through the pd_lobby, looking for skbs that
		 * need moved to the new socket.
		 */
		sctp_skb_for_each(skb, &oldsp->pd_lobby, tmp) {
   13140:	80 01 00 0c 	lwz     r0,12(r1)
   13144:	90 01 00 08 	stw     r0,8(r1)
   13148:	80 01 00 08 	lwz     r0,8(r1)
   1314c:	7c 0b 03 78 	mr      r11,r0
   13150:	80 0b 00 00 	lwz     r0,0(r11)
   13154:	90 01 00 0c 	stw     r0,12(r1)
   13158:	80 01 00 14 	lwz     r0,20(r1)
   1315c:	31 20 02 f8 	addic   r9,r0,760
   13160:	80 01 00 08 	lwz     r0,8(r1)
   13164:	7f 89 00 00 	cmpw    cr7,r9,r0
   13168:	40 9e fe 54 	bne+    cr7,12fbc <sctp_sock_migrate+0x5ac>
		}

		/* Clear up any skbs waiting for the partial
		 * delivery to finish.
		 */
		if (assoc->ulpq.pd_mode)
   1316c:	80 01 01 40 	lwz     r0,320(r1)
   13170:	7c 08 03 78 	mr      r8,r0
   13174:	88 08 03 e9 	lbz     r0,1001(r8)
   13178:	54 00 06 3e 	clrlwi  r0,r0,24
   1317c:	2f 80 00 00 	cmpwi   cr7,r0,0
   13180:	41 9e 00 10 	beq-    cr7,13190 <sctp_sock_migrate+0x780>
			sctp_clear_pd(oldsk, NULL);
   13184:	80 61 01 38 	lwz     r3,312(r1)
   13188:	38 80 00 00 	li      r4,0
   1318c:	48 00 00 01 	bl      1318c <sctp_sock_migrate+0x77c>

	}

	sctp_skb_for_each(skb, &assoc->ulpq.reasm, tmp)
   13190:	80 01 01 40 	lwz     r0,320(r1)
   13194:	7c 09 03 78 	mr      r9,r0
   13198:	80 09 03 f0 	lwz     r0,1008(r9)
   1319c:	90 01 00 08 	stw     r0,8(r1)
   131a0:	80 01 00 08 	lwz     r0,8(r1)
   131a4:	7c 0a 03 78 	mr      r10,r0
   131a8:	80 0a 00 00 	lwz     r0,0(r10)
   131ac:	90 01 00 0c 	stw     r0,12(r1)
   131b0:	48 00 00 28 	b       131d8 <sctp_sock_migrate+0x7c8>
		sctp_skb_set_owner_r_frag(skb, newsk);
   131b4:	80 61 00 08 	lwz     r3,8(r1)
   131b8:	80 81 01 3c 	lwz     r4,316(r1)
   131bc:	4b ff f3 d5 	bl      12590 <sctp_skb_set_owner_r_frag>
		if (assoc->ulpq.pd_mode)
			sctp_clear_pd(oldsk, NULL);

	}

	sctp_skb_for_each(skb, &assoc->ulpq.reasm, tmp)
   131c0:	80 01 00 0c 	lwz     r0,12(r1)
   131c4:	90 01 00 08 	stw     r0,8(r1)
   131c8:	80 01 00 08 	lwz     r0,8(r1)
   131cc:	7c 0b 03 78 	mr      r11,r0
   131d0:	80 0b 00 00 	lwz     r0,0(r11)
   131d4:	90 01 00 0c 	stw     r0,12(r1)
   131d8:	80 01 01 40 	lwz     r0,320(r1)
   131dc:	31 20 03 f0 	addic   r9,r0,1008
   131e0:	80 01 00 08 	lwz     r0,8(r1)
   131e4:	7f 89 00 00 	cmpw    cr7,r9,r0
   131e8:	40 9e ff cc 	bne+    cr7,131b4 <sctp_sock_migrate+0x7a4>
		sctp_skb_set_owner_r_frag(skb, newsk);

	sctp_skb_for_each(skb, &assoc->ulpq.lobby, tmp)
   131ec:	80 01 01 40 	lwz     r0,320(r1)
   131f0:	7c 08 03 78 	mr      r8,r0
   131f4:	80 08 03 fc 	lwz     r0,1020(r8)
   131f8:	90 01 00 08 	stw     r0,8(r1)
   131fc:	80 01 00 08 	lwz     r0,8(r1)
   13200:	7c 09 03 78 	mr      r9,r0
   13204:	80 09 00 00 	lwz     r0,0(r9)
   13208:	90 01 00 0c 	stw     r0,12(r1)
   1320c:	48 00 00 28 	b       13234 <sctp_sock_migrate+0x824>
		sctp_skb_set_owner_r_frag(skb, newsk);
   13210:	80 61 00 08 	lwz     r3,8(r1)
   13214:	80 81 01 3c 	lwz     r4,316(r1)
   13218:	4b ff f3 79 	bl      12590 <sctp_skb_set_owner_r_frag>
	}

	sctp_skb_for_each(skb, &assoc->ulpq.reasm, tmp)
		sctp_skb_set_owner_r_frag(skb, newsk);

	sctp_skb_for_each(skb, &assoc->ulpq.lobby, tmp)
   1321c:	80 01 00 0c 	lwz     r0,12(r1)
   13220:	90 01 00 08 	stw     r0,8(r1)
   13224:	80 01 00 08 	lwz     r0,8(r1)
   13228:	7c 0a 03 78 	mr      r10,r0
   1322c:	80 0a 00 00 	lwz     r0,0(r10)
   13230:	90 01 00 0c 	stw     r0,12(r1)
   13234:	80 01 01 40 	lwz     r0,320(r1)
   13238:	31 20 03 fc 	addic   r9,r0,1020
   1323c:	80 01 00 08 	lwz     r0,8(r1)
   13240:	7f 89 00 00 	cmpw    cr7,r9,r0
   13244:	40 9e ff cc 	bne+    cr7,13210 <sctp_sock_migrate+0x800>

	/* Set the type of socket to indicate that it is peeled off from the
	 * original UDP-style socket or created with the accept() call on a
	 * TCP-style socket..
	 */
	newsp->type = type;
   13248:	80 01 00 18 	lwz     r0,24(r1)
   1324c:	81 21 01 44 	lwz     r9,324(r1)
   13250:	7c 0b 03 78 	mr      r11,r0
   13254:	91 2b 01 c8 	stw     r9,456(r11)
	 * on the new socket.
	 *
	 * The caller has just allocated newsk so we can guarantee that other
	 * paths won't try to lock it and then oldsk.
	 */
	lock_sock_nested(newsk, SINGLE_DEPTH_NESTING);
   13258:	80 61 01 3c 	lwz     r3,316(r1)
   1325c:	38 80 00 01 	li      r4,1
   13260:	48 00 00 01 	bl      13260 <sctp_sock_migrate+0x850>
	sctp_assoc_migrate(assoc, newsk);
   13264:	80 61 01 40 	lwz     r3,320(r1)
   13268:	80 81 01 3c 	lwz     r4,316(r1)
   1326c:	48 00 00 01 	bl      1326c <sctp_sock_migrate+0x85c>
   13270:	80 01 01 40 	lwz     r0,320(r1)
   13274:	90 01 01 14 	stw     r0,276(r1)
   13278:	38 00 00 01 	li      r0,1
   1327c:	90 01 01 18 	stw     r0,280(r1)
/* Is the association in this state? */
#define sctp_state(asoc, state) __sctp_state((asoc), (SCTP_STATE_##state))
static inline int __sctp_state(const struct sctp_association *asoc,
			       sctp_state_t state)
{
	return asoc->state == state;
   13280:	80 01 01 14 	lwz     r0,276(r1)
   13284:	7c 08 03 78 	mr      r8,r0
   13288:	80 08 01 b8 	lwz     r0,440(r8)
   1328c:	81 21 01 18 	lwz     r9,280(r1)
   13290:	7f 89 00 00 	cmpw    cr7,r9,r0
   13294:	7c 00 00 26 	mfcr    r0
   13298:	54 00 ff fe 	rlwinm  r0,r0,31,31,31

	/* If the association on the newsk is already closed before accept()
	 * is called, set RCV_SHUTDOWN flag.
	 */
	if (sctp_state(assoc, CLOSED) && sctp_style(newsk, TCP))
   1329c:	2f 80 00 00 	cmpwi   cr7,r0,0
   132a0:	41 9e 00 74 	beq-    cr7,13314 <sctp_sock_migrate+0x904>
   132a4:	80 01 01 3c 	lwz     r0,316(r1)
   132a8:	90 01 01 1c 	stw     r0,284(r1)
   132ac:	38 00 00 02 	li      r0,2
   132b0:	90 01 01 20 	stw     r0,288(r1)
   132b4:	80 01 01 1c 	lwz     r0,284(r1)
   132b8:	90 01 01 24 	stw     r0,292(r1)
   132bc:	80 01 01 24 	lwz     r0,292(r1)

/* Is a socket of this style? */
#define sctp_style(sk, style) __sctp_style((sk), (SCTP_SOCKET_##style))
static inline int __sctp_style(const struct sock *sk, sctp_socket_type_t style)
{
	return sctp_sk(sk)->type == style;
   132c0:	7c 09 03 78 	mr      r9,r0
   132c4:	80 09 01 c8 	lwz     r0,456(r9)
   132c8:	81 21 01 20 	lwz     r9,288(r1)
   132cc:	7f 89 00 00 	cmpw    cr7,r9,r0
   132d0:	7c 00 00 26 	mfcr    r0
   132d4:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
   132d8:	2f 80 00 00 	cmpwi   cr7,r0,0
   132dc:	41 9e 00 38 	beq-    cr7,13314 <sctp_sock_migrate+0x904>
		newsk->sk_shutdown |= RCV_SHUTDOWN;
   132e0:	80 01 01 3c 	lwz     r0,316(r1)
   132e4:	7c 0a 03 78 	mr      r10,r0
   132e8:	80 0a 00 94 	lwz     r0,148(r10)
   132ec:	54 00 17 be 	rlwinm  r0,r0,2,30,31
   132f0:	54 00 06 3e 	clrlwi  r0,r0,24
   132f4:	60 00 00 01 	ori     r0,r0,1
   132f8:	54 00 06 3e 	clrlwi  r0,r0,24
   132fc:	54 00 07 be 	clrlwi  r0,r0,30
   13300:	54 0b 06 3e 	clrlwi  r11,r0,24
   13304:	81 21 01 3c 	lwz     r9,316(r1)
   13308:	80 09 00 94 	lwz     r0,148(r9)
   1330c:	51 60 f0 02 	rlwimi  r0,r11,30,0,1
   13310:	90 09 00 94 	stw     r0,148(r9)

	newsk->sk_state = SCTP_SS_ESTABLISHED;
   13314:	80 01 01 3c 	lwz     r0,316(r1)
   13318:	39 20 00 01 	li      r9,1
   1331c:	7c 0b 03 78 	mr      r11,r0
   13320:	99 2b 00 0e 	stb     r9,14(r11)
	sctp_release_sock(newsk);
   13324:	80 61 01 3c 	lwz     r3,316(r1)
   13328:	48 00 00 01 	bl      13328 <sctp_sock_migrate+0x918>
}
   1332c:	80 01 01 54 	lwz     r0,340(r1)
   13330:	7c 08 03 a6 	mtlr    r0
   13334:	83 e1 01 4c 	lwz     r31,332(r1)
   13338:	38 21 01 50 	addi    r1,r1,336
   1333c:	4e 80 00 20 	blr

Disassembly of section .fixup:

00000000 <.fixup>:
   0:	3b e0 ff f2 	li      r31,-14
   4:	48 00 22 64 	b       2268 <sctp_getsockopt_connectx3+0x2ec>
   8:	3b e0 ff f2 	li      r31,-14
   c:	3b c0 00 00 	li      r30,0
  10:	48 00 3e f4 	b       3f04 <sctp_setsockopt_disable_fragments+0xb4>
  14:	3b e0 ff f2 	li      r31,-14
  18:	3b c0 00 00 	li      r30,0
  1c:	48 00 58 e8 	b       5904 <sctp_setsockopt_nodelay+0xc0>
  20:	3b e0 ff f2 	li      r31,-14
  24:	3b c0 00 00 	li      r30,0
  28:	48 00 60 0c 	b       6034 <sctp_setsockopt_mappedv4+0xdc>
  2c:	3b e0 ff f2 	li      r31,-14
  30:	3b c0 00 00 	li      r30,0
  34:	48 00 6b a8 	b       6bdc <sctp_setsockopt_fragment_interleave+0xd8>
  38:	3b e0 ff f2 	li      r31,-14
  3c:	3b c0 00 00 	li      r30,0
  40:	48 00 6c b4 	b       6cf4 <sctp_setsockopt_partial_delivery_point+0xe4>
  44:	3b e0 ff f2 	li      r31,-14
  48:	48 00 82 44 	b       828c <sctp_init_sock>
  4c:	3b e0 ff f2 	li      r31,-14
  50:	48 00 8c f8 	b       8d48 <sctp_getsockopt_sctp_status+0x42c>
  54:	3b e0 ff f2 	li      r31,-14
  58:	48 00 90 c8 	b       9120 <sctp_getsockopt_peer_addr_info+0x2f0>
  5c:	3b e0 ff f2 	li      r31,-14
  60:	48 00 92 d8 	b       9338 <sctp_getsockopt_disable_fragments+0x138>
  64:	3b e0 ff f2 	li      r31,-14
  68:	48 00 94 b8 	b       9520 <sctp_getsockopt_events+0x118>
  6c:	3b e0 ff f2 	li      r31,-14
  70:	48 00 96 e8 	b       9758 <sctp_getsockopt_autoclose+0x164>
  74:	3b e0 ff f2 	li      r31,-14
  78:	48 00 9b b0 	b       9c28 <sctp_getsockopt_peeloff+0x2ac>
  7c:	3b e0 ff f2 	li      r31,-14
  80:	48 00 a1 b8 	b       a238 <sctp_getsockopt_delayed_ack+0x48>
  84:	3b e0 ff f2 	li      r31,-14
  88:	48 00 a6 e8 	b       a770 <sctp_getsockopt_initmsg+0x50>
  8c:	3b e0 ff f2 	li      r31,-14
  90:	48 00 a7 d0 	b       a860 <sctp_getsockopt_initmsg+0x140>
  94:	3b e0 ff f2 	li      r31,-14
  98:	48 00 ad 6c 	b       ae04 <sctp_getsockopt_peer_addrs+0x4f8>
  9c:	3b e0 ff f2 	li      r31,-14
  a0:	48 00 ae 08 	b       aea8 <sctp_copy_laddrs+0x68>
  a4:	3b e0 ff f2 	li      r31,-14
  a8:	48 00 b7 c4 	b       b86c <sctp_getsockopt_local_addrs+0x6a4>
  ac:	3b e0 ff f2 	li      r31,-14
  b0:	48 00 b8 54 	b       b904 <sctp_getsockopt_primary_addr+0x70>
  b4:	3b e0 ff f2 	li      r31,-14
  b8:	48 00 bb 10 	b       bbc8 <sctp_getsockopt_primary_addr+0x334>
  bc:	3b e0 ff f2 	li      r31,-14
  c0:	48 00 bd 08 	b       bdc8 <sctp_getsockopt_adaptation_layer+0x188>
  c4:	3b e0 ff f2 	li      r31,-14
  c8:	48 00 c1 20 	b       c1e8 <sctp_getsockopt_default_send_param+0x3b0>
  cc:	3b e0 ff f2 	li      r31,-14
  d0:	48 00 c3 28 	b       c3f8 <sctp_getsockopt_nodelay+0x1a8>
  d4:	3b e0 ff f2 	li      r31,-14
  d8:	48 00 c7 14 	b       c7ec <sctp_getsockopt_rtoinfo+0x394>
  dc:	3b e0 ff f2 	li      r31,-14
  e0:	48 00 cb cc 	b       ccac <sctp_getsockopt_associnfo+0x468>
  e4:	3b e0 ff f2 	li      r31,-14
  e8:	48 00 cd d0 	b       ceb8 <sctp_getsockopt_mappedv4+0x1bc>
  ec:	3b e0 ff f2 	li      r31,-14
  f0:	48 00 d1 10 	b       d200 <sctp_getsockopt_context+0x300>
  f4:	3b e0 ff f2 	li      r31,-14
  f8:	48 00 d4 c0 	b       d5b8 <sctp_getsockopt_maxseg+0x378>
  fc:	3b e0 ff f2 	li      r31,-14
 100:	48 00 d7 c4 	b       d8c4 <sctp_getsockopt_fragment_interleave+0x1cc>
 104:	3b e0 ff f2 	li      r31,-14
 108:	48 00 d9 bc 	b       dac4 <sctp_getsockopt_partial_delivery_point+0x1d0>
 10c:	3b e0 ff f2 	li      r31,-14
 110:	48 00 e0 0c 	b       e11c <sctp_getsockopt_hmac_ident+0x250>
 114:	3b e0 ff f2 	li      r31,-14
 118:	48 00 e0 9c 	b       e1b4 <sctp_getsockopt_hmac_ident+0x2e8>
 11c:	3b e0 ff f2 	li      r31,-14
 120:	48 00 e4 58 	b       e578 <sctp_getsockopt_active_key+0x3a0>
 124:	3b e0 ff f2 	li      r31,-14
 128:	48 00 e8 e4 	b       ea0c <sctp_getsockopt_local_auth_chunks+0x5c>
 12c:	3b e0 ff f2 	li      r31,-14
 130:	48 00 e9 78 	b       eaa8 <sctp_getsockopt_local_auth_chunks+0xf8>
 134:	3b e0 ff f2 	li      r31,-14
 138:	48 00 ed 84 	b       eebc <sctp_getsockopt_assoc_number+0x6c>
 13c:	3b e0 ff f2 	li      r31,-14
 140:	48 00 ee 18 	b       ef58 <sctp_getsockopt_assoc_number+0x108>
 144:	3b e0 ff f2 	li      r31,-14
 148:	48 00 ef f4 	b       f13c <sctp_getsockopt+0x18>
 14c:	3b e0 ff f2 	li      r31,-14
 150:	3b c0 00 00 	li      r30,0
 154:	48 00 f2 2c 	b       f380 <sctp_getsockopt+0x25c>
