
/home/bombe/target-project/powerpc-module/kernel/linux-2.6.38/net/sunrpc/auth_gss/auth_rpcgss.o:     file format elf32-powerpc


Disassembly of section .text:

00000000 <gss_cred_set_ctx>:
 * to set the gss context. The actual exchange of an old context
 * and a new one is protected by the inode->i_lock.
 */
static void
gss_cred_set_ctx(struct rpc_cred *cred, struct gss_cl_ctx *ctx)
{
       0:	94 21 ff 90 	stwu    r1,-112(r1)
       4:	93 e1 00 6c 	stw     r31,108(r1)
       8:	90 61 00 58 	stw     r3,88(r1)
       c:	90 81 00 5c 	stw     r4,92(r1)
	struct gss_cred *gss_cred = container_of(cred, struct gss_cred, gc_base);
      10:	80 01 00 58 	lwz     r0,88(r1)
      14:	90 01 00 08 	stw     r0,8(r1)
      18:	80 01 00 08 	lwz     r0,8(r1)
      1c:	90 01 00 0c 	stw     r0,12(r1)

	if (!test_bit(RPCAUTH_CRED_NEW, &cred->cr_flags))
      20:	80 01 00 58 	lwz     r0,88(r1)
      24:	30 00 00 28 	addic   r0,r0,40
      28:	39 20 00 00 	li      r9,0
      2c:	91 21 00 10 	stw     r9,16(r1)
      30:	90 01 00 14 	stw     r0,20(r1)
 * @nr: bit number to test
 * @addr: Address to start counting from
 */
static inline int test_bit(int nr, const volatile unsigned long *addr)
{
	return 1UL & (addr[BIT_WORD(nr)] >> (nr & (BITS_PER_LONG-1)));
      34:	80 01 00 10 	lwz     r0,16(r1)
      38:	7c 00 2e 70 	srawi   r0,r0,5
      3c:	7c 00 01 94 	addze   r0,r0
      40:	54 00 10 3a 	rlwinm  r0,r0,2,0,29
      44:	81 21 00 14 	lwz     r9,20(r1)
      48:	7c 09 02 14 	add     r0,r9,r0
      4c:	7c 0b 03 78 	mr      r11,r0
      50:	81 2b 00 00 	lwz     r9,0(r11)
      54:	80 01 00 10 	lwz     r0,16(r1)
      58:	54 00 06 fe 	clrlwi  r0,r0,27
      5c:	7d 20 04 30 	srw     r0,r9,r0
      60:	54 00 07 fe 	clrlwi  r0,r0,31
      64:	2f 80 00 00 	cmpwi   cr7,r0,0
      68:	41 9e 01 40 	beq-    cr7,1a8 <gss_cred_set_ctx+0x1a8>
		return;
      6c:	80 01 00 5c 	lwz     r0,92(r1)
      70:	90 01 00 18 	stw     r0,24(r1)
static const struct rpc_pipe_ops gss_upcall_ops_v1;

static inline struct gss_cl_ctx *
gss_get_ctx(struct gss_cl_ctx *ctx)
{
	atomic_inc(&ctx->count);
      74:	80 01 00 18 	lwz     r0,24(r1)
      78:	90 01 00 1c 	stw     r0,28(r1)
	addic	%0,%0,1\n"
	PPC405_ERR77(0,%2)
"	stwcx.	%0,0,%2 \n\
	bne-	1b"
	: "=&r" (t), "+m" (v->counter)
	: "r" (&v->counter)
      7c:	80 01 00 1c 	lwz     r0,28(r1)
"1:	lwarx	%0,0,%2		# atomic_inc\n\
	addic	%0,%0,1\n"
	PPC405_ERR77(0,%2)
"	stwcx.	%0,0,%2 \n\
	bne-	1b"
	: "=&r" (t), "+m" (v->counter)
      80:	81 61 00 1c 	lwz     r11,28(r1)
      84:	81 21 00 1c 	lwz     r9,28(r1)

static __inline__ void atomic_inc(atomic_t *v)
{
	int t;

	__asm__ __volatile__(
      88:	7f e0 00 28 	lwarx   r31,0,r0
      8c:	33 ff 00 01 	addic   r31,r31,1
      90:	7f e0 01 2d 	stwcx.  r31,0,r0
      94:	40 a2 ff f4 	bne-    88 <gss_cred_set_ctx+0x88>
      98:	93 e1 00 20 	stw     r31,32(r1)
	struct gss_cred *gss_cred = container_of(cred, struct gss_cred, gc_base);

	if (!test_bit(RPCAUTH_CRED_NEW, &cred->cr_flags))
		return;
	gss_get_ctx(ctx);
	rcu_assign_pointer(gss_cred->gc_ctx, ctx);
      9c:	80 01 00 0c 	lwz     r0,12(r1)
      a0:	81 21 00 5c 	lwz     r9,92(r1)
      a4:	7c 0b 03 78 	mr      r11,r0
      a8:	91 2b 00 38 	stw     r9,56(r11)
	set_bit(RPCAUTH_CRED_UPTODATE, &cred->cr_flags);
      ac:	80 01 00 58 	lwz     r0,88(r1)
      b0:	30 00 00 28 	addic   r0,r0,40
      b4:	39 20 00 01 	li      r9,1
      b8:	91 21 00 24 	stw     r9,36(r1)
      bc:	90 01 00 28 	stw     r0,40(r1)
DEFINE_BITOP(clear_bits_unlock, andc, PPC_RELEASE_BARRIER, "")
DEFINE_BITOP(change_bits, xor, "", "")

static __inline__ void set_bit(int nr, volatile unsigned long *addr)
{
	set_bits(BITOP_MASK(nr), addr + BITOP_WORD(nr));
      c0:	80 01 00 24 	lwz     r0,36(r1)
      c4:	7c 09 2e 70 	srawi   r9,r0,5
      c8:	7d 29 01 94 	addze   r9,r9
      cc:	55 29 28 34 	rlwinm  r9,r9,5,0,26
      d0:	7c 09 00 50 	subf    r0,r9,r0
      d4:	39 20 00 01 	li      r9,1
      d8:	7d 29 00 30 	slw     r9,r9,r0
      dc:	80 01 00 24 	lwz     r0,36(r1)
      e0:	7c 00 2e 70 	srawi   r0,r0,5
      e4:	7c 00 01 94 	addze   r0,r0
      e8:	54 00 10 3a 	rlwinm  r0,r0,2,0,29
      ec:	81 61 00 28 	lwz     r11,40(r1)
      f0:	7c 0b 02 14 	add     r0,r11,r0
      f4:	91 21 00 2c 	stw     r9,44(r1)
      f8:	90 01 00 30 	stw     r0,48(r1)
	: "=&r" (old), "+m" (*p)		\
	: "r" (mask), "r" (p)			\
	: "cc", "memory");			\
}

DEFINE_BITOP(set_bits, or, "", "")
      fc:	80 01 00 30 	lwz     r0,48(r1)
     100:	90 01 00 34 	stw     r0,52(r1)
     104:	81 41 00 34 	lwz     r10,52(r1)
     108:	80 01 00 2c 	lwz     r0,44(r1)
     10c:	81 21 00 34 	lwz     r9,52(r1)
     110:	81 61 00 34 	lwz     r11,52(r1)
     114:	7f e0 48 28 	lwarx   r31,0,r9
     118:	7f ff 03 78 	or      r31,r31,r0
     11c:	7f e0 49 2d 	stwcx.  r31,0,r9
     120:	40 a2 ff f4 	bne-    114 <gss_cred_set_ctx+0x114>
     124:	93 e1 00 38 	stw     r31,56(r1)
	smp_mb__before_clear_bit();
	clear_bit(RPCAUTH_CRED_NEW, &cred->cr_flags);
     128:	80 01 00 58 	lwz     r0,88(r1)
     12c:	30 00 00 28 	addic   r0,r0,40
     130:	39 20 00 00 	li      r9,0
     134:	91 21 00 3c 	stw     r9,60(r1)
     138:	90 01 00 40 	stw     r0,64(r1)
	set_bits(BITOP_MASK(nr), addr + BITOP_WORD(nr));
}

static __inline__ void clear_bit(int nr, volatile unsigned long *addr)
{
	clear_bits(BITOP_MASK(nr), addr + BITOP_WORD(nr));
     13c:	80 01 00 3c 	lwz     r0,60(r1)
     140:	7c 09 2e 70 	srawi   r9,r0,5
     144:	7d 29 01 94 	addze   r9,r9
     148:	55 29 28 34 	rlwinm  r9,r9,5,0,26
     14c:	7c 09 00 50 	subf    r0,r9,r0
     150:	39 20 00 01 	li      r9,1
     154:	7d 29 00 30 	slw     r9,r9,r0
     158:	80 01 00 3c 	lwz     r0,60(r1)
     15c:	7c 00 2e 70 	srawi   r0,r0,5
     160:	7c 00 01 94 	addze   r0,r0
     164:	54 00 10 3a 	rlwinm  r0,r0,2,0,29
     168:	81 61 00 40 	lwz     r11,64(r1)
     16c:	7c 0b 02 14 	add     r0,r11,r0
     170:	91 21 00 44 	stw     r9,68(r1)
     174:	90 01 00 48 	stw     r0,72(r1)
	: "r" (mask), "r" (p)			\
	: "cc", "memory");			\
}

DEFINE_BITOP(set_bits, or, "", "")
DEFINE_BITOP(clear_bits, andc, "", "")
     178:	80 01 00 48 	lwz     r0,72(r1)
     17c:	90 01 00 4c 	stw     r0,76(r1)
     180:	81 41 00 4c 	lwz     r10,76(r1)
     184:	80 01 00 44 	lwz     r0,68(r1)
     188:	81 21 00 4c 	lwz     r9,76(r1)
     18c:	81 61 00 4c 	lwz     r11,76(r1)
     190:	7f e0 48 28 	lwarx   r31,0,r9
     194:	7f ff 00 78 	andc    r31,r31,r0
     198:	7f e0 49 2d 	stwcx.  r31,0,r9
     19c:	40 a2 ff f4 	bne-    190 <gss_cred_set_ctx+0x190>
     1a0:	93 e1 00 50 	stw     r31,80(r1)
     1a4:	48 00 00 08 	b       1ac <gss_cred_set_ctx+0x1ac>
gss_cred_set_ctx(struct rpc_cred *cred, struct gss_cl_ctx *ctx)
{
	struct gss_cred *gss_cred = container_of(cred, struct gss_cred, gc_base);

	if (!test_bit(RPCAUTH_CRED_NEW, &cred->cr_flags))
		return;
     1a8:	60 00 00 00 	nop
	gss_get_ctx(ctx);
	rcu_assign_pointer(gss_cred->gc_ctx, ctx);
	set_bit(RPCAUTH_CRED_UPTODATE, &cred->cr_flags);
	smp_mb__before_clear_bit();
	clear_bit(RPCAUTH_CRED_NEW, &cred->cr_flags);
}
     1ac:	83 e1 00 6c 	lwz     r31,108(r1)
     1b0:	38 21 00 70 	addi    r1,r1,112
     1b4:	4e 80 00 20 	blr

000001b8 <simple_get_bytes>:

static const void *
simple_get_bytes(const void *p, const void *end, void *res, size_t len)
{
     1b8:	94 21 ff d0 	stwu    r1,-48(r1)
     1bc:	7c 08 02 a6 	mflr    r0
     1c0:	90 01 00 34 	stw     r0,52(r1)
     1c4:	90 61 00 18 	stw     r3,24(r1)
     1c8:	90 81 00 1c 	stw     r4,28(r1)
     1cc:	90 a1 00 20 	stw     r5,32(r1)
     1d0:	90 c1 00 24 	stw     r6,36(r1)
	const void *q = (const void *)((const char *)p + len);
     1d4:	81 21 00 18 	lwz     r9,24(r1)
     1d8:	80 01 00 24 	lwz     r0,36(r1)
     1dc:	7c 09 02 14 	add     r0,r9,r0
     1e0:	90 01 00 08 	stw     r0,8(r1)
	if (unlikely(q > end || q < p))
     1e4:	81 21 00 08 	lwz     r9,8(r1)
     1e8:	80 01 00 1c 	lwz     r0,28(r1)
     1ec:	7f 89 00 40 	cmplw   cr7,r9,r0
     1f0:	7c 00 00 26 	mfcr    r0
     1f4:	54 00 f7 fe 	rlwinm  r0,r0,30,31,31
     1f8:	2f 80 00 00 	cmpwi   cr7,r0,0
     1fc:	40 9e 00 20 	bne-    cr7,21c <simple_get_bytes+0x64>
     200:	81 21 00 08 	lwz     r9,8(r1)
     204:	80 01 00 18 	lwz     r0,24(r1)
     208:	7f 89 00 40 	cmplw   cr7,r9,r0
     20c:	7c 00 00 26 	mfcr    r0
     210:	54 00 ef fe 	rlwinm  r0,r0,29,31,31
     214:	2f 80 00 00 	cmpwi   cr7,r0,0
     218:	41 9e 00 14 	beq-    cr7,22c <simple_get_bytes+0x74>
     21c:	38 00 ff f2 	li      r0,-14
     220:	90 01 00 0c 	stw     r0,12(r1)

#define IS_ERR_VALUE(x) unlikely((x) >= (unsigned long)-MAX_ERRNO)

static inline void * __must_check ERR_PTR(long error)
{
	return (void *) error;
     224:	80 01 00 0c 	lwz     r0,12(r1)
		return ERR_PTR(-EFAULT);
     228:	48 00 00 2c 	b       254 <simple_get_bytes+0x9c>
	memcpy(res, p, len);
     22c:	81 21 00 20 	lwz     r9,32(r1)
     230:	80 01 00 18 	lwz     r0,24(r1)
     234:	7d 2b 4b 78 	mr      r11,r9
     238:	7c 09 03 78 	mr      r9,r0
     23c:	80 01 00 24 	lwz     r0,36(r1)
     240:	7d 63 5b 78 	mr      r3,r11
     244:	7d 24 4b 78 	mr      r4,r9
     248:	7c 05 03 78 	mr      r5,r0
     24c:	48 00 00 01 	bl      24c <simple_get_bytes+0x94>
	return q;
     250:	80 01 00 08 	lwz     r0,8(r1)
}
     254:	7c 03 03 78 	mr      r3,r0
     258:	80 01 00 34 	lwz     r0,52(r1)
     25c:	7c 08 03 a6 	mtlr    r0
     260:	38 21 00 30 	addi    r1,r1,48
     264:	4e 80 00 20 	blr

00000268 <gss_cred_get_ctx>:
	return q;
}

static struct gss_cl_ctx *
gss_cred_get_ctx(struct rpc_cred *cred)
{
     268:	94 21 ff c0 	stwu    r1,-64(r1)
     26c:	93 e1 00 3c 	stw     r31,60(r1)
     270:	90 61 00 28 	stw     r3,40(r1)
	struct gss_cred *gss_cred = container_of(cred, struct gss_cred, gc_base);
     274:	80 01 00 28 	lwz     r0,40(r1)
     278:	90 01 00 0c 	stw     r0,12(r1)
     27c:	80 01 00 0c 	lwz     r0,12(r1)
     280:	90 01 00 10 	stw     r0,16(r1)
	struct gss_cl_ctx *ctx = NULL;
     284:	38 00 00 00 	li      r0,0
     288:	90 01 00 08 	stw     r0,8(r1)

	rcu_read_lock();
	if (gss_cred->gc_ctx)
     28c:	80 01 00 10 	lwz     r0,16(r1)
     290:	7c 09 03 78 	mr      r9,r0
     294:	80 09 00 38 	lwz     r0,56(r9)
     298:	2f 80 00 00 	cmpwi   cr7,r0,0
     29c:	41 9e 00 44 	beq-    cr7,2e0 <gss_cred_get_ctx+0x78>
		ctx = gss_get_ctx(gss_cred->gc_ctx);
     2a0:	80 01 00 10 	lwz     r0,16(r1)
     2a4:	7c 09 03 78 	mr      r9,r0
     2a8:	80 09 00 38 	lwz     r0,56(r9)
     2ac:	90 01 00 14 	stw     r0,20(r1)
static const struct rpc_pipe_ops gss_upcall_ops_v1;

static inline struct gss_cl_ctx *
gss_get_ctx(struct gss_cl_ctx *ctx)
{
	atomic_inc(&ctx->count);
     2b0:	80 01 00 14 	lwz     r0,20(r1)
     2b4:	90 01 00 18 	stw     r0,24(r1)
	addic	%0,%0,1\n"
	PPC405_ERR77(0,%2)
"	stwcx.	%0,0,%2 \n\
	bne-	1b"
	: "=&r" (t), "+m" (v->counter)
	: "r" (&v->counter)
     2b8:	80 01 00 18 	lwz     r0,24(r1)
"1:	lwarx	%0,0,%2		# atomic_inc\n\
	addic	%0,%0,1\n"
	PPC405_ERR77(0,%2)
"	stwcx.	%0,0,%2 \n\
	bne-	1b"
	: "=&r" (t), "+m" (v->counter)
     2bc:	81 61 00 18 	lwz     r11,24(r1)
     2c0:	81 21 00 18 	lwz     r9,24(r1)

static __inline__ void atomic_inc(atomic_t *v)
{
	int t;

	__asm__ __volatile__(
     2c4:	7f e0 00 28 	lwarx   r31,0,r0
     2c8:	33 ff 00 01 	addic   r31,r31,1
     2cc:	7f e0 01 2d 	stwcx.  r31,0,r0
     2d0:	40 a2 ff f4 	bne-    2c4 <gss_cred_get_ctx+0x5c>
     2d4:	93 e1 00 1c 	stw     r31,28(r1)
	return ctx;
     2d8:	80 01 00 14 	lwz     r0,20(r1)
	struct gss_cred *gss_cred = container_of(cred, struct gss_cred, gc_base);
	struct gss_cl_ctx *ctx = NULL;

	rcu_read_lock();
	if (gss_cred->gc_ctx)
		ctx = gss_get_ctx(gss_cred->gc_ctx);
     2dc:	90 01 00 08 	stw     r0,8(r1)
	rcu_read_unlock();
	return ctx;
     2e0:	80 01 00 08 	lwz     r0,8(r1)
}
     2e4:	7c 03 03 78 	mr      r3,r0
     2e8:	83 e1 00 3c 	lwz     r31,60(r1)
     2ec:	38 21 00 40 	addi    r1,r1,64
     2f0:	4e 80 00 20 	blr

000002f4 <gss_alloc_context>:

static struct gss_cl_ctx *
gss_alloc_context(void)
{
     2f4:	94 21 ff d0 	stwu    r1,-48(r1)
     2f8:	7c 08 02 a6 	mflr    r0
     2fc:	90 01 00 34 	stw     r0,52(r1)
     300:	38 00 00 28 	li      r0,40
     304:	90 01 00 0c 	stw     r0,12(r1)
     308:	38 00 00 50 	li      r0,80
     30c:	90 01 00 10 	stw     r0,16(r1)
 * @size: how many bytes of memory are required.
 * @flags: the type of memory to allocate (see kmalloc).
 */
static inline void *kzalloc(size_t size, gfp_t flags)
{
	return kmalloc(size, flags | __GFP_ZERO);
     310:	80 01 00 10 	lwz     r0,16(r1)
     314:	60 00 80 00 	ori     r0,r0,32768
     318:	81 21 00 0c 	lwz     r9,12(r1)
     31c:	91 21 00 14 	stw     r9,20(r1)
     320:	90 01 00 18 	stw     r0,24(r1)
				return ZERO_SIZE_PTR;

			return kmem_cache_alloc_trace(s, flags, size);
		}
	}
	return __kmalloc(size, flags);
     324:	80 61 00 14 	lwz     r3,20(r1)
     328:	80 81 00 18 	lwz     r4,24(r1)
     32c:	48 00 00 01 	bl      32c <gss_alloc_context+0x38>
     330:	7c 60 1b 78 	mr      r0,r3
	struct gss_cl_ctx *ctx;

	ctx = kzalloc(sizeof(*ctx), GFP_NOFS);
     334:	90 01 00 08 	stw     r0,8(r1)
	if (ctx != NULL) {
     338:	80 01 00 08 	lwz     r0,8(r1)
     33c:	2f 80 00 00 	cmpwi   cr7,r0,0
     340:	41 9e 00 50 	beq-    cr7,390 <gss_alloc_context+0x9c>
		ctx->gc_proc = RPC_GSS_PROC_DATA;
     344:	80 01 00 08 	lwz     r0,8(r1)
     348:	39 20 00 00 	li      r9,0
     34c:	7c 0b 03 78 	mr      r11,r0
     350:	91 2b 00 04 	stw     r9,4(r11)
		ctx->gc_seq = 1;	/* NetApp 6.4R1 doesn't accept seq. no. 0 */
     354:	80 01 00 08 	lwz     r0,8(r1)
     358:	39 20 00 01 	li      r9,1
     35c:	7c 0b 03 78 	mr      r11,r0
     360:	91 2b 00 08 	stw     r9,8(r11)
		spin_lock_init(&ctx->gc_seq_lock);
     364:	80 01 00 08 	lwz     r0,8(r1)
     368:	30 00 00 0c 	addic   r0,r0,12
     36c:	90 01 00 1c 	stw     r0,28(r1)
		atomic_set(&ctx->count,1);
     370:	80 01 00 08 	lwz     r0,8(r1)
     374:	90 01 00 20 	stw     r0,32(r1)
     378:	38 00 00 01 	li      r0,1
     37c:	90 01 00 24 	stw     r0,36(r1)
	return t;
}

static __inline__ void atomic_set(atomic_t *v, int i)
{
	__asm__ __volatile__("stw%U0%X0 %1,%0" : "=m"(v->counter) : "r"(i));
     380:	80 01 00 20 	lwz     r0,32(r1)
     384:	81 21 00 24 	lwz     r9,36(r1)
     388:	7c 0b 03 78 	mr      r11,r0
     38c:	91 2b 00 00 	stw     r9,0(r11)
	}
	return ctx;
     390:	80 01 00 08 	lwz     r0,8(r1)
}
     394:	7c 03 03 78 	mr      r3,r0
     398:	80 01 00 34 	lwz     r0,52(r1)
     39c:	7c 08 03 a6 	mtlr    r0
     3a0:	38 21 00 30 	addi    r1,r1,48
     3a4:	4e 80 00 20 	blr

000003a8 <gss_fill_context>:

#define GSSD_MIN_TIMEOUT (60 * 60)
static const void *
gss_fill_context(const void *p, const void *end, struct gss_cl_ctx *ctx, struct gss_api_mech *gm)
{
     3a8:	94 21 ff 80 	stwu    r1,-128(r1)
     3ac:	7c 08 02 a6 	mflr    r0
     3b0:	90 01 00 84 	stw     r0,132(r1)
     3b4:	90 61 00 68 	stw     r3,104(r1)
     3b8:	90 81 00 6c 	stw     r4,108(r1)
     3bc:	90 a1 00 70 	stw     r5,112(r1)
     3c0:	90 c1 00 74 	stw     r6,116(r1)
	unsigned int timeout;
	u32 window_size;
	int ret;

	/* First unsigned int gives the lifetime (in seconds) of the cred */
	p = simple_get_bytes(p, end, &timeout, sizeof(timeout));
     3c4:	38 01 00 54 	addi    r0,r1,84
     3c8:	80 61 00 68 	lwz     r3,104(r1)
     3cc:	80 81 00 6c 	lwz     r4,108(r1)
     3d0:	7c 05 03 78 	mr      r5,r0
     3d4:	38 c0 00 04 	li      r6,4
     3d8:	4b ff fd e1 	bl      1b8 <simple_get_bytes>
     3dc:	90 61 00 68 	stw     r3,104(r1)
     3e0:	80 01 00 68 	lwz     r0,104(r1)
     3e4:	90 01 00 0c 	stw     r0,12(r1)
	return (long) ptr;
}

static inline long __must_check IS_ERR(const void *ptr)
{
	return IS_ERR_VALUE((unsigned long)ptr);
     3e8:	81 21 00 0c 	lwz     r9,12(r1)
     3ec:	38 00 f0 00 	li      r0,-4096
     3f0:	7f 89 00 40 	cmplw   cr7,r9,r0
     3f4:	7c 00 00 26 	mfcr    r0
     3f8:	54 00 f7 fe 	rlwinm  r0,r0,30,31,31
	if (IS_ERR(p))
     3fc:	2f 80 00 00 	cmpwi   cr7,r0,0
     400:	40 9e 03 54 	bne-    cr7,754 <gss_fill_context+0x3ac>
		goto err;
	if (timeout == 0)
     404:	80 01 00 54 	lwz     r0,84(r1)
     408:	2f 80 00 00 	cmpwi   cr7,r0,0
     40c:	40 9e 00 0c 	bne-    cr7,418 <gss_fill_context+0x70>
		timeout = GSSD_MIN_TIMEOUT;
     410:	38 00 0e 10 	li      r0,3600
     414:	90 01 00 54 	stw     r0,84(r1)
	ctx->gc_expiry = jiffies + (unsigned long)timeout * HZ * 3 / 4;
     418:	80 01 00 54 	lwz     r0,84(r1)
     41c:	1c 00 02 ee 	mulli   r0,r0,750
     420:	54 09 f0 be 	rlwinm  r9,r0,30,2,31
     424:	3c 00 00 00 	lis     r0,0
     428:	7c 0b 03 78 	mr      r11,r0
     42c:	80 0b 00 00 	lwz     r0,0(r11)
     430:	7d 29 02 14 	add     r9,r9,r0
     434:	80 01 00 70 	lwz     r0,112(r1)
     438:	7c 0b 03 78 	mr      r11,r0
     43c:	91 2b 00 1c 	stw     r9,28(r11)
	/* Sequence number window. Determines the maximum number of simultaneous requests */
	p = simple_get_bytes(p, end, &window_size, sizeof(window_size));
     440:	38 01 00 58 	addi    r0,r1,88
     444:	80 61 00 68 	lwz     r3,104(r1)
     448:	80 81 00 6c 	lwz     r4,108(r1)
     44c:	7c 05 03 78 	mr      r5,r0
     450:	38 c0 00 04 	li      r6,4
     454:	4b ff fd 65 	bl      1b8 <simple_get_bytes>
     458:	90 61 00 68 	stw     r3,104(r1)
     45c:	80 01 00 68 	lwz     r0,104(r1)
     460:	90 01 00 10 	stw     r0,16(r1)
     464:	81 21 00 10 	lwz     r9,16(r1)
     468:	38 00 f0 00 	li      r0,-4096
     46c:	7f 89 00 40 	cmplw   cr7,r9,r0
     470:	7c 00 00 26 	mfcr    r0
     474:	54 00 f7 fe 	rlwinm  r0,r0,30,31,31
	if (IS_ERR(p))
     478:	2f 80 00 00 	cmpwi   cr7,r0,0
     47c:	40 9e 02 e0 	bne-    cr7,75c <gss_fill_context+0x3b4>
		goto err;
	ctx->gc_win = window_size;
     480:	81 21 00 58 	lwz     r9,88(r1)
     484:	80 01 00 70 	lwz     r0,112(r1)
     488:	7c 0b 03 78 	mr      r11,r0
     48c:	91 2b 00 18 	stw     r9,24(r11)
	/* gssd signals an error by passing ctx->gc_win = 0: */
	if (ctx->gc_win == 0) {
     490:	80 01 00 70 	lwz     r0,112(r1)
     494:	7c 09 03 78 	mr      r9,r0
     498:	80 09 00 18 	lwz     r0,24(r9)
     49c:	2f 80 00 00 	cmpwi   cr7,r0,0
     4a0:	40 9e 00 78 	bne-    cr7,518 <gss_fill_context+0x170>
		/*
		 * in which case, p points to an error code. Anything other
		 * than -EKEYEXPIRED gets converted to -EACCES.
		 */
		p = simple_get_bytes(p, end, &ret, sizeof(ret));
     4a4:	38 01 00 5c 	addi    r0,r1,92
     4a8:	80 61 00 68 	lwz     r3,104(r1)
     4ac:	80 81 00 6c 	lwz     r4,108(r1)
     4b0:	7c 05 03 78 	mr      r5,r0
     4b4:	38 c0 00 04 	li      r6,4
     4b8:	4b ff fd 01 	bl      1b8 <simple_get_bytes>
     4bc:	90 61 00 68 	stw     r3,104(r1)
     4c0:	80 01 00 68 	lwz     r0,104(r1)
     4c4:	90 01 00 14 	stw     r0,20(r1)
     4c8:	81 21 00 14 	lwz     r9,20(r1)
     4cc:	38 00 f0 00 	li      r0,-4096
     4d0:	7f 89 00 40 	cmplw   cr7,r9,r0
     4d4:	7c 00 00 26 	mfcr    r0
     4d8:	54 00 f7 fe 	rlwinm  r0,r0,30,31,31
		if (!IS_ERR(p))
     4dc:	2f 80 00 00 	cmpwi   cr7,r0,0
     4e0:	40 9e 02 84 	bne-    cr7,764 <gss_fill_context+0x3bc>
			p = (ret == -EKEYEXPIRED) ? ERR_PTR(-EKEYEXPIRED) :
     4e4:	81 21 00 5c 	lwz     r9,92(r1)
     4e8:	38 00 ff 81 	li      r0,-127
     4ec:	7f 89 00 00 	cmpw    cr7,r9,r0
     4f0:	40 9e 00 14 	bne-    cr7,504 <gss_fill_context+0x15c>
     4f4:	38 00 ff 81 	li      r0,-127
     4f8:	90 01 00 18 	stw     r0,24(r1)

#define IS_ERR_VALUE(x) unlikely((x) >= (unsigned long)-MAX_ERRNO)

static inline void * __must_check ERR_PTR(long error)
{
	return (void *) error;
     4fc:	80 01 00 18 	lwz     r0,24(r1)
     500:	48 00 00 10 	b       510 <gss_fill_context+0x168>
     504:	38 00 ff f3 	li      r0,-13
     508:	90 01 00 1c 	stw     r0,28(r1)
     50c:	80 01 00 1c 	lwz     r0,28(r1)
     510:	90 01 00 68 	stw     r0,104(r1)
						    ERR_PTR(-EACCES);
		goto err;
     514:	48 00 02 50 	b       764 <gss_fill_context+0x3bc>
	}
	/* copy the opaque wire context */
	p = simple_get_netobj(p, end, &ctx->gc_wire_ctx);
     518:	80 01 00 70 	lwz     r0,112(r1)
     51c:	30 00 00 10 	addic   r0,r0,16
     520:	81 21 00 68 	lwz     r9,104(r1)
     524:	91 21 00 20 	stw     r9,32(r1)
     528:	81 21 00 6c 	lwz     r9,108(r1)
     52c:	91 21 00 24 	stw     r9,36(r1)
     530:	90 01 00 28 	stw     r0,40(r1)
simple_get_netobj(const void *p, const void *end, struct xdr_netobj *dest)
{
	const void *q;
	unsigned int len;

	p = simple_get_bytes(p, end, &len, sizeof(len));
     534:	38 01 00 60 	addi    r0,r1,96
     538:	80 61 00 20 	lwz     r3,32(r1)
     53c:	80 81 00 24 	lwz     r4,36(r1)
     540:	7c 05 03 78 	mr      r5,r0
     544:	38 c0 00 04 	li      r6,4
     548:	4b ff fc 71 	bl      1b8 <simple_get_bytes>
     54c:	90 61 00 20 	stw     r3,32(r1)
     550:	80 01 00 20 	lwz     r0,32(r1)
     554:	90 01 00 2c 	stw     r0,44(r1)
	return (long) ptr;
}

static inline long __must_check IS_ERR(const void *ptr)
{
	return IS_ERR_VALUE((unsigned long)ptr);
     558:	81 21 00 2c 	lwz     r9,44(r1)
     55c:	38 00 f0 00 	li      r0,-4096
     560:	7f 89 00 40 	cmplw   cr7,r9,r0
     564:	7c 00 00 26 	mfcr    r0
     568:	54 00 f7 fe 	rlwinm  r0,r0,30,31,31
	if (IS_ERR(p))
     56c:	2f 80 00 00 	cmpwi   cr7,r0,0
     570:	41 9e 00 0c 	beq-    cr7,57c <gss_fill_context+0x1d4>
		return p;
     574:	80 01 00 20 	lwz     r0,32(r1)
     578:	48 00 00 c4 	b       63c <gss_fill_context+0x294>
	q = (const void *)((const char *)p + len);
     57c:	80 01 00 60 	lwz     r0,96(r1)
     580:	81 21 00 20 	lwz     r9,32(r1)
     584:	7c 09 02 14 	add     r0,r9,r0
     588:	90 01 00 30 	stw     r0,48(r1)
	if (unlikely(q > end || q < p))
     58c:	81 21 00 24 	lwz     r9,36(r1)
     590:	80 01 00 30 	lwz     r0,48(r1)
     594:	7f 89 00 40 	cmplw   cr7,r9,r0
     598:	7c 00 00 26 	mfcr    r0
     59c:	54 00 ef fe 	rlwinm  r0,r0,29,31,31
     5a0:	2f 80 00 00 	cmpwi   cr7,r0,0
     5a4:	40 9e 00 20 	bne-    cr7,5c4 <gss_fill_context+0x21c>
     5a8:	81 21 00 20 	lwz     r9,32(r1)
     5ac:	80 01 00 30 	lwz     r0,48(r1)
     5b0:	7f 89 00 40 	cmplw   cr7,r9,r0
     5b4:	7c 00 00 26 	mfcr    r0
     5b8:	54 00 f7 fe 	rlwinm  r0,r0,30,31,31
     5bc:	2f 80 00 00 	cmpwi   cr7,r0,0
     5c0:	41 9e 00 14 	beq-    cr7,5d4 <gss_fill_context+0x22c>
     5c4:	38 00 ff f2 	li      r0,-14
     5c8:	90 01 00 34 	stw     r0,52(r1)

#define IS_ERR_VALUE(x) unlikely((x) >= (unsigned long)-MAX_ERRNO)

static inline void * __must_check ERR_PTR(long error)
{
	return (void *) error;
     5cc:	80 01 00 34 	lwz     r0,52(r1)
     5d0:	48 00 00 6c 	b       63c <gss_fill_context+0x294>
		return ERR_PTR(-EFAULT);
	dest->data = kmemdup(p, len, GFP_NOFS);
     5d4:	80 01 00 60 	lwz     r0,96(r1)
     5d8:	80 61 00 20 	lwz     r3,32(r1)
     5dc:	7c 04 03 78 	mr      r4,r0
     5e0:	38 a0 00 50 	li      r5,80
     5e4:	48 00 00 01 	bl      5e4 <gss_fill_context+0x23c>
     5e8:	7c 69 1b 78 	mr      r9,r3
     5ec:	80 01 00 28 	lwz     r0,40(r1)
     5f0:	7c 0b 03 78 	mr      r11,r0
     5f4:	91 2b 00 04 	stw     r9,4(r11)
	if (unlikely(dest->data == NULL))
     5f8:	80 01 00 28 	lwz     r0,40(r1)
     5fc:	7c 09 03 78 	mr      r9,r0
     600:	80 09 00 04 	lwz     r0,4(r9)
     604:	2f 80 00 00 	cmpwi   cr7,r0,0
     608:	7c 00 00 26 	mfcr    r0
     60c:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
     610:	2f 80 00 00 	cmpwi   cr7,r0,0
     614:	41 9e 00 14 	beq-    cr7,628 <gss_fill_context+0x280>
     618:	38 00 ff f4 	li      r0,-12
     61c:	90 01 00 38 	stw     r0,56(r1)
     620:	80 01 00 38 	lwz     r0,56(r1)
     624:	48 00 00 18 	b       63c <gss_fill_context+0x294>
		return ERR_PTR(-ENOMEM);
	dest->len = len;
     628:	81 21 00 60 	lwz     r9,96(r1)
     62c:	80 01 00 28 	lwz     r0,40(r1)
     630:	7c 0b 03 78 	mr      r11,r0
     634:	91 2b 00 00 	stw     r9,0(r11)
	return q;
     638:	80 01 00 30 	lwz     r0,48(r1)
			p = (ret == -EKEYEXPIRED) ? ERR_PTR(-EKEYEXPIRED) :
						    ERR_PTR(-EACCES);
		goto err;
	}
	/* copy the opaque wire context */
	p = simple_get_netobj(p, end, &ctx->gc_wire_ctx);
     63c:	90 01 00 68 	stw     r0,104(r1)
     640:	80 01 00 68 	lwz     r0,104(r1)
     644:	90 01 00 3c 	stw     r0,60(r1)
	return (long) ptr;
}

static inline long __must_check IS_ERR(const void *ptr)
{
	return IS_ERR_VALUE((unsigned long)ptr);
     648:	81 21 00 3c 	lwz     r9,60(r1)
     64c:	38 00 f0 00 	li      r0,-4096
     650:	7f 89 00 40 	cmplw   cr7,r9,r0
     654:	7c 00 00 26 	mfcr    r0
     658:	54 00 f7 fe 	rlwinm  r0,r0,30,31,31
	if (IS_ERR(p))
     65c:	2f 80 00 00 	cmpwi   cr7,r0,0
     660:	40 9e 01 0c 	bne-    cr7,76c <gss_fill_context+0x3c4>
		goto err;
	/* import the opaque security context */
	p  = simple_get_bytes(p, end, &seclen, sizeof(seclen));
     664:	38 01 00 50 	addi    r0,r1,80
     668:	80 61 00 68 	lwz     r3,104(r1)
     66c:	80 81 00 6c 	lwz     r4,108(r1)
     670:	7c 05 03 78 	mr      r5,r0
     674:	38 c0 00 04 	li      r6,4
     678:	4b ff fb 41 	bl      1b8 <simple_get_bytes>
     67c:	90 61 00 68 	stw     r3,104(r1)
     680:	80 01 00 68 	lwz     r0,104(r1)
     684:	90 01 00 40 	stw     r0,64(r1)
     688:	81 21 00 40 	lwz     r9,64(r1)
     68c:	38 00 f0 00 	li      r0,-4096
     690:	7f 89 00 40 	cmplw   cr7,r9,r0
     694:	7c 00 00 26 	mfcr    r0
     698:	54 00 f7 fe 	rlwinm  r0,r0,30,31,31
	if (IS_ERR(p))
     69c:	2f 80 00 00 	cmpwi   cr7,r0,0
     6a0:	40 9e 00 d4 	bne-    cr7,774 <gss_fill_context+0x3cc>
		goto err;
	q = (const void *)((const char *)p + seclen);
     6a4:	80 01 00 50 	lwz     r0,80(r1)
     6a8:	81 21 00 68 	lwz     r9,104(r1)
     6ac:	7c 09 02 14 	add     r0,r9,r0
     6b0:	90 01 00 08 	stw     r0,8(r1)
	if (unlikely(q > end || q < p)) {
     6b4:	81 21 00 08 	lwz     r9,8(r1)
     6b8:	80 01 00 6c 	lwz     r0,108(r1)
     6bc:	7f 89 00 40 	cmplw   cr7,r9,r0
     6c0:	7c 00 00 26 	mfcr    r0
     6c4:	54 00 f7 fe 	rlwinm  r0,r0,30,31,31
     6c8:	2f 80 00 00 	cmpwi   cr7,r0,0
     6cc:	40 9e 00 20 	bne-    cr7,6ec <gss_fill_context+0x344>
     6d0:	81 21 00 08 	lwz     r9,8(r1)
     6d4:	80 01 00 68 	lwz     r0,104(r1)
     6d8:	7f 89 00 40 	cmplw   cr7,r9,r0
     6dc:	7c 00 00 26 	mfcr    r0
     6e0:	54 00 ef fe 	rlwinm  r0,r0,29,31,31
     6e4:	2f 80 00 00 	cmpwi   cr7,r0,0
     6e8:	41 9e 00 18 	beq-    cr7,700 <gss_fill_context+0x358>
     6ec:	38 00 ff f2 	li      r0,-14
     6f0:	90 01 00 44 	stw     r0,68(r1)

#define IS_ERR_VALUE(x) unlikely((x) >= (unsigned long)-MAX_ERRNO)

static inline void * __must_check ERR_PTR(long error)
{
	return (void *) error;
     6f4:	80 01 00 44 	lwz     r0,68(r1)
		p = ERR_PTR(-EFAULT);
     6f8:	90 01 00 68 	stw     r0,104(r1)
		goto err;
     6fc:	48 00 00 7c 	b       778 <gss_fill_context+0x3d0>
	}
	ret = gss_import_sec_context(p, seclen, gm, &ctx->gc_gss_ctx, GFP_NOFS);
     700:	81 21 00 50 	lwz     r9,80(r1)
     704:	80 01 00 70 	lwz     r0,112(r1)
     708:	30 00 00 0c 	addic   r0,r0,12
     70c:	80 61 00 68 	lwz     r3,104(r1)
     710:	7d 24 4b 78 	mr      r4,r9
     714:	80 a1 00 74 	lwz     r5,116(r1)
     718:	7c 06 03 78 	mr      r6,r0
     71c:	38 e0 00 50 	li      r7,80
     720:	48 00 00 01 	bl      720 <gss_fill_context+0x378>
     724:	7c 60 1b 78 	mr      r0,r3
     728:	90 01 00 5c 	stw     r0,92(r1)
	if (ret < 0) {
     72c:	80 01 00 5c 	lwz     r0,92(r1)
     730:	2f 80 00 00 	cmpwi   cr7,r0,0
     734:	40 9c 00 18 	bge-    cr7,74c <gss_fill_context+0x3a4>
		p = ERR_PTR(ret);
     738:	80 01 00 5c 	lwz     r0,92(r1)
     73c:	90 01 00 48 	stw     r0,72(r1)
     740:	80 01 00 48 	lwz     r0,72(r1)
     744:	90 01 00 68 	stw     r0,104(r1)
		goto err;
     748:	48 00 00 30 	b       778 <gss_fill_context+0x3d0>
	}
	return q;
     74c:	80 01 00 08 	lwz     r0,8(r1)
     750:	48 00 00 74 	b       7c4 <gss_fill_context+0x41c>
	int ret;

	/* First unsigned int gives the lifetime (in seconds) of the cred */
	p = simple_get_bytes(p, end, &timeout, sizeof(timeout));
	if (IS_ERR(p))
		goto err;
     754:	60 00 00 00 	nop
     758:	48 00 00 20 	b       778 <gss_fill_context+0x3d0>
		timeout = GSSD_MIN_TIMEOUT;
	ctx->gc_expiry = jiffies + (unsigned long)timeout * HZ * 3 / 4;
	/* Sequence number window. Determines the maximum number of simultaneous requests */
	p = simple_get_bytes(p, end, &window_size, sizeof(window_size));
	if (IS_ERR(p))
		goto err;
     75c:	60 00 00 00 	nop
     760:	48 00 00 18 	b       778 <gss_fill_context+0x3d0>
		 */
		p = simple_get_bytes(p, end, &ret, sizeof(ret));
		if (!IS_ERR(p))
			p = (ret == -EKEYEXPIRED) ? ERR_PTR(-EKEYEXPIRED) :
						    ERR_PTR(-EACCES);
		goto err;
     764:	60 00 00 00 	nop
     768:	48 00 00 10 	b       778 <gss_fill_context+0x3d0>
	}
	/* copy the opaque wire context */
	p = simple_get_netobj(p, end, &ctx->gc_wire_ctx);
	if (IS_ERR(p))
		goto err;
     76c:	60 00 00 00 	nop
     770:	48 00 00 08 	b       778 <gss_fill_context+0x3d0>
	/* import the opaque security context */
	p  = simple_get_bytes(p, end, &seclen, sizeof(seclen));
	if (IS_ERR(p))
		goto err;
     774:	60 00 00 00 	nop
		p = ERR_PTR(ret);
		goto err;
	}
	return q;
err:
	dprintk("RPC:       gss_fill_context returning %ld\n", -PTR_ERR(p));
     778:	3c 00 00 00 	lis     r0,0
     77c:	7c 09 03 78 	mr      r9,r0
     780:	80 09 00 00 	lwz     r0,0(r9)
     784:	54 00 06 f6 	rlwinm  r0,r0,0,27,27
     788:	2f 80 00 00 	cmpwi   cr7,r0,0
     78c:	7c 00 00 26 	mfcr    r0
     790:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
     794:	68 00 00 01 	xori    r0,r0,1
     798:	2f 80 00 00 	cmpwi   cr7,r0,0
     79c:	41 9e 00 24 	beq-    cr7,7c0 <gss_fill_context+0x418>
     7a0:	80 01 00 68 	lwz     r0,104(r1)
     7a4:	90 01 00 4c 	stw     r0,76(r1)
}

static inline long __must_check PTR_ERR(const void *ptr)
{
	return (long) ptr;
     7a8:	80 01 00 4c 	lwz     r0,76(r1)
     7ac:	7c 00 00 d0 	neg     r0,r0
     7b0:	3d 20 00 00 	lis     r9,0
     7b4:	38 69 00 ac 	addi    r3,r9,172
     7b8:	7c 04 03 78 	mr      r4,r0
     7bc:	48 00 00 01 	bl      7bc <gss_fill_context+0x414>
	return p;
     7c0:	80 01 00 68 	lwz     r0,104(r1)
}
     7c4:	7c 03 03 78 	mr      r3,r0
     7c8:	80 01 00 84 	lwz     r0,132(r1)
     7cc:	7c 08 03 a6 	mtlr    r0
     7d0:	38 21 00 80 	addi    r1,r1,128
     7d4:	4e 80 00 20 	blr

000007d8 <get_pipe_version>:
	struct gss_cl_ctx *ctx;
	char databuf[UPCALL_BUF_LEN];
};

static int get_pipe_version(void)
{
     7d8:	94 21 ff d0 	stwu    r1,-48(r1)
     7dc:	93 e1 00 2c 	stw     r31,44(r1)
     7e0:	3c 00 00 00 	lis     r0,0
     7e4:	30 00 00 04 	addic   r0,r0,4
     7e8:	90 01 00 14 	stw     r0,20(r1)
	int ret;

	spin_lock(&pipe_version_lock);
	if (pipe_version >= 0) {
     7ec:	3c 00 00 00 	lis     r0,0
     7f0:	7c 09 03 78 	mr      r9,r0
     7f4:	80 09 00 04 	lwz     r0,4(r9)
     7f8:	2f 80 00 00 	cmpwi   cr7,r0,0
     7fc:	41 9c 00 44 	blt-    cr7,840 <get_pipe_version+0x68>
     800:	3c 00 00 00 	lis     r0,0
     804:	30 00 00 00 	addic   r0,r0,0
     808:	90 01 00 0c 	stw     r0,12(r1)
	addic	%0,%0,1\n"
	PPC405_ERR77(0,%2)
"	stwcx.	%0,0,%2 \n\
	bne-	1b"
	: "=&r" (t), "+m" (v->counter)
	: "r" (&v->counter)
     80c:	80 01 00 0c 	lwz     r0,12(r1)
"1:	lwarx	%0,0,%2		# atomic_inc\n\
	addic	%0,%0,1\n"
	PPC405_ERR77(0,%2)
"	stwcx.	%0,0,%2 \n\
	bne-	1b"
	: "=&r" (t), "+m" (v->counter)
     810:	81 61 00 0c 	lwz     r11,12(r1)
     814:	81 21 00 0c 	lwz     r9,12(r1)

static __inline__ void atomic_inc(atomic_t *v)
{
	int t;

	__asm__ __volatile__(
     818:	7f e0 00 28 	lwarx   r31,0,r0
     81c:	33 ff 00 01 	addic   r31,r31,1
     820:	7f e0 01 2d 	stwcx.  r31,0,r0
     824:	40 a2 ff f4 	bne-    818 <get_pipe_version+0x40>
     828:	93 e1 00 10 	stw     r31,16(r1)
		atomic_inc(&pipe_users);
		ret = pipe_version;
     82c:	3c 00 00 00 	lis     r0,0
     830:	7c 09 03 78 	mr      r9,r0
     834:	80 09 00 04 	lwz     r0,4(r9)
     838:	90 01 00 08 	stw     r0,8(r1)
     83c:	48 00 00 0c 	b       848 <get_pipe_version+0x70>
	} else
		ret = -EAGAIN;
     840:	38 00 ff f5 	li      r0,-11
     844:	90 01 00 08 	stw     r0,8(r1)
     848:	3c 00 00 00 	lis     r0,0
     84c:	30 00 00 04 	addic   r0,r0,4
     850:	90 01 00 18 	stw     r0,24(r1)
	spin_unlock(&pipe_version_lock);
	return ret;
     854:	80 01 00 08 	lwz     r0,8(r1)
}
     858:	7c 03 03 78 	mr      r3,r0
     85c:	83 e1 00 2c 	lwz     r31,44(r1)
     860:	38 21 00 30 	addi    r1,r1,48
     864:	4e 80 00 20 	blr

00000868 <put_pipe_version>:

static void put_pipe_version(void)
{
     868:	94 21 ff e0 	stwu    r1,-32(r1)
     86c:	7c 08 02 a6 	mflr    r0
     870:	90 01 00 24 	stw     r0,36(r1)
	if (atomic_dec_and_lock(&pipe_users, &pipe_version_lock)) {
     874:	3c 00 00 00 	lis     r0,0
     878:	30 60 00 00 	addic   r3,r0,0
     87c:	3c 00 00 00 	lis     r0,0
     880:	30 80 00 04 	addic   r4,r0,4
     884:	48 00 00 01 	bl      884 <put_pipe_version+0x1c>
     888:	7c 60 1b 78 	mr      r0,r3
     88c:	2f 80 00 00 	cmpwi   cr7,r0,0
     890:	41 9e 00 20 	beq-    cr7,8b0 <put_pipe_version+0x48>
		pipe_version = -1;
     894:	3c 00 00 00 	lis     r0,0
     898:	39 20 ff ff 	li      r9,-1
     89c:	7c 0b 03 78 	mr      r11,r0
     8a0:	91 2b 00 04 	stw     r9,4(r11)
     8a4:	3c 00 00 00 	lis     r0,0
     8a8:	30 00 00 04 	addic   r0,r0,4
     8ac:	90 01 00 08 	stw     r0,8(r1)
		spin_unlock(&pipe_version_lock);
	}
}
     8b0:	80 01 00 24 	lwz     r0,36(r1)
     8b4:	7c 08 03 a6 	mtlr    r0
     8b8:	38 21 00 20 	addi    r1,r1,32
     8bc:	4e 80 00 20 	blr

000008c0 <gss_release_msg>:

static void
gss_release_msg(struct gss_upcall_msg *gss_msg)
{
     8c0:	94 21 ff c0 	stwu    r1,-64(r1)
     8c4:	7c 08 02 a6 	mflr    r0
     8c8:	90 01 00 44 	stw     r0,68(r1)
     8cc:	93 e1 00 3c 	stw     r31,60(r1)
     8d0:	90 61 00 28 	stw     r3,40(r1)
	if (!atomic_dec_and_test(&gss_msg->count))
     8d4:	80 01 00 28 	lwz     r0,40(r1)
     8d8:	90 01 00 08 	stw     r0,8(r1)
	PPC405_ERR77(0,%1)
"	stwcx.	%0,0,%1\n\
	bne-	1b"
	PPC_ACQUIRE_BARRIER
	: "=&r" (t)
	: "r" (&v->counter)
     8dc:	80 01 00 08 	lwz     r0,8(r1)

static __inline__ int atomic_dec_return(atomic_t *v)
{
	int t;

	__asm__ __volatile__(
     8e0:	7f e0 00 28 	lwarx   r31,0,r0
     8e4:	33 ff ff ff 	addic   r31,r31,-1
     8e8:	7f e0 01 2d 	stwcx.  r31,0,r0
     8ec:	40 a2 ff f4 	bne-    8e0 <gss_release_msg+0x20>
     8f0:	93 e1 00 0c 	stw     r31,12(r1)
	PPC_ACQUIRE_BARRIER
	: "=&r" (t)
	: "r" (&v->counter)
	: "cc", "xer", "memory");

	return t;
     8f4:	80 01 00 0c 	lwz     r0,12(r1)
     8f8:	2f 80 00 00 	cmpwi   cr7,r0,0
     8fc:	40 9e 00 b4 	bne-    cr7,9b0 <gss_release_msg+0xf0>
		return;
	put_pipe_version();
     900:	4b ff ff 69 	bl      868 <put_pipe_version>
	BUG_ON(!list_empty(&gss_msg->list));
     904:	80 01 00 28 	lwz     r0,40(r1)
     908:	30 00 00 20 	addic   r0,r0,32
     90c:	90 01 00 10 	stw     r0,16(r1)
 * list_empty - tests whether a list is empty
 * @head: the list to test.
 */
static inline int list_empty(const struct list_head *head)
{
	return head->next == head;
     910:	80 01 00 10 	lwz     r0,16(r1)
     914:	7c 09 03 78 	mr      r9,r0
     918:	80 09 00 00 	lwz     r0,0(r9)
     91c:	81 21 00 10 	lwz     r9,16(r1)
     920:	7f 89 00 00 	cmpw    cr7,r9,r0
     924:	7c 00 00 26 	mfcr    r0
     928:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
     92c:	2f 80 00 00 	cmpwi   cr7,r0,0
     930:	7c 00 00 26 	mfcr    r0
     934:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
     938:	0f 00 00 00 	twnei   r0,0
	if (gss_msg->ctx != NULL)
     93c:	80 01 00 28 	lwz     r0,40(r1)
     940:	7c 09 03 78 	mr      r9,r0
     944:	80 09 00 90 	lwz     r0,144(r9)
     948:	2f 80 00 00 	cmpwi   cr7,r0,0
     94c:	41 9e 00 48 	beq-    cr7,994 <gss_release_msg+0xd4>
		gss_put_ctx(gss_msg->ctx);
     950:	80 01 00 28 	lwz     r0,40(r1)
     954:	7c 09 03 78 	mr      r9,r0
     958:	80 09 00 90 	lwz     r0,144(r9)
     95c:	90 01 00 14 	stw     r0,20(r1)
}

static inline void
gss_put_ctx(struct gss_cl_ctx *ctx)
{
	if (atomic_dec_and_test(&ctx->count))
     960:	80 01 00 14 	lwz     r0,20(r1)
     964:	90 01 00 18 	stw     r0,24(r1)
	PPC405_ERR77(0,%1)
"	stwcx.	%0,0,%1\n\
	bne-	1b"
	PPC_ACQUIRE_BARRIER
	: "=&r" (t)
	: "r" (&v->counter)
     968:	80 01 00 18 	lwz     r0,24(r1)

static __inline__ int atomic_dec_return(atomic_t *v)
{
	int t;

	__asm__ __volatile__(
     96c:	7f e0 00 28 	lwarx   r31,0,r0
     970:	33 ff ff ff 	addic   r31,r31,-1
     974:	7f e0 01 2d 	stwcx.  r31,0,r0
     978:	40 a2 ff f4 	bne-    96c <gss_release_msg+0xac>
     97c:	93 e1 00 1c 	stw     r31,28(r1)
	PPC_ACQUIRE_BARRIER
	: "=&r" (t)
	: "r" (&v->counter)
	: "cc", "xer", "memory");

	return t;
     980:	80 01 00 1c 	lwz     r0,28(r1)
     984:	2f 80 00 00 	cmpwi   cr7,r0,0
     988:	40 9e 00 0c 	bne-    cr7,994 <gss_release_msg+0xd4>
		gss_free_ctx(ctx);
     98c:	80 61 00 14 	lwz     r3,20(r1)
     990:	48 00 1f bd 	bl      294c <gss_free_ctx>
		return;
	put_pipe_version();
	BUG_ON(!list_empty(&gss_msg->list));
	if (gss_msg->ctx != NULL)
		gss_put_ctx(gss_msg->ctx);
	rpc_destroy_wait_queue(&gss_msg->rpc_waitqueue);
     994:	80 01 00 28 	lwz     r0,40(r1)
     998:	30 00 00 30 	addic   r0,r0,48
     99c:	7c 03 03 78 	mr      r3,r0
     9a0:	48 00 00 01 	bl      9a0 <gss_release_msg+0xe0>
	kfree(gss_msg);
     9a4:	80 61 00 28 	lwz     r3,40(r1)
     9a8:	48 00 00 01 	bl      9a8 <gss_release_msg+0xe8>
     9ac:	48 00 00 08 	b       9b4 <gss_release_msg+0xf4>

static void
gss_release_msg(struct gss_upcall_msg *gss_msg)
{
	if (!atomic_dec_and_test(&gss_msg->count))
		return;
     9b0:	60 00 00 00 	nop
	BUG_ON(!list_empty(&gss_msg->list));
	if (gss_msg->ctx != NULL)
		gss_put_ctx(gss_msg->ctx);
	rpc_destroy_wait_queue(&gss_msg->rpc_waitqueue);
	kfree(gss_msg);
}
     9b4:	80 01 00 44 	lwz     r0,68(r1)
     9b8:	7c 08 03 a6 	mtlr    r0
     9bc:	83 e1 00 3c 	lwz     r31,60(r1)
     9c0:	38 21 00 40 	addi    r1,r1,64
     9c4:	4e 80 00 20 	blr

000009c8 <__gss_find_upcall>:

static struct gss_upcall_msg *
__gss_find_upcall(struct rpc_inode *rpci, uid_t uid)
{
     9c8:	94 21 ff c0 	stwu    r1,-64(r1)
     9cc:	7c 08 02 a6 	mflr    r0
     9d0:	90 01 00 44 	stw     r0,68(r1)
     9d4:	93 e1 00 3c 	stw     r31,60(r1)
     9d8:	90 61 00 28 	stw     r3,40(r1)
     9dc:	90 81 00 2c 	stw     r4,44(r1)
	struct gss_upcall_msg *pos;
	list_for_each_entry(pos, &rpci->in_downcall, list) {
     9e0:	80 01 00 28 	lwz     r0,40(r1)
     9e4:	7c 09 03 78 	mr      r9,r0
     9e8:	80 09 01 3c 	lwz     r0,316(r9)
     9ec:	90 01 00 0c 	stw     r0,12(r1)
     9f0:	80 01 00 0c 	lwz     r0,12(r1)
     9f4:	30 00 ff e0 	addic   r0,r0,-32
     9f8:	90 01 00 08 	stw     r0,8(r1)
     9fc:	48 00 00 a4 	b       aa0 <__gss_find_upcall+0xd8>
		if (pos->uid != uid)
     a00:	80 01 00 08 	lwz     r0,8(r1)
     a04:	7c 0b 03 78 	mr      r11,r0
     a08:	81 2b 00 04 	lwz     r9,4(r11)
     a0c:	80 01 00 2c 	lwz     r0,44(r1)
     a10:	7f 89 00 00 	cmpw    cr7,r9,r0
     a14:	41 9e 00 24 	beq-    cr7,a38 <__gss_find_upcall+0x70>

static struct gss_upcall_msg *
__gss_find_upcall(struct rpc_inode *rpci, uid_t uid)
{
	struct gss_upcall_msg *pos;
	list_for_each_entry(pos, &rpci->in_downcall, list) {
     a18:	80 01 00 08 	lwz     r0,8(r1)
     a1c:	7c 09 03 78 	mr      r9,r0
     a20:	80 09 00 20 	lwz     r0,32(r9)
     a24:	90 01 00 10 	stw     r0,16(r1)
     a28:	80 01 00 10 	lwz     r0,16(r1)
     a2c:	30 00 ff e0 	addic   r0,r0,-32
     a30:	90 01 00 08 	stw     r0,8(r1)
     a34:	48 00 00 6c 	b       aa0 <__gss_find_upcall+0xd8>
		if (pos->uid != uid)
			continue;
		atomic_inc(&pos->count);
     a38:	80 01 00 08 	lwz     r0,8(r1)
     a3c:	90 01 00 14 	stw     r0,20(r1)
	addic	%0,%0,1\n"
	PPC405_ERR77(0,%2)
"	stwcx.	%0,0,%2 \n\
	bne-	1b"
	: "=&r" (t), "+m" (v->counter)
	: "r" (&v->counter)
     a40:	80 01 00 14 	lwz     r0,20(r1)
"1:	lwarx	%0,0,%2		# atomic_inc\n\
	addic	%0,%0,1\n"
	PPC405_ERR77(0,%2)
"	stwcx.	%0,0,%2 \n\
	bne-	1b"
	: "=&r" (t), "+m" (v->counter)
     a44:	81 61 00 14 	lwz     r11,20(r1)
     a48:	81 21 00 14 	lwz     r9,20(r1)

static __inline__ void atomic_inc(atomic_t *v)
{
	int t;

	__asm__ __volatile__(
     a4c:	7f e0 00 28 	lwarx   r31,0,r0
     a50:	33 ff 00 01 	addic   r31,r31,1
     a54:	7f e0 01 2d 	stwcx.  r31,0,r0
     a58:	40 a2 ff f4 	bne-    a4c <__gss_find_upcall+0x84>
     a5c:	93 e1 00 18 	stw     r31,24(r1)
		dprintk("RPC:       gss_find_upcall found msg %p\n", pos);
     a60:	3c 00 00 00 	lis     r0,0
     a64:	7c 0b 03 78 	mr      r11,r0
     a68:	80 0b 00 00 	lwz     r0,0(r11)
     a6c:	54 00 06 f6 	rlwinm  r0,r0,0,27,27
     a70:	2f 80 00 00 	cmpwi   cr7,r0,0
     a74:	7c 00 00 26 	mfcr    r0
     a78:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
     a7c:	68 00 00 01 	xori    r0,r0,1
     a80:	2f 80 00 00 	cmpwi   cr7,r0,0
     a84:	41 9e 00 14 	beq-    cr7,a98 <__gss_find_upcall+0xd0>
     a88:	3c 00 00 00 	lis     r0,0
     a8c:	30 60 00 f8 	addic   r3,r0,248
     a90:	80 81 00 08 	lwz     r4,8(r1)
     a94:	48 00 00 01 	bl      a94 <__gss_find_upcall+0xcc>
		return pos;
     a98:	80 01 00 08 	lwz     r0,8(r1)
     a9c:	48 00 00 84 	b       b20 <__gss_find_upcall+0x158>

static struct gss_upcall_msg *
__gss_find_upcall(struct rpc_inode *rpci, uid_t uid)
{
	struct gss_upcall_msg *pos;
	list_for_each_entry(pos, &rpci->in_downcall, list) {
     aa0:	80 01 00 08 	lwz     r0,8(r1)
     aa4:	7c 09 03 78 	mr      r9,r0
     aa8:	80 09 00 20 	lwz     r0,32(r9)
     aac:	90 01 00 1c 	stw     r0,28(r1)
#define ARCH_HAS_PREFETCHW
#define ARCH_HAS_SPINLOCK_PREFETCH

static inline void prefetch(const void *x)
{
	if (unlikely(!x))
     ab0:	80 01 00 1c 	lwz     r0,28(r1)
     ab4:	2f 80 00 00 	cmpwi   cr7,r0,0
     ab8:	7c 00 00 26 	mfcr    r0
     abc:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
     ac0:	2f 80 00 00 	cmpwi   cr7,r0,0
     ac4:	40 9e 00 0c 	bne-    cr7,ad0 <__gss_find_upcall+0x108>
		return;

	__asm__ __volatile__ ("dcbt 0,%0" : : "r" (x));
     ac8:	80 01 00 1c 	lwz     r0,28(r1)
     acc:	7c 00 02 2c 	dcbt    r0,r0
     ad0:	80 01 00 08 	lwz     r0,8(r1)
     ad4:	31 20 00 20 	addic   r9,r0,32
     ad8:	80 01 00 28 	lwz     r0,40(r1)
     adc:	30 00 01 3c 	addic   r0,r0,316
     ae0:	7f 89 00 00 	cmpw    cr7,r9,r0
     ae4:	40 9e ff 1c 	bne+    cr7,a00 <__gss_find_upcall+0x38>
			continue;
		atomic_inc(&pos->count);
		dprintk("RPC:       gss_find_upcall found msg %p\n", pos);
		return pos;
	}
	dprintk("RPC:       gss_find_upcall found nothing\n");
     ae8:	3c 00 00 00 	lis     r0,0
     aec:	7c 0b 03 78 	mr      r11,r0
     af0:	80 0b 00 00 	lwz     r0,0(r11)
     af4:	54 00 06 f6 	rlwinm  r0,r0,0,27,27
     af8:	2f 80 00 00 	cmpwi   cr7,r0,0
     afc:	7c 00 00 26 	mfcr    r0
     b00:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
     b04:	68 00 00 01 	xori    r0,r0,1
     b08:	2f 80 00 00 	cmpwi   cr7,r0,0
     b0c:	41 9e 00 10 	beq-    cr7,b1c <__gss_find_upcall+0x154>
     b10:	3c 00 00 00 	lis     r0,0
     b14:	30 60 01 24 	addic   r3,r0,292
     b18:	48 00 00 01 	bl      b18 <__gss_find_upcall+0x150>
	return NULL;
     b1c:	38 00 00 00 	li      r0,0
}
     b20:	7c 03 03 78 	mr      r3,r0
     b24:	80 01 00 44 	lwz     r0,68(r1)
     b28:	7c 08 03 a6 	mtlr    r0
     b2c:	83 e1 00 3c 	lwz     r31,60(r1)
     b30:	38 21 00 40 	addi    r1,r1,64
     b34:	4e 80 00 20 	blr

00000b38 <__gss_unhash_msg>:
	return gss_msg;
}

static void
__gss_unhash_msg(struct gss_upcall_msg *gss_msg)
{
     b38:	94 21 ff c0 	stwu    r1,-64(r1)
     b3c:	7c 08 02 a6 	mflr    r0
     b40:	90 01 00 44 	stw     r0,68(r1)
     b44:	93 e1 00 3c 	stw     r31,60(r1)
     b48:	90 61 00 28 	stw     r3,40(r1)
	list_del_init(&gss_msg->list);
     b4c:	80 01 00 28 	lwz     r0,40(r1)
     b50:	30 00 00 20 	addic   r0,r0,32
     b54:	90 01 00 08 	stw     r0,8(r1)
     b58:	80 01 00 08 	lwz     r0,8(r1)
     b5c:	90 01 00 0c 	stw     r0,12(r1)
 * in an undefined state.
 */
#ifndef CONFIG_DEBUG_LIST
static inline void __list_del_entry(struct list_head *entry)
{
	__list_del(entry->prev, entry->next);
     b60:	80 01 00 0c 	lwz     r0,12(r1)
     b64:	7c 0b 03 78 	mr      r11,r0
     b68:	81 2b 00 04 	lwz     r9,4(r11)
     b6c:	80 01 00 0c 	lwz     r0,12(r1)
     b70:	7c 0b 03 78 	mr      r11,r0
     b74:	80 0b 00 00 	lwz     r0,0(r11)
     b78:	91 21 00 10 	stw     r9,16(r1)
     b7c:	90 01 00 14 	stw     r0,20(r1)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 */
static inline void __list_del(struct list_head * prev, struct list_head * next)
{
	next->prev = prev;
     b80:	80 01 00 14 	lwz     r0,20(r1)
     b84:	81 21 00 10 	lwz     r9,16(r1)
     b88:	7c 0b 03 78 	mr      r11,r0
     b8c:	91 2b 00 04 	stw     r9,4(r11)
	prev->next = next;
     b90:	80 01 00 10 	lwz     r0,16(r1)
     b94:	81 21 00 14 	lwz     r9,20(r1)
     b98:	7c 0b 03 78 	mr      r11,r0
     b9c:	91 2b 00 00 	stw     r9,0(r11)
     ba0:	80 01 00 08 	lwz     r0,8(r1)
     ba4:	90 01 00 18 	stw     r0,24(r1)
#define LIST_HEAD(name) \
	struct list_head name = LIST_HEAD_INIT(name)

static inline void INIT_LIST_HEAD(struct list_head *list)
{
	list->next = list;
     ba8:	80 01 00 18 	lwz     r0,24(r1)
     bac:	81 21 00 18 	lwz     r9,24(r1)
     bb0:	7c 0b 03 78 	mr      r11,r0
     bb4:	91 2b 00 00 	stw     r9,0(r11)
	list->prev = list;
     bb8:	80 01 00 18 	lwz     r0,24(r1)
     bbc:	81 21 00 18 	lwz     r9,24(r1)
     bc0:	7c 0b 03 78 	mr      r11,r0
     bc4:	91 2b 00 04 	stw     r9,4(r11)
	rpc_wake_up_status(&gss_msg->rpc_waitqueue, gss_msg->msg.errno);
     bc8:	80 01 00 28 	lwz     r0,40(r1)
     bcc:	31 20 00 30 	addic   r9,r0,48
     bd0:	80 01 00 28 	lwz     r0,40(r1)
     bd4:	7c 0b 03 78 	mr      r11,r0
     bd8:	80 0b 00 1c 	lwz     r0,28(r11)
     bdc:	7d 23 4b 78 	mr      r3,r9
     be0:	7c 04 03 78 	mr      r4,r0
     be4:	48 00 00 01 	bl      be4 <__gss_unhash_msg+0xac>
	wake_up_all(&gss_msg->waitqueue);
     be8:	80 01 00 28 	lwz     r0,40(r1)
     bec:	30 00 00 88 	addic   r0,r0,136
     bf0:	7c 03 03 78 	mr      r3,r0
     bf4:	38 80 00 03 	li      r4,3
     bf8:	38 a0 00 00 	li      r5,0
     bfc:	38 c0 00 00 	li      r6,0
     c00:	48 00 00 01 	bl      c00 <__gss_unhash_msg+0xc8>
	atomic_dec(&gss_msg->count);
     c04:	80 01 00 28 	lwz     r0,40(r1)
     c08:	90 01 00 1c 	stw     r0,28(r1)
	addic	%0,%0,-1\n"
	PPC405_ERR77(0,%2)\
"	stwcx.	%0,0,%2\n\
	bne-	1b"
	: "=&r" (t), "+m" (v->counter)
	: "r" (&v->counter)
     c0c:	80 01 00 1c 	lwz     r0,28(r1)
"1:	lwarx	%0,0,%2		# atomic_dec\n\
	addic	%0,%0,-1\n"
	PPC405_ERR77(0,%2)\
"	stwcx.	%0,0,%2\n\
	bne-	1b"
	: "=&r" (t), "+m" (v->counter)
     c10:	81 61 00 1c 	lwz     r11,28(r1)
     c14:	81 21 00 1c 	lwz     r9,28(r1)

static __inline__ void atomic_dec(atomic_t *v)
{
	int t;

	__asm__ __volatile__(
     c18:	7f e0 00 28 	lwarx   r31,0,r0
     c1c:	33 ff ff ff 	addic   r31,r31,-1
     c20:	7f e0 01 2d 	stwcx.  r31,0,r0
     c24:	40 a2 ff f4 	bne-    c18 <__gss_unhash_msg+0xe0>
     c28:	93 e1 00 20 	stw     r31,32(r1)
}
     c2c:	80 01 00 44 	lwz     r0,68(r1)
     c30:	7c 08 03 a6 	mtlr    r0
     c34:	83 e1 00 3c 	lwz     r31,60(r1)
     c38:	38 21 00 40 	addi    r1,r1,64
     c3c:	4e 80 00 20 	blr

00000c40 <gss_unhash_msg>:

static void
gss_unhash_msg(struct gss_upcall_msg *gss_msg)
{
     c40:	94 21 ff d0 	stwu    r1,-48(r1)
     c44:	7c 08 02 a6 	mflr    r0
     c48:	90 01 00 34 	stw     r0,52(r1)
     c4c:	90 61 00 28 	stw     r3,40(r1)
	struct inode *inode = &gss_msg->inode->vfs_inode;
     c50:	80 01 00 28 	lwz     r0,40(r1)
     c54:	7c 09 03 78 	mr      r9,r0
     c58:	80 09 00 2c 	lwz     r0,44(r9)
     c5c:	90 01 00 08 	stw     r0,8(r1)

	if (list_empty(&gss_msg->list))
     c60:	80 01 00 28 	lwz     r0,40(r1)
     c64:	30 00 00 20 	addic   r0,r0,32
     c68:	90 01 00 0c 	stw     r0,12(r1)
 * list_empty - tests whether a list is empty
 * @head: the list to test.
 */
static inline int list_empty(const struct list_head *head)
{
	return head->next == head;
     c6c:	80 01 00 0c 	lwz     r0,12(r1)
     c70:	7c 09 03 78 	mr      r9,r0
     c74:	80 09 00 00 	lwz     r0,0(r9)
     c78:	81 21 00 0c 	lwz     r9,12(r1)
     c7c:	7f 89 00 00 	cmpw    cr7,r9,r0
     c80:	7c 00 00 26 	mfcr    r0
     c84:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
     c88:	2f 80 00 00 	cmpwi   cr7,r0,0
     c8c:	40 9e 00 58 	bne-    cr7,ce4 <gss_unhash_msg+0xa4>
		return;
	spin_lock(&inode->i_lock);
     c90:	80 01 00 08 	lwz     r0,8(r1)
     c94:	30 00 00 14 	addic   r0,r0,20
     c98:	90 01 00 14 	stw     r0,20(r1)
	if (!list_empty(&gss_msg->list))
     c9c:	80 01 00 28 	lwz     r0,40(r1)
     ca0:	30 00 00 20 	addic   r0,r0,32
     ca4:	90 01 00 10 	stw     r0,16(r1)
     ca8:	80 01 00 10 	lwz     r0,16(r1)
     cac:	7c 09 03 78 	mr      r9,r0
     cb0:	80 09 00 00 	lwz     r0,0(r9)
     cb4:	81 21 00 10 	lwz     r9,16(r1)
     cb8:	7f 89 00 00 	cmpw    cr7,r9,r0
     cbc:	7c 00 00 26 	mfcr    r0
     cc0:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
     cc4:	2f 80 00 00 	cmpwi   cr7,r0,0
     cc8:	40 9e 00 0c 	bne-    cr7,cd4 <gss_unhash_msg+0x94>
		__gss_unhash_msg(gss_msg);
     ccc:	80 61 00 28 	lwz     r3,40(r1)
     cd0:	4b ff fe 69 	bl      b38 <__gss_unhash_msg>
	spin_unlock(&inode->i_lock);
     cd4:	80 01 00 08 	lwz     r0,8(r1)
     cd8:	30 00 00 14 	addic   r0,r0,20
     cdc:	90 01 00 18 	stw     r0,24(r1)
     ce0:	48 00 00 08 	b       ce8 <gss_unhash_msg+0xa8>
gss_unhash_msg(struct gss_upcall_msg *gss_msg)
{
	struct inode *inode = &gss_msg->inode->vfs_inode;

	if (list_empty(&gss_msg->list))
		return;
     ce4:	60 00 00 00 	nop
	spin_lock(&inode->i_lock);
	if (!list_empty(&gss_msg->list))
		__gss_unhash_msg(gss_msg);
	spin_unlock(&inode->i_lock);
}
     ce8:	80 01 00 34 	lwz     r0,52(r1)
     cec:	7c 08 03 a6 	mtlr    r0
     cf0:	38 21 00 30 	addi    r1,r1,48
     cf4:	4e 80 00 20 	blr

00000cf8 <gss_handle_downcall_result>:

static void
gss_handle_downcall_result(struct gss_cred *gss_cred, struct gss_upcall_msg *gss_msg)
{
     cf8:	94 21 ff b0 	stwu    r1,-80(r1)
     cfc:	7c 08 02 a6 	mflr    r0
     d00:	90 01 00 54 	stw     r0,84(r1)
     d04:	93 e1 00 4c 	stw     r31,76(r1)
     d08:	90 61 00 38 	stw     r3,56(r1)
     d0c:	90 81 00 3c 	stw     r4,60(r1)
	switch (gss_msg->msg.errno) {
     d10:	80 01 00 3c 	lwz     r0,60(r1)
     d14:	7c 09 03 78 	mr      r9,r0
     d18:	80 09 00 1c 	lwz     r0,28(r9)
     d1c:	39 20 ff 81 	li      r9,-127
     d20:	7f 80 48 00 	cmpw    cr7,r0,r9
     d24:	41 9e 00 bc 	beq-    cr7,de0 <gss_handle_downcall_result+0xe8>
     d28:	2f 80 00 00 	cmpwi   cr7,r0,0
     d2c:	40 9e 01 38 	bne-    cr7,e64 <gss_handle_downcall_result+0x16c>
	case 0:
		if (gss_msg->ctx == NULL)
     d30:	80 01 00 3c 	lwz     r0,60(r1)
     d34:	7c 0b 03 78 	mr      r11,r0
     d38:	80 0b 00 90 	lwz     r0,144(r11)
     d3c:	2f 80 00 00 	cmpwi   cr7,r0,0
     d40:	41 9e 01 20 	beq-    cr7,e60 <gss_handle_downcall_result+0x168>
			break;
		clear_bit(RPCAUTH_CRED_NEGATIVE, &gss_cred->gc_base.cr_flags);
     d44:	80 01 00 38 	lwz     r0,56(r1)
     d48:	30 00 00 28 	addic   r0,r0,40
     d4c:	39 20 00 03 	li      r9,3
     d50:	91 21 00 08 	stw     r9,8(r1)
     d54:	90 01 00 0c 	stw     r0,12(r1)
	set_bits(BITOP_MASK(nr), addr + BITOP_WORD(nr));
}

static __inline__ void clear_bit(int nr, volatile unsigned long *addr)
{
	clear_bits(BITOP_MASK(nr), addr + BITOP_WORD(nr));
     d58:	80 01 00 08 	lwz     r0,8(r1)
     d5c:	7c 09 2e 70 	srawi   r9,r0,5
     d60:	7d 29 01 94 	addze   r9,r9
     d64:	55 29 28 34 	rlwinm  r9,r9,5,0,26
     d68:	7c 09 00 50 	subf    r0,r9,r0
     d6c:	39 20 00 01 	li      r9,1
     d70:	7d 29 00 30 	slw     r9,r9,r0
     d74:	80 01 00 08 	lwz     r0,8(r1)
     d78:	7c 00 2e 70 	srawi   r0,r0,5
     d7c:	7c 00 01 94 	addze   r0,r0
     d80:	54 00 10 3a 	rlwinm  r0,r0,2,0,29
     d84:	81 61 00 0c 	lwz     r11,12(r1)
     d88:	7c 0b 02 14 	add     r0,r11,r0
     d8c:	91 21 00 10 	stw     r9,16(r1)
     d90:	90 01 00 14 	stw     r0,20(r1)
	: "r" (mask), "r" (p)			\
	: "cc", "memory");			\
}

DEFINE_BITOP(set_bits, or, "", "")
DEFINE_BITOP(clear_bits, andc, "", "")
     d94:	80 01 00 14 	lwz     r0,20(r1)
     d98:	90 01 00 18 	stw     r0,24(r1)
     d9c:	81 41 00 18 	lwz     r10,24(r1)
     da0:	80 01 00 10 	lwz     r0,16(r1)
     da4:	81 21 00 18 	lwz     r9,24(r1)
     da8:	81 61 00 18 	lwz     r11,24(r1)
     dac:	7f e0 48 28 	lwarx   r31,0,r9
     db0:	7f ff 00 78 	andc    r31,r31,r0
     db4:	7f e0 49 2d 	stwcx.  r31,0,r9
     db8:	40 a2 ff f4 	bne-    dac <gss_handle_downcall_result+0xb4>
     dbc:	93 e1 00 1c 	stw     r31,28(r1)
		gss_cred_set_ctx(&gss_cred->gc_base, gss_msg->ctx);
     dc0:	81 21 00 38 	lwz     r9,56(r1)
     dc4:	80 01 00 3c 	lwz     r0,60(r1)
     dc8:	7c 0b 03 78 	mr      r11,r0
     dcc:	80 0b 00 90 	lwz     r0,144(r11)
     dd0:	7d 23 4b 78 	mr      r3,r9
     dd4:	7c 04 03 78 	mr      r4,r0
     dd8:	4b ff f2 29 	bl      0 <gss_cred_set_ctx>
		break;
     ddc:	48 00 00 88 	b       e64 <gss_handle_downcall_result+0x16c>
	case -EKEYEXPIRED:
		set_bit(RPCAUTH_CRED_NEGATIVE, &gss_cred->gc_base.cr_flags);
     de0:	80 01 00 38 	lwz     r0,56(r1)
     de4:	30 00 00 28 	addic   r0,r0,40
     de8:	39 20 00 03 	li      r9,3
     dec:	91 21 00 20 	stw     r9,32(r1)
     df0:	90 01 00 24 	stw     r0,36(r1)
DEFINE_BITOP(clear_bits_unlock, andc, PPC_RELEASE_BARRIER, "")
DEFINE_BITOP(change_bits, xor, "", "")

static __inline__ void set_bit(int nr, volatile unsigned long *addr)
{
	set_bits(BITOP_MASK(nr), addr + BITOP_WORD(nr));
     df4:	80 01 00 20 	lwz     r0,32(r1)
     df8:	7c 09 2e 70 	srawi   r9,r0,5
     dfc:	7d 29 01 94 	addze   r9,r9
     e00:	55 29 28 34 	rlwinm  r9,r9,5,0,26
     e04:	7c 09 00 50 	subf    r0,r9,r0
     e08:	39 20 00 01 	li      r9,1
     e0c:	7d 29 00 30 	slw     r9,r9,r0
     e10:	80 01 00 20 	lwz     r0,32(r1)
     e14:	7c 00 2e 70 	srawi   r0,r0,5
     e18:	7c 00 01 94 	addze   r0,r0
     e1c:	54 00 10 3a 	rlwinm  r0,r0,2,0,29
     e20:	81 61 00 24 	lwz     r11,36(r1)
     e24:	7c 0b 02 14 	add     r0,r11,r0
     e28:	91 21 00 28 	stw     r9,40(r1)
     e2c:	90 01 00 2c 	stw     r0,44(r1)
	: "=&r" (old), "+m" (*p)		\
	: "r" (mask), "r" (p)			\
	: "cc", "memory");			\
}

DEFINE_BITOP(set_bits, or, "", "")
     e30:	80 01 00 2c 	lwz     r0,44(r1)
     e34:	90 01 00 30 	stw     r0,48(r1)
     e38:	81 41 00 30 	lwz     r10,48(r1)
     e3c:	80 01 00 28 	lwz     r0,40(r1)
     e40:	81 21 00 30 	lwz     r9,48(r1)
     e44:	81 61 00 30 	lwz     r11,48(r1)
     e48:	7f e0 48 28 	lwarx   r31,0,r9
     e4c:	7f ff 03 78 	or      r31,r31,r0
     e50:	7f e0 49 2d 	stwcx.  r31,0,r9
     e54:	40 a2 ff f4 	bne-    e48 <gss_handle_downcall_result+0x150>
     e58:	93 e1 00 34 	stw     r31,52(r1)
     e5c:	48 00 00 08 	b       e64 <gss_handle_downcall_result+0x16c>
gss_handle_downcall_result(struct gss_cred *gss_cred, struct gss_upcall_msg *gss_msg)
{
	switch (gss_msg->msg.errno) {
	case 0:
		if (gss_msg->ctx == NULL)
			break;
     e60:	60 00 00 00 	nop
		gss_cred_set_ctx(&gss_cred->gc_base, gss_msg->ctx);
		break;
	case -EKEYEXPIRED:
		set_bit(RPCAUTH_CRED_NEGATIVE, &gss_cred->gc_base.cr_flags);
	}
	gss_cred->gc_upcall_timestamp = jiffies;
     e64:	3c 00 00 00 	lis     r0,0
     e68:	7c 0b 03 78 	mr      r11,r0
     e6c:	81 2b 00 00 	lwz     r9,0(r11)
     e70:	80 01 00 38 	lwz     r0,56(r1)
     e74:	7c 0b 03 78 	mr      r11,r0
     e78:	91 2b 00 40 	stw     r9,64(r11)
	gss_cred->gc_upcall = NULL;
     e7c:	80 01 00 38 	lwz     r0,56(r1)
     e80:	39 20 00 00 	li      r9,0
     e84:	7c 0b 03 78 	mr      r11,r0
     e88:	91 2b 00 3c 	stw     r9,60(r11)
	rpc_wake_up_status(&gss_msg->rpc_waitqueue, gss_msg->msg.errno);
     e8c:	80 01 00 3c 	lwz     r0,60(r1)
     e90:	31 20 00 30 	addic   r9,r0,48
     e94:	80 01 00 3c 	lwz     r0,60(r1)
     e98:	7c 0b 03 78 	mr      r11,r0
     e9c:	80 0b 00 1c 	lwz     r0,28(r11)
     ea0:	7d 23 4b 78 	mr      r3,r9
     ea4:	7c 04 03 78 	mr      r4,r0
     ea8:	48 00 00 01 	bl      ea8 <gss_handle_downcall_result+0x1b0>
}
     eac:	80 01 00 54 	lwz     r0,84(r1)
     eb0:	7c 08 03 a6 	mtlr    r0
     eb4:	83 e1 00 4c 	lwz     r31,76(r1)
     eb8:	38 21 00 50 	addi    r1,r1,80
     ebc:	4e 80 00 20 	blr

00000ec0 <gss_upcall_callback>:

static void
gss_upcall_callback(struct rpc_task *task)
{
     ec0:	94 21 ff d0 	stwu    r1,-48(r1)
     ec4:	7c 08 02 a6 	mflr    r0
     ec8:	90 01 00 34 	stw     r0,52(r1)
     ecc:	90 61 00 28 	stw     r3,40(r1)
	struct gss_cred *gss_cred = container_of(task->tk_rqstp->rq_cred,
     ed0:	80 01 00 28 	lwz     r0,40(r1)
     ed4:	7c 09 03 78 	mr      r9,r0
     ed8:	80 09 00 10 	lwz     r0,16(r9)
     edc:	7c 0b 03 78 	mr      r11,r0
     ee0:	80 0b 00 58 	lwz     r0,88(r11)
     ee4:	90 01 00 08 	stw     r0,8(r1)
     ee8:	80 01 00 08 	lwz     r0,8(r1)
     eec:	90 01 00 0c 	stw     r0,12(r1)
			struct gss_cred, gc_base);
	struct gss_upcall_msg *gss_msg = gss_cred->gc_upcall;
     ef0:	80 01 00 0c 	lwz     r0,12(r1)
     ef4:	7c 09 03 78 	mr      r9,r0
     ef8:	80 09 00 3c 	lwz     r0,60(r9)
     efc:	90 01 00 10 	stw     r0,16(r1)
	struct inode *inode = &gss_msg->inode->vfs_inode;
     f00:	80 01 00 10 	lwz     r0,16(r1)
     f04:	7c 0b 03 78 	mr      r11,r0
     f08:	80 0b 00 2c 	lwz     r0,44(r11)
     f0c:	90 01 00 14 	stw     r0,20(r1)

	spin_lock(&inode->i_lock);
     f10:	80 01 00 14 	lwz     r0,20(r1)
     f14:	30 00 00 14 	addic   r0,r0,20
     f18:	90 01 00 18 	stw     r0,24(r1)
	gss_handle_downcall_result(gss_cred, gss_msg);
     f1c:	80 61 00 0c 	lwz     r3,12(r1)
     f20:	80 81 00 10 	lwz     r4,16(r1)
     f24:	4b ff fd d5 	bl      cf8 <gss_handle_downcall_result>
	spin_unlock(&inode->i_lock);
     f28:	80 01 00 14 	lwz     r0,20(r1)
     f2c:	30 00 00 14 	addic   r0,r0,20
     f30:	90 01 00 1c 	stw     r0,28(r1)
	task->tk_status = gss_msg->msg.errno;
     f34:	80 01 00 10 	lwz     r0,16(r1)
     f38:	7c 0b 03 78 	mr      r11,r0
     f3c:	81 2b 00 1c 	lwz     r9,28(r11)
     f40:	80 01 00 28 	lwz     r0,40(r1)
     f44:	7c 0b 03 78 	mr      r11,r0
     f48:	91 2b 00 6c 	stw     r9,108(r11)
	gss_release_msg(gss_msg);
     f4c:	80 61 00 10 	lwz     r3,16(r1)
     f50:	4b ff f9 71 	bl      8c0 <gss_release_msg>
}
     f54:	80 01 00 34 	lwz     r0,52(r1)
     f58:	7c 08 03 a6 	mtlr    r0
     f5c:	38 21 00 30 	addi    r1,r1,48
     f60:	4e 80 00 20 	blr

00000f64 <gss_encode_v0_msg>:

static void gss_encode_v0_msg(struct gss_upcall_msg *gss_msg)
{
     f64:	94 21 ff f0 	stwu    r1,-16(r1)
     f68:	90 61 00 08 	stw     r3,8(r1)
	gss_msg->msg.data = &gss_msg->uid;
     f6c:	80 01 00 08 	lwz     r0,8(r1)
     f70:	31 20 00 04 	addic   r9,r0,4
     f74:	80 01 00 08 	lwz     r0,8(r1)
     f78:	7c 0b 03 78 	mr      r11,r0
     f7c:	91 2b 00 10 	stw     r9,16(r11)
	gss_msg->msg.len = sizeof(gss_msg->uid);
     f80:	80 01 00 08 	lwz     r0,8(r1)
     f84:	39 20 00 04 	li      r9,4
     f88:	7c 0b 03 78 	mr      r11,r0
     f8c:	91 2b 00 14 	stw     r9,20(r11)
}
     f90:	38 21 00 10 	addi    r1,r1,16
     f94:	4e 80 00 20 	blr

00000f98 <gss_encode_v1_msg>:

static void gss_encode_v1_msg(struct gss_upcall_msg *gss_msg,
				struct rpc_clnt *clnt, int machine_cred)
{
     f98:	94 21 ff d0 	stwu    r1,-48(r1)
     f9c:	7c 08 02 a6 	mflr    r0
     fa0:	90 01 00 34 	stw     r0,52(r1)
     fa4:	90 61 00 18 	stw     r3,24(r1)
     fa8:	90 81 00 1c 	stw     r4,28(r1)
     fac:	90 a1 00 20 	stw     r5,32(r1)
	struct gss_api_mech *mech = gss_msg->auth->mech;
     fb0:	80 01 00 18 	lwz     r0,24(r1)
     fb4:	7c 07 03 78 	mr      r7,r0
     fb8:	80 07 00 28 	lwz     r0,40(r7)
     fbc:	7c 08 03 78 	mr      r8,r0
     fc0:	80 08 00 24 	lwz     r0,36(r8)
     fc4:	90 01 00 0c 	stw     r0,12(r1)
	char *p = gss_msg->databuf;
     fc8:	80 01 00 18 	lwz     r0,24(r1)
     fcc:	30 00 00 94 	addic   r0,r0,148
     fd0:	90 01 00 08 	stw     r0,8(r1)
	int len = 0;
     fd4:	38 00 00 00 	li      r0,0
     fd8:	90 01 00 10 	stw     r0,16(r1)

	gss_msg->msg.len = sprintf(gss_msg->databuf, "mech=%s uid=%d ",
     fdc:	80 01 00 18 	lwz     r0,24(r1)
     fe0:	31 60 00 94 	addic   r11,r0,148
				   mech->gm_name,
     fe4:	80 01 00 0c 	lwz     r0,12(r1)
{
	struct gss_api_mech *mech = gss_msg->auth->mech;
	char *p = gss_msg->databuf;
	int len = 0;

	gss_msg->msg.len = sprintf(gss_msg->databuf, "mech=%s uid=%d ",
     fe8:	7c 0a 03 78 	mr      r10,r0
     fec:	81 2a 00 14 	lwz     r9,20(r10)
				   mech->gm_name,
				   gss_msg->uid);
     ff0:	80 01 00 18 	lwz     r0,24(r1)
{
	struct gss_api_mech *mech = gss_msg->auth->mech;
	char *p = gss_msg->databuf;
	int len = 0;

	gss_msg->msg.len = sprintf(gss_msg->databuf, "mech=%s uid=%d ",
     ff4:	7c 07 03 78 	mr      r7,r0
     ff8:	80 07 00 04 	lwz     r0,4(r7)
     ffc:	7d 63 5b 78 	mr      r3,r11
    1000:	3d 60 00 00 	lis     r11,0
    1004:	38 8b 01 50 	addi    r4,r11,336
    1008:	7d 25 4b 78 	mr      r5,r9
    100c:	7c 06 03 78 	mr      r6,r0
    1010:	48 00 00 01 	bl      1010 <gss_encode_v1_msg+0x78>
    1014:	7c 60 1b 78 	mr      r0,r3
    1018:	7c 09 03 78 	mr      r9,r0
    101c:	80 01 00 18 	lwz     r0,24(r1)
    1020:	7c 08 03 78 	mr      r8,r0
    1024:	91 28 00 14 	stw     r9,20(r8)
				   mech->gm_name,
				   gss_msg->uid);
	p += gss_msg->msg.len;
    1028:	80 01 00 18 	lwz     r0,24(r1)
    102c:	7c 09 03 78 	mr      r9,r0
    1030:	80 09 00 14 	lwz     r0,20(r9)
    1034:	81 21 00 08 	lwz     r9,8(r1)
    1038:	7c 09 02 14 	add     r0,r9,r0
    103c:	90 01 00 08 	stw     r0,8(r1)
	if (clnt->cl_principal) {
    1040:	80 01 00 1c 	lwz     r0,28(r1)
    1044:	7c 0a 03 78 	mr      r10,r0
    1048:	80 0a 00 f0 	lwz     r0,240(r10)
    104c:	2f 80 00 00 	cmpwi   cr7,r0,0
    1050:	41 9e 00 58 	beq-    cr7,10a8 <gss_encode_v1_msg+0x110>
		len = sprintf(p, "target=%s ", clnt->cl_principal);
    1054:	80 01 00 1c 	lwz     r0,28(r1)
    1058:	7c 0b 03 78 	mr      r11,r0
    105c:	80 0b 00 f0 	lwz     r0,240(r11)
    1060:	80 61 00 08 	lwz     r3,8(r1)
    1064:	3d 20 00 00 	lis     r9,0
    1068:	38 89 01 60 	addi    r4,r9,352
    106c:	7c 05 03 78 	mr      r5,r0
    1070:	48 00 00 01 	bl      1070 <gss_encode_v1_msg+0xd8>
    1074:	90 61 00 10 	stw     r3,16(r1)
		p += len;
    1078:	80 01 00 10 	lwz     r0,16(r1)
    107c:	81 21 00 08 	lwz     r9,8(r1)
    1080:	7c 09 02 14 	add     r0,r9,r0
    1084:	90 01 00 08 	stw     r0,8(r1)
		gss_msg->msg.len += len;
    1088:	80 01 00 18 	lwz     r0,24(r1)
    108c:	7c 07 03 78 	mr      r7,r0
    1090:	81 27 00 14 	lwz     r9,20(r7)
    1094:	80 01 00 10 	lwz     r0,16(r1)
    1098:	7d 29 02 14 	add     r9,r9,r0
    109c:	80 01 00 18 	lwz     r0,24(r1)
    10a0:	7c 08 03 78 	mr      r8,r0
    10a4:	91 28 00 14 	stw     r9,20(r8)
	}
	if (machine_cred) {
    10a8:	80 01 00 20 	lwz     r0,32(r1)
    10ac:	2f 80 00 00 	cmpwi   cr7,r0,0
    10b0:	41 9e 00 7c 	beq-    cr7,112c <gss_encode_v1_msg+0x194>
		len = sprintf(p, "service=* ");
    10b4:	80 01 00 08 	lwz     r0,8(r1)
    10b8:	3d 20 00 00 	lis     r9,0
    10bc:	39 29 01 6c 	addi    r9,r9,364
    10c0:	81 09 00 00 	lwz     r8,0(r9)
    10c4:	81 49 00 04 	lwz     r10,4(r9)
    10c8:	a1 69 00 08 	lhz     r11,8(r9)
    10cc:	89 29 00 0a 	lbz     r9,10(r9)
    10d0:	7c 07 03 78 	mr      r7,r0
    10d4:	91 07 00 00 	stw     r8,0(r7)
    10d8:	7c 08 03 78 	mr      r8,r0
    10dc:	91 48 00 04 	stw     r10,4(r8)
    10e0:	7c 0a 03 78 	mr      r10,r0
    10e4:	b1 6a 00 08 	sth     r11,8(r10)
    10e8:	7c 0b 03 78 	mr      r11,r0
    10ec:	99 2b 00 0a 	stb     r9,10(r11)
    10f0:	38 00 00 0a 	li      r0,10
    10f4:	90 01 00 10 	stw     r0,16(r1)
		p += len;
    10f8:	80 01 00 10 	lwz     r0,16(r1)
    10fc:	81 21 00 08 	lwz     r9,8(r1)
    1100:	7c 09 02 14 	add     r0,r9,r0
    1104:	90 01 00 08 	stw     r0,8(r1)
		gss_msg->msg.len += len;
    1108:	80 01 00 18 	lwz     r0,24(r1)
    110c:	7c 07 03 78 	mr      r7,r0
    1110:	81 27 00 14 	lwz     r9,20(r7)
    1114:	80 01 00 10 	lwz     r0,16(r1)
    1118:	7d 29 02 14 	add     r9,r9,r0
    111c:	80 01 00 18 	lwz     r0,24(r1)
    1120:	7c 08 03 78 	mr      r8,r0
    1124:	91 28 00 14 	stw     r9,20(r8)
    1128:	48 00 00 a8 	b       11d0 <gss_encode_v1_msg+0x238>
	} else if (!strcmp(clnt->cl_program->name, "nfs4_cb")) {
    112c:	80 01 00 1c 	lwz     r0,28(r1)
    1130:	7c 09 03 78 	mr      r9,r0
    1134:	80 09 00 cc 	lwz     r0,204(r9)
    1138:	7c 0a 03 78 	mr      r10,r0
    113c:	80 0a 00 00 	lwz     r0,0(r10)
    1140:	7c 03 03 78 	mr      r3,r0
    1144:	3c 00 00 00 	lis     r0,0
    1148:	30 80 01 78 	addic   r4,r0,376
    114c:	48 00 00 01 	bl      114c <gss_encode_v1_msg+0x1b4>
    1150:	7c 60 1b 78 	mr      r0,r3
    1154:	2f 80 00 00 	cmpwi   cr7,r0,0
    1158:	40 9e 00 78 	bne-    cr7,11d0 <gss_encode_v1_msg+0x238>
		len = sprintf(p, "service=nfs ");
    115c:	80 01 00 08 	lwz     r0,8(r1)
    1160:	3d 20 00 00 	lis     r9,0
    1164:	39 29 01 80 	addi    r9,r9,384
    1168:	81 09 00 00 	lwz     r8,0(r9)
    116c:	81 49 00 04 	lwz     r10,4(r9)
    1170:	81 69 00 08 	lwz     r11,8(r9)
    1174:	89 29 00 0c 	lbz     r9,12(r9)
    1178:	7c 07 03 78 	mr      r7,r0
    117c:	91 07 00 00 	stw     r8,0(r7)
    1180:	7c 08 03 78 	mr      r8,r0
    1184:	91 48 00 04 	stw     r10,4(r8)
    1188:	7c 0a 03 78 	mr      r10,r0
    118c:	91 6a 00 08 	stw     r11,8(r10)
    1190:	7c 0b 03 78 	mr      r11,r0
    1194:	99 2b 00 0c 	stb     r9,12(r11)
    1198:	38 00 00 0c 	li      r0,12
    119c:	90 01 00 10 	stw     r0,16(r1)
		p += len;
    11a0:	80 01 00 10 	lwz     r0,16(r1)
    11a4:	81 21 00 08 	lwz     r9,8(r1)
    11a8:	7c 09 02 14 	add     r0,r9,r0
    11ac:	90 01 00 08 	stw     r0,8(r1)
		gss_msg->msg.len += len;
    11b0:	80 01 00 18 	lwz     r0,24(r1)
    11b4:	7c 07 03 78 	mr      r7,r0
    11b8:	81 27 00 14 	lwz     r9,20(r7)
    11bc:	80 01 00 10 	lwz     r0,16(r1)
    11c0:	7d 29 02 14 	add     r9,r9,r0
    11c4:	80 01 00 18 	lwz     r0,24(r1)
    11c8:	7c 08 03 78 	mr      r8,r0
    11cc:	91 28 00 14 	stw     r9,20(r8)
	}
	if (mech->gm_upcall_enctypes) {
    11d0:	80 01 00 0c 	lwz     r0,12(r1)
    11d4:	7c 09 03 78 	mr      r9,r0
    11d8:	80 09 00 24 	lwz     r0,36(r9)
    11dc:	2f 80 00 00 	cmpwi   cr7,r0,0
    11e0:	41 9e 00 50 	beq-    cr7,1230 <gss_encode_v1_msg+0x298>
		len = sprintf(p, mech->gm_upcall_enctypes);
    11e4:	80 01 00 0c 	lwz     r0,12(r1)
    11e8:	7c 0a 03 78 	mr      r10,r0
    11ec:	80 0a 00 24 	lwz     r0,36(r10)
    11f0:	80 61 00 08 	lwz     r3,8(r1)
    11f4:	7c 04 03 78 	mr      r4,r0
    11f8:	48 00 00 01 	bl      11f8 <gss_encode_v1_msg+0x260>
    11fc:	90 61 00 10 	stw     r3,16(r1)
		p += len;
    1200:	80 01 00 10 	lwz     r0,16(r1)
    1204:	81 21 00 08 	lwz     r9,8(r1)
    1208:	7c 09 02 14 	add     r0,r9,r0
    120c:	90 01 00 08 	stw     r0,8(r1)
		gss_msg->msg.len += len;
    1210:	80 01 00 18 	lwz     r0,24(r1)
    1214:	7c 0b 03 78 	mr      r11,r0
    1218:	81 2b 00 14 	lwz     r9,20(r11)
    121c:	80 01 00 10 	lwz     r0,16(r1)
    1220:	7d 29 02 14 	add     r9,r9,r0
    1224:	80 01 00 18 	lwz     r0,24(r1)
    1228:	7c 07 03 78 	mr      r7,r0
    122c:	91 27 00 14 	stw     r9,20(r7)
	}
	len = sprintf(p, "\n");
    1230:	80 01 00 08 	lwz     r0,8(r1)
    1234:	39 20 0a 00 	li      r9,2560
    1238:	7c 08 03 78 	mr      r8,r0
    123c:	b1 28 00 00 	sth     r9,0(r8)
    1240:	38 00 00 01 	li      r0,1
    1244:	90 01 00 10 	stw     r0,16(r1)
	gss_msg->msg.len += len;
    1248:	80 01 00 18 	lwz     r0,24(r1)
    124c:	7c 0a 03 78 	mr      r10,r0
    1250:	81 2a 00 14 	lwz     r9,20(r10)
    1254:	80 01 00 10 	lwz     r0,16(r1)
    1258:	7d 29 02 14 	add     r9,r9,r0
    125c:	80 01 00 18 	lwz     r0,24(r1)
    1260:	7c 0b 03 78 	mr      r11,r0
    1264:	91 2b 00 14 	stw     r9,20(r11)

	gss_msg->msg.data = gss_msg->databuf;
    1268:	80 01 00 18 	lwz     r0,24(r1)
    126c:	31 20 00 94 	addic   r9,r0,148
    1270:	80 01 00 18 	lwz     r0,24(r1)
    1274:	7c 07 03 78 	mr      r7,r0
    1278:	91 27 00 10 	stw     r9,16(r7)
	BUG_ON(gss_msg->msg.len > UPCALL_BUF_LEN);
    127c:	80 01 00 18 	lwz     r0,24(r1)
    1280:	7c 08 03 78 	mr      r8,r0
    1284:	80 08 00 14 	lwz     r0,20(r8)
    1288:	2b 80 00 80 	cmplwi  cr7,r0,128
    128c:	7c 00 00 26 	mfcr    r0
    1290:	54 00 f7 fe 	rlwinm  r0,r0,30,31,31
    1294:	0f 00 00 00 	twnei   r0,0
}
    1298:	80 01 00 34 	lwz     r0,52(r1)
    129c:	7c 08 03 a6 	mtlr    r0
    12a0:	38 21 00 30 	addi    r1,r1,48
    12a4:	4e 80 00 20 	blr

000012a8 <gss_encode_msg>:

static void gss_encode_msg(struct gss_upcall_msg *gss_msg,
				struct rpc_clnt *clnt, int machine_cred)
{
    12a8:	94 21 ff e0 	stwu    r1,-32(r1)
    12ac:	7c 08 02 a6 	mflr    r0
    12b0:	90 01 00 24 	stw     r0,36(r1)
    12b4:	90 61 00 08 	stw     r3,8(r1)
    12b8:	90 81 00 0c 	stw     r4,12(r1)
    12bc:	90 a1 00 10 	stw     r5,16(r1)
	if (pipe_version == 0)
    12c0:	3c 00 00 00 	lis     r0,0
    12c4:	7c 09 03 78 	mr      r9,r0
    12c8:	80 09 00 04 	lwz     r0,4(r9)
    12cc:	2f 80 00 00 	cmpwi   cr7,r0,0
    12d0:	40 9e 00 10 	bne-    cr7,12e0 <gss_encode_msg+0x38>
		gss_encode_v0_msg(gss_msg);
    12d4:	80 61 00 08 	lwz     r3,8(r1)
    12d8:	4b ff fc 8d 	bl      f64 <gss_encode_v0_msg>
    12dc:	48 00 00 14 	b       12f0 <gss_encode_msg+0x48>
	else /* pipe_version == 1 */
		gss_encode_v1_msg(gss_msg, clnt, machine_cred);
    12e0:	80 61 00 08 	lwz     r3,8(r1)
    12e4:	80 81 00 0c 	lwz     r4,12(r1)
    12e8:	80 a1 00 10 	lwz     r5,16(r1)
    12ec:	4b ff fc ad 	bl      f98 <gss_encode_v1_msg>
}
    12f0:	80 01 00 24 	lwz     r0,36(r1)
    12f4:	7c 08 03 a6 	mtlr    r0
    12f8:	38 21 00 20 	addi    r1,r1,32
    12fc:	4e 80 00 20 	blr

00001300 <gss_setup_upcall>:
	return gss_msg;
}

static struct gss_upcall_msg *
gss_setup_upcall(struct rpc_clnt *clnt, struct gss_auth *gss_auth, struct rpc_cred *cred)
{
    1300:	94 21 ff 40 	stwu    r1,-192(r1)
    1304:	7c 08 02 a6 	mflr    r0
    1308:	90 01 00 c4 	stw     r0,196(r1)
    130c:	93 e1 00 bc 	stw     r31,188(r1)
    1310:	90 61 00 a8 	stw     r3,168(r1)
    1314:	90 81 00 ac 	stw     r4,172(r1)
    1318:	90 a1 00 b0 	stw     r5,176(r1)
	struct gss_cred *gss_cred = container_of(cred,
    131c:	80 01 00 b0 	lwz     r0,176(r1)
    1320:	90 01 00 0c 	stw     r0,12(r1)
    1324:	80 01 00 0c 	lwz     r0,12(r1)
    1328:	90 01 00 10 	stw     r0,16(r1)
			struct gss_cred, gc_base);
	struct gss_upcall_msg *gss_new, *gss_msg;
	uid_t uid = cred->cr_uid;
    132c:	80 01 00 b0 	lwz     r0,176(r1)
    1330:	7c 09 03 78 	mr      r9,r0
    1334:	80 09 00 30 	lwz     r0,48(r9)
    1338:	90 01 00 14 	stw     r0,20(r1)

	gss_new = gss_alloc_msg(gss_auth, uid, clnt, gss_cred->gc_machine_cred);
    133c:	80 01 00 10 	lwz     r0,16(r1)
    1340:	7c 0b 03 78 	mr      r11,r0
    1344:	80 0b 00 44 	lwz     r0,68(r11)
    1348:	54 00 0f fe 	rlwinm  r0,r0,1,31,31
    134c:	54 00 06 3e 	clrlwi  r0,r0,24
    1350:	81 21 00 ac 	lwz     r9,172(r1)
    1354:	91 21 00 24 	stw     r9,36(r1)
    1358:	81 21 00 14 	lwz     r9,20(r1)
    135c:	91 21 00 28 	stw     r9,40(r1)
    1360:	81 21 00 a8 	lwz     r9,168(r1)
    1364:	91 21 00 2c 	stw     r9,44(r1)
    1368:	90 01 00 30 	stw     r0,48(r1)
    136c:	38 00 01 14 	li      r0,276
    1370:	90 01 00 34 	stw     r0,52(r1)
    1374:	38 00 00 50 	li      r0,80
    1378:	90 01 00 38 	stw     r0,56(r1)
    137c:	80 01 00 38 	lwz     r0,56(r1)
    1380:	60 00 80 00 	ori     r0,r0,32768
    1384:	81 21 00 34 	lwz     r9,52(r1)
    1388:	91 21 00 3c 	stw     r9,60(r1)
    138c:	90 01 00 40 	stw     r0,64(r1)
    1390:	80 61 00 3c 	lwz     r3,60(r1)
    1394:	80 81 00 40 	lwz     r4,64(r1)
    1398:	48 00 00 01 	bl      1398 <gss_setup_upcall+0x98>
    139c:	7c 60 1b 78 	mr      r0,r3
		int machine_cred)
{
	struct gss_upcall_msg *gss_msg;
	int vers;

	gss_msg = kzalloc(sizeof(*gss_msg), GFP_NOFS);
    13a0:	90 01 00 44 	stw     r0,68(r1)
	if (gss_msg == NULL)
    13a4:	80 01 00 44 	lwz     r0,68(r1)
    13a8:	2f 80 00 00 	cmpwi   cr7,r0,0
    13ac:	40 9e 00 14 	bne-    cr7,13c0 <gss_setup_upcall+0xc0>
    13b0:	38 00 ff f4 	li      r0,-12
    13b4:	90 01 00 48 	stw     r0,72(r1)

#define IS_ERR_VALUE(x) unlikely((x) >= (unsigned long)-MAX_ERRNO)

static inline void * __must_check ERR_PTR(long error)
{
	return (void *) error;
    13b8:	80 01 00 48 	lwz     r0,72(r1)
    13bc:	48 00 01 24 	b       14e0 <gss_setup_upcall+0x1e0>
		return ERR_PTR(-ENOMEM);
	vers = get_pipe_version();
    13c0:	4b ff f4 19 	bl      7d8 <get_pipe_version>
    13c4:	90 61 00 4c 	stw     r3,76(r1)
	if (vers < 0) {
    13c8:	80 01 00 4c 	lwz     r0,76(r1)
    13cc:	2f 80 00 00 	cmpwi   cr7,r0,0
    13d0:	40 9c 00 1c 	bge-    cr7,13ec <gss_setup_upcall+0xec>
		kfree(gss_msg);
    13d4:	80 61 00 44 	lwz     r3,68(r1)
    13d8:	48 00 00 01 	bl      13d8 <gss_setup_upcall+0xd8>
    13dc:	80 01 00 4c 	lwz     r0,76(r1)
    13e0:	90 01 00 50 	stw     r0,80(r1)
    13e4:	80 01 00 50 	lwz     r0,80(r1)
    13e8:	48 00 00 f8 	b       14e0 <gss_setup_upcall+0x1e0>
		return ERR_PTR(vers);
	}
	gss_msg->inode = RPC_I(gss_auth->dentry[vers]->d_inode);
    13ec:	81 21 00 24 	lwz     r9,36(r1)
    13f0:	80 01 00 4c 	lwz     r0,76(r1)
    13f4:	30 00 00 0c 	addic   r0,r0,12
    13f8:	54 00 10 3a 	rlwinm  r0,r0,2,0,29
    13fc:	7c 09 02 14 	add     r0,r9,r0
    1400:	7c 09 03 78 	mr      r9,r0
    1404:	80 09 00 00 	lwz     r0,0(r9)
    1408:	7c 0b 03 78 	mr      r11,r0
    140c:	80 0b 00 20 	lwz     r0,32(r11)
    1410:	90 01 00 54 	stw     r0,84(r1)
};

static inline struct rpc_inode *
RPC_I(struct inode *inode)
{
	return container_of(inode, struct rpc_inode, vfs_inode);
    1414:	80 01 00 54 	lwz     r0,84(r1)
    1418:	90 01 00 58 	stw     r0,88(r1)
    141c:	80 01 00 58 	lwz     r0,88(r1)
    1420:	7c 09 03 78 	mr      r9,r0
    1424:	80 01 00 44 	lwz     r0,68(r1)
    1428:	7c 0b 03 78 	mr      r11,r0
    142c:	91 2b 00 2c 	stw     r9,44(r11)
	INIT_LIST_HEAD(&gss_msg->list);
    1430:	80 01 00 44 	lwz     r0,68(r1)
    1434:	30 00 00 20 	addic   r0,r0,32
    1438:	90 01 00 5c 	stw     r0,92(r1)
#define LIST_HEAD(name) \
	struct list_head name = LIST_HEAD_INIT(name)

static inline void INIT_LIST_HEAD(struct list_head *list)
{
	list->next = list;
    143c:	80 01 00 5c 	lwz     r0,92(r1)
    1440:	81 21 00 5c 	lwz     r9,92(r1)
    1444:	7c 0b 03 78 	mr      r11,r0
    1448:	91 2b 00 00 	stw     r9,0(r11)
	list->prev = list;
    144c:	80 01 00 5c 	lwz     r0,92(r1)
    1450:	81 21 00 5c 	lwz     r9,92(r1)
    1454:	7c 0b 03 78 	mr      r11,r0
    1458:	91 2b 00 04 	stw     r9,4(r11)
	rpc_init_wait_queue(&gss_msg->rpc_waitqueue, "RPCSEC_GSS upcall waitq");
    145c:	80 01 00 44 	lwz     r0,68(r1)
    1460:	30 00 00 30 	addic   r0,r0,48
    1464:	7c 03 03 78 	mr      r3,r0
    1468:	3c 00 00 00 	lis     r0,0
    146c:	30 80 01 90 	addic   r4,r0,400
    1470:	48 00 00 01 	bl      1470 <gss_setup_upcall+0x170>
	init_waitqueue_head(&gss_msg->waitqueue);
    1474:	80 01 00 44 	lwz     r0,68(r1)
    1478:	30 00 00 88 	addic   r0,r0,136
    147c:	7c 03 03 78 	mr      r3,r0
    1480:	3c 00 00 00 	lis     r0,0
    1484:	30 80 00 64 	addic   r4,r0,100
    1488:	48 00 00 01 	bl      1488 <gss_setup_upcall+0x188>
	atomic_set(&gss_msg->count, 1);
    148c:	80 01 00 44 	lwz     r0,68(r1)
    1490:	90 01 00 60 	stw     r0,96(r1)
    1494:	38 00 00 01 	li      r0,1
    1498:	90 01 00 64 	stw     r0,100(r1)
	return t;
}

static __inline__ void atomic_set(atomic_t *v, int i)
{
	__asm__ __volatile__("stw%U0%X0 %1,%0" : "=m"(v->counter) : "r"(i));
    149c:	80 01 00 60 	lwz     r0,96(r1)
    14a0:	81 21 00 64 	lwz     r9,100(r1)
    14a4:	7c 0b 03 78 	mr      r11,r0
    14a8:	91 2b 00 00 	stw     r9,0(r11)
	gss_msg->uid = uid;
    14ac:	80 01 00 44 	lwz     r0,68(r1)
    14b0:	81 21 00 28 	lwz     r9,40(r1)
    14b4:	7c 0b 03 78 	mr      r11,r0
    14b8:	91 2b 00 04 	stw     r9,4(r11)
	gss_msg->auth = gss_auth;
    14bc:	80 01 00 44 	lwz     r0,68(r1)
    14c0:	81 21 00 24 	lwz     r9,36(r1)
    14c4:	7c 0b 03 78 	mr      r11,r0
    14c8:	91 2b 00 28 	stw     r9,40(r11)
	gss_encode_msg(gss_msg, clnt, machine_cred);
    14cc:	80 61 00 44 	lwz     r3,68(r1)
    14d0:	80 81 00 2c 	lwz     r4,44(r1)
    14d4:	80 a1 00 30 	lwz     r5,48(r1)
    14d8:	4b ff fd d1 	bl      12a8 <gss_encode_msg>
	return gss_msg;
    14dc:	80 01 00 44 	lwz     r0,68(r1)
	struct gss_cred *gss_cred = container_of(cred,
			struct gss_cred, gc_base);
	struct gss_upcall_msg *gss_new, *gss_msg;
	uid_t uid = cred->cr_uid;

	gss_new = gss_alloc_msg(gss_auth, uid, clnt, gss_cred->gc_machine_cred);
    14e0:	90 01 00 18 	stw     r0,24(r1)
    14e4:	80 01 00 18 	lwz     r0,24(r1)
    14e8:	90 01 00 68 	stw     r0,104(r1)
	return (long) ptr;
}

static inline long __must_check IS_ERR(const void *ptr)
{
	return IS_ERR_VALUE((unsigned long)ptr);
    14ec:	81 21 00 68 	lwz     r9,104(r1)
    14f0:	38 00 f0 00 	li      r0,-4096
    14f4:	7f 89 00 40 	cmplw   cr7,r9,r0
    14f8:	7c 00 00 26 	mfcr    r0
    14fc:	54 00 f7 fe 	rlwinm  r0,r0,30,31,31
	if (IS_ERR(gss_new))
    1500:	2f 80 00 00 	cmpwi   cr7,r0,0
    1504:	41 9e 00 0c 	beq-    cr7,1510 <gss_setup_upcall+0x210>
		return gss_new;
    1508:	80 01 00 18 	lwz     r0,24(r1)
    150c:	48 00 01 84 	b       1690 <gss_setup_upcall+0x390>
    1510:	80 01 00 18 	lwz     r0,24(r1)
    1514:	90 01 00 6c 	stw     r0,108(r1)
 * to that upcall instead of adding the new upcall.
 */
static inline struct gss_upcall_msg *
gss_add_msg(struct gss_upcall_msg *gss_msg)
{
	struct rpc_inode *rpci = gss_msg->inode;
    1518:	80 01 00 6c 	lwz     r0,108(r1)
    151c:	7c 09 03 78 	mr      r9,r0
    1520:	80 09 00 2c 	lwz     r0,44(r9)
    1524:	90 01 00 70 	stw     r0,112(r1)
	struct inode *inode = &rpci->vfs_inode;
    1528:	80 01 00 70 	lwz     r0,112(r1)
    152c:	90 01 00 74 	stw     r0,116(r1)
	struct gss_upcall_msg *old;

	spin_lock(&inode->i_lock);
    1530:	80 01 00 74 	lwz     r0,116(r1)
    1534:	30 00 00 14 	addic   r0,r0,20
    1538:	90 01 00 78 	stw     r0,120(r1)
	old = __gss_find_upcall(rpci, gss_msg->uid);
    153c:	80 01 00 6c 	lwz     r0,108(r1)
    1540:	7c 0b 03 78 	mr      r11,r0
    1544:	80 0b 00 04 	lwz     r0,4(r11)
    1548:	80 61 00 70 	lwz     r3,112(r1)
    154c:	7c 04 03 78 	mr      r4,r0
    1550:	4b ff f4 79 	bl      9c8 <__gss_find_upcall>
    1554:	90 61 00 7c 	stw     r3,124(r1)
	if (old == NULL) {
    1558:	80 01 00 7c 	lwz     r0,124(r1)
    155c:	2f 80 00 00 	cmpwi   cr7,r0,0
    1560:	40 9e 00 a8 	bne-    cr7,1608 <gss_setup_upcall+0x308>
		atomic_inc(&gss_msg->count);
    1564:	80 01 00 6c 	lwz     r0,108(r1)
    1568:	90 01 00 80 	stw     r0,128(r1)
	addic	%0,%0,1\n"
	PPC405_ERR77(0,%2)
"	stwcx.	%0,0,%2 \n\
	bne-	1b"
	: "=&r" (t), "+m" (v->counter)
	: "r" (&v->counter)
    156c:	80 01 00 80 	lwz     r0,128(r1)
"1:	lwarx	%0,0,%2		# atomic_inc\n\
	addic	%0,%0,1\n"
	PPC405_ERR77(0,%2)
"	stwcx.	%0,0,%2 \n\
	bne-	1b"
	: "=&r" (t), "+m" (v->counter)
    1570:	81 61 00 80 	lwz     r11,128(r1)
    1574:	81 21 00 80 	lwz     r9,128(r1)

static __inline__ void atomic_inc(atomic_t *v)
{
	int t;

	__asm__ __volatile__(
    1578:	7f e0 00 28 	lwarx   r31,0,r0
    157c:	33 ff 00 01 	addic   r31,r31,1
    1580:	7f e0 01 2d 	stwcx.  r31,0,r0
    1584:	40 a2 ff f4 	bne-    1578 <gss_setup_upcall+0x278>
    1588:	93 e1 00 84 	stw     r31,132(r1)
		list_add(&gss_msg->list, &rpci->in_downcall);
    158c:	80 01 00 6c 	lwz     r0,108(r1)
    1590:	31 20 00 20 	addic   r9,r0,32
    1594:	80 01 00 70 	lwz     r0,112(r1)
    1598:	30 00 01 3c 	addic   r0,r0,316
    159c:	91 21 00 88 	stw     r9,136(r1)
    15a0:	90 01 00 8c 	stw     r0,140(r1)
 * Insert a new entry after the specified head.
 * This is good for implementing stacks.
 */
static inline void list_add(struct list_head *new, struct list_head *head)
{
	__list_add(new, head, head->next);
    15a4:	80 01 00 8c 	lwz     r0,140(r1)
    15a8:	7c 09 03 78 	mr      r9,r0
    15ac:	80 09 00 00 	lwz     r0,0(r9)
    15b0:	81 21 00 88 	lwz     r9,136(r1)
    15b4:	91 21 00 90 	stw     r9,144(r1)
    15b8:	81 21 00 8c 	lwz     r9,140(r1)
    15bc:	91 21 00 94 	stw     r9,148(r1)
    15c0:	90 01 00 98 	stw     r0,152(r1)
#ifndef CONFIG_DEBUG_LIST
static inline void __list_add(struct list_head *new,
			      struct list_head *prev,
			      struct list_head *next)
{
	next->prev = new;
    15c4:	80 01 00 98 	lwz     r0,152(r1)
    15c8:	81 21 00 90 	lwz     r9,144(r1)
    15cc:	7c 0b 03 78 	mr      r11,r0
    15d0:	91 2b 00 04 	stw     r9,4(r11)
	new->next = next;
    15d4:	80 01 00 90 	lwz     r0,144(r1)
    15d8:	81 21 00 98 	lwz     r9,152(r1)
    15dc:	7c 0b 03 78 	mr      r11,r0
    15e0:	91 2b 00 00 	stw     r9,0(r11)
	new->prev = prev;
    15e4:	80 01 00 90 	lwz     r0,144(r1)
    15e8:	81 21 00 94 	lwz     r9,148(r1)
    15ec:	7c 0b 03 78 	mr      r11,r0
    15f0:	91 2b 00 04 	stw     r9,4(r11)
	prev->next = new;
    15f4:	80 01 00 94 	lwz     r0,148(r1)
    15f8:	81 21 00 90 	lwz     r9,144(r1)
    15fc:	7c 0b 03 78 	mr      r11,r0
    1600:	91 2b 00 00 	stw     r9,0(r11)
    1604:	48 00 00 0c 	b       1610 <gss_setup_upcall+0x310>
	} else
		gss_msg = old;
    1608:	80 01 00 7c 	lwz     r0,124(r1)
    160c:	90 01 00 6c 	stw     r0,108(r1)
	spin_unlock(&inode->i_lock);
    1610:	80 01 00 74 	lwz     r0,116(r1)
    1614:	30 00 00 14 	addic   r0,r0,20
    1618:	90 01 00 9c 	stw     r0,156(r1)
	return gss_msg;
    161c:	80 01 00 6c 	lwz     r0,108(r1)
	uid_t uid = cred->cr_uid;

	gss_new = gss_alloc_msg(gss_auth, uid, clnt, gss_cred->gc_machine_cred);
	if (IS_ERR(gss_new))
		return gss_new;
	gss_msg = gss_add_msg(gss_new);
    1620:	90 01 00 08 	stw     r0,8(r1)
	if (gss_msg == gss_new) {
    1624:	81 21 00 08 	lwz     r9,8(r1)
    1628:	80 01 00 18 	lwz     r0,24(r1)
    162c:	7f 89 00 00 	cmpw    cr7,r9,r0
    1630:	40 9e 00 54 	bne-    cr7,1684 <gss_setup_upcall+0x384>
		struct inode *inode = &gss_new->inode->vfs_inode;
    1634:	80 01 00 18 	lwz     r0,24(r1)
    1638:	7c 09 03 78 	mr      r9,r0
    163c:	80 09 00 2c 	lwz     r0,44(r9)
    1640:	90 01 00 1c 	stw     r0,28(r1)
		int res = rpc_queue_upcall(inode, &gss_new->msg);
    1644:	80 01 00 18 	lwz     r0,24(r1)
    1648:	30 00 00 08 	addic   r0,r0,8
    164c:	80 61 00 1c 	lwz     r3,28(r1)
    1650:	7c 04 03 78 	mr      r4,r0
    1654:	48 00 00 01 	bl      1654 <gss_setup_upcall+0x354>
    1658:	90 61 00 20 	stw     r3,32(r1)
		if (res) {
    165c:	80 01 00 20 	lwz     r0,32(r1)
    1660:	2f 80 00 00 	cmpwi   cr7,r0,0
    1664:	41 9e 00 28 	beq-    cr7,168c <gss_setup_upcall+0x38c>
			gss_unhash_msg(gss_new);
    1668:	80 61 00 18 	lwz     r3,24(r1)
    166c:	4b ff f5 d5 	bl      c40 <gss_unhash_msg>
    1670:	80 01 00 20 	lwz     r0,32(r1)
    1674:	90 01 00 a0 	stw     r0,160(r1)

#define IS_ERR_VALUE(x) unlikely((x) >= (unsigned long)-MAX_ERRNO)

static inline void * __must_check ERR_PTR(long error)
{
	return (void *) error;
    1678:	80 01 00 a0 	lwz     r0,160(r1)
			gss_msg = ERR_PTR(res);
    167c:	90 01 00 08 	stw     r0,8(r1)
    1680:	48 00 00 0c 	b       168c <gss_setup_upcall+0x38c>
		}
	} else
		gss_release_msg(gss_new);
    1684:	80 61 00 18 	lwz     r3,24(r1)
    1688:	4b ff f2 39 	bl      8c0 <gss_release_msg>
	return gss_msg;
    168c:	80 01 00 08 	lwz     r0,8(r1)
}
    1690:	7c 03 03 78 	mr      r3,r0
    1694:	80 01 00 c4 	lwz     r0,196(r1)
    1698:	7c 08 03 a6 	mtlr    r0
    169c:	83 e1 00 bc 	lwz     r31,188(r1)
    16a0:	38 21 00 c0 	addi    r1,r1,192
    16a4:	4e 80 00 20 	blr

000016a8 <warn_gssd>:

static void warn_gssd(void)
{
    16a8:	94 21 ff d0 	stwu    r1,-48(r1)
    16ac:	7c 08 02 a6 	mflr    r0
    16b0:	90 01 00 34 	stw     r0,52(r1)
	static unsigned long ratelimit;
	unsigned long now = jiffies;
    16b4:	3c 00 00 00 	lis     r0,0
    16b8:	7c 09 03 78 	mr      r9,r0
    16bc:	80 09 00 00 	lwz     r0,0(r9)
    16c0:	90 01 00 08 	stw     r0,8(r1)

	if (time_after(now, ratelimit)) {
    16c4:	38 00 00 01 	li      r0,1
    16c8:	2f 80 00 00 	cmpwi   cr7,r0,0
    16cc:	41 9e 00 50 	beq-    cr7,171c <warn_gssd+0x74>
    16d0:	38 00 00 01 	li      r0,1
    16d4:	2f 80 00 00 	cmpwi   cr7,r0,0
    16d8:	41 9e 00 44 	beq-    cr7,171c <warn_gssd+0x74>
    16dc:	3c 00 00 00 	lis     r0,0
    16e0:	7c 0b 03 78 	mr      r11,r0
    16e4:	80 0b 00 60 	lwz     r0,96(r11)
    16e8:	7c 09 03 78 	mr      r9,r0
    16ec:	80 01 00 08 	lwz     r0,8(r1)
    16f0:	7c 00 48 50 	subf    r0,r0,r9
    16f4:	2f 80 00 00 	cmpwi   cr7,r0,0
    16f8:	40 9c 00 24 	bge-    cr7,171c <warn_gssd+0x74>
		printk(KERN_WARNING "RPC: AUTH_GSS upcall timed out.\n"
    16fc:	3c 00 00 00 	lis     r0,0
    1700:	30 60 01 a8 	addic   r3,r0,424
    1704:	48 00 00 01 	bl      1704 <warn_gssd+0x5c>
				"Please check user daemon is running.\n");
		ratelimit = now + 15*HZ;
    1708:	80 01 00 08 	lwz     r0,8(r1)
    170c:	31 20 0e a6 	addic   r9,r0,3750
    1710:	3c 00 00 00 	lis     r0,0
    1714:	7c 0b 03 78 	mr      r11,r0
    1718:	91 2b 00 60 	stw     r9,96(r11)
	}
}
    171c:	80 01 00 34 	lwz     r0,52(r1)
    1720:	7c 08 03 a6 	mtlr    r0
    1724:	38 21 00 30 	addi    r1,r1,48
    1728:	4e 80 00 20 	blr

0000172c <gss_pipe_upcall>:
}

static ssize_t
gss_pipe_upcall(struct file *filp, struct rpc_pipe_msg *msg,
		char __user *dst, size_t buflen)
{
    172c:	94 21 ff b0 	stwu    r1,-80(r1)
    1730:	7c 08 02 a6 	mflr    r0
    1734:	90 01 00 54 	stw     r0,84(r1)
    1738:	90 61 00 38 	stw     r3,56(r1)
    173c:	90 81 00 3c 	stw     r4,60(r1)
    1740:	90 a1 00 40 	stw     r5,64(r1)
    1744:	90 c1 00 44 	stw     r6,68(r1)
	char *data = (char *)msg->data + msg->copied;
    1748:	80 01 00 3c 	lwz     r0,60(r1)
    174c:	7c 0a 03 78 	mr      r10,r0
    1750:	81 2a 00 08 	lwz     r9,8(r10)
    1754:	80 01 00 3c 	lwz     r0,60(r1)
    1758:	7c 0b 03 78 	mr      r11,r0
    175c:	80 0b 00 10 	lwz     r0,16(r11)
    1760:	7c 09 02 14 	add     r0,r9,r0
    1764:	90 01 00 08 	stw     r0,8(r1)
	size_t mlen = min(msg->len, buflen);
    1768:	80 01 00 3c 	lwz     r0,60(r1)
    176c:	7c 09 03 78 	mr      r9,r0
    1770:	80 09 00 0c 	lwz     r0,12(r9)
    1774:	90 01 00 24 	stw     r0,36(r1)
    1778:	80 01 00 44 	lwz     r0,68(r1)
    177c:	90 01 00 28 	stw     r0,40(r1)
    1780:	80 01 00 28 	lwz     r0,40(r1)
    1784:	81 21 00 24 	lwz     r9,36(r1)
    1788:	7f 80 48 40 	cmplw   cr7,r0,r9
    178c:	40 9d 00 08 	ble-    cr7,1794 <gss_pipe_upcall+0x68>
    1790:	7d 20 4b 78 	mr      r0,r9
    1794:	90 01 00 0c 	stw     r0,12(r1)
    1798:	80 01 00 40 	lwz     r0,64(r1)
    179c:	90 01 00 14 	stw     r0,20(r1)
    17a0:	80 01 00 08 	lwz     r0,8(r1)
    17a4:	90 01 00 18 	stw     r0,24(r1)
    17a8:	80 01 00 0c 	lwz     r0,12(r1)
    17ac:	90 01 00 1c 	stw     r0,28(r1)
static inline unsigned long copy_to_user(void __user *to,
		const void *from, unsigned long n)
{
	unsigned long over;

	if (access_ok(VERIFY_WRITE, to, n))
    17b0:	81 21 00 14 	lwz     r9,20(r1)
    17b4:	7c 40 13 78 	mr      r0,r2
    17b8:	7c 0a 03 78 	mr      r10,r0
    17bc:	80 0a 01 d4 	lwz     r0,468(r10)
    17c0:	7f 89 00 40 	cmplw   cr7,r9,r0
    17c4:	41 9d 00 3c 	bgt-    cr7,1800 <gss_pipe_upcall+0xd4>
    17c8:	80 01 00 1c 	lwz     r0,28(r1)
    17cc:	2f 80 00 00 	cmpwi   cr7,r0,0
    17d0:	41 9e 00 28 	beq-    cr7,17f8 <gss_pipe_upcall+0xcc>
    17d4:	80 01 00 1c 	lwz     r0,28(r1)
    17d8:	31 20 ff ff 	addic   r9,r0,-1
    17dc:	7c 40 13 78 	mr      r0,r2
    17e0:	7c 0a 03 78 	mr      r10,r0
    17e4:	81 6a 01 d4 	lwz     r11,468(r10)
    17e8:	80 01 00 14 	lwz     r0,20(r1)
    17ec:	7c 00 58 50 	subf    r0,r0,r11
    17f0:	7f 89 00 40 	cmplw   cr7,r9,r0
    17f4:	41 9d 00 0c 	bgt-    cr7,1800 <gss_pipe_upcall+0xd4>
    17f8:	38 00 00 01 	li      r0,1
    17fc:	48 00 00 08 	b       1804 <gss_pipe_upcall+0xd8>
    1800:	38 00 00 00 	li      r0,0
    1804:	2f 80 00 00 	cmpwi   cr7,r0,0
    1808:	41 9e 00 1c 	beq-    cr7,1824 <gss_pipe_upcall+0xf8>
		return __copy_tofrom_user(to, (__force void __user *)from, n);
    180c:	80 61 00 14 	lwz     r3,20(r1)
    1810:	80 81 00 18 	lwz     r4,24(r1)
    1814:	80 a1 00 1c 	lwz     r5,28(r1)
    1818:	48 00 00 01 	bl      1818 <gss_pipe_upcall+0xec>
    181c:	7c 60 1b 78 	mr      r0,r3
    1820:	48 00 00 60 	b       1880 <gss_pipe_upcall+0x154>
	if ((unsigned long)to < TASK_SIZE) {
    1824:	81 21 00 14 	lwz     r9,20(r1)
    1828:	3c 00 bf ff 	lis     r0,-16385
    182c:	60 00 ff ff 	ori     r0,r0,65535
    1830:	7f 89 00 40 	cmplw   cr7,r9,r0
    1834:	41 9d 00 48 	bgt-    cr7,187c <gss_pipe_upcall+0x150>
		over = (unsigned long)to + n - TASK_SIZE;
    1838:	81 21 00 14 	lwz     r9,20(r1)
    183c:	80 01 00 1c 	lwz     r0,28(r1)
    1840:	7c 09 02 14 	add     r0,r9,r0
    1844:	3d 60 40 00 	lis     r11,16384
    1848:	7c 00 5a 14 	add     r0,r0,r11
    184c:	90 01 00 20 	stw     r0,32(r1)
		return __copy_tofrom_user(to, (__force void __user *)from,
    1850:	81 21 00 1c 	lwz     r9,28(r1)
    1854:	80 01 00 20 	lwz     r0,32(r1)
    1858:	7c 00 48 50 	subf    r0,r0,r9
    185c:	80 61 00 14 	lwz     r3,20(r1)
    1860:	80 81 00 18 	lwz     r4,24(r1)
    1864:	7c 05 03 78 	mr      r5,r0
    1868:	48 00 00 01 	bl      1868 <gss_pipe_upcall+0x13c>
    186c:	7c 69 1b 78 	mr      r9,r3
    1870:	80 01 00 20 	lwz     r0,32(r1)
    1874:	7c 09 02 14 	add     r0,r9,r0
    1878:	48 00 00 08 	b       1880 <gss_pipe_upcall+0x154>
				n - over) + over;
	}
	return n;
    187c:	80 01 00 1c 	lwz     r0,28(r1)
	unsigned long left;

	left = copy_to_user(dst, data, mlen);
    1880:	90 01 00 10 	stw     r0,16(r1)
	if (left == mlen) {
    1884:	81 21 00 10 	lwz     r9,16(r1)
    1888:	80 01 00 0c 	lwz     r0,12(r1)
    188c:	7f 89 00 00 	cmpw    cr7,r9,r0
    1890:	40 9e 00 1c 	bne-    cr7,18ac <gss_pipe_upcall+0x180>
		msg->errno = -EFAULT;
    1894:	80 01 00 3c 	lwz     r0,60(r1)
    1898:	39 20 ff f2 	li      r9,-14
    189c:	7c 0a 03 78 	mr      r10,r0
    18a0:	91 2a 00 14 	stw     r9,20(r10)
		return -EFAULT;
    18a4:	38 00 ff f2 	li      r0,-14
    18a8:	48 00 00 48 	b       18f0 <gss_pipe_upcall+0x1c4>
	}

	mlen -= left;
    18ac:	81 21 00 0c 	lwz     r9,12(r1)
    18b0:	80 01 00 10 	lwz     r0,16(r1)
    18b4:	7c 00 48 50 	subf    r0,r0,r9
    18b8:	90 01 00 0c 	stw     r0,12(r1)
	msg->copied += mlen;
    18bc:	80 01 00 3c 	lwz     r0,60(r1)
    18c0:	7c 0b 03 78 	mr      r11,r0
    18c4:	81 2b 00 10 	lwz     r9,16(r11)
    18c8:	80 01 00 0c 	lwz     r0,12(r1)
    18cc:	7d 29 02 14 	add     r9,r9,r0
    18d0:	80 01 00 3c 	lwz     r0,60(r1)
    18d4:	7c 0a 03 78 	mr      r10,r0
    18d8:	91 2a 00 10 	stw     r9,16(r10)
	msg->errno = 0;
    18dc:	80 01 00 3c 	lwz     r0,60(r1)
    18e0:	39 20 00 00 	li      r9,0
    18e4:	7c 0b 03 78 	mr      r11,r0
    18e8:	91 2b 00 14 	stw     r9,20(r11)
	return mlen;
    18ec:	80 01 00 0c 	lwz     r0,12(r1)
}
    18f0:	7c 03 03 78 	mr      r3,r0
    18f4:	80 01 00 54 	lwz     r0,84(r1)
    18f8:	7c 08 03 a6 	mtlr    r0
    18fc:	38 21 00 50 	addi    r1,r1,80
    1900:	4e 80 00 20 	blr

00001904 <gss_pipe_downcall>:

#define MSG_BUF_MAXSIZE 1024

static ssize_t
gss_pipe_downcall(struct file *filp, const char __user *src, size_t mlen)
{
    1904:	94 21 ff 50 	stwu    r1,-176(r1)
    1908:	7c 08 02 a6 	mflr    r0
    190c:	90 01 00 b4 	stw     r0,180(r1)
    1910:	93 e1 00 ac 	stw     r31,172(r1)
    1914:	90 61 00 98 	stw     r3,152(r1)
    1918:	90 81 00 9c 	stw     r4,156(r1)
    191c:	90 a1 00 a0 	stw     r5,160(r1)
	const void *p, *end;
	void *buf;
	struct gss_upcall_msg *gss_msg;
	struct inode *inode = filp->f_path.dentry->d_inode;
    1920:	80 01 00 98 	lwz     r0,152(r1)
    1924:	7c 09 03 78 	mr      r9,r0
    1928:	80 09 00 0c 	lwz     r0,12(r9)
    192c:	7c 0a 03 78 	mr      r10,r0
    1930:	80 0a 00 20 	lwz     r0,32(r10)
    1934:	90 01 00 0c 	stw     r0,12(r1)
	struct gss_cl_ctx *ctx;
	uid_t uid;
	ssize_t err = -EFBIG;
    1938:	38 00 ff e5 	li      r0,-27
    193c:	90 01 00 08 	stw     r0,8(r1)

	if (mlen > MSG_BUF_MAXSIZE)
    1940:	80 01 00 a0 	lwz     r0,160(r1)
    1944:	2b 80 04 00 	cmplwi  cr7,r0,1024
    1948:	41 9d 04 74 	bgt-    cr7,1dbc <gss_pipe_downcall+0x4b8>
		goto out;
	err = -ENOMEM;
    194c:	38 00 ff f4 	li      r0,-12
    1950:	90 01 00 08 	stw     r0,8(r1)
    1954:	80 01 00 a0 	lwz     r0,160(r1)
    1958:	90 01 00 24 	stw     r0,36(r1)
    195c:	38 00 00 50 	li      r0,80
    1960:	90 01 00 28 	stw     r0,40(r1)
    1964:	80 61 00 24 	lwz     r3,36(r1)
    1968:	80 81 00 28 	lwz     r4,40(r1)
    196c:	48 00 00 01 	bl      196c <gss_pipe_downcall+0x68>
    1970:	7c 60 1b 78 	mr      r0,r3
	buf = kmalloc(mlen, GFP_NOFS);
    1974:	90 01 00 10 	stw     r0,16(r1)
	if (!buf)
    1978:	80 01 00 10 	lwz     r0,16(r1)
    197c:	2f 80 00 00 	cmpwi   cr7,r0,0
    1980:	41 9e 04 44 	beq-    cr7,1dc4 <gss_pipe_downcall+0x4c0>
		goto out;

	err = -EFAULT;
    1984:	38 00 ff f2 	li      r0,-14
    1988:	90 01 00 08 	stw     r0,8(r1)
    198c:	80 01 00 10 	lwz     r0,16(r1)
    1990:	90 01 00 2c 	stw     r0,44(r1)
    1994:	80 01 00 9c 	lwz     r0,156(r1)
    1998:	90 01 00 30 	stw     r0,48(r1)
    199c:	80 01 00 a0 	lwz     r0,160(r1)
    19a0:	90 01 00 34 	stw     r0,52(r1)
static inline unsigned long copy_from_user(void *to,
		const void __user *from, unsigned long n)
{
	unsigned long over;

	if (access_ok(VERIFY_READ, from, n))
    19a4:	81 21 00 30 	lwz     r9,48(r1)
    19a8:	7c 40 13 78 	mr      r0,r2
    19ac:	7c 0b 03 78 	mr      r11,r0
    19b0:	80 0b 01 d4 	lwz     r0,468(r11)
    19b4:	7f 89 00 40 	cmplw   cr7,r9,r0
    19b8:	41 9d 00 3c 	bgt-    cr7,19f4 <gss_pipe_downcall+0xf0>
    19bc:	80 01 00 34 	lwz     r0,52(r1)
    19c0:	2f 80 00 00 	cmpwi   cr7,r0,0
    19c4:	41 9e 00 28 	beq-    cr7,19ec <gss_pipe_downcall+0xe8>
    19c8:	80 01 00 34 	lwz     r0,52(r1)
    19cc:	31 20 ff ff 	addic   r9,r0,-1
    19d0:	7c 40 13 78 	mr      r0,r2
    19d4:	7c 0a 03 78 	mr      r10,r0
    19d8:	81 6a 01 d4 	lwz     r11,468(r10)
    19dc:	80 01 00 30 	lwz     r0,48(r1)
    19e0:	7c 00 58 50 	subf    r0,r0,r11
    19e4:	7f 89 00 40 	cmplw   cr7,r9,r0
    19e8:	41 9d 00 0c 	bgt-    cr7,19f4 <gss_pipe_downcall+0xf0>
    19ec:	38 00 00 01 	li      r0,1
    19f0:	48 00 00 08 	b       19f8 <gss_pipe_downcall+0xf4>
    19f4:	38 00 00 00 	li      r0,0
    19f8:	2f 80 00 00 	cmpwi   cr7,r0,0
    19fc:	41 9e 00 1c 	beq-    cr7,1a18 <gss_pipe_downcall+0x114>
		return __copy_tofrom_user((__force void __user *)to, from, n);
    1a00:	80 61 00 2c 	lwz     r3,44(r1)
    1a04:	80 81 00 30 	lwz     r4,48(r1)
    1a08:	80 a1 00 34 	lwz     r5,52(r1)
    1a0c:	48 00 00 01 	bl      1a0c <gss_pipe_downcall+0x108>
    1a10:	7c 60 1b 78 	mr      r0,r3
    1a14:	48 00 00 60 	b       1a74 <gss_pipe_downcall+0x170>
	if ((unsigned long)from < TASK_SIZE) {
    1a18:	81 21 00 30 	lwz     r9,48(r1)
    1a1c:	3c 00 bf ff 	lis     r0,-16385
    1a20:	60 00 ff ff 	ori     r0,r0,65535
    1a24:	7f 89 00 40 	cmplw   cr7,r9,r0
    1a28:	41 9d 00 48 	bgt-    cr7,1a70 <gss_pipe_downcall+0x16c>
		over = (unsigned long)from + n - TASK_SIZE;
    1a2c:	81 21 00 30 	lwz     r9,48(r1)
    1a30:	80 01 00 34 	lwz     r0,52(r1)
    1a34:	7c 09 02 14 	add     r0,r9,r0
    1a38:	3d 60 40 00 	lis     r11,16384
    1a3c:	7c 00 5a 14 	add     r0,r0,r11
    1a40:	90 01 00 38 	stw     r0,56(r1)
		return __copy_tofrom_user((__force void __user *)to, from,
    1a44:	81 21 00 34 	lwz     r9,52(r1)
    1a48:	80 01 00 38 	lwz     r0,56(r1)
    1a4c:	7c 00 48 50 	subf    r0,r0,r9
    1a50:	80 61 00 2c 	lwz     r3,44(r1)
    1a54:	80 81 00 30 	lwz     r4,48(r1)
    1a58:	7c 05 03 78 	mr      r5,r0
    1a5c:	48 00 00 01 	bl      1a5c <gss_pipe_downcall+0x158>
    1a60:	7c 69 1b 78 	mr      r9,r3
    1a64:	80 01 00 38 	lwz     r0,56(r1)
    1a68:	7c 09 02 14 	add     r0,r9,r0
    1a6c:	48 00 00 08 	b       1a74 <gss_pipe_downcall+0x170>
				n - over) + over;
	}
	return n;
    1a70:	80 01 00 34 	lwz     r0,52(r1)
	if (copy_from_user(buf, src, mlen))
    1a74:	2f 80 00 00 	cmpwi   cr7,r0,0
    1a78:	40 9e 03 2c 	bne-    cr7,1da4 <gss_pipe_downcall+0x4a0>
		goto err;

	end = (const void *)((char *)buf + mlen);
    1a7c:	81 21 00 10 	lwz     r9,16(r1)
    1a80:	80 01 00 a0 	lwz     r0,160(r1)
    1a84:	7c 09 02 14 	add     r0,r9,r0
    1a88:	90 01 00 14 	stw     r0,20(r1)
	p = simple_get_bytes(buf, end, &uid, sizeof(uid));
    1a8c:	38 01 00 94 	addi    r0,r1,148
    1a90:	80 61 00 10 	lwz     r3,16(r1)
    1a94:	80 81 00 14 	lwz     r4,20(r1)
    1a98:	7c 05 03 78 	mr      r5,r0
    1a9c:	38 c0 00 04 	li      r6,4
    1aa0:	4b ff e7 19 	bl      1b8 <simple_get_bytes>
    1aa4:	90 61 00 18 	stw     r3,24(r1)
    1aa8:	80 01 00 18 	lwz     r0,24(r1)
    1aac:	90 01 00 3c 	stw     r0,60(r1)
	return (long) ptr;
}

static inline long __must_check IS_ERR(const void *ptr)
{
	return IS_ERR_VALUE((unsigned long)ptr);
    1ab0:	81 21 00 3c 	lwz     r9,60(r1)
    1ab4:	38 00 f0 00 	li      r0,-4096
    1ab8:	7f 89 00 40 	cmplw   cr7,r9,r0
    1abc:	7c 00 00 26 	mfcr    r0
    1ac0:	54 00 f7 fe 	rlwinm  r0,r0,30,31,31
	if (IS_ERR(p)) {
    1ac4:	2f 80 00 00 	cmpwi   cr7,r0,0
    1ac8:	41 9e 00 18 	beq-    cr7,1ae0 <gss_pipe_downcall+0x1dc>
    1acc:	80 01 00 18 	lwz     r0,24(r1)
    1ad0:	90 01 00 40 	stw     r0,64(r1)
	return (void *) error;
}

static inline long __must_check PTR_ERR(const void *ptr)
{
	return (long) ptr;
    1ad4:	80 01 00 40 	lwz     r0,64(r1)
		err = PTR_ERR(p);
    1ad8:	90 01 00 08 	stw     r0,8(r1)
		goto err;
    1adc:	48 00 02 d4 	b       1db0 <gss_pipe_downcall+0x4ac>
	}

	err = -ENOMEM;
    1ae0:	38 00 ff f4 	li      r0,-12
    1ae4:	90 01 00 08 	stw     r0,8(r1)
	ctx = gss_alloc_context();
    1ae8:	4b ff e8 0d 	bl      2f4 <gss_alloc_context>
    1aec:	90 61 00 1c 	stw     r3,28(r1)
	if (ctx == NULL)
    1af0:	80 01 00 1c 	lwz     r0,28(r1)
    1af4:	2f 80 00 00 	cmpwi   cr7,r0,0
    1af8:	41 9e 02 b4 	beq-    cr7,1dac <gss_pipe_downcall+0x4a8>
		goto err;

	err = -ENOENT;
    1afc:	38 00 ff fe 	li      r0,-2
    1b00:	90 01 00 08 	stw     r0,8(r1)
	/* Find a matching upcall */
	spin_lock(&inode->i_lock);
    1b04:	80 01 00 0c 	lwz     r0,12(r1)
    1b08:	30 00 00 14 	addic   r0,r0,20
    1b0c:	90 01 00 80 	stw     r0,128(r1)
    1b10:	80 01 00 0c 	lwz     r0,12(r1)
    1b14:	90 01 00 44 	stw     r0,68(r1)
    1b18:	80 01 00 44 	lwz     r0,68(r1)
    1b1c:	90 01 00 48 	stw     r0,72(r1)
    1b20:	80 01 00 48 	lwz     r0,72(r1)
	gss_msg = __gss_find_upcall(RPC_I(inode), uid);
    1b24:	7c 09 03 78 	mr      r9,r0
    1b28:	80 01 00 94 	lwz     r0,148(r1)
    1b2c:	7d 23 4b 78 	mr      r3,r9
    1b30:	7c 04 03 78 	mr      r4,r0
    1b34:	4b ff ee 95 	bl      9c8 <__gss_find_upcall>
    1b38:	90 61 00 20 	stw     r3,32(r1)
	if (gss_msg == NULL) {
    1b3c:	80 01 00 20 	lwz     r0,32(r1)
    1b40:	2f 80 00 00 	cmpwi   cr7,r0,0
    1b44:	40 9e 00 14 	bne-    cr7,1b58 <gss_pipe_downcall+0x254>
		spin_unlock(&inode->i_lock);
    1b48:	80 01 00 0c 	lwz     r0,12(r1)
    1b4c:	30 00 00 14 	addic   r0,r0,20
    1b50:	90 01 00 90 	stw     r0,144(r1)
		goto err_put_ctx;
    1b54:	48 00 02 10 	b       1d64 <gss_pipe_downcall+0x460>
	}
	list_del_init(&gss_msg->list);
    1b58:	80 01 00 20 	lwz     r0,32(r1)
    1b5c:	30 00 00 20 	addic   r0,r0,32
    1b60:	90 01 00 4c 	stw     r0,76(r1)
    1b64:	80 01 00 4c 	lwz     r0,76(r1)
    1b68:	90 01 00 50 	stw     r0,80(r1)
 * in an undefined state.
 */
#ifndef CONFIG_DEBUG_LIST
static inline void __list_del_entry(struct list_head *entry)
{
	__list_del(entry->prev, entry->next);
    1b6c:	80 01 00 50 	lwz     r0,80(r1)
    1b70:	7c 0a 03 78 	mr      r10,r0
    1b74:	81 2a 00 04 	lwz     r9,4(r10)
    1b78:	80 01 00 50 	lwz     r0,80(r1)
    1b7c:	7c 0b 03 78 	mr      r11,r0
    1b80:	80 0b 00 00 	lwz     r0,0(r11)
    1b84:	91 21 00 54 	stw     r9,84(r1)
    1b88:	90 01 00 58 	stw     r0,88(r1)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 */
static inline void __list_del(struct list_head * prev, struct list_head * next)
{
	next->prev = prev;
    1b8c:	80 01 00 58 	lwz     r0,88(r1)
    1b90:	81 21 00 54 	lwz     r9,84(r1)
    1b94:	7c 0a 03 78 	mr      r10,r0
    1b98:	91 2a 00 04 	stw     r9,4(r10)
	prev->next = next;
    1b9c:	80 01 00 54 	lwz     r0,84(r1)
    1ba0:	81 21 00 58 	lwz     r9,88(r1)
    1ba4:	7c 0b 03 78 	mr      r11,r0
    1ba8:	91 2b 00 00 	stw     r9,0(r11)
    1bac:	80 01 00 4c 	lwz     r0,76(r1)
    1bb0:	90 01 00 5c 	stw     r0,92(r1)
#define LIST_HEAD(name) \
	struct list_head name = LIST_HEAD_INIT(name)

static inline void INIT_LIST_HEAD(struct list_head *list)
{
	list->next = list;
    1bb4:	80 01 00 5c 	lwz     r0,92(r1)
    1bb8:	81 21 00 5c 	lwz     r9,92(r1)
    1bbc:	7c 0a 03 78 	mr      r10,r0
    1bc0:	91 2a 00 00 	stw     r9,0(r10)
	list->prev = list;
    1bc4:	80 01 00 5c 	lwz     r0,92(r1)
    1bc8:	81 21 00 5c 	lwz     r9,92(r1)
    1bcc:	7c 0b 03 78 	mr      r11,r0
    1bd0:	91 2b 00 04 	stw     r9,4(r11)
	spin_unlock(&inode->i_lock);
    1bd4:	80 01 00 0c 	lwz     r0,12(r1)
    1bd8:	30 00 00 14 	addic   r0,r0,20
    1bdc:	90 01 00 84 	stw     r0,132(r1)

	p = gss_fill_context(p, end, ctx, gss_msg->auth->mech);
    1be0:	80 01 00 20 	lwz     r0,32(r1)
    1be4:	7c 09 03 78 	mr      r9,r0
    1be8:	80 09 00 28 	lwz     r0,40(r9)
    1bec:	7c 0a 03 78 	mr      r10,r0
    1bf0:	80 0a 00 24 	lwz     r0,36(r10)
    1bf4:	80 61 00 18 	lwz     r3,24(r1)
    1bf8:	80 81 00 14 	lwz     r4,20(r1)
    1bfc:	80 a1 00 1c 	lwz     r5,28(r1)
    1c00:	7c 06 03 78 	mr      r6,r0
    1c04:	4b ff e7 a5 	bl      3a8 <gss_fill_context>
    1c08:	90 61 00 18 	stw     r3,24(r1)
    1c0c:	80 01 00 18 	lwz     r0,24(r1)
    1c10:	90 01 00 60 	stw     r0,96(r1)
}

static inline long __must_check IS_ERR(const void *ptr)
{
	return IS_ERR_VALUE((unsigned long)ptr);
    1c14:	81 21 00 60 	lwz     r9,96(r1)
    1c18:	38 00 f0 00 	li      r0,-4096
    1c1c:	7f 89 00 40 	cmplw   cr7,r9,r0
    1c20:	7c 00 00 26 	mfcr    r0
    1c24:	54 00 f7 fe 	rlwinm  r0,r0,30,31,31
	if (IS_ERR(p)) {
    1c28:	2f 80 00 00 	cmpwi   cr7,r0,0
    1c2c:	41 9e 00 c4 	beq-    cr7,1cf0 <gss_pipe_downcall+0x3ec>
    1c30:	80 01 00 18 	lwz     r0,24(r1)
    1c34:	90 01 00 64 	stw     r0,100(r1)
	return (void *) error;
}

static inline long __must_check PTR_ERR(const void *ptr)
{
	return (long) ptr;
    1c38:	80 01 00 64 	lwz     r0,100(r1)
		err = PTR_ERR(p);
    1c3c:	90 01 00 08 	stw     r0,8(r1)
		switch (err) {
    1c40:	80 01 00 08 	lwz     r0,8(r1)
    1c44:	39 20 ff ea 	li      r9,-22
    1c48:	7f 80 48 00 	cmpw    cr7,r0,r9
    1c4c:	41 9e 00 70 	beq-    cr7,1cbc <gss_pipe_downcall+0x3b8>
    1c50:	39 20 ff ea 	li      r9,-22
    1c54:	7f 80 48 00 	cmpw    cr7,r0,r9
    1c58:	41 9d 00 20 	bgt-    cr7,1c78 <gss_pipe_downcall+0x374>
    1c5c:	39 20 ff 81 	li      r9,-127
    1c60:	7f 80 48 00 	cmpw    cr7,r0,r9
    1c64:	41 9e 00 3c 	beq-    cr7,1ca0 <gss_pipe_downcall+0x39c>
    1c68:	39 20 ff da 	li      r9,-38
    1c6c:	7f 80 48 00 	cmpw    cr7,r0,r9
    1c70:	41 9e 00 4c 	beq-    cr7,1cbc <gss_pipe_downcall+0x3b8>
    1c74:	48 00 00 5c 	b       1cd0 <gss_pipe_downcall+0x3cc>
    1c78:	39 20 ff f3 	li      r9,-13
    1c7c:	7f 80 48 00 	cmpw    cr7,r0,r9
    1c80:	41 9e 00 20 	beq-    cr7,1ca0 <gss_pipe_downcall+0x39c>
    1c84:	39 20 ff f4 	li      r9,-12
    1c88:	7f 80 48 00 	cmpw    cr7,r0,r9
    1c8c:	41 9e 00 30 	beq-    cr7,1cbc <gss_pipe_downcall+0x3b8>
    1c90:	39 20 ff f2 	li      r9,-14
    1c94:	7f 80 48 00 	cmpw    cr7,r0,r9
    1c98:	41 9e 00 24 	beq-    cr7,1cbc <gss_pipe_downcall+0x3b8>
    1c9c:	48 00 00 34 	b       1cd0 <gss_pipe_downcall+0x3cc>
		case -EACCES:
		case -EKEYEXPIRED:
			gss_msg->msg.errno = err;
    1ca0:	80 01 00 20 	lwz     r0,32(r1)
    1ca4:	81 21 00 08 	lwz     r9,8(r1)
    1ca8:	7c 0b 03 78 	mr      r11,r0
    1cac:	91 2b 00 1c 	stw     r9,28(r11)
			err = mlen;
    1cb0:	80 01 00 a0 	lwz     r0,160(r1)
    1cb4:	90 01 00 08 	stw     r0,8(r1)
			break;
    1cb8:	48 00 00 34 	b       1cec <gss_pipe_downcall+0x3e8>
		case -EFAULT:
		case -ENOMEM:
		case -EINVAL:
		case -ENOSYS:
			gss_msg->msg.errno = -EAGAIN;
    1cbc:	80 01 00 20 	lwz     r0,32(r1)
    1cc0:	39 20 ff f5 	li      r9,-11
    1cc4:	7c 0a 03 78 	mr      r10,r0
    1cc8:	91 2a 00 1c 	stw     r9,28(r10)
			break;
    1ccc:	48 00 00 20 	b       1cec <gss_pipe_downcall+0x3e8>
		default:
			printk(KERN_CRIT "%s: bad return from "
    1cd0:	3c 00 00 00 	lis     r0,0
    1cd4:	30 60 01 f4 	addic   r3,r0,500
    1cd8:	3c 00 00 00 	lis     r0,0
    1cdc:	30 80 06 10 	addic   r4,r0,1552
    1ce0:	80 a1 00 08 	lwz     r5,8(r1)
    1ce4:	48 00 00 01 	bl      1ce4 <gss_pipe_downcall+0x3e0>
				"gss_fill_context: %zd\n", __func__, err);
			BUG();
    1ce8:	0f e0 00 00 	twi     31,r0,0
		}
		goto err_release_msg;
    1cec:	48 00 00 50 	b       1d3c <gss_pipe_downcall+0x438>
    1cf0:	80 01 00 1c 	lwz     r0,28(r1)
    1cf4:	90 01 00 68 	stw     r0,104(r1)
static const struct rpc_pipe_ops gss_upcall_ops_v1;

static inline struct gss_cl_ctx *
gss_get_ctx(struct gss_cl_ctx *ctx)
{
	atomic_inc(&ctx->count);
    1cf8:	80 01 00 68 	lwz     r0,104(r1)
    1cfc:	90 01 00 6c 	stw     r0,108(r1)
	addic	%0,%0,1\n"
	PPC405_ERR77(0,%2)
"	stwcx.	%0,0,%2 \n\
	bne-	1b"
	: "=&r" (t), "+m" (v->counter)
	: "r" (&v->counter)
    1d00:	80 01 00 6c 	lwz     r0,108(r1)
"1:	lwarx	%0,0,%2		# atomic_inc\n\
	addic	%0,%0,1\n"
	PPC405_ERR77(0,%2)
"	stwcx.	%0,0,%2 \n\
	bne-	1b"
	: "=&r" (t), "+m" (v->counter)
    1d04:	81 61 00 6c 	lwz     r11,108(r1)
    1d08:	81 21 00 6c 	lwz     r9,108(r1)

static __inline__ void atomic_inc(atomic_t *v)
{
	int t;

	__asm__ __volatile__(
    1d0c:	7f e0 00 28 	lwarx   r31,0,r0
    1d10:	33 ff 00 01 	addic   r31,r31,1
    1d14:	7f e0 01 2d 	stwcx.  r31,0,r0
    1d18:	40 a2 ff f4 	bne-    1d0c <gss_pipe_downcall+0x408>
    1d1c:	93 e1 00 70 	stw     r31,112(r1)
	return ctx;
    1d20:	80 01 00 68 	lwz     r0,104(r1)
				"gss_fill_context: %zd\n", __func__, err);
			BUG();
		}
		goto err_release_msg;
	}
	gss_msg->ctx = gss_get_ctx(ctx);
    1d24:	7c 09 03 78 	mr      r9,r0
    1d28:	80 01 00 20 	lwz     r0,32(r1)
    1d2c:	7c 0b 03 78 	mr      r11,r0
    1d30:	91 2b 00 90 	stw     r9,144(r11)
	err = mlen;
    1d34:	80 01 00 a0 	lwz     r0,160(r1)
    1d38:	90 01 00 08 	stw     r0,8(r1)

err_release_msg:
	spin_lock(&inode->i_lock);
    1d3c:	80 01 00 0c 	lwz     r0,12(r1)
    1d40:	30 00 00 14 	addic   r0,r0,20
    1d44:	90 01 00 88 	stw     r0,136(r1)
	__gss_unhash_msg(gss_msg);
    1d48:	80 61 00 20 	lwz     r3,32(r1)
    1d4c:	4b ff ed ed 	bl      b38 <__gss_unhash_msg>
	spin_unlock(&inode->i_lock);
    1d50:	80 01 00 0c 	lwz     r0,12(r1)
    1d54:	30 00 00 14 	addic   r0,r0,20
    1d58:	90 01 00 8c 	stw     r0,140(r1)
	gss_release_msg(gss_msg);
    1d5c:	80 61 00 20 	lwz     r3,32(r1)
    1d60:	4b ff eb 61 	bl      8c0 <gss_release_msg>
    1d64:	80 01 00 1c 	lwz     r0,28(r1)
    1d68:	90 01 00 74 	stw     r0,116(r1)
}

static inline void
gss_put_ctx(struct gss_cl_ctx *ctx)
{
	if (atomic_dec_and_test(&ctx->count))
    1d6c:	80 01 00 74 	lwz     r0,116(r1)
    1d70:	90 01 00 78 	stw     r0,120(r1)
	PPC405_ERR77(0,%1)
"	stwcx.	%0,0,%1\n\
	bne-	1b"
	PPC_ACQUIRE_BARRIER
	: "=&r" (t)
	: "r" (&v->counter)
    1d74:	80 01 00 78 	lwz     r0,120(r1)

static __inline__ int atomic_dec_return(atomic_t *v)
{
	int t;

	__asm__ __volatile__(
    1d78:	7f e0 00 28 	lwarx   r31,0,r0
    1d7c:	33 ff ff ff 	addic   r31,r31,-1
    1d80:	7f e0 01 2d 	stwcx.  r31,0,r0
    1d84:	40 a2 ff f4 	bne-    1d78 <gss_pipe_downcall+0x474>
    1d88:	93 e1 00 7c 	stw     r31,124(r1)
	PPC_ACQUIRE_BARRIER
	: "=&r" (t)
	: "r" (&v->counter)
	: "cc", "xer", "memory");

	return t;
    1d8c:	80 01 00 7c 	lwz     r0,124(r1)
    1d90:	2f 80 00 00 	cmpwi   cr7,r0,0
    1d94:	40 9e 00 1c 	bne-    cr7,1db0 <gss_pipe_downcall+0x4ac>
		gss_free_ctx(ctx);
    1d98:	80 61 00 74 	lwz     r3,116(r1)
    1d9c:	48 00 0b b1 	bl      294c <gss_free_ctx>
    1da0:	48 00 00 10 	b       1db0 <gss_pipe_downcall+0x4ac>
	if (!buf)
		goto out;

	err = -EFAULT;
	if (copy_from_user(buf, src, mlen))
		goto err;
    1da4:	60 00 00 00 	nop
    1da8:	48 00 00 08 	b       1db0 <gss_pipe_downcall+0x4ac>
	}

	err = -ENOMEM;
	ctx = gss_alloc_context();
	if (ctx == NULL)
		goto err;
    1dac:	60 00 00 00 	nop
	spin_unlock(&inode->i_lock);
	gss_release_msg(gss_msg);
err_put_ctx:
	gss_put_ctx(ctx);
err:
	kfree(buf);
    1db0:	80 61 00 10 	lwz     r3,16(r1)
    1db4:	48 00 00 01 	bl      1db4 <gss_pipe_downcall+0x4b0>
    1db8:	48 00 00 10 	b       1dc8 <gss_pipe_downcall+0x4c4>
	struct gss_cl_ctx *ctx;
	uid_t uid;
	ssize_t err = -EFBIG;

	if (mlen > MSG_BUF_MAXSIZE)
		goto out;
    1dbc:	60 00 00 00 	nop
    1dc0:	48 00 00 08 	b       1dc8 <gss_pipe_downcall+0x4c4>
	err = -ENOMEM;
	buf = kmalloc(mlen, GFP_NOFS);
	if (!buf)
		goto out;
    1dc4:	60 00 00 00 	nop
err_put_ctx:
	gss_put_ctx(ctx);
err:
	kfree(buf);
out:
	dprintk("RPC:       gss_pipe_downcall returning %Zd\n", err);
    1dc8:	3c 00 00 00 	lis     r0,0
    1dcc:	7c 09 03 78 	mr      r9,r0
    1dd0:	80 09 00 00 	lwz     r0,0(r9)
    1dd4:	54 00 06 f6 	rlwinm  r0,r0,0,27,27
    1dd8:	2f 80 00 00 	cmpwi   cr7,r0,0
    1ddc:	7c 00 00 26 	mfcr    r0
    1de0:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
    1de4:	68 00 00 01 	xori    r0,r0,1
    1de8:	2f 80 00 00 	cmpwi   cr7,r0,0
    1dec:	41 9e 00 14 	beq-    cr7,1e00 <gss_pipe_downcall+0x4fc>
    1df0:	3c 00 00 00 	lis     r0,0
    1df4:	30 60 02 24 	addic   r3,r0,548
    1df8:	80 81 00 08 	lwz     r4,8(r1)
    1dfc:	48 00 00 01 	bl      1dfc <gss_pipe_downcall+0x4f8>
	return err;
    1e00:	80 01 00 08 	lwz     r0,8(r1)
}
    1e04:	7c 03 03 78 	mr      r3,r0
    1e08:	80 01 00 b4 	lwz     r0,180(r1)
    1e0c:	7c 08 03 a6 	mtlr    r0
    1e10:	83 e1 00 ac 	lwz     r31,172(r1)
    1e14:	38 21 00 b0 	addi    r1,r1,176
    1e18:	4e 80 00 20 	blr

00001e1c <gss_pipe_open>:

static int gss_pipe_open(struct inode *inode, int new_version)
{
    1e1c:	94 21 ff c0 	stwu    r1,-64(r1)
    1e20:	7c 08 02 a6 	mflr    r0
    1e24:	90 01 00 44 	stw     r0,68(r1)
    1e28:	93 e1 00 3c 	stw     r31,60(r1)
    1e2c:	90 61 00 28 	stw     r3,40(r1)
    1e30:	90 81 00 2c 	stw     r4,44(r1)
	int ret = 0;
    1e34:	38 00 00 00 	li      r0,0
    1e38:	90 01 00 08 	stw     r0,8(r1)
    1e3c:	3c 00 00 00 	lis     r0,0
    1e40:	30 00 00 04 	addic   r0,r0,4
    1e44:	90 01 00 14 	stw     r0,20(r1)

	spin_lock(&pipe_version_lock);
	if (pipe_version < 0) {
    1e48:	3c 00 00 00 	lis     r0,0
    1e4c:	7c 09 03 78 	mr      r9,r0
    1e50:	80 09 00 04 	lwz     r0,4(r9)
    1e54:	2f 80 00 00 	cmpwi   cr7,r0,0
    1e58:	40 9c 00 3c 	bge-    cr7,1e94 <gss_pipe_open+0x78>
		/* First open of any gss pipe determines the version: */
		pipe_version = new_version;
    1e5c:	3c 00 00 00 	lis     r0,0
    1e60:	81 21 00 2c 	lwz     r9,44(r1)
    1e64:	7c 0b 03 78 	mr      r11,r0
    1e68:	91 2b 00 04 	stw     r9,4(r11)
		rpc_wake_up(&pipe_version_rpc_waitqueue);
    1e6c:	3c 00 00 00 	lis     r0,0
    1e70:	30 60 00 04 	addic   r3,r0,4
    1e74:	48 00 00 01 	bl      1e74 <gss_pipe_open+0x58>
		wake_up(&pipe_version_waitqueue);
    1e78:	3c 00 00 00 	lis     r0,0
    1e7c:	30 60 00 08 	addic   r3,r0,8
    1e80:	38 80 00 03 	li      r4,3
    1e84:	38 a0 00 01 	li      r5,1
    1e88:	38 c0 00 00 	li      r6,0
    1e8c:	48 00 00 01 	bl      1e8c <gss_pipe_open+0x70>
    1e90:	48 00 00 28 	b       1eb8 <gss_pipe_open+0x9c>
	} else if (pipe_version != new_version) {
    1e94:	3c 00 00 00 	lis     r0,0
    1e98:	7c 0b 03 78 	mr      r11,r0
    1e9c:	81 2b 00 04 	lwz     r9,4(r11)
    1ea0:	80 01 00 2c 	lwz     r0,44(r1)
    1ea4:	7f 89 00 00 	cmpw    cr7,r9,r0
    1ea8:	41 9e 00 10 	beq-    cr7,1eb8 <gss_pipe_open+0x9c>
		/* Trying to open a pipe of a different version */
		ret = -EBUSY;
    1eac:	38 00 ff f0 	li      r0,-16
    1eb0:	90 01 00 08 	stw     r0,8(r1)
		goto out;
    1eb4:	48 00 00 30 	b       1ee4 <gss_pipe_open+0xc8>
    1eb8:	3c 00 00 00 	lis     r0,0
    1ebc:	30 00 00 00 	addic   r0,r0,0
    1ec0:	90 01 00 0c 	stw     r0,12(r1)
	addic	%0,%0,1\n"
	PPC405_ERR77(0,%2)
"	stwcx.	%0,0,%2 \n\
	bne-	1b"
	: "=&r" (t), "+m" (v->counter)
	: "r" (&v->counter)
    1ec4:	80 01 00 0c 	lwz     r0,12(r1)
"1:	lwarx	%0,0,%2		# atomic_inc\n\
	addic	%0,%0,1\n"
	PPC405_ERR77(0,%2)
"	stwcx.	%0,0,%2 \n\
	bne-	1b"
	: "=&r" (t), "+m" (v->counter)
    1ec8:	81 61 00 0c 	lwz     r11,12(r1)
    1ecc:	81 21 00 0c 	lwz     r9,12(r1)

static __inline__ void atomic_inc(atomic_t *v)
{
	int t;

	__asm__ __volatile__(
    1ed0:	7f e0 00 28 	lwarx   r31,0,r0
    1ed4:	33 ff 00 01 	addic   r31,r31,1
    1ed8:	7f e0 01 2d 	stwcx.  r31,0,r0
    1edc:	40 a2 ff f4 	bne-    1ed0 <gss_pipe_open+0xb4>
    1ee0:	93 e1 00 10 	stw     r31,16(r1)
    1ee4:	3c 00 00 00 	lis     r0,0
    1ee8:	30 00 00 04 	addic   r0,r0,4
    1eec:	90 01 00 18 	stw     r0,24(r1)
	}
	atomic_inc(&pipe_users);
out:
	spin_unlock(&pipe_version_lock);
	return ret;
    1ef0:	80 01 00 08 	lwz     r0,8(r1)

}
    1ef4:	7c 03 03 78 	mr      r3,r0
    1ef8:	80 01 00 44 	lwz     r0,68(r1)
    1efc:	7c 08 03 a6 	mtlr    r0
    1f00:	83 e1 00 3c 	lwz     r31,60(r1)
    1f04:	38 21 00 40 	addi    r1,r1,64
    1f08:	4e 80 00 20 	blr

00001f0c <gss_pipe_open_v0>:

static int gss_pipe_open_v0(struct inode *inode)
{
    1f0c:	94 21 ff f0 	stwu    r1,-16(r1)
    1f10:	7c 08 02 a6 	mflr    r0
    1f14:	90 01 00 14 	stw     r0,20(r1)
    1f18:	90 61 00 08 	stw     r3,8(r1)
	return gss_pipe_open(inode, 0);
    1f1c:	80 61 00 08 	lwz     r3,8(r1)
    1f20:	38 80 00 00 	li      r4,0
    1f24:	4b ff fe f9 	bl      1e1c <gss_pipe_open>
    1f28:	7c 60 1b 78 	mr      r0,r3
}
    1f2c:	7c 03 03 78 	mr      r3,r0
    1f30:	80 01 00 14 	lwz     r0,20(r1)
    1f34:	7c 08 03 a6 	mtlr    r0
    1f38:	38 21 00 10 	addi    r1,r1,16
    1f3c:	4e 80 00 20 	blr

00001f40 <gss_pipe_open_v1>:

static int gss_pipe_open_v1(struct inode *inode)
{
    1f40:	94 21 ff f0 	stwu    r1,-16(r1)
    1f44:	7c 08 02 a6 	mflr    r0
    1f48:	90 01 00 14 	stw     r0,20(r1)
    1f4c:	90 61 00 08 	stw     r3,8(r1)
	return gss_pipe_open(inode, 1);
    1f50:	80 61 00 08 	lwz     r3,8(r1)
    1f54:	38 80 00 01 	li      r4,1
    1f58:	4b ff fe c5 	bl      1e1c <gss_pipe_open>
    1f5c:	7c 60 1b 78 	mr      r0,r3
}
    1f60:	7c 03 03 78 	mr      r3,r0
    1f64:	80 01 00 14 	lwz     r0,20(r1)
    1f68:	7c 08 03 a6 	mtlr    r0
    1f6c:	38 21 00 10 	addi    r1,r1,16
    1f70:	4e 80 00 20 	blr

00001f74 <gss_pipe_release>:

static void
gss_pipe_release(struct inode *inode)
{
    1f74:	94 21 ff a0 	stwu    r1,-96(r1)
    1f78:	7c 08 02 a6 	mflr    r0
    1f7c:	90 01 00 64 	stw     r0,100(r1)
    1f80:	93 e1 00 5c 	stw     r31,92(r1)
    1f84:	90 61 00 48 	stw     r3,72(r1)
    1f88:	80 01 00 48 	lwz     r0,72(r1)
    1f8c:	90 01 00 18 	stw     r0,24(r1)
    1f90:	80 01 00 18 	lwz     r0,24(r1)
    1f94:	90 01 00 1c 	stw     r0,28(r1)
    1f98:	80 01 00 1c 	lwz     r0,28(r1)
	struct rpc_inode *rpci = RPC_I(inode);
    1f9c:	90 01 00 0c 	stw     r0,12(r1)
	struct gss_upcall_msg *gss_msg;

restart:
	spin_lock(&inode->i_lock);
    1fa0:	80 01 00 48 	lwz     r0,72(r1)
    1fa4:	30 00 00 14 	addic   r0,r0,20
    1fa8:	90 01 00 30 	stw     r0,48(r1)
	list_for_each_entry(gss_msg, &rpci->in_downcall, list) {
    1fac:	80 01 00 0c 	lwz     r0,12(r1)
    1fb0:	7c 09 03 78 	mr      r9,r0
    1fb4:	80 09 01 3c 	lwz     r0,316(r9)
    1fb8:	90 01 00 10 	stw     r0,16(r1)
    1fbc:	80 01 00 10 	lwz     r0,16(r1)
    1fc0:	30 00 ff e0 	addic   r0,r0,-32
    1fc4:	90 01 00 08 	stw     r0,8(r1)
    1fc8:	48 00 00 ac 	b       2074 <gss_pipe_release+0x100>

		if (!list_empty(&gss_msg->msg.list))
    1fcc:	80 01 00 08 	lwz     r0,8(r1)
    1fd0:	30 00 00 08 	addic   r0,r0,8
    1fd4:	90 01 00 20 	stw     r0,32(r1)
 * list_empty - tests whether a list is empty
 * @head: the list to test.
 */
static inline int list_empty(const struct list_head *head)
{
	return head->next == head;
    1fd8:	80 01 00 20 	lwz     r0,32(r1)
    1fdc:	7c 0b 03 78 	mr      r11,r0
    1fe0:	80 0b 00 00 	lwz     r0,0(r11)
    1fe4:	81 21 00 20 	lwz     r9,32(r1)
    1fe8:	7f 89 00 00 	cmpw    cr7,r9,r0
    1fec:	7c 00 00 26 	mfcr    r0
    1ff0:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
    1ff4:	2f 80 00 00 	cmpwi   cr7,r0,0
    1ff8:	40 9e 00 24 	bne-    cr7,201c <gss_pipe_release+0xa8>
	struct rpc_inode *rpci = RPC_I(inode);
	struct gss_upcall_msg *gss_msg;

restart:
	spin_lock(&inode->i_lock);
	list_for_each_entry(gss_msg, &rpci->in_downcall, list) {
    1ffc:	80 01 00 08 	lwz     r0,8(r1)
    2000:	7c 09 03 78 	mr      r9,r0
    2004:	80 09 00 20 	lwz     r0,32(r9)
    2008:	90 01 00 14 	stw     r0,20(r1)
    200c:	80 01 00 14 	lwz     r0,20(r1)
    2010:	30 00 ff e0 	addic   r0,r0,-32
    2014:	90 01 00 08 	stw     r0,8(r1)
    2018:	48 00 00 5c 	b       2074 <gss_pipe_release+0x100>

		if (!list_empty(&gss_msg->msg.list))
			continue;
		gss_msg->msg.errno = -EPIPE;
    201c:	80 01 00 08 	lwz     r0,8(r1)
    2020:	39 20 ff e0 	li      r9,-32
    2024:	7c 0b 03 78 	mr      r11,r0
    2028:	91 2b 00 1c 	stw     r9,28(r11)
		atomic_inc(&gss_msg->count);
    202c:	80 01 00 08 	lwz     r0,8(r1)
    2030:	90 01 00 24 	stw     r0,36(r1)
	addic	%0,%0,1\n"
	PPC405_ERR77(0,%2)
"	stwcx.	%0,0,%2 \n\
	bne-	1b"
	: "=&r" (t), "+m" (v->counter)
	: "r" (&v->counter)
    2034:	80 01 00 24 	lwz     r0,36(r1)
"1:	lwarx	%0,0,%2		# atomic_inc\n\
	addic	%0,%0,1\n"
	PPC405_ERR77(0,%2)
"	stwcx.	%0,0,%2 \n\
	bne-	1b"
	: "=&r" (t), "+m" (v->counter)
    2038:	81 61 00 24 	lwz     r11,36(r1)
    203c:	81 21 00 24 	lwz     r9,36(r1)

static __inline__ void atomic_inc(atomic_t *v)
{
	int t;

	__asm__ __volatile__(
    2040:	7f e0 00 28 	lwarx   r31,0,r0
    2044:	33 ff 00 01 	addic   r31,r31,1
    2048:	7f e0 01 2d 	stwcx.  r31,0,r0
    204c:	40 a2 ff f4 	bne-    2040 <gss_pipe_release+0xcc>
    2050:	93 e1 00 28 	stw     r31,40(r1)
		__gss_unhash_msg(gss_msg);
    2054:	80 61 00 08 	lwz     r3,8(r1)
    2058:	4b ff ea e1 	bl      b38 <__gss_unhash_msg>
		spin_unlock(&inode->i_lock);
    205c:	80 01 00 48 	lwz     r0,72(r1)
    2060:	30 00 00 14 	addic   r0,r0,20
    2064:	90 01 00 34 	stw     r0,52(r1)
		gss_release_msg(gss_msg);
    2068:	80 61 00 08 	lwz     r3,8(r1)
    206c:	4b ff e8 55 	bl      8c0 <gss_release_msg>
		goto restart;
    2070:	4b ff ff 30 	b       1fa0 <gss_pipe_release+0x2c>
	struct rpc_inode *rpci = RPC_I(inode);
	struct gss_upcall_msg *gss_msg;

restart:
	spin_lock(&inode->i_lock);
	list_for_each_entry(gss_msg, &rpci->in_downcall, list) {
    2074:	80 01 00 08 	lwz     r0,8(r1)
    2078:	7c 09 03 78 	mr      r9,r0
    207c:	80 09 00 20 	lwz     r0,32(r9)
    2080:	90 01 00 2c 	stw     r0,44(r1)
#define ARCH_HAS_PREFETCHW
#define ARCH_HAS_SPINLOCK_PREFETCH

static inline void prefetch(const void *x)
{
	if (unlikely(!x))
    2084:	80 01 00 2c 	lwz     r0,44(r1)
    2088:	2f 80 00 00 	cmpwi   cr7,r0,0
    208c:	7c 00 00 26 	mfcr    r0
    2090:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
    2094:	2f 80 00 00 	cmpwi   cr7,r0,0
    2098:	40 9e 00 0c 	bne-    cr7,20a4 <gss_pipe_release+0x130>
		return;

	__asm__ __volatile__ ("dcbt 0,%0" : : "r" (x));
    209c:	80 01 00 2c 	lwz     r0,44(r1)
    20a0:	7c 00 02 2c 	dcbt    r0,r0
    20a4:	80 01 00 08 	lwz     r0,8(r1)
    20a8:	31 20 00 20 	addic   r9,r0,32
    20ac:	80 01 00 0c 	lwz     r0,12(r1)
    20b0:	30 00 01 3c 	addic   r0,r0,316
    20b4:	7f 89 00 00 	cmpw    cr7,r9,r0
    20b8:	40 9e ff 14 	bne+    cr7,1fcc <gss_pipe_release+0x58>
		__gss_unhash_msg(gss_msg);
		spin_unlock(&inode->i_lock);
		gss_release_msg(gss_msg);
		goto restart;
	}
	spin_unlock(&inode->i_lock);
    20bc:	80 01 00 48 	lwz     r0,72(r1)
    20c0:	30 00 00 14 	addic   r0,r0,20
    20c4:	90 01 00 38 	stw     r0,56(r1)

	put_pipe_version();
    20c8:	4b ff e7 a1 	bl      868 <put_pipe_version>
}
    20cc:	80 01 00 64 	lwz     r0,100(r1)
    20d0:	7c 08 03 a6 	mtlr    r0
    20d4:	83 e1 00 5c 	lwz     r31,92(r1)
    20d8:	38 21 00 60 	addi    r1,r1,96
    20dc:	4e 80 00 20 	blr

000020e0 <gss_pipe_destroy_msg>:

static void
gss_pipe_destroy_msg(struct rpc_pipe_msg *msg)
{
    20e0:	94 21 ff d0 	stwu    r1,-48(r1)
    20e4:	7c 08 02 a6 	mflr    r0
    20e8:	90 01 00 34 	stw     r0,52(r1)
    20ec:	93 e1 00 2c 	stw     r31,44(r1)
    20f0:	90 61 00 18 	stw     r3,24(r1)
	struct gss_upcall_msg *gss_msg = container_of(msg, struct gss_upcall_msg, msg);
    20f4:	80 01 00 18 	lwz     r0,24(r1)
    20f8:	90 01 00 08 	stw     r0,8(r1)
    20fc:	80 01 00 08 	lwz     r0,8(r1)
    2100:	30 00 ff f8 	addic   r0,r0,-8
    2104:	90 01 00 0c 	stw     r0,12(r1)

	if (msg->errno < 0) {
    2108:	80 01 00 18 	lwz     r0,24(r1)
    210c:	7c 09 03 78 	mr      r9,r0
    2110:	80 09 00 14 	lwz     r0,20(r9)
    2114:	2f 80 00 00 	cmpwi   cr7,r0,0
    2118:	40 9c 00 90 	bge-    cr7,21a8 <gss_pipe_destroy_msg+0xc8>
		dprintk("RPC:       gss_pipe_destroy_msg releasing msg %p\n",
    211c:	3c 00 00 00 	lis     r0,0
    2120:	7c 0b 03 78 	mr      r11,r0
    2124:	80 0b 00 00 	lwz     r0,0(r11)
    2128:	54 00 06 f6 	rlwinm  r0,r0,0,27,27
    212c:	2f 80 00 00 	cmpwi   cr7,r0,0
    2130:	7c 00 00 26 	mfcr    r0
    2134:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
    2138:	68 00 00 01 	xori    r0,r0,1
    213c:	2f 80 00 00 	cmpwi   cr7,r0,0
    2140:	41 9e 00 14 	beq-    cr7,2154 <gss_pipe_destroy_msg+0x74>
    2144:	3c 00 00 00 	lis     r0,0
    2148:	30 60 02 50 	addic   r3,r0,592
    214c:	80 81 00 0c 	lwz     r4,12(r1)
    2150:	48 00 00 01 	bl      2150 <gss_pipe_destroy_msg+0x70>
				gss_msg);
		atomic_inc(&gss_msg->count);
    2154:	80 01 00 0c 	lwz     r0,12(r1)
    2158:	90 01 00 10 	stw     r0,16(r1)
	addic	%0,%0,1\n"
	PPC405_ERR77(0,%2)
"	stwcx.	%0,0,%2 \n\
	bne-	1b"
	: "=&r" (t), "+m" (v->counter)
	: "r" (&v->counter)
    215c:	80 01 00 10 	lwz     r0,16(r1)
"1:	lwarx	%0,0,%2		# atomic_inc\n\
	addic	%0,%0,1\n"
	PPC405_ERR77(0,%2)
"	stwcx.	%0,0,%2 \n\
	bne-	1b"
	: "=&r" (t), "+m" (v->counter)
    2160:	81 61 00 10 	lwz     r11,16(r1)
    2164:	81 21 00 10 	lwz     r9,16(r1)

static __inline__ void atomic_inc(atomic_t *v)
{
	int t;

	__asm__ __volatile__(
    2168:	7f e0 00 28 	lwarx   r31,0,r0
    216c:	33 ff 00 01 	addic   r31,r31,1
    2170:	7f e0 01 2d 	stwcx.  r31,0,r0
    2174:	40 a2 ff f4 	bne-    2168 <gss_pipe_destroy_msg+0x88>
    2178:	93 e1 00 14 	stw     r31,20(r1)
		gss_unhash_msg(gss_msg);
    217c:	80 61 00 0c 	lwz     r3,12(r1)
    2180:	4b ff ea c1 	bl      c40 <gss_unhash_msg>
		if (msg->errno == -ETIMEDOUT)
    2184:	80 01 00 18 	lwz     r0,24(r1)
    2188:	7c 0b 03 78 	mr      r11,r0
    218c:	81 2b 00 14 	lwz     r9,20(r11)
    2190:	38 00 ff 92 	li      r0,-110
    2194:	7f 89 00 00 	cmpw    cr7,r9,r0
    2198:	40 9e 00 08 	bne-    cr7,21a0 <gss_pipe_destroy_msg+0xc0>
			warn_gssd();
    219c:	4b ff f5 0d 	bl      16a8 <warn_gssd>
		gss_release_msg(gss_msg);
    21a0:	80 61 00 0c 	lwz     r3,12(r1)
    21a4:	4b ff e7 1d 	bl      8c0 <gss_release_msg>
	}
}
    21a8:	80 01 00 34 	lwz     r0,52(r1)
    21ac:	7c 08 03 a6 	mtlr    r0
    21b0:	83 e1 00 2c 	lwz     r31,44(r1)
    21b4:	38 21 00 30 	addi    r1,r1,48
    21b8:	4e 80 00 20 	blr

000021bc <gss_create>:
 * NOTE: we have the opportunity to use different
 * parameters based on the input flavor (which must be a pseudoflavor)
 */
static struct rpc_auth *
gss_create(struct rpc_clnt *clnt, rpc_authflavor_t flavor)
{
    21bc:	94 21 ff a0 	stwu    r1,-96(r1)
    21c0:	7c 08 02 a6 	mflr    r0
    21c4:	90 01 00 64 	stw     r0,100(r1)
    21c8:	90 61 00 58 	stw     r3,88(r1)
    21cc:	90 81 00 5c 	stw     r4,92(r1)
	struct gss_auth *gss_auth;
	struct rpc_auth * auth;
	int err = -ENOMEM; /* XXX? */
    21d0:	38 00 ff f4 	li      r0,-12
    21d4:	90 01 00 08 	stw     r0,8(r1)

	dprintk("RPC:       creating GSS authenticator for client %p\n", clnt);
    21d8:	3c 00 00 00 	lis     r0,0
    21dc:	7c 09 03 78 	mr      r9,r0
    21e0:	80 09 00 00 	lwz     r0,0(r9)
    21e4:	54 00 06 f6 	rlwinm  r0,r0,0,27,27
    21e8:	2f 80 00 00 	cmpwi   cr7,r0,0
    21ec:	7c 00 00 26 	mfcr    r0
    21f0:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
    21f4:	68 00 00 01 	xori    r0,r0,1
    21f8:	2f 80 00 00 	cmpwi   cr7,r0,0
    21fc:	41 9e 00 14 	beq-    cr7,2210 <gss_create+0x54>
    2200:	3c 00 00 00 	lis     r0,0
    2204:	30 60 02 84 	addic   r3,r0,644
    2208:	80 81 00 58 	lwz     r4,88(r1)
    220c:	48 00 00 01 	bl      220c <gss_create+0x50>
    2210:	38 00 00 00 	li      r0,0
    2214:	90 01 00 14 	stw     r0,20(r1)
	}
}

static inline int try_module_get(struct module *module)
{
	int ret = 1;
    2218:	38 00 00 01 	li      r0,1
    221c:	90 01 00 18 	stw     r0,24(r1)

	if (module) {
    2220:	80 01 00 14 	lwz     r0,20(r1)
    2224:	2f 80 00 00 	cmpwi   cr7,r0,0
    2228:	41 9e 00 94 	beq-    cr7,22bc <gss_create+0x100>
    222c:	80 01 00 14 	lwz     r0,20(r1)
    2230:	90 01 00 1c 	stw     r0,28(r1)
/* FIXME: It'd be nice to isolate modules during init, too, so they
   aren't used before they (may) fail.  But presently too much code
   (IDE & SCSI) require entry into the module during init.*/
static inline int module_is_live(struct module *mod)
{
	return mod->state != MODULE_STATE_GOING;
    2234:	80 01 00 1c 	lwz     r0,28(r1)
    2238:	7c 0b 03 78 	mr      r11,r0
    223c:	80 0b 00 00 	lwz     r0,0(r11)
    2240:	68 00 00 02 	xori    r0,r0,2
    2244:	2f 80 00 00 	cmpwi   cr7,r0,0
    2248:	7c 00 00 26 	mfcr    r0
    224c:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
    2250:	68 00 00 01 	xori    r0,r0,1
	int ret = 1;

	if (module) {
		preempt_disable();

		if (likely(module_is_live(module))) {
    2254:	2f 80 00 00 	cmpwi   cr7,r0,0
    2258:	7c 00 00 26 	mfcr    r0
    225c:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
    2260:	68 00 00 01 	xori    r0,r0,1
    2264:	2f 80 00 00 	cmpwi   cr7,r0,0
    2268:	41 9e 00 4c 	beq-    cr7,22b4 <gss_create+0xf8>
			__this_cpu_inc(module->refptr->incs);
    226c:	38 00 00 00 	li      r0,0
    2270:	90 01 00 20 	stw     r0,32(r1)
    2274:	38 00 00 00 	li      r0,0
    2278:	90 01 00 24 	stw     r0,36(r1)
    227c:	80 01 00 14 	lwz     r0,20(r1)
    2280:	7c 09 03 78 	mr      r9,r0
    2284:	80 09 01 48 	lwz     r0,328(r9)
    2288:	7c 0b 03 78 	mr      r11,r0
    228c:	81 2b 00 00 	lwz     r9,0(r11)
    2290:	39 29 00 01 	addi    r9,r9,1
    2294:	7c 0b 03 78 	mr      r11,r0
    2298:	91 2b 00 00 	stw     r9,0(r11)
			trace_module_get(module, _THIS_IP_);
    229c:	3c 00 00 00 	lis     r0,0
    22a0:	30 00 22 9c 	addic   r0,r0,8860
    22a4:	81 21 00 14 	lwz     r9,20(r1)
    22a8:	91 21 00 28 	stw     r9,40(r1)
    22ac:	90 01 00 2c 	stw     r0,44(r1)
    22b0:	48 00 00 0c 	b       22bc <gss_create+0x100>
		} else
			ret = 0;
    22b4:	38 00 00 00 	li      r0,0
    22b8:	90 01 00 18 	stw     r0,24(r1)

		preempt_enable();
	}
	return ret;
    22bc:	80 01 00 18 	lwz     r0,24(r1)

	if (!try_module_get(THIS_MODULE))
    22c0:	2f 80 00 00 	cmpwi   cr7,r0,0
    22c4:	40 9e 00 14 	bne-    cr7,22d8 <gss_create+0x11c>
    22c8:	80 01 00 08 	lwz     r0,8(r1)
    22cc:	90 01 00 30 	stw     r0,48(r1)

#define IS_ERR_VALUE(x) unlikely((x) >= (unsigned long)-MAX_ERRNO)

static inline void * __must_check ERR_PTR(long error)
{
	return (void *) error;
    22d0:	80 01 00 30 	lwz     r0,48(r1)
		return ERR_PTR(err);
    22d4:	48 00 02 f4 	b       25c8 <gss_create+0x40c>
    22d8:	38 00 00 38 	li      r0,56
    22dc:	90 01 00 34 	stw     r0,52(r1)
    22e0:	38 00 00 d0 	li      r0,208
    22e4:	90 01 00 38 	stw     r0,56(r1)
    22e8:	80 61 00 34 	lwz     r3,52(r1)
    22ec:	80 81 00 38 	lwz     r4,56(r1)
    22f0:	48 00 00 01 	bl      22f0 <gss_create+0x134>
    22f4:	7c 60 1b 78 	mr      r0,r3
	if (!(gss_auth = kmalloc(sizeof(*gss_auth), GFP_KERNEL)))
    22f8:	90 01 00 0c 	stw     r0,12(r1)
    22fc:	80 01 00 0c 	lwz     r0,12(r1)
    2300:	2f 80 00 00 	cmpwi   cr7,r0,0
    2304:	41 9e 02 ac 	beq-    cr7,25b0 <gss_create+0x3f4>
		goto out_dec;
	gss_auth->client = clnt;
    2308:	80 01 00 0c 	lwz     r0,12(r1)
    230c:	81 21 00 58 	lwz     r9,88(r1)
    2310:	7c 0b 03 78 	mr      r11,r0
    2314:	91 2b 00 2c 	stw     r9,44(r11)
	err = -EINVAL;
    2318:	38 00 ff ea 	li      r0,-22
    231c:	90 01 00 08 	stw     r0,8(r1)
	gss_auth->mech = gss_mech_get_by_pseudoflavor(flavor);
    2320:	80 61 00 5c 	lwz     r3,92(r1)
    2324:	48 00 00 01 	bl      2324 <gss_create+0x168>
    2328:	7c 69 1b 78 	mr      r9,r3
    232c:	80 01 00 0c 	lwz     r0,12(r1)
    2330:	7c 0b 03 78 	mr      r11,r0
    2334:	91 2b 00 24 	stw     r9,36(r11)
	if (!gss_auth->mech) {
    2338:	80 01 00 0c 	lwz     r0,12(r1)
    233c:	7c 09 03 78 	mr      r9,r0
    2340:	80 09 00 24 	lwz     r0,36(r9)
    2344:	2f 80 00 00 	cmpwi   cr7,r0,0
    2348:	40 9e 00 20 	bne-    cr7,2368 <gss_create+0x1ac>
		printk(KERN_WARNING "%s: Pseudoflavor %d not found!\n",
    234c:	3c 00 00 00 	lis     r0,0
    2350:	30 60 02 bc 	addic   r3,r0,700
    2354:	3c 00 00 00 	lis     r0,0
    2358:	30 80 06 04 	addic   r4,r0,1540
    235c:	80 a1 00 5c 	lwz     r5,92(r1)
    2360:	48 00 00 01 	bl      2360 <gss_create+0x1a4>
				__func__, flavor);
		goto err_free;
    2364:	48 00 02 40 	b       25a4 <gss_create+0x3e8>
	}
	gss_auth->service = gss_pseudoflavor_to_service(gss_auth->mech, flavor);
    2368:	80 01 00 0c 	lwz     r0,12(r1)
    236c:	7c 0b 03 78 	mr      r11,r0
    2370:	80 0b 00 24 	lwz     r0,36(r11)
    2374:	7c 03 03 78 	mr      r3,r0
    2378:	80 81 00 5c 	lwz     r4,92(r1)
    237c:	48 00 00 01 	bl      237c <gss_create+0x1c0>
    2380:	7c 69 1b 78 	mr      r9,r3
    2384:	80 01 00 0c 	lwz     r0,12(r1)
    2388:	7c 0b 03 78 	mr      r11,r0
    238c:	91 2b 00 28 	stw     r9,40(r11)
	if (gss_auth->service == 0)
    2390:	80 01 00 0c 	lwz     r0,12(r1)
    2394:	7c 09 03 78 	mr      r9,r0
    2398:	80 09 00 28 	lwz     r0,40(r9)
    239c:	2f 80 00 00 	cmpwi   cr7,r0,0
    23a0:	41 9e 01 ec 	beq-    cr7,258c <gss_create+0x3d0>
		goto err_put_mech;
	auth = &gss_auth->rpc_auth;
    23a4:	80 01 00 0c 	lwz     r0,12(r1)
    23a8:	30 00 00 04 	addic   r0,r0,4
    23ac:	90 01 00 10 	stw     r0,16(r1)
	auth->au_cslack = GSS_CRED_SLACK >> 2;
    23b0:	80 01 00 10 	lwz     r0,16(r1)
    23b4:	39 20 00 c8 	li      r9,200
    23b8:	7c 0b 03 78 	mr      r11,r0
    23bc:	91 2b 00 00 	stw     r9,0(r11)
	auth->au_rslack = GSS_VERF_SLACK >> 2;
    23c0:	80 01 00 10 	lwz     r0,16(r1)
    23c4:	39 20 00 19 	li      r9,25
    23c8:	7c 0b 03 78 	mr      r11,r0
    23cc:	91 2b 00 04 	stw     r9,4(r11)
	auth->au_ops = &authgss_ops;
    23d0:	80 01 00 10 	lwz     r0,16(r1)
    23d4:	3d 20 00 00 	lis     r9,0
    23d8:	39 29 00 0c 	addi    r9,r9,12
    23dc:	7c 0b 03 78 	mr      r11,r0
    23e0:	91 2b 00 10 	stw     r9,16(r11)
	auth->au_flavor = flavor;
    23e4:	80 01 00 10 	lwz     r0,16(r1)
    23e8:	81 21 00 5c 	lwz     r9,92(r1)
    23ec:	7c 0b 03 78 	mr      r11,r0
    23f0:	91 2b 00 14 	stw     r9,20(r11)
	atomic_set(&auth->au_count, 1);
    23f4:	80 01 00 10 	lwz     r0,16(r1)
    23f8:	30 00 00 18 	addic   r0,r0,24
    23fc:	90 01 00 3c 	stw     r0,60(r1)
    2400:	38 00 00 01 	li      r0,1
    2404:	90 01 00 40 	stw     r0,64(r1)
	return t;
}

static __inline__ void atomic_set(atomic_t *v, int i)
{
	__asm__ __volatile__("stw%U0%X0 %1,%0" : "=m"(v->counter) : "r"(i));
    2408:	80 01 00 3c 	lwz     r0,60(r1)
    240c:	81 21 00 40 	lwz     r9,64(r1)
    2410:	7c 0b 03 78 	mr      r11,r0
    2414:	91 2b 00 00 	stw     r9,0(r11)
	kref_init(&gss_auth->kref);
    2418:	80 01 00 0c 	lwz     r0,12(r1)
    241c:	7c 03 03 78 	mr      r3,r0
    2420:	48 00 00 01 	bl      2420 <gss_create+0x264>
	 * Note: if we created the old pipe first, then someone who
	 * examined the directory at the right moment might conclude
	 * that we supported only the old pipe.  So we instead create
	 * the new pipe first.
	 */
	gss_auth->dentry[1] = rpc_mkpipe(clnt->cl_path.dentry,
    2424:	80 01 00 58 	lwz     r0,88(r1)
    2428:	7c 09 03 78 	mr      r9,r0
    242c:	80 09 00 70 	lwz     r0,112(r9)
    2430:	7c 03 03 78 	mr      r3,r0
    2434:	3c 00 00 00 	lis     r0,0
    2438:	30 80 02 e0 	addic   r4,r0,736
    243c:	80 a1 00 58 	lwz     r5,88(r1)
    2440:	3c 00 00 00 	lis     r0,0
    2444:	30 c0 00 98 	addic   r6,r0,152
    2448:	38 e0 00 01 	li      r7,1
    244c:	48 00 00 01 	bl      244c <gss_create+0x290>
    2450:	7c 69 1b 78 	mr      r9,r3
    2454:	80 01 00 0c 	lwz     r0,12(r1)
    2458:	7c 0b 03 78 	mr      r11,r0
    245c:	91 2b 00 34 	stw     r9,52(r11)
					 "gssd",
					 clnt, &gss_upcall_ops_v1,
					 RPC_PIPE_WAIT_FOR_OPEN);
	if (IS_ERR(gss_auth->dentry[1])) {
    2460:	80 01 00 0c 	lwz     r0,12(r1)
    2464:	7c 09 03 78 	mr      r9,r0
    2468:	80 09 00 34 	lwz     r0,52(r9)
    246c:	90 01 00 44 	stw     r0,68(r1)
	return (long) ptr;
}

static inline long __must_check IS_ERR(const void *ptr)
{
	return IS_ERR_VALUE((unsigned long)ptr);
    2470:	81 21 00 44 	lwz     r9,68(r1)
    2474:	38 00 f0 00 	li      r0,-4096
    2478:	7f 89 00 40 	cmplw   cr7,r9,r0
    247c:	7c 00 00 26 	mfcr    r0
    2480:	54 00 f7 fe 	rlwinm  r0,r0,30,31,31
    2484:	2f 80 00 00 	cmpwi   cr7,r0,0
    2488:	41 9e 00 20 	beq-    cr7,24a8 <gss_create+0x2ec>
		err = PTR_ERR(gss_auth->dentry[1]);
    248c:	80 01 00 0c 	lwz     r0,12(r1)
    2490:	7c 0b 03 78 	mr      r11,r0
    2494:	80 0b 00 34 	lwz     r0,52(r11)
    2498:	90 01 00 48 	stw     r0,72(r1)
	return (void *) error;
}

static inline long __must_check PTR_ERR(const void *ptr)
{
	return (long) ptr;
    249c:	80 01 00 48 	lwz     r0,72(r1)
    24a0:	90 01 00 08 	stw     r0,8(r1)
		goto err_put_mech;
    24a4:	48 00 00 ec 	b       2590 <gss_create+0x3d4>
	}

	gss_auth->dentry[0] = rpc_mkpipe(clnt->cl_path.dentry,
    24a8:	80 01 00 58 	lwz     r0,88(r1)
    24ac:	7c 0b 03 78 	mr      r11,r0
    24b0:	81 2b 00 70 	lwz     r9,112(r11)
					 gss_auth->mech->gm_name,
    24b4:	80 01 00 0c 	lwz     r0,12(r1)
    24b8:	7c 0b 03 78 	mr      r11,r0
    24bc:	80 0b 00 24 	lwz     r0,36(r11)
    24c0:	7c 0b 03 78 	mr      r11,r0
    24c4:	80 0b 00 14 	lwz     r0,20(r11)
	if (IS_ERR(gss_auth->dentry[1])) {
		err = PTR_ERR(gss_auth->dentry[1]);
		goto err_put_mech;
	}

	gss_auth->dentry[0] = rpc_mkpipe(clnt->cl_path.dentry,
    24c8:	7d 23 4b 78 	mr      r3,r9
    24cc:	7c 04 03 78 	mr      r4,r0
    24d0:	80 a1 00 58 	lwz     r5,88(r1)
    24d4:	3c 00 00 00 	lis     r0,0
    24d8:	30 c0 00 84 	addic   r6,r0,132
    24dc:	38 e0 00 01 	li      r7,1
    24e0:	48 00 00 01 	bl      24e0 <gss_create+0x324>
    24e4:	7c 69 1b 78 	mr      r9,r3
    24e8:	80 01 00 0c 	lwz     r0,12(r1)
    24ec:	7c 0b 03 78 	mr      r11,r0
    24f0:	91 2b 00 30 	stw     r9,48(r11)
					 gss_auth->mech->gm_name,
					 clnt, &gss_upcall_ops_v0,
					 RPC_PIPE_WAIT_FOR_OPEN);
	if (IS_ERR(gss_auth->dentry[0])) {
    24f4:	80 01 00 0c 	lwz     r0,12(r1)
    24f8:	7c 09 03 78 	mr      r9,r0
    24fc:	80 09 00 30 	lwz     r0,48(r9)
    2500:	90 01 00 4c 	stw     r0,76(r1)
}

static inline long __must_check IS_ERR(const void *ptr)
{
	return IS_ERR_VALUE((unsigned long)ptr);
    2504:	81 21 00 4c 	lwz     r9,76(r1)
    2508:	38 00 f0 00 	li      r0,-4096
    250c:	7f 89 00 40 	cmplw   cr7,r9,r0
    2510:	7c 00 00 26 	mfcr    r0
    2514:	54 00 f7 fe 	rlwinm  r0,r0,30,31,31
    2518:	2f 80 00 00 	cmpwi   cr7,r0,0
    251c:	41 9e 00 20 	beq-    cr7,253c <gss_create+0x380>
		err = PTR_ERR(gss_auth->dentry[0]);
    2520:	80 01 00 0c 	lwz     r0,12(r1)
    2524:	7c 0b 03 78 	mr      r11,r0
    2528:	80 0b 00 30 	lwz     r0,48(r11)
    252c:	90 01 00 50 	stw     r0,80(r1)
	return (void *) error;
}

static inline long __must_check PTR_ERR(const void *ptr)
{
	return (long) ptr;
    2530:	80 01 00 50 	lwz     r0,80(r1)
    2534:	90 01 00 08 	stw     r0,8(r1)
		goto err_unlink_pipe_1;
    2538:	48 00 00 3c 	b       2574 <gss_create+0x3b8>
	}
	err = rpcauth_init_credcache(auth);
    253c:	80 61 00 10 	lwz     r3,16(r1)
    2540:	48 00 00 01 	bl      2540 <gss_create+0x384>
    2544:	90 61 00 08 	stw     r3,8(r1)
	if (err)
    2548:	80 01 00 08 	lwz     r0,8(r1)
    254c:	2f 80 00 00 	cmpwi   cr7,r0,0
    2550:	40 9e 00 0c 	bne-    cr7,255c <gss_create+0x3a0>
		goto err_unlink_pipe_0;

	return auth;
    2554:	80 01 00 10 	lwz     r0,16(r1)
    2558:	48 00 00 70 	b       25c8 <gss_create+0x40c>
		err = PTR_ERR(gss_auth->dentry[0]);
		goto err_unlink_pipe_1;
	}
	err = rpcauth_init_credcache(auth);
	if (err)
		goto err_unlink_pipe_0;
    255c:	60 00 00 00 	nop

	return auth;
err_unlink_pipe_0:
	rpc_unlink(gss_auth->dentry[0]);
    2560:	80 01 00 0c 	lwz     r0,12(r1)
    2564:	7c 09 03 78 	mr      r9,r0
    2568:	80 09 00 30 	lwz     r0,48(r9)
    256c:	7c 03 03 78 	mr      r3,r0
    2570:	48 00 00 01 	bl      2570 <gss_create+0x3b4>
err_unlink_pipe_1:
	rpc_unlink(gss_auth->dentry[1]);
    2574:	80 01 00 0c 	lwz     r0,12(r1)
    2578:	7c 0b 03 78 	mr      r11,r0
    257c:	80 0b 00 34 	lwz     r0,52(r11)
    2580:	7c 03 03 78 	mr      r3,r0
    2584:	48 00 00 01 	bl      2584 <gss_create+0x3c8>
    2588:	48 00 00 08 	b       2590 <gss_create+0x3d4>
				__func__, flavor);
		goto err_free;
	}
	gss_auth->service = gss_pseudoflavor_to_service(gss_auth->mech, flavor);
	if (gss_auth->service == 0)
		goto err_put_mech;
    258c:	60 00 00 00 	nop
err_unlink_pipe_0:
	rpc_unlink(gss_auth->dentry[0]);
err_unlink_pipe_1:
	rpc_unlink(gss_auth->dentry[1]);
err_put_mech:
	gss_mech_put(gss_auth->mech);
    2590:	80 01 00 0c 	lwz     r0,12(r1)
    2594:	7c 09 03 78 	mr      r9,r0
    2598:	80 09 00 24 	lwz     r0,36(r9)
    259c:	7c 03 03 78 	mr      r3,r0
    25a0:	48 00 00 01 	bl      25a0 <gss_create+0x3e4>
err_free:
	kfree(gss_auth);
    25a4:	80 61 00 0c 	lwz     r3,12(r1)
    25a8:	48 00 00 01 	bl      25a8 <gss_create+0x3ec>
    25ac:	48 00 00 08 	b       25b4 <gss_create+0x3f8>
	dprintk("RPC:       creating GSS authenticator for client %p\n", clnt);

	if (!try_module_get(THIS_MODULE))
		return ERR_PTR(err);
	if (!(gss_auth = kmalloc(sizeof(*gss_auth), GFP_KERNEL)))
		goto out_dec;
    25b0:	60 00 00 00 	nop
err_put_mech:
	gss_mech_put(gss_auth->mech);
err_free:
	kfree(gss_auth);
out_dec:
	module_put(THIS_MODULE);
    25b4:	38 60 00 00 	li      r3,0
    25b8:	48 00 00 01 	bl      25b8 <gss_create+0x3fc>
    25bc:	80 01 00 08 	lwz     r0,8(r1)
    25c0:	90 01 00 54 	stw     r0,84(r1)

#define IS_ERR_VALUE(x) unlikely((x) >= (unsigned long)-MAX_ERRNO)

static inline void * __must_check ERR_PTR(long error)
{
	return (void *) error;
    25c4:	80 01 00 54 	lwz     r0,84(r1)
	return ERR_PTR(err);
}
    25c8:	7c 03 03 78 	mr      r3,r0
    25cc:	80 01 00 64 	lwz     r0,100(r1)
    25d0:	7c 08 03 a6 	mtlr    r0
    25d4:	38 21 00 60 	addi    r1,r1,96
    25d8:	4e 80 00 20 	blr

000025dc <gss_free>:

static void
gss_free(struct gss_auth *gss_auth)
{
    25dc:	94 21 ff f0 	stwu    r1,-16(r1)
    25e0:	7c 08 02 a6 	mflr    r0
    25e4:	90 01 00 14 	stw     r0,20(r1)
    25e8:	90 61 00 08 	stw     r3,8(r1)
	rpc_unlink(gss_auth->dentry[1]);
    25ec:	80 01 00 08 	lwz     r0,8(r1)
    25f0:	7c 09 03 78 	mr      r9,r0
    25f4:	80 09 00 34 	lwz     r0,52(r9)
    25f8:	7c 03 03 78 	mr      r3,r0
    25fc:	48 00 00 01 	bl      25fc <gss_free+0x20>
	rpc_unlink(gss_auth->dentry[0]);
    2600:	80 01 00 08 	lwz     r0,8(r1)
    2604:	7c 09 03 78 	mr      r9,r0
    2608:	80 09 00 30 	lwz     r0,48(r9)
    260c:	7c 03 03 78 	mr      r3,r0
    2610:	48 00 00 01 	bl      2610 <gss_free+0x34>
	gss_mech_put(gss_auth->mech);
    2614:	80 01 00 08 	lwz     r0,8(r1)
    2618:	7c 09 03 78 	mr      r9,r0
    261c:	80 09 00 24 	lwz     r0,36(r9)
    2620:	7c 03 03 78 	mr      r3,r0
    2624:	48 00 00 01 	bl      2624 <gss_free+0x48>

	kfree(gss_auth);
    2628:	80 61 00 08 	lwz     r3,8(r1)
    262c:	48 00 00 01 	bl      262c <gss_free+0x50>
	module_put(THIS_MODULE);
    2630:	38 60 00 00 	li      r3,0
    2634:	48 00 00 01 	bl      2634 <gss_free+0x58>
}
    2638:	80 01 00 14 	lwz     r0,20(r1)
    263c:	7c 08 03 a6 	mtlr    r0
    2640:	38 21 00 10 	addi    r1,r1,16
    2644:	4e 80 00 20 	blr

00002648 <gss_free_callback>:

static void
gss_free_callback(struct kref *kref)
{
    2648:	94 21 ff e0 	stwu    r1,-32(r1)
    264c:	7c 08 02 a6 	mflr    r0
    2650:	90 01 00 24 	stw     r0,36(r1)
    2654:	90 61 00 18 	stw     r3,24(r1)
	struct gss_auth *gss_auth = container_of(kref, struct gss_auth, kref);
    2658:	80 01 00 18 	lwz     r0,24(r1)
    265c:	90 01 00 08 	stw     r0,8(r1)
    2660:	80 01 00 08 	lwz     r0,8(r1)
    2664:	90 01 00 0c 	stw     r0,12(r1)

	gss_free(gss_auth);
    2668:	80 61 00 0c 	lwz     r3,12(r1)
    266c:	4b ff ff 71 	bl      25dc <gss_free>
}
    2670:	80 01 00 24 	lwz     r0,36(r1)
    2674:	7c 08 03 a6 	mtlr    r0
    2678:	38 21 00 20 	addi    r1,r1,32
    267c:	4e 80 00 20 	blr

00002680 <gss_destroy>:

static void
gss_destroy(struct rpc_auth *auth)
{
    2680:	94 21 ff e0 	stwu    r1,-32(r1)
    2684:	7c 08 02 a6 	mflr    r0
    2688:	90 01 00 24 	stw     r0,36(r1)
    268c:	90 61 00 18 	stw     r3,24(r1)
	struct gss_auth *gss_auth;

	dprintk("RPC:       destroying GSS authenticator %p flavor %d\n",
    2690:	3c 00 00 00 	lis     r0,0
    2694:	7c 09 03 78 	mr      r9,r0
    2698:	80 09 00 00 	lwz     r0,0(r9)
    269c:	54 00 06 f6 	rlwinm  r0,r0,0,27,27
    26a0:	2f 80 00 00 	cmpwi   cr7,r0,0
    26a4:	7c 00 00 26 	mfcr    r0
    26a8:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
    26ac:	68 00 00 01 	xori    r0,r0,1
    26b0:	2f 80 00 00 	cmpwi   cr7,r0,0
    26b4:	41 9e 00 24 	beq-    cr7,26d8 <gss_destroy+0x58>
    26b8:	80 01 00 18 	lwz     r0,24(r1)
    26bc:	7c 09 03 78 	mr      r9,r0
    26c0:	80 09 00 14 	lwz     r0,20(r9)
    26c4:	3d 20 00 00 	lis     r9,0
    26c8:	38 69 02 e8 	addi    r3,r9,744
    26cc:	80 81 00 18 	lwz     r4,24(r1)
    26d0:	7c 05 03 78 	mr      r5,r0
    26d4:	48 00 00 01 	bl      26d4 <gss_destroy+0x54>
			auth, auth->au_flavor);

	rpcauth_destroy_credcache(auth);
    26d8:	80 61 00 18 	lwz     r3,24(r1)
    26dc:	48 00 00 01 	bl      26dc <gss_destroy+0x5c>

	gss_auth = container_of(auth, struct gss_auth, rpc_auth);
    26e0:	80 01 00 18 	lwz     r0,24(r1)
    26e4:	90 01 00 08 	stw     r0,8(r1)
    26e8:	80 01 00 08 	lwz     r0,8(r1)
    26ec:	30 00 ff fc 	addic   r0,r0,-4
    26f0:	90 01 00 0c 	stw     r0,12(r1)
	kref_put(&gss_auth->kref, gss_free_callback);
    26f4:	80 01 00 0c 	lwz     r0,12(r1)
    26f8:	7c 03 03 78 	mr      r3,r0
    26fc:	3c 00 00 00 	lis     r0,0
    2700:	30 80 26 48 	addic   r4,r0,9800
    2704:	48 00 00 01 	bl      2704 <gss_destroy+0x84>
}
    2708:	80 01 00 24 	lwz     r0,36(r1)
    270c:	7c 08 03 a6 	mtlr    r0
    2710:	38 21 00 20 	addi    r1,r1,32
    2714:	4e 80 00 20 	blr

00002718 <gss_destroying_context>:
 * RPC_GSS_PROC_DESTROY. This should normally cause the server to release
 * all RPCSEC_GSS state associated with that context.
 */
static int
gss_destroying_context(struct rpc_cred *cred)
{
    2718:	94 21 ff b0 	stwu    r1,-80(r1)
    271c:	7c 08 02 a6 	mflr    r0
    2720:	90 01 00 54 	stw     r0,84(r1)
    2724:	93 e1 00 4c 	stw     r31,76(r1)
    2728:	90 61 00 38 	stw     r3,56(r1)
	struct gss_cred *gss_cred = container_of(cred, struct gss_cred, gc_base);
    272c:	80 01 00 38 	lwz     r0,56(r1)
    2730:	90 01 00 08 	stw     r0,8(r1)
    2734:	80 01 00 08 	lwz     r0,8(r1)
    2738:	90 01 00 0c 	stw     r0,12(r1)
	struct gss_auth *gss_auth = container_of(cred->cr_auth, struct gss_auth, rpc_auth);
    273c:	80 01 00 38 	lwz     r0,56(r1)
    2740:	7c 09 03 78 	mr      r9,r0
    2744:	80 09 00 18 	lwz     r0,24(r9)
    2748:	90 01 00 10 	stw     r0,16(r1)
    274c:	80 01 00 10 	lwz     r0,16(r1)
    2750:	30 00 ff fc 	addic   r0,r0,-4
    2754:	90 01 00 14 	stw     r0,20(r1)
	struct rpc_task *task;

	if (gss_cred->gc_ctx == NULL ||
    2758:	80 01 00 0c 	lwz     r0,12(r1)
    275c:	7c 0b 03 78 	mr      r11,r0
    2760:	80 0b 00 38 	lwz     r0,56(r11)
    2764:	2f 80 00 00 	cmpwi   cr7,r0,0
    2768:	41 9e 00 50 	beq-    cr7,27b8 <gss_destroying_context+0xa0>
	    test_bit(RPCAUTH_CRED_UPTODATE, &cred->cr_flags) == 0)
    276c:	80 01 00 38 	lwz     r0,56(r1)
    2770:	30 00 00 28 	addic   r0,r0,40
    2774:	39 20 00 01 	li      r9,1
    2778:	91 21 00 1c 	stw     r9,28(r1)
    277c:	90 01 00 20 	stw     r0,32(r1)
    2780:	80 01 00 1c 	lwz     r0,28(r1)
    2784:	7c 00 2e 70 	srawi   r0,r0,5
    2788:	7c 00 01 94 	addze   r0,r0
    278c:	54 00 10 3a 	rlwinm  r0,r0,2,0,29
    2790:	81 21 00 20 	lwz     r9,32(r1)
    2794:	7c 09 02 14 	add     r0,r9,r0
    2798:	7c 0b 03 78 	mr      r11,r0
    279c:	81 2b 00 00 	lwz     r9,0(r11)
    27a0:	80 01 00 1c 	lwz     r0,28(r1)
    27a4:	54 00 06 fe 	clrlwi  r0,r0,27
    27a8:	7d 20 04 30 	srw     r0,r9,r0
    27ac:	54 00 07 fe 	clrlwi  r0,r0,31
{
	struct gss_cred *gss_cred = container_of(cred, struct gss_cred, gc_base);
	struct gss_auth *gss_auth = container_of(cred->cr_auth, struct gss_auth, rpc_auth);
	struct rpc_task *task;

	if (gss_cred->gc_ctx == NULL ||
    27b0:	2f 80 00 00 	cmpwi   cr7,r0,0
    27b4:	40 9e 00 0c 	bne-    cr7,27c0 <gss_destroying_context+0xa8>
	    test_bit(RPCAUTH_CRED_UPTODATE, &cred->cr_flags) == 0)
		return 0;
    27b8:	38 00 00 00 	li      r0,0
    27bc:	48 00 00 bc 	b       2878 <gss_destroying_context+0x160>

	gss_cred->gc_ctx->gc_proc = RPC_GSS_PROC_DESTROY;
    27c0:	80 01 00 0c 	lwz     r0,12(r1)
    27c4:	7c 09 03 78 	mr      r9,r0
    27c8:	80 09 00 38 	lwz     r0,56(r9)
    27cc:	39 20 00 03 	li      r9,3
    27d0:	7c 0b 03 78 	mr      r11,r0
    27d4:	91 2b 00 04 	stw     r9,4(r11)
	cred->cr_ops = &gss_nullops;
    27d8:	80 01 00 38 	lwz     r0,56(r1)
    27dc:	3d 20 00 00 	lis     r9,0
    27e0:	39 29 00 5c 	addi    r9,r9,92
    27e4:	7c 0b 03 78 	mr      r11,r0
    27e8:	91 2b 00 1c 	stw     r9,28(r11)
    27ec:	80 01 00 38 	lwz     r0,56(r1)
    27f0:	90 01 00 24 	stw     r0,36(r1)
void			rpcauth_clear_credcache(struct rpc_cred_cache *);

static inline
struct rpc_cred *	get_rpccred(struct rpc_cred *cred)
{
	atomic_inc(&cred->cr_count);
    27f4:	80 01 00 24 	lwz     r0,36(r1)
    27f8:	30 00 00 2c 	addic   r0,r0,44
    27fc:	90 01 00 28 	stw     r0,40(r1)
	addic	%0,%0,1\n"
	PPC405_ERR77(0,%2)
"	stwcx.	%0,0,%2 \n\
	bne-	1b"
	: "=&r" (t), "+m" (v->counter)
	: "r" (&v->counter)
    2800:	80 01 00 28 	lwz     r0,40(r1)
"1:	lwarx	%0,0,%2		# atomic_inc\n\
	addic	%0,%0,1\n"
	PPC405_ERR77(0,%2)
"	stwcx.	%0,0,%2 \n\
	bne-	1b"
	: "=&r" (t), "+m" (v->counter)
    2804:	81 61 00 28 	lwz     r11,40(r1)
    2808:	81 21 00 28 	lwz     r9,40(r1)

static __inline__ void atomic_inc(atomic_t *v)
{
	int t;

	__asm__ __volatile__(
    280c:	7f e0 00 28 	lwarx   r31,0,r0
    2810:	33 ff 00 01 	addic   r31,r31,1
    2814:	7f e0 01 2d 	stwcx.  r31,0,r0
    2818:	40 a2 ff f4 	bne-    280c <gss_destroying_context+0xf4>
    281c:	93 e1 00 2c 	stw     r31,44(r1)

	/* Take a reference to ensure the cred will be destroyed either
	 * by the RPC call or by the put_rpccred() below */
	get_rpccred(cred);

	task = rpc_call_null(gss_auth->client, cred, RPC_TASK_ASYNC|RPC_TASK_SOFT);
    2820:	80 01 00 14 	lwz     r0,20(r1)
    2824:	7c 09 03 78 	mr      r9,r0
    2828:	80 09 00 2c 	lwz     r0,44(r9)
    282c:	7c 03 03 78 	mr      r3,r0
    2830:	80 81 00 38 	lwz     r4,56(r1)
    2834:	38 a0 02 01 	li      r5,513
    2838:	48 00 00 01 	bl      2838 <gss_destroying_context+0x120>
    283c:	90 61 00 18 	stw     r3,24(r1)
    2840:	80 01 00 18 	lwz     r0,24(r1)
    2844:	90 01 00 30 	stw     r0,48(r1)
	return (long) ptr;
}

static inline long __must_check IS_ERR(const void *ptr)
{
	return IS_ERR_VALUE((unsigned long)ptr);
    2848:	81 21 00 30 	lwz     r9,48(r1)
    284c:	38 00 f0 00 	li      r0,-4096
    2850:	7f 89 00 40 	cmplw   cr7,r9,r0
    2854:	7c 00 00 26 	mfcr    r0
    2858:	54 00 f7 fe 	rlwinm  r0,r0,30,31,31
	if (!IS_ERR(task))
    285c:	2f 80 00 00 	cmpwi   cr7,r0,0
    2860:	40 9e 00 0c 	bne-    cr7,286c <gss_destroying_context+0x154>
		rpc_put_task(task);
    2864:	80 61 00 18 	lwz     r3,24(r1)
    2868:	48 00 00 01 	bl      2868 <gss_destroying_context+0x150>

	put_rpccred(cred);
    286c:	80 61 00 38 	lwz     r3,56(r1)
    2870:	48 00 00 01 	bl      2870 <gss_destroying_context+0x158>
	return 1;
    2874:	38 00 00 01 	li      r0,1
}
    2878:	7c 03 03 78 	mr      r3,r0
    287c:	80 01 00 54 	lwz     r0,84(r1)
    2880:	7c 08 03 a6 	mtlr    r0
    2884:	83 e1 00 4c 	lwz     r31,76(r1)
    2888:	38 21 00 50 	addi    r1,r1,80
    288c:	4e 80 00 20 	blr

00002890 <gss_do_free_ctx>:
/* gss_destroy_cred (and gss_free_ctx) are used to clean up after failure
 * to create a new cred or context, so they check that things have been
 * allocated before freeing them. */
static void
gss_do_free_ctx(struct gss_cl_ctx *ctx)
{
    2890:	94 21 ff f0 	stwu    r1,-16(r1)
    2894:	7c 08 02 a6 	mflr    r0
    2898:	90 01 00 14 	stw     r0,20(r1)
    289c:	90 61 00 08 	stw     r3,8(r1)
	dprintk("RPC:       gss_free_ctx\n");
    28a0:	3c 00 00 00 	lis     r0,0
    28a4:	7c 09 03 78 	mr      r9,r0
    28a8:	80 09 00 00 	lwz     r0,0(r9)
    28ac:	54 00 06 f6 	rlwinm  r0,r0,0,27,27
    28b0:	2f 80 00 00 	cmpwi   cr7,r0,0
    28b4:	7c 00 00 26 	mfcr    r0
    28b8:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
    28bc:	68 00 00 01 	xori    r0,r0,1
    28c0:	2f 80 00 00 	cmpwi   cr7,r0,0
    28c4:	41 9e 00 10 	beq-    cr7,28d4 <gss_do_free_ctx+0x44>
    28c8:	3c 00 00 00 	lis     r0,0
    28cc:	30 60 03 20 	addic   r3,r0,800
    28d0:	48 00 00 01 	bl      28d0 <gss_do_free_ctx+0x40>

	gss_delete_sec_context(&ctx->gc_gss_ctx);
    28d4:	80 01 00 08 	lwz     r0,8(r1)
    28d8:	30 00 00 0c 	addic   r0,r0,12
    28dc:	7c 03 03 78 	mr      r3,r0
    28e0:	48 00 00 01 	bl      28e0 <gss_do_free_ctx+0x50>
	kfree(ctx->gc_wire_ctx.data);
    28e4:	80 01 00 08 	lwz     r0,8(r1)
    28e8:	7c 09 03 78 	mr      r9,r0
    28ec:	80 09 00 14 	lwz     r0,20(r9)
    28f0:	7c 03 03 78 	mr      r3,r0
    28f4:	48 00 00 01 	bl      28f4 <gss_do_free_ctx+0x64>
	kfree(ctx);
    28f8:	80 61 00 08 	lwz     r3,8(r1)
    28fc:	48 00 00 01 	bl      28fc <gss_do_free_ctx+0x6c>
}
    2900:	80 01 00 14 	lwz     r0,20(r1)
    2904:	7c 08 03 a6 	mtlr    r0
    2908:	38 21 00 10 	addi    r1,r1,16
    290c:	4e 80 00 20 	blr

00002910 <gss_free_ctx_callback>:

static void
gss_free_ctx_callback(struct rcu_head *head)
{
    2910:	94 21 ff e0 	stwu    r1,-32(r1)
    2914:	7c 08 02 a6 	mflr    r0
    2918:	90 01 00 24 	stw     r0,36(r1)
    291c:	90 61 00 18 	stw     r3,24(r1)
	struct gss_cl_ctx *ctx = container_of(head, struct gss_cl_ctx, gc_rcu);
    2920:	80 01 00 18 	lwz     r0,24(r1)
    2924:	90 01 00 08 	stw     r0,8(r1)
    2928:	80 01 00 08 	lwz     r0,8(r1)
    292c:	30 00 ff e0 	addic   r0,r0,-32
    2930:	90 01 00 0c 	stw     r0,12(r1)
	gss_do_free_ctx(ctx);
    2934:	80 61 00 0c 	lwz     r3,12(r1)
    2938:	4b ff ff 59 	bl      2890 <gss_do_free_ctx>
}
    293c:	80 01 00 24 	lwz     r0,36(r1)
    2940:	7c 08 03 a6 	mtlr    r0
    2944:	38 21 00 20 	addi    r1,r1,32
    2948:	4e 80 00 20 	blr

0000294c <gss_free_ctx>:

static void
gss_free_ctx(struct gss_cl_ctx *ctx)
{
    294c:	94 21 ff f0 	stwu    r1,-16(r1)
    2950:	7c 08 02 a6 	mflr    r0
    2954:	90 01 00 14 	stw     r0,20(r1)
    2958:	90 61 00 08 	stw     r3,8(r1)
	call_rcu(&ctx->gc_rcu, gss_free_ctx_callback);
    295c:	80 01 00 08 	lwz     r0,8(r1)
    2960:	30 00 00 20 	addic   r0,r0,32
    2964:	7c 03 03 78 	mr      r3,r0
    2968:	3c 00 00 00 	lis     r0,0
    296c:	30 80 29 10 	addic   r4,r0,10512
    2970:	48 00 00 01 	bl      2970 <gss_free_ctx+0x24>
}
    2974:	80 01 00 14 	lwz     r0,20(r1)
    2978:	7c 08 03 a6 	mtlr    r0
    297c:	38 21 00 10 	addi    r1,r1,16
    2980:	4e 80 00 20 	blr

00002984 <gss_free_cred>:

static void
gss_free_cred(struct gss_cred *gss_cred)
{
    2984:	94 21 ff f0 	stwu    r1,-16(r1)
    2988:	7c 08 02 a6 	mflr    r0
    298c:	90 01 00 14 	stw     r0,20(r1)
    2990:	90 61 00 08 	stw     r3,8(r1)
	dprintk("RPC:       gss_free_cred %p\n", gss_cred);
    2994:	3c 00 00 00 	lis     r0,0
    2998:	7c 09 03 78 	mr      r9,r0
    299c:	80 09 00 00 	lwz     r0,0(r9)
    29a0:	54 00 06 f6 	rlwinm  r0,r0,0,27,27
    29a4:	2f 80 00 00 	cmpwi   cr7,r0,0
    29a8:	7c 00 00 26 	mfcr    r0
    29ac:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
    29b0:	68 00 00 01 	xori    r0,r0,1
    29b4:	2f 80 00 00 	cmpwi   cr7,r0,0
    29b8:	41 9e 00 14 	beq-    cr7,29cc <gss_free_cred+0x48>
    29bc:	3c 00 00 00 	lis     r0,0
    29c0:	30 60 03 3c 	addic   r3,r0,828
    29c4:	80 81 00 08 	lwz     r4,8(r1)
    29c8:	48 00 00 01 	bl      29c8 <gss_free_cred+0x44>
	kfree(gss_cred);
    29cc:	80 61 00 08 	lwz     r3,8(r1)
    29d0:	48 00 00 01 	bl      29d0 <gss_free_cred+0x4c>
}
    29d4:	80 01 00 14 	lwz     r0,20(r1)
    29d8:	7c 08 03 a6 	mtlr    r0
    29dc:	38 21 00 10 	addi    r1,r1,16
    29e0:	4e 80 00 20 	blr

000029e4 <gss_free_cred_callback>:

static void
gss_free_cred_callback(struct rcu_head *head)
{
    29e4:	94 21 ff e0 	stwu    r1,-32(r1)
    29e8:	7c 08 02 a6 	mflr    r0
    29ec:	90 01 00 24 	stw     r0,36(r1)
    29f0:	90 61 00 18 	stw     r3,24(r1)
	struct gss_cred *gss_cred = container_of(head, struct gss_cred, gc_base.cr_rcu);
    29f4:	80 01 00 18 	lwz     r0,24(r1)
    29f8:	90 01 00 08 	stw     r0,8(r1)
    29fc:	80 01 00 08 	lwz     r0,8(r1)
    2a00:	30 00 ff f0 	addic   r0,r0,-16
    2a04:	90 01 00 0c 	stw     r0,12(r1)
	gss_free_cred(gss_cred);
    2a08:	80 61 00 0c 	lwz     r3,12(r1)
    2a0c:	4b ff ff 79 	bl      2984 <gss_free_cred>
}
    2a10:	80 01 00 24 	lwz     r0,36(r1)
    2a14:	7c 08 03 a6 	mtlr    r0
    2a18:	38 21 00 20 	addi    r1,r1,32
    2a1c:	4e 80 00 20 	blr

00002a20 <gss_destroy_nullcred>:

static void
gss_destroy_nullcred(struct rpc_cred *cred)
{
    2a20:	94 21 ff c0 	stwu    r1,-64(r1)
    2a24:	7c 08 02 a6 	mflr    r0
    2a28:	90 01 00 44 	stw     r0,68(r1)
    2a2c:	93 e1 00 3c 	stw     r31,60(r1)
    2a30:	90 61 00 28 	stw     r3,40(r1)
	struct gss_cred *gss_cred = container_of(cred, struct gss_cred, gc_base);
    2a34:	80 01 00 28 	lwz     r0,40(r1)
    2a38:	90 01 00 08 	stw     r0,8(r1)
    2a3c:	80 01 00 08 	lwz     r0,8(r1)
    2a40:	90 01 00 0c 	stw     r0,12(r1)
	struct gss_auth *gss_auth = container_of(cred->cr_auth, struct gss_auth, rpc_auth);
    2a44:	80 01 00 28 	lwz     r0,40(r1)
    2a48:	7c 09 03 78 	mr      r9,r0
    2a4c:	80 09 00 18 	lwz     r0,24(r9)
    2a50:	90 01 00 10 	stw     r0,16(r1)
    2a54:	80 01 00 10 	lwz     r0,16(r1)
    2a58:	30 00 ff fc 	addic   r0,r0,-4
    2a5c:	90 01 00 14 	stw     r0,20(r1)
	struct gss_cl_ctx *ctx = gss_cred->gc_ctx;
    2a60:	80 01 00 0c 	lwz     r0,12(r1)
    2a64:	7c 0b 03 78 	mr      r11,r0
    2a68:	80 0b 00 38 	lwz     r0,56(r11)
    2a6c:	90 01 00 18 	stw     r0,24(r1)

	rcu_assign_pointer(gss_cred->gc_ctx, NULL);
    2a70:	80 01 00 0c 	lwz     r0,12(r1)
    2a74:	39 20 00 00 	li      r9,0
    2a78:	7c 0b 03 78 	mr      r11,r0
    2a7c:	91 2b 00 38 	stw     r9,56(r11)
	call_rcu(&cred->cr_rcu, gss_free_cred_callback);
    2a80:	80 01 00 28 	lwz     r0,40(r1)
    2a84:	30 00 00 10 	addic   r0,r0,16
    2a88:	7c 03 03 78 	mr      r3,r0
    2a8c:	3c 00 00 00 	lis     r0,0
    2a90:	30 80 29 e4 	addic   r4,r0,10724
    2a94:	48 00 00 01 	bl      2a94 <gss_destroy_nullcred+0x74>
	if (ctx)
    2a98:	80 01 00 18 	lwz     r0,24(r1)
    2a9c:	2f 80 00 00 	cmpwi   cr7,r0,0
    2aa0:	41 9e 00 40 	beq-    cr7,2ae0 <gss_destroy_nullcred+0xc0>
    2aa4:	80 01 00 18 	lwz     r0,24(r1)
    2aa8:	90 01 00 1c 	stw     r0,28(r1)
}

static inline void
gss_put_ctx(struct gss_cl_ctx *ctx)
{
	if (atomic_dec_and_test(&ctx->count))
    2aac:	80 01 00 1c 	lwz     r0,28(r1)
    2ab0:	90 01 00 20 	stw     r0,32(r1)
	PPC405_ERR77(0,%1)
"	stwcx.	%0,0,%1\n\
	bne-	1b"
	PPC_ACQUIRE_BARRIER
	: "=&r" (t)
	: "r" (&v->counter)
    2ab4:	80 01 00 20 	lwz     r0,32(r1)

static __inline__ int atomic_dec_return(atomic_t *v)
{
	int t;

	__asm__ __volatile__(
    2ab8:	7f e0 00 28 	lwarx   r31,0,r0
    2abc:	33 ff ff ff 	addic   r31,r31,-1
    2ac0:	7f e0 01 2d 	stwcx.  r31,0,r0
    2ac4:	40 a2 ff f4 	bne-    2ab8 <gss_destroy_nullcred+0x98>
    2ac8:	93 e1 00 24 	stw     r31,36(r1)
	PPC_ACQUIRE_BARRIER
	: "=&r" (t)
	: "r" (&v->counter)
	: "cc", "xer", "memory");

	return t;
    2acc:	80 01 00 24 	lwz     r0,36(r1)
    2ad0:	2f 80 00 00 	cmpwi   cr7,r0,0
    2ad4:	40 9e 00 0c 	bne-    cr7,2ae0 <gss_destroy_nullcred+0xc0>
		gss_free_ctx(ctx);
    2ad8:	80 61 00 1c 	lwz     r3,28(r1)
    2adc:	4b ff fe 71 	bl      294c <gss_free_ctx>

	rcu_assign_pointer(gss_cred->gc_ctx, NULL);
	call_rcu(&cred->cr_rcu, gss_free_cred_callback);
	if (ctx)
		gss_put_ctx(ctx);
	kref_put(&gss_auth->kref, gss_free_callback);
    2ae0:	80 01 00 14 	lwz     r0,20(r1)
    2ae4:	7c 03 03 78 	mr      r3,r0
    2ae8:	3c 00 00 00 	lis     r0,0
    2aec:	30 80 26 48 	addic   r4,r0,9800
    2af0:	48 00 00 01 	bl      2af0 <gss_destroy_nullcred+0xd0>
}
    2af4:	80 01 00 44 	lwz     r0,68(r1)
    2af8:	7c 08 03 a6 	mtlr    r0
    2afc:	83 e1 00 3c 	lwz     r31,60(r1)
    2b00:	38 21 00 40 	addi    r1,r1,64
    2b04:	4e 80 00 20 	blr

00002b08 <gss_destroy_cred>:

static void
gss_destroy_cred(struct rpc_cred *cred)
{
    2b08:	94 21 ff f0 	stwu    r1,-16(r1)
    2b0c:	7c 08 02 a6 	mflr    r0
    2b10:	90 01 00 14 	stw     r0,20(r1)
    2b14:	90 61 00 08 	stw     r3,8(r1)

	if (gss_destroying_context(cred))
    2b18:	80 61 00 08 	lwz     r3,8(r1)
    2b1c:	4b ff fb fd 	bl      2718 <gss_destroying_context>
    2b20:	7c 60 1b 78 	mr      r0,r3
    2b24:	2f 80 00 00 	cmpwi   cr7,r0,0
    2b28:	40 9e 00 10 	bne-    cr7,2b38 <gss_destroy_cred+0x30>
		return;
	gss_destroy_nullcred(cred);
    2b2c:	80 61 00 08 	lwz     r3,8(r1)
    2b30:	4b ff fe f1 	bl      2a20 <gss_destroy_nullcred>
    2b34:	48 00 00 08 	b       2b3c <gss_destroy_cred+0x34>
static void
gss_destroy_cred(struct rpc_cred *cred)
{

	if (gss_destroying_context(cred))
		return;
    2b38:	60 00 00 00 	nop
	gss_destroy_nullcred(cred);
}
    2b3c:	80 01 00 14 	lwz     r0,20(r1)
    2b40:	7c 08 03 a6 	mtlr    r0
    2b44:	38 21 00 10 	addi    r1,r1,16
    2b48:	4e 80 00 20 	blr

00002b4c <gss_lookup_cred>:
/*
 * Lookup RPCSEC_GSS cred for the current process
 */
static struct rpc_cred *
gss_lookup_cred(struct rpc_auth *auth, struct auth_cred *acred, int flags)
{
    2b4c:	94 21 ff e0 	stwu    r1,-32(r1)
    2b50:	7c 08 02 a6 	mflr    r0
    2b54:	90 01 00 24 	stw     r0,36(r1)
    2b58:	90 61 00 08 	stw     r3,8(r1)
    2b5c:	90 81 00 0c 	stw     r4,12(r1)
    2b60:	90 a1 00 10 	stw     r5,16(r1)
	return rpcauth_lookup_credcache(auth, acred, flags);
    2b64:	80 61 00 08 	lwz     r3,8(r1)
    2b68:	80 81 00 0c 	lwz     r4,12(r1)
    2b6c:	80 a1 00 10 	lwz     r5,16(r1)
    2b70:	48 00 00 01 	bl      2b70 <gss_lookup_cred+0x24>
    2b74:	7c 60 1b 78 	mr      r0,r3
}
    2b78:	7c 03 03 78 	mr      r3,r0
    2b7c:	80 01 00 24 	lwz     r0,36(r1)
    2b80:	7c 08 03 a6 	mtlr    r0
    2b84:	38 21 00 20 	addi    r1,r1,32
    2b88:	4e 80 00 20 	blr

00002b8c <gss_create_cred>:

static struct rpc_cred *
gss_create_cred(struct rpc_auth *auth, struct auth_cred *acred, int flags)
{
    2b8c:	94 21 ff b0 	stwu    r1,-80(r1)
    2b90:	7c 08 02 a6 	mflr    r0
    2b94:	90 01 00 54 	stw     r0,84(r1)
    2b98:	90 61 00 38 	stw     r3,56(r1)
    2b9c:	90 81 00 3c 	stw     r4,60(r1)
    2ba0:	90 a1 00 40 	stw     r5,64(r1)
	struct gss_auth *gss_auth = container_of(auth, struct gss_auth, rpc_auth);
    2ba4:	80 01 00 38 	lwz     r0,56(r1)
    2ba8:	90 01 00 08 	stw     r0,8(r1)
    2bac:	80 01 00 08 	lwz     r0,8(r1)
    2bb0:	30 00 ff fc 	addic   r0,r0,-4
    2bb4:	90 01 00 0c 	stw     r0,12(r1)
	struct gss_cred	*cred = NULL;
    2bb8:	38 00 00 00 	li      r0,0
    2bbc:	90 01 00 10 	stw     r0,16(r1)
	int err = -ENOMEM;
    2bc0:	38 00 ff f4 	li      r0,-12
    2bc4:	90 01 00 14 	stw     r0,20(r1)

	dprintk("RPC:       gss_create_cred for uid %d, flavor %d\n",
    2bc8:	3c 00 00 00 	lis     r0,0
    2bcc:	7c 09 03 78 	mr      r9,r0
    2bd0:	80 09 00 00 	lwz     r0,0(r9)
    2bd4:	54 00 06 f6 	rlwinm  r0,r0,0,27,27
    2bd8:	2f 80 00 00 	cmpwi   cr7,r0,0
    2bdc:	7c 00 00 26 	mfcr    r0
    2be0:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
    2be4:	68 00 00 01 	xori    r0,r0,1
    2be8:	2f 80 00 00 	cmpwi   cr7,r0,0
    2bec:	41 9e 00 30 	beq-    cr7,2c1c <gss_create_cred+0x90>
    2bf0:	80 01 00 3c 	lwz     r0,60(r1)
    2bf4:	7c 0b 03 78 	mr      r11,r0
    2bf8:	81 2b 00 00 	lwz     r9,0(r11)
    2bfc:	80 01 00 38 	lwz     r0,56(r1)
    2c00:	7c 0b 03 78 	mr      r11,r0
    2c04:	80 0b 00 14 	lwz     r0,20(r11)
    2c08:	3d 60 00 00 	lis     r11,0
    2c0c:	38 6b 03 5c 	addi    r3,r11,860
    2c10:	7d 24 4b 78 	mr      r4,r9
    2c14:	7c 05 03 78 	mr      r5,r0
    2c18:	48 00 00 01 	bl      2c18 <gss_create_cred+0x8c>
    2c1c:	38 00 00 48 	li      r0,72
    2c20:	90 01 00 18 	stw     r0,24(r1)
    2c24:	38 00 00 50 	li      r0,80
    2c28:	90 01 00 1c 	stw     r0,28(r1)
    2c2c:	80 01 00 1c 	lwz     r0,28(r1)
    2c30:	60 00 80 00 	ori     r0,r0,32768
    2c34:	81 21 00 18 	lwz     r9,24(r1)
    2c38:	91 21 00 20 	stw     r9,32(r1)
    2c3c:	90 01 00 24 	stw     r0,36(r1)
    2c40:	80 61 00 20 	lwz     r3,32(r1)
    2c44:	80 81 00 24 	lwz     r4,36(r1)
    2c48:	48 00 00 01 	bl      2c48 <gss_create_cred+0xbc>
    2c4c:	7c 60 1b 78 	mr      r0,r3
		acred->uid, auth->au_flavor);

	if (!(cred = kzalloc(sizeof(*cred), GFP_NOFS)))
    2c50:	90 01 00 10 	stw     r0,16(r1)
    2c54:	80 01 00 10 	lwz     r0,16(r1)
    2c58:	2f 80 00 00 	cmpwi   cr7,r0,0
    2c5c:	41 9e 00 80 	beq-    cr7,2cdc <gss_create_cred+0x150>
		goto out_err;

	rpcauth_init_cred(&cred->gc_base, acred, auth, &gss_credops);
    2c60:	80 01 00 10 	lwz     r0,16(r1)
    2c64:	7c 03 03 78 	mr      r3,r0
    2c68:	80 81 00 3c 	lwz     r4,60(r1)
    2c6c:	80 a1 00 38 	lwz     r5,56(r1)
    2c70:	3c 00 00 00 	lis     r0,0
    2c74:	30 c0 00 34 	addic   r6,r0,52
    2c78:	48 00 00 01 	bl      2c78 <gss_create_cred+0xec>
	/*
	 * Note: in order to force a call to call_refresh(), we deliberately
	 * fail to flag the credential as RPCAUTH_CRED_UPTODATE.
	 */
	cred->gc_base.cr_flags = 1UL << RPCAUTH_CRED_NEW;
    2c7c:	80 01 00 10 	lwz     r0,16(r1)
    2c80:	39 20 00 01 	li      r9,1
    2c84:	7c 0b 03 78 	mr      r11,r0
    2c88:	91 2b 00 28 	stw     r9,40(r11)
	cred->gc_service = gss_auth->service;
    2c8c:	80 01 00 0c 	lwz     r0,12(r1)
    2c90:	7c 0b 03 78 	mr      r11,r0
    2c94:	81 2b 00 28 	lwz     r9,40(r11)
    2c98:	80 01 00 10 	lwz     r0,16(r1)
    2c9c:	7c 0b 03 78 	mr      r11,r0
    2ca0:	91 2b 00 34 	stw     r9,52(r11)
	cred->gc_machine_cred = acred->machine_cred;
    2ca4:	80 01 00 3c 	lwz     r0,60(r1)
    2ca8:	7c 09 03 78 	mr      r9,r0
    2cac:	80 09 00 0c 	lwz     r0,12(r9)
    2cb0:	54 00 0f fe 	rlwinm  r0,r0,1,31,31
    2cb4:	54 0b 06 3e 	clrlwi  r11,r0,24
    2cb8:	81 21 00 10 	lwz     r9,16(r1)
    2cbc:	80 09 00 44 	lwz     r0,68(r9)
    2cc0:	51 60 f8 00 	rlwimi  r0,r11,31,0,0
    2cc4:	90 09 00 44 	stw     r0,68(r9)
	kref_get(&gss_auth->kref);
    2cc8:	80 01 00 0c 	lwz     r0,12(r1)
    2ccc:	7c 03 03 78 	mr      r3,r0
    2cd0:	48 00 00 01 	bl      2cd0 <gss_create_cred+0x144>
	return &cred->gc_base;
    2cd4:	80 01 00 10 	lwz     r0,16(r1)
    2cd8:	48 00 00 4c 	b       2d24 <gss_create_cred+0x198>

	dprintk("RPC:       gss_create_cred for uid %d, flavor %d\n",
		acred->uid, auth->au_flavor);

	if (!(cred = kzalloc(sizeof(*cred), GFP_NOFS)))
		goto out_err;
    2cdc:	60 00 00 00 	nop
	cred->gc_machine_cred = acred->machine_cred;
	kref_get(&gss_auth->kref);
	return &cred->gc_base;

out_err:
	dprintk("RPC:       gss_create_cred failed with error %d\n", err);
    2ce0:	3c 00 00 00 	lis     r0,0
    2ce4:	7c 0b 03 78 	mr      r11,r0
    2ce8:	80 0b 00 00 	lwz     r0,0(r11)
    2cec:	54 00 06 f6 	rlwinm  r0,r0,0,27,27
    2cf0:	2f 80 00 00 	cmpwi   cr7,r0,0
    2cf4:	7c 00 00 26 	mfcr    r0
    2cf8:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
    2cfc:	68 00 00 01 	xori    r0,r0,1
    2d00:	2f 80 00 00 	cmpwi   cr7,r0,0
    2d04:	41 9e 00 14 	beq-    cr7,2d18 <gss_create_cred+0x18c>
    2d08:	3c 00 00 00 	lis     r0,0
    2d0c:	30 60 03 90 	addic   r3,r0,912
    2d10:	80 81 00 14 	lwz     r4,20(r1)
    2d14:	48 00 00 01 	bl      2d14 <gss_create_cred+0x188>
    2d18:	80 01 00 14 	lwz     r0,20(r1)
    2d1c:	90 01 00 28 	stw     r0,40(r1)

#define IS_ERR_VALUE(x) unlikely((x) >= (unsigned long)-MAX_ERRNO)

static inline void * __must_check ERR_PTR(long error)
{
	return (void *) error;
    2d20:	80 01 00 28 	lwz     r0,40(r1)
	return ERR_PTR(err);
}
    2d24:	7c 03 03 78 	mr      r3,r0
    2d28:	80 01 00 54 	lwz     r0,84(r1)
    2d2c:	7c 08 03 a6 	mtlr    r0
    2d30:	38 21 00 50 	addi    r1,r1,80
    2d34:	4e 80 00 20 	blr

00002d38 <gss_cred_init>:

static int
gss_cred_init(struct rpc_auth *auth, struct rpc_cred *cred)
{
    2d38:	94 21 ff 40 	stwu    r1,-192(r1)
    2d3c:	7c 08 02 a6 	mflr    r0
    2d40:	90 01 00 c4 	stw     r0,196(r1)
    2d44:	90 61 00 b8 	stw     r3,184(r1)
    2d48:	90 81 00 bc 	stw     r4,188(r1)
	struct gss_auth *gss_auth = container_of(auth, struct gss_auth, rpc_auth);
    2d4c:	80 01 00 b8 	lwz     r0,184(r1)
    2d50:	90 01 00 08 	stw     r0,8(r1)
    2d54:	80 01 00 08 	lwz     r0,8(r1)
    2d58:	30 00 ff fc 	addic   r0,r0,-4
    2d5c:	90 01 00 0c 	stw     r0,12(r1)
	struct gss_cred *gss_cred = container_of(cred,struct gss_cred, gc_base);
    2d60:	80 01 00 bc 	lwz     r0,188(r1)
    2d64:	90 01 00 10 	stw     r0,16(r1)
    2d68:	80 01 00 10 	lwz     r0,16(r1)
    2d6c:	90 01 00 14 	stw     r0,20(r1)
    2d70:	80 01 00 0c 	lwz     r0,12(r1)
    2d74:	90 01 00 1c 	stw     r0,28(r1)
    2d78:	80 01 00 14 	lwz     r0,20(r1)
    2d7c:	90 01 00 20 	stw     r0,32(r1)

static inline int
gss_create_upcall(struct gss_auth *gss_auth, struct gss_cred *gss_cred)
{
	struct inode *inode;
	struct rpc_cred *cred = &gss_cred->gc_base;
    2d80:	80 01 00 20 	lwz     r0,32(r1)
    2d84:	90 01 00 24 	stw     r0,36(r1)
	struct gss_upcall_msg *gss_msg;
	DEFINE_WAIT(wait);
    2d88:	38 00 00 00 	li      r0,0
    2d8c:	90 01 00 88 	stw     r0,136(r1)
    2d90:	38 00 00 00 	li      r0,0
    2d94:	90 01 00 8c 	stw     r0,140(r1)
    2d98:	38 00 00 00 	li      r0,0
    2d9c:	90 01 00 90 	stw     r0,144(r1)
    2da0:	38 00 00 00 	li      r0,0
    2da4:	90 01 00 94 	stw     r0,148(r1)
    2da8:	38 00 00 00 	li      r0,0
    2dac:	90 01 00 98 	stw     r0,152(r1)
    2db0:	7c 40 13 78 	mr      r0,r2
    2db4:	90 01 00 8c 	stw     r0,140(r1)
    2db8:	3c 00 00 00 	lis     r0,0
    2dbc:	30 00 00 00 	addic   r0,r0,0
    2dc0:	90 01 00 90 	stw     r0,144(r1)
    2dc4:	38 01 00 88 	addi    r0,r1,136
    2dc8:	30 00 00 0c 	addic   r0,r0,12
    2dcc:	90 01 00 94 	stw     r0,148(r1)
    2dd0:	38 01 00 88 	addi    r0,r1,136
    2dd4:	30 00 00 0c 	addic   r0,r0,12
    2dd8:	90 01 00 98 	stw     r0,152(r1)
	int err = 0;
    2ddc:	38 00 00 00 	li      r0,0
    2de0:	90 01 00 28 	stw     r0,40(r1)

	dprintk("RPC:       gss_upcall for uid %u\n", cred->cr_uid);
    2de4:	3c 00 00 00 	lis     r0,0
    2de8:	7c 09 03 78 	mr      r9,r0
    2dec:	80 09 00 00 	lwz     r0,0(r9)
    2df0:	54 00 06 f6 	rlwinm  r0,r0,0,27,27
    2df4:	2f 80 00 00 	cmpwi   cr7,r0,0
    2df8:	7c 00 00 26 	mfcr    r0
    2dfc:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
    2e00:	68 00 00 01 	xori    r0,r0,1
    2e04:	2f 80 00 00 	cmpwi   cr7,r0,0
    2e08:	41 9e 00 20 	beq-    cr7,2e28 <gss_cred_init+0xf0>
    2e0c:	80 01 00 24 	lwz     r0,36(r1)
    2e10:	7c 0b 03 78 	mr      r11,r0
    2e14:	80 0b 00 30 	lwz     r0,48(r11)
    2e18:	3d 20 00 00 	lis     r9,0
    2e1c:	38 69 03 c4 	addi    r3,r9,964
    2e20:	7c 04 03 78 	mr      r4,r0
    2e24:	48 00 00 01 	bl      2e24 <gss_cred_init+0xec>
retry:
	gss_msg = gss_setup_upcall(gss_auth->client, gss_auth, cred);
    2e28:	80 01 00 1c 	lwz     r0,28(r1)
    2e2c:	7c 09 03 78 	mr      r9,r0
    2e30:	80 09 00 2c 	lwz     r0,44(r9)
    2e34:	7c 03 03 78 	mr      r3,r0
    2e38:	80 81 00 1c 	lwz     r4,28(r1)
    2e3c:	80 a1 00 24 	lwz     r5,36(r1)
    2e40:	4b ff e4 c1 	bl      1300 <gss_setup_upcall>
    2e44:	90 61 00 2c 	stw     r3,44(r1)
    2e48:	80 01 00 2c 	lwz     r0,44(r1)
    2e4c:	90 01 00 30 	stw     r0,48(r1)
}

static inline long __must_check PTR_ERR(const void *ptr)
{
	return (long) ptr;
    2e50:	80 01 00 30 	lwz     r0,48(r1)
	if (PTR_ERR(gss_msg) == -EAGAIN) {
    2e54:	7c 09 03 78 	mr      r9,r0
    2e58:	38 00 ff f5 	li      r0,-11
    2e5c:	7f 89 00 00 	cmpw    cr7,r9,r0
    2e60:	40 9e 01 94 	bne-    cr7,2ff4 <gss_cred_init+0x2bc>
		err = wait_event_interruptible_timeout(pipe_version_waitqueue,
    2e64:	38 00 0e a6 	li      r0,3750
    2e68:	90 01 00 34 	stw     r0,52(r1)
    2e6c:	3c 00 00 00 	lis     r0,0
    2e70:	7c 0b 03 78 	mr      r11,r0
    2e74:	80 0b 00 04 	lwz     r0,4(r11)
    2e78:	2f 80 00 00 	cmpwi   cr7,r0,0
    2e7c:	40 9c 01 48 	bge-    cr7,2fc4 <gss_cred_init+0x28c>
    2e80:	38 00 00 00 	li      r0,0
    2e84:	90 01 00 9c 	stw     r0,156(r1)
    2e88:	38 00 00 00 	li      r0,0
    2e8c:	90 01 00 a0 	stw     r0,160(r1)
    2e90:	38 00 00 00 	li      r0,0
    2e94:	90 01 00 a4 	stw     r0,164(r1)
    2e98:	38 00 00 00 	li      r0,0
    2e9c:	90 01 00 a8 	stw     r0,168(r1)
    2ea0:	38 00 00 00 	li      r0,0
    2ea4:	90 01 00 ac 	stw     r0,172(r1)
    2ea8:	7c 40 13 78 	mr      r0,r2
    2eac:	90 01 00 a0 	stw     r0,160(r1)
    2eb0:	3c 00 00 00 	lis     r0,0
    2eb4:	30 00 00 00 	addic   r0,r0,0
    2eb8:	90 01 00 a4 	stw     r0,164(r1)
    2ebc:	38 01 00 9c 	addi    r0,r1,156
    2ec0:	30 00 00 0c 	addic   r0,r0,12
    2ec4:	90 01 00 a8 	stw     r0,168(r1)
    2ec8:	38 01 00 9c 	addi    r0,r1,156
    2ecc:	30 00 00 0c 	addic   r0,r0,12
    2ed0:	90 01 00 ac 	stw     r0,172(r1)
    2ed4:	38 01 00 9c 	addi    r0,r1,156
    2ed8:	3d 20 00 00 	lis     r9,0
    2edc:	38 69 00 08 	addi    r3,r9,8
    2ee0:	7c 04 03 78 	mr      r4,r0
    2ee4:	38 a0 00 01 	li      r5,1
    2ee8:	48 00 00 01 	bl      2ee8 <gss_cred_init+0x1b0>
    2eec:	3c 00 00 00 	lis     r0,0
    2ef0:	7c 09 03 78 	mr      r9,r0
    2ef4:	80 09 00 04 	lwz     r0,4(r9)
    2ef8:	2f 80 00 00 	cmpwi   cr7,r0,0
    2efc:	40 9c 00 b4 	bge-    cr7,2fb0 <gss_cred_init+0x278>
    2f00:	7c 40 13 78 	mr      r0,r2
    2f04:	90 01 00 38 	stw     r0,56(r1)
    2f08:	80 01 00 38 	lwz     r0,56(r1)
    2f0c:	90 01 00 3c 	stw     r0,60(r1)
    2f10:	38 00 00 01 	li      r0,1
    2f14:	90 01 00 40 	stw     r0,64(r1)
	return test_and_clear_ti_thread_flag(task_thread_info(tsk), flag);
}

static inline int test_tsk_thread_flag(struct task_struct *tsk, int flag)
{
	return test_ti_thread_flag(task_thread_info(tsk), flag);
    2f18:	80 01 00 3c 	lwz     r0,60(r1)
    2f1c:	7c 0b 03 78 	mr      r11,r0
    2f20:	80 0b 00 04 	lwz     r0,4(r11)
    2f24:	90 01 00 44 	stw     r0,68(r1)
    2f28:	80 01 00 40 	lwz     r0,64(r1)
    2f2c:	90 01 00 48 	stw     r0,72(r1)
	return test_and_clear_bit(flag, (unsigned long *)&ti->flags);
}

static inline int test_ti_thread_flag(struct thread_info *ti, int flag)
{
	return test_bit(flag, (unsigned long *)&ti->flags);
    2f30:	80 01 00 44 	lwz     r0,68(r1)
    2f34:	30 00 00 3c 	addic   r0,r0,60
    2f38:	81 21 00 48 	lwz     r9,72(r1)
    2f3c:	91 21 00 4c 	stw     r9,76(r1)
    2f40:	90 01 00 50 	stw     r0,80(r1)
    2f44:	80 01 00 4c 	lwz     r0,76(r1)
    2f48:	7c 00 2e 70 	srawi   r0,r0,5
    2f4c:	7c 00 01 94 	addze   r0,r0
    2f50:	54 00 10 3a 	rlwinm  r0,r0,2,0,29
    2f54:	81 21 00 50 	lwz     r9,80(r1)
    2f58:	7c 09 02 14 	add     r0,r9,r0
    2f5c:	7c 0b 03 78 	mr      r11,r0
    2f60:	81 2b 00 00 	lwz     r9,0(r11)
    2f64:	80 01 00 4c 	lwz     r0,76(r1)
    2f68:	54 00 06 fe 	clrlwi  r0,r0,27
    2f6c:	7d 20 04 30 	srw     r0,r9,r0
    2f70:	54 00 07 fe 	clrlwi  r0,r0,31
	return -ERESTARTNOINTR;
}

static inline int signal_pending(struct task_struct *p)
{
	return unlikely(test_tsk_thread_flag(p,TIF_SIGPENDING));
    2f74:	2f 80 00 00 	cmpwi   cr7,r0,0
    2f78:	7c 00 00 26 	mfcr    r0
    2f7c:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
    2f80:	68 00 00 01 	xori    r0,r0,1
    2f84:	2f 80 00 00 	cmpwi   cr7,r0,0
    2f88:	40 9e 00 20 	bne-    cr7,2fa8 <gss_cred_init+0x270>
    2f8c:	80 61 00 34 	lwz     r3,52(r1)
    2f90:	48 00 00 01 	bl      2f90 <gss_cred_init+0x258>
    2f94:	90 61 00 34 	stw     r3,52(r1)
    2f98:	80 01 00 34 	lwz     r0,52(r1)
    2f9c:	2f 80 00 00 	cmpwi   cr7,r0,0
    2fa0:	41 9e 00 10 	beq-    cr7,2fb0 <gss_cred_init+0x278>
    2fa4:	4b ff ff 30 	b       2ed4 <gss_cred_init+0x19c>
    2fa8:	38 00 fe 00 	li      r0,-512
    2fac:	90 01 00 34 	stw     r0,52(r1)
    2fb0:	38 01 00 9c 	addi    r0,r1,156
    2fb4:	3d 20 00 00 	lis     r9,0
    2fb8:	38 69 00 08 	addi    r3,r9,8
    2fbc:	7c 04 03 78 	mr      r4,r0
    2fc0:	48 00 00 01 	bl      2fc0 <gss_cred_init+0x288>
    2fc4:	80 01 00 34 	lwz     r0,52(r1)
    2fc8:	90 01 00 28 	stw     r0,40(r1)
				pipe_version >= 0, 15*HZ);
		if (err)
    2fcc:	80 01 00 28 	lwz     r0,40(r1)
    2fd0:	2f 80 00 00 	cmpwi   cr7,r0,0
    2fd4:	40 9e 01 d0 	bne-    cr7,31a4 <gss_cred_init+0x46c>
			goto out;
		if (pipe_version < 0)
    2fd8:	3c 00 00 00 	lis     r0,0
    2fdc:	7c 09 03 78 	mr      r9,r0
    2fe0:	80 09 00 04 	lwz     r0,4(r9)
    2fe4:	2f 80 00 00 	cmpwi   cr7,r0,0
    2fe8:	40 9c fe 40 	bge+    cr7,2e28 <gss_cred_init+0xf0>
			warn_gssd();
    2fec:	4b ff e6 bd 	bl      16a8 <warn_gssd>
    2ff0:	4b ff fe 38 	b       2e28 <gss_cred_init+0xf0>
    2ff4:	80 01 00 2c 	lwz     r0,44(r1)
    2ff8:	90 01 00 54 	stw     r0,84(r1)
}

static inline long __must_check IS_ERR(const void *ptr)
{
	return IS_ERR_VALUE((unsigned long)ptr);
    2ffc:	81 21 00 54 	lwz     r9,84(r1)
    3000:	38 00 f0 00 	li      r0,-4096
    3004:	7f 89 00 40 	cmplw   cr7,r9,r0
    3008:	7c 00 00 26 	mfcr    r0
    300c:	54 00 f7 fe 	rlwinm  r0,r0,30,31,31
		goto retry;
	}
	if (IS_ERR(gss_msg)) {
    3010:	2f 80 00 00 	cmpwi   cr7,r0,0
    3014:	41 9e 00 18 	beq-    cr7,302c <gss_cred_init+0x2f4>
    3018:	80 01 00 2c 	lwz     r0,44(r1)
    301c:	90 01 00 58 	stw     r0,88(r1)
	return (void *) error;
}

static inline long __must_check PTR_ERR(const void *ptr)
{
	return (long) ptr;
    3020:	80 01 00 58 	lwz     r0,88(r1)
		err = PTR_ERR(gss_msg);
    3024:	90 01 00 28 	stw     r0,40(r1)
    3028:	48 00 01 7c 	b       31a4 <gss_cred_init+0x46c>
		goto out;
	}
	inode = &gss_msg->inode->vfs_inode;
    302c:	80 01 00 2c 	lwz     r0,44(r1)
    3030:	7c 0b 03 78 	mr      r11,r0
    3034:	80 0b 00 2c 	lwz     r0,44(r11)
    3038:	90 01 00 5c 	stw     r0,92(r1)
	for (;;) {
		prepare_to_wait(&gss_msg->waitqueue, &wait, TASK_INTERRUPTIBLE);
    303c:	80 01 00 2c 	lwz     r0,44(r1)
    3040:	31 20 00 88 	addic   r9,r0,136
    3044:	38 01 00 88 	addi    r0,r1,136
    3048:	7d 23 4b 78 	mr      r3,r9
    304c:	7c 04 03 78 	mr      r4,r0
    3050:	38 a0 00 01 	li      r5,1
    3054:	48 00 00 01 	bl      3054 <gss_cred_init+0x31c>
		spin_lock(&inode->i_lock);
    3058:	80 01 00 5c 	lwz     r0,92(r1)
    305c:	30 00 00 14 	addic   r0,r0,20
    3060:	90 01 00 60 	stw     r0,96(r1)
		if (gss_msg->ctx != NULL || gss_msg->msg.errno < 0) {
    3064:	80 01 00 2c 	lwz     r0,44(r1)
    3068:	7c 09 03 78 	mr      r9,r0
    306c:	80 09 00 90 	lwz     r0,144(r9)
    3070:	2f 80 00 00 	cmpwi   cr7,r0,0
    3074:	40 9e 00 c4 	bne-    cr7,3138 <gss_cred_init+0x400>
    3078:	80 01 00 2c 	lwz     r0,44(r1)
    307c:	7c 0b 03 78 	mr      r11,r0
    3080:	80 0b 00 1c 	lwz     r0,28(r11)
    3084:	2f 80 00 00 	cmpwi   cr7,r0,0
    3088:	41 9c 00 b0 	blt-    cr7,3138 <gss_cred_init+0x400>
			break;
		}
		spin_unlock(&inode->i_lock);
    308c:	80 01 00 5c 	lwz     r0,92(r1)
    3090:	30 00 00 14 	addic   r0,r0,20
    3094:	90 01 00 64 	stw     r0,100(r1)
		if (signalled()) {
    3098:	7c 40 13 78 	mr      r0,r2
    309c:	90 01 00 68 	stw     r0,104(r1)
    30a0:	80 01 00 68 	lwz     r0,104(r1)
    30a4:	90 01 00 6c 	stw     r0,108(r1)
    30a8:	38 00 00 01 	li      r0,1
    30ac:	90 01 00 70 	stw     r0,112(r1)
	return test_and_clear_ti_thread_flag(task_thread_info(tsk), flag);
}

static inline int test_tsk_thread_flag(struct task_struct *tsk, int flag)
{
	return test_ti_thread_flag(task_thread_info(tsk), flag);
    30b0:	80 01 00 6c 	lwz     r0,108(r1)
    30b4:	7c 09 03 78 	mr      r9,r0
    30b8:	80 09 00 04 	lwz     r0,4(r9)
    30bc:	90 01 00 74 	stw     r0,116(r1)
    30c0:	80 01 00 70 	lwz     r0,112(r1)
    30c4:	90 01 00 78 	stw     r0,120(r1)
    30c8:	80 01 00 74 	lwz     r0,116(r1)
    30cc:	30 00 00 3c 	addic   r0,r0,60
    30d0:	81 21 00 78 	lwz     r9,120(r1)
    30d4:	91 21 00 7c 	stw     r9,124(r1)
    30d8:	90 01 00 80 	stw     r0,128(r1)
    30dc:	80 01 00 7c 	lwz     r0,124(r1)
    30e0:	7c 00 2e 70 	srawi   r0,r0,5
    30e4:	7c 00 01 94 	addze   r0,r0
    30e8:	54 00 10 3a 	rlwinm  r0,r0,2,0,29
    30ec:	81 21 00 80 	lwz     r9,128(r1)
    30f0:	7c 09 02 14 	add     r0,r9,r0
    30f4:	7c 0b 03 78 	mr      r11,r0
    30f8:	81 2b 00 00 	lwz     r9,0(r11)
    30fc:	80 01 00 7c 	lwz     r0,124(r1)
    3100:	54 00 06 fe 	clrlwi  r0,r0,27
    3104:	7d 20 04 30 	srw     r0,r9,r0
    3108:	54 00 07 fe 	clrlwi  r0,r0,31
	return -ERESTARTNOINTR;
}

static inline int signal_pending(struct task_struct *p)
{
	return unlikely(test_tsk_thread_flag(p,TIF_SIGPENDING));
    310c:	2f 80 00 00 	cmpwi   cr7,r0,0
    3110:	7c 00 00 26 	mfcr    r0
    3114:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
    3118:	68 00 00 01 	xori    r0,r0,1
    311c:	2f 80 00 00 	cmpwi   cr7,r0,0
    3120:	41 9e 00 10 	beq-    cr7,3130 <gss_cred_init+0x3f8>
			err = -ERESTARTSYS;
    3124:	38 00 fe 00 	li      r0,-512
    3128:	90 01 00 28 	stw     r0,40(r1)
    312c:	48 00 00 58 	b       3184 <gss_cred_init+0x44c>
			goto out_intr;
		}
		schedule();
    3130:	48 00 00 01 	bl      3130 <gss_cred_init+0x3f8>
    3134:	4b ff ff 08 	b       303c <gss_cred_init+0x304>
	}
	if (gss_msg->ctx)
    3138:	80 01 00 2c 	lwz     r0,44(r1)
    313c:	7c 09 03 78 	mr      r9,r0
    3140:	80 09 00 90 	lwz     r0,144(r9)
    3144:	2f 80 00 00 	cmpwi   cr7,r0,0
    3148:	41 9e 00 20 	beq-    cr7,3168 <gss_cred_init+0x430>
		gss_cred_set_ctx(cred, gss_msg->ctx);
    314c:	80 01 00 2c 	lwz     r0,44(r1)
    3150:	7c 0b 03 78 	mr      r11,r0
    3154:	80 0b 00 90 	lwz     r0,144(r11)
    3158:	80 61 00 24 	lwz     r3,36(r1)
    315c:	7c 04 03 78 	mr      r4,r0
    3160:	4b ff ce a1 	bl      0 <gss_cred_set_ctx>
    3164:	48 00 00 14 	b       3178 <gss_cred_init+0x440>
	else
		err = gss_msg->msg.errno;
    3168:	80 01 00 2c 	lwz     r0,44(r1)
    316c:	7c 09 03 78 	mr      r9,r0
    3170:	80 09 00 1c 	lwz     r0,28(r9)
    3174:	90 01 00 28 	stw     r0,40(r1)
	spin_unlock(&inode->i_lock);
    3178:	80 01 00 5c 	lwz     r0,92(r1)
    317c:	30 00 00 14 	addic   r0,r0,20
    3180:	90 01 00 84 	stw     r0,132(r1)
out_intr:
	finish_wait(&gss_msg->waitqueue, &wait);
    3184:	80 01 00 2c 	lwz     r0,44(r1)
    3188:	31 20 00 88 	addic   r9,r0,136
    318c:	38 01 00 88 	addi    r0,r1,136
    3190:	7d 23 4b 78 	mr      r3,r9
    3194:	7c 04 03 78 	mr      r4,r0
    3198:	48 00 00 01 	bl      3198 <gss_cred_init+0x460>
	gss_release_msg(gss_msg);
    319c:	80 61 00 2c 	lwz     r3,44(r1)
    31a0:	4b ff d7 21 	bl      8c0 <gss_release_msg>
out:
	dprintk("RPC:       gss_create_upcall for uid %u result %d\n",
    31a4:	3c 00 00 00 	lis     r0,0
    31a8:	7c 0b 03 78 	mr      r11,r0
    31ac:	80 0b 00 00 	lwz     r0,0(r11)
    31b0:	54 00 06 f6 	rlwinm  r0,r0,0,27,27
    31b4:	2f 80 00 00 	cmpwi   cr7,r0,0
    31b8:	7c 00 00 26 	mfcr    r0
    31bc:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
    31c0:	68 00 00 01 	xori    r0,r0,1
    31c4:	2f 80 00 00 	cmpwi   cr7,r0,0
    31c8:	41 9e 00 24 	beq-    cr7,31ec <gss_cred_init+0x4b4>
    31cc:	80 01 00 24 	lwz     r0,36(r1)
    31d0:	7c 09 03 78 	mr      r9,r0
    31d4:	80 09 00 30 	lwz     r0,48(r9)
    31d8:	3d 20 00 00 	lis     r9,0
    31dc:	38 69 03 e8 	addi    r3,r9,1000
    31e0:	7c 04 03 78 	mr      r4,r0
    31e4:	80 a1 00 28 	lwz     r5,40(r1)
    31e8:	48 00 00 01 	bl      31e8 <gss_cred_init+0x4b0>
			cred->cr_uid, err);
	return err;
    31ec:	80 01 00 28 	lwz     r0,40(r1)
	struct gss_auth *gss_auth = container_of(auth, struct gss_auth, rpc_auth);
	struct gss_cred *gss_cred = container_of(cred,struct gss_cred, gc_base);
	int err;

	do {
		err = gss_create_upcall(gss_auth, gss_cred);
    31f0:	90 01 00 18 	stw     r0,24(r1)
	} while (err == -EAGAIN);
    31f4:	81 21 00 18 	lwz     r9,24(r1)
    31f8:	38 00 ff f5 	li      r0,-11
    31fc:	7f 89 00 00 	cmpw    cr7,r9,r0
    3200:	41 9e fb 70 	beq+    cr7,2d70 <gss_cred_init+0x38>
	return err;
    3204:	80 01 00 18 	lwz     r0,24(r1)
}
    3208:	7c 03 03 78 	mr      r3,r0
    320c:	80 01 00 c4 	lwz     r0,196(r1)
    3210:	7c 08 03 a6 	mtlr    r0
    3214:	38 21 00 c0 	addi    r1,r1,192
    3218:	4e 80 00 20 	blr

0000321c <gss_match>:

static int
gss_match(struct auth_cred *acred, struct rpc_cred *rc, int flags)
{
    321c:	94 21 ff b0 	stwu    r1,-80(r1)
    3220:	90 61 00 38 	stw     r3,56(r1)
    3224:	90 81 00 3c 	stw     r4,60(r1)
    3228:	90 a1 00 40 	stw     r5,64(r1)
	struct gss_cred *gss_cred = container_of(rc, struct gss_cred, gc_base);
    322c:	80 01 00 3c 	lwz     r0,60(r1)
    3230:	90 01 00 08 	stw     r0,8(r1)
    3234:	80 01 00 08 	lwz     r0,8(r1)
    3238:	90 01 00 0c 	stw     r0,12(r1)

	if (test_bit(RPCAUTH_CRED_NEW, &rc->cr_flags))
    323c:	80 01 00 3c 	lwz     r0,60(r1)
    3240:	30 00 00 28 	addic   r0,r0,40
    3244:	39 20 00 00 	li      r9,0
    3248:	91 21 00 10 	stw     r9,16(r1)
    324c:	90 01 00 14 	stw     r0,20(r1)
    3250:	80 01 00 10 	lwz     r0,16(r1)
    3254:	7c 00 2e 70 	srawi   r0,r0,5
    3258:	7c 00 01 94 	addze   r0,r0
    325c:	54 00 10 3a 	rlwinm  r0,r0,2,0,29
    3260:	81 21 00 14 	lwz     r9,20(r1)
    3264:	7c 09 02 14 	add     r0,r9,r0
    3268:	7c 0b 03 78 	mr      r11,r0
    326c:	81 2b 00 00 	lwz     r9,0(r11)
    3270:	80 01 00 10 	lwz     r0,16(r1)
    3274:	54 00 06 fe 	clrlwi  r0,r0,27
    3278:	7d 20 04 30 	srw     r0,r9,r0
    327c:	54 00 07 fe 	clrlwi  r0,r0,31
    3280:	2f 80 00 00 	cmpwi   cr7,r0,0
    3284:	40 9e 00 a8 	bne-    cr7,332c <gss_match+0x110>
		goto out;
	/* Don't match with creds that have expired. */
	if (time_after(jiffies, gss_cred->gc_ctx->gc_expiry))
    3288:	38 00 00 01 	li      r0,1
    328c:	2f 80 00 00 	cmpwi   cr7,r0,0
    3290:	41 9e 00 48 	beq-    cr7,32d8 <gss_match+0xbc>
    3294:	38 00 00 01 	li      r0,1
    3298:	2f 80 00 00 	cmpwi   cr7,r0,0
    329c:	41 9e 00 3c 	beq-    cr7,32d8 <gss_match+0xbc>
    32a0:	80 01 00 0c 	lwz     r0,12(r1)
    32a4:	7c 09 03 78 	mr      r9,r0
    32a8:	80 09 00 38 	lwz     r0,56(r9)
    32ac:	7c 0b 03 78 	mr      r11,r0
    32b0:	80 0b 00 1c 	lwz     r0,28(r11)
    32b4:	7c 09 03 78 	mr      r9,r0
    32b8:	3c 00 00 00 	lis     r0,0
    32bc:	7c 0b 03 78 	mr      r11,r0
    32c0:	80 0b 00 00 	lwz     r0,0(r11)
    32c4:	7c 00 48 50 	subf    r0,r0,r9
    32c8:	2f 80 00 00 	cmpwi   cr7,r0,0
    32cc:	40 9c 00 0c 	bge-    cr7,32d8 <gss_match+0xbc>
		return 0;
    32d0:	38 00 00 00 	li      r0,0
    32d4:	48 00 00 b8 	b       338c <gss_match+0x170>
	if (!test_bit(RPCAUTH_CRED_UPTODATE, &rc->cr_flags))
    32d8:	80 01 00 3c 	lwz     r0,60(r1)
    32dc:	30 00 00 28 	addic   r0,r0,40
    32e0:	39 20 00 01 	li      r9,1
    32e4:	91 21 00 18 	stw     r9,24(r1)
    32e8:	90 01 00 1c 	stw     r0,28(r1)
    32ec:	80 01 00 18 	lwz     r0,24(r1)
    32f0:	7c 00 2e 70 	srawi   r0,r0,5
    32f4:	7c 00 01 94 	addze   r0,r0
    32f8:	54 00 10 3a 	rlwinm  r0,r0,2,0,29
    32fc:	81 21 00 1c 	lwz     r9,28(r1)
    3300:	7c 09 02 14 	add     r0,r9,r0
    3304:	7c 0b 03 78 	mr      r11,r0
    3308:	81 2b 00 00 	lwz     r9,0(r11)
    330c:	80 01 00 18 	lwz     r0,24(r1)
    3310:	54 00 06 fe 	clrlwi  r0,r0,27
    3314:	7d 20 04 30 	srw     r0,r9,r0
    3318:	54 00 07 fe 	clrlwi  r0,r0,31
    331c:	2f 80 00 00 	cmpwi   cr7,r0,0
    3320:	40 9e 00 10 	bne-    cr7,3330 <gss_match+0x114>
		return 0;
    3324:	38 00 00 00 	li      r0,0
    3328:	48 00 00 64 	b       338c <gss_match+0x170>
gss_match(struct auth_cred *acred, struct rpc_cred *rc, int flags)
{
	struct gss_cred *gss_cred = container_of(rc, struct gss_cred, gc_base);

	if (test_bit(RPCAUTH_CRED_NEW, &rc->cr_flags))
		goto out;
    332c:	60 00 00 00 	nop
	if (time_after(jiffies, gss_cred->gc_ctx->gc_expiry))
		return 0;
	if (!test_bit(RPCAUTH_CRED_UPTODATE, &rc->cr_flags))
		return 0;
out:
	if (acred->machine_cred != gss_cred->gc_machine_cred)
    3330:	80 01 00 38 	lwz     r0,56(r1)
    3334:	7c 09 03 78 	mr      r9,r0
    3338:	80 09 00 0c 	lwz     r0,12(r9)
    333c:	54 00 0f fe 	rlwinm  r0,r0,1,31,31
    3340:	54 09 06 3e 	clrlwi  r9,r0,24
    3344:	80 01 00 0c 	lwz     r0,12(r1)
    3348:	7c 0b 03 78 	mr      r11,r0
    334c:	80 0b 00 44 	lwz     r0,68(r11)
    3350:	54 00 0f fe 	rlwinm  r0,r0,1,31,31
    3354:	54 00 06 3e 	clrlwi  r0,r0,24
    3358:	7f 89 00 00 	cmpw    cr7,r9,r0
    335c:	41 9e 00 0c 	beq-    cr7,3368 <gss_match+0x14c>
		return 0;
    3360:	38 00 00 00 	li      r0,0
    3364:	48 00 00 28 	b       338c <gss_match+0x170>
	return rc->cr_uid == acred->uid;
    3368:	80 01 00 3c 	lwz     r0,60(r1)
    336c:	7c 0b 03 78 	mr      r11,r0
    3370:	81 2b 00 30 	lwz     r9,48(r11)
    3374:	80 01 00 38 	lwz     r0,56(r1)
    3378:	7c 0b 03 78 	mr      r11,r0
    337c:	80 0b 00 00 	lwz     r0,0(r11)
    3380:	7f 89 00 00 	cmpw    cr7,r9,r0
    3384:	7c 00 00 26 	mfcr    r0
    3388:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
}
    338c:	7c 03 03 78 	mr      r3,r0
    3390:	38 21 00 50 	addi    r1,r1,80
    3394:	4e 80 00 20 	blr

00003398 <gss_marshal>:
* Marshal credentials.
* Maybe we should keep a cached credential for performance reasons.
*/
static __be32 *
gss_marshal(struct rpc_task *task, __be32 *p)
{
    3398:	94 21 ff 40 	stwu    r1,-192(r1)
    339c:	7c 08 02 a6 	mflr    r0
    33a0:	90 01 00 c4 	stw     r0,196(r1)
    33a4:	93 e1 00 bc 	stw     r31,188(r1)
    33a8:	90 61 00 a8 	stw     r3,168(r1)
    33ac:	90 81 00 ac 	stw     r4,172(r1)
	struct rpc_rqst *req = task->tk_rqstp;
    33b0:	80 01 00 a8 	lwz     r0,168(r1)
    33b4:	7c 09 03 78 	mr      r9,r0
    33b8:	80 09 00 10 	lwz     r0,16(r9)
    33bc:	90 01 00 08 	stw     r0,8(r1)
	struct rpc_cred *cred = req->rq_cred;
    33c0:	80 01 00 08 	lwz     r0,8(r1)
    33c4:	7c 0b 03 78 	mr      r11,r0
    33c8:	80 0b 00 58 	lwz     r0,88(r11)
    33cc:	90 01 00 0c 	stw     r0,12(r1)
	struct gss_cred	*gss_cred = container_of(cred, struct gss_cred,
    33d0:	80 01 00 0c 	lwz     r0,12(r1)
    33d4:	90 01 00 10 	stw     r0,16(r1)
    33d8:	80 01 00 10 	lwz     r0,16(r1)
    33dc:	90 01 00 14 	stw     r0,20(r1)
						 gc_base);
	struct gss_cl_ctx	*ctx = gss_cred_get_ctx(cred);
    33e0:	80 61 00 0c 	lwz     r3,12(r1)
    33e4:	4b ff ce 85 	bl      268 <gss_cred_get_ctx>
    33e8:	90 61 00 18 	stw     r3,24(r1)
	__be32		*cred_len;
	u32             maj_stat = 0;
    33ec:	38 00 00 00 	li      r0,0
    33f0:	90 01 00 1c 	stw     r0,28(r1)
	struct xdr_netobj mic;
	struct kvec	iov;
	struct xdr_buf	verf_buf;

	dprintk("RPC: %5u gss_marshal\n", task->tk_pid);
    33f4:	3c 00 00 00 	lis     r0,0
    33f8:	7c 09 03 78 	mr      r9,r0
    33fc:	80 09 00 00 	lwz     r0,0(r9)
    3400:	54 00 06 f6 	rlwinm  r0,r0,0,27,27
    3404:	2f 80 00 00 	cmpwi   cr7,r0,0
    3408:	7c 00 00 26 	mfcr    r0
    340c:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
    3410:	68 00 00 01 	xori    r0,r0,1
    3414:	2f 80 00 00 	cmpwi   cr7,r0,0
    3418:	41 9e 00 24 	beq-    cr7,343c <gss_marshal+0xa4>
    341c:	80 01 00 a8 	lwz     r0,168(r1)
    3420:	7c 0b 03 78 	mr      r11,r0
    3424:	a0 0b 00 74 	lhz     r0,116(r11)
    3428:	54 00 04 3e 	clrlwi  r0,r0,16
    342c:	3d 20 00 00 	lis     r9,0
    3430:	38 69 04 1c 	addi    r3,r9,1052
    3434:	7c 04 03 78 	mr      r4,r0
    3438:	48 00 00 01 	bl      3438 <gss_marshal+0xa0>

	*p++ = htonl(RPC_AUTH_GSS);
    343c:	80 01 00 ac 	lwz     r0,172(r1)
    3440:	39 20 00 06 	li      r9,6
    3444:	7c 0b 03 78 	mr      r11,r0
    3448:	91 2b 00 00 	stw     r9,0(r11)
    344c:	80 01 00 ac 	lwz     r0,172(r1)
    3450:	30 00 00 04 	addic   r0,r0,4
    3454:	90 01 00 ac 	stw     r0,172(r1)
	cred_len = p++;
    3458:	80 01 00 ac 	lwz     r0,172(r1)
    345c:	90 01 00 20 	stw     r0,32(r1)
    3460:	80 01 00 ac 	lwz     r0,172(r1)
    3464:	30 00 00 04 	addic   r0,r0,4
    3468:	90 01 00 ac 	stw     r0,172(r1)

	spin_lock(&ctx->gc_seq_lock);
    346c:	80 01 00 18 	lwz     r0,24(r1)
    3470:	30 00 00 0c 	addic   r0,r0,12
    3474:	90 01 00 5c 	stw     r0,92(r1)
	req->rq_seqno = ctx->gc_seq++;
    3478:	80 01 00 18 	lwz     r0,24(r1)
    347c:	7c 09 03 78 	mr      r9,r0
    3480:	80 09 00 08 	lwz     r0,8(r9)
    3484:	81 21 00 08 	lwz     r9,8(r1)
    3488:	90 09 00 64 	stw     r0,100(r9)
    348c:	31 20 00 01 	addic   r9,r0,1
    3490:	80 01 00 18 	lwz     r0,24(r1)
    3494:	7c 0b 03 78 	mr      r11,r0
    3498:	91 2b 00 08 	stw     r9,8(r11)
	spin_unlock(&ctx->gc_seq_lock);
    349c:	80 01 00 18 	lwz     r0,24(r1)
    34a0:	30 00 00 0c 	addic   r0,r0,12
    34a4:	90 01 00 60 	stw     r0,96(r1)

	*p++ = htonl((u32) RPC_GSS_VERSION);
    34a8:	80 01 00 ac 	lwz     r0,172(r1)
    34ac:	39 20 00 01 	li      r9,1
    34b0:	7c 0b 03 78 	mr      r11,r0
    34b4:	91 2b 00 00 	stw     r9,0(r11)
    34b8:	80 01 00 ac 	lwz     r0,172(r1)
    34bc:	30 00 00 04 	addic   r0,r0,4
    34c0:	90 01 00 ac 	stw     r0,172(r1)
	*p++ = htonl((u32) ctx->gc_proc);
    34c4:	80 01 00 18 	lwz     r0,24(r1)
    34c8:	7c 0b 03 78 	mr      r11,r0
    34cc:	81 2b 00 04 	lwz     r9,4(r11)
    34d0:	80 01 00 ac 	lwz     r0,172(r1)
    34d4:	7c 0b 03 78 	mr      r11,r0
    34d8:	91 2b 00 00 	stw     r9,0(r11)
    34dc:	80 01 00 ac 	lwz     r0,172(r1)
    34e0:	30 00 00 04 	addic   r0,r0,4
    34e4:	90 01 00 ac 	stw     r0,172(r1)
	*p++ = htonl((u32) req->rq_seqno);
    34e8:	80 01 00 08 	lwz     r0,8(r1)
    34ec:	7c 0b 03 78 	mr      r11,r0
    34f0:	81 2b 00 64 	lwz     r9,100(r11)
    34f4:	80 01 00 ac 	lwz     r0,172(r1)
    34f8:	7c 0b 03 78 	mr      r11,r0
    34fc:	91 2b 00 00 	stw     r9,0(r11)
    3500:	80 01 00 ac 	lwz     r0,172(r1)
    3504:	30 00 00 04 	addic   r0,r0,4
    3508:	90 01 00 ac 	stw     r0,172(r1)
	*p++ = htonl((u32) gss_cred->gc_service);
    350c:	80 01 00 14 	lwz     r0,20(r1)
    3510:	7c 0b 03 78 	mr      r11,r0
    3514:	81 2b 00 34 	lwz     r9,52(r11)
    3518:	80 01 00 ac 	lwz     r0,172(r1)
    351c:	7c 0b 03 78 	mr      r11,r0
    3520:	91 2b 00 00 	stw     r9,0(r11)
    3524:	80 01 00 ac 	lwz     r0,172(r1)
    3528:	30 00 00 04 	addic   r0,r0,4
    352c:	90 01 00 ac 	stw     r0,172(r1)
	p = xdr_encode_netobj(p, &ctx->gc_wire_ctx);
    3530:	80 01 00 18 	lwz     r0,24(r1)
    3534:	30 00 00 10 	addic   r0,r0,16
    3538:	80 61 00 ac 	lwz     r3,172(r1)
    353c:	7c 04 03 78 	mr      r4,r0
    3540:	48 00 00 01 	bl      3540 <gss_marshal+0x1a8>
    3544:	90 61 00 ac 	stw     r3,172(r1)
	*cred_len = htonl((p - (cred_len + 1)) << 2);
    3548:	81 21 00 ac 	lwz     r9,172(r1)
    354c:	80 01 00 20 	lwz     r0,32(r1)
    3550:	30 00 00 04 	addic   r0,r0,4
    3554:	7c 00 48 50 	subf    r0,r0,r9
    3558:	7c 00 16 70 	srawi   r0,r0,2
    355c:	54 00 10 3a 	rlwinm  r0,r0,2,0,29
    3560:	7c 09 03 78 	mr      r9,r0
    3564:	80 01 00 20 	lwz     r0,32(r1)
    3568:	7c 0b 03 78 	mr      r11,r0
    356c:	91 2b 00 00 	stw     r9,0(r11)

	/* We compute the checksum for the verifier over the xdr-encoded bytes
	 * starting with the xid and ending at the end of the credential: */
	iov.iov_base = xprt_skip_transport_header(task->tk_xprt,
    3570:	80 01 00 a8 	lwz     r0,168(r1)
    3574:	7c 09 03 78 	mr      r9,r0
    3578:	80 09 00 0c 	lwz     r0,12(r9)
    357c:	7c 0b 03 78 	mr      r11,r0
    3580:	81 2b 00 14 	lwz     r9,20(r11)
					req->rq_snd_buf.head[0].iov_base);
    3584:	80 01 00 08 	lwz     r0,8(r1)
    3588:	7c 0b 03 78 	mr      r11,r0
    358c:	80 0b 00 04 	lwz     r0,4(r11)
    3590:	91 21 00 24 	stw     r9,36(r1)
    3594:	90 01 00 28 	stw     r0,40(r1)
struct rpc_xprt *	xprt_alloc(struct net *net, int size, int max_req);
void			xprt_free(struct rpc_xprt *);

static inline __be32 *xprt_skip_transport_header(struct rpc_xprt *xprt, __be32 *p)
{
	return p + xprt->tsh_size;
    3598:	80 01 00 24 	lwz     r0,36(r1)
    359c:	7c 09 03 78 	mr      r9,r0
    35a0:	80 09 00 a0 	lwz     r0,160(r9)
    35a4:	54 00 10 3a 	rlwinm  r0,r0,2,0,29
    35a8:	81 21 00 28 	lwz     r9,40(r1)
    35ac:	7c 09 02 14 	add     r0,r9,r0
	p = xdr_encode_netobj(p, &ctx->gc_wire_ctx);
	*cred_len = htonl((p - (cred_len + 1)) << 2);

	/* We compute the checksum for the verifier over the xdr-encoded bytes
	 * starting with the xid and ending at the end of the credential: */
	iov.iov_base = xprt_skip_transport_header(task->tk_xprt,
    35b0:	90 01 00 6c 	stw     r0,108(r1)
					req->rq_snd_buf.head[0].iov_base);
	iov.iov_len = (u8 *)p - (u8 *)iov.iov_base;
    35b4:	81 21 00 ac 	lwz     r9,172(r1)
    35b8:	80 01 00 6c 	lwz     r0,108(r1)
    35bc:	7c 00 48 50 	subf    r0,r0,r9
    35c0:	90 01 00 70 	stw     r0,112(r1)
	xdr_buf_from_iov(&iov, &verf_buf);
    35c4:	39 21 00 6c 	addi    r9,r1,108
    35c8:	38 01 00 74 	addi    r0,r1,116
    35cc:	7d 23 4b 78 	mr      r3,r9
    35d0:	7c 04 03 78 	mr      r4,r0
    35d4:	48 00 00 01 	bl      35d4 <gss_marshal+0x23c>

	/* set verifier flavor*/
	*p++ = htonl(RPC_AUTH_GSS);
    35d8:	80 01 00 ac 	lwz     r0,172(r1)
    35dc:	39 20 00 06 	li      r9,6
    35e0:	7c 0b 03 78 	mr      r11,r0
    35e4:	91 2b 00 00 	stw     r9,0(r11)
    35e8:	80 01 00 ac 	lwz     r0,172(r1)
    35ec:	30 00 00 04 	addic   r0,r0,4
    35f0:	90 01 00 ac 	stw     r0,172(r1)

	mic.data = (u8 *)(p + 1);
    35f4:	80 01 00 ac 	lwz     r0,172(r1)
    35f8:	30 00 00 04 	addic   r0,r0,4
    35fc:	90 01 00 68 	stw     r0,104(r1)
	maj_stat = gss_get_mic(ctx->gc_gss_ctx, &verf_buf, &mic);
    3600:	80 01 00 18 	lwz     r0,24(r1)
    3604:	7c 09 03 78 	mr      r9,r0
    3608:	81 69 00 0c 	lwz     r11,12(r9)
    360c:	39 21 00 74 	addi    r9,r1,116
    3610:	38 01 00 64 	addi    r0,r1,100
    3614:	7d 63 5b 78 	mr      r3,r11
    3618:	7d 24 4b 78 	mr      r4,r9
    361c:	7c 05 03 78 	mr      r5,r0
    3620:	48 00 00 01 	bl      3620 <gss_marshal+0x288>
    3624:	90 61 00 1c 	stw     r3,28(r1)
	if (maj_stat == GSS_S_CONTEXT_EXPIRED) {
    3628:	81 21 00 1c 	lwz     r9,28(r1)
    362c:	3c 00 00 0c 	lis     r0,12
    3630:	7f 89 00 00 	cmpw    cr7,r9,r0
    3634:	40 9e 00 84 	bne-    cr7,36b8 <gss_marshal+0x320>
		clear_bit(RPCAUTH_CRED_UPTODATE, &cred->cr_flags);
    3638:	80 01 00 0c 	lwz     r0,12(r1)
    363c:	30 00 00 28 	addic   r0,r0,40
    3640:	39 20 00 01 	li      r9,1
    3644:	91 21 00 2c 	stw     r9,44(r1)
    3648:	90 01 00 30 	stw     r0,48(r1)
	set_bits(BITOP_MASK(nr), addr + BITOP_WORD(nr));
}

static __inline__ void clear_bit(int nr, volatile unsigned long *addr)
{
	clear_bits(BITOP_MASK(nr), addr + BITOP_WORD(nr));
    364c:	80 01 00 2c 	lwz     r0,44(r1)
    3650:	7c 09 2e 70 	srawi   r9,r0,5
    3654:	7d 29 01 94 	addze   r9,r9
    3658:	55 29 28 34 	rlwinm  r9,r9,5,0,26
    365c:	7c 09 00 50 	subf    r0,r9,r0
    3660:	39 20 00 01 	li      r9,1
    3664:	7d 29 00 30 	slw     r9,r9,r0
    3668:	80 01 00 2c 	lwz     r0,44(r1)
    366c:	7c 00 2e 70 	srawi   r0,r0,5
    3670:	7c 00 01 94 	addze   r0,r0
    3674:	54 00 10 3a 	rlwinm  r0,r0,2,0,29
    3678:	81 61 00 30 	lwz     r11,48(r1)
    367c:	7c 0b 02 14 	add     r0,r11,r0
    3680:	91 21 00 34 	stw     r9,52(r1)
    3684:	90 01 00 38 	stw     r0,56(r1)
	: "r" (mask), "r" (p)			\
	: "cc", "memory");			\
}

DEFINE_BITOP(set_bits, or, "", "")
DEFINE_BITOP(clear_bits, andc, "", "")
    3688:	80 01 00 38 	lwz     r0,56(r1)
    368c:	90 01 00 3c 	stw     r0,60(r1)
    3690:	81 41 00 3c 	lwz     r10,60(r1)
    3694:	80 01 00 34 	lwz     r0,52(r1)
    3698:	81 21 00 3c 	lwz     r9,60(r1)
    369c:	81 61 00 3c 	lwz     r11,60(r1)
    36a0:	7f e0 48 28 	lwarx   r31,0,r9
    36a4:	7f ff 00 78 	andc    r31,r31,r0
    36a8:	7f e0 49 2d 	stwcx.  r31,0,r9
    36ac:	40 a2 ff f4 	bne-    36a0 <gss_marshal+0x308>
    36b0:	93 e1 00 40 	stw     r31,64(r1)
    36b4:	48 00 00 5c 	b       3710 <gss_marshal+0x378>
	} else if (maj_stat != 0) {
    36b8:	80 01 00 1c 	lwz     r0,28(r1)
    36bc:	2f 80 00 00 	cmpwi   cr7,r0,0
    36c0:	41 9e 00 50 	beq-    cr7,3710 <gss_marshal+0x378>
		printk("gss_marshal: gss_get_mic FAILED (%d)\n", maj_stat);
    36c4:	3c 00 00 00 	lis     r0,0
    36c8:	30 60 04 34 	addic   r3,r0,1076
    36cc:	80 81 00 1c 	lwz     r4,28(r1)
    36d0:	48 00 00 01 	bl      36d0 <gss_marshal+0x338>
		goto out_put_ctx;
    36d4:	60 00 00 00 	nop
	}
	p = xdr_encode_opaque(p, NULL, mic.len);
	gss_put_ctx(ctx);
	return p;
    36d8:	80 01 00 18 	lwz     r0,24(r1)
    36dc:	90 01 00 50 	stw     r0,80(r1)
}

static inline void
gss_put_ctx(struct gss_cl_ctx *ctx)
{
	if (atomic_dec_and_test(&ctx->count))
    36e0:	80 01 00 50 	lwz     r0,80(r1)
    36e4:	90 01 00 54 	stw     r0,84(r1)
	PPC405_ERR77(0,%1)
"	stwcx.	%0,0,%1\n\
	bne-	1b"
	PPC_ACQUIRE_BARRIER
	: "=&r" (t)
	: "r" (&v->counter)
    36e8:	80 01 00 54 	lwz     r0,84(r1)

static __inline__ int atomic_dec_return(atomic_t *v)
{
	int t;

	__asm__ __volatile__(
    36ec:	7f e0 00 28 	lwarx   r31,0,r0
    36f0:	33 ff ff ff 	addic   r31,r31,-1
    36f4:	7f e0 01 2d 	stwcx.  r31,0,r0
    36f8:	40 a2 ff f4 	bne-    36ec <gss_marshal+0x354>
    36fc:	93 e1 00 58 	stw     r31,88(r1)
	PPC_ACQUIRE_BARRIER
	: "=&r" (t)
	: "r" (&v->counter)
	: "cc", "xer", "memory");

	return t;
    3700:	80 01 00 58 	lwz     r0,88(r1)
    3704:	2f 80 00 00 	cmpwi   cr7,r0,0
    3708:	40 9e 00 6c 	bne-    cr7,3774 <gss_marshal+0x3dc>
    370c:	48 00 00 60 	b       376c <gss_marshal+0x3d4>
		clear_bit(RPCAUTH_CRED_UPTODATE, &cred->cr_flags);
	} else if (maj_stat != 0) {
		printk("gss_marshal: gss_get_mic FAILED (%d)\n", maj_stat);
		goto out_put_ctx;
	}
	p = xdr_encode_opaque(p, NULL, mic.len);
    3710:	80 01 00 64 	lwz     r0,100(r1)
    3714:	80 61 00 ac 	lwz     r3,172(r1)
    3718:	38 80 00 00 	li      r4,0
    371c:	7c 05 03 78 	mr      r5,r0
    3720:	48 00 00 01 	bl      3720 <gss_marshal+0x388>
    3724:	90 61 00 ac 	stw     r3,172(r1)
    3728:	80 01 00 18 	lwz     r0,24(r1)
    372c:	90 01 00 44 	stw     r0,68(r1)
}

static inline void
gss_put_ctx(struct gss_cl_ctx *ctx)
{
	if (atomic_dec_and_test(&ctx->count))
    3730:	80 01 00 44 	lwz     r0,68(r1)
    3734:	90 01 00 48 	stw     r0,72(r1)
	PPC405_ERR77(0,%1)
"	stwcx.	%0,0,%1\n\
	bne-	1b"
	PPC_ACQUIRE_BARRIER
	: "=&r" (t)
	: "r" (&v->counter)
    3738:	80 01 00 48 	lwz     r0,72(r1)

static __inline__ int atomic_dec_return(atomic_t *v)
{
	int t;

	__asm__ __volatile__(
    373c:	7f e0 00 28 	lwarx   r31,0,r0
    3740:	33 ff ff ff 	addic   r31,r31,-1
    3744:	7f e0 01 2d 	stwcx.  r31,0,r0
    3748:	40 a2 ff f4 	bne-    373c <gss_marshal+0x3a4>
    374c:	93 e1 00 4c 	stw     r31,76(r1)
	PPC_ACQUIRE_BARRIER
	: "=&r" (t)
	: "r" (&v->counter)
	: "cc", "xer", "memory");

	return t;
    3750:	80 01 00 4c 	lwz     r0,76(r1)
    3754:	2f 80 00 00 	cmpwi   cr7,r0,0
    3758:	40 9e 00 0c 	bne-    cr7,3764 <gss_marshal+0x3cc>
		gss_free_ctx(ctx);
    375c:	80 61 00 44 	lwz     r3,68(r1)
    3760:	4b ff f1 ed 	bl      294c <gss_free_ctx>
		printk("gss_marshal: gss_get_mic FAILED (%d)\n", maj_stat);
		goto out_put_ctx;
	}
	p = xdr_encode_opaque(p, NULL, mic.len);
	gss_put_ctx(ctx);
	return p;
    3764:	80 01 00 ac 	lwz     r0,172(r1)
    3768:	48 00 00 10 	b       3778 <gss_marshal+0x3e0>

static inline void
gss_put_ctx(struct gss_cl_ctx *ctx)
{
	if (atomic_dec_and_test(&ctx->count))
		gss_free_ctx(ctx);
    376c:	80 61 00 50 	lwz     r3,80(r1)
    3770:	4b ff f1 dd 	bl      294c <gss_free_ctx>
	p = xdr_encode_opaque(p, NULL, mic.len);
	gss_put_ctx(ctx);
	return p;
out_put_ctx:
	gss_put_ctx(ctx);
	return NULL;
    3774:	38 00 00 00 	li      r0,0
}
    3778:	7c 03 03 78 	mr      r3,r0
    377c:	80 01 00 c4 	lwz     r0,196(r1)
    3780:	7c 08 03 a6 	mtlr    r0
    3784:	83 e1 00 bc 	lwz     r31,188(r1)
    3788:	38 21 00 c0 	addi    r1,r1,192
    378c:	4e 80 00 20 	blr

00003790 <gss_renew_cred>:

static int gss_renew_cred(struct rpc_task *task)
{
    3790:	94 21 ff c0 	stwu    r1,-64(r1)
    3794:	7c 08 02 a6 	mflr    r0
    3798:	90 01 00 44 	stw     r0,68(r1)
    379c:	90 61 00 38 	stw     r3,56(r1)
	struct rpc_cred *oldcred = task->tk_rqstp->rq_cred;
    37a0:	80 01 00 38 	lwz     r0,56(r1)
    37a4:	7c 09 03 78 	mr      r9,r0
    37a8:	80 09 00 10 	lwz     r0,16(r9)
    37ac:	7c 0b 03 78 	mr      r11,r0
    37b0:	80 0b 00 58 	lwz     r0,88(r11)
    37b4:	90 01 00 08 	stw     r0,8(r1)
	struct gss_cred *gss_cred = container_of(oldcred,
    37b8:	80 01 00 08 	lwz     r0,8(r1)
    37bc:	90 01 00 0c 	stw     r0,12(r1)
    37c0:	80 01 00 0c 	lwz     r0,12(r1)
    37c4:	90 01 00 10 	stw     r0,16(r1)
						 struct gss_cred,
						 gc_base);
	struct rpc_auth *auth = oldcred->cr_auth;
    37c8:	80 01 00 08 	lwz     r0,8(r1)
    37cc:	7c 09 03 78 	mr      r9,r0
    37d0:	80 09 00 18 	lwz     r0,24(r9)
    37d4:	90 01 00 14 	stw     r0,20(r1)
	struct auth_cred acred = {
    37d8:	38 00 00 00 	li      r0,0
    37dc:	90 01 00 24 	stw     r0,36(r1)
    37e0:	38 00 00 00 	li      r0,0
    37e4:	90 01 00 28 	stw     r0,40(r1)
    37e8:	38 00 00 00 	li      r0,0
    37ec:	90 01 00 2c 	stw     r0,44(r1)
    37f0:	38 00 00 00 	li      r0,0
    37f4:	90 01 00 30 	stw     r0,48(r1)
		.uid = oldcred->cr_uid,
    37f8:	80 01 00 08 	lwz     r0,8(r1)
    37fc:	7c 0b 03 78 	mr      r11,r0
    3800:	80 0b 00 30 	lwz     r0,48(r11)
	struct rpc_cred *oldcred = task->tk_rqstp->rq_cred;
	struct gss_cred *gss_cred = container_of(oldcred,
						 struct gss_cred,
						 gc_base);
	struct rpc_auth *auth = oldcred->cr_auth;
	struct auth_cred acred = {
    3804:	90 01 00 24 	stw     r0,36(r1)
		.uid = oldcred->cr_uid,
		.machine_cred = gss_cred->gc_machine_cred,
    3808:	80 01 00 10 	lwz     r0,16(r1)
    380c:	7c 09 03 78 	mr      r9,r0
    3810:	80 09 00 44 	lwz     r0,68(r9)
    3814:	54 00 0f fe 	rlwinm  r0,r0,1,31,31
    3818:	54 09 06 3e 	clrlwi  r9,r0,24
	struct rpc_cred *oldcred = task->tk_rqstp->rq_cred;
	struct gss_cred *gss_cred = container_of(oldcred,
						 struct gss_cred,
						 gc_base);
	struct rpc_auth *auth = oldcred->cr_auth;
	struct auth_cred acred = {
    381c:	80 01 00 30 	lwz     r0,48(r1)
    3820:	51 20 f8 00 	rlwimi  r0,r9,31,0,0
    3824:	90 01 00 30 	stw     r0,48(r1)
		.uid = oldcred->cr_uid,
		.machine_cred = gss_cred->gc_machine_cred,
	};
	struct rpc_cred *new;

	new = gss_lookup_cred(auth, &acred, RPCAUTH_LOOKUP_NEW);
    3828:	38 01 00 24 	addi    r0,r1,36
    382c:	80 61 00 14 	lwz     r3,20(r1)
    3830:	7c 04 03 78 	mr      r4,r0
    3834:	38 a0 00 01 	li      r5,1
    3838:	4b ff f3 15 	bl      2b4c <gss_lookup_cred>
    383c:	90 61 00 18 	stw     r3,24(r1)
    3840:	80 01 00 18 	lwz     r0,24(r1)
    3844:	90 01 00 1c 	stw     r0,28(r1)
}

static inline long __must_check IS_ERR(const void *ptr)
{
	return IS_ERR_VALUE((unsigned long)ptr);
    3848:	81 21 00 1c 	lwz     r9,28(r1)
    384c:	38 00 f0 00 	li      r0,-4096
    3850:	7f 89 00 40 	cmplw   cr7,r9,r0
    3854:	7c 00 00 26 	mfcr    r0
    3858:	54 00 f7 fe 	rlwinm  r0,r0,30,31,31
	if (IS_ERR(new))
    385c:	2f 80 00 00 	cmpwi   cr7,r0,0
    3860:	41 9e 00 14 	beq-    cr7,3874 <gss_renew_cred+0xe4>
    3864:	80 01 00 18 	lwz     r0,24(r1)
    3868:	90 01 00 20 	stw     r0,32(r1)
	return (void *) error;
}

static inline long __must_check PTR_ERR(const void *ptr)
{
	return (long) ptr;
    386c:	80 01 00 20 	lwz     r0,32(r1)
		return PTR_ERR(new);
    3870:	48 00 00 28 	b       3898 <gss_renew_cred+0x108>
	task->tk_rqstp->rq_cred = new;
    3874:	80 01 00 38 	lwz     r0,56(r1)
    3878:	7c 0b 03 78 	mr      r11,r0
    387c:	80 0b 00 10 	lwz     r0,16(r11)
    3880:	81 21 00 18 	lwz     r9,24(r1)
    3884:	7c 0b 03 78 	mr      r11,r0
    3888:	91 2b 00 58 	stw     r9,88(r11)
	put_rpccred(oldcred);
    388c:	80 61 00 08 	lwz     r3,8(r1)
    3890:	48 00 00 01 	bl      3890 <gss_renew_cred+0x100>
	return 0;
    3894:	38 00 00 00 	li      r0,0
}
    3898:	7c 03 03 78 	mr      r3,r0
    389c:	80 01 00 44 	lwz     r0,68(r1)
    38a0:	7c 08 03 a6 	mtlr    r0
    38a4:	38 21 00 40 	addi    r1,r1,64
    38a8:	4e 80 00 20 	blr

000038ac <gss_cred_is_negative_entry>:

static int gss_cred_is_negative_entry(struct rpc_cred *cred)
{
    38ac:	94 21 ff b0 	stwu    r1,-80(r1)
    38b0:	90 61 00 48 	stw     r3,72(r1)
	if (test_bit(RPCAUTH_CRED_NEGATIVE, &cred->cr_flags)) {
    38b4:	80 01 00 48 	lwz     r0,72(r1)
    38b8:	30 00 00 28 	addic   r0,r0,40
    38bc:	39 20 00 03 	li      r9,3
    38c0:	91 21 00 1c 	stw     r9,28(r1)
    38c4:	90 01 00 20 	stw     r0,32(r1)
    38c8:	80 01 00 1c 	lwz     r0,28(r1)
    38cc:	7c 00 2e 70 	srawi   r0,r0,5
    38d0:	7c 00 01 94 	addze   r0,r0
    38d4:	54 00 10 3a 	rlwinm  r0,r0,2,0,29
    38d8:	81 21 00 20 	lwz     r9,32(r1)
    38dc:	7c 09 02 14 	add     r0,r9,r0
    38e0:	7c 0b 03 78 	mr      r11,r0
    38e4:	81 2b 00 00 	lwz     r9,0(r11)
    38e8:	80 01 00 1c 	lwz     r0,28(r1)
    38ec:	54 00 06 fe 	clrlwi  r0,r0,27
    38f0:	7d 20 04 30 	srw     r0,r9,r0
    38f4:	54 00 07 fe 	clrlwi  r0,r0,31
    38f8:	2f 80 00 00 	cmpwi   cr7,r0,0
    38fc:	41 9e 00 b0 	beq-    cr7,39ac <gss_cred_is_negative_entry+0x100>
		unsigned long now = jiffies;
    3900:	3c 00 00 00 	lis     r0,0
    3904:	7c 09 03 78 	mr      r9,r0
    3908:	80 09 00 00 	lwz     r0,0(r9)
    390c:	90 01 00 08 	stw     r0,8(r1)
		unsigned long begin, expire;
		struct gss_cred *gss_cred; 

		gss_cred = container_of(cred, struct gss_cred, gc_base);
    3910:	80 01 00 48 	lwz     r0,72(r1)
    3914:	90 01 00 0c 	stw     r0,12(r1)
    3918:	80 01 00 0c 	lwz     r0,12(r1)
    391c:	90 01 00 10 	stw     r0,16(r1)
		begin = gss_cred->gc_upcall_timestamp;
    3920:	80 01 00 10 	lwz     r0,16(r1)
    3924:	7c 0b 03 78 	mr      r11,r0
    3928:	80 0b 00 40 	lwz     r0,64(r11)
    392c:	90 01 00 14 	stw     r0,20(r1)
		expire = begin + gss_expired_cred_retry_delay * HZ;
    3930:	3c 00 00 00 	lis     r0,0
    3934:	7c 09 03 78 	mr      r9,r0
    3938:	80 09 00 00 	lwz     r0,0(r9)
    393c:	1d 20 00 fa 	mulli   r9,r0,250
    3940:	80 01 00 14 	lwz     r0,20(r1)
    3944:	7c 09 02 14 	add     r0,r9,r0
    3948:	90 01 00 18 	stw     r0,24(r1)

		if (time_in_range_open(now, begin, expire))
    394c:	38 00 00 01 	li      r0,1
    3950:	2f 80 00 00 	cmpwi   cr7,r0,0
    3954:	41 9e 00 58 	beq-    cr7,39ac <gss_cred_is_negative_entry+0x100>
    3958:	38 00 00 01 	li      r0,1
    395c:	2f 80 00 00 	cmpwi   cr7,r0,0
    3960:	41 9e 00 4c 	beq-    cr7,39ac <gss_cred_is_negative_entry+0x100>
    3964:	81 21 00 08 	lwz     r9,8(r1)
    3968:	80 01 00 14 	lwz     r0,20(r1)
    396c:	7c 00 48 50 	subf    r0,r0,r9
    3970:	2f 80 00 00 	cmpwi   cr7,r0,0
    3974:	41 9c 00 38 	blt-    cr7,39ac <gss_cred_is_negative_entry+0x100>
    3978:	38 00 00 01 	li      r0,1
    397c:	2f 80 00 00 	cmpwi   cr7,r0,0
    3980:	41 9e 00 2c 	beq-    cr7,39ac <gss_cred_is_negative_entry+0x100>
    3984:	38 00 00 01 	li      r0,1
    3988:	2f 80 00 00 	cmpwi   cr7,r0,0
    398c:	41 9e 00 20 	beq-    cr7,39ac <gss_cred_is_negative_entry+0x100>
    3990:	81 21 00 08 	lwz     r9,8(r1)
    3994:	80 01 00 18 	lwz     r0,24(r1)
    3998:	7c 00 48 50 	subf    r0,r0,r9
    399c:	2f 80 00 00 	cmpwi   cr7,r0,0
    39a0:	40 9c 00 0c 	bge-    cr7,39ac <gss_cred_is_negative_entry+0x100>
			return 1;
    39a4:	38 00 00 01 	li      r0,1
    39a8:	48 00 00 08 	b       39b0 <gss_cred_is_negative_entry+0x104>
	}
	return 0;
    39ac:	38 00 00 00 	li      r0,0
}
    39b0:	7c 03 03 78 	mr      r3,r0
    39b4:	38 21 00 50 	addi    r1,r1,80
    39b8:	4e 80 00 20 	blr

000039bc <gss_refresh>:
/*
* Refresh credentials. XXX - finish
*/
static int
gss_refresh(struct rpc_task *task)
{
    39bc:	94 21 ff 80 	stwu    r1,-128(r1)
    39c0:	7c 08 02 a6 	mflr    r0
    39c4:	90 01 00 84 	stw     r0,132(r1)
    39c8:	93 e1 00 7c 	stw     r31,124(r1)
    39cc:	90 61 00 68 	stw     r3,104(r1)
	struct rpc_cred *cred = task->tk_rqstp->rq_cred;
    39d0:	80 01 00 68 	lwz     r0,104(r1)
    39d4:	7c 09 03 78 	mr      r9,r0
    39d8:	80 09 00 10 	lwz     r0,16(r9)
    39dc:	7c 0b 03 78 	mr      r11,r0
    39e0:	80 0b 00 58 	lwz     r0,88(r11)
    39e4:	90 01 00 08 	stw     r0,8(r1)
	int ret = 0;
    39e8:	38 00 00 00 	li      r0,0
    39ec:	90 01 00 0c 	stw     r0,12(r1)

	if (gss_cred_is_negative_entry(cred))
    39f0:	80 61 00 08 	lwz     r3,8(r1)
    39f4:	4b ff fe b9 	bl      38ac <gss_cred_is_negative_entry>
    39f8:	7c 60 1b 78 	mr      r0,r3
    39fc:	2f 80 00 00 	cmpwi   cr7,r0,0
    3a00:	41 9e 00 0c 	beq-    cr7,3a0c <gss_refresh+0x50>
		return -EKEYEXPIRED;
    3a04:	38 00 ff 81 	li      r0,-127
    3a08:	48 00 03 f4 	b       3dfc <gss_refresh+0x440>

	if (!test_bit(RPCAUTH_CRED_NEW, &cred->cr_flags) &&
    3a0c:	80 01 00 08 	lwz     r0,8(r1)
    3a10:	30 00 00 28 	addic   r0,r0,40
    3a14:	39 20 00 00 	li      r9,0
    3a18:	91 21 00 10 	stw     r9,16(r1)
    3a1c:	90 01 00 14 	stw     r0,20(r1)
    3a20:	80 01 00 10 	lwz     r0,16(r1)
    3a24:	7c 00 2e 70 	srawi   r0,r0,5
    3a28:	7c 00 01 94 	addze   r0,r0
    3a2c:	54 00 10 3a 	rlwinm  r0,r0,2,0,29
    3a30:	81 21 00 14 	lwz     r9,20(r1)
    3a34:	7c 09 02 14 	add     r0,r9,r0
    3a38:	7c 0b 03 78 	mr      r11,r0
    3a3c:	81 2b 00 00 	lwz     r9,0(r11)
    3a40:	80 01 00 10 	lwz     r0,16(r1)
    3a44:	54 00 06 fe 	clrlwi  r0,r0,27
    3a48:	7d 20 04 30 	srw     r0,r9,r0
    3a4c:	54 00 07 fe 	clrlwi  r0,r0,31
    3a50:	2f 80 00 00 	cmpwi   cr7,r0,0
    3a54:	40 9e 00 80 	bne-    cr7,3ad4 <gss_refresh+0x118>
			!test_bit(RPCAUTH_CRED_UPTODATE, &cred->cr_flags)) {
    3a58:	80 01 00 08 	lwz     r0,8(r1)
    3a5c:	30 00 00 28 	addic   r0,r0,40
    3a60:	39 20 00 01 	li      r9,1
    3a64:	91 21 00 18 	stw     r9,24(r1)
    3a68:	90 01 00 1c 	stw     r0,28(r1)
    3a6c:	80 01 00 18 	lwz     r0,24(r1)
    3a70:	7c 00 2e 70 	srawi   r0,r0,5
    3a74:	7c 00 01 94 	addze   r0,r0
    3a78:	54 00 10 3a 	rlwinm  r0,r0,2,0,29
    3a7c:	81 21 00 1c 	lwz     r9,28(r1)
    3a80:	7c 09 02 14 	add     r0,r9,r0
    3a84:	7c 0b 03 78 	mr      r11,r0
    3a88:	81 2b 00 00 	lwz     r9,0(r11)
    3a8c:	80 01 00 18 	lwz     r0,24(r1)
    3a90:	54 00 06 fe 	clrlwi  r0,r0,27
    3a94:	7d 20 04 30 	srw     r0,r9,r0
    3a98:	54 00 07 fe 	clrlwi  r0,r0,31
	int ret = 0;

	if (gss_cred_is_negative_entry(cred))
		return -EKEYEXPIRED;

	if (!test_bit(RPCAUTH_CRED_NEW, &cred->cr_flags) &&
    3a9c:	2f 80 00 00 	cmpwi   cr7,r0,0
    3aa0:	40 9e 00 34 	bne-    cr7,3ad4 <gss_refresh+0x118>
			!test_bit(RPCAUTH_CRED_UPTODATE, &cred->cr_flags)) {
		ret = gss_renew_cred(task);
    3aa4:	80 61 00 68 	lwz     r3,104(r1)
    3aa8:	4b ff fc e9 	bl      3790 <gss_renew_cred>
    3aac:	90 61 00 0c 	stw     r3,12(r1)
		if (ret < 0)
    3ab0:	80 01 00 0c 	lwz     r0,12(r1)
    3ab4:	2f 80 00 00 	cmpwi   cr7,r0,0
    3ab8:	41 9c 03 3c 	blt-    cr7,3df4 <gss_refresh+0x438>
			goto out;
		cred = task->tk_rqstp->rq_cred;
    3abc:	80 01 00 68 	lwz     r0,104(r1)
    3ac0:	7c 09 03 78 	mr      r9,r0
    3ac4:	80 09 00 10 	lwz     r0,16(r9)
    3ac8:	7c 0b 03 78 	mr      r11,r0
    3acc:	80 0b 00 58 	lwz     r0,88(r11)
    3ad0:	90 01 00 08 	stw     r0,8(r1)
	}

	if (test_bit(RPCAUTH_CRED_NEW, &cred->cr_flags))
    3ad4:	80 01 00 08 	lwz     r0,8(r1)
    3ad8:	30 00 00 28 	addic   r0,r0,40
    3adc:	39 20 00 00 	li      r9,0
    3ae0:	91 21 00 20 	stw     r9,32(r1)
    3ae4:	90 01 00 24 	stw     r0,36(r1)
    3ae8:	80 01 00 20 	lwz     r0,32(r1)
    3aec:	7c 00 2e 70 	srawi   r0,r0,5
    3af0:	7c 00 01 94 	addze   r0,r0
    3af4:	54 00 10 3a 	rlwinm  r0,r0,2,0,29
    3af8:	81 21 00 24 	lwz     r9,36(r1)
    3afc:	7c 09 02 14 	add     r0,r9,r0
    3b00:	7c 0b 03 78 	mr      r11,r0
    3b04:	81 2b 00 00 	lwz     r9,0(r11)
    3b08:	80 01 00 20 	lwz     r0,32(r1)
    3b0c:	54 00 06 fe 	clrlwi  r0,r0,27
    3b10:	7d 20 04 30 	srw     r0,r9,r0
    3b14:	54 00 07 fe 	clrlwi  r0,r0,31
    3b18:	2f 80 00 00 	cmpwi   cr7,r0,0
    3b1c:	41 9e 02 dc 	beq-    cr7,3df8 <gss_refresh+0x43c>
    3b20:	80 01 00 68 	lwz     r0,104(r1)
    3b24:	90 01 00 28 	stw     r0,40(r1)
}

static inline int
gss_refresh_upcall(struct rpc_task *task)
{
	struct rpc_cred *cred = task->tk_rqstp->rq_cred;
    3b28:	80 01 00 28 	lwz     r0,40(r1)
    3b2c:	7c 09 03 78 	mr      r9,r0
    3b30:	80 09 00 10 	lwz     r0,16(r9)
    3b34:	7c 0b 03 78 	mr      r11,r0
    3b38:	80 0b 00 58 	lwz     r0,88(r11)
    3b3c:	90 01 00 2c 	stw     r0,44(r1)
	struct gss_auth *gss_auth = container_of(cred->cr_auth,
    3b40:	80 01 00 2c 	lwz     r0,44(r1)
    3b44:	7c 09 03 78 	mr      r9,r0
    3b48:	80 09 00 18 	lwz     r0,24(r9)
    3b4c:	90 01 00 30 	stw     r0,48(r1)
    3b50:	80 01 00 30 	lwz     r0,48(r1)
    3b54:	30 00 ff fc 	addic   r0,r0,-4
    3b58:	90 01 00 34 	stw     r0,52(r1)
			struct gss_auth, rpc_auth);
	struct gss_cred *gss_cred = container_of(cred,
    3b5c:	80 01 00 2c 	lwz     r0,44(r1)
    3b60:	90 01 00 38 	stw     r0,56(r1)
    3b64:	80 01 00 38 	lwz     r0,56(r1)
    3b68:	90 01 00 3c 	stw     r0,60(r1)
			struct gss_cred, gc_base);
	struct gss_upcall_msg *gss_msg;
	struct inode *inode;
	int err = 0;
    3b6c:	38 00 00 00 	li      r0,0
    3b70:	90 01 00 40 	stw     r0,64(r1)

	dprintk("RPC: %5u gss_refresh_upcall for uid %u\n", task->tk_pid,
    3b74:	3c 00 00 00 	lis     r0,0
    3b78:	7c 0b 03 78 	mr      r11,r0
    3b7c:	80 0b 00 00 	lwz     r0,0(r11)
    3b80:	54 00 06 f6 	rlwinm  r0,r0,0,27,27
    3b84:	2f 80 00 00 	cmpwi   cr7,r0,0
    3b88:	7c 00 00 26 	mfcr    r0
    3b8c:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
    3b90:	68 00 00 01 	xori    r0,r0,1
    3b94:	2f 80 00 00 	cmpwi   cr7,r0,0
    3b98:	41 9e 00 38 	beq-    cr7,3bd0 <gss_refresh+0x214>
    3b9c:	80 01 00 28 	lwz     r0,40(r1)
    3ba0:	7c 09 03 78 	mr      r9,r0
    3ba4:	a0 09 00 74 	lhz     r0,116(r9)
    3ba8:	54 00 04 3e 	clrlwi  r0,r0,16
    3bac:	7c 09 03 78 	mr      r9,r0
    3bb0:	80 01 00 2c 	lwz     r0,44(r1)
    3bb4:	7c 0b 03 78 	mr      r11,r0
    3bb8:	80 0b 00 30 	lwz     r0,48(r11)
    3bbc:	3d 60 00 00 	lis     r11,0
    3bc0:	38 6b 04 5c 	addi    r3,r11,1116
    3bc4:	7d 24 4b 78 	mr      r4,r9
    3bc8:	7c 05 03 78 	mr      r5,r0
    3bcc:	48 00 00 01 	bl      3bcc <gss_refresh+0x210>
								cred->cr_uid);
	gss_msg = gss_setup_upcall(task->tk_client, gss_auth, cred);
    3bd0:	80 01 00 28 	lwz     r0,40(r1)
    3bd4:	7c 09 03 78 	mr      r9,r0
    3bd8:	80 09 00 0c 	lwz     r0,12(r9)
    3bdc:	7c 03 03 78 	mr      r3,r0
    3be0:	80 81 00 34 	lwz     r4,52(r1)
    3be4:	80 a1 00 2c 	lwz     r5,44(r1)
    3be8:	4b ff d7 19 	bl      1300 <gss_setup_upcall>
    3bec:	90 61 00 44 	stw     r3,68(r1)
    3bf0:	80 01 00 44 	lwz     r0,68(r1)
    3bf4:	90 01 00 48 	stw     r0,72(r1)
    3bf8:	80 01 00 48 	lwz     r0,72(r1)
	if (PTR_ERR(gss_msg) == -EAGAIN) {
    3bfc:	7c 09 03 78 	mr      r9,r0
    3c00:	38 00 ff f5 	li      r0,-11
    3c04:	7f 89 00 00 	cmpw    cr7,r9,r0
    3c08:	40 9e 00 34 	bne-    cr7,3c3c <gss_refresh+0x280>
		/* XXX: warning on the first, under the assumption we
		 * shouldn't normally hit this case on a refresh. */
		warn_gssd();
    3c0c:	4b ff da 9d 	bl      16a8 <warn_gssd>
		task->tk_timeout = 15*HZ;
    3c10:	80 01 00 28 	lwz     r0,40(r1)
    3c14:	39 20 0e a6 	li      r9,3750
    3c18:	7c 0b 03 78 	mr      r11,r0
    3c1c:	91 2b 00 34 	stw     r9,52(r11)
		rpc_sleep_on(&pipe_version_rpc_waitqueue, task, NULL);
    3c20:	3c 00 00 00 	lis     r0,0
    3c24:	30 60 00 04 	addic   r3,r0,4
    3c28:	80 81 00 28 	lwz     r4,40(r1)
    3c2c:	38 a0 00 00 	li      r5,0
    3c30:	48 00 00 01 	bl      3c30 <gss_refresh+0x274>
		return 0;
    3c34:	38 00 00 00 	li      r0,0
    3c38:	48 00 01 b4 	b       3dec <gss_refresh+0x430>
    3c3c:	80 01 00 44 	lwz     r0,68(r1)
    3c40:	90 01 00 4c 	stw     r0,76(r1)
}

static inline long __must_check IS_ERR(const void *ptr)
{
	return IS_ERR_VALUE((unsigned long)ptr);
    3c44:	81 21 00 4c 	lwz     r9,76(r1)
    3c48:	38 00 f0 00 	li      r0,-4096
    3c4c:	7f 89 00 40 	cmplw   cr7,r9,r0
    3c50:	7c 00 00 26 	mfcr    r0
    3c54:	54 00 f7 fe 	rlwinm  r0,r0,30,31,31
	}
	if (IS_ERR(gss_msg)) {
    3c58:	2f 80 00 00 	cmpwi   cr7,r0,0
    3c5c:	41 9e 00 18 	beq-    cr7,3c74 <gss_refresh+0x2b8>
    3c60:	80 01 00 44 	lwz     r0,68(r1)
    3c64:	90 01 00 50 	stw     r0,80(r1)
	return (void *) error;
}

static inline long __must_check PTR_ERR(const void *ptr)
{
	return (long) ptr;
    3c68:	80 01 00 50 	lwz     r0,80(r1)
		err = PTR_ERR(gss_msg);
    3c6c:	90 01 00 40 	stw     r0,64(r1)
    3c70:	48 00 01 18 	b       3d88 <gss_refresh+0x3cc>
		goto out;
	}
	inode = &gss_msg->inode->vfs_inode;
    3c74:	80 01 00 44 	lwz     r0,68(r1)
    3c78:	7c 09 03 78 	mr      r9,r0
    3c7c:	80 09 00 2c 	lwz     r0,44(r9)
    3c80:	90 01 00 54 	stw     r0,84(r1)
	spin_lock(&inode->i_lock);
    3c84:	80 01 00 54 	lwz     r0,84(r1)
    3c88:	30 00 00 14 	addic   r0,r0,20
    3c8c:	90 01 00 58 	stw     r0,88(r1)
	if (gss_cred->gc_upcall != NULL)
    3c90:	80 01 00 3c 	lwz     r0,60(r1)
    3c94:	7c 0b 03 78 	mr      r11,r0
    3c98:	80 0b 00 3c 	lwz     r0,60(r11)
    3c9c:	2f 80 00 00 	cmpwi   cr7,r0,0
    3ca0:	41 9e 00 28 	beq-    cr7,3cc8 <gss_refresh+0x30c>
		rpc_sleep_on(&gss_cred->gc_upcall->rpc_waitqueue, task, NULL);
    3ca4:	80 01 00 3c 	lwz     r0,60(r1)
    3ca8:	7c 09 03 78 	mr      r9,r0
    3cac:	80 09 00 3c 	lwz     r0,60(r9)
    3cb0:	30 00 00 30 	addic   r0,r0,48
    3cb4:	7c 03 03 78 	mr      r3,r0
    3cb8:	80 81 00 28 	lwz     r4,40(r1)
    3cbc:	38 a0 00 00 	li      r5,0
    3cc0:	48 00 00 01 	bl      3cc0 <gss_refresh+0x304>
    3cc4:	48 00 00 b0 	b       3d74 <gss_refresh+0x3b8>
	else if (gss_msg->ctx == NULL && gss_msg->msg.errno >= 0) {
    3cc8:	80 01 00 44 	lwz     r0,68(r1)
    3ccc:	7c 0b 03 78 	mr      r11,r0
    3cd0:	80 0b 00 90 	lwz     r0,144(r11)
    3cd4:	2f 80 00 00 	cmpwi   cr7,r0,0
    3cd8:	40 9e 00 80 	bne-    cr7,3d58 <gss_refresh+0x39c>
    3cdc:	80 01 00 44 	lwz     r0,68(r1)
    3ce0:	7c 09 03 78 	mr      r9,r0
    3ce4:	80 09 00 1c 	lwz     r0,28(r9)
    3ce8:	2f 80 00 00 	cmpwi   cr7,r0,0
    3cec:	41 9c 00 6c 	blt-    cr7,3d58 <gss_refresh+0x39c>
		task->tk_timeout = 0;
    3cf0:	80 01 00 28 	lwz     r0,40(r1)
    3cf4:	39 20 00 00 	li      r9,0
    3cf8:	7c 0b 03 78 	mr      r11,r0
    3cfc:	91 2b 00 34 	stw     r9,52(r11)
		gss_cred->gc_upcall = gss_msg;
    3d00:	80 01 00 3c 	lwz     r0,60(r1)
    3d04:	81 21 00 44 	lwz     r9,68(r1)
    3d08:	7c 0b 03 78 	mr      r11,r0
    3d0c:	91 2b 00 3c 	stw     r9,60(r11)
		/* gss_upcall_callback will release the reference to gss_upcall_msg */
		atomic_inc(&gss_msg->count);
    3d10:	80 01 00 44 	lwz     r0,68(r1)
    3d14:	90 01 00 5c 	stw     r0,92(r1)
	addic	%0,%0,1\n"
	PPC405_ERR77(0,%2)
"	stwcx.	%0,0,%2 \n\
	bne-	1b"
	: "=&r" (t), "+m" (v->counter)
	: "r" (&v->counter)
    3d18:	80 01 00 5c 	lwz     r0,92(r1)
"1:	lwarx	%0,0,%2		# atomic_inc\n\
	addic	%0,%0,1\n"
	PPC405_ERR77(0,%2)
"	stwcx.	%0,0,%2 \n\
	bne-	1b"
	: "=&r" (t), "+m" (v->counter)
    3d1c:	81 61 00 5c 	lwz     r11,92(r1)
    3d20:	81 21 00 5c 	lwz     r9,92(r1)

static __inline__ void atomic_inc(atomic_t *v)
{
	int t;

	__asm__ __volatile__(
    3d24:	7f e0 00 28 	lwarx   r31,0,r0
    3d28:	33 ff 00 01 	addic   r31,r31,1
    3d2c:	7f e0 01 2d 	stwcx.  r31,0,r0
    3d30:	40 a2 ff f4 	bne-    3d24 <gss_refresh+0x368>
    3d34:	93 e1 00 60 	stw     r31,96(r1)
		rpc_sleep_on(&gss_msg->rpc_waitqueue, task, gss_upcall_callback);
    3d38:	80 01 00 44 	lwz     r0,68(r1)
    3d3c:	30 00 00 30 	addic   r0,r0,48
    3d40:	7c 03 03 78 	mr      r3,r0
    3d44:	80 81 00 28 	lwz     r4,40(r1)
    3d48:	3c 00 00 00 	lis     r0,0
    3d4c:	30 a0 0e c0 	addic   r5,r0,3776
    3d50:	48 00 00 01 	bl      3d50 <gss_refresh+0x394>
    3d54:	48 00 00 20 	b       3d74 <gss_refresh+0x3b8>
	} else {
		gss_handle_downcall_result(gss_cred, gss_msg);
    3d58:	80 61 00 3c 	lwz     r3,60(r1)
    3d5c:	80 81 00 44 	lwz     r4,68(r1)
    3d60:	4b ff cf 99 	bl      cf8 <gss_handle_downcall_result>
		err = gss_msg->msg.errno;
    3d64:	80 01 00 44 	lwz     r0,68(r1)
    3d68:	7c 09 03 78 	mr      r9,r0
    3d6c:	80 09 00 1c 	lwz     r0,28(r9)
    3d70:	90 01 00 40 	stw     r0,64(r1)
	}
	spin_unlock(&inode->i_lock);
    3d74:	80 01 00 54 	lwz     r0,84(r1)
    3d78:	30 00 00 14 	addic   r0,r0,20
    3d7c:	90 01 00 64 	stw     r0,100(r1)
	gss_release_msg(gss_msg);
    3d80:	80 61 00 44 	lwz     r3,68(r1)
    3d84:	4b ff cb 3d 	bl      8c0 <gss_release_msg>
out:
	dprintk("RPC: %5u gss_refresh_upcall for uid %u result %d\n",
    3d88:	3c 00 00 00 	lis     r0,0
    3d8c:	7c 0b 03 78 	mr      r11,r0
    3d90:	80 0b 00 00 	lwz     r0,0(r11)
    3d94:	54 00 06 f6 	rlwinm  r0,r0,0,27,27
    3d98:	2f 80 00 00 	cmpwi   cr7,r0,0
    3d9c:	7c 00 00 26 	mfcr    r0
    3da0:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
    3da4:	68 00 00 01 	xori    r0,r0,1
    3da8:	2f 80 00 00 	cmpwi   cr7,r0,0
    3dac:	41 9e 00 3c 	beq-    cr7,3de8 <gss_refresh+0x42c>
    3db0:	80 01 00 28 	lwz     r0,40(r1)
    3db4:	7c 09 03 78 	mr      r9,r0
    3db8:	a0 09 00 74 	lhz     r0,116(r9)
    3dbc:	54 00 04 3e 	clrlwi  r0,r0,16
    3dc0:	7c 09 03 78 	mr      r9,r0
    3dc4:	80 01 00 2c 	lwz     r0,44(r1)
    3dc8:	7c 0b 03 78 	mr      r11,r0
    3dcc:	80 0b 00 30 	lwz     r0,48(r11)
    3dd0:	3d 60 00 00 	lis     r11,0
    3dd4:	38 6b 04 84 	addi    r3,r11,1156
    3dd8:	7d 24 4b 78 	mr      r4,r9
    3ddc:	7c 05 03 78 	mr      r5,r0
    3de0:	80 c1 00 40 	lwz     r6,64(r1)
    3de4:	48 00 00 01 	bl      3de4 <gss_refresh+0x428>
			task->tk_pid, cred->cr_uid, err);
	return err;
    3de8:	80 01 00 40 	lwz     r0,64(r1)
			goto out;
		cred = task->tk_rqstp->rq_cred;
	}

	if (test_bit(RPCAUTH_CRED_NEW, &cred->cr_flags))
		ret = gss_refresh_upcall(task);
    3dec:	90 01 00 0c 	stw     r0,12(r1)
    3df0:	48 00 00 08 	b       3df8 <gss_refresh+0x43c>

	if (!test_bit(RPCAUTH_CRED_NEW, &cred->cr_flags) &&
			!test_bit(RPCAUTH_CRED_UPTODATE, &cred->cr_flags)) {
		ret = gss_renew_cred(task);
		if (ret < 0)
			goto out;
    3df4:	60 00 00 00 	nop
	}

	if (test_bit(RPCAUTH_CRED_NEW, &cred->cr_flags))
		ret = gss_refresh_upcall(task);
out:
	return ret;
    3df8:	80 01 00 0c 	lwz     r0,12(r1)
}
    3dfc:	7c 03 03 78 	mr      r3,r0
    3e00:	80 01 00 84 	lwz     r0,132(r1)
    3e04:	7c 08 03 a6 	mtlr    r0
    3e08:	83 e1 00 7c 	lwz     r31,124(r1)
    3e0c:	38 21 00 80 	addi    r1,r1,128
    3e10:	4e 80 00 20 	blr

00003e14 <gss_refresh_null>:

/* Dummy refresh routine: used only when destroying the context */
static int
gss_refresh_null(struct rpc_task *task)
{
    3e14:	94 21 ff f0 	stwu    r1,-16(r1)
    3e18:	90 61 00 08 	stw     r3,8(r1)
	return -EACCES;
    3e1c:	38 00 ff f3 	li      r0,-13
}
    3e20:	7c 03 03 78 	mr      r3,r0
    3e24:	38 21 00 10 	addi    r1,r1,16
    3e28:	4e 80 00 20 	blr

00003e2c <gss_validate>:

static __be32 *
gss_validate(struct rpc_task *task, __be32 *p)
{
    3e2c:	94 21 ff 60 	stwu    r1,-160(r1)
    3e30:	7c 08 02 a6 	mflr    r0
    3e34:	90 01 00 a4 	stw     r0,164(r1)
    3e38:	93 e1 00 9c 	stw     r31,156(r1)
    3e3c:	90 61 00 88 	stw     r3,136(r1)
    3e40:	90 81 00 8c 	stw     r4,140(r1)
	struct rpc_cred *cred = task->tk_rqstp->rq_cred;
    3e44:	80 01 00 88 	lwz     r0,136(r1)
    3e48:	7c 09 03 78 	mr      r9,r0
    3e4c:	80 09 00 10 	lwz     r0,16(r9)
    3e50:	7c 0b 03 78 	mr      r11,r0
    3e54:	80 0b 00 58 	lwz     r0,88(r11)
    3e58:	90 01 00 08 	stw     r0,8(r1)
	struct gss_cl_ctx *ctx = gss_cred_get_ctx(cred);
    3e5c:	80 61 00 08 	lwz     r3,8(r1)
    3e60:	4b ff c4 09 	bl      268 <gss_cred_get_ctx>
    3e64:	90 61 00 0c 	stw     r3,12(r1)
	struct xdr_buf	verf_buf;
	struct xdr_netobj mic;
	u32		flav,len;
	u32		maj_stat;

	dprintk("RPC: %5u gss_validate\n", task->tk_pid);
    3e68:	3c 00 00 00 	lis     r0,0
    3e6c:	7c 09 03 78 	mr      r9,r0
    3e70:	80 09 00 00 	lwz     r0,0(r9)
    3e74:	54 00 06 f6 	rlwinm  r0,r0,0,27,27
    3e78:	2f 80 00 00 	cmpwi   cr7,r0,0
    3e7c:	7c 00 00 26 	mfcr    r0
    3e80:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
    3e84:	68 00 00 01 	xori    r0,r0,1
    3e88:	2f 80 00 00 	cmpwi   cr7,r0,0
    3e8c:	41 9e 00 24 	beq-    cr7,3eb0 <gss_validate+0x84>
    3e90:	80 01 00 88 	lwz     r0,136(r1)
    3e94:	7c 0b 03 78 	mr      r11,r0
    3e98:	a0 0b 00 74 	lhz     r0,116(r11)
    3e9c:	54 00 04 3e 	clrlwi  r0,r0,16
    3ea0:	3d 20 00 00 	lis     r9,0
    3ea4:	38 69 04 b8 	addi    r3,r9,1208
    3ea8:	7c 04 03 78 	mr      r4,r0
    3eac:	48 00 00 01 	bl      3eac <gss_validate+0x80>

	flav = ntohl(*p++);
    3eb0:	80 01 00 8c 	lwz     r0,140(r1)
    3eb4:	7c 09 03 78 	mr      r9,r0
    3eb8:	80 09 00 00 	lwz     r0,0(r9)
    3ebc:	90 01 00 10 	stw     r0,16(r1)
    3ec0:	80 01 00 8c 	lwz     r0,140(r1)
    3ec4:	30 00 00 04 	addic   r0,r0,4
    3ec8:	90 01 00 8c 	stw     r0,140(r1)
	if ((len = ntohl(*p++)) > RPC_MAX_AUTH_SIZE)
    3ecc:	80 01 00 8c 	lwz     r0,140(r1)
    3ed0:	7c 0b 03 78 	mr      r11,r0
    3ed4:	80 0b 00 00 	lwz     r0,0(r11)
    3ed8:	90 01 00 14 	stw     r0,20(r1)
    3edc:	80 01 00 14 	lwz     r0,20(r1)
    3ee0:	2b 80 01 90 	cmplwi  cr7,r0,400
    3ee4:	7c 00 00 26 	mfcr    r0
    3ee8:	54 00 f7 fe 	rlwinm  r0,r0,30,31,31
    3eec:	54 00 06 3e 	clrlwi  r0,r0,24
    3ef0:	81 21 00 8c 	lwz     r9,140(r1)
    3ef4:	39 29 00 04 	addi    r9,r9,4
    3ef8:	91 21 00 8c 	stw     r9,140(r1)
    3efc:	2f 80 00 00 	cmpwi   cr7,r0,0
    3f00:	40 9e 02 30 	bne-    cr7,4130 <gss_validate+0x304>
		goto out_bad;
	if (flav != RPC_AUTH_GSS)
    3f04:	80 01 00 10 	lwz     r0,16(r1)
    3f08:	2f 80 00 06 	cmpwi   cr7,r0,6
    3f0c:	40 9e 02 2c 	bne-    cr7,4138 <gss_validate+0x30c>
		goto out_bad;
	seq = htonl(task->tk_rqstp->rq_seqno);
    3f10:	80 01 00 88 	lwz     r0,136(r1)
    3f14:	7c 09 03 78 	mr      r9,r0
    3f18:	80 09 00 10 	lwz     r0,16(r9)
    3f1c:	7c 0b 03 78 	mr      r11,r0
    3f20:	80 0b 00 64 	lwz     r0,100(r11)
    3f24:	90 01 00 4c 	stw     r0,76(r1)
	iov.iov_base = &seq;
    3f28:	38 01 00 4c 	addi    r0,r1,76
    3f2c:	90 01 00 50 	stw     r0,80(r1)
	iov.iov_len = sizeof(seq);
    3f30:	38 00 00 04 	li      r0,4
    3f34:	90 01 00 54 	stw     r0,84(r1)
	xdr_buf_from_iov(&iov, &verf_buf);
    3f38:	39 21 00 50 	addi    r9,r1,80
    3f3c:	38 01 00 58 	addi    r0,r1,88
    3f40:	7d 23 4b 78 	mr      r3,r9
    3f44:	7c 04 03 78 	mr      r4,r0
    3f48:	48 00 00 01 	bl      3f48 <gss_validate+0x11c>
	mic.data = (u8 *)p;
    3f4c:	80 01 00 8c 	lwz     r0,140(r1)
    3f50:	90 01 00 84 	stw     r0,132(r1)
	mic.len = len;
    3f54:	80 01 00 14 	lwz     r0,20(r1)
    3f58:	90 01 00 80 	stw     r0,128(r1)

	maj_stat = gss_verify_mic(ctx->gc_gss_ctx, &verf_buf, &mic);
    3f5c:	80 01 00 0c 	lwz     r0,12(r1)
    3f60:	7c 09 03 78 	mr      r9,r0
    3f64:	81 69 00 0c 	lwz     r11,12(r9)
    3f68:	39 21 00 58 	addi    r9,r1,88
    3f6c:	38 01 00 80 	addi    r0,r1,128
    3f70:	7d 63 5b 78 	mr      r3,r11
    3f74:	7d 24 4b 78 	mr      r4,r9
    3f78:	7c 05 03 78 	mr      r5,r0
    3f7c:	48 00 00 01 	bl      3f7c <gss_validate+0x150>
    3f80:	90 61 00 18 	stw     r3,24(r1)
	if (maj_stat == GSS_S_CONTEXT_EXPIRED)
    3f84:	81 21 00 18 	lwz     r9,24(r1)
    3f88:	3c 00 00 0c 	lis     r0,12
    3f8c:	7f 89 00 00 	cmpw    cr7,r9,r0
    3f90:	40 9e 00 80 	bne-    cr7,4010 <gss_validate+0x1e4>
		clear_bit(RPCAUTH_CRED_UPTODATE, &cred->cr_flags);
    3f94:	80 01 00 08 	lwz     r0,8(r1)
    3f98:	30 00 00 28 	addic   r0,r0,40
    3f9c:	39 20 00 01 	li      r9,1
    3fa0:	91 21 00 1c 	stw     r9,28(r1)
    3fa4:	90 01 00 20 	stw     r0,32(r1)
	set_bits(BITOP_MASK(nr), addr + BITOP_WORD(nr));
}

static __inline__ void clear_bit(int nr, volatile unsigned long *addr)
{
	clear_bits(BITOP_MASK(nr), addr + BITOP_WORD(nr));
    3fa8:	80 01 00 1c 	lwz     r0,28(r1)
    3fac:	7c 09 2e 70 	srawi   r9,r0,5
    3fb0:	7d 29 01 94 	addze   r9,r9
    3fb4:	55 29 28 34 	rlwinm  r9,r9,5,0,26
    3fb8:	7c 09 00 50 	subf    r0,r9,r0
    3fbc:	39 20 00 01 	li      r9,1
    3fc0:	7d 29 00 30 	slw     r9,r9,r0
    3fc4:	80 01 00 1c 	lwz     r0,28(r1)
    3fc8:	7c 00 2e 70 	srawi   r0,r0,5
    3fcc:	7c 00 01 94 	addze   r0,r0
    3fd0:	54 00 10 3a 	rlwinm  r0,r0,2,0,29
    3fd4:	81 61 00 20 	lwz     r11,32(r1)
    3fd8:	7c 0b 02 14 	add     r0,r11,r0
    3fdc:	91 21 00 24 	stw     r9,36(r1)
    3fe0:	90 01 00 28 	stw     r0,40(r1)
	: "r" (mask), "r" (p)			\
	: "cc", "memory");			\
}

DEFINE_BITOP(set_bits, or, "", "")
DEFINE_BITOP(clear_bits, andc, "", "")
    3fe4:	80 01 00 28 	lwz     r0,40(r1)
    3fe8:	90 01 00 2c 	stw     r0,44(r1)
    3fec:	81 41 00 2c 	lwz     r10,44(r1)
    3ff0:	80 01 00 24 	lwz     r0,36(r1)
    3ff4:	81 21 00 2c 	lwz     r9,44(r1)
    3ff8:	81 61 00 2c 	lwz     r11,44(r1)
    3ffc:	7f e0 48 28 	lwarx   r31,0,r9
    4000:	7f ff 00 78 	andc    r31,r31,r0
    4004:	7f e0 49 2d 	stwcx.  r31,0,r9
    4008:	40 a2 ff f4 	bne-    3ffc <gss_validate+0x1d0>
    400c:	93 e1 00 30 	stw     r31,48(r1)
	if (maj_stat) {
    4010:	80 01 00 18 	lwz     r0,24(r1)
    4014:	2f 80 00 00 	cmpwi   cr7,r0,0
    4018:	41 9e 00 54 	beq-    cr7,406c <gss_validate+0x240>
		dprintk("RPC: %5u gss_validate: gss_verify_mic returned "
    401c:	3c 00 00 00 	lis     r0,0
    4020:	7c 0b 03 78 	mr      r11,r0
    4024:	80 0b 00 00 	lwz     r0,0(r11)
    4028:	54 00 06 f6 	rlwinm  r0,r0,0,27,27
    402c:	2f 80 00 00 	cmpwi   cr7,r0,0
    4030:	7c 00 00 26 	mfcr    r0
    4034:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
    4038:	68 00 00 01 	xori    r0,r0,1
    403c:	2f 80 00 00 	cmpwi   cr7,r0,0
    4040:	41 9e 01 00 	beq-    cr7,4140 <gss_validate+0x314>
    4044:	80 01 00 88 	lwz     r0,136(r1)
    4048:	7c 09 03 78 	mr      r9,r0
    404c:	a0 09 00 74 	lhz     r0,116(r9)
    4050:	54 00 04 3e 	clrlwi  r0,r0,16
    4054:	3d 20 00 00 	lis     r9,0
    4058:	38 69 04 d0 	addi    r3,r9,1232
    405c:	7c 04 03 78 	mr      r4,r0
    4060:	80 a1 00 18 	lwz     r5,24(r1)
    4064:	48 00 00 01 	bl      4064 <gss_validate+0x238>
				"error 0x%08x\n", task->tk_pid, maj_stat);
		goto out_bad;
    4068:	48 00 00 d8 	b       4140 <gss_validate+0x314>
	}
	/* We leave it to unwrap to calculate au_rslack. For now we just
	 * calculate the length of the verifier: */
	cred->cr_auth->au_verfsize = XDR_QUADLEN(len) + 2;
    406c:	80 01 00 08 	lwz     r0,8(r1)
    4070:	7c 0b 03 78 	mr      r11,r0
    4074:	80 0b 00 18 	lwz     r0,24(r11)
    4078:	81 21 00 14 	lwz     r9,20(r1)
    407c:	39 29 00 03 	addi    r9,r9,3
    4080:	55 29 f0 be 	rlwinm  r9,r9,30,2,31
    4084:	39 29 00 02 	addi    r9,r9,2
    4088:	7c 0b 03 78 	mr      r11,r0
    408c:	91 2b 00 08 	stw     r9,8(r11)
    4090:	80 01 00 0c 	lwz     r0,12(r1)
    4094:	90 01 00 34 	stw     r0,52(r1)
}

static inline void
gss_put_ctx(struct gss_cl_ctx *ctx)
{
	if (atomic_dec_and_test(&ctx->count))
    4098:	80 01 00 34 	lwz     r0,52(r1)
    409c:	90 01 00 38 	stw     r0,56(r1)
	PPC405_ERR77(0,%1)
"	stwcx.	%0,0,%1\n\
	bne-	1b"
	PPC_ACQUIRE_BARRIER
	: "=&r" (t)
	: "r" (&v->counter)
    40a0:	80 01 00 38 	lwz     r0,56(r1)

static __inline__ int atomic_dec_return(atomic_t *v)
{
	int t;

	__asm__ __volatile__(
    40a4:	7f e0 00 28 	lwarx   r31,0,r0
    40a8:	33 ff ff ff 	addic   r31,r31,-1
    40ac:	7f e0 01 2d 	stwcx.  r31,0,r0
    40b0:	40 a2 ff f4 	bne-    40a4 <gss_validate+0x278>
    40b4:	93 e1 00 3c 	stw     r31,60(r1)
	PPC_ACQUIRE_BARRIER
	: "=&r" (t)
	: "r" (&v->counter)
	: "cc", "xer", "memory");

	return t;
    40b8:	80 01 00 3c 	lwz     r0,60(r1)
    40bc:	2f 80 00 00 	cmpwi   cr7,r0,0
    40c0:	40 9e 00 0c 	bne-    cr7,40cc <gss_validate+0x2a0>
		gss_free_ctx(ctx);
    40c4:	80 61 00 34 	lwz     r3,52(r1)
    40c8:	4b ff e8 85 	bl      294c <gss_free_ctx>
	}
	/* We leave it to unwrap to calculate au_rslack. For now we just
	 * calculate the length of the verifier: */
	cred->cr_auth->au_verfsize = XDR_QUADLEN(len) + 2;
	gss_put_ctx(ctx);
	dprintk("RPC: %5u gss_validate: gss_verify_mic succeeded.\n",
    40cc:	3c 00 00 00 	lis     r0,0
    40d0:	7c 09 03 78 	mr      r9,r0
    40d4:	80 09 00 00 	lwz     r0,0(r9)
    40d8:	54 00 06 f6 	rlwinm  r0,r0,0,27,27
    40dc:	2f 80 00 00 	cmpwi   cr7,r0,0
    40e0:	7c 00 00 26 	mfcr    r0
    40e4:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
    40e8:	68 00 00 01 	xori    r0,r0,1
    40ec:	2f 80 00 00 	cmpwi   cr7,r0,0
    40f0:	41 9e 00 24 	beq-    cr7,4114 <gss_validate+0x2e8>
    40f4:	80 01 00 88 	lwz     r0,136(r1)
    40f8:	7c 0b 03 78 	mr      r11,r0
    40fc:	a0 0b 00 74 	lhz     r0,116(r11)
    4100:	54 00 04 3e 	clrlwi  r0,r0,16
    4104:	3d 20 00 00 	lis     r9,0
    4108:	38 69 05 10 	addi    r3,r9,1296
    410c:	7c 04 03 78 	mr      r4,r0
    4110:	48 00 00 01 	bl      4110 <gss_validate+0x2e4>
			task->tk_pid);
	return p + XDR_QUADLEN(len);
    4114:	80 01 00 14 	lwz     r0,20(r1)
    4118:	30 00 00 03 	addic   r0,r0,3
    411c:	54 00 f0 be 	rlwinm  r0,r0,30,2,31
    4120:	54 00 10 3a 	rlwinm  r0,r0,2,0,29
    4124:	81 21 00 8c 	lwz     r9,140(r1)
    4128:	7c 09 02 14 	add     r0,r9,r0
    412c:	48 00 00 a0 	b       41cc <gss_validate+0x3a0>

	dprintk("RPC: %5u gss_validate\n", task->tk_pid);

	flav = ntohl(*p++);
	if ((len = ntohl(*p++)) > RPC_MAX_AUTH_SIZE)
		goto out_bad;
    4130:	60 00 00 00 	nop
    4134:	48 00 00 10 	b       4144 <gss_validate+0x318>
	if (flav != RPC_AUTH_GSS)
		goto out_bad;
    4138:	60 00 00 00 	nop
    413c:	48 00 00 08 	b       4144 <gss_validate+0x318>
	if (maj_stat == GSS_S_CONTEXT_EXPIRED)
		clear_bit(RPCAUTH_CRED_UPTODATE, &cred->cr_flags);
	if (maj_stat) {
		dprintk("RPC: %5u gss_validate: gss_verify_mic returned "
				"error 0x%08x\n", task->tk_pid, maj_stat);
		goto out_bad;
    4140:	60 00 00 00 	nop
	 * calculate the length of the verifier: */
	cred->cr_auth->au_verfsize = XDR_QUADLEN(len) + 2;
	gss_put_ctx(ctx);
	dprintk("RPC: %5u gss_validate: gss_verify_mic succeeded.\n",
			task->tk_pid);
	return p + XDR_QUADLEN(len);
    4144:	80 01 00 0c 	lwz     r0,12(r1)
    4148:	90 01 00 40 	stw     r0,64(r1)
}

static inline void
gss_put_ctx(struct gss_cl_ctx *ctx)
{
	if (atomic_dec_and_test(&ctx->count))
    414c:	80 01 00 40 	lwz     r0,64(r1)
    4150:	90 01 00 44 	stw     r0,68(r1)
	PPC405_ERR77(0,%1)
"	stwcx.	%0,0,%1\n\
	bne-	1b"
	PPC_ACQUIRE_BARRIER
	: "=&r" (t)
	: "r" (&v->counter)
    4154:	80 01 00 44 	lwz     r0,68(r1)

static __inline__ int atomic_dec_return(atomic_t *v)
{
	int t;

	__asm__ __volatile__(
    4158:	7f e0 00 28 	lwarx   r31,0,r0
    415c:	33 ff ff ff 	addic   r31,r31,-1
    4160:	7f e0 01 2d 	stwcx.  r31,0,r0
    4164:	40 a2 ff f4 	bne-    4158 <gss_validate+0x32c>
    4168:	93 e1 00 48 	stw     r31,72(r1)
	PPC_ACQUIRE_BARRIER
	: "=&r" (t)
	: "r" (&v->counter)
	: "cc", "xer", "memory");

	return t;
    416c:	80 01 00 48 	lwz     r0,72(r1)
    4170:	2f 80 00 00 	cmpwi   cr7,r0,0
    4174:	40 9e 00 0c 	bne-    cr7,4180 <gss_validate+0x354>
		gss_free_ctx(ctx);
    4178:	80 61 00 40 	lwz     r3,64(r1)
    417c:	4b ff e7 d1 	bl      294c <gss_free_ctx>
	dprintk("RPC: %5u gss_validate: gss_verify_mic succeeded.\n",
			task->tk_pid);
	return p + XDR_QUADLEN(len);
out_bad:
	gss_put_ctx(ctx);
	dprintk("RPC: %5u gss_validate failed.\n", task->tk_pid);
    4180:	3c 00 00 00 	lis     r0,0
    4184:	7c 09 03 78 	mr      r9,r0
    4188:	80 09 00 00 	lwz     r0,0(r9)
    418c:	54 00 06 f6 	rlwinm  r0,r0,0,27,27
    4190:	2f 80 00 00 	cmpwi   cr7,r0,0
    4194:	7c 00 00 26 	mfcr    r0
    4198:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
    419c:	68 00 00 01 	xori    r0,r0,1
    41a0:	2f 80 00 00 	cmpwi   cr7,r0,0
    41a4:	41 9e 00 24 	beq-    cr7,41c8 <gss_validate+0x39c>
    41a8:	80 01 00 88 	lwz     r0,136(r1)
    41ac:	7c 0b 03 78 	mr      r11,r0
    41b0:	a0 0b 00 74 	lhz     r0,116(r11)
    41b4:	54 00 04 3e 	clrlwi  r0,r0,16
    41b8:	3d 20 00 00 	lis     r9,0
    41bc:	38 69 05 44 	addi    r3,r9,1348
    41c0:	7c 04 03 78 	mr      r4,r0
    41c4:	48 00 00 01 	bl      41c4 <gss_validate+0x398>
	return NULL;
    41c8:	38 00 00 00 	li      r0,0
}
    41cc:	7c 03 03 78 	mr      r3,r0
    41d0:	80 01 00 a4 	lwz     r0,164(r1)
    41d4:	7c 08 03 a6 	mtlr    r0
    41d8:	83 e1 00 9c 	lwz     r31,156(r1)
    41dc:	38 21 00 a0 	addi    r1,r1,160
    41e0:	4e 80 00 20 	blr

000041e4 <gss_wrap_req_encode>:

static void gss_wrap_req_encode(kxdreproc_t encode, struct rpc_rqst *rqstp,
				__be32 *p, void *obj)
{
    41e4:	94 21 ff c0 	stwu    r1,-64(r1)
    41e8:	7c 08 02 a6 	mflr    r0
    41ec:	90 01 00 44 	stw     r0,68(r1)
    41f0:	90 61 00 28 	stw     r3,40(r1)
    41f4:	90 81 00 2c 	stw     r4,44(r1)
    41f8:	90 a1 00 30 	stw     r5,48(r1)
    41fc:	90 c1 00 34 	stw     r6,52(r1)
	struct xdr_stream xdr;

	xdr_init_encode(&xdr, &rqstp->rq_snd_buf, p);
    4200:	80 01 00 2c 	lwz     r0,44(r1)
    4204:	30 00 00 04 	addic   r0,r0,4
    4208:	39 21 00 08 	addi    r9,r1,8
    420c:	7d 23 4b 78 	mr      r3,r9
    4210:	7c 04 03 78 	mr      r4,r0
    4214:	80 a1 00 30 	lwz     r5,48(r1)
    4218:	48 00 00 01 	bl      4218 <gss_wrap_req_encode+0x34>
	encode(rqstp, &xdr, obj);
    421c:	80 01 00 28 	lwz     r0,40(r1)
    4220:	80 61 00 2c 	lwz     r3,44(r1)
    4224:	39 21 00 08 	addi    r9,r1,8
    4228:	7d 24 4b 78 	mr      r4,r9
    422c:	80 a1 00 34 	lwz     r5,52(r1)
    4230:	7c 09 03 a6 	mtctr   r0
    4234:	4e 80 04 21 	bctrl
}
    4238:	80 01 00 44 	lwz     r0,68(r1)
    423c:	7c 08 03 a6 	mtlr    r0
    4240:	38 21 00 40 	addi    r1,r1,64
    4244:	4e 80 00 20 	blr

00004248 <priv_release_snd_buf>:
	return 0;
}

static void
priv_release_snd_buf(struct rpc_rqst *rqstp)
{
    4248:	94 21 ff e0 	stwu    r1,-32(r1)
    424c:	7c 08 02 a6 	mflr    r0
    4250:	90 01 00 24 	stw     r0,36(r1)
    4254:	90 61 00 18 	stw     r3,24(r1)
	int i;

	for (i=0; i < rqstp->rq_enc_pages_num; i++)
    4258:	38 00 00 00 	li      r0,0
    425c:	90 01 00 08 	stw     r0,8(r1)
    4260:	48 00 00 3c 	b       429c <priv_release_snd_buf+0x54>
		__free_page(rqstp->rq_enc_pages[i]);
    4264:	80 01 00 18 	lwz     r0,24(r1)
    4268:	7c 0b 03 78 	mr      r11,r0
    426c:	81 2b 00 6c 	lwz     r9,108(r11)
    4270:	80 01 00 08 	lwz     r0,8(r1)
    4274:	54 00 10 3a 	rlwinm  r0,r0,2,0,29
    4278:	7c 09 02 14 	add     r0,r9,r0
    427c:	7c 09 03 78 	mr      r9,r0
    4280:	80 09 00 00 	lwz     r0,0(r9)
    4284:	7c 03 03 78 	mr      r3,r0
    4288:	38 80 00 00 	li      r4,0
    428c:	48 00 00 01 	bl      428c <priv_release_snd_buf+0x44>
static void
priv_release_snd_buf(struct rpc_rqst *rqstp)
{
	int i;

	for (i=0; i < rqstp->rq_enc_pages_num; i++)
    4290:	80 01 00 08 	lwz     r0,8(r1)
    4294:	30 00 00 01 	addic   r0,r0,1
    4298:	90 01 00 08 	stw     r0,8(r1)
    429c:	80 01 00 18 	lwz     r0,24(r1)
    42a0:	7c 0b 03 78 	mr      r11,r0
    42a4:	81 2b 00 68 	lwz     r9,104(r11)
    42a8:	80 01 00 08 	lwz     r0,8(r1)
    42ac:	7f 89 00 00 	cmpw    cr7,r9,r0
    42b0:	41 9d ff b4 	bgt+    cr7,4264 <priv_release_snd_buf+0x1c>
		__free_page(rqstp->rq_enc_pages[i]);
	kfree(rqstp->rq_enc_pages);
    42b4:	80 01 00 18 	lwz     r0,24(r1)
    42b8:	7c 09 03 78 	mr      r9,r0
    42bc:	80 09 00 6c 	lwz     r0,108(r9)
    42c0:	7c 03 03 78 	mr      r3,r0
    42c4:	48 00 00 01 	bl      42c4 <priv_release_snd_buf+0x7c>
}
    42c8:	80 01 00 24 	lwz     r0,36(r1)
    42cc:	7c 08 03 a6 	mtlr    r0
    42d0:	38 21 00 20 	addi    r1,r1,32
    42d4:	4e 80 00 20 	blr

000042d8 <alloc_enc_pages>:

static int
alloc_enc_pages(struct rpc_rqst *rqstp)
{
    42d8:	94 21 ff a0 	stwu    r1,-96(r1)
    42dc:	7c 08 02 a6 	mflr    r0
    42e0:	90 01 00 64 	stw     r0,100(r1)
    42e4:	93 e1 00 5c 	stw     r31,92(r1)
    42e8:	90 61 00 48 	stw     r3,72(r1)
	struct xdr_buf *snd_buf = &rqstp->rq_snd_buf;
    42ec:	80 01 00 48 	lwz     r0,72(r1)
    42f0:	30 00 00 04 	addic   r0,r0,4
    42f4:	90 01 00 0c 	stw     r0,12(r1)
	int first, last, i;

	if (snd_buf->page_len == 0) {
    42f8:	80 01 00 0c 	lwz     r0,12(r1)
    42fc:	7c 09 03 78 	mr      r9,r0
    4300:	80 09 00 18 	lwz     r0,24(r9)
    4304:	2f 80 00 00 	cmpwi   cr7,r0,0
    4308:	40 9e 00 1c 	bne-    cr7,4324 <alloc_enc_pages+0x4c>
		rqstp->rq_enc_pages_num = 0;
    430c:	80 01 00 48 	lwz     r0,72(r1)
    4310:	39 20 00 00 	li      r9,0
    4314:	7c 0b 03 78 	mr      r11,r0
    4318:	91 2b 00 68 	stw     r9,104(r11)
		return 0;
    431c:	38 00 00 00 	li      r0,0
    4320:	48 00 01 ec 	b       450c <alloc_enc_pages+0x234>
	}

	first = snd_buf->page_base >> PAGE_CACHE_SHIFT;
    4324:	80 01 00 0c 	lwz     r0,12(r1)
    4328:	7c 09 03 78 	mr      r9,r0
    432c:	80 09 00 14 	lwz     r0,20(r9)
    4330:	54 00 a3 3e 	rlwinm  r0,r0,20,12,31
    4334:	90 01 00 10 	stw     r0,16(r1)
	last = (snd_buf->page_base + snd_buf->page_len - 1) >> PAGE_CACHE_SHIFT;
    4338:	80 01 00 0c 	lwz     r0,12(r1)
    433c:	7c 0b 03 78 	mr      r11,r0
    4340:	81 2b 00 14 	lwz     r9,20(r11)
    4344:	80 01 00 0c 	lwz     r0,12(r1)
    4348:	7c 0b 03 78 	mr      r11,r0
    434c:	80 0b 00 18 	lwz     r0,24(r11)
    4350:	7c 09 02 14 	add     r0,r9,r0
    4354:	30 00 ff ff 	addic   r0,r0,-1
    4358:	54 00 a3 3e 	rlwinm  r0,r0,20,12,31
    435c:	90 01 00 14 	stw     r0,20(r1)
	rqstp->rq_enc_pages_num = last - first + 1 + 1;
    4360:	81 21 00 14 	lwz     r9,20(r1)
    4364:	80 01 00 10 	lwz     r0,16(r1)
    4368:	7c 00 48 50 	subf    r0,r0,r9
    436c:	31 20 00 02 	addic   r9,r0,2
    4370:	80 01 00 48 	lwz     r0,72(r1)
    4374:	7c 0b 03 78 	mr      r11,r0
    4378:	91 2b 00 68 	stw     r9,104(r11)
	rqstp->rq_enc_pages
		= kmalloc(rqstp->rq_enc_pages_num * sizeof(struct page *),
    437c:	80 01 00 48 	lwz     r0,72(r1)
    4380:	7c 09 03 78 	mr      r9,r0
    4384:	80 09 00 68 	lwz     r0,104(r9)
    4388:	54 00 10 3a 	rlwinm  r0,r0,2,0,29
    438c:	90 01 00 18 	stw     r0,24(r1)
    4390:	38 00 00 50 	li      r0,80
    4394:	90 01 00 1c 	stw     r0,28(r1)
    4398:	80 61 00 18 	lwz     r3,24(r1)
    439c:	80 81 00 1c 	lwz     r4,28(r1)
    43a0:	48 00 00 01 	bl      43a0 <alloc_enc_pages+0xc8>
    43a4:	7c 60 1b 78 	mr      r0,r3
    43a8:	7c 09 03 78 	mr      r9,r0
	}

	first = snd_buf->page_base >> PAGE_CACHE_SHIFT;
	last = (snd_buf->page_base + snd_buf->page_len - 1) >> PAGE_CACHE_SHIFT;
	rqstp->rq_enc_pages_num = last - first + 1 + 1;
	rqstp->rq_enc_pages
    43ac:	80 01 00 48 	lwz     r0,72(r1)
		= kmalloc(rqstp->rq_enc_pages_num * sizeof(struct page *),
    43b0:	7c 0b 03 78 	mr      r11,r0
    43b4:	91 2b 00 6c 	stw     r9,108(r11)
				GFP_NOFS);
	if (!rqstp->rq_enc_pages)
    43b8:	80 01 00 48 	lwz     r0,72(r1)
    43bc:	7c 09 03 78 	mr      r9,r0
    43c0:	80 09 00 6c 	lwz     r0,108(r9)
    43c4:	2f 80 00 00 	cmpwi   cr7,r0,0
    43c8:	41 9e 01 3c 	beq-    cr7,4504 <alloc_enc_pages+0x22c>
		goto out;
	for (i=0; i < rqstp->rq_enc_pages_num; i++) {
    43cc:	38 00 00 00 	li      r0,0
    43d0:	90 01 00 08 	stw     r0,8(r1)
    43d4:	48 00 00 dc 	b       44b0 <alloc_enc_pages+0x1d8>
		rqstp->rq_enc_pages[i] = alloc_page(GFP_NOFS);
    43d8:	80 01 00 48 	lwz     r0,72(r1)
    43dc:	7c 0b 03 78 	mr      r11,r0
    43e0:	81 2b 00 6c 	lwz     r9,108(r11)
    43e4:	80 01 00 08 	lwz     r0,8(r1)
    43e8:	54 00 10 3a 	rlwinm  r0,r0,2,0,29
    43ec:	7f e9 02 14 	add     r31,r9,r0

/* Returns the number of the current Node. */
#ifndef numa_node_id
static inline int numa_node_id(void)
{
	return cpu_to_node(raw_smp_processor_id());
    43f0:	38 00 00 00 	li      r0,0
    43f4:	90 01 00 20 	stw     r0,32(r1)
    43f8:	38 00 00 50 	li      r0,80
    43fc:	90 01 00 24 	stw     r0,36(r1)
    4400:	38 00 00 00 	li      r0,0
    4404:	90 01 00 28 	stw     r0,40(r1)

static inline struct page *alloc_pages_node(int nid, gfp_t gfp_mask,
						unsigned int order)
{
	/* Unknown node is current node */
	if (nid < 0)
    4408:	80 01 00 20 	lwz     r0,32(r1)
    440c:	2f 80 00 00 	cmpwi   cr7,r0,0
    4410:	40 9c 00 0c 	bge-    cr7,441c <alloc_enc_pages+0x144>
    4414:	38 00 00 00 	li      r0,0
		nid = numa_node_id();
    4418:	90 01 00 20 	stw     r0,32(r1)
    441c:	80 01 00 20 	lwz     r0,32(r1)
    4420:	90 01 00 2c 	stw     r0,44(r1)
    4424:	80 01 00 24 	lwz     r0,36(r1)
    4428:	90 01 00 30 	stw     r0,48(r1)
    442c:	80 01 00 30 	lwz     r0,48(r1)
    4430:	90 01 00 34 	stw     r0,52(r1)
static inline int gfp_zonelist(gfp_t flags)
{
	if (NUMA_BUILD && unlikely(flags & __GFP_THISNODE))
		return 1;

	return 0;
    4434:	38 00 00 00 	li      r0,0
 * For the normal case of non-DISCONTIGMEM systems the NODE_DATA() gets
 * optimized to &contig_page_data at compile-time.
 */
static inline struct zonelist *node_zonelist(int nid, gfp_t flags)
{
	return NODE_DATA(nid)->node_zonelists + gfp_zonelist(flags);
    4438:	1c 00 00 2c 	mulli   r0,r0,44
    443c:	31 20 0c 70 	addic   r9,r0,3184
    4440:	3c 00 00 00 	lis     r0,0
    4444:	30 00 00 00 	addic   r0,r0,0
    4448:	7c 09 02 14 	add     r0,r9,r0
{
	/* Unknown node is current node */
	if (nid < 0)
		nid = numa_node_id();

	return __alloc_pages(gfp_mask, order, node_zonelist(nid, gfp_mask));
    444c:	81 21 00 24 	lwz     r9,36(r1)
    4450:	91 21 00 38 	stw     r9,56(r1)
    4454:	81 21 00 28 	lwz     r9,40(r1)
    4458:	91 21 00 3c 	stw     r9,60(r1)
    445c:	90 01 00 40 	stw     r0,64(r1)

static inline struct page *
__alloc_pages(gfp_t gfp_mask, unsigned int order,
		struct zonelist *zonelist)
{
	return __alloc_pages_nodemask(gfp_mask, order, zonelist, NULL);
    4460:	80 61 00 38 	lwz     r3,56(r1)
    4464:	80 81 00 3c 	lwz     r4,60(r1)
    4468:	80 a1 00 40 	lwz     r5,64(r1)
    446c:	38 c0 00 00 	li      r6,0
    4470:	48 00 00 01 	bl      4470 <alloc_enc_pages+0x198>
    4474:	7c 60 1b 78 	mr      r0,r3
    4478:	90 1f 00 00 	stw     r0,0(r31)
		if (rqstp->rq_enc_pages[i] == NULL)
    447c:	80 01 00 48 	lwz     r0,72(r1)
    4480:	7c 0b 03 78 	mr      r11,r0
    4484:	81 2b 00 6c 	lwz     r9,108(r11)
    4488:	80 01 00 08 	lwz     r0,8(r1)
    448c:	54 00 10 3a 	rlwinm  r0,r0,2,0,29
    4490:	7c 09 02 14 	add     r0,r9,r0
    4494:	7c 09 03 78 	mr      r9,r0
    4498:	80 09 00 00 	lwz     r0,0(r9)
    449c:	2f 80 00 00 	cmpwi   cr7,r0,0
    44a0:	41 9e 00 44 	beq-    cr7,44e4 <alloc_enc_pages+0x20c>
	rqstp->rq_enc_pages
		= kmalloc(rqstp->rq_enc_pages_num * sizeof(struct page *),
				GFP_NOFS);
	if (!rqstp->rq_enc_pages)
		goto out;
	for (i=0; i < rqstp->rq_enc_pages_num; i++) {
    44a4:	80 01 00 08 	lwz     r0,8(r1)
    44a8:	30 00 00 01 	addic   r0,r0,1
    44ac:	90 01 00 08 	stw     r0,8(r1)
    44b0:	80 01 00 48 	lwz     r0,72(r1)
    44b4:	7c 0b 03 78 	mr      r11,r0
    44b8:	81 2b 00 68 	lwz     r9,104(r11)
    44bc:	80 01 00 08 	lwz     r0,8(r1)
    44c0:	7f 89 00 00 	cmpw    cr7,r9,r0
    44c4:	41 9d ff 14 	bgt+    cr7,43d8 <alloc_enc_pages+0x100>
		rqstp->rq_enc_pages[i] = alloc_page(GFP_NOFS);
		if (rqstp->rq_enc_pages[i] == NULL)
			goto out_free;
	}
	rqstp->rq_release_snd_buf = priv_release_snd_buf;
    44c8:	80 01 00 48 	lwz     r0,72(r1)
    44cc:	3d 20 00 00 	lis     r9,0
    44d0:	39 29 42 48 	addi    r9,r9,16968
    44d4:	7c 0b 03 78 	mr      r11,r0
    44d8:	91 2b 00 70 	stw     r9,112(r11)
	return 0;
    44dc:	38 00 00 00 	li      r0,0
    44e0:	48 00 00 2c 	b       450c <alloc_enc_pages+0x234>
	if (!rqstp->rq_enc_pages)
		goto out;
	for (i=0; i < rqstp->rq_enc_pages_num; i++) {
		rqstp->rq_enc_pages[i] = alloc_page(GFP_NOFS);
		if (rqstp->rq_enc_pages[i] == NULL)
			goto out_free;
    44e4:	60 00 00 00 	nop
	}
	rqstp->rq_release_snd_buf = priv_release_snd_buf;
	return 0;
out_free:
	rqstp->rq_enc_pages_num = i;
    44e8:	80 01 00 48 	lwz     r0,72(r1)
    44ec:	81 21 00 08 	lwz     r9,8(r1)
    44f0:	7c 0b 03 78 	mr      r11,r0
    44f4:	91 2b 00 68 	stw     r9,104(r11)
	priv_release_snd_buf(rqstp);
    44f8:	80 61 00 48 	lwz     r3,72(r1)
    44fc:	4b ff fd 4d 	bl      4248 <priv_release_snd_buf>
    4500:	48 00 00 08 	b       4508 <alloc_enc_pages+0x230>
	rqstp->rq_enc_pages_num = last - first + 1 + 1;
	rqstp->rq_enc_pages
		= kmalloc(rqstp->rq_enc_pages_num * sizeof(struct page *),
				GFP_NOFS);
	if (!rqstp->rq_enc_pages)
		goto out;
    4504:	60 00 00 00 	nop
	return 0;
out_free:
	rqstp->rq_enc_pages_num = i;
	priv_release_snd_buf(rqstp);
out:
	return -EAGAIN;
    4508:	38 00 ff f5 	li      r0,-11
}
    450c:	7c 03 03 78 	mr      r3,r0
    4510:	80 01 00 64 	lwz     r0,100(r1)
    4514:	7c 08 03 a6 	mtlr    r0
    4518:	83 e1 00 5c 	lwz     r31,92(r1)
    451c:	38 21 00 60 	addi    r1,r1,96
    4520:	4e 80 00 20 	blr

00004524 <gss_wrap_req>:
}

static int
gss_wrap_req(struct rpc_task *task,
	     kxdreproc_t encode, void *rqstp, __be32 *p, void *obj)
{
    4524:	94 21 fe d0 	stwu    r1,-304(r1)
    4528:	7c 08 02 a6 	mflr    r0
    452c:	90 01 01 34 	stw     r0,308(r1)
    4530:	93 e1 01 2c 	stw     r31,300(r1)
    4534:	90 61 01 08 	stw     r3,264(r1)
    4538:	90 81 01 0c 	stw     r4,268(r1)
    453c:	90 a1 01 10 	stw     r5,272(r1)
    4540:	90 c1 01 14 	stw     r6,276(r1)
    4544:	90 e1 01 18 	stw     r7,280(r1)
	struct rpc_cred *cred = task->tk_rqstp->rq_cred;
    4548:	80 01 01 08 	lwz     r0,264(r1)
    454c:	7c 09 03 78 	mr      r9,r0
    4550:	80 09 00 10 	lwz     r0,16(r9)
    4554:	7c 0b 03 78 	mr      r11,r0
    4558:	80 0b 00 58 	lwz     r0,88(r11)
    455c:	90 01 00 0c 	stw     r0,12(r1)
	struct gss_cred	*gss_cred = container_of(cred, struct gss_cred,
    4560:	80 01 00 0c 	lwz     r0,12(r1)
    4564:	90 01 00 10 	stw     r0,16(r1)
    4568:	80 01 00 10 	lwz     r0,16(r1)
    456c:	90 01 00 14 	stw     r0,20(r1)
			gc_base);
	struct gss_cl_ctx *ctx = gss_cred_get_ctx(cred);
    4570:	80 61 00 0c 	lwz     r3,12(r1)
    4574:	4b ff bc f5 	bl      268 <gss_cred_get_ctx>
    4578:	90 61 00 18 	stw     r3,24(r1)
	int             status = -EIO;
    457c:	38 00 ff fb 	li      r0,-5
    4580:	90 01 00 08 	stw     r0,8(r1)

	dprintk("RPC: %5u gss_wrap_req\n", task->tk_pid);
    4584:	3c 00 00 00 	lis     r0,0
    4588:	7c 09 03 78 	mr      r9,r0
    458c:	80 09 00 00 	lwz     r0,0(r9)
    4590:	54 00 06 f6 	rlwinm  r0,r0,0,27,27
    4594:	2f 80 00 00 	cmpwi   cr7,r0,0
    4598:	7c 00 00 26 	mfcr    r0
    459c:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
    45a0:	68 00 00 01 	xori    r0,r0,1
    45a4:	2f 80 00 00 	cmpwi   cr7,r0,0
    45a8:	41 9e 00 24 	beq-    cr7,45cc <gss_wrap_req+0xa8>
    45ac:	80 01 01 08 	lwz     r0,264(r1)
    45b0:	7c 0b 03 78 	mr      r11,r0
    45b4:	a0 0b 00 74 	lhz     r0,116(r11)
    45b8:	54 00 04 3e 	clrlwi  r0,r0,16
    45bc:	3d 20 00 00 	lis     r9,0
    45c0:	38 69 05 64 	addi    r3,r9,1380
    45c4:	7c 04 03 78 	mr      r4,r0
    45c8:	48 00 00 01 	bl      45c8 <gss_wrap_req+0xa4>
	if (ctx->gc_proc != RPC_GSS_PROC_DATA) {
    45cc:	80 01 00 18 	lwz     r0,24(r1)
    45d0:	7c 09 03 78 	mr      r9,r0
    45d4:	80 09 00 04 	lwz     r0,4(r9)
    45d8:	2f 80 00 00 	cmpwi   cr7,r0,0
    45dc:	41 9e 00 24 	beq-    cr7,4600 <gss_wrap_req+0xdc>
		/* The spec seems a little ambiguous here, but I think that not
		 * wrapping context destruction requests makes the most sense.
		 */
		gss_wrap_req_encode(encode, rqstp, p, obj);
    45e0:	80 61 01 0c 	lwz     r3,268(r1)
    45e4:	80 81 01 10 	lwz     r4,272(r1)
    45e8:	80 a1 01 14 	lwz     r5,276(r1)
    45ec:	80 c1 01 18 	lwz     r6,280(r1)
    45f0:	4b ff fb f5 	bl      41e4 <gss_wrap_req_encode>
		status = 0;
    45f4:	38 00 00 00 	li      r0,0
    45f8:	90 01 00 08 	stw     r0,8(r1)
		goto out;
    45fc:	48 00 06 c4 	b       4cc0 <gss_wrap_req+0x79c>
	}
	switch (gss_cred->gc_service) {
    4600:	80 01 00 14 	lwz     r0,20(r1)
    4604:	7c 0b 03 78 	mr      r11,r0
    4608:	80 0b 00 34 	lwz     r0,52(r11)
    460c:	2f 80 00 02 	cmpwi   cr7,r0,2
    4610:	41 9e 00 34 	beq-    cr7,4644 <gss_wrap_req+0x120>
    4614:	2f 80 00 03 	cmpwi   cr7,r0,3
    4618:	41 9e 02 e8 	beq-    cr7,4900 <gss_wrap_req+0x3dc>
    461c:	2f 80 00 01 	cmpwi   cr7,r0,1
    4620:	40 9e 06 a0 	bne-    cr7,4cc0 <gss_wrap_req+0x79c>
		case RPC_GSS_SVC_NONE:
			gss_wrap_req_encode(encode, rqstp, p, obj);
    4624:	80 61 01 0c 	lwz     r3,268(r1)
    4628:	80 81 01 10 	lwz     r4,272(r1)
    462c:	80 a1 01 14 	lwz     r5,276(r1)
    4630:	80 c1 01 18 	lwz     r6,280(r1)
    4634:	4b ff fb b1 	bl      41e4 <gss_wrap_req_encode>
			status = 0;
    4638:	38 00 00 00 	li      r0,0
    463c:	90 01 00 08 	stw     r0,8(r1)
			break;
    4640:	48 00 06 80 	b       4cc0 <gss_wrap_req+0x79c>
    4644:	80 01 00 0c 	lwz     r0,12(r1)
    4648:	90 01 00 1c 	stw     r0,28(r1)
    464c:	80 01 00 18 	lwz     r0,24(r1)
    4650:	90 01 00 20 	stw     r0,32(r1)
    4654:	80 01 01 0c 	lwz     r0,268(r1)
    4658:	90 01 00 24 	stw     r0,36(r1)
    465c:	80 01 01 10 	lwz     r0,272(r1)
    4660:	90 01 00 28 	stw     r0,40(r1)
    4664:	80 01 01 14 	lwz     r0,276(r1)
    4668:	90 01 00 2c 	stw     r0,44(r1)
    466c:	80 01 01 18 	lwz     r0,280(r1)
    4670:	90 01 00 30 	stw     r0,48(r1)
static inline int
gss_wrap_req_integ(struct rpc_cred *cred, struct gss_cl_ctx *ctx,
		   kxdreproc_t encode, struct rpc_rqst *rqstp,
		   __be32 *p, void *obj)
{
	struct xdr_buf	*snd_buf = &rqstp->rq_snd_buf;
    4674:	80 01 00 28 	lwz     r0,40(r1)
    4678:	30 00 00 04 	addic   r0,r0,4
    467c:	90 01 00 34 	stw     r0,52(r1)
	struct xdr_buf	integ_buf;
	__be32          *integ_len = NULL;
    4680:	38 00 00 00 	li      r0,0
    4684:	90 01 00 38 	stw     r0,56(r1)
	struct xdr_netobj mic;
	u32		offset;
	__be32		*q;
	struct kvec	*iov;
	u32             maj_stat = 0;
    4688:	38 00 00 00 	li      r0,0
    468c:	90 01 00 3c 	stw     r0,60(r1)
	int		status = -EIO;
    4690:	38 00 ff fb 	li      r0,-5
    4694:	90 01 00 40 	stw     r0,64(r1)

	integ_len = p++;
    4698:	80 01 00 2c 	lwz     r0,44(r1)
    469c:	90 01 00 38 	stw     r0,56(r1)
    46a0:	80 01 00 2c 	lwz     r0,44(r1)
    46a4:	30 00 00 04 	addic   r0,r0,4
    46a8:	90 01 00 2c 	stw     r0,44(r1)
	offset = (u8 *)p - (u8 *)snd_buf->head[0].iov_base;
    46ac:	81 21 00 2c 	lwz     r9,44(r1)
    46b0:	80 01 00 34 	lwz     r0,52(r1)
    46b4:	7c 0b 03 78 	mr      r11,r0
    46b8:	80 0b 00 00 	lwz     r0,0(r11)
    46bc:	7c 00 48 50 	subf    r0,r0,r9
    46c0:	90 01 00 44 	stw     r0,68(r1)
	*p++ = htonl(rqstp->rq_seqno);
    46c4:	80 01 00 28 	lwz     r0,40(r1)
    46c8:	7c 0b 03 78 	mr      r11,r0
    46cc:	81 2b 00 64 	lwz     r9,100(r11)
    46d0:	80 01 00 2c 	lwz     r0,44(r1)
    46d4:	7c 0b 03 78 	mr      r11,r0
    46d8:	91 2b 00 00 	stw     r9,0(r11)
    46dc:	80 01 00 2c 	lwz     r0,44(r1)
    46e0:	30 00 00 04 	addic   r0,r0,4
    46e4:	90 01 00 2c 	stw     r0,44(r1)

	gss_wrap_req_encode(encode, rqstp, p, obj);
    46e8:	80 61 00 24 	lwz     r3,36(r1)
    46ec:	80 81 00 28 	lwz     r4,40(r1)
    46f0:	80 a1 00 2c 	lwz     r5,44(r1)
    46f4:	80 c1 00 30 	lwz     r6,48(r1)
    46f8:	4b ff fa ed 	bl      41e4 <gss_wrap_req_encode>

	if (xdr_buf_subsegment(snd_buf, &integ_buf,
				offset, snd_buf->len - offset))
    46fc:	80 01 00 34 	lwz     r0,52(r1)
    4700:	7c 0b 03 78 	mr      r11,r0
    4704:	81 2b 00 24 	lwz     r9,36(r11)
	offset = (u8 *)p - (u8 *)snd_buf->head[0].iov_base;
	*p++ = htonl(rqstp->rq_seqno);

	gss_wrap_req_encode(encode, rqstp, p, obj);

	if (xdr_buf_subsegment(snd_buf, &integ_buf,
    4708:	80 01 00 44 	lwz     r0,68(r1)
    470c:	7c 00 48 50 	subf    r0,r0,r9
    4710:	39 21 00 d4 	addi    r9,r1,212
    4714:	80 61 00 34 	lwz     r3,52(r1)
    4718:	7d 24 4b 78 	mr      r4,r9
    471c:	80 a1 00 44 	lwz     r5,68(r1)
    4720:	7c 06 03 78 	mr      r6,r0
    4724:	48 00 00 01 	bl      4724 <gss_wrap_req+0x200>
    4728:	7c 60 1b 78 	mr      r0,r3
    472c:	2f 80 00 00 	cmpwi   cr7,r0,0
    4730:	41 9e 00 0c 	beq-    cr7,473c <gss_wrap_req+0x218>
				offset, snd_buf->len - offset))
		return status;
    4734:	80 01 00 40 	lwz     r0,64(r1)
    4738:	48 00 01 c0 	b       48f8 <gss_wrap_req+0x3d4>
	*integ_len = htonl(integ_buf.len);
    473c:	81 21 00 f8 	lwz     r9,248(r1)
    4740:	80 01 00 38 	lwz     r0,56(r1)
    4744:	7c 0b 03 78 	mr      r11,r0
    4748:	91 2b 00 00 	stw     r9,0(r11)

	/* guess whether we're in the head or the tail: */
	if (snd_buf->page_len || snd_buf->tail[0].iov_len)
    474c:	80 01 00 34 	lwz     r0,52(r1)
    4750:	7c 09 03 78 	mr      r9,r0
    4754:	80 09 00 18 	lwz     r0,24(r9)
    4758:	2f 80 00 00 	cmpwi   cr7,r0,0
    475c:	40 9e 00 18 	bne-    cr7,4774 <gss_wrap_req+0x250>
    4760:	80 01 00 34 	lwz     r0,52(r1)
    4764:	7c 0b 03 78 	mr      r11,r0
    4768:	80 0b 00 0c 	lwz     r0,12(r11)
    476c:	2f 80 00 00 	cmpwi   cr7,r0,0
    4770:	41 9e 00 14 	beq-    cr7,4784 <gss_wrap_req+0x260>
		iov = snd_buf->tail;
    4774:	80 01 00 34 	lwz     r0,52(r1)
    4778:	30 00 00 08 	addic   r0,r0,8
    477c:	90 01 00 48 	stw     r0,72(r1)
    4780:	48 00 00 0c 	b       478c <gss_wrap_req+0x268>
	else
		iov = snd_buf->head;
    4784:	80 01 00 34 	lwz     r0,52(r1)
    4788:	90 01 00 48 	stw     r0,72(r1)
	p = iov->iov_base + iov->iov_len;
    478c:	80 01 00 48 	lwz     r0,72(r1)
    4790:	7c 0b 03 78 	mr      r11,r0
    4794:	81 2b 00 00 	lwz     r9,0(r11)
    4798:	80 01 00 48 	lwz     r0,72(r1)
    479c:	7c 0b 03 78 	mr      r11,r0
    47a0:	80 0b 00 04 	lwz     r0,4(r11)
    47a4:	7c 09 02 14 	add     r0,r9,r0
    47a8:	90 01 00 2c 	stw     r0,44(r1)
	mic.data = (u8 *)(p + 1);
    47ac:	80 01 00 2c 	lwz     r0,44(r1)
    47b0:	30 00 00 04 	addic   r0,r0,4
    47b4:	90 01 00 d0 	stw     r0,208(r1)

	maj_stat = gss_get_mic(ctx->gc_gss_ctx, &integ_buf, &mic);
    47b8:	80 01 00 20 	lwz     r0,32(r1)
    47bc:	7c 09 03 78 	mr      r9,r0
    47c0:	81 69 00 0c 	lwz     r11,12(r9)
    47c4:	39 21 00 d4 	addi    r9,r1,212
    47c8:	38 01 00 cc 	addi    r0,r1,204
    47cc:	7d 63 5b 78 	mr      r3,r11
    47d0:	7d 24 4b 78 	mr      r4,r9
    47d4:	7c 05 03 78 	mr      r5,r0
    47d8:	48 00 00 01 	bl      47d8 <gss_wrap_req+0x2b4>
    47dc:	90 61 00 3c 	stw     r3,60(r1)
	status = -EIO; /* XXX? */
    47e0:	38 00 ff fb 	li      r0,-5
    47e4:	90 01 00 40 	stw     r0,64(r1)
	if (maj_stat == GSS_S_CONTEXT_EXPIRED)
    47e8:	81 21 00 3c 	lwz     r9,60(r1)
    47ec:	3c 00 00 0c 	lis     r0,12
    47f0:	7f 89 00 00 	cmpw    cr7,r9,r0
    47f4:	40 9e 00 84 	bne-    cr7,4878 <gss_wrap_req+0x354>
		clear_bit(RPCAUTH_CRED_UPTODATE, &cred->cr_flags);
    47f8:	80 01 00 1c 	lwz     r0,28(r1)
    47fc:	30 00 00 28 	addic   r0,r0,40
    4800:	39 20 00 01 	li      r9,1
    4804:	91 21 00 4c 	stw     r9,76(r1)
    4808:	90 01 00 50 	stw     r0,80(r1)
	set_bits(BITOP_MASK(nr), addr + BITOP_WORD(nr));
}

static __inline__ void clear_bit(int nr, volatile unsigned long *addr)
{
	clear_bits(BITOP_MASK(nr), addr + BITOP_WORD(nr));
    480c:	80 01 00 4c 	lwz     r0,76(r1)
    4810:	7c 09 2e 70 	srawi   r9,r0,5
    4814:	7d 29 01 94 	addze   r9,r9
    4818:	55 29 28 34 	rlwinm  r9,r9,5,0,26
    481c:	7c 09 00 50 	subf    r0,r9,r0
    4820:	39 20 00 01 	li      r9,1
    4824:	7d 29 00 30 	slw     r9,r9,r0
    4828:	80 01 00 4c 	lwz     r0,76(r1)
    482c:	7c 00 2e 70 	srawi   r0,r0,5
    4830:	7c 00 01 94 	addze   r0,r0
    4834:	54 00 10 3a 	rlwinm  r0,r0,2,0,29
    4838:	81 61 00 50 	lwz     r11,80(r1)
    483c:	7c 0b 02 14 	add     r0,r11,r0
    4840:	91 21 00 54 	stw     r9,84(r1)
    4844:	90 01 00 58 	stw     r0,88(r1)
	: "r" (mask), "r" (p)			\
	: "cc", "memory");			\
}

DEFINE_BITOP(set_bits, or, "", "")
DEFINE_BITOP(clear_bits, andc, "", "")
    4848:	80 01 00 58 	lwz     r0,88(r1)
    484c:	90 01 00 5c 	stw     r0,92(r1)
    4850:	81 41 00 5c 	lwz     r10,92(r1)
    4854:	80 01 00 54 	lwz     r0,84(r1)
    4858:	81 21 00 5c 	lwz     r9,92(r1)
    485c:	81 61 00 5c 	lwz     r11,92(r1)
    4860:	7f e0 48 28 	lwarx   r31,0,r9
    4864:	7f ff 00 78 	andc    r31,r31,r0
    4868:	7f e0 49 2d 	stwcx.  r31,0,r9
    486c:	40 a2 ff f4 	bne-    4860 <gss_wrap_req+0x33c>
    4870:	93 e1 00 60 	stw     r31,96(r1)
    4874:	48 00 00 18 	b       488c <gss_wrap_req+0x368>
	else if (maj_stat)
    4878:	80 01 00 3c 	lwz     r0,60(r1)
    487c:	2f 80 00 00 	cmpwi   cr7,r0,0
    4880:	41 9e 00 0c 	beq-    cr7,488c <gss_wrap_req+0x368>
		return status;
    4884:	80 01 00 40 	lwz     r0,64(r1)
    4888:	48 00 00 70 	b       48f8 <gss_wrap_req+0x3d4>
	q = xdr_encode_opaque(p, NULL, mic.len);
    488c:	80 01 00 cc 	lwz     r0,204(r1)
    4890:	80 61 00 2c 	lwz     r3,44(r1)
    4894:	38 80 00 00 	li      r4,0
    4898:	7c 05 03 78 	mr      r5,r0
    489c:	48 00 00 01 	bl      489c <gss_wrap_req+0x378>
    48a0:	90 61 00 64 	stw     r3,100(r1)

	offset = (u8 *)q - (u8 *)p;
    48a4:	81 21 00 64 	lwz     r9,100(r1)
    48a8:	80 01 00 2c 	lwz     r0,44(r1)
    48ac:	7c 00 48 50 	subf    r0,r0,r9
    48b0:	90 01 00 44 	stw     r0,68(r1)
	iov->iov_len += offset;
    48b4:	80 01 00 48 	lwz     r0,72(r1)
    48b8:	7c 0b 03 78 	mr      r11,r0
    48bc:	81 2b 00 04 	lwz     r9,4(r11)
    48c0:	80 01 00 44 	lwz     r0,68(r1)
    48c4:	7d 29 02 14 	add     r9,r9,r0
    48c8:	80 01 00 48 	lwz     r0,72(r1)
    48cc:	7c 0b 03 78 	mr      r11,r0
    48d0:	91 2b 00 04 	stw     r9,4(r11)
	snd_buf->len += offset;
    48d4:	80 01 00 34 	lwz     r0,52(r1)
    48d8:	7c 0b 03 78 	mr      r11,r0
    48dc:	81 2b 00 24 	lwz     r9,36(r11)
    48e0:	80 01 00 44 	lwz     r0,68(r1)
    48e4:	7d 29 02 14 	add     r9,r9,r0
    48e8:	80 01 00 34 	lwz     r0,52(r1)
    48ec:	7c 0b 03 78 	mr      r11,r0
    48f0:	91 2b 00 24 	stw     r9,36(r11)
	return 0;
    48f4:	38 00 00 00 	li      r0,0
		case RPC_GSS_SVC_NONE:
			gss_wrap_req_encode(encode, rqstp, p, obj);
			status = 0;
			break;
		case RPC_GSS_SVC_INTEGRITY:
			status = gss_wrap_req_integ(cred, ctx, encode,
    48f8:	90 01 00 08 	stw     r0,8(r1)
								rqstp, p, obj);
			break;
    48fc:	48 00 03 c4 	b       4cc0 <gss_wrap_req+0x79c>
    4900:	80 01 00 0c 	lwz     r0,12(r1)
    4904:	90 01 00 68 	stw     r0,104(r1)
    4908:	80 01 00 18 	lwz     r0,24(r1)
    490c:	90 01 00 6c 	stw     r0,108(r1)
    4910:	80 01 01 0c 	lwz     r0,268(r1)
    4914:	90 01 00 70 	stw     r0,112(r1)
    4918:	80 01 01 10 	lwz     r0,272(r1)
    491c:	90 01 00 74 	stw     r0,116(r1)
    4920:	80 01 01 14 	lwz     r0,276(r1)
    4924:	90 01 00 78 	stw     r0,120(r1)
    4928:	80 01 01 18 	lwz     r0,280(r1)
    492c:	90 01 00 7c 	stw     r0,124(r1)
static inline int
gss_wrap_req_priv(struct rpc_cred *cred, struct gss_cl_ctx *ctx,
		  kxdreproc_t encode, struct rpc_rqst *rqstp,
		  __be32 *p, void *obj)
{
	struct xdr_buf	*snd_buf = &rqstp->rq_snd_buf;
    4930:	80 01 00 74 	lwz     r0,116(r1)
    4934:	30 00 00 04 	addic   r0,r0,4
    4938:	90 01 00 80 	stw     r0,128(r1)
	int		first;
	int		pad;
	struct kvec	*iov;
	char		*tmp;

	opaque_len = p++;
    493c:	80 01 00 78 	lwz     r0,120(r1)
    4940:	90 01 00 84 	stw     r0,132(r1)
    4944:	80 01 00 78 	lwz     r0,120(r1)
    4948:	30 00 00 04 	addic   r0,r0,4
    494c:	90 01 00 78 	stw     r0,120(r1)
	offset = (u8 *)p - (u8 *)snd_buf->head[0].iov_base;
    4950:	81 21 00 78 	lwz     r9,120(r1)
    4954:	80 01 00 80 	lwz     r0,128(r1)
    4958:	7c 0b 03 78 	mr      r11,r0
    495c:	80 0b 00 00 	lwz     r0,0(r11)
    4960:	7c 00 48 50 	subf    r0,r0,r9
    4964:	90 01 00 88 	stw     r0,136(r1)
	*p++ = htonl(rqstp->rq_seqno);
    4968:	80 01 00 74 	lwz     r0,116(r1)
    496c:	7c 0b 03 78 	mr      r11,r0
    4970:	81 2b 00 64 	lwz     r9,100(r11)
    4974:	80 01 00 78 	lwz     r0,120(r1)
    4978:	7c 0b 03 78 	mr      r11,r0
    497c:	91 2b 00 00 	stw     r9,0(r11)
    4980:	80 01 00 78 	lwz     r0,120(r1)
    4984:	30 00 00 04 	addic   r0,r0,4
    4988:	90 01 00 78 	stw     r0,120(r1)

	gss_wrap_req_encode(encode, rqstp, p, obj);
    498c:	80 61 00 70 	lwz     r3,112(r1)
    4990:	80 81 00 74 	lwz     r4,116(r1)
    4994:	80 a1 00 78 	lwz     r5,120(r1)
    4998:	80 c1 00 7c 	lwz     r6,124(r1)
    499c:	4b ff f8 49 	bl      41e4 <gss_wrap_req_encode>

	status = alloc_enc_pages(rqstp);
    49a0:	80 61 00 74 	lwz     r3,116(r1)
    49a4:	4b ff f9 35 	bl      42d8 <alloc_enc_pages>
    49a8:	90 61 00 8c 	stw     r3,140(r1)
	if (status)
    49ac:	80 01 00 8c 	lwz     r0,140(r1)
    49b0:	2f 80 00 00 	cmpwi   cr7,r0,0
    49b4:	41 9e 00 0c 	beq-    cr7,49c0 <gss_wrap_req+0x49c>
		return status;
    49b8:	80 01 00 8c 	lwz     r0,140(r1)
    49bc:	48 00 03 00 	b       4cbc <gss_wrap_req+0x798>
	first = snd_buf->page_base >> PAGE_CACHE_SHIFT;
    49c0:	80 01 00 80 	lwz     r0,128(r1)
    49c4:	7c 09 03 78 	mr      r9,r0
    49c8:	80 09 00 14 	lwz     r0,20(r9)
    49cc:	54 00 a3 3e 	rlwinm  r0,r0,20,12,31
    49d0:	90 01 00 90 	stw     r0,144(r1)
	inpages = snd_buf->pages + first;
    49d4:	80 01 00 80 	lwz     r0,128(r1)
    49d8:	7c 0b 03 78 	mr      r11,r0
    49dc:	81 2b 00 10 	lwz     r9,16(r11)
    49e0:	80 01 00 90 	lwz     r0,144(r1)
    49e4:	54 00 10 3a 	rlwinm  r0,r0,2,0,29
    49e8:	7c 09 02 14 	add     r0,r9,r0
    49ec:	90 01 00 94 	stw     r0,148(r1)
	snd_buf->pages = rqstp->rq_enc_pages;
    49f0:	80 01 00 74 	lwz     r0,116(r1)
    49f4:	7c 0b 03 78 	mr      r11,r0
    49f8:	81 2b 00 6c 	lwz     r9,108(r11)
    49fc:	80 01 00 80 	lwz     r0,128(r1)
    4a00:	7c 0b 03 78 	mr      r11,r0
    4a04:	91 2b 00 10 	stw     r9,16(r11)
	snd_buf->page_base -= first << PAGE_CACHE_SHIFT;
    4a08:	80 01 00 80 	lwz     r0,128(r1)
    4a0c:	7c 0b 03 78 	mr      r11,r0
    4a10:	81 2b 00 14 	lwz     r9,20(r11)
    4a14:	80 01 00 90 	lwz     r0,144(r1)
    4a18:	54 00 60 26 	rlwinm  r0,r0,12,0,19
    4a1c:	7d 20 48 50 	subf    r9,r0,r9
    4a20:	80 01 00 80 	lwz     r0,128(r1)
    4a24:	7c 0b 03 78 	mr      r11,r0
    4a28:	91 2b 00 14 	stw     r9,20(r11)
	 *
	 * call_allocate() allocates twice the slack space required
	 * by the authentication flavor to rq_callsize.
	 * For GSS, slack is GSS_CRED_SLACK.
	 */
	if (snd_buf->page_len || snd_buf->tail[0].iov_len) {
    4a2c:	80 01 00 80 	lwz     r0,128(r1)
    4a30:	7c 09 03 78 	mr      r9,r0
    4a34:	80 09 00 18 	lwz     r0,24(r9)
    4a38:	2f 80 00 00 	cmpwi   cr7,r0,0
    4a3c:	40 9e 00 18 	bne-    cr7,4a54 <gss_wrap_req+0x530>
    4a40:	80 01 00 80 	lwz     r0,128(r1)
    4a44:	7c 0b 03 78 	mr      r11,r0
    4a48:	80 0b 00 0c 	lwz     r0,12(r11)
    4a4c:	2f 80 00 00 	cmpwi   cr7,r0,0
    4a50:	41 9e 00 78 	beq-    cr7,4ac8 <gss_wrap_req+0x5a4>
		tmp = page_address(rqstp->rq_enc_pages[rqstp->rq_enc_pages_num - 1]);
    4a54:	80 01 00 74 	lwz     r0,116(r1)
    4a58:	7c 0b 03 78 	mr      r11,r0
    4a5c:	81 2b 00 6c 	lwz     r9,108(r11)
    4a60:	80 01 00 74 	lwz     r0,116(r1)
    4a64:	7c 0b 03 78 	mr      r11,r0
    4a68:	80 0b 00 68 	lwz     r0,104(r11)
    4a6c:	30 00 ff ff 	addic   r0,r0,-1
    4a70:	54 00 10 3a 	rlwinm  r0,r0,2,0,29
    4a74:	7c 09 02 14 	add     r0,r9,r0
    4a78:	7c 09 03 78 	mr      r9,r0
    4a7c:	80 09 00 00 	lwz     r0,0(r9)
    4a80:	7c 03 03 78 	mr      r3,r0
    4a84:	48 00 00 01 	bl      4a84 <gss_wrap_req+0x560>
    4a88:	90 61 00 98 	stw     r3,152(r1)
		memcpy(tmp, snd_buf->tail[0].iov_base, snd_buf->tail[0].iov_len);
    4a8c:	80 01 00 80 	lwz     r0,128(r1)
    4a90:	7c 0b 03 78 	mr      r11,r0
    4a94:	81 2b 00 08 	lwz     r9,8(r11)
    4a98:	80 01 00 80 	lwz     r0,128(r1)
    4a9c:	7c 0b 03 78 	mr      r11,r0
    4aa0:	80 0b 00 0c 	lwz     r0,12(r11)
    4aa4:	81 61 00 98 	lwz     r11,152(r1)
    4aa8:	7d 63 5b 78 	mr      r3,r11
    4aac:	7d 24 4b 78 	mr      r4,r9
    4ab0:	7c 05 03 78 	mr      r5,r0
    4ab4:	48 00 00 01 	bl      4ab4 <gss_wrap_req+0x590>
		snd_buf->tail[0].iov_base = tmp;
    4ab8:	80 01 00 80 	lwz     r0,128(r1)
    4abc:	81 21 00 98 	lwz     r9,152(r1)
    4ac0:	7c 0b 03 78 	mr      r11,r0
    4ac4:	91 2b 00 08 	stw     r9,8(r11)
	}
	maj_stat = gss_wrap(ctx->gc_gss_ctx, offset, snd_buf, inpages);
    4ac8:	80 01 00 6c 	lwz     r0,108(r1)
    4acc:	7c 0b 03 78 	mr      r11,r0
    4ad0:	81 2b 00 0c 	lwz     r9,12(r11)
    4ad4:	80 01 00 88 	lwz     r0,136(r1)
    4ad8:	7d 23 4b 78 	mr      r3,r9
    4adc:	7c 04 03 78 	mr      r4,r0
    4ae0:	80 a1 00 80 	lwz     r5,128(r1)
    4ae4:	80 c1 00 94 	lwz     r6,148(r1)
    4ae8:	48 00 00 01 	bl      4ae8 <gss_wrap_req+0x5c4>
    4aec:	90 61 00 9c 	stw     r3,156(r1)
	/* slack space should prevent this ever happening: */
	BUG_ON(snd_buf->len > snd_buf->buflen);
    4af0:	80 01 00 80 	lwz     r0,128(r1)
    4af4:	7c 0b 03 78 	mr      r11,r0
    4af8:	81 2b 00 24 	lwz     r9,36(r11)
    4afc:	80 01 00 80 	lwz     r0,128(r1)
    4b00:	7c 0b 03 78 	mr      r11,r0
    4b04:	80 0b 00 20 	lwz     r0,32(r11)
    4b08:	7f 89 00 40 	cmplw   cr7,r9,r0
    4b0c:	7c 00 00 26 	mfcr    r0
    4b10:	54 00 f7 fe 	rlwinm  r0,r0,30,31,31
    4b14:	0f 00 00 00 	twnei   r0,0
	status = -EIO;
    4b18:	38 00 ff fb 	li      r0,-5
    4b1c:	90 01 00 8c 	stw     r0,140(r1)
	/* We're assuming that when GSS_S_CONTEXT_EXPIRED, the encryption was
	 * done anyway, so it's safe to put the request on the wire: */
	if (maj_stat == GSS_S_CONTEXT_EXPIRED)
    4b20:	81 21 00 9c 	lwz     r9,156(r1)
    4b24:	3c 00 00 0c 	lis     r0,12
    4b28:	7f 89 00 00 	cmpw    cr7,r9,r0
    4b2c:	40 9e 00 84 	bne-    cr7,4bb0 <gss_wrap_req+0x68c>
		clear_bit(RPCAUTH_CRED_UPTODATE, &cred->cr_flags);
    4b30:	80 01 00 68 	lwz     r0,104(r1)
    4b34:	30 00 00 28 	addic   r0,r0,40
    4b38:	39 20 00 01 	li      r9,1
    4b3c:	91 21 00 a0 	stw     r9,160(r1)
    4b40:	90 01 00 a4 	stw     r0,164(r1)
	set_bits(BITOP_MASK(nr), addr + BITOP_WORD(nr));
}

static __inline__ void clear_bit(int nr, volatile unsigned long *addr)
{
	clear_bits(BITOP_MASK(nr), addr + BITOP_WORD(nr));
    4b44:	80 01 00 a0 	lwz     r0,160(r1)
    4b48:	7c 09 2e 70 	srawi   r9,r0,5
    4b4c:	7d 29 01 94 	addze   r9,r9
    4b50:	55 29 28 34 	rlwinm  r9,r9,5,0,26
    4b54:	7c 09 00 50 	subf    r0,r9,r0
    4b58:	39 20 00 01 	li      r9,1
    4b5c:	7d 29 00 30 	slw     r9,r9,r0
    4b60:	80 01 00 a0 	lwz     r0,160(r1)
    4b64:	7c 00 2e 70 	srawi   r0,r0,5
    4b68:	7c 00 01 94 	addze   r0,r0
    4b6c:	54 00 10 3a 	rlwinm  r0,r0,2,0,29
    4b70:	81 61 00 a4 	lwz     r11,164(r1)
    4b74:	7c 0b 02 14 	add     r0,r11,r0
    4b78:	91 21 00 a8 	stw     r9,168(r1)
    4b7c:	90 01 00 ac 	stw     r0,172(r1)
	: "r" (mask), "r" (p)			\
	: "cc", "memory");			\
}

DEFINE_BITOP(set_bits, or, "", "")
DEFINE_BITOP(clear_bits, andc, "", "")
    4b80:	80 01 00 ac 	lwz     r0,172(r1)
    4b84:	90 01 00 b0 	stw     r0,176(r1)
    4b88:	81 41 00 b0 	lwz     r10,176(r1)
    4b8c:	80 01 00 a8 	lwz     r0,168(r1)
    4b90:	81 21 00 b0 	lwz     r9,176(r1)
    4b94:	81 61 00 b0 	lwz     r11,176(r1)
    4b98:	7f e0 48 28 	lwarx   r31,0,r9
    4b9c:	7f ff 00 78 	andc    r31,r31,r0
    4ba0:	7f e0 49 2d 	stwcx.  r31,0,r9
    4ba4:	40 a2 ff f4 	bne-    4b98 <gss_wrap_req+0x674>
    4ba8:	93 e1 00 b4 	stw     r31,180(r1)
    4bac:	48 00 00 18 	b       4bc4 <gss_wrap_req+0x6a0>
	else if (maj_stat)
    4bb0:	80 01 00 9c 	lwz     r0,156(r1)
    4bb4:	2f 80 00 00 	cmpwi   cr7,r0,0
    4bb8:	41 9e 00 0c 	beq-    cr7,4bc4 <gss_wrap_req+0x6a0>
		return status;
    4bbc:	80 01 00 8c 	lwz     r0,140(r1)
    4bc0:	48 00 00 fc 	b       4cbc <gss_wrap_req+0x798>

	*opaque_len = htonl(snd_buf->len - offset);
    4bc4:	80 01 00 80 	lwz     r0,128(r1)
    4bc8:	7c 0b 03 78 	mr      r11,r0
    4bcc:	81 2b 00 24 	lwz     r9,36(r11)
    4bd0:	80 01 00 88 	lwz     r0,136(r1)
    4bd4:	7d 20 48 50 	subf    r9,r0,r9
    4bd8:	80 01 00 84 	lwz     r0,132(r1)
    4bdc:	7c 0b 03 78 	mr      r11,r0
    4be0:	91 2b 00 00 	stw     r9,0(r11)
	/* guess whether we're in the head or the tail: */
	if (snd_buf->page_len || snd_buf->tail[0].iov_len)
    4be4:	80 01 00 80 	lwz     r0,128(r1)
    4be8:	7c 09 03 78 	mr      r9,r0
    4bec:	80 09 00 18 	lwz     r0,24(r9)
    4bf0:	2f 80 00 00 	cmpwi   cr7,r0,0
    4bf4:	40 9e 00 18 	bne-    cr7,4c0c <gss_wrap_req+0x6e8>
    4bf8:	80 01 00 80 	lwz     r0,128(r1)
    4bfc:	7c 0b 03 78 	mr      r11,r0
    4c00:	80 0b 00 0c 	lwz     r0,12(r11)
    4c04:	2f 80 00 00 	cmpwi   cr7,r0,0
    4c08:	41 9e 00 14 	beq-    cr7,4c1c <gss_wrap_req+0x6f8>
		iov = snd_buf->tail;
    4c0c:	80 01 00 80 	lwz     r0,128(r1)
    4c10:	30 00 00 08 	addic   r0,r0,8
    4c14:	90 01 00 b8 	stw     r0,184(r1)
    4c18:	48 00 00 0c 	b       4c24 <gss_wrap_req+0x700>
	else
		iov = snd_buf->head;
    4c1c:	80 01 00 80 	lwz     r0,128(r1)
    4c20:	90 01 00 b8 	stw     r0,184(r1)
	p = iov->iov_base + iov->iov_len;
    4c24:	80 01 00 b8 	lwz     r0,184(r1)
    4c28:	7c 0b 03 78 	mr      r11,r0
    4c2c:	81 2b 00 00 	lwz     r9,0(r11)
    4c30:	80 01 00 b8 	lwz     r0,184(r1)
    4c34:	7c 0b 03 78 	mr      r11,r0
    4c38:	80 0b 00 04 	lwz     r0,4(r11)
    4c3c:	7c 09 02 14 	add     r0,r9,r0
    4c40:	90 01 00 78 	stw     r0,120(r1)
	pad = 3 - ((snd_buf->len - offset - 1) & 3);
    4c44:	80 01 00 80 	lwz     r0,128(r1)
    4c48:	7c 09 03 78 	mr      r9,r0
    4c4c:	80 09 00 24 	lwz     r0,36(r9)
    4c50:	81 21 00 88 	lwz     r9,136(r1)
    4c54:	7c 00 48 50 	subf    r0,r0,r9
    4c58:	54 00 07 be 	clrlwi  r0,r0,30
    4c5c:	90 01 00 bc 	stw     r0,188(r1)
	memset(p, 0, pad);
    4c60:	80 01 00 bc 	lwz     r0,188(r1)
    4c64:	81 21 00 78 	lwz     r9,120(r1)
    4c68:	7d 23 4b 78 	mr      r3,r9
    4c6c:	38 80 00 00 	li      r4,0
    4c70:	7c 05 03 78 	mr      r5,r0
    4c74:	48 00 00 01 	bl      4c74 <gss_wrap_req+0x750>
	iov->iov_len += pad;
    4c78:	80 01 00 b8 	lwz     r0,184(r1)
    4c7c:	7c 0b 03 78 	mr      r11,r0
    4c80:	81 2b 00 04 	lwz     r9,4(r11)
    4c84:	80 01 00 bc 	lwz     r0,188(r1)
    4c88:	7d 29 02 14 	add     r9,r9,r0
    4c8c:	80 01 00 b8 	lwz     r0,184(r1)
    4c90:	7c 0b 03 78 	mr      r11,r0
    4c94:	91 2b 00 04 	stw     r9,4(r11)
	snd_buf->len += pad;
    4c98:	80 01 00 80 	lwz     r0,128(r1)
    4c9c:	7c 0b 03 78 	mr      r11,r0
    4ca0:	81 2b 00 24 	lwz     r9,36(r11)
    4ca4:	80 01 00 bc 	lwz     r0,188(r1)
    4ca8:	7d 29 02 14 	add     r9,r9,r0
    4cac:	80 01 00 80 	lwz     r0,128(r1)
    4cb0:	7c 0b 03 78 	mr      r11,r0
    4cb4:	91 2b 00 24 	stw     r9,36(r11)

	return 0;
    4cb8:	38 00 00 00 	li      r0,0
		case RPC_GSS_SVC_INTEGRITY:
			status = gss_wrap_req_integ(cred, ctx, encode,
								rqstp, p, obj);
			break;
		case RPC_GSS_SVC_PRIVACY:
			status = gss_wrap_req_priv(cred, ctx, encode,
    4cbc:	90 01 00 08 	stw     r0,8(r1)
					rqstp, p, obj);
			break;
    4cc0:	80 01 00 18 	lwz     r0,24(r1)
    4cc4:	90 01 00 c0 	stw     r0,192(r1)
}

static inline void
gss_put_ctx(struct gss_cl_ctx *ctx)
{
	if (atomic_dec_and_test(&ctx->count))
    4cc8:	80 01 00 c0 	lwz     r0,192(r1)
    4ccc:	90 01 00 c4 	stw     r0,196(r1)
	PPC405_ERR77(0,%1)
"	stwcx.	%0,0,%1\n\
	bne-	1b"
	PPC_ACQUIRE_BARRIER
	: "=&r" (t)
	: "r" (&v->counter)
    4cd0:	80 01 00 c4 	lwz     r0,196(r1)

static __inline__ int atomic_dec_return(atomic_t *v)
{
	int t;

	__asm__ __volatile__(
    4cd4:	7f e0 00 28 	lwarx   r31,0,r0
    4cd8:	33 ff ff ff 	addic   r31,r31,-1
    4cdc:	7f e0 01 2d 	stwcx.  r31,0,r0
    4ce0:	40 a2 ff f4 	bne-    4cd4 <gss_wrap_req+0x7b0>
    4ce4:	93 e1 00 c8 	stw     r31,200(r1)
	PPC_ACQUIRE_BARRIER
	: "=&r" (t)
	: "r" (&v->counter)
	: "cc", "xer", "memory");

	return t;
    4ce8:	80 01 00 c8 	lwz     r0,200(r1)
    4cec:	2f 80 00 00 	cmpwi   cr7,r0,0
    4cf0:	40 9e 00 0c 	bne-    cr7,4cfc <gss_wrap_req+0x7d8>
		gss_free_ctx(ctx);
    4cf4:	80 61 00 c0 	lwz     r3,192(r1)
    4cf8:	4b ff dc 55 	bl      294c <gss_free_ctx>
					rqstp, p, obj);
			break;
	}
out:
	gss_put_ctx(ctx);
	dprintk("RPC: %5u gss_wrap_req returning %d\n", task->tk_pid, status);
    4cfc:	3c 00 00 00 	lis     r0,0
    4d00:	7c 09 03 78 	mr      r9,r0
    4d04:	80 09 00 00 	lwz     r0,0(r9)
    4d08:	54 00 06 f6 	rlwinm  r0,r0,0,27,27
    4d0c:	2f 80 00 00 	cmpwi   cr7,r0,0
    4d10:	7c 00 00 26 	mfcr    r0
    4d14:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
    4d18:	68 00 00 01 	xori    r0,r0,1
    4d1c:	2f 80 00 00 	cmpwi   cr7,r0,0
    4d20:	41 9e 00 28 	beq-    cr7,4d48 <gss_wrap_req+0x824>
    4d24:	80 01 01 08 	lwz     r0,264(r1)
    4d28:	7c 0b 03 78 	mr      r11,r0
    4d2c:	a0 0b 00 74 	lhz     r0,116(r11)
    4d30:	54 00 04 3e 	clrlwi  r0,r0,16
    4d34:	3d 20 00 00 	lis     r9,0
    4d38:	38 69 05 7c 	addi    r3,r9,1404
    4d3c:	7c 04 03 78 	mr      r4,r0
    4d40:	80 a1 00 08 	lwz     r5,8(r1)
    4d44:	48 00 00 01 	bl      4d44 <gss_wrap_req+0x820>
	return status;
    4d48:	80 01 00 08 	lwz     r0,8(r1)
}
    4d4c:	7c 03 03 78 	mr      r3,r0
    4d50:	80 01 01 34 	lwz     r0,308(r1)
    4d54:	7c 08 03 a6 	mtlr    r0
    4d58:	83 e1 01 2c 	lwz     r31,300(r1)
    4d5c:	38 21 01 30 	addi    r1,r1,304
    4d60:	4e 80 00 20 	blr

00004d64 <gss_unwrap_req_decode>:
}

static int
gss_unwrap_req_decode(kxdrdproc_t decode, struct rpc_rqst *rqstp,
		      __be32 *p, void *obj)
{
    4d64:	94 21 ff c0 	stwu    r1,-64(r1)
    4d68:	7c 08 02 a6 	mflr    r0
    4d6c:	90 01 00 44 	stw     r0,68(r1)
    4d70:	90 61 00 28 	stw     r3,40(r1)
    4d74:	90 81 00 2c 	stw     r4,44(r1)
    4d78:	90 a1 00 30 	stw     r5,48(r1)
    4d7c:	90 c1 00 34 	stw     r6,52(r1)
	struct xdr_stream xdr;

	xdr_init_decode(&xdr, &rqstp->rq_rcv_buf, p);
    4d80:	80 01 00 2c 	lwz     r0,44(r1)
    4d84:	30 00 00 2c 	addic   r0,r0,44
    4d88:	39 21 00 08 	addi    r9,r1,8
    4d8c:	7d 23 4b 78 	mr      r3,r9
    4d90:	7c 04 03 78 	mr      r4,r0
    4d94:	80 a1 00 30 	lwz     r5,48(r1)
    4d98:	48 00 00 01 	bl      4d98 <gss_unwrap_req_decode+0x34>
	return decode(rqstp, &xdr, obj);
    4d9c:	80 01 00 28 	lwz     r0,40(r1)
    4da0:	80 61 00 2c 	lwz     r3,44(r1)
    4da4:	39 21 00 08 	addi    r9,r1,8
    4da8:	7d 24 4b 78 	mr      r4,r9
    4dac:	80 a1 00 34 	lwz     r5,52(r1)
    4db0:	7c 09 03 a6 	mtctr   r0
    4db4:	4e 80 04 21 	bctrl
    4db8:	7c 60 1b 78 	mr      r0,r3
}
    4dbc:	7c 03 03 78 	mr      r3,r0
    4dc0:	80 01 00 44 	lwz     r0,68(r1)
    4dc4:	7c 08 03 a6 	mtlr    r0
    4dc8:	38 21 00 40 	addi    r1,r1,64
    4dcc:	4e 80 00 20 	blr

00004dd0 <gss_unwrap_resp>:

static int
gss_unwrap_resp(struct rpc_task *task,
		kxdrdproc_t decode, void *rqstp, __be32 *p, void *obj)
{
    4dd0:	94 21 fe f0 	stwu    r1,-272(r1)
    4dd4:	7c 08 02 a6 	mflr    r0
    4dd8:	90 01 01 14 	stw     r0,276(r1)
    4ddc:	93 e1 01 0c 	stw     r31,268(r1)
    4de0:	90 61 00 e8 	stw     r3,232(r1)
    4de4:	90 81 00 ec 	stw     r4,236(r1)
    4de8:	90 a1 00 f0 	stw     r5,240(r1)
    4dec:	90 c1 00 f4 	stw     r6,244(r1)
    4df0:	90 e1 00 f8 	stw     r7,248(r1)
	struct rpc_cred *cred = task->tk_rqstp->rq_cred;
    4df4:	80 01 00 e8 	lwz     r0,232(r1)
    4df8:	7c 09 03 78 	mr      r9,r0
    4dfc:	80 09 00 10 	lwz     r0,16(r9)
    4e00:	7c 0a 03 78 	mr      r10,r0
    4e04:	80 0a 00 58 	lwz     r0,88(r10)
    4e08:	90 01 00 0c 	stw     r0,12(r1)
	struct gss_cred *gss_cred = container_of(cred, struct gss_cred,
    4e0c:	80 01 00 0c 	lwz     r0,12(r1)
    4e10:	90 01 00 10 	stw     r0,16(r1)
    4e14:	80 01 00 10 	lwz     r0,16(r1)
    4e18:	90 01 00 14 	stw     r0,20(r1)
			gc_base);
	struct gss_cl_ctx *ctx = gss_cred_get_ctx(cred);
    4e1c:	80 61 00 0c 	lwz     r3,12(r1)
    4e20:	4b ff b4 49 	bl      268 <gss_cred_get_ctx>
    4e24:	90 61 00 18 	stw     r3,24(r1)
	__be32		*savedp = p;
    4e28:	80 01 00 f4 	lwz     r0,244(r1)
    4e2c:	90 01 00 1c 	stw     r0,28(r1)
	struct kvec	*head = ((struct rpc_rqst *)rqstp)->rq_rcv_buf.head;
    4e30:	80 01 00 f0 	lwz     r0,240(r1)
    4e34:	30 00 00 2c 	addic   r0,r0,44
    4e38:	90 01 00 20 	stw     r0,32(r1)
	int		savedlen = head->iov_len;
    4e3c:	80 01 00 20 	lwz     r0,32(r1)
    4e40:	7c 0b 03 78 	mr      r11,r0
    4e44:	80 0b 00 04 	lwz     r0,4(r11)
    4e48:	90 01 00 24 	stw     r0,36(r1)
	int             status = -EIO;
    4e4c:	38 00 ff fb 	li      r0,-5
    4e50:	90 01 00 08 	stw     r0,8(r1)

	if (ctx->gc_proc != RPC_GSS_PROC_DATA)
    4e54:	80 01 00 18 	lwz     r0,24(r1)
    4e58:	7c 09 03 78 	mr      r9,r0
    4e5c:	80 09 00 04 	lwz     r0,4(r9)
    4e60:	2f 80 00 00 	cmpwi   cr7,r0,0
    4e64:	40 9e 04 c4 	bne-    cr7,5328 <gss_unwrap_resp+0x558>
		goto out_decode;
	switch (gss_cred->gc_service) {
    4e68:	80 01 00 14 	lwz     r0,20(r1)
    4e6c:	7c 0a 03 78 	mr      r10,r0
    4e70:	80 0a 00 34 	lwz     r0,52(r10)
    4e74:	2f 80 00 02 	cmpwi   cr7,r0,2
    4e78:	41 9e 00 10 	beq-    cr7,4e88 <gss_unwrap_resp+0xb8>
    4e7c:	2f 80 00 03 	cmpwi   cr7,r0,3
    4e80:	41 9e 02 64 	beq-    cr7,50e4 <gss_unwrap_resp+0x314>
		case RPC_GSS_SVC_NONE:
			break;
    4e84:	48 00 04 54 	b       52d8 <gss_unwrap_resp+0x508>
    4e88:	80 01 00 0c 	lwz     r0,12(r1)
    4e8c:	90 01 00 28 	stw     r0,40(r1)
    4e90:	80 01 00 18 	lwz     r0,24(r1)
    4e94:	90 01 00 2c 	stw     r0,44(r1)
    4e98:	80 01 00 f0 	lwz     r0,240(r1)
    4e9c:	90 01 00 30 	stw     r0,48(r1)
		case RPC_GSS_SVC_INTEGRITY:
			status = gss_unwrap_resp_integ(cred, ctx, rqstp, &p);
    4ea0:	38 01 00 f4 	addi    r0,r1,244

	if (ctx->gc_proc != RPC_GSS_PROC_DATA)
		goto out_decode;
	switch (gss_cred->gc_service) {
		case RPC_GSS_SVC_NONE:
			break;
    4ea4:	90 01 00 34 	stw     r0,52(r1)

static inline int
gss_unwrap_resp_integ(struct rpc_cred *cred, struct gss_cl_ctx *ctx,
		struct rpc_rqst *rqstp, __be32 **p)
{
	struct xdr_buf	*rcv_buf = &rqstp->rq_rcv_buf;
    4ea8:	80 01 00 30 	lwz     r0,48(r1)
    4eac:	30 00 00 2c 	addic   r0,r0,44
    4eb0:	90 01 00 38 	stw     r0,56(r1)
	struct xdr_buf integ_buf;
	struct xdr_netobj mic;
	u32 data_offset, mic_offset;
	u32 integ_len;
	u32 maj_stat;
	int status = -EIO;
    4eb4:	38 00 ff fb 	li      r0,-5
    4eb8:	90 01 00 3c 	stw     r0,60(r1)

	integ_len = ntohl(*(*p)++);
    4ebc:	80 01 00 34 	lwz     r0,52(r1)
    4ec0:	7c 0b 03 78 	mr      r11,r0
    4ec4:	80 0b 00 00 	lwz     r0,0(r11)
    4ec8:	7c 0a 03 78 	mr      r10,r0
    4ecc:	81 2a 00 00 	lwz     r9,0(r10)
    4ed0:	91 21 00 40 	stw     r9,64(r1)
    4ed4:	31 20 00 04 	addic   r9,r0,4
    4ed8:	80 01 00 34 	lwz     r0,52(r1)
    4edc:	7c 0b 03 78 	mr      r11,r0
    4ee0:	91 2b 00 00 	stw     r9,0(r11)
	if (integ_len & 3)
    4ee4:	80 01 00 40 	lwz     r0,64(r1)
    4ee8:	54 00 07 be 	clrlwi  r0,r0,30
    4eec:	2f 80 00 00 	cmpwi   cr7,r0,0
    4ef0:	41 9e 00 0c 	beq-    cr7,4efc <gss_unwrap_resp+0x12c>
		return status;
    4ef4:	80 01 00 3c 	lwz     r0,60(r1)
    4ef8:	48 00 01 d8 	b       50d0 <gss_unwrap_resp+0x300>
	data_offset = (u8 *)(*p) - (u8 *)rcv_buf->head[0].iov_base;
    4efc:	80 01 00 34 	lwz     r0,52(r1)
    4f00:	7c 09 03 78 	mr      r9,r0
    4f04:	80 09 00 00 	lwz     r0,0(r9)
    4f08:	7c 09 03 78 	mr      r9,r0
    4f0c:	80 01 00 38 	lwz     r0,56(r1)
    4f10:	7c 0a 03 78 	mr      r10,r0
    4f14:	80 0a 00 00 	lwz     r0,0(r10)
    4f18:	7c 00 48 50 	subf    r0,r0,r9
    4f1c:	90 01 00 44 	stw     r0,68(r1)
	mic_offset = integ_len + data_offset;
    4f20:	81 21 00 40 	lwz     r9,64(r1)
    4f24:	80 01 00 44 	lwz     r0,68(r1)
    4f28:	7c 09 02 14 	add     r0,r9,r0
    4f2c:	90 01 00 48 	stw     r0,72(r1)
	if (mic_offset > rcv_buf->len)
    4f30:	80 01 00 38 	lwz     r0,56(r1)
    4f34:	7c 0b 03 78 	mr      r11,r0
    4f38:	80 0b 00 24 	lwz     r0,36(r11)
    4f3c:	81 21 00 48 	lwz     r9,72(r1)
    4f40:	7f 89 00 40 	cmplw   cr7,r9,r0
    4f44:	40 9d 00 0c 	ble-    cr7,4f50 <gss_unwrap_resp+0x180>
		return status;
    4f48:	80 01 00 3c 	lwz     r0,60(r1)
    4f4c:	48 00 01 84 	b       50d0 <gss_unwrap_resp+0x300>
	if (ntohl(*(*p)++) != rqstp->rq_seqno)
    4f50:	80 01 00 34 	lwz     r0,52(r1)
    4f54:	7c 09 03 78 	mr      r9,r0
    4f58:	80 09 00 00 	lwz     r0,0(r9)
    4f5c:	7c 0a 03 78 	mr      r10,r0
    4f60:	81 6a 00 00 	lwz     r11,0(r10)
    4f64:	81 21 00 30 	lwz     r9,48(r1)
    4f68:	81 29 00 64 	lwz     r9,100(r9)
    4f6c:	7d 69 4a 78 	xor     r9,r11,r9
    4f70:	2f 89 00 00 	cmpwi   cr7,r9,0
    4f74:	7d 20 00 26 	mfcr    r9
    4f78:	55 29 ff fe 	rlwinm  r9,r9,31,31,31
    4f7c:	69 29 00 01 	xori    r9,r9,1
    4f80:	55 29 06 3e 	clrlwi  r9,r9,24
    4f84:	31 60 00 04 	addic   r11,r0,4
    4f88:	80 01 00 34 	lwz     r0,52(r1)
    4f8c:	7c 0a 03 78 	mr      r10,r0
    4f90:	91 6a 00 00 	stw     r11,0(r10)
    4f94:	2f 89 00 00 	cmpwi   cr7,r9,0
    4f98:	41 9e 00 0c 	beq-    cr7,4fa4 <gss_unwrap_resp+0x1d4>
		return status;
    4f9c:	80 01 00 3c 	lwz     r0,60(r1)
    4fa0:	48 00 01 30 	b       50d0 <gss_unwrap_resp+0x300>

	if (xdr_buf_subsegment(rcv_buf, &integ_buf, data_offset,
    4fa4:	81 21 00 48 	lwz     r9,72(r1)
    4fa8:	80 01 00 44 	lwz     r0,68(r1)
    4fac:	7c 00 48 50 	subf    r0,r0,r9
    4fb0:	39 21 00 b8 	addi    r9,r1,184
    4fb4:	80 61 00 38 	lwz     r3,56(r1)
    4fb8:	7d 24 4b 78 	mr      r4,r9
    4fbc:	80 a1 00 44 	lwz     r5,68(r1)
    4fc0:	7c 06 03 78 	mr      r6,r0
    4fc4:	48 00 00 01 	bl      4fc4 <gss_unwrap_resp+0x1f4>
    4fc8:	7c 60 1b 78 	mr      r0,r3
    4fcc:	2f 80 00 00 	cmpwi   cr7,r0,0
    4fd0:	41 9e 00 0c 	beq-    cr7,4fdc <gss_unwrap_resp+0x20c>
				mic_offset - data_offset))
		return status;
    4fd4:	80 01 00 3c 	lwz     r0,60(r1)
    4fd8:	48 00 00 f8 	b       50d0 <gss_unwrap_resp+0x300>

	if (xdr_buf_read_netobj(rcv_buf, &mic, mic_offset))
    4fdc:	38 01 00 b0 	addi    r0,r1,176
    4fe0:	80 61 00 38 	lwz     r3,56(r1)
    4fe4:	7c 04 03 78 	mr      r4,r0
    4fe8:	80 a1 00 48 	lwz     r5,72(r1)
    4fec:	48 00 00 01 	bl      4fec <gss_unwrap_resp+0x21c>
    4ff0:	7c 60 1b 78 	mr      r0,r3
    4ff4:	2f 80 00 00 	cmpwi   cr7,r0,0
    4ff8:	41 9e 00 0c 	beq-    cr7,5004 <gss_unwrap_resp+0x234>
		return status;
    4ffc:	80 01 00 3c 	lwz     r0,60(r1)
    5000:	48 00 00 d0 	b       50d0 <gss_unwrap_resp+0x300>

	maj_stat = gss_verify_mic(ctx->gc_gss_ctx, &integ_buf, &mic);
    5004:	80 01 00 2c 	lwz     r0,44(r1)
    5008:	7c 09 03 78 	mr      r9,r0
    500c:	81 69 00 0c 	lwz     r11,12(r9)
    5010:	39 21 00 b8 	addi    r9,r1,184
    5014:	38 01 00 b0 	addi    r0,r1,176
    5018:	7d 63 5b 78 	mr      r3,r11
    501c:	7d 24 4b 78 	mr      r4,r9
    5020:	7c 05 03 78 	mr      r5,r0
    5024:	48 00 00 01 	bl      5024 <gss_unwrap_resp+0x254>
    5028:	90 61 00 4c 	stw     r3,76(r1)
	if (maj_stat == GSS_S_CONTEXT_EXPIRED)
    502c:	81 21 00 4c 	lwz     r9,76(r1)
    5030:	3c 00 00 0c 	lis     r0,12
    5034:	7f 89 00 00 	cmpw    cr7,r9,r0
    5038:	40 9e 00 80 	bne-    cr7,50b8 <gss_unwrap_resp+0x2e8>
		clear_bit(RPCAUTH_CRED_UPTODATE, &cred->cr_flags);
    503c:	80 01 00 28 	lwz     r0,40(r1)
    5040:	30 00 00 28 	addic   r0,r0,40
    5044:	39 20 00 01 	li      r9,1
    5048:	91 21 00 50 	stw     r9,80(r1)
    504c:	90 01 00 54 	stw     r0,84(r1)
	set_bits(BITOP_MASK(nr), addr + BITOP_WORD(nr));
}

static __inline__ void clear_bit(int nr, volatile unsigned long *addr)
{
	clear_bits(BITOP_MASK(nr), addr + BITOP_WORD(nr));
    5050:	80 01 00 50 	lwz     r0,80(r1)
    5054:	7c 09 2e 70 	srawi   r9,r0,5
    5058:	7d 29 01 94 	addze   r9,r9
    505c:	55 29 28 34 	rlwinm  r9,r9,5,0,26
    5060:	7c 09 00 50 	subf    r0,r9,r0
    5064:	39 20 00 01 	li      r9,1
    5068:	7d 29 00 30 	slw     r9,r9,r0
    506c:	80 01 00 50 	lwz     r0,80(r1)
    5070:	7c 00 2e 70 	srawi   r0,r0,5
    5074:	7c 00 01 94 	addze   r0,r0
    5078:	54 00 10 3a 	rlwinm  r0,r0,2,0,29
    507c:	81 61 00 54 	lwz     r11,84(r1)
    5080:	7c 0b 02 14 	add     r0,r11,r0
    5084:	91 21 00 58 	stw     r9,88(r1)
    5088:	90 01 00 5c 	stw     r0,92(r1)
	: "r" (mask), "r" (p)			\
	: "cc", "memory");			\
}

DEFINE_BITOP(set_bits, or, "", "")
DEFINE_BITOP(clear_bits, andc, "", "")
    508c:	80 01 00 5c 	lwz     r0,92(r1)
    5090:	90 01 00 60 	stw     r0,96(r1)
    5094:	81 41 00 60 	lwz     r10,96(r1)
    5098:	80 01 00 58 	lwz     r0,88(r1)
    509c:	81 21 00 60 	lwz     r9,96(r1)
    50a0:	81 61 00 60 	lwz     r11,96(r1)
    50a4:	7f e0 48 28 	lwarx   r31,0,r9
    50a8:	7f ff 00 78 	andc    r31,r31,r0
    50ac:	7f e0 49 2d 	stwcx.  r31,0,r9
    50b0:	40 a2 ff f4 	bne-    50a4 <gss_unwrap_resp+0x2d4>
    50b4:	93 e1 00 64 	stw     r31,100(r1)
	if (maj_stat != GSS_S_COMPLETE)
    50b8:	80 01 00 4c 	lwz     r0,76(r1)
    50bc:	2f 80 00 00 	cmpwi   cr7,r0,0
    50c0:	41 9e 00 0c 	beq-    cr7,50cc <gss_unwrap_resp+0x2fc>
		return status;
    50c4:	80 01 00 3c 	lwz     r0,60(r1)
    50c8:	48 00 00 08 	b       50d0 <gss_unwrap_resp+0x300>
	return 0;
    50cc:	38 00 00 00 	li      r0,0
		goto out_decode;
	switch (gss_cred->gc_service) {
		case RPC_GSS_SVC_NONE:
			break;
		case RPC_GSS_SVC_INTEGRITY:
			status = gss_unwrap_resp_integ(cred, ctx, rqstp, &p);
    50d0:	90 01 00 08 	stw     r0,8(r1)
			if (status)
    50d4:	80 01 00 08 	lwz     r0,8(r1)
    50d8:	2f 80 00 00 	cmpwi   cr7,r0,0
    50dc:	41 9e 01 f8 	beq-    cr7,52d4 <gss_unwrap_resp+0x504>
				goto out;
    50e0:	48 00 02 70 	b       5350 <gss_unwrap_resp+0x580>
			break;
    50e4:	80 01 00 0c 	lwz     r0,12(r1)
    50e8:	90 01 00 68 	stw     r0,104(r1)
    50ec:	80 01 00 18 	lwz     r0,24(r1)
    50f0:	90 01 00 6c 	stw     r0,108(r1)
    50f4:	80 01 00 f0 	lwz     r0,240(r1)
    50f8:	90 01 00 70 	stw     r0,112(r1)
		case RPC_GSS_SVC_PRIVACY:
			status = gss_unwrap_resp_priv(cred, ctx, rqstp, &p);
    50fc:	38 01 00 f4 	addi    r0,r1,244
			break;
		case RPC_GSS_SVC_INTEGRITY:
			status = gss_unwrap_resp_integ(cred, ctx, rqstp, &p);
			if (status)
				goto out;
			break;
    5100:	90 01 00 74 	stw     r0,116(r1)

static inline int
gss_unwrap_resp_priv(struct rpc_cred *cred, struct gss_cl_ctx *ctx,
		struct rpc_rqst *rqstp, __be32 **p)
{
	struct xdr_buf  *rcv_buf = &rqstp->rq_rcv_buf;
    5104:	80 01 00 70 	lwz     r0,112(r1)
    5108:	30 00 00 2c 	addic   r0,r0,44
    510c:	90 01 00 78 	stw     r0,120(r1)
	u32 offset;
	u32 opaque_len;
	u32 maj_stat;
	int status = -EIO;
    5110:	38 00 ff fb 	li      r0,-5
    5114:	90 01 00 7c 	stw     r0,124(r1)

	opaque_len = ntohl(*(*p)++);
    5118:	80 01 00 74 	lwz     r0,116(r1)
    511c:	7c 0a 03 78 	mr      r10,r0
    5120:	80 0a 00 00 	lwz     r0,0(r10)
    5124:	7c 0b 03 78 	mr      r11,r0
    5128:	81 2b 00 00 	lwz     r9,0(r11)
    512c:	91 21 00 80 	stw     r9,128(r1)
    5130:	31 20 00 04 	addic   r9,r0,4
    5134:	80 01 00 74 	lwz     r0,116(r1)
    5138:	7c 0a 03 78 	mr      r10,r0
    513c:	91 2a 00 00 	stw     r9,0(r10)
	offset = (u8 *)(*p) - (u8 *)rcv_buf->head[0].iov_base;
    5140:	80 01 00 74 	lwz     r0,116(r1)
    5144:	7c 0b 03 78 	mr      r11,r0
    5148:	80 0b 00 00 	lwz     r0,0(r11)
    514c:	7c 09 03 78 	mr      r9,r0
    5150:	80 01 00 78 	lwz     r0,120(r1)
    5154:	7c 0a 03 78 	mr      r10,r0
    5158:	80 0a 00 00 	lwz     r0,0(r10)
    515c:	7c 00 48 50 	subf    r0,r0,r9
    5160:	90 01 00 84 	stw     r0,132(r1)
	if (offset + opaque_len > rcv_buf->len)
    5164:	81 21 00 80 	lwz     r9,128(r1)
    5168:	80 01 00 84 	lwz     r0,132(r1)
    516c:	7d 29 02 14 	add     r9,r9,r0
    5170:	80 01 00 78 	lwz     r0,120(r1)
    5174:	7c 0b 03 78 	mr      r11,r0
    5178:	80 0b 00 24 	lwz     r0,36(r11)
    517c:	7f 89 00 40 	cmplw   cr7,r9,r0
    5180:	40 9d 00 0c 	ble-    cr7,518c <gss_unwrap_resp+0x3bc>
		return status;
    5184:	80 01 00 7c 	lwz     r0,124(r1)
    5188:	48 00 01 38 	b       52c0 <gss_unwrap_resp+0x4f0>
	/* remove padding: */
	rcv_buf->len = offset + opaque_len;
    518c:	81 21 00 80 	lwz     r9,128(r1)
    5190:	80 01 00 84 	lwz     r0,132(r1)
    5194:	7d 29 02 14 	add     r9,r9,r0
    5198:	80 01 00 78 	lwz     r0,120(r1)
    519c:	7c 0a 03 78 	mr      r10,r0
    51a0:	91 2a 00 24 	stw     r9,36(r10)

	maj_stat = gss_unwrap(ctx->gc_gss_ctx, offset, rcv_buf);
    51a4:	80 01 00 6c 	lwz     r0,108(r1)
    51a8:	7c 0b 03 78 	mr      r11,r0
    51ac:	81 2b 00 0c 	lwz     r9,12(r11)
    51b0:	80 01 00 84 	lwz     r0,132(r1)
    51b4:	7d 23 4b 78 	mr      r3,r9
    51b8:	7c 04 03 78 	mr      r4,r0
    51bc:	80 a1 00 78 	lwz     r5,120(r1)
    51c0:	48 00 00 01 	bl      51c0 <gss_unwrap_resp+0x3f0>
    51c4:	90 61 00 88 	stw     r3,136(r1)
	if (maj_stat == GSS_S_CONTEXT_EXPIRED)
    51c8:	81 21 00 88 	lwz     r9,136(r1)
    51cc:	3c 00 00 0c 	lis     r0,12
    51d0:	7f 89 00 00 	cmpw    cr7,r9,r0
    51d4:	40 9e 00 80 	bne-    cr7,5254 <gss_unwrap_resp+0x484>
		clear_bit(RPCAUTH_CRED_UPTODATE, &cred->cr_flags);
    51d8:	80 01 00 68 	lwz     r0,104(r1)
    51dc:	30 00 00 28 	addic   r0,r0,40
    51e0:	39 20 00 01 	li      r9,1
    51e4:	91 21 00 8c 	stw     r9,140(r1)
    51e8:	90 01 00 90 	stw     r0,144(r1)
	set_bits(BITOP_MASK(nr), addr + BITOP_WORD(nr));
}

static __inline__ void clear_bit(int nr, volatile unsigned long *addr)
{
	clear_bits(BITOP_MASK(nr), addr + BITOP_WORD(nr));
    51ec:	80 01 00 8c 	lwz     r0,140(r1)
    51f0:	7c 09 2e 70 	srawi   r9,r0,5
    51f4:	7d 29 01 94 	addze   r9,r9
    51f8:	55 29 28 34 	rlwinm  r9,r9,5,0,26
    51fc:	7c 09 00 50 	subf    r0,r9,r0
    5200:	39 20 00 01 	li      r9,1
    5204:	7d 29 00 30 	slw     r9,r9,r0
    5208:	80 01 00 8c 	lwz     r0,140(r1)
    520c:	7c 00 2e 70 	srawi   r0,r0,5
    5210:	7c 00 01 94 	addze   r0,r0
    5214:	54 00 10 3a 	rlwinm  r0,r0,2,0,29
    5218:	81 61 00 90 	lwz     r11,144(r1)
    521c:	7c 0b 02 14 	add     r0,r11,r0
    5220:	91 21 00 94 	stw     r9,148(r1)
    5224:	90 01 00 98 	stw     r0,152(r1)
	: "r" (mask), "r" (p)			\
	: "cc", "memory");			\
}

DEFINE_BITOP(set_bits, or, "", "")
DEFINE_BITOP(clear_bits, andc, "", "")
    5228:	80 01 00 98 	lwz     r0,152(r1)
    522c:	90 01 00 9c 	stw     r0,156(r1)
    5230:	81 41 00 9c 	lwz     r10,156(r1)
    5234:	80 01 00 94 	lwz     r0,148(r1)
    5238:	81 21 00 9c 	lwz     r9,156(r1)
    523c:	81 61 00 9c 	lwz     r11,156(r1)
    5240:	7f e0 48 28 	lwarx   r31,0,r9
    5244:	7f ff 00 78 	andc    r31,r31,r0
    5248:	7f e0 49 2d 	stwcx.  r31,0,r9
    524c:	40 a2 ff f4 	bne-    5240 <gss_unwrap_resp+0x470>
    5250:	93 e1 00 a0 	stw     r31,160(r1)
	if (maj_stat != GSS_S_COMPLETE)
    5254:	80 01 00 88 	lwz     r0,136(r1)
    5258:	2f 80 00 00 	cmpwi   cr7,r0,0
    525c:	41 9e 00 0c 	beq-    cr7,5268 <gss_unwrap_resp+0x498>
		return status;
    5260:	80 01 00 7c 	lwz     r0,124(r1)
    5264:	48 00 00 5c 	b       52c0 <gss_unwrap_resp+0x4f0>
	if (ntohl(*(*p)++) != rqstp->rq_seqno)
    5268:	80 01 00 74 	lwz     r0,116(r1)
    526c:	7c 09 03 78 	mr      r9,r0
    5270:	80 09 00 00 	lwz     r0,0(r9)
    5274:	7c 0a 03 78 	mr      r10,r0
    5278:	81 6a 00 00 	lwz     r11,0(r10)
    527c:	81 21 00 70 	lwz     r9,112(r1)
    5280:	81 29 00 64 	lwz     r9,100(r9)
    5284:	7d 69 4a 78 	xor     r9,r11,r9
    5288:	2f 89 00 00 	cmpwi   cr7,r9,0
    528c:	7d 20 00 26 	mfcr    r9
    5290:	55 29 ff fe 	rlwinm  r9,r9,31,31,31
    5294:	69 29 00 01 	xori    r9,r9,1
    5298:	55 29 06 3e 	clrlwi  r9,r9,24
    529c:	31 60 00 04 	addic   r11,r0,4
    52a0:	80 01 00 74 	lwz     r0,116(r1)
    52a4:	7c 0a 03 78 	mr      r10,r0
    52a8:	91 6a 00 00 	stw     r11,0(r10)
    52ac:	2f 89 00 00 	cmpwi   cr7,r9,0
    52b0:	41 9e 00 0c 	beq-    cr7,52bc <gss_unwrap_resp+0x4ec>
		return status;
    52b4:	80 01 00 7c 	lwz     r0,124(r1)
    52b8:	48 00 00 08 	b       52c0 <gss_unwrap_resp+0x4f0>

	return 0;
    52bc:	38 00 00 00 	li      r0,0
			status = gss_unwrap_resp_integ(cred, ctx, rqstp, &p);
			if (status)
				goto out;
			break;
		case RPC_GSS_SVC_PRIVACY:
			status = gss_unwrap_resp_priv(cred, ctx, rqstp, &p);
    52c0:	90 01 00 08 	stw     r0,8(r1)
			if (status)
    52c4:	80 01 00 08 	lwz     r0,8(r1)
    52c8:	2f 80 00 00 	cmpwi   cr7,r0,0
    52cc:	40 9e 00 80 	bne-    cr7,534c <gss_unwrap_resp+0x57c>
				goto out;
			break;
    52d0:	48 00 00 08 	b       52d8 <gss_unwrap_resp+0x508>
			break;
		case RPC_GSS_SVC_INTEGRITY:
			status = gss_unwrap_resp_integ(cred, ctx, rqstp, &p);
			if (status)
				goto out;
			break;
    52d4:	60 00 00 00 	nop
			if (status)
				goto out;
			break;
	}
	/* take into account extra slack for integrity and privacy cases: */
	cred->cr_auth->au_rslack = cred->cr_auth->au_verfsize + (p - savedp)
    52d8:	80 01 00 0c 	lwz     r0,12(r1)
    52dc:	7c 0b 03 78 	mr      r11,r0
    52e0:	80 0b 00 18 	lwz     r0,24(r11)
    52e4:	81 21 00 0c 	lwz     r9,12(r1)
    52e8:	81 29 00 18 	lwz     r9,24(r9)
    52ec:	81 69 00 08 	lwz     r11,8(r9)
    52f0:	81 21 00 f4 	lwz     r9,244(r1)
    52f4:	7d 2a 4b 78 	mr      r10,r9
    52f8:	81 21 00 1c 	lwz     r9,28(r1)
    52fc:	7d 29 50 50 	subf    r9,r9,r10
    5300:	7d 29 16 70 	srawi   r9,r9,2
    5304:	7d 6b 4a 14 	add     r11,r11,r9
						+ (savedlen - head->iov_len);
    5308:	81 41 00 24 	lwz     r10,36(r1)
    530c:	81 21 00 20 	lwz     r9,32(r1)
    5310:	81 29 00 04 	lwz     r9,4(r9)
    5314:	7d 29 50 50 	subf    r9,r9,r10
    5318:	7d 2b 4a 14 	add     r9,r11,r9
			if (status)
				goto out;
			break;
	}
	/* take into account extra slack for integrity and privacy cases: */
	cred->cr_auth->au_rslack = cred->cr_auth->au_verfsize + (p - savedp)
    531c:	7c 0a 03 78 	mr      r10,r0
    5320:	91 2a 00 04 	stw     r9,4(r10)
    5324:	48 00 00 08 	b       532c <gss_unwrap_resp+0x55c>
	struct kvec	*head = ((struct rpc_rqst *)rqstp)->rq_rcv_buf.head;
	int		savedlen = head->iov_len;
	int             status = -EIO;

	if (ctx->gc_proc != RPC_GSS_PROC_DATA)
		goto out_decode;
    5328:	60 00 00 00 	nop
	}
	/* take into account extra slack for integrity and privacy cases: */
	cred->cr_auth->au_rslack = cred->cr_auth->au_verfsize + (p - savedp)
						+ (savedlen - head->iov_len);
out_decode:
	status = gss_unwrap_req_decode(decode, rqstp, p, obj);
    532c:	80 01 00 f4 	lwz     r0,244(r1)
    5330:	80 61 00 ec 	lwz     r3,236(r1)
    5334:	80 81 00 f0 	lwz     r4,240(r1)
    5338:	7c 05 03 78 	mr      r5,r0
    533c:	80 c1 00 f8 	lwz     r6,248(r1)
    5340:	4b ff fa 25 	bl      4d64 <gss_unwrap_req_decode>
    5344:	90 61 00 08 	stw     r3,8(r1)
    5348:	48 00 00 08 	b       5350 <gss_unwrap_resp+0x580>
				goto out;
			break;
		case RPC_GSS_SVC_PRIVACY:
			status = gss_unwrap_resp_priv(cred, ctx, rqstp, &p);
			if (status)
				goto out;
    534c:	60 00 00 00 	nop
	}
	/* take into account extra slack for integrity and privacy cases: */
	cred->cr_auth->au_rslack = cred->cr_auth->au_verfsize + (p - savedp)
						+ (savedlen - head->iov_len);
out_decode:
	status = gss_unwrap_req_decode(decode, rqstp, p, obj);
    5350:	80 01 00 18 	lwz     r0,24(r1)
    5354:	90 01 00 a4 	stw     r0,164(r1)
}

static inline void
gss_put_ctx(struct gss_cl_ctx *ctx)
{
	if (atomic_dec_and_test(&ctx->count))
    5358:	80 01 00 a4 	lwz     r0,164(r1)
    535c:	90 01 00 a8 	stw     r0,168(r1)
	PPC405_ERR77(0,%1)
"	stwcx.	%0,0,%1\n\
	bne-	1b"
	PPC_ACQUIRE_BARRIER
	: "=&r" (t)
	: "r" (&v->counter)
    5360:	80 01 00 a8 	lwz     r0,168(r1)

static __inline__ int atomic_dec_return(atomic_t *v)
{
	int t;

	__asm__ __volatile__(
    5364:	7f e0 00 28 	lwarx   r31,0,r0
    5368:	33 ff ff ff 	addic   r31,r31,-1
    536c:	7f e0 01 2d 	stwcx.  r31,0,r0
    5370:	40 a2 ff f4 	bne-    5364 <gss_unwrap_resp+0x594>
    5374:	93 e1 00 ac 	stw     r31,172(r1)
	PPC_ACQUIRE_BARRIER
	: "=&r" (t)
	: "r" (&v->counter)
	: "cc", "xer", "memory");

	return t;
    5378:	80 01 00 ac 	lwz     r0,172(r1)
    537c:	2f 80 00 00 	cmpwi   cr7,r0,0
    5380:	40 9e 00 0c 	bne-    cr7,538c <gss_unwrap_resp+0x5bc>
		gss_free_ctx(ctx);
    5384:	80 61 00 a4 	lwz     r3,164(r1)
    5388:	4b ff d5 c5 	bl      294c <gss_free_ctx>
						+ (savedlen - head->iov_len);
out_decode:
	status = gss_unwrap_req_decode(decode, rqstp, p, obj);
out:
	gss_put_ctx(ctx);
	dprintk("RPC: %5u gss_unwrap_resp returning %d\n", task->tk_pid,
    538c:	3c 00 00 00 	lis     r0,0
    5390:	7c 0b 03 78 	mr      r11,r0
    5394:	80 0b 00 00 	lwz     r0,0(r11)
    5398:	54 00 06 f6 	rlwinm  r0,r0,0,27,27
    539c:	2f 80 00 00 	cmpwi   cr7,r0,0
    53a0:	7c 00 00 26 	mfcr    r0
    53a4:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
    53a8:	68 00 00 01 	xori    r0,r0,1
    53ac:	2f 80 00 00 	cmpwi   cr7,r0,0
    53b0:	41 9e 00 28 	beq-    cr7,53d8 <gss_unwrap_resp+0x608>
    53b4:	80 01 00 e8 	lwz     r0,232(r1)
    53b8:	7c 09 03 78 	mr      r9,r0
    53bc:	a0 09 00 74 	lhz     r0,116(r9)
    53c0:	54 00 04 3e 	clrlwi  r0,r0,16
    53c4:	3d 20 00 00 	lis     r9,0
    53c8:	38 69 05 a0 	addi    r3,r9,1440
    53cc:	7c 04 03 78 	mr      r4,r0
    53d0:	80 a1 00 08 	lwz     r5,8(r1)
    53d4:	48 00 00 01 	bl      53d4 <gss_unwrap_resp+0x604>
			status);
	return status;
    53d8:	80 01 00 08 	lwz     r0,8(r1)
}
    53dc:	7c 03 03 78 	mr      r3,r0
    53e0:	80 01 01 14 	lwz     r0,276(r1)
    53e4:	7c 08 03 a6 	mtlr    r0
    53e8:	83 e1 01 0c 	lwz     r31,268(r1)
    53ec:	38 21 01 10 	addi    r1,r1,272
    53f0:	4e 80 00 20 	blr

000053f4 <der_length_size>:

*/

static int
der_length_size( int length)
{
    53f4:	94 21 ff f0 	stwu    r1,-16(r1)
    53f8:	90 61 00 08 	stw     r3,8(r1)
	if (length < (1<<7))
    53fc:	80 01 00 08 	lwz     r0,8(r1)
    5400:	2f 80 00 7f 	cmpwi   cr7,r0,127
    5404:	41 9d 00 0c 	bgt-    cr7,5410 <der_length_size+0x1c>
		return 1;
    5408:	38 00 00 01 	li      r0,1
    540c:	48 00 00 54 	b       5460 <der_length_size+0x6c>
	else if (length < (1<<8))
    5410:	80 01 00 08 	lwz     r0,8(r1)
    5414:	2f 80 00 ff 	cmpwi   cr7,r0,255
    5418:	41 9d 00 0c 	bgt-    cr7,5424 <der_length_size+0x30>
		return 2;
    541c:	38 00 00 02 	li      r0,2
    5420:	48 00 00 40 	b       5460 <der_length_size+0x6c>
#if (SIZEOF_INT == 2)
	else
		return 3;
#else
	else if (length < (1<<16))
    5424:	81 21 00 08 	lwz     r9,8(r1)
    5428:	38 00 00 00 	li      r0,0
    542c:	60 00 ff ff 	ori     r0,r0,65535
    5430:	7f 89 00 00 	cmpw    cr7,r9,r0
    5434:	41 9d 00 0c 	bgt-    cr7,5440 <der_length_size+0x4c>
		return 3;
    5438:	38 00 00 03 	li      r0,3
    543c:	48 00 00 24 	b       5460 <der_length_size+0x6c>
	else if (length < (1<<24))
    5440:	81 21 00 08 	lwz     r9,8(r1)
    5444:	3c 00 00 ff 	lis     r0,255
    5448:	60 00 ff ff 	ori     r0,r0,65535
    544c:	7f 89 00 00 	cmpw    cr7,r9,r0
    5450:	41 9d 00 0c 	bgt-    cr7,545c <der_length_size+0x68>
		return 4;
    5454:	38 00 00 04 	li      r0,4
    5458:	48 00 00 08 	b       5460 <der_length_size+0x6c>
	else
		return 5;
    545c:	38 00 00 05 	li      r0,5
#endif
}
    5460:	7c 03 03 78 	mr      r3,r0
    5464:	38 21 00 10 	addi    r1,r1,16
    5468:	4e 80 00 20 	blr

0000546c <der_write_length>:

static void
der_write_length(unsigned char **buf, int length)
{
    546c:	94 21 ff e0 	stwu    r1,-32(r1)
    5470:	7c 08 02 a6 	mflr    r0
    5474:	90 01 00 24 	stw     r0,36(r1)
    5478:	93 e1 00 1c 	stw     r31,28(r1)
    547c:	90 61 00 08 	stw     r3,8(r1)
    5480:	90 81 00 0c 	stw     r4,12(r1)
	if (length < (1<<7)) {
    5484:	80 01 00 0c 	lwz     r0,12(r1)
    5488:	2f 80 00 7f 	cmpwi   cr7,r0,127
    548c:	41 9d 00 34 	bgt-    cr7,54c0 <der_write_length+0x54>
		*(*buf)++ = (unsigned char) length;
    5490:	80 01 00 08 	lwz     r0,8(r1)
    5494:	7c 09 03 78 	mr      r9,r0
    5498:	80 09 00 00 	lwz     r0,0(r9)
    549c:	81 21 00 0c 	lwz     r9,12(r1)
    54a0:	55 29 06 3e 	clrlwi  r9,r9,24
    54a4:	7c 0b 03 78 	mr      r11,r0
    54a8:	99 2b 00 00 	stb     r9,0(r11)
    54ac:	31 20 00 01 	addic   r9,r0,1
    54b0:	80 01 00 08 	lwz     r0,8(r1)
    54b4:	7c 0b 03 78 	mr      r11,r0
    54b8:	91 2b 00 00 	stw     r9,0(r11)
    54bc:	48 00 01 2c 	b       55e8 <der_write_length+0x17c>
	} else {
		*(*buf)++ = (unsigned char) (der_length_size(length)+127);
    54c0:	80 01 00 08 	lwz     r0,8(r1)
    54c4:	7c 09 03 78 	mr      r9,r0
    54c8:	83 e9 00 00 	lwz     r31,0(r9)
    54cc:	80 61 00 0c 	lwz     r3,12(r1)
    54d0:	4b ff ff 25 	bl      53f4 <der_length_size>
    54d4:	7c 60 1b 78 	mr      r0,r3
    54d8:	54 00 06 3e 	clrlwi  r0,r0,24
    54dc:	30 00 00 7f 	addic   r0,r0,127
    54e0:	54 00 06 3e 	clrlwi  r0,r0,24
    54e4:	98 1f 00 00 	stb     r0,0(r31)
    54e8:	39 3f 00 01 	addi    r9,r31,1
    54ec:	80 01 00 08 	lwz     r0,8(r1)
    54f0:	7c 0b 03 78 	mr      r11,r0
    54f4:	91 2b 00 00 	stw     r9,0(r11)
#if (SIZEOF_INT > 2)
		if (length >= (1<<24))
    54f8:	81 21 00 0c 	lwz     r9,12(r1)
    54fc:	3c 00 00 ff 	lis     r0,255
    5500:	60 00 ff ff 	ori     r0,r0,65535
    5504:	7f 89 00 00 	cmpw    cr7,r9,r0
    5508:	40 9d 00 34 	ble-    cr7,553c <der_write_length+0xd0>
			*(*buf)++ = (unsigned char) (length>>24);
    550c:	80 01 00 08 	lwz     r0,8(r1)
    5510:	7c 09 03 78 	mr      r9,r0
    5514:	80 09 00 00 	lwz     r0,0(r9)
    5518:	81 21 00 0c 	lwz     r9,12(r1)
    551c:	7d 29 c6 70 	srawi   r9,r9,24
    5520:	55 29 06 3e 	clrlwi  r9,r9,24
    5524:	7c 0b 03 78 	mr      r11,r0
    5528:	99 2b 00 00 	stb     r9,0(r11)
    552c:	31 20 00 01 	addic   r9,r0,1
    5530:	80 01 00 08 	lwz     r0,8(r1)
    5534:	7c 0b 03 78 	mr      r11,r0
    5538:	91 2b 00 00 	stw     r9,0(r11)
		if (length >= (1<<16))
    553c:	81 21 00 0c 	lwz     r9,12(r1)
    5540:	38 00 00 00 	li      r0,0
    5544:	60 00 ff ff 	ori     r0,r0,65535
    5548:	7f 89 00 00 	cmpw    cr7,r9,r0
    554c:	40 9d 00 34 	ble-    cr7,5580 <der_write_length+0x114>
			*(*buf)++ = (unsigned char) ((length>>16)&0xff);
    5550:	80 01 00 08 	lwz     r0,8(r1)
    5554:	7c 09 03 78 	mr      r9,r0
    5558:	80 09 00 00 	lwz     r0,0(r9)
    555c:	81 21 00 0c 	lwz     r9,12(r1)
    5560:	7d 29 86 70 	srawi   r9,r9,16
    5564:	55 29 06 3e 	clrlwi  r9,r9,24
    5568:	7c 0b 03 78 	mr      r11,r0
    556c:	99 2b 00 00 	stb     r9,0(r11)
    5570:	31 20 00 01 	addic   r9,r0,1
    5574:	80 01 00 08 	lwz     r0,8(r1)
    5578:	7c 0b 03 78 	mr      r11,r0
    557c:	91 2b 00 00 	stw     r9,0(r11)
#endif
		if (length >= (1<<8))
    5580:	80 01 00 0c 	lwz     r0,12(r1)
    5584:	2f 80 00 ff 	cmpwi   cr7,r0,255
    5588:	40 9d 00 34 	ble-    cr7,55bc <der_write_length+0x150>
			*(*buf)++ = (unsigned char) ((length>>8)&0xff);
    558c:	80 01 00 08 	lwz     r0,8(r1)
    5590:	7c 09 03 78 	mr      r9,r0
    5594:	80 09 00 00 	lwz     r0,0(r9)
    5598:	81 21 00 0c 	lwz     r9,12(r1)
    559c:	7d 29 46 70 	srawi   r9,r9,8
    55a0:	55 29 06 3e 	clrlwi  r9,r9,24
    55a4:	7c 0b 03 78 	mr      r11,r0
    55a8:	99 2b 00 00 	stb     r9,0(r11)
    55ac:	31 20 00 01 	addic   r9,r0,1
    55b0:	80 01 00 08 	lwz     r0,8(r1)
    55b4:	7c 0b 03 78 	mr      r11,r0
    55b8:	91 2b 00 00 	stw     r9,0(r11)
		*(*buf)++ = (unsigned char) (length&0xff);
    55bc:	80 01 00 08 	lwz     r0,8(r1)
    55c0:	7c 09 03 78 	mr      r9,r0
    55c4:	80 09 00 00 	lwz     r0,0(r9)
    55c8:	81 21 00 0c 	lwz     r9,12(r1)
    55cc:	55 29 06 3e 	clrlwi  r9,r9,24
    55d0:	7c 0b 03 78 	mr      r11,r0
    55d4:	99 2b 00 00 	stb     r9,0(r11)
    55d8:	31 20 00 01 	addic   r9,r0,1
    55dc:	80 01 00 08 	lwz     r0,8(r1)
    55e0:	7c 0b 03 78 	mr      r11,r0
    55e4:	91 2b 00 00 	stw     r9,0(r11)
	}
}
    55e8:	80 01 00 24 	lwz     r0,36(r1)
    55ec:	7c 08 03 a6 	mtlr    r0
    55f0:	83 e1 00 1c 	lwz     r31,28(r1)
    55f4:	38 21 00 20 	addi    r1,r1,32
    55f8:	4e 80 00 20 	blr

000055fc <der_read_length>:
/* returns decoded length, or < 0 on failure.  Advances buf and
   decrements bufsize */

static int
der_read_length(unsigned char **buf, int *bufsize)
{
    55fc:	94 21 ff e0 	stwu    r1,-32(r1)
    5600:	90 61 00 18 	stw     r3,24(r1)
    5604:	90 81 00 1c 	stw     r4,28(r1)
	unsigned char sf;
	int ret;

	if (*bufsize < 1)
    5608:	80 01 00 1c 	lwz     r0,28(r1)
    560c:	7c 09 03 78 	mr      r9,r0
    5610:	80 09 00 00 	lwz     r0,0(r9)
    5614:	2f 80 00 00 	cmpwi   cr7,r0,0
    5618:	41 9d 00 0c 	bgt-    cr7,5624 <der_read_length+0x28>
		return -1;
    561c:	38 00 ff ff 	li      r0,-1
    5620:	48 00 01 34 	b       5754 <der_read_length+0x158>
	sf = *(*buf)++;
    5624:	80 01 00 18 	lwz     r0,24(r1)
    5628:	7c 0a 03 78 	mr      r10,r0
    562c:	80 0a 00 00 	lwz     r0,0(r10)
    5630:	7c 0b 03 78 	mr      r11,r0
    5634:	89 2b 00 00 	lbz     r9,0(r11)
    5638:	99 21 00 08 	stb     r9,8(r1)
    563c:	31 20 00 01 	addic   r9,r0,1
    5640:	80 01 00 18 	lwz     r0,24(r1)
    5644:	7c 0a 03 78 	mr      r10,r0
    5648:	91 2a 00 00 	stw     r9,0(r10)
	(*bufsize)--;
    564c:	80 01 00 1c 	lwz     r0,28(r1)
    5650:	7c 0b 03 78 	mr      r11,r0
    5654:	80 0b 00 00 	lwz     r0,0(r11)
    5658:	31 20 ff ff 	addic   r9,r0,-1
    565c:	80 01 00 1c 	lwz     r0,28(r1)
    5660:	7c 0a 03 78 	mr      r10,r0
    5664:	91 2a 00 00 	stw     r9,0(r10)
	if (sf & 0x80) {
    5668:	88 01 00 08 	lbz     r0,8(r1)
    566c:	7c 00 07 74 	extsb   r0,r0
    5670:	2f 80 00 00 	cmpwi   cr7,r0,0
    5674:	40 9c 00 d0 	bge-    cr7,5744 <der_read_length+0x148>
		if ((sf &= 0x7f) > ((*bufsize)-1))
    5678:	88 01 00 08 	lbz     r0,8(r1)
    567c:	54 00 06 7e 	clrlwi  r0,r0,25
    5680:	98 01 00 08 	stb     r0,8(r1)
    5684:	88 01 00 08 	lbz     r0,8(r1)
    5688:	54 09 06 3e 	clrlwi  r9,r0,24
    568c:	80 01 00 1c 	lwz     r0,28(r1)
    5690:	7c 0b 03 78 	mr      r11,r0
    5694:	80 0b 00 00 	lwz     r0,0(r11)
    5698:	30 00 ff ff 	addic   r0,r0,-1
    569c:	7f 89 00 00 	cmpw    cr7,r9,r0
    56a0:	40 9d 00 0c 	ble-    cr7,56ac <der_read_length+0xb0>
			return -1;
    56a4:	38 00 ff ff 	li      r0,-1
    56a8:	48 00 00 ac 	b       5754 <der_read_length+0x158>
		if (sf > SIZEOF_INT)
    56ac:	88 01 00 08 	lbz     r0,8(r1)
    56b0:	54 00 06 3e 	clrlwi  r0,r0,24
    56b4:	2b 80 00 04 	cmplwi  cr7,r0,4
    56b8:	40 9d 00 0c 	ble-    cr7,56c4 <der_read_length+0xc8>
			return -1;
    56bc:	38 00 ff ff 	li      r0,-1
    56c0:	48 00 00 94 	b       5754 <der_read_length+0x158>
		ret = 0;
    56c4:	38 00 00 00 	li      r0,0
    56c8:	90 01 00 0c 	stw     r0,12(r1)
		for (; sf; sf--) {
    56cc:	48 00 00 64 	b       5730 <der_read_length+0x134>
			ret = (ret<<8) + (*(*buf)++);
    56d0:	80 01 00 0c 	lwz     r0,12(r1)
    56d4:	54 0b 40 2e 	rlwinm  r11,r0,8,0,23
    56d8:	80 01 00 18 	lwz     r0,24(r1)
    56dc:	7c 09 03 78 	mr      r9,r0
    56e0:	80 09 00 00 	lwz     r0,0(r9)
    56e4:	7c 0a 03 78 	mr      r10,r0
    56e8:	89 2a 00 00 	lbz     r9,0(r10)
    56ec:	55 29 06 3e 	clrlwi  r9,r9,24
    56f0:	7d 2b 4a 14 	add     r9,r11,r9
    56f4:	91 21 00 0c 	stw     r9,12(r1)
    56f8:	31 20 00 01 	addic   r9,r0,1
    56fc:	80 01 00 18 	lwz     r0,24(r1)
    5700:	7c 0b 03 78 	mr      r11,r0
    5704:	91 2b 00 00 	stw     r9,0(r11)
			(*bufsize)--;
    5708:	80 01 00 1c 	lwz     r0,28(r1)
    570c:	7c 09 03 78 	mr      r9,r0
    5710:	80 09 00 00 	lwz     r0,0(r9)
    5714:	31 20 ff ff 	addic   r9,r0,-1
    5718:	80 01 00 1c 	lwz     r0,28(r1)
    571c:	7c 0a 03 78 	mr      r10,r0
    5720:	91 2a 00 00 	stw     r9,0(r10)
		if ((sf &= 0x7f) > ((*bufsize)-1))
			return -1;
		if (sf > SIZEOF_INT)
			return -1;
		ret = 0;
		for (; sf; sf--) {
    5724:	88 01 00 08 	lbz     r0,8(r1)
    5728:	30 00 ff ff 	addic   r0,r0,-1
    572c:	98 01 00 08 	stb     r0,8(r1)
    5730:	88 01 00 08 	lbz     r0,8(r1)
    5734:	54 00 06 3e 	clrlwi  r0,r0,24
    5738:	2f 80 00 00 	cmpwi   cr7,r0,0
    573c:	40 9e ff 94 	bne+    cr7,56d0 <der_read_length+0xd4>
    5740:	48 00 00 10 	b       5750 <der_read_length+0x154>
			ret = (ret<<8) + (*(*buf)++);
			(*bufsize)--;
		}
	} else {
		ret = sf;
    5744:	88 01 00 08 	lbz     r0,8(r1)
    5748:	54 00 06 3e 	clrlwi  r0,r0,24
    574c:	90 01 00 0c 	stw     r0,12(r1)
	}

	return ret;
    5750:	80 01 00 0c 	lwz     r0,12(r1)
}
    5754:	7c 03 03 78 	mr      r3,r0
    5758:	38 21 00 20 	addi    r1,r1,32
    575c:	4e 80 00 20 	blr

00005760 <g_token_size>:

/* returns the length of a token, given the mech oid and the body size */

int
g_token_size(struct xdr_netobj *mech, unsigned int body_size)
{
    5760:	94 21 ff f0 	stwu    r1,-16(r1)
    5764:	7c 08 02 a6 	mflr    r0
    5768:	90 01 00 14 	stw     r0,20(r1)
    576c:	90 61 00 08 	stw     r3,8(r1)
    5770:	90 81 00 0c 	stw     r4,12(r1)
	/* set body_size to sequence contents size */
	body_size += 2 + (int) mech->len;         /* NEED overflow check */
    5774:	80 01 00 08 	lwz     r0,8(r1)
    5778:	7c 0b 03 78 	mr      r11,r0
    577c:	81 2b 00 00 	lwz     r9,0(r11)
    5780:	80 01 00 0c 	lwz     r0,12(r1)
    5784:	7c 09 02 14 	add     r0,r9,r0
    5788:	30 00 00 02 	addic   r0,r0,2
    578c:	90 01 00 0c 	stw     r0,12(r1)
	return 1 + der_length_size(body_size) + body_size;
    5790:	80 01 00 0c 	lwz     r0,12(r1)
    5794:	7c 03 03 78 	mr      r3,r0
    5798:	4b ff fc 5d 	bl      53f4 <der_length_size>
    579c:	7c 60 1b 78 	mr      r0,r3
    57a0:	7c 09 03 78 	mr      r9,r0
    57a4:	80 01 00 0c 	lwz     r0,12(r1)
    57a8:	7c 09 02 14 	add     r0,r9,r0
    57ac:	30 00 00 01 	addic   r0,r0,1
}
    57b0:	7c 03 03 78 	mr      r3,r0
    57b4:	80 01 00 14 	lwz     r0,20(r1)
    57b8:	7c 08 03 a6 	mtlr    r0
    57bc:	38 21 00 10 	addi    r1,r1,16
    57c0:	4e 80 00 20 	blr

000057c4 <g_make_token_header>:
/* fills in a buffer with the token header.  The buffer is assumed to
   be the right size.  buf is advanced past the token header */

void
g_make_token_header(struct xdr_netobj *mech, int body_size, unsigned char **buf)
{
    57c4:	94 21 ff e0 	stwu    r1,-32(r1)
    57c8:	7c 08 02 a6 	mflr    r0
    57cc:	90 01 00 24 	stw     r0,36(r1)
    57d0:	90 61 00 08 	stw     r3,8(r1)
    57d4:	90 81 00 0c 	stw     r4,12(r1)
    57d8:	90 a1 00 10 	stw     r5,16(r1)
	*(*buf)++ = 0x60;
    57dc:	80 01 00 10 	lwz     r0,16(r1)
    57e0:	7c 09 03 78 	mr      r9,r0
    57e4:	80 09 00 00 	lwz     r0,0(r9)
    57e8:	39 20 00 60 	li      r9,96
    57ec:	7c 0a 03 78 	mr      r10,r0
    57f0:	99 2a 00 00 	stb     r9,0(r10)
    57f4:	31 20 00 01 	addic   r9,r0,1
    57f8:	80 01 00 10 	lwz     r0,16(r1)
    57fc:	7c 0b 03 78 	mr      r11,r0
    5800:	91 2b 00 00 	stw     r9,0(r11)
	der_write_length(buf, 2 + mech->len + body_size);
    5804:	80 01 00 08 	lwz     r0,8(r1)
    5808:	7c 0a 03 78 	mr      r10,r0
    580c:	81 2a 00 00 	lwz     r9,0(r10)
    5810:	80 01 00 0c 	lwz     r0,12(r1)
    5814:	7c 09 02 14 	add     r0,r9,r0
    5818:	30 00 00 02 	addic   r0,r0,2
    581c:	80 61 00 10 	lwz     r3,16(r1)
    5820:	7c 04 03 78 	mr      r4,r0
    5824:	4b ff fc 49 	bl      546c <der_write_length>
	*(*buf)++ = 0x06;
    5828:	80 01 00 10 	lwz     r0,16(r1)
    582c:	7c 0b 03 78 	mr      r11,r0
    5830:	80 0b 00 00 	lwz     r0,0(r11)
    5834:	39 20 00 06 	li      r9,6
    5838:	7c 0a 03 78 	mr      r10,r0
    583c:	99 2a 00 00 	stb     r9,0(r10)
    5840:	31 20 00 01 	addic   r9,r0,1
    5844:	80 01 00 10 	lwz     r0,16(r1)
    5848:	7c 0b 03 78 	mr      r11,r0
    584c:	91 2b 00 00 	stw     r9,0(r11)
	*(*buf)++ = (unsigned char) mech->len;
    5850:	80 01 00 10 	lwz     r0,16(r1)
    5854:	7c 09 03 78 	mr      r9,r0
    5858:	80 09 00 00 	lwz     r0,0(r9)
    585c:	81 21 00 08 	lwz     r9,8(r1)
    5860:	81 29 00 00 	lwz     r9,0(r9)
    5864:	55 29 06 3e 	clrlwi  r9,r9,24
    5868:	7c 0a 03 78 	mr      r10,r0
    586c:	99 2a 00 00 	stb     r9,0(r10)
    5870:	31 20 00 01 	addic   r9,r0,1
    5874:	80 01 00 10 	lwz     r0,16(r1)
    5878:	7c 0b 03 78 	mr      r11,r0
    587c:	91 2b 00 00 	stw     r9,0(r11)
	TWRITE_STR(*buf, mech->data, ((int) mech->len));
    5880:	80 01 00 10 	lwz     r0,16(r1)
    5884:	7c 09 03 78 	mr      r9,r0
    5888:	81 69 00 00 	lwz     r11,0(r9)
    588c:	80 01 00 08 	lwz     r0,8(r1)
    5890:	7c 0a 03 78 	mr      r10,r0
    5894:	81 2a 00 04 	lwz     r9,4(r10)
    5898:	80 01 00 08 	lwz     r0,8(r1)
    589c:	7c 0a 03 78 	mr      r10,r0
    58a0:	80 0a 00 00 	lwz     r0,0(r10)
    58a4:	7d 63 5b 78 	mr      r3,r11
    58a8:	7d 24 4b 78 	mr      r4,r9
    58ac:	7c 05 03 78 	mr      r5,r0
    58b0:	48 00 00 01 	bl      58b0 <g_make_token_header+0xec>
    58b4:	80 01 00 10 	lwz     r0,16(r1)
    58b8:	7c 0b 03 78 	mr      r11,r0
    58bc:	81 2b 00 00 	lwz     r9,0(r11)
    58c0:	80 01 00 08 	lwz     r0,8(r1)
    58c4:	7c 0a 03 78 	mr      r10,r0
    58c8:	80 0a 00 00 	lwz     r0,0(r10)
    58cc:	7d 29 02 14 	add     r9,r9,r0
    58d0:	80 01 00 10 	lwz     r0,16(r1)
    58d4:	7c 0b 03 78 	mr      r11,r0
    58d8:	91 2b 00 00 	stw     r9,0(r11)
}
    58dc:	80 01 00 24 	lwz     r0,36(r1)
    58e0:	7c 08 03 a6 	mtlr    r0
    58e4:	38 21 00 20 	addi    r1,r1,32
    58e8:	4e 80 00 20 	blr

000058ec <g_verify_token_header>:
 * *body_size are left unmodified on error.
 */
u32
g_verify_token_header(struct xdr_netobj *mech, int *body_size,
		      unsigned char **buf_in, int toksize)
{
    58ec:	94 21 ff c0 	stwu    r1,-64(r1)
    58f0:	7c 08 02 a6 	mflr    r0
    58f4:	90 01 00 44 	stw     r0,68(r1)
    58f8:	90 61 00 28 	stw     r3,40(r1)
    58fc:	90 81 00 2c 	stw     r4,44(r1)
    5900:	90 a1 00 30 	stw     r5,48(r1)
    5904:	90 c1 00 34 	stw     r6,52(r1)
	unsigned char *buf = *buf_in;
    5908:	80 01 00 30 	lwz     r0,48(r1)
    590c:	7c 09 03 78 	mr      r9,r0
    5910:	80 09 00 00 	lwz     r0,0(r9)
    5914:	90 01 00 10 	stw     r0,16(r1)
	int seqsize;
	struct xdr_netobj toid;
	int ret = 0;
    5918:	38 00 00 00 	li      r0,0
    591c:	90 01 00 08 	stw     r0,8(r1)

	if ((toksize-=1) < 0)
    5920:	80 01 00 34 	lwz     r0,52(r1)
    5924:	30 00 ff ff 	addic   r0,r0,-1
    5928:	90 01 00 34 	stw     r0,52(r1)
    592c:	80 01 00 34 	lwz     r0,52(r1)
    5930:	2f 80 00 00 	cmpwi   cr7,r0,0
    5934:	40 9c 00 10 	bge-    cr7,5944 <g_verify_token_header+0x58>
		return G_BAD_TOK_HEADER;
    5938:	3c 00 86 1b 	lis     r0,-31205
    593c:	60 00 6d 0c 	ori     r0,r0,27916
    5940:	48 00 02 34 	b       5b74 <g_verify_token_header+0x288>
	if (*buf++ != 0x60)
    5944:	80 01 00 10 	lwz     r0,16(r1)
    5948:	7c 0a 03 78 	mr      r10,r0
    594c:	89 2a 00 00 	lbz     r9,0(r10)
    5950:	55 29 06 3e 	clrlwi  r9,r9,24
    5954:	69 29 00 60 	xori    r9,r9,96
    5958:	55 29 06 3e 	clrlwi  r9,r9,24
    595c:	7d 29 00 d0 	neg     r9,r9
    5960:	55 29 0f fe 	rlwinm  r9,r9,1,31,31
    5964:	55 29 06 3e 	clrlwi  r9,r9,24
    5968:	30 00 00 01 	addic   r0,r0,1
    596c:	90 01 00 10 	stw     r0,16(r1)
    5970:	2f 89 00 00 	cmpwi   cr7,r9,0
    5974:	41 9e 00 10 	beq-    cr7,5984 <g_verify_token_header+0x98>
		return G_BAD_TOK_HEADER;
    5978:	3c 00 86 1b 	lis     r0,-31205
    597c:	60 00 6d 0c 	ori     r0,r0,27916
    5980:	48 00 01 f4 	b       5b74 <g_verify_token_header+0x288>

	if ((seqsize = der_read_length(&buf, &toksize)) < 0)
    5984:	39 21 00 10 	addi    r9,r1,16
    5988:	38 01 00 34 	addi    r0,r1,52
    598c:	7d 23 4b 78 	mr      r3,r9
    5990:	7c 04 03 78 	mr      r4,r0
    5994:	4b ff fc 69 	bl      55fc <der_read_length>
    5998:	90 61 00 0c 	stw     r3,12(r1)
    599c:	80 01 00 0c 	lwz     r0,12(r1)
    59a0:	2f 80 00 00 	cmpwi   cr7,r0,0
    59a4:	40 9c 00 10 	bge-    cr7,59b4 <g_verify_token_header+0xc8>
		return G_BAD_TOK_HEADER;
    59a8:	3c 00 86 1b 	lis     r0,-31205
    59ac:	60 00 6d 0c 	ori     r0,r0,27916
    59b0:	48 00 01 c4 	b       5b74 <g_verify_token_header+0x288>

	if (seqsize != toksize)
    59b4:	80 01 00 34 	lwz     r0,52(r1)
    59b8:	81 21 00 0c 	lwz     r9,12(r1)
    59bc:	7f 89 00 00 	cmpw    cr7,r9,r0
    59c0:	41 9e 00 10 	beq-    cr7,59d0 <g_verify_token_header+0xe4>
		return G_BAD_TOK_HEADER;
    59c4:	3c 00 86 1b 	lis     r0,-31205
    59c8:	60 00 6d 0c 	ori     r0,r0,27916
    59cc:	48 00 01 a8 	b       5b74 <g_verify_token_header+0x288>

	if ((toksize-=1) < 0)
    59d0:	80 01 00 34 	lwz     r0,52(r1)
    59d4:	30 00 ff ff 	addic   r0,r0,-1
    59d8:	90 01 00 34 	stw     r0,52(r1)
    59dc:	80 01 00 34 	lwz     r0,52(r1)
    59e0:	2f 80 00 00 	cmpwi   cr7,r0,0
    59e4:	40 9c 00 10 	bge-    cr7,59f4 <g_verify_token_header+0x108>
		return G_BAD_TOK_HEADER;
    59e8:	3c 00 86 1b 	lis     r0,-31205
    59ec:	60 00 6d 0c 	ori     r0,r0,27916
    59f0:	48 00 01 84 	b       5b74 <g_verify_token_header+0x288>
	if (*buf++ != 0x06)
    59f4:	80 01 00 10 	lwz     r0,16(r1)
    59f8:	7c 0b 03 78 	mr      r11,r0
    59fc:	89 2b 00 00 	lbz     r9,0(r11)
    5a00:	55 29 06 3e 	clrlwi  r9,r9,24
    5a04:	69 29 00 06 	xori    r9,r9,6
    5a08:	55 29 06 3e 	clrlwi  r9,r9,24
    5a0c:	7d 29 00 d0 	neg     r9,r9
    5a10:	55 29 0f fe 	rlwinm  r9,r9,1,31,31
    5a14:	55 29 06 3e 	clrlwi  r9,r9,24
    5a18:	30 00 00 01 	addic   r0,r0,1
    5a1c:	90 01 00 10 	stw     r0,16(r1)
    5a20:	2f 89 00 00 	cmpwi   cr7,r9,0
    5a24:	41 9e 00 10 	beq-    cr7,5a34 <g_verify_token_header+0x148>
		return G_BAD_TOK_HEADER;
    5a28:	3c 00 86 1b 	lis     r0,-31205
    5a2c:	60 00 6d 0c 	ori     r0,r0,27916
    5a30:	48 00 01 44 	b       5b74 <g_verify_token_header+0x288>

	if ((toksize-=1) < 0)
    5a34:	80 01 00 34 	lwz     r0,52(r1)
    5a38:	30 00 ff ff 	addic   r0,r0,-1
    5a3c:	90 01 00 34 	stw     r0,52(r1)
    5a40:	80 01 00 34 	lwz     r0,52(r1)
    5a44:	2f 80 00 00 	cmpwi   cr7,r0,0
    5a48:	40 9c 00 10 	bge-    cr7,5a58 <g_verify_token_header+0x16c>
		return G_BAD_TOK_HEADER;
    5a4c:	3c 00 86 1b 	lis     r0,-31205
    5a50:	60 00 6d 0c 	ori     r0,r0,27916
    5a54:	48 00 01 20 	b       5b74 <g_verify_token_header+0x288>
	toid.len = *buf++;
    5a58:	80 01 00 10 	lwz     r0,16(r1)
    5a5c:	7c 0a 03 78 	mr      r10,r0
    5a60:	89 2a 00 00 	lbz     r9,0(r10)
    5a64:	55 29 06 3e 	clrlwi  r9,r9,24
    5a68:	91 21 00 14 	stw     r9,20(r1)
    5a6c:	30 00 00 01 	addic   r0,r0,1
    5a70:	90 01 00 10 	stw     r0,16(r1)

	if ((toksize-=toid.len) < 0)
    5a74:	80 01 00 34 	lwz     r0,52(r1)
    5a78:	7c 09 03 78 	mr      r9,r0
    5a7c:	80 01 00 14 	lwz     r0,20(r1)
    5a80:	7c 00 48 50 	subf    r0,r0,r9
    5a84:	90 01 00 34 	stw     r0,52(r1)
    5a88:	80 01 00 34 	lwz     r0,52(r1)
    5a8c:	2f 80 00 00 	cmpwi   cr7,r0,0
    5a90:	40 9c 00 10 	bge-    cr7,5aa0 <g_verify_token_header+0x1b4>
		return G_BAD_TOK_HEADER;
    5a94:	3c 00 86 1b 	lis     r0,-31205
    5a98:	60 00 6d 0c 	ori     r0,r0,27916
    5a9c:	48 00 00 d8 	b       5b74 <g_verify_token_header+0x288>
	toid.data = buf;
    5aa0:	80 01 00 10 	lwz     r0,16(r1)
    5aa4:	90 01 00 18 	stw     r0,24(r1)
	buf+=toid.len;
    5aa8:	81 21 00 10 	lwz     r9,16(r1)
    5aac:	80 01 00 14 	lwz     r0,20(r1)
    5ab0:	7c 09 02 14 	add     r0,r9,r0
    5ab4:	90 01 00 10 	stw     r0,16(r1)

	if (! g_OID_equal(&toid, mech))
    5ab8:	81 21 00 14 	lwz     r9,20(r1)
    5abc:	80 01 00 28 	lwz     r0,40(r1)
    5ac0:	7c 0b 03 78 	mr      r11,r0
    5ac4:	80 0b 00 00 	lwz     r0,0(r11)
    5ac8:	7f 89 00 00 	cmpw    cr7,r9,r0
    5acc:	40 9e 00 34 	bne-    cr7,5b00 <g_verify_token_header+0x214>
    5ad0:	81 61 00 18 	lwz     r11,24(r1)
    5ad4:	80 01 00 28 	lwz     r0,40(r1)
    5ad8:	7c 0a 03 78 	mr      r10,r0
    5adc:	81 2a 00 04 	lwz     r9,4(r10)
    5ae0:	80 01 00 14 	lwz     r0,20(r1)
    5ae4:	7d 63 5b 78 	mr      r3,r11
    5ae8:	7d 24 4b 78 	mr      r4,r9
    5aec:	7c 05 03 78 	mr      r5,r0
    5af0:	48 00 00 01 	bl      5af0 <g_verify_token_header+0x204>
    5af4:	7c 60 1b 78 	mr      r0,r3
    5af8:	2f 80 00 00 	cmpwi   cr7,r0,0
    5afc:	41 9e 00 10 	beq-    cr7,5b0c <g_verify_token_header+0x220>
		ret = G_WRONG_MECH;
    5b00:	3c 00 86 1b 	lis     r0,-31205
    5b04:	60 00 6d 0b 	ori     r0,r0,27915
    5b08:	90 01 00 08 	stw     r0,8(r1)

   /* G_WRONG_MECH is not returned immediately because it's more important
      to return G_BAD_TOK_HEADER if the token header is in fact bad */

	if ((toksize-=2) < 0)
    5b0c:	80 01 00 34 	lwz     r0,52(r1)
    5b10:	30 00 ff fe 	addic   r0,r0,-2
    5b14:	90 01 00 34 	stw     r0,52(r1)
    5b18:	80 01 00 34 	lwz     r0,52(r1)
    5b1c:	2f 80 00 00 	cmpwi   cr7,r0,0
    5b20:	40 9c 00 10 	bge-    cr7,5b30 <g_verify_token_header+0x244>
		return G_BAD_TOK_HEADER;
    5b24:	3c 00 86 1b 	lis     r0,-31205
    5b28:	60 00 6d 0c 	ori     r0,r0,27916
    5b2c:	48 00 00 48 	b       5b74 <g_verify_token_header+0x288>

	if (ret)
    5b30:	80 01 00 08 	lwz     r0,8(r1)
    5b34:	2f 80 00 00 	cmpwi   cr7,r0,0
    5b38:	41 9e 00 0c 	beq-    cr7,5b44 <g_verify_token_header+0x258>
		return ret;
    5b3c:	80 01 00 08 	lwz     r0,8(r1)
    5b40:	48 00 00 34 	b       5b74 <g_verify_token_header+0x288>

	if (!ret) {
    5b44:	80 01 00 08 	lwz     r0,8(r1)
    5b48:	2f 80 00 00 	cmpwi   cr7,r0,0
    5b4c:	40 9e 00 24 	bne-    cr7,5b70 <g_verify_token_header+0x284>
		*buf_in = buf;
    5b50:	81 21 00 10 	lwz     r9,16(r1)
    5b54:	80 01 00 30 	lwz     r0,48(r1)
    5b58:	7c 0b 03 78 	mr      r11,r0
    5b5c:	91 2b 00 00 	stw     r9,0(r11)
		*body_size = toksize;
    5b60:	81 21 00 34 	lwz     r9,52(r1)
    5b64:	80 01 00 2c 	lwz     r0,44(r1)
    5b68:	7c 0a 03 78 	mr      r10,r0
    5b6c:	91 2a 00 00 	stw     r9,0(r10)
	}

	return ret;
    5b70:	80 01 00 08 	lwz     r0,8(r1)
}
    5b74:	7c 03 03 78 	mr      r3,r0
    5b78:	80 01 00 44 	lwz     r0,68(r1)
    5b7c:	7c 08 03 a6 	mtlr    r0
    5b80:	38 21 00 40 	addi    r1,r1,64
    5b84:	4e 80 00 20 	blr

00005b88 <gss_mech_free>:
static LIST_HEAD(registered_mechs);
static DEFINE_SPINLOCK(registered_mechs_lock);

static void
gss_mech_free(struct gss_api_mech *gm)
{
    5b88:	94 21 ff e0 	stwu    r1,-32(r1)
    5b8c:	7c 08 02 a6 	mflr    r0
    5b90:	90 01 00 24 	stw     r0,36(r1)
    5b94:	90 61 00 18 	stw     r3,24(r1)
	struct pf_desc *pf;
	int i;

	for (i = 0; i < gm->gm_pf_num; i++) {
    5b98:	38 00 00 00 	li      r0,0
    5b9c:	90 01 00 08 	stw     r0,8(r1)
    5ba0:	48 00 00 50 	b       5bf0 <gss_mech_free+0x68>
		pf = &gm->gm_pfs[i];
    5ba4:	80 01 00 18 	lwz     r0,24(r1)
    5ba8:	7c 0b 03 78 	mr      r11,r0
    5bac:	81 2b 00 20 	lwz     r9,32(r11)
    5bb0:	80 01 00 08 	lwz     r0,8(r1)
    5bb4:	54 00 20 36 	rlwinm  r0,r0,4,0,27
    5bb8:	7c 09 02 14 	add     r0,r9,r0
    5bbc:	90 01 00 0c 	stw     r0,12(r1)
		kfree(pf->auth_domain_name);
    5bc0:	80 01 00 0c 	lwz     r0,12(r1)
    5bc4:	7c 09 03 78 	mr      r9,r0
    5bc8:	80 09 00 0c 	lwz     r0,12(r9)
    5bcc:	7c 03 03 78 	mr      r3,r0
    5bd0:	48 00 00 01 	bl      5bd0 <gss_mech_free+0x48>
		pf->auth_domain_name = NULL;
    5bd4:	80 01 00 0c 	lwz     r0,12(r1)
    5bd8:	39 20 00 00 	li      r9,0
    5bdc:	7c 0b 03 78 	mr      r11,r0
    5be0:	91 2b 00 0c 	stw     r9,12(r11)
gss_mech_free(struct gss_api_mech *gm)
{
	struct pf_desc *pf;
	int i;

	for (i = 0; i < gm->gm_pf_num; i++) {
    5be4:	80 01 00 08 	lwz     r0,8(r1)
    5be8:	30 00 00 01 	addic   r0,r0,1
    5bec:	90 01 00 08 	stw     r0,8(r1)
    5bf0:	80 01 00 18 	lwz     r0,24(r1)
    5bf4:	7c 0b 03 78 	mr      r11,r0
    5bf8:	81 2b 00 1c 	lwz     r9,28(r11)
    5bfc:	80 01 00 08 	lwz     r0,8(r1)
    5c00:	7f 89 00 00 	cmpw    cr7,r9,r0
    5c04:	41 9d ff a0 	bgt+    cr7,5ba4 <gss_mech_free+0x1c>
		pf = &gm->gm_pfs[i];
		kfree(pf->auth_domain_name);
		pf->auth_domain_name = NULL;
	}
}
    5c08:	80 01 00 24 	lwz     r0,36(r1)
    5c0c:	7c 08 03 a6 	mtlr    r0
    5c10:	38 21 00 20 	addi    r1,r1,32
    5c14:	4e 80 00 20 	blr

00005c18 <gss_mech_svc_setup>:
	return new;
}

static int
gss_mech_svc_setup(struct gss_api_mech *gm)
{
    5c18:	94 21 ff c0 	stwu    r1,-64(r1)
    5c1c:	7c 08 02 a6 	mflr    r0
    5c20:	90 01 00 44 	stw     r0,68(r1)
    5c24:	93 e1 00 3c 	stw     r31,60(r1)
    5c28:	90 61 00 28 	stw     r3,40(r1)
	struct pf_desc *pf;
	int i, status;

	for (i = 0; i < gm->gm_pf_num; i++) {
    5c2c:	38 00 00 00 	li      r0,0
    5c30:	90 01 00 08 	stw     r0,8(r1)
    5c34:	48 00 01 20 	b       5d54 <gss_mech_svc_setup+0x13c>
		pf = &gm->gm_pfs[i];
    5c38:	80 01 00 28 	lwz     r0,40(r1)
    5c3c:	7c 0b 03 78 	mr      r11,r0
    5c40:	81 2b 00 20 	lwz     r9,32(r11)
    5c44:	80 01 00 08 	lwz     r0,8(r1)
    5c48:	54 00 20 36 	rlwinm  r0,r0,4,0,27
    5c4c:	7c 09 02 14 	add     r0,r9,r0
    5c50:	90 01 00 10 	stw     r0,16(r1)
		pf->auth_domain_name = make_auth_domain_name(pf->name);
    5c54:	80 01 00 10 	lwz     r0,16(r1)
    5c58:	7c 09 03 78 	mr      r9,r0
    5c5c:	80 09 00 08 	lwz     r0,8(r9)
    5c60:	90 01 00 14 	stw     r0,20(r1)
make_auth_domain_name(char *name)
{
	static char	*prefix = "gss/";
	char		*new;

	new = kmalloc(strlen(name) + strlen(prefix) + 1, GFP_KERNEL);
    5c64:	80 61 00 14 	lwz     r3,20(r1)
    5c68:	48 00 00 01 	bl      5c68 <gss_mech_svc_setup+0x50>
    5c6c:	7c 60 1b 78 	mr      r0,r3
    5c70:	7c 1f 03 78 	mr      r31,r0
    5c74:	3c 00 00 00 	lis     r0,0
    5c78:	7c 0b 03 78 	mr      r11,r0
    5c7c:	80 0b 00 08 	lwz     r0,8(r11)
    5c80:	7c 03 03 78 	mr      r3,r0
    5c84:	48 00 00 01 	bl      5c84 <gss_mech_svc_setup+0x6c>
    5c88:	7c 60 1b 78 	mr      r0,r3
    5c8c:	7c 1f 02 14 	add     r0,r31,r0
    5c90:	30 00 00 01 	addic   r0,r0,1
    5c94:	90 01 00 18 	stw     r0,24(r1)
    5c98:	38 00 00 d0 	li      r0,208
    5c9c:	90 01 00 1c 	stw     r0,28(r1)
    5ca0:	80 61 00 18 	lwz     r3,24(r1)
    5ca4:	80 81 00 1c 	lwz     r4,28(r1)
    5ca8:	48 00 00 01 	bl      5ca8 <gss_mech_svc_setup+0x90>
    5cac:	7c 60 1b 78 	mr      r0,r3
    5cb0:	90 01 00 20 	stw     r0,32(r1)
	if (new) {
    5cb4:	80 01 00 20 	lwz     r0,32(r1)
    5cb8:	2f 80 00 00 	cmpwi   cr7,r0,0
    5cbc:	41 9e 00 28 	beq-    cr7,5ce4 <gss_mech_svc_setup+0xcc>
		strcpy(new, prefix);
    5cc0:	3c 00 00 00 	lis     r0,0
    5cc4:	7c 09 03 78 	mr      r9,r0
    5cc8:	80 09 00 08 	lwz     r0,8(r9)
    5ccc:	80 61 00 20 	lwz     r3,32(r1)
    5cd0:	7c 04 03 78 	mr      r4,r0
    5cd4:	48 00 00 01 	bl      5cd4 <gss_mech_svc_setup+0xbc>
		strcat(new, name);
    5cd8:	80 61 00 20 	lwz     r3,32(r1)
    5cdc:	80 81 00 14 	lwz     r4,20(r1)
    5ce0:	48 00 00 01 	bl      5ce0 <gss_mech_svc_setup+0xc8>
	}
	return new;
    5ce4:	80 01 00 20 	lwz     r0,32(r1)
	struct pf_desc *pf;
	int i, status;

	for (i = 0; i < gm->gm_pf_num; i++) {
		pf = &gm->gm_pfs[i];
		pf->auth_domain_name = make_auth_domain_name(pf->name);
    5ce8:	7c 09 03 78 	mr      r9,r0
    5cec:	80 01 00 10 	lwz     r0,16(r1)
    5cf0:	7c 0b 03 78 	mr      r11,r0
    5cf4:	91 2b 00 0c 	stw     r9,12(r11)
		status = -ENOMEM;
    5cf8:	38 00 ff f4 	li      r0,-12
    5cfc:	90 01 00 0c 	stw     r0,12(r1)
		if (pf->auth_domain_name == NULL)
    5d00:	80 01 00 10 	lwz     r0,16(r1)
    5d04:	7c 09 03 78 	mr      r9,r0
    5d08:	80 09 00 0c 	lwz     r0,12(r9)
    5d0c:	2f 80 00 00 	cmpwi   cr7,r0,0
    5d10:	41 9e 00 64 	beq-    cr7,5d74 <gss_mech_svc_setup+0x15c>
			goto out;
		status = svcauth_gss_register_pseudoflavor(pf->pseudoflavor,
    5d14:	80 01 00 10 	lwz     r0,16(r1)
    5d18:	7c 0b 03 78 	mr      r11,r0
    5d1c:	81 2b 00 00 	lwz     r9,0(r11)
							pf->auth_domain_name);
    5d20:	80 01 00 10 	lwz     r0,16(r1)
		pf = &gm->gm_pfs[i];
		pf->auth_domain_name = make_auth_domain_name(pf->name);
		status = -ENOMEM;
		if (pf->auth_domain_name == NULL)
			goto out;
		status = svcauth_gss_register_pseudoflavor(pf->pseudoflavor,
    5d24:	7c 0b 03 78 	mr      r11,r0
    5d28:	80 0b 00 0c 	lwz     r0,12(r11)
    5d2c:	7d 23 4b 78 	mr      r3,r9
    5d30:	7c 04 03 78 	mr      r4,r0
    5d34:	48 00 00 01 	bl      5d34 <gss_mech_svc_setup+0x11c>
    5d38:	90 61 00 0c 	stw     r3,12(r1)
							pf->auth_domain_name);
		if (status)
    5d3c:	80 01 00 0c 	lwz     r0,12(r1)
    5d40:	2f 80 00 00 	cmpwi   cr7,r0,0
    5d44:	40 9e 00 38 	bne-    cr7,5d7c <gss_mech_svc_setup+0x164>
gss_mech_svc_setup(struct gss_api_mech *gm)
{
	struct pf_desc *pf;
	int i, status;

	for (i = 0; i < gm->gm_pf_num; i++) {
    5d48:	80 01 00 08 	lwz     r0,8(r1)
    5d4c:	30 00 00 01 	addic   r0,r0,1
    5d50:	90 01 00 08 	stw     r0,8(r1)
    5d54:	80 01 00 28 	lwz     r0,40(r1)
    5d58:	7c 0b 03 78 	mr      r11,r0
    5d5c:	81 2b 00 1c 	lwz     r9,28(r11)
    5d60:	80 01 00 08 	lwz     r0,8(r1)
    5d64:	7f 89 00 00 	cmpw    cr7,r9,r0
    5d68:	41 9d fe d0 	bgt+    cr7,5c38 <gss_mech_svc_setup+0x20>
		status = svcauth_gss_register_pseudoflavor(pf->pseudoflavor,
							pf->auth_domain_name);
		if (status)
			goto out;
	}
	return 0;
    5d6c:	38 00 00 00 	li      r0,0
    5d70:	48 00 00 1c 	b       5d8c <gss_mech_svc_setup+0x174>
	for (i = 0; i < gm->gm_pf_num; i++) {
		pf = &gm->gm_pfs[i];
		pf->auth_domain_name = make_auth_domain_name(pf->name);
		status = -ENOMEM;
		if (pf->auth_domain_name == NULL)
			goto out;
    5d74:	60 00 00 00 	nop
    5d78:	48 00 00 08 	b       5d80 <gss_mech_svc_setup+0x168>
		status = svcauth_gss_register_pseudoflavor(pf->pseudoflavor,
							pf->auth_domain_name);
		if (status)
			goto out;
    5d7c:	60 00 00 00 	nop
	}
	return 0;
out:
	gss_mech_free(gm);
    5d80:	80 61 00 28 	lwz     r3,40(r1)
    5d84:	4b ff fe 05 	bl      5b88 <gss_mech_free>
	return status;
    5d88:	80 01 00 0c 	lwz     r0,12(r1)
}
    5d8c:	7c 03 03 78 	mr      r3,r0
    5d90:	80 01 00 44 	lwz     r0,68(r1)
    5d94:	7c 08 03 a6 	mtlr    r0
    5d98:	83 e1 00 3c 	lwz     r31,60(r1)
    5d9c:	38 21 00 40 	addi    r1,r1,64
    5da0:	4e 80 00 20 	blr

00005da4 <gss_mech_register>:

int
gss_mech_register(struct gss_api_mech *gm)
{
    5da4:	94 21 ff d0 	stwu    r1,-48(r1)
    5da8:	7c 08 02 a6 	mflr    r0
    5dac:	90 01 00 34 	stw     r0,52(r1)
    5db0:	90 61 00 28 	stw     r3,40(r1)
	int status;

	status = gss_mech_svc_setup(gm);
    5db4:	80 61 00 28 	lwz     r3,40(r1)
    5db8:	4b ff fe 61 	bl      5c18 <gss_mech_svc_setup>
    5dbc:	90 61 00 08 	stw     r3,8(r1)
	if (status)
    5dc0:	80 01 00 08 	lwz     r0,8(r1)
    5dc4:	2f 80 00 00 	cmpwi   cr7,r0,0
    5dc8:	41 9e 00 0c 	beq-    cr7,5dd4 <gss_mech_register+0x30>
		return status;
    5dcc:	80 01 00 08 	lwz     r0,8(r1)
    5dd0:	48 00 00 d8 	b       5ea8 <gss_mech_register+0x104>
    5dd4:	3c 00 00 00 	lis     r0,0
    5dd8:	30 00 00 00 	addic   r0,r0,0
    5ddc:	90 01 00 20 	stw     r0,32(r1)
	spin_lock(&registered_mechs_lock);
	list_add(&gm->gm_list, &registered_mechs);
    5de0:	80 01 00 28 	lwz     r0,40(r1)
    5de4:	90 01 00 0c 	stw     r0,12(r1)
    5de8:	3c 00 00 00 	lis     r0,0
    5dec:	30 00 00 00 	addic   r0,r0,0
    5df0:	90 01 00 10 	stw     r0,16(r1)
 * Insert a new entry after the specified head.
 * This is good for implementing stacks.
 */
static inline void list_add(struct list_head *new, struct list_head *head)
{
	__list_add(new, head, head->next);
    5df4:	80 01 00 10 	lwz     r0,16(r1)
    5df8:	7c 09 03 78 	mr      r9,r0
    5dfc:	80 09 00 00 	lwz     r0,0(r9)
    5e00:	81 21 00 0c 	lwz     r9,12(r1)
    5e04:	91 21 00 14 	stw     r9,20(r1)
    5e08:	81 21 00 10 	lwz     r9,16(r1)
    5e0c:	91 21 00 18 	stw     r9,24(r1)
    5e10:	90 01 00 1c 	stw     r0,28(r1)
#ifndef CONFIG_DEBUG_LIST
static inline void __list_add(struct list_head *new,
			      struct list_head *prev,
			      struct list_head *next)
{
	next->prev = new;
    5e14:	80 01 00 1c 	lwz     r0,28(r1)
    5e18:	81 21 00 14 	lwz     r9,20(r1)
    5e1c:	7c 0b 03 78 	mr      r11,r0
    5e20:	91 2b 00 04 	stw     r9,4(r11)
	new->next = next;
    5e24:	80 01 00 14 	lwz     r0,20(r1)
    5e28:	81 21 00 1c 	lwz     r9,28(r1)
    5e2c:	7c 0b 03 78 	mr      r11,r0
    5e30:	91 2b 00 00 	stw     r9,0(r11)
	new->prev = prev;
    5e34:	80 01 00 14 	lwz     r0,20(r1)
    5e38:	81 21 00 18 	lwz     r9,24(r1)
    5e3c:	7c 0b 03 78 	mr      r11,r0
    5e40:	91 2b 00 04 	stw     r9,4(r11)
	prev->next = new;
    5e44:	80 01 00 18 	lwz     r0,24(r1)
    5e48:	81 21 00 14 	lwz     r9,20(r1)
    5e4c:	7c 0b 03 78 	mr      r11,r0
    5e50:	91 2b 00 00 	stw     r9,0(r11)
    5e54:	3c 00 00 00 	lis     r0,0
    5e58:	30 00 00 00 	addic   r0,r0,0
    5e5c:	90 01 00 24 	stw     r0,36(r1)
	spin_unlock(&registered_mechs_lock);
	dprintk("RPC:       registered gss mechanism %s\n", gm->gm_name);
    5e60:	3c 00 00 00 	lis     r0,0
    5e64:	7c 09 03 78 	mr      r9,r0
    5e68:	80 09 00 00 	lwz     r0,0(r9)
    5e6c:	54 00 06 f6 	rlwinm  r0,r0,0,27,27
    5e70:	2f 80 00 00 	cmpwi   cr7,r0,0
    5e74:	7c 00 00 26 	mfcr    r0
    5e78:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
    5e7c:	68 00 00 01 	xori    r0,r0,1
    5e80:	2f 80 00 00 	cmpwi   cr7,r0,0
    5e84:	41 9e 00 20 	beq-    cr7,5ea4 <gss_mech_register+0x100>
    5e88:	80 01 00 28 	lwz     r0,40(r1)
    5e8c:	7c 0b 03 78 	mr      r11,r0
    5e90:	80 0b 00 14 	lwz     r0,20(r11)
    5e94:	3d 20 00 00 	lis     r9,0
    5e98:	38 69 00 00 	addi    r3,r9,0
    5e9c:	7c 04 03 78 	mr      r4,r0
    5ea0:	48 00 00 01 	bl      5ea0 <gss_mech_register+0xfc>
	return 0;
    5ea4:	38 00 00 00 	li      r0,0
}
    5ea8:	7c 03 03 78 	mr      r3,r0
    5eac:	80 01 00 34 	lwz     r0,52(r1)
    5eb0:	7c 08 03 a6 	mtlr    r0
    5eb4:	38 21 00 30 	addi    r1,r1,48
    5eb8:	4e 80 00 20 	blr

00005ebc <gss_mech_unregister>:

EXPORT_SYMBOL_GPL(gss_mech_register);

void
gss_mech_unregister(struct gss_api_mech *gm)
{
    5ebc:	94 21 ff d0 	stwu    r1,-48(r1)
    5ec0:	7c 08 02 a6 	mflr    r0
    5ec4:	90 01 00 34 	stw     r0,52(r1)
    5ec8:	90 61 00 28 	stw     r3,40(r1)
    5ecc:	3c 00 00 00 	lis     r0,0
    5ed0:	30 00 00 00 	addic   r0,r0,0
    5ed4:	90 01 00 14 	stw     r0,20(r1)
	spin_lock(&registered_mechs_lock);
	list_del(&gm->gm_list);
    5ed8:	80 01 00 28 	lwz     r0,40(r1)
    5edc:	90 01 00 08 	stw     r0,8(r1)
	__list_del(entry->prev, entry->next);
}

static inline void list_del(struct list_head *entry)
{
	__list_del(entry->prev, entry->next);
    5ee0:	80 01 00 08 	lwz     r0,8(r1)
    5ee4:	7c 0b 03 78 	mr      r11,r0
    5ee8:	81 2b 00 04 	lwz     r9,4(r11)
    5eec:	80 01 00 08 	lwz     r0,8(r1)
    5ef0:	7c 0b 03 78 	mr      r11,r0
    5ef4:	80 0b 00 00 	lwz     r0,0(r11)
    5ef8:	91 21 00 0c 	stw     r9,12(r1)
    5efc:	90 01 00 10 	stw     r0,16(r1)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 */
static inline void __list_del(struct list_head * prev, struct list_head * next)
{
	next->prev = prev;
    5f00:	80 01 00 10 	lwz     r0,16(r1)
    5f04:	81 21 00 0c 	lwz     r9,12(r1)
    5f08:	7c 0b 03 78 	mr      r11,r0
    5f0c:	91 2b 00 04 	stw     r9,4(r11)
	prev->next = next;
    5f10:	80 01 00 0c 	lwz     r0,12(r1)
    5f14:	81 21 00 10 	lwz     r9,16(r1)
    5f18:	7c 0b 03 78 	mr      r11,r0
    5f1c:	91 2b 00 00 	stw     r9,0(r11)
}

static inline void list_del(struct list_head *entry)
{
	__list_del(entry->prev, entry->next);
	entry->next = LIST_POISON1;
    5f20:	80 01 00 08 	lwz     r0,8(r1)
    5f24:	3d 20 00 10 	lis     r9,16
    5f28:	61 29 01 00 	ori     r9,r9,256
    5f2c:	7c 0b 03 78 	mr      r11,r0
    5f30:	91 2b 00 00 	stw     r9,0(r11)
	entry->prev = LIST_POISON2;
    5f34:	80 01 00 08 	lwz     r0,8(r1)
    5f38:	3d 20 00 20 	lis     r9,32
    5f3c:	61 29 02 00 	ori     r9,r9,512
    5f40:	7c 0b 03 78 	mr      r11,r0
    5f44:	91 2b 00 04 	stw     r9,4(r11)
    5f48:	3c 00 00 00 	lis     r0,0
    5f4c:	30 00 00 00 	addic   r0,r0,0
    5f50:	90 01 00 18 	stw     r0,24(r1)
	spin_unlock(&registered_mechs_lock);
	dprintk("RPC:       unregistered gss mechanism %s\n", gm->gm_name);
    5f54:	3c 00 00 00 	lis     r0,0
    5f58:	7c 09 03 78 	mr      r9,r0
    5f5c:	80 09 00 00 	lwz     r0,0(r9)
    5f60:	54 00 06 f6 	rlwinm  r0,r0,0,27,27
    5f64:	2f 80 00 00 	cmpwi   cr7,r0,0
    5f68:	7c 00 00 26 	mfcr    r0
    5f6c:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
    5f70:	68 00 00 01 	xori    r0,r0,1
    5f74:	2f 80 00 00 	cmpwi   cr7,r0,0
    5f78:	41 9e 00 20 	beq-    cr7,5f98 <gss_mech_unregister+0xdc>
    5f7c:	80 01 00 28 	lwz     r0,40(r1)
    5f80:	7c 0b 03 78 	mr      r11,r0
    5f84:	80 0b 00 14 	lwz     r0,20(r11)
    5f88:	3d 20 00 00 	lis     r9,0
    5f8c:	38 69 00 28 	addi    r3,r9,40
    5f90:	7c 04 03 78 	mr      r4,r0
    5f94:	48 00 00 01 	bl      5f94 <gss_mech_unregister+0xd8>
	gss_mech_free(gm);
    5f98:	80 61 00 28 	lwz     r3,40(r1)
    5f9c:	4b ff fb ed 	bl      5b88 <gss_mech_free>
}
    5fa0:	80 01 00 34 	lwz     r0,52(r1)
    5fa4:	7c 08 03 a6 	mtlr    r0
    5fa8:	38 21 00 30 	addi    r1,r1,48
    5fac:	4e 80 00 20 	blr

00005fb0 <gss_mech_get>:

EXPORT_SYMBOL_GPL(gss_mech_unregister);

struct gss_api_mech *
gss_mech_get(struct gss_api_mech *gm)
{
    5fb0:	94 21 ff d0 	stwu    r1,-48(r1)
    5fb4:	90 61 00 28 	stw     r3,40(r1)
	__module_get(gm->gm_owner);
    5fb8:	80 01 00 28 	lwz     r0,40(r1)
    5fbc:	7c 09 03 78 	mr      r9,r0
    5fc0:	80 09 00 08 	lwz     r0,8(r9)
    5fc4:	90 01 00 08 	stw     r0,8(r1)

/* Sometimes we know we already have a refcount, and it's easier not
   to handle the error case (which only happens with rmmod --wait). */
static inline void __module_get(struct module *module)
{
	if (module) {
    5fc8:	80 01 00 08 	lwz     r0,8(r1)
    5fcc:	2f 80 00 00 	cmpwi   cr7,r0,0
    5fd0:	41 9e 00 48 	beq-    cr7,6018 <gss_mech_get+0x68>
		preempt_disable();
		__this_cpu_inc(module->refptr->incs);
    5fd4:	38 00 00 00 	li      r0,0
    5fd8:	90 01 00 0c 	stw     r0,12(r1)
    5fdc:	38 00 00 00 	li      r0,0
    5fe0:	90 01 00 10 	stw     r0,16(r1)
    5fe4:	80 01 00 08 	lwz     r0,8(r1)
    5fe8:	7c 0b 03 78 	mr      r11,r0
    5fec:	80 0b 01 48 	lwz     r0,328(r11)
    5ff0:	7c 0b 03 78 	mr      r11,r0
    5ff4:	81 2b 00 00 	lwz     r9,0(r11)
    5ff8:	39 29 00 01 	addi    r9,r9,1
    5ffc:	7c 0b 03 78 	mr      r11,r0
    6000:	91 2b 00 00 	stw     r9,0(r11)
		trace_module_get(module, _THIS_IP_);
    6004:	3c 00 00 00 	lis     r0,0
    6008:	30 00 04 7c 	addic   r0,r0,1148
    600c:	81 21 00 08 	lwz     r9,8(r1)
    6010:	91 21 00 14 	stw     r9,20(r1)
    6014:	90 01 00 18 	stw     r0,24(r1)
	return gm;
    6018:	80 01 00 28 	lwz     r0,40(r1)
}
    601c:	7c 03 03 78 	mr      r3,r0
    6020:	38 21 00 30 	addi    r1,r1,48
    6024:	4e 80 00 20 	blr

00006028 <gss_mech_get_by_name>:

EXPORT_SYMBOL_GPL(gss_mech_get);

struct gss_api_mech *
gss_mech_get_by_name(const char *name)
{
    6028:	94 21 ff b0 	stwu    r1,-80(r1)
    602c:	7c 08 02 a6 	mflr    r0
    6030:	90 01 00 54 	stw     r0,84(r1)
    6034:	90 61 00 48 	stw     r3,72(r1)
	struct gss_api_mech	*pos, *gm = NULL;
    6038:	38 00 00 00 	li      r0,0
    603c:	90 01 00 0c 	stw     r0,12(r1)
    6040:	3c 00 00 00 	lis     r0,0
    6044:	30 00 00 00 	addic   r0,r0,0
    6048:	90 01 00 38 	stw     r0,56(r1)

	spin_lock(&registered_mechs_lock);
	list_for_each_entry(pos, &registered_mechs, gm_list) {
    604c:	3c 00 00 00 	lis     r0,0
    6050:	30 00 00 00 	addic   r0,r0,0
    6054:	7c 09 03 78 	mr      r9,r0
    6058:	80 09 00 00 	lwz     r0,0(r9)
    605c:	90 01 00 10 	stw     r0,16(r1)
    6060:	80 01 00 10 	lwz     r0,16(r1)
    6064:	90 01 00 08 	stw     r0,8(r1)
    6068:	48 00 01 0c 	b       6174 <gss_mech_get_by_name+0x14c>
		if (0 == strcmp(name, pos->gm_name)) {
    606c:	80 01 00 08 	lwz     r0,8(r1)
    6070:	7c 0b 03 78 	mr      r11,r0
    6074:	80 0b 00 14 	lwz     r0,20(r11)
    6078:	80 61 00 48 	lwz     r3,72(r1)
    607c:	7c 04 03 78 	mr      r4,r0
    6080:	48 00 00 01 	bl      6080 <gss_mech_get_by_name+0x58>
    6084:	7c 60 1b 78 	mr      r0,r3
    6088:	2f 80 00 00 	cmpwi   cr7,r0,0
    608c:	40 9e 00 d0 	bne-    cr7,615c <gss_mech_get_by_name+0x134>
			if (try_module_get(pos->gm_owner))
    6090:	80 01 00 08 	lwz     r0,8(r1)
    6094:	7c 09 03 78 	mr      r9,r0
    6098:	80 09 00 08 	lwz     r0,8(r9)
    609c:	90 01 00 18 	stw     r0,24(r1)
	}
}

static inline int try_module_get(struct module *module)
{
	int ret = 1;
    60a0:	38 00 00 01 	li      r0,1
    60a4:	90 01 00 1c 	stw     r0,28(r1)

	if (module) {
    60a8:	80 01 00 18 	lwz     r0,24(r1)
    60ac:	2f 80 00 00 	cmpwi   cr7,r0,0
    60b0:	41 9e 00 94 	beq-    cr7,6144 <gss_mech_get_by_name+0x11c>
    60b4:	80 01 00 18 	lwz     r0,24(r1)
    60b8:	90 01 00 20 	stw     r0,32(r1)
/* FIXME: It'd be nice to isolate modules during init, too, so they
   aren't used before they (may) fail.  But presently too much code
   (IDE & SCSI) require entry into the module during init.*/
static inline int module_is_live(struct module *mod)
{
	return mod->state != MODULE_STATE_GOING;
    60bc:	80 01 00 20 	lwz     r0,32(r1)
    60c0:	7c 0b 03 78 	mr      r11,r0
    60c4:	80 0b 00 00 	lwz     r0,0(r11)
    60c8:	68 00 00 02 	xori    r0,r0,2
    60cc:	2f 80 00 00 	cmpwi   cr7,r0,0
    60d0:	7c 00 00 26 	mfcr    r0
    60d4:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
    60d8:	68 00 00 01 	xori    r0,r0,1
	int ret = 1;

	if (module) {
		preempt_disable();

		if (likely(module_is_live(module))) {
    60dc:	2f 80 00 00 	cmpwi   cr7,r0,0
    60e0:	7c 00 00 26 	mfcr    r0
    60e4:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
    60e8:	68 00 00 01 	xori    r0,r0,1
    60ec:	2f 80 00 00 	cmpwi   cr7,r0,0
    60f0:	41 9e 00 4c 	beq-    cr7,613c <gss_mech_get_by_name+0x114>
			__this_cpu_inc(module->refptr->incs);
    60f4:	38 00 00 00 	li      r0,0
    60f8:	90 01 00 24 	stw     r0,36(r1)
    60fc:	38 00 00 00 	li      r0,0
    6100:	90 01 00 28 	stw     r0,40(r1)
    6104:	80 01 00 18 	lwz     r0,24(r1)
    6108:	7c 09 03 78 	mr      r9,r0
    610c:	80 09 01 48 	lwz     r0,328(r9)
    6110:	7c 0b 03 78 	mr      r11,r0
    6114:	81 2b 00 00 	lwz     r9,0(r11)
    6118:	39 29 00 01 	addi    r9,r9,1
    611c:	7c 0b 03 78 	mr      r11,r0
    6120:	91 2b 00 00 	stw     r9,0(r11)
			trace_module_get(module, _THIS_IP_);
    6124:	3c 00 00 00 	lis     r0,0
    6128:	30 00 05 9c 	addic   r0,r0,1436
    612c:	81 21 00 18 	lwz     r9,24(r1)
    6130:	91 21 00 2c 	stw     r9,44(r1)
    6134:	90 01 00 30 	stw     r0,48(r1)
    6138:	48 00 00 0c 	b       6144 <gss_mech_get_by_name+0x11c>
		} else
			ret = 0;
    613c:	38 00 00 00 	li      r0,0
    6140:	90 01 00 1c 	stw     r0,28(r1)

		preempt_enable();
	}
	return ret;
    6144:	80 01 00 1c 	lwz     r0,28(r1)
    6148:	2f 80 00 00 	cmpwi   cr7,r0,0
    614c:	41 9e 00 70 	beq-    cr7,61bc <gss_mech_get_by_name+0x194>
				gm = pos;
    6150:	80 01 00 08 	lwz     r0,8(r1)
    6154:	90 01 00 0c 	stw     r0,12(r1)
			break;
    6158:	48 00 00 64 	b       61bc <gss_mech_get_by_name+0x194>
gss_mech_get_by_name(const char *name)
{
	struct gss_api_mech	*pos, *gm = NULL;

	spin_lock(&registered_mechs_lock);
	list_for_each_entry(pos, &registered_mechs, gm_list) {
    615c:	80 01 00 08 	lwz     r0,8(r1)
    6160:	7c 09 03 78 	mr      r9,r0
    6164:	80 09 00 00 	lwz     r0,0(r9)
    6168:	90 01 00 14 	stw     r0,20(r1)
    616c:	80 01 00 14 	lwz     r0,20(r1)
    6170:	90 01 00 08 	stw     r0,8(r1)
    6174:	80 01 00 08 	lwz     r0,8(r1)
    6178:	7c 0b 03 78 	mr      r11,r0
    617c:	80 0b 00 00 	lwz     r0,0(r11)
    6180:	90 01 00 34 	stw     r0,52(r1)
#define ARCH_HAS_PREFETCHW
#define ARCH_HAS_SPINLOCK_PREFETCH

static inline void prefetch(const void *x)
{
	if (unlikely(!x))
    6184:	80 01 00 34 	lwz     r0,52(r1)
    6188:	2f 80 00 00 	cmpwi   cr7,r0,0
    618c:	7c 00 00 26 	mfcr    r0
    6190:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
    6194:	2f 80 00 00 	cmpwi   cr7,r0,0
    6198:	40 9e 00 0c 	bne-    cr7,61a4 <gss_mech_get_by_name+0x17c>
		return;

	__asm__ __volatile__ ("dcbt 0,%0" : : "r" (x));
    619c:	80 01 00 34 	lwz     r0,52(r1)
    61a0:	7c 00 02 2c 	dcbt    r0,r0
    61a4:	81 21 00 08 	lwz     r9,8(r1)
    61a8:	3c 00 00 00 	lis     r0,0
    61ac:	30 00 00 00 	addic   r0,r0,0
    61b0:	7f 89 00 00 	cmpw    cr7,r9,r0
    61b4:	40 9e fe b8 	bne+    cr7,606c <gss_mech_get_by_name+0x44>
    61b8:	48 00 00 08 	b       61c0 <gss_mech_get_by_name+0x198>
		if (0 == strcmp(name, pos->gm_name)) {
			if (try_module_get(pos->gm_owner))
				gm = pos;
			break;
    61bc:	60 00 00 00 	nop
gss_mech_get_by_name(const char *name)
{
	struct gss_api_mech	*pos, *gm = NULL;

	spin_lock(&registered_mechs_lock);
	list_for_each_entry(pos, &registered_mechs, gm_list) {
    61c0:	3c 00 00 00 	lis     r0,0
    61c4:	30 00 00 00 	addic   r0,r0,0
    61c8:	90 01 00 3c 	stw     r0,60(r1)
				gm = pos;
			break;
		}
	}
	spin_unlock(&registered_mechs_lock);
	return gm;
    61cc:	80 01 00 0c 	lwz     r0,12(r1)

}
    61d0:	7c 03 03 78 	mr      r3,r0
    61d4:	80 01 00 54 	lwz     r0,84(r1)
    61d8:	7c 08 03 a6 	mtlr    r0
    61dc:	38 21 00 50 	addi    r1,r1,80
    61e0:	4e 80 00 20 	blr

000061e4 <gss_mech_get_by_pseudoflavor>:
	return 0;
}

struct gss_api_mech *
gss_mech_get_by_pseudoflavor(u32 pseudoflavor)
{
    61e4:	94 21 ff a0 	stwu    r1,-96(r1)
    61e8:	7c 08 02 a6 	mflr    r0
    61ec:	90 01 00 64 	stw     r0,100(r1)
    61f0:	90 61 00 58 	stw     r3,88(r1)
	struct gss_api_mech *pos, *gm = NULL;
    61f4:	38 00 00 00 	li      r0,0
    61f8:	90 01 00 0c 	stw     r0,12(r1)
    61fc:	3c 00 00 00 	lis     r0,0
    6200:	30 00 00 00 	addic   r0,r0,0
    6204:	90 01 00 44 	stw     r0,68(r1)

	spin_lock(&registered_mechs_lock);
	list_for_each_entry(pos, &registered_mechs, gm_list) {
    6208:	3c 00 00 00 	lis     r0,0
    620c:	30 00 00 00 	addic   r0,r0,0
    6210:	7c 09 03 78 	mr      r9,r0
    6214:	80 09 00 00 	lwz     r0,0(r9)
    6218:	90 01 00 10 	stw     r0,16(r1)
    621c:	80 01 00 10 	lwz     r0,16(r1)
    6220:	90 01 00 08 	stw     r0,8(r1)
    6224:	48 00 01 80 	b       63a4 <gss_mech_get_by_pseudoflavor+0x1c0>
    6228:	80 01 00 08 	lwz     r0,8(r1)
    622c:	90 01 00 18 	stw     r0,24(r1)
    6230:	80 01 00 58 	lwz     r0,88(r1)
    6234:	90 01 00 1c 	stw     r0,28(r1)
static inline int
mech_supports_pseudoflavor(struct gss_api_mech *gm, u32 pseudoflavor)
{
	int i;

	for (i = 0; i < gm->gm_pf_num; i++) {
    6238:	38 00 00 00 	li      r0,0
    623c:	90 01 00 20 	stw     r0,32(r1)
    6240:	48 00 00 44 	b       6284 <gss_mech_get_by_pseudoflavor+0xa0>
		if (gm->gm_pfs[i].pseudoflavor == pseudoflavor)
    6244:	80 01 00 18 	lwz     r0,24(r1)
    6248:	7c 0b 03 78 	mr      r11,r0
    624c:	81 2b 00 20 	lwz     r9,32(r11)
    6250:	80 01 00 20 	lwz     r0,32(r1)
    6254:	54 00 20 36 	rlwinm  r0,r0,4,0,27
    6258:	7c 09 02 14 	add     r0,r9,r0
    625c:	7c 09 03 78 	mr      r9,r0
    6260:	80 09 00 00 	lwz     r0,0(r9)
    6264:	81 21 00 1c 	lwz     r9,28(r1)
    6268:	7f 89 00 00 	cmpw    cr7,r9,r0
    626c:	40 9e 00 0c 	bne-    cr7,6278 <gss_mech_get_by_pseudoflavor+0x94>
			return 1;
    6270:	38 00 00 01 	li      r0,1
    6274:	48 00 00 2c 	b       62a0 <gss_mech_get_by_pseudoflavor+0xbc>
static inline int
mech_supports_pseudoflavor(struct gss_api_mech *gm, u32 pseudoflavor)
{
	int i;

	for (i = 0; i < gm->gm_pf_num; i++) {
    6278:	80 01 00 20 	lwz     r0,32(r1)
    627c:	30 00 00 01 	addic   r0,r0,1
    6280:	90 01 00 20 	stw     r0,32(r1)
    6284:	80 01 00 18 	lwz     r0,24(r1)
    6288:	7c 0b 03 78 	mr      r11,r0
    628c:	80 0b 00 1c 	lwz     r0,28(r11)
    6290:	81 21 00 20 	lwz     r9,32(r1)
    6294:	7f 89 00 00 	cmpw    cr7,r9,r0
    6298:	41 9c ff ac 	blt+    cr7,6244 <gss_mech_get_by_pseudoflavor+0x60>
		if (gm->gm_pfs[i].pseudoflavor == pseudoflavor)
			return 1;
	}
	return 0;
    629c:	38 00 00 00 	li      r0,0
{
	struct gss_api_mech *pos, *gm = NULL;

	spin_lock(&registered_mechs_lock);
	list_for_each_entry(pos, &registered_mechs, gm_list) {
		if (!mech_supports_pseudoflavor(pos, pseudoflavor)) {
    62a0:	2f 80 00 00 	cmpwi   cr7,r0,0
    62a4:	40 9e 00 34 	bne-    cr7,62d8 <gss_mech_get_by_pseudoflavor+0xf4>
			module_put(pos->gm_owner);
    62a8:	80 01 00 08 	lwz     r0,8(r1)
    62ac:	7c 09 03 78 	mr      r9,r0
    62b0:	80 09 00 08 	lwz     r0,8(r9)
    62b4:	7c 03 03 78 	mr      r3,r0
    62b8:	48 00 00 01 	bl      62b8 <gss_mech_get_by_pseudoflavor+0xd4>
gss_mech_get_by_pseudoflavor(u32 pseudoflavor)
{
	struct gss_api_mech *pos, *gm = NULL;

	spin_lock(&registered_mechs_lock);
	list_for_each_entry(pos, &registered_mechs, gm_list) {
    62bc:	80 01 00 08 	lwz     r0,8(r1)
    62c0:	7c 0b 03 78 	mr      r11,r0
    62c4:	80 0b 00 00 	lwz     r0,0(r11)
    62c8:	90 01 00 14 	stw     r0,20(r1)
    62cc:	80 01 00 14 	lwz     r0,20(r1)
    62d0:	90 01 00 08 	stw     r0,8(r1)
    62d4:	48 00 00 d0 	b       63a4 <gss_mech_get_by_pseudoflavor+0x1c0>
		if (!mech_supports_pseudoflavor(pos, pseudoflavor)) {
			module_put(pos->gm_owner);
			continue;
		}
		if (try_module_get(pos->gm_owner))
    62d8:	80 01 00 08 	lwz     r0,8(r1)
    62dc:	7c 09 03 78 	mr      r9,r0
    62e0:	80 09 00 08 	lwz     r0,8(r9)
    62e4:	90 01 00 24 	stw     r0,36(r1)
	}
}

static inline int try_module_get(struct module *module)
{
	int ret = 1;
    62e8:	38 00 00 01 	li      r0,1
    62ec:	90 01 00 28 	stw     r0,40(r1)

	if (module) {
    62f0:	80 01 00 24 	lwz     r0,36(r1)
    62f4:	2f 80 00 00 	cmpwi   cr7,r0,0
    62f8:	41 9e 00 94 	beq-    cr7,638c <gss_mech_get_by_pseudoflavor+0x1a8>
    62fc:	80 01 00 24 	lwz     r0,36(r1)
    6300:	90 01 00 2c 	stw     r0,44(r1)
/* FIXME: It'd be nice to isolate modules during init, too, so they
   aren't used before they (may) fail.  But presently too much code
   (IDE & SCSI) require entry into the module during init.*/
static inline int module_is_live(struct module *mod)
{
	return mod->state != MODULE_STATE_GOING;
    6304:	80 01 00 2c 	lwz     r0,44(r1)
    6308:	7c 0b 03 78 	mr      r11,r0
    630c:	80 0b 00 00 	lwz     r0,0(r11)
    6310:	68 00 00 02 	xori    r0,r0,2
    6314:	2f 80 00 00 	cmpwi   cr7,r0,0
    6318:	7c 00 00 26 	mfcr    r0
    631c:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
    6320:	68 00 00 01 	xori    r0,r0,1
	int ret = 1;

	if (module) {
		preempt_disable();

		if (likely(module_is_live(module))) {
    6324:	2f 80 00 00 	cmpwi   cr7,r0,0
    6328:	7c 00 00 26 	mfcr    r0
    632c:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
    6330:	68 00 00 01 	xori    r0,r0,1
    6334:	2f 80 00 00 	cmpwi   cr7,r0,0
    6338:	41 9e 00 4c 	beq-    cr7,6384 <gss_mech_get_by_pseudoflavor+0x1a0>
			__this_cpu_inc(module->refptr->incs);
    633c:	38 00 00 00 	li      r0,0
    6340:	90 01 00 30 	stw     r0,48(r1)
    6344:	38 00 00 00 	li      r0,0
    6348:	90 01 00 34 	stw     r0,52(r1)
    634c:	80 01 00 24 	lwz     r0,36(r1)
    6350:	7c 09 03 78 	mr      r9,r0
    6354:	80 09 01 48 	lwz     r0,328(r9)
    6358:	7c 0b 03 78 	mr      r11,r0
    635c:	81 2b 00 00 	lwz     r9,0(r11)
    6360:	39 29 00 01 	addi    r9,r9,1
    6364:	7c 0b 03 78 	mr      r11,r0
    6368:	91 2b 00 00 	stw     r9,0(r11)
			trace_module_get(module, _THIS_IP_);
    636c:	3c 00 00 00 	lis     r0,0
    6370:	30 00 07 e4 	addic   r0,r0,2020
    6374:	81 21 00 24 	lwz     r9,36(r1)
    6378:	91 21 00 38 	stw     r9,56(r1)
    637c:	90 01 00 3c 	stw     r0,60(r1)
    6380:	48 00 00 0c 	b       638c <gss_mech_get_by_pseudoflavor+0x1a8>
		} else
			ret = 0;
    6384:	38 00 00 00 	li      r0,0
    6388:	90 01 00 28 	stw     r0,40(r1)

		preempt_enable();
	}
	return ret;
    638c:	80 01 00 28 	lwz     r0,40(r1)
    6390:	2f 80 00 00 	cmpwi   cr7,r0,0
    6394:	41 9e 00 58 	beq-    cr7,63ec <gss_mech_get_by_pseudoflavor+0x208>
			gm = pos;
    6398:	80 01 00 08 	lwz     r0,8(r1)
    639c:	90 01 00 0c 	stw     r0,12(r1)
		break;
    63a0:	48 00 00 4c 	b       63ec <gss_mech_get_by_pseudoflavor+0x208>
gss_mech_get_by_pseudoflavor(u32 pseudoflavor)
{
	struct gss_api_mech *pos, *gm = NULL;

	spin_lock(&registered_mechs_lock);
	list_for_each_entry(pos, &registered_mechs, gm_list) {
    63a4:	80 01 00 08 	lwz     r0,8(r1)
    63a8:	7c 09 03 78 	mr      r9,r0
    63ac:	80 09 00 00 	lwz     r0,0(r9)
    63b0:	90 01 00 40 	stw     r0,64(r1)
#define ARCH_HAS_PREFETCHW
#define ARCH_HAS_SPINLOCK_PREFETCH

static inline void prefetch(const void *x)
{
	if (unlikely(!x))
    63b4:	80 01 00 40 	lwz     r0,64(r1)
    63b8:	2f 80 00 00 	cmpwi   cr7,r0,0
    63bc:	7c 00 00 26 	mfcr    r0
    63c0:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
    63c4:	2f 80 00 00 	cmpwi   cr7,r0,0
    63c8:	40 9e 00 0c 	bne-    cr7,63d4 <gss_mech_get_by_pseudoflavor+0x1f0>
		return;

	__asm__ __volatile__ ("dcbt 0,%0" : : "r" (x));
    63cc:	80 01 00 40 	lwz     r0,64(r1)
    63d0:	7c 00 02 2c 	dcbt    r0,r0
    63d4:	81 21 00 08 	lwz     r9,8(r1)
    63d8:	3c 00 00 00 	lis     r0,0
    63dc:	30 00 00 00 	addic   r0,r0,0
    63e0:	7f 89 00 00 	cmpw    cr7,r9,r0
    63e4:	40 9e fe 44 	bne+    cr7,6228 <gss_mech_get_by_pseudoflavor+0x44>
    63e8:	48 00 00 08 	b       63f0 <gss_mech_get_by_pseudoflavor+0x20c>
			module_put(pos->gm_owner);
			continue;
		}
		if (try_module_get(pos->gm_owner))
			gm = pos;
		break;
    63ec:	60 00 00 00 	nop
gss_mech_get_by_pseudoflavor(u32 pseudoflavor)
{
	struct gss_api_mech *pos, *gm = NULL;

	spin_lock(&registered_mechs_lock);
	list_for_each_entry(pos, &registered_mechs, gm_list) {
    63f0:	3c 00 00 00 	lis     r0,0
    63f4:	30 00 00 00 	addic   r0,r0,0
    63f8:	90 01 00 48 	stw     r0,72(r1)
		if (try_module_get(pos->gm_owner))
			gm = pos;
		break;
	}
	spin_unlock(&registered_mechs_lock);
	return gm;
    63fc:	80 01 00 0c 	lwz     r0,12(r1)
}
    6400:	7c 03 03 78 	mr      r3,r0
    6404:	80 01 00 64 	lwz     r0,100(r1)
    6408:	7c 08 03 a6 	mtlr    r0
    640c:	38 21 00 60 	addi    r1,r1,96
    6410:	4e 80 00 20 	blr

00006414 <gss_svc_to_pseudoflavor>:

EXPORT_SYMBOL_GPL(gss_mech_get_by_pseudoflavor);

u32
gss_svc_to_pseudoflavor(struct gss_api_mech *gm, u32 service)
{
    6414:	94 21 ff e0 	stwu    r1,-32(r1)
    6418:	90 61 00 18 	stw     r3,24(r1)
    641c:	90 81 00 1c 	stw     r4,28(r1)
	int i;

	for (i = 0; i < gm->gm_pf_num; i++) {
    6420:	38 00 00 00 	li      r0,0
    6424:	90 01 00 08 	stw     r0,8(r1)
    6428:	48 00 00 60 	b       6488 <gss_svc_to_pseudoflavor+0x74>
		if (gm->gm_pfs[i].service == service) {
    642c:	80 01 00 18 	lwz     r0,24(r1)
    6430:	7c 0b 03 78 	mr      r11,r0
    6434:	81 2b 00 20 	lwz     r9,32(r11)
    6438:	80 01 00 08 	lwz     r0,8(r1)
    643c:	54 00 20 36 	rlwinm  r0,r0,4,0,27
    6440:	7c 09 02 14 	add     r0,r9,r0
    6444:	7c 0b 03 78 	mr      r11,r0
    6448:	81 2b 00 04 	lwz     r9,4(r11)
    644c:	80 01 00 1c 	lwz     r0,28(r1)
    6450:	7f 89 00 00 	cmpw    cr7,r9,r0
    6454:	40 9e 00 28 	bne-    cr7,647c <gss_svc_to_pseudoflavor+0x68>
			return gm->gm_pfs[i].pseudoflavor;
    6458:	80 01 00 18 	lwz     r0,24(r1)
    645c:	7c 0b 03 78 	mr      r11,r0
    6460:	81 2b 00 20 	lwz     r9,32(r11)
    6464:	80 01 00 08 	lwz     r0,8(r1)
    6468:	54 00 20 36 	rlwinm  r0,r0,4,0,27
    646c:	7c 09 02 14 	add     r0,r9,r0
    6470:	7c 09 03 78 	mr      r9,r0
    6474:	80 09 00 00 	lwz     r0,0(r9)
    6478:	48 00 00 2c 	b       64a4 <gss_svc_to_pseudoflavor+0x90>
u32
gss_svc_to_pseudoflavor(struct gss_api_mech *gm, u32 service)
{
	int i;

	for (i = 0; i < gm->gm_pf_num; i++) {
    647c:	80 01 00 08 	lwz     r0,8(r1)
    6480:	30 00 00 01 	addic   r0,r0,1
    6484:	90 01 00 08 	stw     r0,8(r1)
    6488:	80 01 00 18 	lwz     r0,24(r1)
    648c:	7c 0b 03 78 	mr      r11,r0
    6490:	81 2b 00 1c 	lwz     r9,28(r11)
    6494:	80 01 00 08 	lwz     r0,8(r1)
    6498:	7f 89 00 00 	cmpw    cr7,r9,r0
    649c:	41 9d ff 90 	bgt+    cr7,642c <gss_svc_to_pseudoflavor+0x18>
		if (gm->gm_pfs[i].service == service) {
			return gm->gm_pfs[i].pseudoflavor;
		}
	}
	return RPC_AUTH_MAXFLAVOR; /* illegal value */
    64a0:	38 00 00 08 	li      r0,8
}
    64a4:	7c 03 03 78 	mr      r3,r0
    64a8:	38 21 00 20 	addi    r1,r1,32
    64ac:	4e 80 00 20 	blr

000064b0 <gss_pseudoflavor_to_service>:
EXPORT_SYMBOL_GPL(gss_svc_to_pseudoflavor);

u32
gss_pseudoflavor_to_service(struct gss_api_mech *gm, u32 pseudoflavor)
{
    64b0:	94 21 ff e0 	stwu    r1,-32(r1)
    64b4:	90 61 00 18 	stw     r3,24(r1)
    64b8:	90 81 00 1c 	stw     r4,28(r1)
	int i;

	for (i = 0; i < gm->gm_pf_num; i++) {
    64bc:	38 00 00 00 	li      r0,0
    64c0:	90 01 00 08 	stw     r0,8(r1)
    64c4:	48 00 00 60 	b       6524 <gss_pseudoflavor_to_service+0x74>
		if (gm->gm_pfs[i].pseudoflavor == pseudoflavor)
    64c8:	80 01 00 18 	lwz     r0,24(r1)
    64cc:	7c 0b 03 78 	mr      r11,r0
    64d0:	81 2b 00 20 	lwz     r9,32(r11)
    64d4:	80 01 00 08 	lwz     r0,8(r1)
    64d8:	54 00 20 36 	rlwinm  r0,r0,4,0,27
    64dc:	7c 09 02 14 	add     r0,r9,r0
    64e0:	7c 0b 03 78 	mr      r11,r0
    64e4:	81 2b 00 00 	lwz     r9,0(r11)
    64e8:	80 01 00 1c 	lwz     r0,28(r1)
    64ec:	7f 89 00 00 	cmpw    cr7,r9,r0
    64f0:	40 9e 00 28 	bne-    cr7,6518 <gss_pseudoflavor_to_service+0x68>
			return gm->gm_pfs[i].service;
    64f4:	80 01 00 18 	lwz     r0,24(r1)
    64f8:	7c 0b 03 78 	mr      r11,r0
    64fc:	81 2b 00 20 	lwz     r9,32(r11)
    6500:	80 01 00 08 	lwz     r0,8(r1)
    6504:	54 00 20 36 	rlwinm  r0,r0,4,0,27
    6508:	7c 09 02 14 	add     r0,r9,r0
    650c:	7c 09 03 78 	mr      r9,r0
    6510:	80 09 00 04 	lwz     r0,4(r9)
    6514:	48 00 00 2c 	b       6540 <gss_pseudoflavor_to_service+0x90>
u32
gss_pseudoflavor_to_service(struct gss_api_mech *gm, u32 pseudoflavor)
{
	int i;

	for (i = 0; i < gm->gm_pf_num; i++) {
    6518:	80 01 00 08 	lwz     r0,8(r1)
    651c:	30 00 00 01 	addic   r0,r0,1
    6520:	90 01 00 08 	stw     r0,8(r1)
    6524:	80 01 00 18 	lwz     r0,24(r1)
    6528:	7c 0b 03 78 	mr      r11,r0
    652c:	81 2b 00 1c 	lwz     r9,28(r11)
    6530:	80 01 00 08 	lwz     r0,8(r1)
    6534:	7f 89 00 00 	cmpw    cr7,r9,r0
    6538:	41 9d ff 90 	bgt+    cr7,64c8 <gss_pseudoflavor_to_service+0x18>
		if (gm->gm_pfs[i].pseudoflavor == pseudoflavor)
			return gm->gm_pfs[i].service;
	}
	return 0;
    653c:	38 00 00 00 	li      r0,0
}
    6540:	7c 03 03 78 	mr      r3,r0
    6544:	38 21 00 20 	addi    r1,r1,32
    6548:	4e 80 00 20 	blr

0000654c <gss_service_to_auth_domain_name>:

EXPORT_SYMBOL_GPL(gss_pseudoflavor_to_service);

char *
gss_service_to_auth_domain_name(struct gss_api_mech *gm, u32 service)
{
    654c:	94 21 ff e0 	stwu    r1,-32(r1)
    6550:	90 61 00 18 	stw     r3,24(r1)
    6554:	90 81 00 1c 	stw     r4,28(r1)
	int i;

	for (i = 0; i < gm->gm_pf_num; i++) {
    6558:	38 00 00 00 	li      r0,0
    655c:	90 01 00 08 	stw     r0,8(r1)
    6560:	48 00 00 60 	b       65c0 <gss_service_to_auth_domain_name+0x74>
		if (gm->gm_pfs[i].service == service)
    6564:	80 01 00 18 	lwz     r0,24(r1)
    6568:	7c 0b 03 78 	mr      r11,r0
    656c:	81 2b 00 20 	lwz     r9,32(r11)
    6570:	80 01 00 08 	lwz     r0,8(r1)
    6574:	54 00 20 36 	rlwinm  r0,r0,4,0,27
    6578:	7c 09 02 14 	add     r0,r9,r0
    657c:	7c 0b 03 78 	mr      r11,r0
    6580:	81 2b 00 04 	lwz     r9,4(r11)
    6584:	80 01 00 1c 	lwz     r0,28(r1)
    6588:	7f 89 00 00 	cmpw    cr7,r9,r0
    658c:	40 9e 00 28 	bne-    cr7,65b4 <gss_service_to_auth_domain_name+0x68>
			return gm->gm_pfs[i].auth_domain_name;
    6590:	80 01 00 18 	lwz     r0,24(r1)
    6594:	7c 0b 03 78 	mr      r11,r0
    6598:	81 2b 00 20 	lwz     r9,32(r11)
    659c:	80 01 00 08 	lwz     r0,8(r1)
    65a0:	54 00 20 36 	rlwinm  r0,r0,4,0,27
    65a4:	7c 09 02 14 	add     r0,r9,r0
    65a8:	7c 09 03 78 	mr      r9,r0
    65ac:	80 09 00 0c 	lwz     r0,12(r9)
    65b0:	48 00 00 2c 	b       65dc <gss_service_to_auth_domain_name+0x90>
char *
gss_service_to_auth_domain_name(struct gss_api_mech *gm, u32 service)
{
	int i;

	for (i = 0; i < gm->gm_pf_num; i++) {
    65b4:	80 01 00 08 	lwz     r0,8(r1)
    65b8:	30 00 00 01 	addic   r0,r0,1
    65bc:	90 01 00 08 	stw     r0,8(r1)
    65c0:	80 01 00 18 	lwz     r0,24(r1)
    65c4:	7c 0b 03 78 	mr      r11,r0
    65c8:	81 2b 00 1c 	lwz     r9,28(r11)
    65cc:	80 01 00 08 	lwz     r0,8(r1)
    65d0:	7f 89 00 00 	cmpw    cr7,r9,r0
    65d4:	41 9d ff 90 	bgt+    cr7,6564 <gss_service_to_auth_domain_name+0x18>
		if (gm->gm_pfs[i].service == service)
			return gm->gm_pfs[i].auth_domain_name;
	}
	return NULL;
    65d8:	38 00 00 00 	li      r0,0
}
    65dc:	7c 03 03 78 	mr      r3,r0
    65e0:	38 21 00 20 	addi    r1,r1,32
    65e4:	4e 80 00 20 	blr

000065e8 <gss_mech_put>:

EXPORT_SYMBOL_GPL(gss_service_to_auth_domain_name);

void
gss_mech_put(struct gss_api_mech * gm)
{
    65e8:	94 21 ff f0 	stwu    r1,-16(r1)
    65ec:	7c 08 02 a6 	mflr    r0
    65f0:	90 01 00 14 	stw     r0,20(r1)
    65f4:	90 61 00 08 	stw     r3,8(r1)
	if (gm)
    65f8:	80 01 00 08 	lwz     r0,8(r1)
    65fc:	2f 80 00 00 	cmpwi   cr7,r0,0
    6600:	41 9e 00 18 	beq-    cr7,6618 <gss_mech_put+0x30>
		module_put(gm->gm_owner);
    6604:	80 01 00 08 	lwz     r0,8(r1)
    6608:	7c 09 03 78 	mr      r9,r0
    660c:	80 09 00 08 	lwz     r0,8(r9)
    6610:	7c 03 03 78 	mr      r3,r0
    6614:	48 00 00 01 	bl      6614 <gss_mech_put+0x2c>
}
    6618:	80 01 00 14 	lwz     r0,20(r1)
    661c:	7c 08 03 a6 	mtlr    r0
    6620:	38 21 00 10 	addi    r1,r1,16
    6624:	4e 80 00 20 	blr

00006628 <gss_import_sec_context>:
int
gss_import_sec_context(const void *input_token, size_t bufsize,
		       struct gss_api_mech	*mech,
		       struct gss_ctx		**ctx_id,
		       gfp_t gfp_mask)
{
    6628:	94 21 ff c0 	stwu    r1,-64(r1)
    662c:	7c 08 02 a6 	mflr    r0
    6630:	90 01 00 44 	stw     r0,68(r1)
    6634:	93 e1 00 3c 	stw     r31,60(r1)
    6638:	90 61 00 18 	stw     r3,24(r1)
    663c:	90 81 00 1c 	stw     r4,28(r1)
    6640:	90 a1 00 20 	stw     r5,32(r1)
    6644:	90 c1 00 24 	stw     r6,36(r1)
    6648:	90 e1 00 28 	stw     r7,40(r1)
    664c:	38 00 00 08 	li      r0,8
    6650:	90 01 00 08 	stw     r0,8(r1)
    6654:	80 01 00 28 	lwz     r0,40(r1)
    6658:	90 01 00 0c 	stw     r0,12(r1)
    665c:	80 01 00 0c 	lwz     r0,12(r1)
    6660:	60 00 80 00 	ori     r0,r0,32768
    6664:	81 21 00 08 	lwz     r9,8(r1)
    6668:	91 21 00 10 	stw     r9,16(r1)
    666c:	90 01 00 14 	stw     r0,20(r1)
    6670:	80 61 00 10 	lwz     r3,16(r1)
    6674:	80 81 00 14 	lwz     r4,20(r1)
    6678:	48 00 00 01 	bl      6678 <gss_import_sec_context+0x50>
    667c:	7c 60 1b 78 	mr      r0,r3
	if (!(*ctx_id = kzalloc(sizeof(**ctx_id), gfp_mask)))
    6680:	7c 09 03 78 	mr      r9,r0
    6684:	80 01 00 24 	lwz     r0,36(r1)
    6688:	7c 0b 03 78 	mr      r11,r0
    668c:	91 2b 00 00 	stw     r9,0(r11)
    6690:	80 01 00 24 	lwz     r0,36(r1)
    6694:	7c 09 03 78 	mr      r9,r0
    6698:	80 09 00 00 	lwz     r0,0(r9)
    669c:	2f 80 00 00 	cmpwi   cr7,r0,0
    66a0:	40 9e 00 0c 	bne-    cr7,66ac <gss_import_sec_context+0x84>
		return -ENOMEM;
    66a4:	38 00 ff f4 	li      r0,-12
    66a8:	48 00 00 58 	b       6700 <gss_import_sec_context+0xd8>
	(*ctx_id)->mech_type = gss_mech_get(mech);
    66ac:	80 01 00 24 	lwz     r0,36(r1)
    66b0:	7c 0b 03 78 	mr      r11,r0
    66b4:	83 eb 00 00 	lwz     r31,0(r11)
    66b8:	80 61 00 20 	lwz     r3,32(r1)
    66bc:	48 00 00 01 	bl      66bc <gss_import_sec_context+0x94>
    66c0:	7c 60 1b 78 	mr      r0,r3
    66c4:	90 1f 00 00 	stw     r0,0(r31)

	return mech->gm_ops
    66c8:	80 01 00 20 	lwz     r0,32(r1)
    66cc:	7c 09 03 78 	mr      r9,r0
    66d0:	80 09 00 18 	lwz     r0,24(r9)
		->gss_import_sec_context(input_token, bufsize, *ctx_id, gfp_mask);
    66d4:	7c 0b 03 78 	mr      r11,r0
    66d8:	80 0b 00 00 	lwz     r0,0(r11)
    66dc:	81 21 00 24 	lwz     r9,36(r1)
    66e0:	81 29 00 00 	lwz     r9,0(r9)
{
	if (!(*ctx_id = kzalloc(sizeof(**ctx_id), gfp_mask)))
		return -ENOMEM;
	(*ctx_id)->mech_type = gss_mech_get(mech);

	return mech->gm_ops
    66e4:	80 61 00 18 	lwz     r3,24(r1)
    66e8:	80 81 00 1c 	lwz     r4,28(r1)
    66ec:	7d 25 4b 78 	mr      r5,r9
    66f0:	80 c1 00 28 	lwz     r6,40(r1)
    66f4:	7c 09 03 a6 	mtctr   r0
    66f8:	4e 80 04 21 	bctrl
    66fc:	7c 60 1b 78 	mr      r0,r3
		->gss_import_sec_context(input_token, bufsize, *ctx_id, gfp_mask);
}
    6700:	7c 03 03 78 	mr      r3,r0
    6704:	80 01 00 44 	lwz     r0,68(r1)
    6708:	7c 08 03 a6 	mtlr    r0
    670c:	83 e1 00 3c 	lwz     r31,60(r1)
    6710:	38 21 00 40 	addi    r1,r1,64
    6714:	4e 80 00 20 	blr

00006718 <gss_get_mic>:

u32
gss_get_mic(struct gss_ctx	*context_handle,
	    struct xdr_buf	*message,
	    struct xdr_netobj	*mic_token)
{
    6718:	94 21 ff e0 	stwu    r1,-32(r1)
    671c:	7c 08 02 a6 	mflr    r0
    6720:	90 01 00 24 	stw     r0,36(r1)
    6724:	90 61 00 08 	stw     r3,8(r1)
    6728:	90 81 00 0c 	stw     r4,12(r1)
    672c:	90 a1 00 10 	stw     r5,16(r1)
	 return context_handle->mech_type->gm_ops
    6730:	80 01 00 08 	lwz     r0,8(r1)
    6734:	7c 09 03 78 	mr      r9,r0
    6738:	80 09 00 00 	lwz     r0,0(r9)
    673c:	7c 09 03 78 	mr      r9,r0
    6740:	80 09 00 18 	lwz     r0,24(r9)
		->gss_get_mic(context_handle,
    6744:	7c 09 03 78 	mr      r9,r0
    6748:	80 09 00 04 	lwz     r0,4(r9)
u32
gss_get_mic(struct gss_ctx	*context_handle,
	    struct xdr_buf	*message,
	    struct xdr_netobj	*mic_token)
{
	 return context_handle->mech_type->gm_ops
    674c:	80 61 00 08 	lwz     r3,8(r1)
    6750:	80 81 00 0c 	lwz     r4,12(r1)
    6754:	80 a1 00 10 	lwz     r5,16(r1)
    6758:	7c 09 03 a6 	mtctr   r0
    675c:	4e 80 04 21 	bctrl
    6760:	7c 60 1b 78 	mr      r0,r3
		->gss_get_mic(context_handle,
			      message,
			      mic_token);
}
    6764:	7c 03 03 78 	mr      r3,r0
    6768:	80 01 00 24 	lwz     r0,36(r1)
    676c:	7c 08 03 a6 	mtlr    r0
    6770:	38 21 00 20 	addi    r1,r1,32
    6774:	4e 80 00 20 	blr

00006778 <gss_verify_mic>:

u32
gss_verify_mic(struct gss_ctx		*context_handle,
	       struct xdr_buf		*message,
	       struct xdr_netobj	*mic_token)
{
    6778:	94 21 ff e0 	stwu    r1,-32(r1)
    677c:	7c 08 02 a6 	mflr    r0
    6780:	90 01 00 24 	stw     r0,36(r1)
    6784:	90 61 00 08 	stw     r3,8(r1)
    6788:	90 81 00 0c 	stw     r4,12(r1)
    678c:	90 a1 00 10 	stw     r5,16(r1)
	return context_handle->mech_type->gm_ops
    6790:	80 01 00 08 	lwz     r0,8(r1)
    6794:	7c 09 03 78 	mr      r9,r0
    6798:	80 09 00 00 	lwz     r0,0(r9)
    679c:	7c 09 03 78 	mr      r9,r0
    67a0:	80 09 00 18 	lwz     r0,24(r9)
		->gss_verify_mic(context_handle,
    67a4:	7c 09 03 78 	mr      r9,r0
    67a8:	80 09 00 08 	lwz     r0,8(r9)
u32
gss_verify_mic(struct gss_ctx		*context_handle,
	       struct xdr_buf		*message,
	       struct xdr_netobj	*mic_token)
{
	return context_handle->mech_type->gm_ops
    67ac:	80 61 00 08 	lwz     r3,8(r1)
    67b0:	80 81 00 0c 	lwz     r4,12(r1)
    67b4:	80 a1 00 10 	lwz     r5,16(r1)
    67b8:	7c 09 03 a6 	mtctr   r0
    67bc:	4e 80 04 21 	bctrl
    67c0:	7c 60 1b 78 	mr      r0,r3
		->gss_verify_mic(context_handle,
				 message,
				 mic_token);
}
    67c4:	7c 03 03 78 	mr      r3,r0
    67c8:	80 01 00 24 	lwz     r0,36(r1)
    67cc:	7c 08 03 a6 	mtlr    r0
    67d0:	38 21 00 20 	addi    r1,r1,32
    67d4:	4e 80 00 20 	blr

000067d8 <gss_wrap>:
u32
gss_wrap(struct gss_ctx	*ctx_id,
	 int		offset,
	 struct xdr_buf	*buf,
	 struct page	**inpages)
{
    67d8:	94 21 ff e0 	stwu    r1,-32(r1)
    67dc:	7c 08 02 a6 	mflr    r0
    67e0:	90 01 00 24 	stw     r0,36(r1)
    67e4:	90 61 00 08 	stw     r3,8(r1)
    67e8:	90 81 00 0c 	stw     r4,12(r1)
    67ec:	90 a1 00 10 	stw     r5,16(r1)
    67f0:	90 c1 00 14 	stw     r6,20(r1)
	return ctx_id->mech_type->gm_ops
    67f4:	80 01 00 08 	lwz     r0,8(r1)
    67f8:	7c 09 03 78 	mr      r9,r0
    67fc:	80 09 00 00 	lwz     r0,0(r9)
    6800:	7c 09 03 78 	mr      r9,r0
    6804:	80 09 00 18 	lwz     r0,24(r9)
		->gss_wrap(ctx_id, offset, buf, inpages);
    6808:	7c 09 03 78 	mr      r9,r0
    680c:	80 09 00 0c 	lwz     r0,12(r9)
gss_wrap(struct gss_ctx	*ctx_id,
	 int		offset,
	 struct xdr_buf	*buf,
	 struct page	**inpages)
{
	return ctx_id->mech_type->gm_ops
    6810:	80 61 00 08 	lwz     r3,8(r1)
    6814:	80 81 00 0c 	lwz     r4,12(r1)
    6818:	80 a1 00 10 	lwz     r5,16(r1)
    681c:	80 c1 00 14 	lwz     r6,20(r1)
    6820:	7c 09 03 a6 	mtctr   r0
    6824:	4e 80 04 21 	bctrl
    6828:	7c 60 1b 78 	mr      r0,r3
		->gss_wrap(ctx_id, offset, buf, inpages);
}
    682c:	7c 03 03 78 	mr      r3,r0
    6830:	80 01 00 24 	lwz     r0,36(r1)
    6834:	7c 08 03 a6 	mtlr    r0
    6838:	38 21 00 20 	addi    r1,r1,32
    683c:	4e 80 00 20 	blr

00006840 <gss_unwrap>:

u32
gss_unwrap(struct gss_ctx	*ctx_id,
	   int			offset,
	   struct xdr_buf	*buf)
{
    6840:	94 21 ff e0 	stwu    r1,-32(r1)
    6844:	7c 08 02 a6 	mflr    r0
    6848:	90 01 00 24 	stw     r0,36(r1)
    684c:	90 61 00 08 	stw     r3,8(r1)
    6850:	90 81 00 0c 	stw     r4,12(r1)
    6854:	90 a1 00 10 	stw     r5,16(r1)
	return ctx_id->mech_type->gm_ops
    6858:	80 01 00 08 	lwz     r0,8(r1)
    685c:	7c 09 03 78 	mr      r9,r0
    6860:	80 09 00 00 	lwz     r0,0(r9)
    6864:	7c 09 03 78 	mr      r9,r0
    6868:	80 09 00 18 	lwz     r0,24(r9)
		->gss_unwrap(ctx_id, offset, buf);
    686c:	7c 09 03 78 	mr      r9,r0
    6870:	80 09 00 10 	lwz     r0,16(r9)
u32
gss_unwrap(struct gss_ctx	*ctx_id,
	   int			offset,
	   struct xdr_buf	*buf)
{
	return ctx_id->mech_type->gm_ops
    6874:	80 61 00 08 	lwz     r3,8(r1)
    6878:	80 81 00 0c 	lwz     r4,12(r1)
    687c:	80 a1 00 10 	lwz     r5,16(r1)
    6880:	7c 09 03 a6 	mtctr   r0
    6884:	4e 80 04 21 	bctrl
    6888:	7c 60 1b 78 	mr      r0,r3
		->gss_unwrap(ctx_id, offset, buf);
}
    688c:	7c 03 03 78 	mr      r3,r0
    6890:	80 01 00 24 	lwz     r0,36(r1)
    6894:	7c 08 03 a6 	mtlr    r0
    6898:	38 21 00 20 	addi    r1,r1,32
    689c:	4e 80 00 20 	blr

000068a0 <gss_delete_sec_context>:
 * Note this differs from the RFC 2744-specified prototype in that we don't
 * bother returning an output token, since it would never be used anyway. */

u32
gss_delete_sec_context(struct gss_ctx	**context_handle)
{
    68a0:	94 21 ff f0 	stwu    r1,-16(r1)
    68a4:	7c 08 02 a6 	mflr    r0
    68a8:	90 01 00 14 	stw     r0,20(r1)
    68ac:	90 61 00 08 	stw     r3,8(r1)
	dprintk("RPC:       gss_delete_sec_context deleting %p\n",
    68b0:	3c 00 00 00 	lis     r0,0
    68b4:	7c 09 03 78 	mr      r9,r0
    68b8:	80 09 00 00 	lwz     r0,0(r9)
    68bc:	54 00 06 f6 	rlwinm  r0,r0,0,27,27
    68c0:	2f 80 00 00 	cmpwi   cr7,r0,0
    68c4:	7c 00 00 26 	mfcr    r0
    68c8:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
    68cc:	68 00 00 01 	xori    r0,r0,1
    68d0:	2f 80 00 00 	cmpwi   cr7,r0,0
    68d4:	41 9e 00 20 	beq-    cr7,68f4 <gss_delete_sec_context+0x54>
    68d8:	80 01 00 08 	lwz     r0,8(r1)
    68dc:	7c 0b 03 78 	mr      r11,r0
    68e0:	80 0b 00 00 	lwz     r0,0(r11)
    68e4:	3d 20 00 00 	lis     r9,0
    68e8:	38 69 00 54 	addi    r3,r9,84
    68ec:	7c 04 03 78 	mr      r4,r0
    68f0:	48 00 00 01 	bl      68f0 <gss_delete_sec_context+0x50>
			*context_handle);

	if (!*context_handle)
    68f4:	80 01 00 08 	lwz     r0,8(r1)
    68f8:	7c 09 03 78 	mr      r9,r0
    68fc:	80 09 00 00 	lwz     r0,0(r9)
    6900:	2f 80 00 00 	cmpwi   cr7,r0,0
    6904:	40 9e 00 0c 	bne-    cr7,6910 <gss_delete_sec_context+0x70>
		return GSS_S_NO_CONTEXT;
    6908:	3c 00 00 08 	lis     r0,8
    690c:	48 00 00 a0 	b       69ac <gss_delete_sec_context+0x10c>
	if ((*context_handle)->internal_ctx_id)
    6910:	80 01 00 08 	lwz     r0,8(r1)
    6914:	7c 0b 03 78 	mr      r11,r0
    6918:	80 0b 00 00 	lwz     r0,0(r11)
    691c:	7c 09 03 78 	mr      r9,r0
    6920:	80 09 00 04 	lwz     r0,4(r9)
    6924:	2f 80 00 00 	cmpwi   cr7,r0,0
    6928:	41 9e 00 40 	beq-    cr7,6968 <gss_delete_sec_context+0xc8>
		(*context_handle)->mech_type->gm_ops
    692c:	80 01 00 08 	lwz     r0,8(r1)
    6930:	7c 0b 03 78 	mr      r11,r0
    6934:	80 0b 00 00 	lwz     r0,0(r11)
    6938:	7c 09 03 78 	mr      r9,r0
    693c:	80 09 00 00 	lwz     r0,0(r9)
    6940:	7c 0b 03 78 	mr      r11,r0
    6944:	80 0b 00 18 	lwz     r0,24(r11)
			->gss_delete_sec_context((*context_handle)
    6948:	7c 09 03 78 	mr      r9,r0
    694c:	80 09 00 14 	lwz     r0,20(r9)
    6950:	81 21 00 08 	lwz     r9,8(r1)
    6954:	81 29 00 00 	lwz     r9,0(r9)
    6958:	81 29 00 04 	lwz     r9,4(r9)
    695c:	7d 23 4b 78 	mr      r3,r9
    6960:	7c 09 03 a6 	mtctr   r0
    6964:	4e 80 04 21 	bctrl
							->internal_ctx_id);
	gss_mech_put((*context_handle)->mech_type);
    6968:	80 01 00 08 	lwz     r0,8(r1)
    696c:	7c 09 03 78 	mr      r9,r0
    6970:	80 09 00 00 	lwz     r0,0(r9)
    6974:	7c 0b 03 78 	mr      r11,r0
    6978:	80 0b 00 00 	lwz     r0,0(r11)
    697c:	7c 03 03 78 	mr      r3,r0
    6980:	48 00 00 01 	bl      6980 <gss_delete_sec_context+0xe0>
	kfree(*context_handle);
    6984:	80 01 00 08 	lwz     r0,8(r1)
    6988:	7c 09 03 78 	mr      r9,r0
    698c:	80 09 00 00 	lwz     r0,0(r9)
    6990:	7c 03 03 78 	mr      r3,r0
    6994:	48 00 00 01 	bl      6994 <gss_delete_sec_context+0xf4>
	*context_handle=NULL;
    6998:	80 01 00 08 	lwz     r0,8(r1)
    699c:	39 20 00 00 	li      r9,0
    69a0:	7c 0b 03 78 	mr      r11,r0
    69a4:	91 2b 00 00 	stw     r9,0(r11)
	return GSS_S_COMPLETE;
    69a8:	38 00 00 00 	li      r0,0
}
    69ac:	7c 03 03 78 	mr      r3,r0
    69b0:	80 01 00 14 	lwz     r0,20(r1)
    69b4:	7c 08 03 a6 	mtlr    r0
    69b8:	38 21 00 10 	addi    r1,r1,16
    69bc:	4e 80 00 20 	blr

000069c0 <netobj_equal>:
 * Content is major_status minor_status (integers) context_handle, reply_token.
 *
 */

static int netobj_equal(struct xdr_netobj *a, struct xdr_netobj *b)
{
    69c0:	94 21 ff f0 	stwu    r1,-16(r1)
    69c4:	7c 08 02 a6 	mflr    r0
    69c8:	90 01 00 14 	stw     r0,20(r1)
    69cc:	90 61 00 08 	stw     r3,8(r1)
    69d0:	90 81 00 0c 	stw     r4,12(r1)
	return a->len == b->len && 0 == memcmp(a->data, b->data, a->len);
    69d4:	80 01 00 08 	lwz     r0,8(r1)
    69d8:	7c 0a 03 78 	mr      r10,r0
    69dc:	81 2a 00 00 	lwz     r9,0(r10)
    69e0:	80 01 00 0c 	lwz     r0,12(r1)
    69e4:	7c 0b 03 78 	mr      r11,r0
    69e8:	80 0b 00 00 	lwz     r0,0(r11)
    69ec:	7f 89 00 00 	cmpw    cr7,r9,r0
    69f0:	40 9e 00 4c 	bne-    cr7,6a3c <netobj_equal+0x7c>
    69f4:	80 01 00 08 	lwz     r0,8(r1)
    69f8:	7c 09 03 78 	mr      r9,r0
    69fc:	81 69 00 04 	lwz     r11,4(r9)
    6a00:	80 01 00 0c 	lwz     r0,12(r1)
    6a04:	7c 0a 03 78 	mr      r10,r0
    6a08:	81 2a 00 04 	lwz     r9,4(r10)
    6a0c:	80 01 00 08 	lwz     r0,8(r1)
    6a10:	7c 0a 03 78 	mr      r10,r0
    6a14:	80 0a 00 00 	lwz     r0,0(r10)
    6a18:	7d 63 5b 78 	mr      r3,r11
    6a1c:	7d 24 4b 78 	mr      r4,r9
    6a20:	7c 05 03 78 	mr      r5,r0
    6a24:	48 00 00 01 	bl      6a24 <netobj_equal+0x64>
    6a28:	7c 60 1b 78 	mr      r0,r3
    6a2c:	2f 80 00 00 	cmpwi   cr7,r0,0
    6a30:	40 9e 00 0c 	bne-    cr7,6a3c <netobj_equal+0x7c>
    6a34:	38 00 00 01 	li      r0,1
    6a38:	48 00 00 08 	b       6a40 <netobj_equal+0x80>
    6a3c:	38 00 00 00 	li      r0,0
}
    6a40:	7c 03 03 78 	mr      r3,r0
    6a44:	80 01 00 14 	lwz     r0,20(r1)
    6a48:	7c 08 03 a6 	mtlr    r0
    6a4c:	38 21 00 10 	addi    r1,r1,16
    6a50:	4e 80 00 20 	blr

00006a54 <rsi_free>:
static struct cache_detail rsi_cache;
static struct rsi *rsi_update(struct rsi *new, struct rsi *old);
static struct rsi *rsi_lookup(struct rsi *item);

static void rsi_free(struct rsi *rsii)
{
    6a54:	94 21 ff f0 	stwu    r1,-16(r1)
    6a58:	7c 08 02 a6 	mflr    r0
    6a5c:	90 01 00 14 	stw     r0,20(r1)
    6a60:	90 61 00 08 	stw     r3,8(r1)
	kfree(rsii->in_handle.data);
    6a64:	80 01 00 08 	lwz     r0,8(r1)
    6a68:	7c 09 03 78 	mr      r9,r0
    6a6c:	80 09 00 18 	lwz     r0,24(r9)
    6a70:	7c 03 03 78 	mr      r3,r0
    6a74:	48 00 00 01 	bl      6a74 <rsi_free+0x20>
	kfree(rsii->in_token.data);
    6a78:	80 01 00 08 	lwz     r0,8(r1)
    6a7c:	7c 09 03 78 	mr      r9,r0
    6a80:	80 09 00 20 	lwz     r0,32(r9)
    6a84:	7c 03 03 78 	mr      r3,r0
    6a88:	48 00 00 01 	bl      6a88 <rsi_free+0x34>
	kfree(rsii->out_handle.data);
    6a8c:	80 01 00 08 	lwz     r0,8(r1)
    6a90:	7c 09 03 78 	mr      r9,r0
    6a94:	80 09 00 28 	lwz     r0,40(r9)
    6a98:	7c 03 03 78 	mr      r3,r0
    6a9c:	48 00 00 01 	bl      6a9c <rsi_free+0x48>
	kfree(rsii->out_token.data);
    6aa0:	80 01 00 08 	lwz     r0,8(r1)
    6aa4:	7c 09 03 78 	mr      r9,r0
    6aa8:	80 09 00 30 	lwz     r0,48(r9)
    6aac:	7c 03 03 78 	mr      r3,r0
    6ab0:	48 00 00 01 	bl      6ab0 <rsi_free+0x5c>
}
    6ab4:	80 01 00 14 	lwz     r0,20(r1)
    6ab8:	7c 08 03 a6 	mtlr    r0
    6abc:	38 21 00 10 	addi    r1,r1,16
    6ac0:	4e 80 00 20 	blr

00006ac4 <rsi_put>:

static void rsi_put(struct kref *ref)
{
    6ac4:	94 21 ff e0 	stwu    r1,-32(r1)
    6ac8:	7c 08 02 a6 	mflr    r0
    6acc:	90 01 00 24 	stw     r0,36(r1)
    6ad0:	90 61 00 18 	stw     r3,24(r1)
	struct rsi *rsii = container_of(ref, struct rsi, h.ref);
    6ad4:	80 01 00 18 	lwz     r0,24(r1)
    6ad8:	90 01 00 08 	stw     r0,8(r1)
    6adc:	80 01 00 08 	lwz     r0,8(r1)
    6ae0:	30 00 ff f4 	addic   r0,r0,-12
    6ae4:	90 01 00 0c 	stw     r0,12(r1)
	rsi_free(rsii);
    6ae8:	80 61 00 0c 	lwz     r3,12(r1)
    6aec:	4b ff ff 69 	bl      6a54 <rsi_free>
	kfree(rsii);
    6af0:	80 61 00 0c 	lwz     r3,12(r1)
    6af4:	48 00 00 01 	bl      6af4 <rsi_put+0x30>
}
    6af8:	80 01 00 24 	lwz     r0,36(r1)
    6afc:	7c 08 03 a6 	mtlr    r0
    6b00:	38 21 00 20 	addi    r1,r1,32
    6b04:	4e 80 00 20 	blr

00006b08 <rsi_match>:
	return hash_mem(item->in_handle.data, item->in_handle.len, RSI_HASHBITS)
	     ^ hash_mem(item->in_token.data, item->in_token.len, RSI_HASHBITS);
}

static int rsi_match(struct cache_head *a, struct cache_head *b)
{
    6b08:	94 21 ff e0 	stwu    r1,-32(r1)
    6b0c:	7c 08 02 a6 	mflr    r0
    6b10:	90 01 00 24 	stw     r0,36(r1)
    6b14:	90 61 00 18 	stw     r3,24(r1)
    6b18:	90 81 00 1c 	stw     r4,28(r1)
	struct rsi *item = container_of(a, struct rsi, h);
    6b1c:	80 01 00 18 	lwz     r0,24(r1)
    6b20:	90 01 00 08 	stw     r0,8(r1)
    6b24:	80 01 00 08 	lwz     r0,8(r1)
    6b28:	90 01 00 0c 	stw     r0,12(r1)
	struct rsi *tmp = container_of(b, struct rsi, h);
    6b2c:	80 01 00 1c 	lwz     r0,28(r1)
    6b30:	90 01 00 10 	stw     r0,16(r1)
    6b34:	80 01 00 10 	lwz     r0,16(r1)
    6b38:	90 01 00 14 	stw     r0,20(r1)
	return netobj_equal(&item->in_handle, &tmp->in_handle) &&
    6b3c:	80 01 00 0c 	lwz     r0,12(r1)
    6b40:	31 20 00 14 	addic   r9,r0,20
    6b44:	80 01 00 14 	lwz     r0,20(r1)
    6b48:	30 00 00 14 	addic   r0,r0,20
    6b4c:	7d 23 4b 78 	mr      r3,r9
    6b50:	7c 04 03 78 	mr      r4,r0
    6b54:	4b ff fe 6d 	bl      69c0 <netobj_equal>
    6b58:	7c 60 1b 78 	mr      r0,r3
    6b5c:	2f 80 00 00 	cmpwi   cr7,r0,0
    6b60:	41 9e 00 34 	beq-    cr7,6b94 <rsi_match+0x8c>
	       netobj_equal(&item->in_token, &tmp->in_token);
    6b64:	80 01 00 0c 	lwz     r0,12(r1)
    6b68:	31 20 00 1c 	addic   r9,r0,28
    6b6c:	80 01 00 14 	lwz     r0,20(r1)
    6b70:	30 00 00 1c 	addic   r0,r0,28
    6b74:	7d 23 4b 78 	mr      r3,r9
    6b78:	7c 04 03 78 	mr      r4,r0
    6b7c:	4b ff fe 45 	bl      69c0 <netobj_equal>
    6b80:	7c 60 1b 78 	mr      r0,r3

static int rsi_match(struct cache_head *a, struct cache_head *b)
{
	struct rsi *item = container_of(a, struct rsi, h);
	struct rsi *tmp = container_of(b, struct rsi, h);
	return netobj_equal(&item->in_handle, &tmp->in_handle) &&
    6b84:	2f 80 00 00 	cmpwi   cr7,r0,0
    6b88:	41 9e 00 0c 	beq-    cr7,6b94 <rsi_match+0x8c>
    6b8c:	38 00 00 01 	li      r0,1
    6b90:	48 00 00 08 	b       6b98 <rsi_match+0x90>
    6b94:	38 00 00 00 	li      r0,0
	       netobj_equal(&item->in_token, &tmp->in_token);
}
    6b98:	7c 03 03 78 	mr      r3,r0
    6b9c:	80 01 00 24 	lwz     r0,36(r1)
    6ba0:	7c 08 03 a6 	mtlr    r0
    6ba4:	38 21 00 20 	addi    r1,r1,32
    6ba8:	4e 80 00 20 	blr

00006bac <dup_to_netobj>:

static int dup_to_netobj(struct xdr_netobj *dst, char *src, int len)
{
    6bac:	94 21 ff e0 	stwu    r1,-32(r1)
    6bb0:	7c 08 02 a6 	mflr    r0
    6bb4:	90 01 00 24 	stw     r0,36(r1)
    6bb8:	90 61 00 08 	stw     r3,8(r1)
    6bbc:	90 81 00 0c 	stw     r4,12(r1)
    6bc0:	90 a1 00 10 	stw     r5,16(r1)
	dst->len = len;
    6bc4:	81 21 00 10 	lwz     r9,16(r1)
    6bc8:	80 01 00 08 	lwz     r0,8(r1)
    6bcc:	7c 0b 03 78 	mr      r11,r0
    6bd0:	91 2b 00 00 	stw     r9,0(r11)
	dst->data = (len ? kmemdup(src, len, GFP_KERNEL) : NULL);
    6bd4:	80 01 00 10 	lwz     r0,16(r1)
    6bd8:	2f 80 00 00 	cmpwi   cr7,r0,0
    6bdc:	41 9e 00 20 	beq-    cr7,6bfc <dup_to_netobj+0x50>
    6be0:	80 01 00 10 	lwz     r0,16(r1)
    6be4:	80 61 00 0c 	lwz     r3,12(r1)
    6be8:	7c 04 03 78 	mr      r4,r0
    6bec:	38 a0 00 d0 	li      r5,208
    6bf0:	48 00 00 01 	bl      6bf0 <dup_to_netobj+0x44>
    6bf4:	7c 60 1b 78 	mr      r0,r3
    6bf8:	48 00 00 08 	b       6c00 <dup_to_netobj+0x54>
    6bfc:	38 00 00 00 	li      r0,0
    6c00:	81 21 00 08 	lwz     r9,8(r1)
    6c04:	90 09 00 04 	stw     r0,4(r9)
	if (len && !dst->data)
    6c08:	80 01 00 10 	lwz     r0,16(r1)
    6c0c:	2f 80 00 00 	cmpwi   cr7,r0,0
    6c10:	41 9e 00 20 	beq-    cr7,6c30 <dup_to_netobj+0x84>
    6c14:	80 01 00 08 	lwz     r0,8(r1)
    6c18:	7c 09 03 78 	mr      r9,r0
    6c1c:	80 09 00 04 	lwz     r0,4(r9)
    6c20:	2f 80 00 00 	cmpwi   cr7,r0,0
    6c24:	40 9e 00 0c 	bne-    cr7,6c30 <dup_to_netobj+0x84>
		return -ENOMEM;
    6c28:	38 00 ff f4 	li      r0,-12
    6c2c:	48 00 00 08 	b       6c34 <dup_to_netobj+0x88>
	return 0;
    6c30:	38 00 00 00 	li      r0,0
}
    6c34:	7c 03 03 78 	mr      r3,r0
    6c38:	80 01 00 24 	lwz     r0,36(r1)
    6c3c:	7c 08 03 a6 	mtlr    r0
    6c40:	38 21 00 20 	addi    r1,r1,32
    6c44:	4e 80 00 20 	blr

00006c48 <rsi_init>:
{
	return dup_to_netobj(dst, src->data, src->len);
}

static void rsi_init(struct cache_head *cnew, struct cache_head *citem)
{
    6c48:	94 21 ff e0 	stwu    r1,-32(r1)
    6c4c:	90 61 00 18 	stw     r3,24(r1)
    6c50:	90 81 00 1c 	stw     r4,28(r1)
	struct rsi *new = container_of(cnew, struct rsi, h);
    6c54:	80 01 00 18 	lwz     r0,24(r1)
    6c58:	90 01 00 08 	stw     r0,8(r1)
    6c5c:	80 01 00 08 	lwz     r0,8(r1)
    6c60:	90 01 00 0c 	stw     r0,12(r1)
	struct rsi *item = container_of(citem, struct rsi, h);
    6c64:	80 01 00 1c 	lwz     r0,28(r1)
    6c68:	90 01 00 10 	stw     r0,16(r1)
    6c6c:	80 01 00 10 	lwz     r0,16(r1)
    6c70:	90 01 00 14 	stw     r0,20(r1)

	new->out_handle.data = NULL;
    6c74:	80 01 00 0c 	lwz     r0,12(r1)
    6c78:	39 20 00 00 	li      r9,0
    6c7c:	7c 0b 03 78 	mr      r11,r0
    6c80:	91 2b 00 28 	stw     r9,40(r11)
	new->out_handle.len = 0;
    6c84:	80 01 00 0c 	lwz     r0,12(r1)
    6c88:	39 20 00 00 	li      r9,0
    6c8c:	7c 0b 03 78 	mr      r11,r0
    6c90:	91 2b 00 24 	stw     r9,36(r11)
	new->out_token.data = NULL;
    6c94:	80 01 00 0c 	lwz     r0,12(r1)
    6c98:	39 20 00 00 	li      r9,0
    6c9c:	7c 0b 03 78 	mr      r11,r0
    6ca0:	91 2b 00 30 	stw     r9,48(r11)
	new->out_token.len = 0;
    6ca4:	80 01 00 0c 	lwz     r0,12(r1)
    6ca8:	39 20 00 00 	li      r9,0
    6cac:	7c 0b 03 78 	mr      r11,r0
    6cb0:	91 2b 00 2c 	stw     r9,44(r11)
	new->in_handle.len = item->in_handle.len;
    6cb4:	80 01 00 14 	lwz     r0,20(r1)
    6cb8:	7c 0b 03 78 	mr      r11,r0
    6cbc:	81 2b 00 14 	lwz     r9,20(r11)
    6cc0:	80 01 00 0c 	lwz     r0,12(r1)
    6cc4:	7c 0b 03 78 	mr      r11,r0
    6cc8:	91 2b 00 14 	stw     r9,20(r11)
	item->in_handle.len = 0;
    6ccc:	80 01 00 14 	lwz     r0,20(r1)
    6cd0:	39 20 00 00 	li      r9,0
    6cd4:	7c 0b 03 78 	mr      r11,r0
    6cd8:	91 2b 00 14 	stw     r9,20(r11)
	new->in_token.len = item->in_token.len;
    6cdc:	80 01 00 14 	lwz     r0,20(r1)
    6ce0:	7c 0b 03 78 	mr      r11,r0
    6ce4:	81 2b 00 1c 	lwz     r9,28(r11)
    6ce8:	80 01 00 0c 	lwz     r0,12(r1)
    6cec:	7c 0b 03 78 	mr      r11,r0
    6cf0:	91 2b 00 1c 	stw     r9,28(r11)
	item->in_token.len = 0;
    6cf4:	80 01 00 14 	lwz     r0,20(r1)
    6cf8:	39 20 00 00 	li      r9,0
    6cfc:	7c 0b 03 78 	mr      r11,r0
    6d00:	91 2b 00 1c 	stw     r9,28(r11)
	new->in_handle.data = item->in_handle.data;
    6d04:	80 01 00 14 	lwz     r0,20(r1)
    6d08:	7c 0b 03 78 	mr      r11,r0
    6d0c:	81 2b 00 18 	lwz     r9,24(r11)
    6d10:	80 01 00 0c 	lwz     r0,12(r1)
    6d14:	7c 0b 03 78 	mr      r11,r0
    6d18:	91 2b 00 18 	stw     r9,24(r11)
	item->in_handle.data = NULL;
    6d1c:	80 01 00 14 	lwz     r0,20(r1)
    6d20:	39 20 00 00 	li      r9,0
    6d24:	7c 0b 03 78 	mr      r11,r0
    6d28:	91 2b 00 18 	stw     r9,24(r11)
	new->in_token.data = item->in_token.data;
    6d2c:	80 01 00 14 	lwz     r0,20(r1)
    6d30:	7c 0b 03 78 	mr      r11,r0
    6d34:	81 2b 00 20 	lwz     r9,32(r11)
    6d38:	80 01 00 0c 	lwz     r0,12(r1)
    6d3c:	7c 0b 03 78 	mr      r11,r0
    6d40:	91 2b 00 20 	stw     r9,32(r11)
	item->in_token.data = NULL;
    6d44:	80 01 00 14 	lwz     r0,20(r1)
    6d48:	39 20 00 00 	li      r9,0
    6d4c:	7c 0b 03 78 	mr      r11,r0
    6d50:	91 2b 00 20 	stw     r9,32(r11)
}
    6d54:	38 21 00 20 	addi    r1,r1,32
    6d58:	4e 80 00 20 	blr

00006d5c <update_rsi>:

static void update_rsi(struct cache_head *cnew, struct cache_head *citem)
{
    6d5c:	94 21 ff e0 	stwu    r1,-32(r1)
    6d60:	90 61 00 18 	stw     r3,24(r1)
    6d64:	90 81 00 1c 	stw     r4,28(r1)
	struct rsi *new = container_of(cnew, struct rsi, h);
    6d68:	80 01 00 18 	lwz     r0,24(r1)
    6d6c:	90 01 00 08 	stw     r0,8(r1)
    6d70:	80 01 00 08 	lwz     r0,8(r1)
    6d74:	90 01 00 0c 	stw     r0,12(r1)
	struct rsi *item = container_of(citem, struct rsi, h);
    6d78:	80 01 00 1c 	lwz     r0,28(r1)
    6d7c:	90 01 00 10 	stw     r0,16(r1)
    6d80:	80 01 00 10 	lwz     r0,16(r1)
    6d84:	90 01 00 14 	stw     r0,20(r1)

	BUG_ON(new->out_handle.data || new->out_token.data);
    6d88:	80 01 00 0c 	lwz     r0,12(r1)
    6d8c:	7c 09 03 78 	mr      r9,r0
    6d90:	80 09 00 28 	lwz     r0,40(r9)
    6d94:	2f 80 00 00 	cmpwi   cr7,r0,0
    6d98:	40 9e 00 18 	bne-    cr7,6db0 <update_rsi+0x54>
    6d9c:	80 01 00 0c 	lwz     r0,12(r1)
    6da0:	7c 0b 03 78 	mr      r11,r0
    6da4:	80 0b 00 30 	lwz     r0,48(r11)
    6da8:	2f 80 00 00 	cmpwi   cr7,r0,0
    6dac:	41 9e 00 0c 	beq-    cr7,6db8 <update_rsi+0x5c>
    6db0:	38 00 00 01 	li      r0,1
    6db4:	48 00 00 08 	b       6dbc <update_rsi+0x60>
    6db8:	38 00 00 00 	li      r0,0
    6dbc:	0f 00 00 00 	twnei   r0,0
	new->out_handle.len = item->out_handle.len;
    6dc0:	80 01 00 14 	lwz     r0,20(r1)
    6dc4:	7c 0b 03 78 	mr      r11,r0
    6dc8:	81 2b 00 24 	lwz     r9,36(r11)
    6dcc:	80 01 00 0c 	lwz     r0,12(r1)
    6dd0:	7c 0b 03 78 	mr      r11,r0
    6dd4:	91 2b 00 24 	stw     r9,36(r11)
	item->out_handle.len = 0;
    6dd8:	80 01 00 14 	lwz     r0,20(r1)
    6ddc:	39 20 00 00 	li      r9,0
    6de0:	7c 0b 03 78 	mr      r11,r0
    6de4:	91 2b 00 24 	stw     r9,36(r11)
	new->out_token.len = item->out_token.len;
    6de8:	80 01 00 14 	lwz     r0,20(r1)
    6dec:	7c 0b 03 78 	mr      r11,r0
    6df0:	81 2b 00 2c 	lwz     r9,44(r11)
    6df4:	80 01 00 0c 	lwz     r0,12(r1)
    6df8:	7c 0b 03 78 	mr      r11,r0
    6dfc:	91 2b 00 2c 	stw     r9,44(r11)
	item->out_token.len = 0;
    6e00:	80 01 00 14 	lwz     r0,20(r1)
    6e04:	39 20 00 00 	li      r9,0
    6e08:	7c 0b 03 78 	mr      r11,r0
    6e0c:	91 2b 00 2c 	stw     r9,44(r11)
	new->out_handle.data = item->out_handle.data;
    6e10:	80 01 00 14 	lwz     r0,20(r1)
    6e14:	7c 0b 03 78 	mr      r11,r0
    6e18:	81 2b 00 28 	lwz     r9,40(r11)
    6e1c:	80 01 00 0c 	lwz     r0,12(r1)
    6e20:	7c 0b 03 78 	mr      r11,r0
    6e24:	91 2b 00 28 	stw     r9,40(r11)
	item->out_handle.data = NULL;
    6e28:	80 01 00 14 	lwz     r0,20(r1)
    6e2c:	39 20 00 00 	li      r9,0
    6e30:	7c 0b 03 78 	mr      r11,r0
    6e34:	91 2b 00 28 	stw     r9,40(r11)
	new->out_token.data = item->out_token.data;
    6e38:	80 01 00 14 	lwz     r0,20(r1)
    6e3c:	7c 0b 03 78 	mr      r11,r0
    6e40:	81 2b 00 30 	lwz     r9,48(r11)
    6e44:	80 01 00 0c 	lwz     r0,12(r1)
    6e48:	7c 0b 03 78 	mr      r11,r0
    6e4c:	91 2b 00 30 	stw     r9,48(r11)
	item->out_token.data = NULL;
    6e50:	80 01 00 14 	lwz     r0,20(r1)
    6e54:	39 20 00 00 	li      r9,0
    6e58:	7c 0b 03 78 	mr      r11,r0
    6e5c:	91 2b 00 30 	stw     r9,48(r11)

	new->major_status = item->major_status;
    6e60:	80 01 00 14 	lwz     r0,20(r1)
    6e64:	7c 0b 03 78 	mr      r11,r0
    6e68:	81 2b 00 34 	lwz     r9,52(r11)
    6e6c:	80 01 00 0c 	lwz     r0,12(r1)
    6e70:	7c 0b 03 78 	mr      r11,r0
    6e74:	91 2b 00 34 	stw     r9,52(r11)
	new->minor_status = item->minor_status;
    6e78:	80 01 00 14 	lwz     r0,20(r1)
    6e7c:	7c 0b 03 78 	mr      r11,r0
    6e80:	81 2b 00 38 	lwz     r9,56(r11)
    6e84:	80 01 00 0c 	lwz     r0,12(r1)
    6e88:	7c 0b 03 78 	mr      r11,r0
    6e8c:	91 2b 00 38 	stw     r9,56(r11)
}
    6e90:	38 21 00 20 	addi    r1,r1,32
    6e94:	4e 80 00 20 	blr

00006e98 <rsi_alloc>:

static struct cache_head *rsi_alloc(void)
{
    6e98:	94 21 ff e0 	stwu    r1,-32(r1)
    6e9c:	7c 08 02 a6 	mflr    r0
    6ea0:	90 01 00 24 	stw     r0,36(r1)
    6ea4:	38 00 00 3c 	li      r0,60
    6ea8:	90 01 00 0c 	stw     r0,12(r1)
    6eac:	38 00 00 d0 	li      r0,208
    6eb0:	90 01 00 10 	stw     r0,16(r1)
    6eb4:	80 61 00 0c 	lwz     r3,12(r1)
    6eb8:	80 81 00 10 	lwz     r4,16(r1)
    6ebc:	48 00 00 01 	bl      6ebc <rsi_alloc+0x24>
    6ec0:	7c 60 1b 78 	mr      r0,r3
	struct rsi *rsii = kmalloc(sizeof(*rsii), GFP_KERNEL);
    6ec4:	90 01 00 08 	stw     r0,8(r1)
	if (rsii)
    6ec8:	80 01 00 08 	lwz     r0,8(r1)
    6ecc:	2f 80 00 00 	cmpwi   cr7,r0,0
    6ed0:	41 9e 00 0c 	beq-    cr7,6edc <rsi_alloc+0x44>
		return &rsii->h;
    6ed4:	80 01 00 08 	lwz     r0,8(r1)
    6ed8:	48 00 00 08 	b       6ee0 <rsi_alloc+0x48>
	else
		return NULL;
    6edc:	38 00 00 00 	li      r0,0
}
    6ee0:	7c 03 03 78 	mr      r3,r0
    6ee4:	80 01 00 24 	lwz     r0,36(r1)
    6ee8:	7c 08 03 a6 	mtlr    r0
    6eec:	38 21 00 20 	addi    r1,r1,32
    6ef0:	4e 80 00 20 	blr

00006ef4 <rsi_request>:

static void rsi_request(struct cache_detail *cd,
		       struct cache_head *h,
		       char **bpp, int *blen)
{
    6ef4:	94 21 ff d0 	stwu    r1,-48(r1)
    6ef8:	7c 08 02 a6 	mflr    r0
    6efc:	90 01 00 34 	stw     r0,52(r1)
    6f00:	90 61 00 18 	stw     r3,24(r1)
    6f04:	90 81 00 1c 	stw     r4,28(r1)
    6f08:	90 a1 00 20 	stw     r5,32(r1)
    6f0c:	90 c1 00 24 	stw     r6,36(r1)
	struct rsi *rsii = container_of(h, struct rsi, h);
    6f10:	80 01 00 1c 	lwz     r0,28(r1)
    6f14:	90 01 00 08 	stw     r0,8(r1)
    6f18:	80 01 00 08 	lwz     r0,8(r1)
    6f1c:	90 01 00 0c 	stw     r0,12(r1)

	qword_addhex(bpp, blen, rsii->in_handle.data, rsii->in_handle.len);
    6f20:	80 01 00 0c 	lwz     r0,12(r1)
    6f24:	7c 0b 03 78 	mr      r11,r0
    6f28:	81 2b 00 18 	lwz     r9,24(r11)
    6f2c:	80 01 00 0c 	lwz     r0,12(r1)
    6f30:	7c 0b 03 78 	mr      r11,r0
    6f34:	80 0b 00 14 	lwz     r0,20(r11)
    6f38:	80 61 00 20 	lwz     r3,32(r1)
    6f3c:	80 81 00 24 	lwz     r4,36(r1)
    6f40:	7d 25 4b 78 	mr      r5,r9
    6f44:	7c 06 03 78 	mr      r6,r0
    6f48:	48 00 00 01 	bl      6f48 <rsi_request+0x54>
	qword_addhex(bpp, blen, rsii->in_token.data, rsii->in_token.len);
    6f4c:	80 01 00 0c 	lwz     r0,12(r1)
    6f50:	7c 0b 03 78 	mr      r11,r0
    6f54:	81 2b 00 20 	lwz     r9,32(r11)
    6f58:	80 01 00 0c 	lwz     r0,12(r1)
    6f5c:	7c 0b 03 78 	mr      r11,r0
    6f60:	80 0b 00 1c 	lwz     r0,28(r11)
    6f64:	80 61 00 20 	lwz     r3,32(r1)
    6f68:	80 81 00 24 	lwz     r4,36(r1)
    6f6c:	7d 25 4b 78 	mr      r5,r9
    6f70:	7c 06 03 78 	mr      r6,r0
    6f74:	48 00 00 01 	bl      6f74 <rsi_request+0x80>
	(*bpp)[-1] = '\n';
    6f78:	80 01 00 20 	lwz     r0,32(r1)
    6f7c:	7c 09 03 78 	mr      r9,r0
    6f80:	80 09 00 00 	lwz     r0,0(r9)
    6f84:	30 00 ff ff 	addic   r0,r0,-1
    6f88:	39 20 00 0a 	li      r9,10
    6f8c:	7c 0b 03 78 	mr      r11,r0
    6f90:	99 2b 00 00 	stb     r9,0(r11)
}
    6f94:	80 01 00 34 	lwz     r0,52(r1)
    6f98:	7c 08 03 a6 	mtlr    r0
    6f9c:	38 21 00 30 	addi    r1,r1,48
    6fa0:	4e 80 00 20 	blr

00006fa4 <rsi_upcall>:

static int rsi_upcall(struct cache_detail *cd, struct cache_head *h)
{
    6fa4:	94 21 ff f0 	stwu    r1,-16(r1)
    6fa8:	7c 08 02 a6 	mflr    r0
    6fac:	90 01 00 14 	stw     r0,20(r1)
    6fb0:	90 61 00 08 	stw     r3,8(r1)
    6fb4:	90 81 00 0c 	stw     r4,12(r1)
	return sunrpc_cache_pipe_upcall(cd, h, rsi_request);
    6fb8:	80 61 00 08 	lwz     r3,8(r1)
    6fbc:	80 81 00 0c 	lwz     r4,12(r1)
    6fc0:	3c 00 00 00 	lis     r0,0
    6fc4:	30 a0 05 34 	addic   r5,r0,1332
    6fc8:	48 00 00 01 	bl      6fc8 <rsi_upcall+0x24>
    6fcc:	7c 60 1b 78 	mr      r0,r3
}
    6fd0:	7c 03 03 78 	mr      r3,r0
    6fd4:	80 01 00 14 	lwz     r0,20(r1)
    6fd8:	7c 08 03 a6 	mtlr    r0
    6fdc:	38 21 00 10 	addi    r1,r1,16
    6fe0:	4e 80 00 20 	blr

00006fe4 <rsi_parse>:


static int rsi_parse(struct cache_detail *cd,
		    char *mesg, int mlen)
{
    6fe4:	94 21 ff 20 	stwu    r1,-224(r1)
    6fe8:	7c 08 02 a6 	mflr    r0
    6fec:	90 01 00 e4 	stw     r0,228(r1)
    6ff0:	93 e1 00 dc 	stw     r31,220(r1)
    6ff4:	90 61 00 c8 	stw     r3,200(r1)
    6ff8:	90 81 00 cc 	stw     r4,204(r1)
    6ffc:	90 a1 00 d0 	stw     r5,208(r1)
	/* context token expiry major minor context token */
	char *buf = mesg;
    7000:	80 01 00 cc 	lwz     r0,204(r1)
    7004:	90 01 00 10 	stw     r0,16(r1)
	char *ep;
	int len;
	struct rsi rsii, *rsip = NULL;
    7008:	38 00 00 00 	li      r0,0
    700c:	90 01 00 08 	stw     r0,8(r1)
	time_t expiry;
	int status = -EINVAL;
    7010:	38 00 ff ea 	li      r0,-22
    7014:	90 01 00 0c 	stw     r0,12(r1)

	memset(&rsii, 0, sizeof(rsii));
    7018:	38 01 00 44 	addi    r0,r1,68
    701c:	7c 09 03 78 	mr      r9,r0
    7020:	38 00 00 3c 	li      r0,60
    7024:	7d 23 4b 78 	mr      r3,r9
    7028:	38 80 00 00 	li      r4,0
    702c:	7c 05 03 78 	mr      r5,r0
    7030:	48 00 00 01 	bl      7030 <rsi_parse+0x4c>
	/* handle */
	len = qword_get(&mesg, buf, mlen);
    7034:	38 01 00 cc 	addi    r0,r1,204
    7038:	7c 03 03 78 	mr      r3,r0
    703c:	80 81 00 10 	lwz     r4,16(r1)
    7040:	80 a1 00 d0 	lwz     r5,208(r1)
    7044:	48 00 00 01 	bl      7044 <rsi_parse+0x60>
    7048:	90 61 00 14 	stw     r3,20(r1)
	if (len < 0)
    704c:	80 01 00 14 	lwz     r0,20(r1)
    7050:	2f 80 00 00 	cmpwi   cr7,r0,0
    7054:	41 9c 03 28 	blt-    cr7,737c <rsi_parse+0x398>
		goto out;
	status = -ENOMEM;
    7058:	38 00 ff f4 	li      r0,-12
    705c:	90 01 00 0c 	stw     r0,12(r1)
	if (dup_to_netobj(&rsii.in_handle, buf, len))
    7060:	38 01 00 44 	addi    r0,r1,68
    7064:	30 00 00 14 	addic   r0,r0,20
    7068:	7c 03 03 78 	mr      r3,r0
    706c:	80 81 00 10 	lwz     r4,16(r1)
    7070:	80 a1 00 14 	lwz     r5,20(r1)
    7074:	4b ff fb 39 	bl      6bac <dup_to_netobj>
    7078:	7c 60 1b 78 	mr      r0,r3
    707c:	2f 80 00 00 	cmpwi   cr7,r0,0
    7080:	40 9e 03 04 	bne-    cr7,7384 <rsi_parse+0x3a0>
		goto out;

	/* token */
	len = qword_get(&mesg, buf, mlen);
    7084:	38 01 00 cc 	addi    r0,r1,204
    7088:	7c 03 03 78 	mr      r3,r0
    708c:	80 81 00 10 	lwz     r4,16(r1)
    7090:	80 a1 00 d0 	lwz     r5,208(r1)
    7094:	48 00 00 01 	bl      7094 <rsi_parse+0xb0>
    7098:	90 61 00 14 	stw     r3,20(r1)
	status = -EINVAL;
    709c:	38 00 ff ea 	li      r0,-22
    70a0:	90 01 00 0c 	stw     r0,12(r1)
	if (len < 0)
    70a4:	80 01 00 14 	lwz     r0,20(r1)
    70a8:	2f 80 00 00 	cmpwi   cr7,r0,0
    70ac:	41 9c 02 e0 	blt-    cr7,738c <rsi_parse+0x3a8>
		goto out;
	status = -ENOMEM;
    70b0:	38 00 ff f4 	li      r0,-12
    70b4:	90 01 00 0c 	stw     r0,12(r1)
	if (dup_to_netobj(&rsii.in_token, buf, len))
    70b8:	38 01 00 44 	addi    r0,r1,68
    70bc:	30 00 00 1c 	addic   r0,r0,28
    70c0:	7c 03 03 78 	mr      r3,r0
    70c4:	80 81 00 10 	lwz     r4,16(r1)
    70c8:	80 a1 00 14 	lwz     r5,20(r1)
    70cc:	4b ff fa e1 	bl      6bac <dup_to_netobj>
    70d0:	7c 60 1b 78 	mr      r0,r3
    70d4:	2f 80 00 00 	cmpwi   cr7,r0,0
    70d8:	40 9e 02 bc 	bne-    cr7,7394 <rsi_parse+0x3b0>
		goto out;

	rsip = rsi_lookup(&rsii);
    70dc:	38 01 00 44 	addi    r0,r1,68
    70e0:	7c 03 03 78 	mr      r3,r0
    70e4:	48 00 03 d9 	bl      74bc <rsi_lookup>
    70e8:	90 61 00 08 	stw     r3,8(r1)
	if (!rsip)
    70ec:	80 01 00 08 	lwz     r0,8(r1)
    70f0:	2f 80 00 00 	cmpwi   cr7,r0,0
    70f4:	41 9e 02 a8 	beq-    cr7,739c <rsi_parse+0x3b8>
		goto out;

	rsii.h.flags = 0;
    70f8:	38 00 00 00 	li      r0,0
    70fc:	90 01 00 54 	stw     r0,84(r1)
	/* expiry */
	expiry = get_expiry(&mesg);
    7100:	38 01 00 cc 	addi    r0,r1,204

	rsip = rsi_lookup(&rsii);
	if (!rsip)
		goto out;

	rsii.h.flags = 0;
    7104:	90 01 00 1c 	stw     r0,28(r1)
    7108:	80 01 00 1c 	lwz     r0,28(r1)
    710c:	90 01 00 20 	stw     r0,32(r1)
static inline time_t get_expiry(char **bpp)
{
	int rv;
	struct timespec boot;

	if (get_int(bpp, &rv))
    7110:	38 01 00 80 	addi    r0,r1,128
    7114:	90 01 00 24 	stw     r0,36(r1)
static inline int get_int(char **bpp, int *anint)
{
	char buf[50];
	char *ep;
	int rv;
	int len = qword_get(bpp, buf, 50);
    7118:	38 01 00 90 	addi    r0,r1,144
    711c:	80 61 00 20 	lwz     r3,32(r1)
    7120:	7c 04 03 78 	mr      r4,r0
    7124:	38 a0 00 32 	li      r5,50
    7128:	48 00 00 01 	bl      7128 <rsi_parse+0x144>
    712c:	90 61 00 28 	stw     r3,40(r1)
	if (len < 0) return -EINVAL;
    7130:	80 01 00 28 	lwz     r0,40(r1)
    7134:	2f 80 00 00 	cmpwi   cr7,r0,0
    7138:	40 9c 00 0c 	bge-    cr7,7144 <rsi_parse+0x160>
    713c:	38 00 ff ea 	li      r0,-22
    7140:	48 00 00 68 	b       71a8 <rsi_parse+0x1c4>
	if (len ==0) return -ENOENT;
    7144:	80 01 00 28 	lwz     r0,40(r1)
    7148:	2f 80 00 00 	cmpwi   cr7,r0,0
    714c:	40 9e 00 0c 	bne-    cr7,7158 <rsi_parse+0x174>
    7150:	38 00 ff fe 	li      r0,-2
    7154:	48 00 00 54 	b       71a8 <rsi_parse+0x1c4>
	rv = simple_strtol(buf, &ep, 0);
    7158:	39 21 00 90 	addi    r9,r1,144
    715c:	38 01 00 8c 	addi    r0,r1,140
    7160:	7d 23 4b 78 	mr      r3,r9
    7164:	7c 04 03 78 	mr      r4,r0
    7168:	38 a0 00 00 	li      r5,0
    716c:	48 00 00 01 	bl      716c <rsi_parse+0x188>
    7170:	90 61 00 2c 	stw     r3,44(r1)
	if (*ep) return -EINVAL;
    7174:	80 01 00 8c 	lwz     r0,140(r1)
    7178:	7c 09 03 78 	mr      r9,r0
    717c:	88 09 00 00 	lbz     r0,0(r9)
    7180:	54 00 06 3e 	clrlwi  r0,r0,24
    7184:	2f 80 00 00 	cmpwi   cr7,r0,0
    7188:	41 9e 00 0c 	beq-    cr7,7194 <rsi_parse+0x1b0>
    718c:	38 00 ff ea 	li      r0,-22
    7190:	48 00 00 18 	b       71a8 <rsi_parse+0x1c4>
	*anint = rv;
    7194:	80 01 00 24 	lwz     r0,36(r1)
    7198:	81 21 00 2c 	lwz     r9,44(r1)
    719c:	7c 0b 03 78 	mr      r11,r0
    71a0:	91 2b 00 00 	stw     r9,0(r11)
	return 0;
    71a4:	38 00 00 00 	li      r0,0
static inline time_t get_expiry(char **bpp)
{
	int rv;
	struct timespec boot;

	if (get_int(bpp, &rv))
    71a8:	2f 80 00 00 	cmpwi   cr7,r0,0
    71ac:	41 9e 00 0c 	beq-    cr7,71b8 <rsi_parse+0x1d4>
		return 0;
    71b0:	38 00 00 00 	li      r0,0
    71b4:	48 00 00 30 	b       71e4 <rsi_parse+0x200>
	if (rv < 0)
    71b8:	80 01 00 80 	lwz     r0,128(r1)
    71bc:	2f 80 00 00 	cmpwi   cr7,r0,0
    71c0:	40 9c 00 0c 	bge-    cr7,71cc <rsi_parse+0x1e8>
		return 0;
    71c4:	38 00 00 00 	li      r0,0
    71c8:	48 00 00 1c 	b       71e4 <rsi_parse+0x200>
	getboottime(&boot);
    71cc:	38 01 00 84 	addi    r0,r1,132
    71d0:	7c 03 03 78 	mr      r3,r0
    71d4:	48 00 00 01 	bl      71d4 <rsi_parse+0x1f0>
	return rv - boot.tv_sec;
    71d8:	81 21 00 80 	lwz     r9,128(r1)
    71dc:	80 01 00 84 	lwz     r0,132(r1)
    71e0:	7c 00 48 50 	subf    r0,r0,r9
	/* expiry */
	expiry = get_expiry(&mesg);
    71e4:	90 01 00 18 	stw     r0,24(r1)
	status = -EINVAL;
    71e8:	38 00 ff ea 	li      r0,-22
    71ec:	90 01 00 0c 	stw     r0,12(r1)
	if (expiry == 0)
    71f0:	80 01 00 18 	lwz     r0,24(r1)
    71f4:	2f 80 00 00 	cmpwi   cr7,r0,0
    71f8:	41 9e 01 ac 	beq-    cr7,73a4 <rsi_parse+0x3c0>
		goto out;

	/* major/minor */
	len = qword_get(&mesg, buf, mlen);
    71fc:	38 01 00 cc 	addi    r0,r1,204
    7200:	7c 03 03 78 	mr      r3,r0
    7204:	80 81 00 10 	lwz     r4,16(r1)
    7208:	80 a1 00 d0 	lwz     r5,208(r1)
    720c:	48 00 00 01 	bl      720c <rsi_parse+0x228>
    7210:	90 61 00 14 	stw     r3,20(r1)
	if (len <= 0)
    7214:	80 01 00 14 	lwz     r0,20(r1)
    7218:	2f 80 00 00 	cmpwi   cr7,r0,0
    721c:	40 9d 01 90 	ble-    cr7,73ac <rsi_parse+0x3c8>
		goto out;
	rsii.major_status = simple_strtoul(buf, &ep, 10);
    7220:	38 01 00 40 	addi    r0,r1,64
    7224:	80 61 00 10 	lwz     r3,16(r1)
    7228:	7c 04 03 78 	mr      r4,r0
    722c:	38 a0 00 0a 	li      r5,10
    7230:	48 00 00 01 	bl      7230 <rsi_parse+0x24c>
    7234:	7c 60 1b 78 	mr      r0,r3
    7238:	90 01 00 78 	stw     r0,120(r1)
	if (*ep)
    723c:	80 01 00 40 	lwz     r0,64(r1)
    7240:	7c 09 03 78 	mr      r9,r0
    7244:	88 09 00 00 	lbz     r0,0(r9)
    7248:	54 00 06 3e 	clrlwi  r0,r0,24
    724c:	2f 80 00 00 	cmpwi   cr7,r0,0
    7250:	40 9e 01 64 	bne-    cr7,73b4 <rsi_parse+0x3d0>
		goto out;
	len = qword_get(&mesg, buf, mlen);
    7254:	38 01 00 cc 	addi    r0,r1,204
    7258:	7c 03 03 78 	mr      r3,r0
    725c:	80 81 00 10 	lwz     r4,16(r1)
    7260:	80 a1 00 d0 	lwz     r5,208(r1)
    7264:	48 00 00 01 	bl      7264 <rsi_parse+0x280>
    7268:	90 61 00 14 	stw     r3,20(r1)
	if (len <= 0)
    726c:	80 01 00 14 	lwz     r0,20(r1)
    7270:	2f 80 00 00 	cmpwi   cr7,r0,0
    7274:	40 9d 01 48 	ble-    cr7,73bc <rsi_parse+0x3d8>
		goto out;
	rsii.minor_status = simple_strtoul(buf, &ep, 10);
    7278:	38 01 00 40 	addi    r0,r1,64
    727c:	80 61 00 10 	lwz     r3,16(r1)
    7280:	7c 04 03 78 	mr      r4,r0
    7284:	38 a0 00 0a 	li      r5,10
    7288:	48 00 00 01 	bl      7288 <rsi_parse+0x2a4>
    728c:	7c 60 1b 78 	mr      r0,r3
    7290:	90 01 00 7c 	stw     r0,124(r1)
	if (*ep)
    7294:	80 01 00 40 	lwz     r0,64(r1)
    7298:	7c 0b 03 78 	mr      r11,r0
    729c:	88 0b 00 00 	lbz     r0,0(r11)
    72a0:	54 00 06 3e 	clrlwi  r0,r0,24
    72a4:	2f 80 00 00 	cmpwi   cr7,r0,0
    72a8:	40 9e 01 1c 	bne-    cr7,73c4 <rsi_parse+0x3e0>
		goto out;

	/* out_handle */
	len = qword_get(&mesg, buf, mlen);
    72ac:	38 01 00 cc 	addi    r0,r1,204
    72b0:	7c 03 03 78 	mr      r3,r0
    72b4:	80 81 00 10 	lwz     r4,16(r1)
    72b8:	80 a1 00 d0 	lwz     r5,208(r1)
    72bc:	48 00 00 01 	bl      72bc <rsi_parse+0x2d8>
    72c0:	90 61 00 14 	stw     r3,20(r1)
	if (len < 0)
    72c4:	80 01 00 14 	lwz     r0,20(r1)
    72c8:	2f 80 00 00 	cmpwi   cr7,r0,0
    72cc:	41 9c 01 00 	blt-    cr7,73cc <rsi_parse+0x3e8>
		goto out;
	status = -ENOMEM;
    72d0:	38 00 ff f4 	li      r0,-12
    72d4:	90 01 00 0c 	stw     r0,12(r1)
	if (dup_to_netobj(&rsii.out_handle, buf, len))
    72d8:	38 01 00 44 	addi    r0,r1,68
    72dc:	30 00 00 24 	addic   r0,r0,36
    72e0:	7c 03 03 78 	mr      r3,r0
    72e4:	80 81 00 10 	lwz     r4,16(r1)
    72e8:	80 a1 00 14 	lwz     r5,20(r1)
    72ec:	4b ff f8 c1 	bl      6bac <dup_to_netobj>
    72f0:	7c 60 1b 78 	mr      r0,r3
    72f4:	2f 80 00 00 	cmpwi   cr7,r0,0
    72f8:	40 9e 00 dc 	bne-    cr7,73d4 <rsi_parse+0x3f0>
		goto out;

	/* out_token */
	len = qword_get(&mesg, buf, mlen);
    72fc:	38 01 00 cc 	addi    r0,r1,204
    7300:	7c 03 03 78 	mr      r3,r0
    7304:	80 81 00 10 	lwz     r4,16(r1)
    7308:	80 a1 00 d0 	lwz     r5,208(r1)
    730c:	48 00 00 01 	bl      730c <rsi_parse+0x328>
    7310:	90 61 00 14 	stw     r3,20(r1)
	status = -EINVAL;
    7314:	38 00 ff ea 	li      r0,-22
    7318:	90 01 00 0c 	stw     r0,12(r1)
	if (len < 0)
    731c:	80 01 00 14 	lwz     r0,20(r1)
    7320:	2f 80 00 00 	cmpwi   cr7,r0,0
    7324:	41 9c 00 b8 	blt-    cr7,73dc <rsi_parse+0x3f8>
		goto out;
	status = -ENOMEM;
    7328:	38 00 ff f4 	li      r0,-12
    732c:	90 01 00 0c 	stw     r0,12(r1)
	if (dup_to_netobj(&rsii.out_token, buf, len))
    7330:	38 01 00 44 	addi    r0,r1,68
    7334:	30 00 00 2c 	addic   r0,r0,44
    7338:	7c 03 03 78 	mr      r3,r0
    733c:	80 81 00 10 	lwz     r4,16(r1)
    7340:	80 a1 00 14 	lwz     r5,20(r1)
    7344:	4b ff f8 69 	bl      6bac <dup_to_netobj>
    7348:	7c 60 1b 78 	mr      r0,r3
    734c:	2f 80 00 00 	cmpwi   cr7,r0,0
    7350:	40 9e 00 94 	bne-    cr7,73e4 <rsi_parse+0x400>
		goto out;
	rsii.h.expiry_time = expiry;
    7354:	80 01 00 18 	lwz     r0,24(r1)
    7358:	90 01 00 48 	stw     r0,72(r1)
	rsip = rsi_update(&rsii, rsip);
    735c:	38 01 00 44 	addi    r0,r1,68
    7360:	7c 03 03 78 	mr      r3,r0
    7364:	80 81 00 08 	lwz     r4,8(r1)
    7368:	48 00 03 e9 	bl      7750 <rsi_update>
    736c:	90 61 00 08 	stw     r3,8(r1)
	status = 0;
    7370:	38 00 00 00 	li      r0,0
    7374:	90 01 00 0c 	stw     r0,12(r1)
    7378:	48 00 00 70 	b       73e8 <rsi_parse+0x404>

	memset(&rsii, 0, sizeof(rsii));
	/* handle */
	len = qword_get(&mesg, buf, mlen);
	if (len < 0)
		goto out;
    737c:	60 00 00 00 	nop
    7380:	48 00 00 68 	b       73e8 <rsi_parse+0x404>
	status = -ENOMEM;
	if (dup_to_netobj(&rsii.in_handle, buf, len))
		goto out;
    7384:	60 00 00 00 	nop
    7388:	48 00 00 60 	b       73e8 <rsi_parse+0x404>

	/* token */
	len = qword_get(&mesg, buf, mlen);
	status = -EINVAL;
	if (len < 0)
		goto out;
    738c:	60 00 00 00 	nop
    7390:	48 00 00 58 	b       73e8 <rsi_parse+0x404>
	status = -ENOMEM;
	if (dup_to_netobj(&rsii.in_token, buf, len))
		goto out;
    7394:	60 00 00 00 	nop
    7398:	48 00 00 50 	b       73e8 <rsi_parse+0x404>

	rsip = rsi_lookup(&rsii);
	if (!rsip)
		goto out;
    739c:	60 00 00 00 	nop
    73a0:	48 00 00 48 	b       73e8 <rsi_parse+0x404>
	rsii.h.flags = 0;
	/* expiry */
	expiry = get_expiry(&mesg);
	status = -EINVAL;
	if (expiry == 0)
		goto out;
    73a4:	60 00 00 00 	nop
    73a8:	48 00 00 40 	b       73e8 <rsi_parse+0x404>

	/* major/minor */
	len = qword_get(&mesg, buf, mlen);
	if (len <= 0)
		goto out;
    73ac:	60 00 00 00 	nop
    73b0:	48 00 00 38 	b       73e8 <rsi_parse+0x404>
	rsii.major_status = simple_strtoul(buf, &ep, 10);
	if (*ep)
		goto out;
    73b4:	60 00 00 00 	nop
    73b8:	48 00 00 30 	b       73e8 <rsi_parse+0x404>
	len = qword_get(&mesg, buf, mlen);
	if (len <= 0)
		goto out;
    73bc:	60 00 00 00 	nop
    73c0:	48 00 00 28 	b       73e8 <rsi_parse+0x404>
	rsii.minor_status = simple_strtoul(buf, &ep, 10);
	if (*ep)
		goto out;
    73c4:	60 00 00 00 	nop
    73c8:	48 00 00 20 	b       73e8 <rsi_parse+0x404>

	/* out_handle */
	len = qword_get(&mesg, buf, mlen);
	if (len < 0)
		goto out;
    73cc:	60 00 00 00 	nop
    73d0:	48 00 00 18 	b       73e8 <rsi_parse+0x404>
	status = -ENOMEM;
	if (dup_to_netobj(&rsii.out_handle, buf, len))
		goto out;
    73d4:	60 00 00 00 	nop
    73d8:	48 00 00 10 	b       73e8 <rsi_parse+0x404>

	/* out_token */
	len = qword_get(&mesg, buf, mlen);
	status = -EINVAL;
	if (len < 0)
		goto out;
    73dc:	60 00 00 00 	nop
    73e0:	48 00 00 08 	b       73e8 <rsi_parse+0x404>
	status = -ENOMEM;
	if (dup_to_netobj(&rsii.out_token, buf, len))
		goto out;
    73e4:	60 00 00 00 	nop
	rsii.h.expiry_time = expiry;
	rsip = rsi_update(&rsii, rsip);
	status = 0;
out:
	rsi_free(&rsii);
    73e8:	38 01 00 44 	addi    r0,r1,68
    73ec:	7c 03 03 78 	mr      r3,r0
    73f0:	4b ff f6 65 	bl      6a54 <rsi_free>
	if (rsip)
    73f4:	80 01 00 08 	lwz     r0,8(r1)
    73f8:	2f 80 00 00 	cmpwi   cr7,r0,0
    73fc:	41 9e 00 9c 	beq-    cr7,7498 <rsi_parse+0x4b4>
		cache_put(&rsip->h, &rsi_cache);
    7400:	80 01 00 08 	lwz     r0,8(r1)
    7404:	90 01 00 30 	stw     r0,48(r1)
    7408:	3c 00 00 00 	lis     r0,0
    740c:	30 00 00 00 	addic   r0,r0,0
    7410:	90 01 00 34 	stw     r0,52(r1)
}


static inline void cache_put(struct cache_head *h, struct cache_detail *cd)
{
	if (atomic_read(&h->ref.refcount) <= 2 &&
    7414:	80 01 00 30 	lwz     r0,48(r1)
    7418:	30 00 00 0c 	addic   r0,r0,12
    741c:	90 01 00 38 	stw     r0,56(r1)

static __inline__ int atomic_read(const atomic_t *v)
{
	int t;

	__asm__ __volatile__("lwz%U1%X1 %0,%1" : "=r"(t) : "m"(v->counter));
    7420:	80 01 00 38 	lwz     r0,56(r1)
    7424:	7c 09 03 78 	mr      r9,r0
    7428:	83 e9 00 00 	lwz     r31,0(r9)
    742c:	93 e1 00 3c 	stw     r31,60(r1)

	return t;
    7430:	80 01 00 3c 	lwz     r0,60(r1)
    7434:	2f 80 00 02 	cmpwi   cr7,r0,2
    7438:	41 9d 00 3c 	bgt-    cr7,7474 <rsi_parse+0x490>
	    h->expiry_time < cd->nextcheck)
    743c:	80 01 00 30 	lwz     r0,48(r1)
    7440:	7c 0b 03 78 	mr      r11,r0
    7444:	81 2b 00 04 	lwz     r9,4(r11)
    7448:	80 01 00 34 	lwz     r0,52(r1)
    744c:	7c 0b 03 78 	mr      r11,r0
    7450:	80 0b 00 44 	lwz     r0,68(r11)
}


static inline void cache_put(struct cache_head *h, struct cache_detail *cd)
{
	if (atomic_read(&h->ref.refcount) <= 2 &&
    7454:	7f 89 00 00 	cmpw    cr7,r9,r0
    7458:	40 9c 00 1c 	bge-    cr7,7474 <rsi_parse+0x490>
	    h->expiry_time < cd->nextcheck)
		cd->nextcheck = h->expiry_time;
    745c:	80 01 00 30 	lwz     r0,48(r1)
    7460:	7c 0b 03 78 	mr      r11,r0
    7464:	81 2b 00 04 	lwz     r9,4(r11)
    7468:	80 01 00 34 	lwz     r0,52(r1)
    746c:	7c 0b 03 78 	mr      r11,r0
    7470:	91 2b 00 44 	stw     r9,68(r11)
	kref_put(&h->ref, cd->cache_put);
    7474:	80 01 00 30 	lwz     r0,48(r1)
    7478:	31 20 00 0c 	addic   r9,r0,12
    747c:	80 01 00 34 	lwz     r0,52(r1)
    7480:	7c 0b 03 78 	mr      r11,r0
    7484:	80 0b 00 14 	lwz     r0,20(r11)
    7488:	7d 23 4b 78 	mr      r3,r9
    748c:	7c 04 03 78 	mr      r4,r0
    7490:	48 00 00 01 	bl      7490 <rsi_parse+0x4ac>
    7494:	48 00 00 0c 	b       74a0 <rsi_parse+0x4bc>
	else
		status = -ENOMEM;
    7498:	38 00 ff f4 	li      r0,-12
    749c:	90 01 00 0c 	stw     r0,12(r1)
	return status;
    74a0:	80 01 00 0c 	lwz     r0,12(r1)
}
    74a4:	7c 03 03 78 	mr      r3,r0
    74a8:	80 01 00 e4 	lwz     r0,228(r1)
    74ac:	7c 08 03 a6 	mtlr    r0
    74b0:	83 e1 00 dc 	lwz     r31,220(r1)
    74b4:	38 21 00 e0 	addi    r1,r1,224
    74b8:	4e 80 00 20 	blr

000074bc <rsi_lookup>:
	.update		= update_rsi,
	.alloc		= rsi_alloc,
};

static struct rsi *rsi_lookup(struct rsi *item)
{
    74bc:	94 21 ff 90 	stwu    r1,-112(r1)
    74c0:	7c 08 02 a6 	mflr    r0
    74c4:	90 01 00 74 	stw     r0,116(r1)
    74c8:	90 61 00 68 	stw     r3,104(r1)
    74cc:	80 01 00 68 	lwz     r0,104(r1)
    74d0:	90 01 00 14 	stw     r0,20(r1)
	kfree(rsii);
}

static inline int rsi_hash(struct rsi *item)
{
	return hash_mem(item->in_handle.data, item->in_handle.len, RSI_HASHBITS)
    74d4:	80 01 00 14 	lwz     r0,20(r1)
    74d8:	7c 0a 03 78 	mr      r10,r0
    74dc:	81 2a 00 18 	lwz     r9,24(r10)
    74e0:	80 01 00 14 	lwz     r0,20(r1)
    74e4:	7c 0b 03 78 	mr      r11,r0
    74e8:	80 0b 00 14 	lwz     r0,20(r11)
    74ec:	91 21 00 18 	stw     r9,24(r1)
    74f0:	90 01 00 1c 	stw     r0,28(r1)
    74f4:	38 00 00 06 	li      r0,6
    74f8:	90 01 00 20 	stw     r0,32(r1)
	return hash >> (BITS_PER_LONG - bits);
}

static inline unsigned long hash_mem(char *buf, int length, int bits)
{
	unsigned long hash = 0;
    74fc:	38 00 00 00 	li      r0,0
    7500:	90 01 00 24 	stw     r0,36(r1)
	unsigned long l = 0;
    7504:	38 00 00 00 	li      r0,0
    7508:	90 01 00 28 	stw     r0,40(r1)
	int len = 0;
    750c:	38 00 00 00 	li      r0,0
    7510:	90 01 00 2c 	stw     r0,44(r1)
	unsigned char c;
	do {
		if (len == length) {
    7514:	81 21 00 1c 	lwz     r9,28(r1)
    7518:	80 01 00 2c 	lwz     r0,44(r1)
    751c:	7f 89 00 00 	cmpw    cr7,r9,r0
    7520:	40 9e 00 18 	bne-    cr7,7538 <rsi_lookup+0x7c>
			c = (char)len; len = -1;
    7524:	80 01 00 2c 	lwz     r0,44(r1)
    7528:	98 01 00 30 	stb     r0,48(r1)
    752c:	38 00 ff ff 	li      r0,-1
    7530:	90 01 00 2c 	stw     r0,44(r1)
    7534:	48 00 00 20 	b       7554 <rsi_lookup+0x98>
		} else
			c = *buf++;
    7538:	80 01 00 18 	lwz     r0,24(r1)
    753c:	7c 09 03 78 	mr      r9,r0
    7540:	88 09 00 00 	lbz     r0,0(r9)
    7544:	98 01 00 30 	stb     r0,48(r1)
    7548:	80 01 00 18 	lwz     r0,24(r1)
    754c:	30 00 00 01 	addic   r0,r0,1
    7550:	90 01 00 18 	stw     r0,24(r1)
		l = (l << 8) | c;
    7554:	80 01 00 28 	lwz     r0,40(r1)
    7558:	54 09 40 2e 	rlwinm  r9,r0,8,0,23
    755c:	88 01 00 30 	lbz     r0,48(r1)
    7560:	54 00 06 3e 	clrlwi  r0,r0,24
    7564:	7d 20 03 78 	or      r0,r9,r0
    7568:	90 01 00 28 	stw     r0,40(r1)
		len++;
    756c:	80 01 00 2c 	lwz     r0,44(r1)
    7570:	30 00 00 01 	addic   r0,r0,1
    7574:	90 01 00 2c 	stw     r0,44(r1)
		if ((len & (BITS_PER_LONG/8-1))==0)
    7578:	80 01 00 2c 	lwz     r0,44(r1)
    757c:	54 00 07 be 	clrlwi  r0,r0,30
    7580:	2f 80 00 00 	cmpwi   cr7,r0,0
    7584:	40 9e 00 44 	bne-    cr7,75c8 <rsi_lookup+0x10c>
			hash = hash_long(hash^l, BITS_PER_LONG);
    7588:	81 21 00 28 	lwz     r9,40(r1)
    758c:	80 01 00 24 	lwz     r0,36(r1)
    7590:	7d 20 02 78 	xor     r0,r9,r0
    7594:	90 01 00 34 	stw     r0,52(r1)
    7598:	38 00 00 20 	li      r0,32
    759c:	90 01 00 38 	stw     r0,56(r1)
}

static inline u32 hash_32(u32 val, unsigned int bits)
{
	/* On some cpus multiply is faster, on others gcc will do shifts */
	u32 hash = val * GOLDEN_RATIO_PRIME_32;
    75a0:	81 21 00 34 	lwz     r9,52(r1)
    75a4:	3c 00 9e 37 	lis     r0,-25033
    75a8:	60 00 00 01 	ori     r0,r0,1
    75ac:	7c 09 01 d6 	mullw   r0,r9,r0
    75b0:	90 01 00 3c 	stw     r0,60(r1)

	/* High bits are more random, so use them. */
	return hash >> (32 - bits);
    75b4:	80 01 00 38 	lwz     r0,56(r1)
    75b8:	20 00 00 20 	subfic  r0,r0,32
    75bc:	81 21 00 3c 	lwz     r9,60(r1)
    75c0:	7d 20 04 30 	srw     r0,r9,r0
    75c4:	90 01 00 24 	stw     r0,36(r1)
	} while (len);
    75c8:	80 01 00 2c 	lwz     r0,44(r1)
    75cc:	2f 80 00 00 	cmpwi   cr7,r0,0
    75d0:	40 9e ff 44 	bne+    cr7,7514 <rsi_lookup+0x58>
	return hash >> (BITS_PER_LONG - bits);
    75d4:	80 01 00 20 	lwz     r0,32(r1)
    75d8:	20 00 00 20 	subfic  r0,r0,32
    75dc:	81 21 00 24 	lwz     r9,36(r1)
    75e0:	7d 20 04 30 	srw     r0,r9,r0
    75e4:	7c 09 03 78 	mr      r9,r0
	     ^ hash_mem(item->in_token.data, item->in_token.len, RSI_HASHBITS);
    75e8:	80 01 00 14 	lwz     r0,20(r1)
    75ec:	7c 0a 03 78 	mr      r10,r0
    75f0:	81 6a 00 20 	lwz     r11,32(r10)
    75f4:	80 01 00 14 	lwz     r0,20(r1)
    75f8:	7c 0a 03 78 	mr      r10,r0
    75fc:	80 0a 00 1c 	lwz     r0,28(r10)
    7600:	91 61 00 40 	stw     r11,64(r1)
    7604:	90 01 00 44 	stw     r0,68(r1)
    7608:	38 00 00 06 	li      r0,6
    760c:	90 01 00 48 	stw     r0,72(r1)
	return hash >> (BITS_PER_LONG - bits);
}

static inline unsigned long hash_mem(char *buf, int length, int bits)
{
	unsigned long hash = 0;
    7610:	38 00 00 00 	li      r0,0
    7614:	90 01 00 4c 	stw     r0,76(r1)
	unsigned long l = 0;
    7618:	38 00 00 00 	li      r0,0
    761c:	90 01 00 50 	stw     r0,80(r1)
	int len = 0;
    7620:	38 00 00 00 	li      r0,0
    7624:	90 01 00 54 	stw     r0,84(r1)
	unsigned char c;
	do {
		if (len == length) {
    7628:	81 61 00 44 	lwz     r11,68(r1)
    762c:	80 01 00 54 	lwz     r0,84(r1)
    7630:	7f 8b 00 00 	cmpw    cr7,r11,r0
    7634:	40 9e 00 18 	bne-    cr7,764c <rsi_lookup+0x190>
			c = (char)len; len = -1;
    7638:	80 01 00 54 	lwz     r0,84(r1)
    763c:	98 01 00 58 	stb     r0,88(r1)
    7640:	38 00 ff ff 	li      r0,-1
    7644:	90 01 00 54 	stw     r0,84(r1)
    7648:	48 00 00 20 	b       7668 <rsi_lookup+0x1ac>
		} else
			c = *buf++;
    764c:	80 01 00 40 	lwz     r0,64(r1)
    7650:	7c 0b 03 78 	mr      r11,r0
    7654:	88 0b 00 00 	lbz     r0,0(r11)
    7658:	98 01 00 58 	stb     r0,88(r1)
    765c:	80 01 00 40 	lwz     r0,64(r1)
    7660:	30 00 00 01 	addic   r0,r0,1
    7664:	90 01 00 40 	stw     r0,64(r1)
		l = (l << 8) | c;
    7668:	80 01 00 50 	lwz     r0,80(r1)
    766c:	54 0b 40 2e 	rlwinm  r11,r0,8,0,23
    7670:	88 01 00 58 	lbz     r0,88(r1)
    7674:	54 00 06 3e 	clrlwi  r0,r0,24
    7678:	7d 60 03 78 	or      r0,r11,r0
    767c:	90 01 00 50 	stw     r0,80(r1)
		len++;
    7680:	80 01 00 54 	lwz     r0,84(r1)
    7684:	30 00 00 01 	addic   r0,r0,1
    7688:	90 01 00 54 	stw     r0,84(r1)
		if ((len & (BITS_PER_LONG/8-1))==0)
    768c:	80 01 00 54 	lwz     r0,84(r1)
    7690:	54 00 07 be 	clrlwi  r0,r0,30
    7694:	2f 80 00 00 	cmpwi   cr7,r0,0
    7698:	40 9e 00 44 	bne-    cr7,76dc <rsi_lookup+0x220>
			hash = hash_long(hash^l, BITS_PER_LONG);
    769c:	81 61 00 50 	lwz     r11,80(r1)
    76a0:	80 01 00 4c 	lwz     r0,76(r1)
    76a4:	7d 60 02 78 	xor     r0,r11,r0
    76a8:	90 01 00 5c 	stw     r0,92(r1)
    76ac:	38 00 00 20 	li      r0,32
    76b0:	90 01 00 60 	stw     r0,96(r1)
}

static inline u32 hash_32(u32 val, unsigned int bits)
{
	/* On some cpus multiply is faster, on others gcc will do shifts */
	u32 hash = val * GOLDEN_RATIO_PRIME_32;
    76b4:	81 61 00 5c 	lwz     r11,92(r1)
    76b8:	3c 00 9e 37 	lis     r0,-25033
    76bc:	60 00 00 01 	ori     r0,r0,1
    76c0:	7c 0b 01 d6 	mullw   r0,r11,r0
    76c4:	90 01 00 64 	stw     r0,100(r1)

	/* High bits are more random, so use them. */
	return hash >> (32 - bits);
    76c8:	80 01 00 60 	lwz     r0,96(r1)
    76cc:	20 00 00 20 	subfic  r0,r0,32
    76d0:	81 61 00 64 	lwz     r11,100(r1)
    76d4:	7d 60 04 30 	srw     r0,r11,r0
    76d8:	90 01 00 4c 	stw     r0,76(r1)
	} while (len);
    76dc:	80 01 00 54 	lwz     r0,84(r1)
    76e0:	2f 80 00 00 	cmpwi   cr7,r0,0
    76e4:	40 9e ff 44 	bne+    cr7,7628 <rsi_lookup+0x16c>
	return hash >> (BITS_PER_LONG - bits);
    76e8:	80 01 00 48 	lwz     r0,72(r1)
    76ec:	20 00 00 20 	subfic  r0,r0,32
    76f0:	81 61 00 4c 	lwz     r11,76(r1)
    76f4:	7d 60 04 30 	srw     r0,r11,r0
    76f8:	7d 20 02 78 	xor     r0,r9,r0
};

static struct rsi *rsi_lookup(struct rsi *item)
{
	struct cache_head *ch;
	int hash = rsi_hash(item);
    76fc:	90 01 00 08 	stw     r0,8(r1)

	ch = sunrpc_cache_lookup(&rsi_cache, &item->h, hash);
    7700:	80 01 00 68 	lwz     r0,104(r1)
    7704:	3d 20 00 00 	lis     r9,0
    7708:	38 69 00 00 	addi    r3,r9,0
    770c:	7c 04 03 78 	mr      r4,r0
    7710:	80 a1 00 08 	lwz     r5,8(r1)
    7714:	48 00 00 01 	bl      7714 <rsi_lookup+0x258>
    7718:	90 61 00 0c 	stw     r3,12(r1)
	if (ch)
    771c:	80 01 00 0c 	lwz     r0,12(r1)
    7720:	2f 80 00 00 	cmpwi   cr7,r0,0
    7724:	41 9e 00 14 	beq-    cr7,7738 <rsi_lookup+0x27c>
		return container_of(ch, struct rsi, h);
    7728:	80 01 00 0c 	lwz     r0,12(r1)
    772c:	90 01 00 10 	stw     r0,16(r1)
    7730:	80 01 00 10 	lwz     r0,16(r1)
    7734:	48 00 00 08 	b       773c <rsi_lookup+0x280>
	else
		return NULL;
    7738:	38 00 00 00 	li      r0,0
}
    773c:	7c 03 03 78 	mr      r3,r0
    7740:	80 01 00 74 	lwz     r0,116(r1)
    7744:	7c 08 03 a6 	mtlr    r0
    7748:	38 21 00 70 	addi    r1,r1,112
    774c:	4e 80 00 20 	blr

00007750 <rsi_update>:

static struct rsi *rsi_update(struct rsi *new, struct rsi *old)
{
    7750:	94 21 ff 90 	stwu    r1,-112(r1)
    7754:	7c 08 02 a6 	mflr    r0
    7758:	90 01 00 74 	stw     r0,116(r1)
    775c:	90 61 00 68 	stw     r3,104(r1)
    7760:	90 81 00 6c 	stw     r4,108(r1)
    7764:	80 01 00 68 	lwz     r0,104(r1)
    7768:	90 01 00 14 	stw     r0,20(r1)
	kfree(rsii);
}

static inline int rsi_hash(struct rsi *item)
{
	return hash_mem(item->in_handle.data, item->in_handle.len, RSI_HASHBITS)
    776c:	80 01 00 14 	lwz     r0,20(r1)
    7770:	7c 0a 03 78 	mr      r10,r0
    7774:	81 2a 00 18 	lwz     r9,24(r10)
    7778:	80 01 00 14 	lwz     r0,20(r1)
    777c:	7c 0b 03 78 	mr      r11,r0
    7780:	80 0b 00 14 	lwz     r0,20(r11)
    7784:	91 21 00 18 	stw     r9,24(r1)
    7788:	90 01 00 1c 	stw     r0,28(r1)
    778c:	38 00 00 06 	li      r0,6
    7790:	90 01 00 20 	stw     r0,32(r1)
	return hash >> (BITS_PER_LONG - bits);
}

static inline unsigned long hash_mem(char *buf, int length, int bits)
{
	unsigned long hash = 0;
    7794:	38 00 00 00 	li      r0,0
    7798:	90 01 00 24 	stw     r0,36(r1)
	unsigned long l = 0;
    779c:	38 00 00 00 	li      r0,0
    77a0:	90 01 00 28 	stw     r0,40(r1)
	int len = 0;
    77a4:	38 00 00 00 	li      r0,0
    77a8:	90 01 00 2c 	stw     r0,44(r1)
	unsigned char c;
	do {
		if (len == length) {
    77ac:	81 21 00 1c 	lwz     r9,28(r1)
    77b0:	80 01 00 2c 	lwz     r0,44(r1)
    77b4:	7f 89 00 00 	cmpw    cr7,r9,r0
    77b8:	40 9e 00 18 	bne-    cr7,77d0 <rsi_update+0x80>
			c = (char)len; len = -1;
    77bc:	80 01 00 2c 	lwz     r0,44(r1)
    77c0:	98 01 00 30 	stb     r0,48(r1)
    77c4:	38 00 ff ff 	li      r0,-1
    77c8:	90 01 00 2c 	stw     r0,44(r1)
    77cc:	48 00 00 20 	b       77ec <rsi_update+0x9c>
		} else
			c = *buf++;
    77d0:	80 01 00 18 	lwz     r0,24(r1)
    77d4:	7c 09 03 78 	mr      r9,r0
    77d8:	88 09 00 00 	lbz     r0,0(r9)
    77dc:	98 01 00 30 	stb     r0,48(r1)
    77e0:	80 01 00 18 	lwz     r0,24(r1)
    77e4:	30 00 00 01 	addic   r0,r0,1
    77e8:	90 01 00 18 	stw     r0,24(r1)
		l = (l << 8) | c;
    77ec:	80 01 00 28 	lwz     r0,40(r1)
    77f0:	54 09 40 2e 	rlwinm  r9,r0,8,0,23
    77f4:	88 01 00 30 	lbz     r0,48(r1)
    77f8:	54 00 06 3e 	clrlwi  r0,r0,24
    77fc:	7d 20 03 78 	or      r0,r9,r0
    7800:	90 01 00 28 	stw     r0,40(r1)
		len++;
    7804:	80 01 00 2c 	lwz     r0,44(r1)
    7808:	30 00 00 01 	addic   r0,r0,1
    780c:	90 01 00 2c 	stw     r0,44(r1)
		if ((len & (BITS_PER_LONG/8-1))==0)
    7810:	80 01 00 2c 	lwz     r0,44(r1)
    7814:	54 00 07 be 	clrlwi  r0,r0,30
    7818:	2f 80 00 00 	cmpwi   cr7,r0,0
    781c:	40 9e 00 44 	bne-    cr7,7860 <rsi_update+0x110>
			hash = hash_long(hash^l, BITS_PER_LONG);
    7820:	81 21 00 28 	lwz     r9,40(r1)
    7824:	80 01 00 24 	lwz     r0,36(r1)
    7828:	7d 20 02 78 	xor     r0,r9,r0
    782c:	90 01 00 34 	stw     r0,52(r1)
    7830:	38 00 00 20 	li      r0,32
    7834:	90 01 00 38 	stw     r0,56(r1)
}

static inline u32 hash_32(u32 val, unsigned int bits)
{
	/* On some cpus multiply is faster, on others gcc will do shifts */
	u32 hash = val * GOLDEN_RATIO_PRIME_32;
    7838:	81 21 00 34 	lwz     r9,52(r1)
    783c:	3c 00 9e 37 	lis     r0,-25033
    7840:	60 00 00 01 	ori     r0,r0,1
    7844:	7c 09 01 d6 	mullw   r0,r9,r0
    7848:	90 01 00 3c 	stw     r0,60(r1)

	/* High bits are more random, so use them. */
	return hash >> (32 - bits);
    784c:	80 01 00 38 	lwz     r0,56(r1)
    7850:	20 00 00 20 	subfic  r0,r0,32
    7854:	81 21 00 3c 	lwz     r9,60(r1)
    7858:	7d 20 04 30 	srw     r0,r9,r0
    785c:	90 01 00 24 	stw     r0,36(r1)
	} while (len);
    7860:	80 01 00 2c 	lwz     r0,44(r1)
    7864:	2f 80 00 00 	cmpwi   cr7,r0,0
    7868:	40 9e ff 44 	bne+    cr7,77ac <rsi_update+0x5c>
	return hash >> (BITS_PER_LONG - bits);
    786c:	80 01 00 20 	lwz     r0,32(r1)
    7870:	20 00 00 20 	subfic  r0,r0,32
    7874:	81 21 00 24 	lwz     r9,36(r1)
    7878:	7d 20 04 30 	srw     r0,r9,r0
    787c:	7c 09 03 78 	mr      r9,r0
	     ^ hash_mem(item->in_token.data, item->in_token.len, RSI_HASHBITS);
    7880:	80 01 00 14 	lwz     r0,20(r1)
    7884:	7c 0a 03 78 	mr      r10,r0
    7888:	81 6a 00 20 	lwz     r11,32(r10)
    788c:	80 01 00 14 	lwz     r0,20(r1)
    7890:	7c 0a 03 78 	mr      r10,r0
    7894:	80 0a 00 1c 	lwz     r0,28(r10)
    7898:	91 61 00 40 	stw     r11,64(r1)
    789c:	90 01 00 44 	stw     r0,68(r1)
    78a0:	38 00 00 06 	li      r0,6
    78a4:	90 01 00 48 	stw     r0,72(r1)
	return hash >> (BITS_PER_LONG - bits);
}

static inline unsigned long hash_mem(char *buf, int length, int bits)
{
	unsigned long hash = 0;
    78a8:	38 00 00 00 	li      r0,0
    78ac:	90 01 00 4c 	stw     r0,76(r1)
	unsigned long l = 0;
    78b0:	38 00 00 00 	li      r0,0
    78b4:	90 01 00 50 	stw     r0,80(r1)
	int len = 0;
    78b8:	38 00 00 00 	li      r0,0
    78bc:	90 01 00 54 	stw     r0,84(r1)
	unsigned char c;
	do {
		if (len == length) {
    78c0:	81 61 00 44 	lwz     r11,68(r1)
    78c4:	80 01 00 54 	lwz     r0,84(r1)
    78c8:	7f 8b 00 00 	cmpw    cr7,r11,r0
    78cc:	40 9e 00 18 	bne-    cr7,78e4 <rsi_update+0x194>
			c = (char)len; len = -1;
    78d0:	80 01 00 54 	lwz     r0,84(r1)
    78d4:	98 01 00 58 	stb     r0,88(r1)
    78d8:	38 00 ff ff 	li      r0,-1
    78dc:	90 01 00 54 	stw     r0,84(r1)
    78e0:	48 00 00 20 	b       7900 <rsi_update+0x1b0>
		} else
			c = *buf++;
    78e4:	80 01 00 40 	lwz     r0,64(r1)
    78e8:	7c 0b 03 78 	mr      r11,r0
    78ec:	88 0b 00 00 	lbz     r0,0(r11)
    78f0:	98 01 00 58 	stb     r0,88(r1)
    78f4:	80 01 00 40 	lwz     r0,64(r1)
    78f8:	30 00 00 01 	addic   r0,r0,1
    78fc:	90 01 00 40 	stw     r0,64(r1)
		l = (l << 8) | c;
    7900:	80 01 00 50 	lwz     r0,80(r1)
    7904:	54 0b 40 2e 	rlwinm  r11,r0,8,0,23
    7908:	88 01 00 58 	lbz     r0,88(r1)
    790c:	54 00 06 3e 	clrlwi  r0,r0,24
    7910:	7d 60 03 78 	or      r0,r11,r0
    7914:	90 01 00 50 	stw     r0,80(r1)
		len++;
    7918:	80 01 00 54 	lwz     r0,84(r1)
    791c:	30 00 00 01 	addic   r0,r0,1
    7920:	90 01 00 54 	stw     r0,84(r1)
		if ((len & (BITS_PER_LONG/8-1))==0)
    7924:	80 01 00 54 	lwz     r0,84(r1)
    7928:	54 00 07 be 	clrlwi  r0,r0,30
    792c:	2f 80 00 00 	cmpwi   cr7,r0,0
    7930:	40 9e 00 44 	bne-    cr7,7974 <rsi_update+0x224>
			hash = hash_long(hash^l, BITS_PER_LONG);
    7934:	81 61 00 50 	lwz     r11,80(r1)
    7938:	80 01 00 4c 	lwz     r0,76(r1)
    793c:	7d 60 02 78 	xor     r0,r11,r0
    7940:	90 01 00 5c 	stw     r0,92(r1)
    7944:	38 00 00 20 	li      r0,32
    7948:	90 01 00 60 	stw     r0,96(r1)
}

static inline u32 hash_32(u32 val, unsigned int bits)
{
	/* On some cpus multiply is faster, on others gcc will do shifts */
	u32 hash = val * GOLDEN_RATIO_PRIME_32;
    794c:	81 61 00 5c 	lwz     r11,92(r1)
    7950:	3c 00 9e 37 	lis     r0,-25033
    7954:	60 00 00 01 	ori     r0,r0,1
    7958:	7c 0b 01 d6 	mullw   r0,r11,r0
    795c:	90 01 00 64 	stw     r0,100(r1)

	/* High bits are more random, so use them. */
	return hash >> (32 - bits);
    7960:	80 01 00 60 	lwz     r0,96(r1)
    7964:	20 00 00 20 	subfic  r0,r0,32
    7968:	81 61 00 64 	lwz     r11,100(r1)
    796c:	7d 60 04 30 	srw     r0,r11,r0
    7970:	90 01 00 4c 	stw     r0,76(r1)
	} while (len);
    7974:	80 01 00 54 	lwz     r0,84(r1)
    7978:	2f 80 00 00 	cmpwi   cr7,r0,0
    797c:	40 9e ff 44 	bne+    cr7,78c0 <rsi_update+0x170>
	return hash >> (BITS_PER_LONG - bits);
    7980:	80 01 00 48 	lwz     r0,72(r1)
    7984:	20 00 00 20 	subfic  r0,r0,32
    7988:	81 61 00 4c 	lwz     r11,76(r1)
    798c:	7d 60 04 30 	srw     r0,r11,r0
    7990:	7d 20 02 78 	xor     r0,r9,r0
}

static struct rsi *rsi_update(struct rsi *new, struct rsi *old)
{
	struct cache_head *ch;
	int hash = rsi_hash(new);
    7994:	90 01 00 08 	stw     r0,8(r1)

	ch = sunrpc_cache_update(&rsi_cache, &new->h,
    7998:	81 21 00 68 	lwz     r9,104(r1)
    799c:	80 01 00 6c 	lwz     r0,108(r1)
    79a0:	3d 60 00 00 	lis     r11,0
    79a4:	38 6b 00 00 	addi    r3,r11,0
    79a8:	7d 24 4b 78 	mr      r4,r9
    79ac:	7c 05 03 78 	mr      r5,r0
    79b0:	80 c1 00 08 	lwz     r6,8(r1)
    79b4:	48 00 00 01 	bl      79b4 <rsi_update+0x264>
    79b8:	90 61 00 0c 	stw     r3,12(r1)
				 &old->h, hash);
	if (ch)
    79bc:	80 01 00 0c 	lwz     r0,12(r1)
    79c0:	2f 80 00 00 	cmpwi   cr7,r0,0
    79c4:	41 9e 00 14 	beq-    cr7,79d8 <rsi_update+0x288>
		return container_of(ch, struct rsi, h);
    79c8:	80 01 00 0c 	lwz     r0,12(r1)
    79cc:	90 01 00 10 	stw     r0,16(r1)
    79d0:	80 01 00 10 	lwz     r0,16(r1)
    79d4:	48 00 00 08 	b       79dc <rsi_update+0x28c>
	else
		return NULL;
    79d8:	38 00 00 00 	li      r0,0
}
    79dc:	7c 03 03 78 	mr      r3,r0
    79e0:	80 01 00 74 	lwz     r0,116(r1)
    79e4:	7c 08 03 a6 	mtlr    r0
    79e8:	38 21 00 70 	addi    r1,r1,112
    79ec:	4e 80 00 20 	blr

000079f0 <rsc_free>:
static struct cache_detail rsc_cache;
static struct rsc *rsc_update(struct rsc *new, struct rsc *old);
static struct rsc *rsc_lookup(struct rsc *item);

static void rsc_free(struct rsc *rsci)
{
    79f0:	94 21 ff d0 	stwu    r1,-48(r1)
    79f4:	7c 08 02 a6 	mflr    r0
    79f8:	90 01 00 34 	stw     r0,52(r1)
    79fc:	93 e1 00 2c 	stw     r31,44(r1)
    7a00:	90 61 00 18 	stw     r3,24(r1)
	kfree(rsci->handle.data);
    7a04:	80 01 00 18 	lwz     r0,24(r1)
    7a08:	7c 09 03 78 	mr      r9,r0
    7a0c:	80 09 00 18 	lwz     r0,24(r9)
    7a10:	7c 03 03 78 	mr      r3,r0
    7a14:	48 00 00 01 	bl      7a14 <rsc_free+0x24>
	if (rsci->mechctx)
    7a18:	80 01 00 18 	lwz     r0,24(r1)
    7a1c:	7c 09 03 78 	mr      r9,r0
    7a20:	80 09 00 3c 	lwz     r0,60(r9)
    7a24:	2f 80 00 00 	cmpwi   cr7,r0,0
    7a28:	41 9e 00 14 	beq-    cr7,7a3c <rsc_free+0x4c>
		gss_delete_sec_context(&rsci->mechctx);
    7a2c:	80 01 00 18 	lwz     r0,24(r1)
    7a30:	30 00 00 3c 	addic   r0,r0,60
    7a34:	7c 03 03 78 	mr      r3,r0
    7a38:	48 00 00 01 	bl      7a38 <rsc_free+0x48>
	if (rsci->cred.cr_group_info)
    7a3c:	80 01 00 18 	lwz     r0,24(r1)
    7a40:	7c 09 03 78 	mr      r9,r0
    7a44:	80 09 00 24 	lwz     r0,36(r9)
    7a48:	2f 80 00 00 	cmpwi   cr7,r0,0
    7a4c:	41 9e 00 4c 	beq-    cr7,7a98 <rsc_free+0xa8>
		put_group_info(rsci->cred.cr_group_info);
    7a50:	80 01 00 18 	lwz     r0,24(r1)
    7a54:	7c 09 03 78 	mr      r9,r0
    7a58:	80 09 00 24 	lwz     r0,36(r9)
    7a5c:	90 01 00 08 	stw     r0,8(r1)
	PPC405_ERR77(0,%1)
"	stwcx.	%0,0,%1\n\
	bne-	1b"
	PPC_ACQUIRE_BARRIER
	: "=&r" (t)
	: "r" (&v->counter)
    7a60:	80 01 00 08 	lwz     r0,8(r1)

static __inline__ int atomic_dec_return(atomic_t *v)
{
	int t;

	__asm__ __volatile__(
    7a64:	7f e0 00 28 	lwarx   r31,0,r0
    7a68:	33 ff ff ff 	addic   r31,r31,-1
    7a6c:	7f e0 01 2d 	stwcx.  r31,0,r0
    7a70:	40 a2 ff f4 	bne-    7a64 <rsc_free+0x74>
    7a74:	93 e1 00 0c 	stw     r31,12(r1)
	PPC_ACQUIRE_BARRIER
	: "=&r" (t)
	: "r" (&v->counter)
	: "cc", "xer", "memory");

	return t;
    7a78:	80 01 00 0c 	lwz     r0,12(r1)
    7a7c:	2f 80 00 00 	cmpwi   cr7,r0,0
    7a80:	40 9e 00 18 	bne-    cr7,7a98 <rsc_free+0xa8>
    7a84:	80 01 00 18 	lwz     r0,24(r1)
    7a88:	7c 09 03 78 	mr      r9,r0
    7a8c:	80 09 00 24 	lwz     r0,36(r9)
    7a90:	7c 03 03 78 	mr      r3,r0
    7a94:	48 00 00 01 	bl      7a94 <rsc_free+0xa4>
	kfree(rsci->client_name);
    7a98:	80 01 00 18 	lwz     r0,24(r1)
    7a9c:	7c 09 03 78 	mr      r9,r0
    7aa0:	80 09 00 40 	lwz     r0,64(r9)
    7aa4:	7c 03 03 78 	mr      r3,r0
    7aa8:	48 00 00 01 	bl      7aa8 <rsc_free+0xb8>
}
    7aac:	80 01 00 34 	lwz     r0,52(r1)
    7ab0:	7c 08 03 a6 	mtlr    r0
    7ab4:	83 e1 00 2c 	lwz     r31,44(r1)
    7ab8:	38 21 00 30 	addi    r1,r1,48
    7abc:	4e 80 00 20 	blr

00007ac0 <rsc_put>:

static void rsc_put(struct kref *ref)
{
    7ac0:	94 21 ff e0 	stwu    r1,-32(r1)
    7ac4:	7c 08 02 a6 	mflr    r0
    7ac8:	90 01 00 24 	stw     r0,36(r1)
    7acc:	90 61 00 18 	stw     r3,24(r1)
	struct rsc *rsci = container_of(ref, struct rsc, h.ref);
    7ad0:	80 01 00 18 	lwz     r0,24(r1)
    7ad4:	90 01 00 08 	stw     r0,8(r1)
    7ad8:	80 01 00 08 	lwz     r0,8(r1)
    7adc:	30 00 ff f4 	addic   r0,r0,-12
    7ae0:	90 01 00 0c 	stw     r0,12(r1)

	rsc_free(rsci);
    7ae4:	80 61 00 0c 	lwz     r3,12(r1)
    7ae8:	4b ff ff 09 	bl      79f0 <rsc_free>
	kfree(rsci);
    7aec:	80 61 00 0c 	lwz     r3,12(r1)
    7af0:	48 00 00 01 	bl      7af0 <rsc_put+0x30>
}
    7af4:	80 01 00 24 	lwz     r0,36(r1)
    7af8:	7c 08 03 a6 	mtlr    r0
    7afc:	38 21 00 20 	addi    r1,r1,32
    7b00:	4e 80 00 20 	blr

00007b04 <rsc_match>:
	return hash_mem(rsci->handle.data, rsci->handle.len, RSC_HASHBITS);
}

static int
rsc_match(struct cache_head *a, struct cache_head *b)
{
    7b04:	94 21 ff e0 	stwu    r1,-32(r1)
    7b08:	7c 08 02 a6 	mflr    r0
    7b0c:	90 01 00 24 	stw     r0,36(r1)
    7b10:	90 61 00 18 	stw     r3,24(r1)
    7b14:	90 81 00 1c 	stw     r4,28(r1)
	struct rsc *new = container_of(a, struct rsc, h);
    7b18:	80 01 00 18 	lwz     r0,24(r1)
    7b1c:	90 01 00 08 	stw     r0,8(r1)
    7b20:	80 01 00 08 	lwz     r0,8(r1)
    7b24:	90 01 00 0c 	stw     r0,12(r1)
	struct rsc *tmp = container_of(b, struct rsc, h);
    7b28:	80 01 00 1c 	lwz     r0,28(r1)
    7b2c:	90 01 00 10 	stw     r0,16(r1)
    7b30:	80 01 00 10 	lwz     r0,16(r1)
    7b34:	90 01 00 14 	stw     r0,20(r1)

	return netobj_equal(&new->handle, &tmp->handle);
    7b38:	80 01 00 0c 	lwz     r0,12(r1)
    7b3c:	31 20 00 14 	addic   r9,r0,20
    7b40:	80 01 00 14 	lwz     r0,20(r1)
    7b44:	30 00 00 14 	addic   r0,r0,20
    7b48:	7d 23 4b 78 	mr      r3,r9
    7b4c:	7c 04 03 78 	mr      r4,r0
    7b50:	4b ff ee 71 	bl      69c0 <netobj_equal>
    7b54:	7c 60 1b 78 	mr      r0,r3
}
    7b58:	7c 03 03 78 	mr      r3,r0
    7b5c:	80 01 00 24 	lwz     r0,36(r1)
    7b60:	7c 08 03 a6 	mtlr    r0
    7b64:	38 21 00 20 	addi    r1,r1,32
    7b68:	4e 80 00 20 	blr

00007b6c <rsc_init>:

static void
rsc_init(struct cache_head *cnew, struct cache_head *ctmp)
{
    7b6c:	94 21 ff e0 	stwu    r1,-32(r1)
    7b70:	90 61 00 18 	stw     r3,24(r1)
    7b74:	90 81 00 1c 	stw     r4,28(r1)
	struct rsc *new = container_of(cnew, struct rsc, h);
    7b78:	80 01 00 18 	lwz     r0,24(r1)
    7b7c:	90 01 00 08 	stw     r0,8(r1)
    7b80:	80 01 00 08 	lwz     r0,8(r1)
    7b84:	90 01 00 0c 	stw     r0,12(r1)
	struct rsc *tmp = container_of(ctmp, struct rsc, h);
    7b88:	80 01 00 1c 	lwz     r0,28(r1)
    7b8c:	90 01 00 10 	stw     r0,16(r1)
    7b90:	80 01 00 10 	lwz     r0,16(r1)
    7b94:	90 01 00 14 	stw     r0,20(r1)

	new->handle.len = tmp->handle.len;
    7b98:	80 01 00 14 	lwz     r0,20(r1)
    7b9c:	7c 0b 03 78 	mr      r11,r0
    7ba0:	81 2b 00 14 	lwz     r9,20(r11)
    7ba4:	80 01 00 0c 	lwz     r0,12(r1)
    7ba8:	7c 0b 03 78 	mr      r11,r0
    7bac:	91 2b 00 14 	stw     r9,20(r11)
	tmp->handle.len = 0;
    7bb0:	80 01 00 14 	lwz     r0,20(r1)
    7bb4:	39 20 00 00 	li      r9,0
    7bb8:	7c 0b 03 78 	mr      r11,r0
    7bbc:	91 2b 00 14 	stw     r9,20(r11)
	new->handle.data = tmp->handle.data;
    7bc0:	80 01 00 14 	lwz     r0,20(r1)
    7bc4:	7c 0b 03 78 	mr      r11,r0
    7bc8:	81 2b 00 18 	lwz     r9,24(r11)
    7bcc:	80 01 00 0c 	lwz     r0,12(r1)
    7bd0:	7c 0b 03 78 	mr      r11,r0
    7bd4:	91 2b 00 18 	stw     r9,24(r11)
	tmp->handle.data = NULL;
    7bd8:	80 01 00 14 	lwz     r0,20(r1)
    7bdc:	39 20 00 00 	li      r9,0
    7be0:	7c 0b 03 78 	mr      r11,r0
    7be4:	91 2b 00 18 	stw     r9,24(r11)
	new->mechctx = NULL;
    7be8:	80 01 00 0c 	lwz     r0,12(r1)
    7bec:	39 20 00 00 	li      r9,0
    7bf0:	7c 0b 03 78 	mr      r11,r0
    7bf4:	91 2b 00 3c 	stw     r9,60(r11)
	new->cred.cr_group_info = NULL;
    7bf8:	80 01 00 0c 	lwz     r0,12(r1)
    7bfc:	39 20 00 00 	li      r9,0
    7c00:	7c 0b 03 78 	mr      r11,r0
    7c04:	91 2b 00 24 	stw     r9,36(r11)
	new->client_name = NULL;
    7c08:	80 01 00 0c 	lwz     r0,12(r1)
    7c0c:	39 20 00 00 	li      r9,0
    7c10:	7c 0b 03 78 	mr      r11,r0
    7c14:	91 2b 00 40 	stw     r9,64(r11)
}
    7c18:	38 21 00 20 	addi    r1,r1,32
    7c1c:	4e 80 00 20 	blr

00007c20 <update_rsc>:

static void
update_rsc(struct cache_head *cnew, struct cache_head *ctmp)
{
    7c20:	94 21 ff d0 	stwu    r1,-48(r1)
    7c24:	90 61 00 28 	stw     r3,40(r1)
    7c28:	90 81 00 2c 	stw     r4,44(r1)
	struct rsc *new = container_of(cnew, struct rsc, h);
    7c2c:	80 01 00 28 	lwz     r0,40(r1)
    7c30:	90 01 00 08 	stw     r0,8(r1)
    7c34:	80 01 00 08 	lwz     r0,8(r1)
    7c38:	90 01 00 0c 	stw     r0,12(r1)
	struct rsc *tmp = container_of(ctmp, struct rsc, h);
    7c3c:	80 01 00 2c 	lwz     r0,44(r1)
    7c40:	90 01 00 10 	stw     r0,16(r1)
    7c44:	80 01 00 10 	lwz     r0,16(r1)
    7c48:	90 01 00 14 	stw     r0,20(r1)

	new->mechctx = tmp->mechctx;
    7c4c:	80 01 00 14 	lwz     r0,20(r1)
    7c50:	7c 08 03 78 	mr      r8,r0
    7c54:	81 28 00 3c 	lwz     r9,60(r8)
    7c58:	80 01 00 0c 	lwz     r0,12(r1)
    7c5c:	7c 0a 03 78 	mr      r10,r0
    7c60:	91 2a 00 3c 	stw     r9,60(r10)
	tmp->mechctx = NULL;
    7c64:	80 01 00 14 	lwz     r0,20(r1)
    7c68:	39 20 00 00 	li      r9,0
    7c6c:	7c 0b 03 78 	mr      r11,r0
    7c70:	91 2b 00 3c 	stw     r9,60(r11)
	memset(&new->seqdata, 0, sizeof(new->seqdata));
    7c74:	80 01 00 0c 	lwz     r0,12(r1)
    7c78:	30 00 00 28 	addic   r0,r0,40
    7c7c:	39 20 00 00 	li      r9,0
    7c80:	7c 08 03 78 	mr      r8,r0
    7c84:	91 28 00 00 	stw     r9,0(r8)
    7c88:	39 20 00 00 	li      r9,0
    7c8c:	7c 0a 03 78 	mr      r10,r0
    7c90:	91 2a 00 04 	stw     r9,4(r10)
    7c94:	39 20 00 00 	li      r9,0
    7c98:	7c 0b 03 78 	mr      r11,r0
    7c9c:	91 2b 00 08 	stw     r9,8(r11)
    7ca0:	39 20 00 00 	li      r9,0
    7ca4:	7c 08 03 78 	mr      r8,r0
    7ca8:	91 28 00 0c 	stw     r9,12(r8)
    7cac:	39 20 00 00 	li      r9,0
    7cb0:	7c 0a 03 78 	mr      r10,r0
    7cb4:	91 2a 00 10 	stw     r9,16(r10)
	spin_lock_init(&new->seqdata.sd_lock);
    7cb8:	80 01 00 0c 	lwz     r0,12(r1)
    7cbc:	30 00 00 3c 	addic   r0,r0,60
    7cc0:	90 01 00 18 	stw     r0,24(r1)
	new->cred = tmp->cred;
    7cc4:	80 01 00 0c 	lwz     r0,12(r1)
    7cc8:	81 21 00 14 	lwz     r9,20(r1)
    7ccc:	81 49 00 1c 	lwz     r10,28(r9)
    7cd0:	81 69 00 20 	lwz     r11,32(r9)
    7cd4:	81 29 00 24 	lwz     r9,36(r9)
    7cd8:	7c 08 03 78 	mr      r8,r0
    7cdc:	91 48 00 1c 	stw     r10,28(r8)
    7ce0:	7c 0a 03 78 	mr      r10,r0
    7ce4:	91 6a 00 20 	stw     r11,32(r10)
    7ce8:	7c 0b 03 78 	mr      r11,r0
    7cec:	91 2b 00 24 	stw     r9,36(r11)
	tmp->cred.cr_group_info = NULL;
    7cf0:	80 01 00 14 	lwz     r0,20(r1)
    7cf4:	39 20 00 00 	li      r9,0
    7cf8:	7c 08 03 78 	mr      r8,r0
    7cfc:	91 28 00 24 	stw     r9,36(r8)
	new->client_name = tmp->client_name;
    7d00:	80 01 00 14 	lwz     r0,20(r1)
    7d04:	7c 0a 03 78 	mr      r10,r0
    7d08:	81 2a 00 40 	lwz     r9,64(r10)
    7d0c:	80 01 00 0c 	lwz     r0,12(r1)
    7d10:	7c 0b 03 78 	mr      r11,r0
    7d14:	91 2b 00 40 	stw     r9,64(r11)
	tmp->client_name = NULL;
    7d18:	80 01 00 14 	lwz     r0,20(r1)
    7d1c:	39 20 00 00 	li      r9,0
    7d20:	7c 08 03 78 	mr      r8,r0
    7d24:	91 28 00 40 	stw     r9,64(r8)
}
    7d28:	38 21 00 30 	addi    r1,r1,48
    7d2c:	4e 80 00 20 	blr

00007d30 <rsc_alloc>:

static struct cache_head *
rsc_alloc(void)
{
    7d30:	94 21 ff e0 	stwu    r1,-32(r1)
    7d34:	7c 08 02 a6 	mflr    r0
    7d38:	90 01 00 24 	stw     r0,36(r1)
    7d3c:	38 00 00 44 	li      r0,68
    7d40:	90 01 00 0c 	stw     r0,12(r1)
    7d44:	38 00 00 d0 	li      r0,208
    7d48:	90 01 00 10 	stw     r0,16(r1)
    7d4c:	80 61 00 0c 	lwz     r3,12(r1)
    7d50:	80 81 00 10 	lwz     r4,16(r1)
    7d54:	48 00 00 01 	bl      7d54 <rsc_alloc+0x24>
    7d58:	7c 60 1b 78 	mr      r0,r3
	struct rsc *rsci = kmalloc(sizeof(*rsci), GFP_KERNEL);
    7d5c:	90 01 00 08 	stw     r0,8(r1)
	if (rsci)
    7d60:	80 01 00 08 	lwz     r0,8(r1)
    7d64:	2f 80 00 00 	cmpwi   cr7,r0,0
    7d68:	41 9e 00 0c 	beq-    cr7,7d74 <rsc_alloc+0x44>
		return &rsci->h;
    7d6c:	80 01 00 08 	lwz     r0,8(r1)
    7d70:	48 00 00 08 	b       7d78 <rsc_alloc+0x48>
	else
		return NULL;
    7d74:	38 00 00 00 	li      r0,0
}
    7d78:	7c 03 03 78 	mr      r3,r0
    7d7c:	80 01 00 24 	lwz     r0,36(r1)
    7d80:	7c 08 03 a6 	mtlr    r0
    7d84:	38 21 00 20 	addi    r1,r1,32
    7d88:	4e 80 00 20 	blr

00007d8c <rsc_parse>:

static int rsc_parse(struct cache_detail *cd,
		     char *mesg, int mlen)
{
    7d8c:	94 21 fe a0 	stwu    r1,-352(r1)
    7d90:	7c 08 02 a6 	mflr    r0
    7d94:	90 01 01 64 	stw     r0,356(r1)
    7d98:	93 e1 01 5c 	stw     r31,348(r1)
    7d9c:	90 61 01 48 	stw     r3,328(r1)
    7da0:	90 81 01 4c 	stw     r4,332(r1)
    7da4:	90 a1 01 50 	stw     r5,336(r1)
	/* contexthandle expiry [ uid gid N <n gids> mechname ...mechdata... ] */
	char *buf = mesg;
    7da8:	80 01 01 4c 	lwz     r0,332(r1)
    7dac:	90 01 00 18 	stw     r0,24(r1)
	int len, rv;
	struct rsc rsci, *rscp = NULL;
    7db0:	38 00 00 00 	li      r0,0
    7db4:	90 01 00 08 	stw     r0,8(r1)
	time_t expiry;
	int status = -EINVAL;
    7db8:	38 00 ff ea 	li      r0,-22
    7dbc:	90 01 00 0c 	stw     r0,12(r1)
	struct gss_api_mech *gm = NULL;
    7dc0:	38 00 00 00 	li      r0,0
    7dc4:	90 01 00 10 	stw     r0,16(r1)

	memset(&rsci, 0, sizeof(rsci));
    7dc8:	38 01 00 a4 	addi    r0,r1,164
    7dcc:	7c 09 03 78 	mr      r9,r0
    7dd0:	38 00 00 44 	li      r0,68
    7dd4:	7d 23 4b 78 	mr      r3,r9
    7dd8:	38 80 00 00 	li      r4,0
    7ddc:	7c 05 03 78 	mr      r5,r0
    7de0:	48 00 00 01 	bl      7de0 <rsc_parse+0x54>
	/* context handle */
	len = qword_get(&mesg, buf, mlen);
    7de4:	38 01 01 4c 	addi    r0,r1,332
    7de8:	7c 03 03 78 	mr      r3,r0
    7dec:	80 81 00 18 	lwz     r4,24(r1)
    7df0:	80 a1 01 50 	lwz     r5,336(r1)
    7df4:	48 00 00 01 	bl      7df4 <rsc_parse+0x68>
    7df8:	90 61 00 1c 	stw     r3,28(r1)
	if (len < 0) goto out;
    7dfc:	80 01 00 1c 	lwz     r0,28(r1)
    7e00:	2f 80 00 00 	cmpwi   cr7,r0,0
    7e04:	41 9c 06 3c 	blt-    cr7,8440 <rsc_parse+0x6b4>
	status = -ENOMEM;
    7e08:	38 00 ff f4 	li      r0,-12
    7e0c:	90 01 00 0c 	stw     r0,12(r1)
	if (dup_to_netobj(&rsci.handle, buf, len))
    7e10:	38 01 00 a4 	addi    r0,r1,164
    7e14:	30 00 00 14 	addic   r0,r0,20
    7e18:	7c 03 03 78 	mr      r3,r0
    7e1c:	80 81 00 18 	lwz     r4,24(r1)
    7e20:	80 a1 00 1c 	lwz     r5,28(r1)
    7e24:	4b ff ed 89 	bl      6bac <dup_to_netobj>
    7e28:	7c 60 1b 78 	mr      r0,r3
    7e2c:	2f 80 00 00 	cmpwi   cr7,r0,0
    7e30:	40 9e 06 18 	bne-    cr7,8448 <rsc_parse+0x6bc>
		goto out;

	rsci.h.flags = 0;
    7e34:	38 00 00 00 	li      r0,0
    7e38:	90 01 00 b4 	stw     r0,180(r1)
	/* expiry */
	expiry = get_expiry(&mesg);
    7e3c:	38 01 01 4c 	addi    r0,r1,332
	if (len < 0) goto out;
	status = -ENOMEM;
	if (dup_to_netobj(&rsci.handle, buf, len))
		goto out;

	rsci.h.flags = 0;
    7e40:	90 01 00 28 	stw     r0,40(r1)
    7e44:	80 01 00 28 	lwz     r0,40(r1)
    7e48:	90 01 00 2c 	stw     r0,44(r1)
static inline time_t get_expiry(char **bpp)
{
	int rv;
	struct timespec boot;

	if (get_int(bpp, &rv))
    7e4c:	38 01 00 ec 	addi    r0,r1,236
    7e50:	90 01 00 30 	stw     r0,48(r1)
static inline int get_int(char **bpp, int *anint)
{
	char buf[50];
	char *ep;
	int rv;
	int len = qword_get(bpp, buf, 50);
    7e54:	38 01 01 10 	addi    r0,r1,272
    7e58:	80 61 00 2c 	lwz     r3,44(r1)
    7e5c:	7c 04 03 78 	mr      r4,r0
    7e60:	38 a0 00 32 	li      r5,50
    7e64:	48 00 00 01 	bl      7e64 <rsc_parse+0xd8>
    7e68:	90 61 00 34 	stw     r3,52(r1)
	if (len < 0) return -EINVAL;
    7e6c:	80 01 00 34 	lwz     r0,52(r1)
    7e70:	2f 80 00 00 	cmpwi   cr7,r0,0
    7e74:	40 9c 00 0c 	bge-    cr7,7e80 <rsc_parse+0xf4>
    7e78:	38 00 ff ea 	li      r0,-22
    7e7c:	48 00 00 68 	b       7ee4 <rsc_parse+0x158>
	if (len ==0) return -ENOENT;
    7e80:	80 01 00 34 	lwz     r0,52(r1)
    7e84:	2f 80 00 00 	cmpwi   cr7,r0,0
    7e88:	40 9e 00 0c 	bne-    cr7,7e94 <rsc_parse+0x108>
    7e8c:	38 00 ff fe 	li      r0,-2
    7e90:	48 00 00 54 	b       7ee4 <rsc_parse+0x158>
	rv = simple_strtol(buf, &ep, 0);
    7e94:	39 21 01 10 	addi    r9,r1,272
    7e98:	38 01 00 f8 	addi    r0,r1,248
    7e9c:	7d 23 4b 78 	mr      r3,r9
    7ea0:	7c 04 03 78 	mr      r4,r0
    7ea4:	38 a0 00 00 	li      r5,0
    7ea8:	48 00 00 01 	bl      7ea8 <rsc_parse+0x11c>
    7eac:	90 61 00 38 	stw     r3,56(r1)
	if (*ep) return -EINVAL;
    7eb0:	80 01 00 f8 	lwz     r0,248(r1)
    7eb4:	7c 09 03 78 	mr      r9,r0
    7eb8:	88 09 00 00 	lbz     r0,0(r9)
    7ebc:	54 00 06 3e 	clrlwi  r0,r0,24
    7ec0:	2f 80 00 00 	cmpwi   cr7,r0,0
    7ec4:	41 9e 00 0c 	beq-    cr7,7ed0 <rsc_parse+0x144>
    7ec8:	38 00 ff ea 	li      r0,-22
    7ecc:	48 00 00 18 	b       7ee4 <rsc_parse+0x158>
	*anint = rv;
    7ed0:	80 01 00 30 	lwz     r0,48(r1)
    7ed4:	81 21 00 38 	lwz     r9,56(r1)
    7ed8:	7c 0b 03 78 	mr      r11,r0
    7edc:	91 2b 00 00 	stw     r9,0(r11)
	return 0;
    7ee0:	38 00 00 00 	li      r0,0
static inline time_t get_expiry(char **bpp)
{
	int rv;
	struct timespec boot;

	if (get_int(bpp, &rv))
    7ee4:	2f 80 00 00 	cmpwi   cr7,r0,0
    7ee8:	41 9e 00 0c 	beq-    cr7,7ef4 <rsc_parse+0x168>
		return 0;
    7eec:	38 00 00 00 	li      r0,0
    7ef0:	48 00 00 30 	b       7f20 <rsc_parse+0x194>
	if (rv < 0)
    7ef4:	80 01 00 ec 	lwz     r0,236(r1)
    7ef8:	2f 80 00 00 	cmpwi   cr7,r0,0
    7efc:	40 9c 00 0c 	bge-    cr7,7f08 <rsc_parse+0x17c>
		return 0;
    7f00:	38 00 00 00 	li      r0,0
    7f04:	48 00 00 1c 	b       7f20 <rsc_parse+0x194>
	getboottime(&boot);
    7f08:	38 01 00 f0 	addi    r0,r1,240
    7f0c:	7c 03 03 78 	mr      r3,r0
    7f10:	48 00 00 01 	bl      7f10 <rsc_parse+0x184>
	return rv - boot.tv_sec;
    7f14:	81 21 00 ec 	lwz     r9,236(r1)
    7f18:	80 01 00 f0 	lwz     r0,240(r1)
    7f1c:	7c 00 48 50 	subf    r0,r0,r9
	/* expiry */
	expiry = get_expiry(&mesg);
    7f20:	90 01 00 20 	stw     r0,32(r1)
	status = -EINVAL;
    7f24:	38 00 ff ea 	li      r0,-22
    7f28:	90 01 00 0c 	stw     r0,12(r1)
	if (expiry == 0)
    7f2c:	80 01 00 20 	lwz     r0,32(r1)
    7f30:	2f 80 00 00 	cmpwi   cr7,r0,0
    7f34:	41 9e 05 1c 	beq-    cr7,8450 <rsc_parse+0x6c4>
		goto out;

	rscp = rsc_lookup(&rsci);
    7f38:	38 01 00 a4 	addi    r0,r1,164
    7f3c:	7c 03 03 78 	mr      r3,r0
    7f40:	48 00 06 49 	bl      8588 <rsc_lookup>
    7f44:	90 61 00 08 	stw     r3,8(r1)
	if (!rscp)
    7f48:	80 01 00 08 	lwz     r0,8(r1)
    7f4c:	2f 80 00 00 	cmpwi   cr7,r0,0
    7f50:	41 9e 05 08 	beq-    cr7,8458 <rsc_parse+0x6cc>
		goto out;

	/* uid, or NEGATIVE */
	rv = get_int(&mesg, &rsci.cred.cr_uid);
    7f54:	38 01 01 4c 	addi    r0,r1,332
	if (expiry == 0)
		goto out;

	rscp = rsc_lookup(&rsci);
	if (!rscp)
		goto out;
    7f58:	90 01 00 3c 	stw     r0,60(r1)

	/* uid, or NEGATIVE */
	rv = get_int(&mesg, &rsci.cred.cr_uid);
    7f5c:	38 01 00 a4 	addi    r0,r1,164
    7f60:	30 00 00 1c 	addic   r0,r0,28
	if (expiry == 0)
		goto out;

	rscp = rsc_lookup(&rsci);
	if (!rscp)
		goto out;
    7f64:	90 01 00 40 	stw     r0,64(r1)
static inline int get_int(char **bpp, int *anint)
{
	char buf[50];
	char *ep;
	int rv;
	int len = qword_get(bpp, buf, 50);
    7f68:	38 01 01 10 	addi    r0,r1,272
    7f6c:	80 61 00 3c 	lwz     r3,60(r1)
    7f70:	7c 04 03 78 	mr      r4,r0
    7f74:	38 a0 00 32 	li      r5,50
    7f78:	48 00 00 01 	bl      7f78 <rsc_parse+0x1ec>
    7f7c:	90 61 00 44 	stw     r3,68(r1)
	if (len < 0) return -EINVAL;
    7f80:	80 01 00 44 	lwz     r0,68(r1)
    7f84:	2f 80 00 00 	cmpwi   cr7,r0,0
    7f88:	40 9c 00 0c 	bge-    cr7,7f94 <rsc_parse+0x208>
    7f8c:	38 00 ff ea 	li      r0,-22
    7f90:	48 00 00 68 	b       7ff8 <rsc_parse+0x26c>
	if (len ==0) return -ENOENT;
    7f94:	80 01 00 44 	lwz     r0,68(r1)
    7f98:	2f 80 00 00 	cmpwi   cr7,r0,0
    7f9c:	40 9e 00 0c 	bne-    cr7,7fa8 <rsc_parse+0x21c>
    7fa0:	38 00 ff fe 	li      r0,-2
    7fa4:	48 00 00 54 	b       7ff8 <rsc_parse+0x26c>
	rv = simple_strtol(buf, &ep, 0);
    7fa8:	39 21 01 10 	addi    r9,r1,272
    7fac:	38 01 00 e8 	addi    r0,r1,232
    7fb0:	7d 23 4b 78 	mr      r3,r9
    7fb4:	7c 04 03 78 	mr      r4,r0
    7fb8:	38 a0 00 00 	li      r5,0
    7fbc:	48 00 00 01 	bl      7fbc <rsc_parse+0x230>
    7fc0:	90 61 00 48 	stw     r3,72(r1)
	if (*ep) return -EINVAL;
    7fc4:	80 01 00 e8 	lwz     r0,232(r1)
    7fc8:	7c 09 03 78 	mr      r9,r0
    7fcc:	88 09 00 00 	lbz     r0,0(r9)
    7fd0:	54 00 06 3e 	clrlwi  r0,r0,24
    7fd4:	2f 80 00 00 	cmpwi   cr7,r0,0
    7fd8:	41 9e 00 0c 	beq-    cr7,7fe4 <rsc_parse+0x258>
    7fdc:	38 00 ff ea 	li      r0,-22
    7fe0:	48 00 00 18 	b       7ff8 <rsc_parse+0x26c>
	*anint = rv;
    7fe4:	80 01 00 40 	lwz     r0,64(r1)
    7fe8:	81 21 00 48 	lwz     r9,72(r1)
    7fec:	7c 0b 03 78 	mr      r11,r0
    7ff0:	91 2b 00 00 	stw     r9,0(r11)
	return 0;
    7ff4:	38 00 00 00 	li      r0,0

	/* uid, or NEGATIVE */
	rv = get_int(&mesg, &rsci.cred.cr_uid);
    7ff8:	90 01 00 24 	stw     r0,36(r1)
	if (rv == -EINVAL)
    7ffc:	81 21 00 24 	lwz     r9,36(r1)
    8000:	38 00 ff ea 	li      r0,-22
    8004:	7f 89 00 00 	cmpw    cr7,r9,r0
    8008:	41 9e 04 58 	beq-    cr7,8460 <rsc_parse+0x6d4>
		goto out;
	if (rv == -ENOENT)
    800c:	81 21 00 24 	lwz     r9,36(r1)
    8010:	38 00 ff fe 	li      r0,-2
    8014:	7f 89 00 00 	cmpw    cr7,r9,r0
    8018:	40 9e 00 84 	bne-    cr7,809c <rsc_parse+0x310>
    801c:	38 00 00 01 	li      r0,1
    8020:	90 01 00 4c 	stw     r0,76(r1)
		set_bit(CACHE_NEGATIVE, &rsci.h.flags);
    8024:	38 01 00 a4 	addi    r0,r1,164
    8028:	30 00 00 10 	addic   r0,r0,16

	/* uid, or NEGATIVE */
	rv = get_int(&mesg, &rsci.cred.cr_uid);
	if (rv == -EINVAL)
		goto out;
	if (rv == -ENOENT)
    802c:	90 01 00 50 	stw     r0,80(r1)
DEFINE_BITOP(clear_bits_unlock, andc, PPC_RELEASE_BARRIER, "")
DEFINE_BITOP(change_bits, xor, "", "")

static __inline__ void set_bit(int nr, volatile unsigned long *addr)
{
	set_bits(BITOP_MASK(nr), addr + BITOP_WORD(nr));
    8030:	80 01 00 4c 	lwz     r0,76(r1)
    8034:	7c 09 2e 70 	srawi   r9,r0,5
    8038:	7d 29 01 94 	addze   r9,r9
    803c:	55 29 28 34 	rlwinm  r9,r9,5,0,26
    8040:	7c 09 00 50 	subf    r0,r9,r0
    8044:	39 20 00 01 	li      r9,1
    8048:	7d 29 00 30 	slw     r9,r9,r0
    804c:	80 01 00 4c 	lwz     r0,76(r1)
    8050:	7c 00 2e 70 	srawi   r0,r0,5
    8054:	7c 00 01 94 	addze   r0,r0
    8058:	54 00 10 3a 	rlwinm  r0,r0,2,0,29
    805c:	81 61 00 50 	lwz     r11,80(r1)
    8060:	7c 0b 02 14 	add     r0,r11,r0
    8064:	91 21 00 54 	stw     r9,84(r1)
    8068:	90 01 00 58 	stw     r0,88(r1)
	: "=&r" (old), "+m" (*p)		\
	: "r" (mask), "r" (p)			\
	: "cc", "memory");			\
}

DEFINE_BITOP(set_bits, or, "", "")
    806c:	80 01 00 58 	lwz     r0,88(r1)
    8070:	90 01 00 5c 	stw     r0,92(r1)
    8074:	81 41 00 5c 	lwz     r10,92(r1)
    8078:	80 01 00 54 	lwz     r0,84(r1)
    807c:	81 21 00 5c 	lwz     r9,92(r1)
    8080:	81 61 00 5c 	lwz     r11,92(r1)
    8084:	7f e0 48 28 	lwarx   r31,0,r9
    8088:	7f ff 03 78 	or      r31,r31,r0
    808c:	7f e0 49 2d 	stwcx.  r31,0,r9
    8090:	40 a2 ff f4 	bne-    8084 <rsc_parse+0x2f8>
    8094:	93 e1 00 60 	stw     r31,96(r1)
    8098:	48 00 03 80 	b       8418 <rsc_parse+0x68c>
		set_bit(CACHE_NEGATIVE, &rsci.h.flags);
	else {
		int N, i;

		/* gid */
		if (get_int(&mesg, &rsci.cred.cr_gid))
    809c:	38 01 01 4c 	addi    r0,r1,332
    80a0:	90 01 00 64 	stw     r0,100(r1)
    80a4:	38 01 00 a4 	addi    r0,r1,164
    80a8:	30 00 00 20 	addic   r0,r0,32
    80ac:	90 01 00 68 	stw     r0,104(r1)
static inline int get_int(char **bpp, int *anint)
{
	char buf[50];
	char *ep;
	int rv;
	int len = qword_get(bpp, buf, 50);
    80b0:	38 01 01 10 	addi    r0,r1,272
    80b4:	80 61 00 64 	lwz     r3,100(r1)
    80b8:	7c 04 03 78 	mr      r4,r0
    80bc:	38 a0 00 32 	li      r5,50
    80c0:	48 00 00 01 	bl      80c0 <rsc_parse+0x334>
    80c4:	90 61 00 6c 	stw     r3,108(r1)
	if (len < 0) return -EINVAL;
    80c8:	80 01 00 6c 	lwz     r0,108(r1)
    80cc:	2f 80 00 00 	cmpwi   cr7,r0,0
    80d0:	40 9c 00 0c 	bge-    cr7,80dc <rsc_parse+0x350>
    80d4:	38 00 ff ea 	li      r0,-22
    80d8:	48 00 00 68 	b       8140 <rsc_parse+0x3b4>
	if (len ==0) return -ENOENT;
    80dc:	80 01 00 6c 	lwz     r0,108(r1)
    80e0:	2f 80 00 00 	cmpwi   cr7,r0,0
    80e4:	40 9e 00 0c 	bne-    cr7,80f0 <rsc_parse+0x364>
    80e8:	38 00 ff fe 	li      r0,-2
    80ec:	48 00 00 54 	b       8140 <rsc_parse+0x3b4>
	rv = simple_strtol(buf, &ep, 0);
    80f0:	39 21 01 10 	addi    r9,r1,272
    80f4:	38 01 01 04 	addi    r0,r1,260
    80f8:	7d 23 4b 78 	mr      r3,r9
    80fc:	7c 04 03 78 	mr      r4,r0
    8100:	38 a0 00 00 	li      r5,0
    8104:	48 00 00 01 	bl      8104 <rsc_parse+0x378>
    8108:	90 61 00 70 	stw     r3,112(r1)
	if (*ep) return -EINVAL;
    810c:	80 01 01 04 	lwz     r0,260(r1)
    8110:	7c 09 03 78 	mr      r9,r0
    8114:	88 09 00 00 	lbz     r0,0(r9)
    8118:	54 00 06 3e 	clrlwi  r0,r0,24
    811c:	2f 80 00 00 	cmpwi   cr7,r0,0
    8120:	41 9e 00 0c 	beq-    cr7,812c <rsc_parse+0x3a0>
    8124:	38 00 ff ea 	li      r0,-22
    8128:	48 00 00 18 	b       8140 <rsc_parse+0x3b4>
	*anint = rv;
    812c:	80 01 00 68 	lwz     r0,104(r1)
    8130:	81 21 00 70 	lwz     r9,112(r1)
    8134:	7c 0b 03 78 	mr      r11,r0
    8138:	91 2b 00 00 	stw     r9,0(r11)
	return 0;
    813c:	38 00 00 00 	li      r0,0
    8140:	2f 80 00 00 	cmpwi   cr7,r0,0
    8144:	40 9e 03 24 	bne-    cr7,8468 <rsc_parse+0x6dc>
			goto out;

		/* number of additional gid's */
		if (get_int(&mesg, &N))
    8148:	38 01 01 4c 	addi    r0,r1,332
	else {
		int N, i;

		/* gid */
		if (get_int(&mesg, &rsci.cred.cr_gid))
			goto out;
    814c:	90 01 00 74 	stw     r0,116(r1)

		/* number of additional gid's */
		if (get_int(&mesg, &N))
    8150:	38 01 00 fc 	addi    r0,r1,252
	else {
		int N, i;

		/* gid */
		if (get_int(&mesg, &rsci.cred.cr_gid))
			goto out;
    8154:	90 01 00 78 	stw     r0,120(r1)
static inline int get_int(char **bpp, int *anint)
{
	char buf[50];
	char *ep;
	int rv;
	int len = qword_get(bpp, buf, 50);
    8158:	38 01 01 10 	addi    r0,r1,272
    815c:	80 61 00 74 	lwz     r3,116(r1)
    8160:	7c 04 03 78 	mr      r4,r0
    8164:	38 a0 00 32 	li      r5,50
    8168:	48 00 00 01 	bl      8168 <rsc_parse+0x3dc>
    816c:	90 61 00 7c 	stw     r3,124(r1)
	if (len < 0) return -EINVAL;
    8170:	80 01 00 7c 	lwz     r0,124(r1)
    8174:	2f 80 00 00 	cmpwi   cr7,r0,0
    8178:	40 9c 00 0c 	bge-    cr7,8184 <rsc_parse+0x3f8>
    817c:	38 00 ff ea 	li      r0,-22
    8180:	48 00 00 68 	b       81e8 <rsc_parse+0x45c>
	if (len ==0) return -ENOENT;
    8184:	80 01 00 7c 	lwz     r0,124(r1)
    8188:	2f 80 00 00 	cmpwi   cr7,r0,0
    818c:	40 9e 00 0c 	bne-    cr7,8198 <rsc_parse+0x40c>
    8190:	38 00 ff fe 	li      r0,-2
    8194:	48 00 00 54 	b       81e8 <rsc_parse+0x45c>
	rv = simple_strtol(buf, &ep, 0);
    8198:	39 21 01 10 	addi    r9,r1,272
    819c:	38 01 01 00 	addi    r0,r1,256
    81a0:	7d 23 4b 78 	mr      r3,r9
    81a4:	7c 04 03 78 	mr      r4,r0
    81a8:	38 a0 00 00 	li      r5,0
    81ac:	48 00 00 01 	bl      81ac <rsc_parse+0x420>
    81b0:	90 61 00 80 	stw     r3,128(r1)
	if (*ep) return -EINVAL;
    81b4:	80 01 01 00 	lwz     r0,256(r1)
    81b8:	7c 09 03 78 	mr      r9,r0
    81bc:	88 09 00 00 	lbz     r0,0(r9)
    81c0:	54 00 06 3e 	clrlwi  r0,r0,24
    81c4:	2f 80 00 00 	cmpwi   cr7,r0,0
    81c8:	41 9e 00 0c 	beq-    cr7,81d4 <rsc_parse+0x448>
    81cc:	38 00 ff ea 	li      r0,-22
    81d0:	48 00 00 18 	b       81e8 <rsc_parse+0x45c>
	*anint = rv;
    81d4:	80 01 00 78 	lwz     r0,120(r1)
    81d8:	81 21 00 80 	lwz     r9,128(r1)
    81dc:	7c 0b 03 78 	mr      r11,r0
    81e0:	91 2b 00 00 	stw     r9,0(r11)
	return 0;
    81e4:	38 00 00 00 	li      r0,0

		/* number of additional gid's */
		if (get_int(&mesg, &N))
    81e8:	2f 80 00 00 	cmpwi   cr7,r0,0
    81ec:	40 9e 02 84 	bne-    cr7,8470 <rsc_parse+0x6e4>
			goto out;
		status = -ENOMEM;
    81f0:	38 00 ff f4 	li      r0,-12
    81f4:	90 01 00 0c 	stw     r0,12(r1)
		rsci.cred.cr_group_info = groups_alloc(N);
    81f8:	80 01 00 fc 	lwz     r0,252(r1)
    81fc:	7c 03 03 78 	mr      r3,r0
    8200:	48 00 00 01 	bl      8200 <rsc_parse+0x474>
    8204:	7c 60 1b 78 	mr      r0,r3
    8208:	90 01 00 c8 	stw     r0,200(r1)
		if (rsci.cred.cr_group_info == NULL)
    820c:	80 01 00 c8 	lwz     r0,200(r1)
    8210:	2f 80 00 00 	cmpwi   cr7,r0,0
    8214:	41 9e 02 64 	beq-    cr7,8478 <rsc_parse+0x6ec>
			goto out;

		/* gid's */
		status = -EINVAL;
    8218:	38 00 ff ea 	li      r0,-22
    821c:	90 01 00 0c 	stw     r0,12(r1)
		for (i=0; i<N; i++) {
    8220:	38 00 00 00 	li      r0,0
    8224:	90 01 00 14 	stw     r0,20(r1)
    8228:	48 00 00 f8 	b       8320 <rsc_parse+0x594>
			gid_t gid;
			if (get_int(&mesg, &gid))
    822c:	38 01 01 4c 	addi    r0,r1,332
		if (rsci.cred.cr_group_info == NULL)
			goto out;

		/* gid's */
		status = -EINVAL;
		for (i=0; i<N; i++) {
    8230:	90 01 00 84 	stw     r0,132(r1)
			gid_t gid;
			if (get_int(&mesg, &gid))
    8234:	38 01 01 08 	addi    r0,r1,264
		if (rsci.cred.cr_group_info == NULL)
			goto out;

		/* gid's */
		status = -EINVAL;
		for (i=0; i<N; i++) {
    8238:	90 01 00 88 	stw     r0,136(r1)
static inline int get_int(char **bpp, int *anint)
{
	char buf[50];
	char *ep;
	int rv;
	int len = qword_get(bpp, buf, 50);
    823c:	38 01 01 10 	addi    r0,r1,272
    8240:	80 61 00 84 	lwz     r3,132(r1)
    8244:	7c 04 03 78 	mr      r4,r0
    8248:	38 a0 00 32 	li      r5,50
    824c:	48 00 00 01 	bl      824c <rsc_parse+0x4c0>
    8250:	90 61 00 8c 	stw     r3,140(r1)
	if (len < 0) return -EINVAL;
    8254:	80 01 00 8c 	lwz     r0,140(r1)
    8258:	2f 80 00 00 	cmpwi   cr7,r0,0
    825c:	40 9c 00 0c 	bge-    cr7,8268 <rsc_parse+0x4dc>
    8260:	38 00 ff ea 	li      r0,-22
    8264:	48 00 00 68 	b       82cc <rsc_parse+0x540>
	if (len ==0) return -ENOENT;
    8268:	80 01 00 8c 	lwz     r0,140(r1)
    826c:	2f 80 00 00 	cmpwi   cr7,r0,0
    8270:	40 9e 00 0c 	bne-    cr7,827c <rsc_parse+0x4f0>
    8274:	38 00 ff fe 	li      r0,-2
    8278:	48 00 00 54 	b       82cc <rsc_parse+0x540>
	rv = simple_strtol(buf, &ep, 0);
    827c:	39 21 01 10 	addi    r9,r1,272
    8280:	38 01 01 0c 	addi    r0,r1,268
    8284:	7d 23 4b 78 	mr      r3,r9
    8288:	7c 04 03 78 	mr      r4,r0
    828c:	38 a0 00 00 	li      r5,0
    8290:	48 00 00 01 	bl      8290 <rsc_parse+0x504>
    8294:	90 61 00 90 	stw     r3,144(r1)
	if (*ep) return -EINVAL;
    8298:	80 01 01 0c 	lwz     r0,268(r1)
    829c:	7c 09 03 78 	mr      r9,r0
    82a0:	88 09 00 00 	lbz     r0,0(r9)
    82a4:	54 00 06 3e 	clrlwi  r0,r0,24
    82a8:	2f 80 00 00 	cmpwi   cr7,r0,0
    82ac:	41 9e 00 0c 	beq-    cr7,82b8 <rsc_parse+0x52c>
    82b0:	38 00 ff ea 	li      r0,-22
    82b4:	48 00 00 18 	b       82cc <rsc_parse+0x540>
	*anint = rv;
    82b8:	80 01 00 88 	lwz     r0,136(r1)
    82bc:	81 21 00 90 	lwz     r9,144(r1)
    82c0:	7c 0b 03 78 	mr      r11,r0
    82c4:	91 2b 00 00 	stw     r9,0(r11)
	return 0;
    82c8:	38 00 00 00 	li      r0,0
			gid_t gid;
			if (get_int(&mesg, &gid))
    82cc:	2f 80 00 00 	cmpwi   cr7,r0,0
    82d0:	40 9e 01 b0 	bne-    cr7,8480 <rsc_parse+0x6f4>
				goto out;
			GROUP_AT(rsci.cred.cr_group_info, i) = gid;
    82d4:	81 21 00 c8 	lwz     r9,200(r1)
    82d8:	80 01 00 14 	lwz     r0,20(r1)
    82dc:	54 00 b2 be 	rlwinm  r0,r0,22,10,31
    82e0:	30 00 00 20 	addic   r0,r0,32
    82e4:	54 00 10 3a 	rlwinm  r0,r0,2,0,29
    82e8:	7c 09 02 14 	add     r0,r9,r0
    82ec:	30 00 00 0c 	addic   r0,r0,12
    82f0:	7c 0b 03 78 	mr      r11,r0
    82f4:	81 2b 00 00 	lwz     r9,0(r11)
    82f8:	80 01 00 14 	lwz     r0,20(r1)
    82fc:	54 00 05 be 	clrlwi  r0,r0,22
    8300:	54 00 10 3a 	rlwinm  r0,r0,2,0,29
    8304:	7c 09 02 14 	add     r0,r9,r0
    8308:	81 21 01 08 	lwz     r9,264(r1)
    830c:	7c 0b 03 78 	mr      r11,r0
    8310:	91 2b 00 00 	stw     r9,0(r11)
		if (rsci.cred.cr_group_info == NULL)
			goto out;

		/* gid's */
		status = -EINVAL;
		for (i=0; i<N; i++) {
    8314:	80 01 00 14 	lwz     r0,20(r1)
    8318:	30 00 00 01 	addic   r0,r0,1
    831c:	90 01 00 14 	stw     r0,20(r1)
    8320:	80 01 00 fc 	lwz     r0,252(r1)
    8324:	81 21 00 14 	lwz     r9,20(r1)
    8328:	7f 89 00 00 	cmpw    cr7,r9,r0
    832c:	41 9c ff 00 	blt+    cr7,822c <rsc_parse+0x4a0>
				goto out;
			GROUP_AT(rsci.cred.cr_group_info, i) = gid;
		}

		/* mech name */
		len = qword_get(&mesg, buf, mlen);
    8330:	38 01 01 4c 	addi    r0,r1,332
    8334:	7c 03 03 78 	mr      r3,r0
    8338:	80 81 00 18 	lwz     r4,24(r1)
    833c:	80 a1 01 50 	lwz     r5,336(r1)
    8340:	48 00 00 01 	bl      8340 <rsc_parse+0x5b4>
    8344:	90 61 00 1c 	stw     r3,28(r1)
		if (len < 0)
    8348:	80 01 00 1c 	lwz     r0,28(r1)
    834c:	2f 80 00 00 	cmpwi   cr7,r0,0
    8350:	41 9c 01 38 	blt-    cr7,8488 <rsc_parse+0x6fc>
			goto out;
		gm = gss_mech_get_by_name(buf);
    8354:	80 61 00 18 	lwz     r3,24(r1)
    8358:	48 00 00 01 	bl      8358 <rsc_parse+0x5cc>
    835c:	90 61 00 10 	stw     r3,16(r1)
		status = -EOPNOTSUPP;
    8360:	38 00 ff a1 	li      r0,-95
    8364:	90 01 00 0c 	stw     r0,12(r1)
		if (!gm)
    8368:	80 01 00 10 	lwz     r0,16(r1)
    836c:	2f 80 00 00 	cmpwi   cr7,r0,0
    8370:	41 9e 01 20 	beq-    cr7,8490 <rsc_parse+0x704>
			goto out;

		status = -EINVAL;
    8374:	38 00 ff ea 	li      r0,-22
    8378:	90 01 00 0c 	stw     r0,12(r1)
		/* mech-specific data: */
		len = qword_get(&mesg, buf, mlen);
    837c:	38 01 01 4c 	addi    r0,r1,332
    8380:	7c 03 03 78 	mr      r3,r0
    8384:	80 81 00 18 	lwz     r4,24(r1)
    8388:	80 a1 01 50 	lwz     r5,336(r1)
    838c:	48 00 00 01 	bl      838c <rsc_parse+0x600>
    8390:	90 61 00 1c 	stw     r3,28(r1)
		if (len < 0)
    8394:	80 01 00 1c 	lwz     r0,28(r1)
    8398:	2f 80 00 00 	cmpwi   cr7,r0,0
    839c:	41 9c 00 fc 	blt-    cr7,8498 <rsc_parse+0x70c>
			goto out;
		status = gss_import_sec_context(buf, len, gm, &rsci.mechctx, GFP_KERNEL);
    83a0:	81 21 00 1c 	lwz     r9,28(r1)
    83a4:	38 01 00 a4 	addi    r0,r1,164
    83a8:	30 00 00 3c 	addic   r0,r0,60
    83ac:	80 61 00 18 	lwz     r3,24(r1)
    83b0:	7d 24 4b 78 	mr      r4,r9
    83b4:	80 a1 00 10 	lwz     r5,16(r1)
    83b8:	7c 06 03 78 	mr      r6,r0
    83bc:	38 e0 00 d0 	li      r7,208
    83c0:	48 00 00 01 	bl      83c0 <rsc_parse+0x634>
    83c4:	90 61 00 0c 	stw     r3,12(r1)
		if (status)
    83c8:	80 01 00 0c 	lwz     r0,12(r1)
    83cc:	2f 80 00 00 	cmpwi   cr7,r0,0
    83d0:	40 9e 00 d0 	bne-    cr7,84a0 <rsc_parse+0x714>
			goto out;

		/* get client name */
		len = qword_get(&mesg, buf, mlen);
    83d4:	38 01 01 4c 	addi    r0,r1,332
    83d8:	7c 03 03 78 	mr      r3,r0
    83dc:	80 81 00 18 	lwz     r4,24(r1)
    83e0:	80 a1 01 50 	lwz     r5,336(r1)
    83e4:	48 00 00 01 	bl      83e4 <rsc_parse+0x658>
    83e8:	90 61 00 1c 	stw     r3,28(r1)
		if (len > 0) {
    83ec:	80 01 00 1c 	lwz     r0,28(r1)
    83f0:	2f 80 00 00 	cmpwi   cr7,r0,0
    83f4:	40 9d 00 24 	ble-    cr7,8418 <rsc_parse+0x68c>
			rsci.client_name = kstrdup(buf, GFP_KERNEL);
    83f8:	80 61 00 18 	lwz     r3,24(r1)
    83fc:	38 80 00 d0 	li      r4,208
    8400:	48 00 00 01 	bl      8400 <rsc_parse+0x674>
    8404:	7c 60 1b 78 	mr      r0,r3
    8408:	90 01 00 e4 	stw     r0,228(r1)
			if (!rsci.client_name)
    840c:	80 01 00 e4 	lwz     r0,228(r1)
    8410:	2f 80 00 00 	cmpwi   cr7,r0,0
    8414:	41 9e 00 94 	beq-    cr7,84a8 <rsc_parse+0x71c>
				goto out;
		}

	}
	rsci.h.expiry_time = expiry;
    8418:	80 01 00 20 	lwz     r0,32(r1)
    841c:	90 01 00 a8 	stw     r0,168(r1)
	rscp = rsc_update(&rsci, rscp);
    8420:	38 01 00 a4 	addi    r0,r1,164
    8424:	7c 03 03 78 	mr      r3,r0
    8428:	80 81 00 08 	lwz     r4,8(r1)
    842c:	48 00 02 d9 	bl      8704 <rsc_update>
    8430:	90 61 00 08 	stw     r3,8(r1)
	status = 0;
    8434:	38 00 00 00 	li      r0,0
    8438:	90 01 00 0c 	stw     r0,12(r1)
    843c:	48 00 00 70 	b       84ac <rsc_parse+0x720>
	struct gss_api_mech *gm = NULL;

	memset(&rsci, 0, sizeof(rsci));
	/* context handle */
	len = qword_get(&mesg, buf, mlen);
	if (len < 0) goto out;
    8440:	60 00 00 00 	nop
    8444:	48 00 00 68 	b       84ac <rsc_parse+0x720>
	status = -ENOMEM;
	if (dup_to_netobj(&rsci.handle, buf, len))
		goto out;
    8448:	60 00 00 00 	nop
    844c:	48 00 00 60 	b       84ac <rsc_parse+0x720>
	rsci.h.flags = 0;
	/* expiry */
	expiry = get_expiry(&mesg);
	status = -EINVAL;
	if (expiry == 0)
		goto out;
    8450:	60 00 00 00 	nop
    8454:	48 00 00 58 	b       84ac <rsc_parse+0x720>

	rscp = rsc_lookup(&rsci);
	if (!rscp)
		goto out;
    8458:	60 00 00 00 	nop
    845c:	48 00 00 50 	b       84ac <rsc_parse+0x720>

	/* uid, or NEGATIVE */
	rv = get_int(&mesg, &rsci.cred.cr_uid);
	if (rv == -EINVAL)
		goto out;
    8460:	60 00 00 00 	nop
    8464:	48 00 00 48 	b       84ac <rsc_parse+0x720>
	else {
		int N, i;

		/* gid */
		if (get_int(&mesg, &rsci.cred.cr_gid))
			goto out;
    8468:	60 00 00 00 	nop
    846c:	48 00 00 40 	b       84ac <rsc_parse+0x720>

		/* number of additional gid's */
		if (get_int(&mesg, &N))
			goto out;
    8470:	60 00 00 00 	nop
    8474:	48 00 00 38 	b       84ac <rsc_parse+0x720>
		status = -ENOMEM;
		rsci.cred.cr_group_info = groups_alloc(N);
		if (rsci.cred.cr_group_info == NULL)
			goto out;
    8478:	60 00 00 00 	nop
    847c:	48 00 00 30 	b       84ac <rsc_parse+0x720>
		/* gid's */
		status = -EINVAL;
		for (i=0; i<N; i++) {
			gid_t gid;
			if (get_int(&mesg, &gid))
				goto out;
    8480:	60 00 00 00 	nop
    8484:	48 00 00 28 	b       84ac <rsc_parse+0x720>
		}

		/* mech name */
		len = qword_get(&mesg, buf, mlen);
		if (len < 0)
			goto out;
    8488:	60 00 00 00 	nop
    848c:	48 00 00 20 	b       84ac <rsc_parse+0x720>
		gm = gss_mech_get_by_name(buf);
		status = -EOPNOTSUPP;
		if (!gm)
			goto out;
    8490:	60 00 00 00 	nop
    8494:	48 00 00 18 	b       84ac <rsc_parse+0x720>

		status = -EINVAL;
		/* mech-specific data: */
		len = qword_get(&mesg, buf, mlen);
		if (len < 0)
			goto out;
    8498:	60 00 00 00 	nop
    849c:	48 00 00 10 	b       84ac <rsc_parse+0x720>
		status = gss_import_sec_context(buf, len, gm, &rsci.mechctx, GFP_KERNEL);
		if (status)
			goto out;
    84a0:	60 00 00 00 	nop
    84a4:	48 00 00 08 	b       84ac <rsc_parse+0x720>
		/* get client name */
		len = qword_get(&mesg, buf, mlen);
		if (len > 0) {
			rsci.client_name = kstrdup(buf, GFP_KERNEL);
			if (!rsci.client_name)
				goto out;
    84a8:	60 00 00 00 	nop
	}
	rsci.h.expiry_time = expiry;
	rscp = rsc_update(&rsci, rscp);
	status = 0;
out:
	gss_mech_put(gm);
    84ac:	80 61 00 10 	lwz     r3,16(r1)
    84b0:	48 00 00 01 	bl      84b0 <rsc_parse+0x724>
	rsc_free(&rsci);
    84b4:	38 01 00 a4 	addi    r0,r1,164
    84b8:	7c 03 03 78 	mr      r3,r0
    84bc:	4b ff f5 35 	bl      79f0 <rsc_free>
	if (rscp)
    84c0:	80 01 00 08 	lwz     r0,8(r1)
    84c4:	2f 80 00 00 	cmpwi   cr7,r0,0
    84c8:	41 9e 00 9c 	beq-    cr7,8564 <rsc_parse+0x7d8>
		cache_put(&rscp->h, &rsc_cache);
    84cc:	80 01 00 08 	lwz     r0,8(r1)
    84d0:	90 01 00 94 	stw     r0,148(r1)
    84d4:	3c 00 00 00 	lis     r0,0
    84d8:	30 00 00 70 	addic   r0,r0,112
    84dc:	90 01 00 98 	stw     r0,152(r1)
}


static inline void cache_put(struct cache_head *h, struct cache_detail *cd)
{
	if (atomic_read(&h->ref.refcount) <= 2 &&
    84e0:	80 01 00 94 	lwz     r0,148(r1)
    84e4:	30 00 00 0c 	addic   r0,r0,12
    84e8:	90 01 00 9c 	stw     r0,156(r1)

static __inline__ int atomic_read(const atomic_t *v)
{
	int t;

	__asm__ __volatile__("lwz%U1%X1 %0,%1" : "=r"(t) : "m"(v->counter));
    84ec:	80 01 00 9c 	lwz     r0,156(r1)
    84f0:	7c 09 03 78 	mr      r9,r0
    84f4:	83 e9 00 00 	lwz     r31,0(r9)
    84f8:	93 e1 00 a0 	stw     r31,160(r1)

	return t;
    84fc:	80 01 00 a0 	lwz     r0,160(r1)
    8500:	2f 80 00 02 	cmpwi   cr7,r0,2
    8504:	41 9d 00 3c 	bgt-    cr7,8540 <rsc_parse+0x7b4>
	    h->expiry_time < cd->nextcheck)
    8508:	80 01 00 94 	lwz     r0,148(r1)
    850c:	7c 0b 03 78 	mr      r11,r0
    8510:	81 2b 00 04 	lwz     r9,4(r11)
    8514:	80 01 00 98 	lwz     r0,152(r1)
    8518:	7c 0b 03 78 	mr      r11,r0
    851c:	80 0b 00 44 	lwz     r0,68(r11)
}


static inline void cache_put(struct cache_head *h, struct cache_detail *cd)
{
	if (atomic_read(&h->ref.refcount) <= 2 &&
    8520:	7f 89 00 00 	cmpw    cr7,r9,r0
    8524:	40 9c 00 1c 	bge-    cr7,8540 <rsc_parse+0x7b4>
	    h->expiry_time < cd->nextcheck)
		cd->nextcheck = h->expiry_time;
    8528:	80 01 00 94 	lwz     r0,148(r1)
    852c:	7c 0b 03 78 	mr      r11,r0
    8530:	81 2b 00 04 	lwz     r9,4(r11)
    8534:	80 01 00 98 	lwz     r0,152(r1)
    8538:	7c 0b 03 78 	mr      r11,r0
    853c:	91 2b 00 44 	stw     r9,68(r11)
	kref_put(&h->ref, cd->cache_put);
    8540:	80 01 00 94 	lwz     r0,148(r1)
    8544:	31 20 00 0c 	addic   r9,r0,12
    8548:	80 01 00 98 	lwz     r0,152(r1)
    854c:	7c 0b 03 78 	mr      r11,r0
    8550:	80 0b 00 14 	lwz     r0,20(r11)
    8554:	7d 23 4b 78 	mr      r3,r9
    8558:	7c 04 03 78 	mr      r4,r0
    855c:	48 00 00 01 	bl      855c <rsc_parse+0x7d0>
    8560:	48 00 00 0c 	b       856c <rsc_parse+0x7e0>
	else
		status = -ENOMEM;
    8564:	38 00 ff f4 	li      r0,-12
    8568:	90 01 00 0c 	stw     r0,12(r1)
	return status;
    856c:	80 01 00 0c 	lwz     r0,12(r1)
}
    8570:	7c 03 03 78 	mr      r3,r0
    8574:	80 01 01 64 	lwz     r0,356(r1)
    8578:	7c 08 03 a6 	mtlr    r0
    857c:	83 e1 01 5c 	lwz     r31,348(r1)
    8580:	38 21 01 60 	addi    r1,r1,352
    8584:	4e 80 00 20 	blr

00008588 <rsc_lookup>:
	.update		= update_rsc,
	.alloc		= rsc_alloc,
};

static struct rsc *rsc_lookup(struct rsc *item)
{
    8588:	94 21 ff b0 	stwu    r1,-80(r1)
    858c:	7c 08 02 a6 	mflr    r0
    8590:	90 01 00 54 	stw     r0,84(r1)
    8594:	90 61 00 48 	stw     r3,72(r1)
    8598:	80 01 00 48 	lwz     r0,72(r1)
    859c:	90 01 00 14 	stw     r0,20(r1)
}

static inline int
rsc_hash(struct rsc *rsci)
{
	return hash_mem(rsci->handle.data, rsci->handle.len, RSC_HASHBITS);
    85a0:	80 01 00 14 	lwz     r0,20(r1)
    85a4:	7c 0b 03 78 	mr      r11,r0
    85a8:	81 2b 00 18 	lwz     r9,24(r11)
    85ac:	80 01 00 14 	lwz     r0,20(r1)
    85b0:	7c 0b 03 78 	mr      r11,r0
    85b4:	80 0b 00 14 	lwz     r0,20(r11)
    85b8:	91 21 00 18 	stw     r9,24(r1)
    85bc:	90 01 00 1c 	stw     r0,28(r1)
    85c0:	38 00 00 0a 	li      r0,10
    85c4:	90 01 00 20 	stw     r0,32(r1)
	return hash >> (BITS_PER_LONG - bits);
}

static inline unsigned long hash_mem(char *buf, int length, int bits)
{
	unsigned long hash = 0;
    85c8:	38 00 00 00 	li      r0,0
    85cc:	90 01 00 24 	stw     r0,36(r1)
	unsigned long l = 0;
    85d0:	38 00 00 00 	li      r0,0
    85d4:	90 01 00 28 	stw     r0,40(r1)
	int len = 0;
    85d8:	38 00 00 00 	li      r0,0
    85dc:	90 01 00 2c 	stw     r0,44(r1)
	unsigned char c;
	do {
		if (len == length) {
    85e0:	81 21 00 1c 	lwz     r9,28(r1)
    85e4:	80 01 00 2c 	lwz     r0,44(r1)
    85e8:	7f 89 00 00 	cmpw    cr7,r9,r0
    85ec:	40 9e 00 18 	bne-    cr7,8604 <rsc_lookup+0x7c>
			c = (char)len; len = -1;
    85f0:	80 01 00 2c 	lwz     r0,44(r1)
    85f4:	98 01 00 30 	stb     r0,48(r1)
    85f8:	38 00 ff ff 	li      r0,-1
    85fc:	90 01 00 2c 	stw     r0,44(r1)
    8600:	48 00 00 20 	b       8620 <rsc_lookup+0x98>
		} else
			c = *buf++;
    8604:	80 01 00 18 	lwz     r0,24(r1)
    8608:	7c 09 03 78 	mr      r9,r0
    860c:	88 09 00 00 	lbz     r0,0(r9)
    8610:	98 01 00 30 	stb     r0,48(r1)
    8614:	80 01 00 18 	lwz     r0,24(r1)
    8618:	30 00 00 01 	addic   r0,r0,1
    861c:	90 01 00 18 	stw     r0,24(r1)
		l = (l << 8) | c;
    8620:	80 01 00 28 	lwz     r0,40(r1)
    8624:	54 09 40 2e 	rlwinm  r9,r0,8,0,23
    8628:	88 01 00 30 	lbz     r0,48(r1)
    862c:	54 00 06 3e 	clrlwi  r0,r0,24
    8630:	7d 20 03 78 	or      r0,r9,r0
    8634:	90 01 00 28 	stw     r0,40(r1)
		len++;
    8638:	80 01 00 2c 	lwz     r0,44(r1)
    863c:	30 00 00 01 	addic   r0,r0,1
    8640:	90 01 00 2c 	stw     r0,44(r1)
		if ((len & (BITS_PER_LONG/8-1))==0)
    8644:	80 01 00 2c 	lwz     r0,44(r1)
    8648:	54 00 07 be 	clrlwi  r0,r0,30
    864c:	2f 80 00 00 	cmpwi   cr7,r0,0
    8650:	40 9e 00 44 	bne-    cr7,8694 <rsc_lookup+0x10c>
			hash = hash_long(hash^l, BITS_PER_LONG);
    8654:	81 21 00 28 	lwz     r9,40(r1)
    8658:	80 01 00 24 	lwz     r0,36(r1)
    865c:	7d 20 02 78 	xor     r0,r9,r0
    8660:	90 01 00 34 	stw     r0,52(r1)
    8664:	38 00 00 20 	li      r0,32
    8668:	90 01 00 38 	stw     r0,56(r1)
}

static inline u32 hash_32(u32 val, unsigned int bits)
{
	/* On some cpus multiply is faster, on others gcc will do shifts */
	u32 hash = val * GOLDEN_RATIO_PRIME_32;
    866c:	81 21 00 34 	lwz     r9,52(r1)
    8670:	3c 00 9e 37 	lis     r0,-25033
    8674:	60 00 00 01 	ori     r0,r0,1
    8678:	7c 09 01 d6 	mullw   r0,r9,r0
    867c:	90 01 00 3c 	stw     r0,60(r1)

	/* High bits are more random, so use them. */
	return hash >> (32 - bits);
    8680:	80 01 00 38 	lwz     r0,56(r1)
    8684:	20 00 00 20 	subfic  r0,r0,32
    8688:	81 21 00 3c 	lwz     r9,60(r1)
    868c:	7d 20 04 30 	srw     r0,r9,r0
    8690:	90 01 00 24 	stw     r0,36(r1)
	} while (len);
    8694:	80 01 00 2c 	lwz     r0,44(r1)
    8698:	2f 80 00 00 	cmpwi   cr7,r0,0
    869c:	40 9e ff 44 	bne+    cr7,85e0 <rsc_lookup+0x58>
	return hash >> (BITS_PER_LONG - bits);
    86a0:	80 01 00 20 	lwz     r0,32(r1)
    86a4:	20 00 00 20 	subfic  r0,r0,32
    86a8:	81 21 00 24 	lwz     r9,36(r1)
    86ac:	7d 20 04 30 	srw     r0,r9,r0
};

static struct rsc *rsc_lookup(struct rsc *item)
{
	struct cache_head *ch;
	int hash = rsc_hash(item);
    86b0:	90 01 00 08 	stw     r0,8(r1)

	ch = sunrpc_cache_lookup(&rsc_cache, &item->h, hash);
    86b4:	80 01 00 48 	lwz     r0,72(r1)
    86b8:	3d 20 00 00 	lis     r9,0
    86bc:	38 69 00 70 	addi    r3,r9,112
    86c0:	7c 04 03 78 	mr      r4,r0
    86c4:	80 a1 00 08 	lwz     r5,8(r1)
    86c8:	48 00 00 01 	bl      86c8 <rsc_lookup+0x140>
    86cc:	90 61 00 0c 	stw     r3,12(r1)
	if (ch)
    86d0:	80 01 00 0c 	lwz     r0,12(r1)
    86d4:	2f 80 00 00 	cmpwi   cr7,r0,0
    86d8:	41 9e 00 14 	beq-    cr7,86ec <rsc_lookup+0x164>
		return container_of(ch, struct rsc, h);
    86dc:	80 01 00 0c 	lwz     r0,12(r1)
    86e0:	90 01 00 10 	stw     r0,16(r1)
    86e4:	80 01 00 10 	lwz     r0,16(r1)
    86e8:	48 00 00 08 	b       86f0 <rsc_lookup+0x168>
	else
		return NULL;
    86ec:	38 00 00 00 	li      r0,0
}
    86f0:	7c 03 03 78 	mr      r3,r0
    86f4:	80 01 00 54 	lwz     r0,84(r1)
    86f8:	7c 08 03 a6 	mtlr    r0
    86fc:	38 21 00 50 	addi    r1,r1,80
    8700:	4e 80 00 20 	blr

00008704 <rsc_update>:

static struct rsc *rsc_update(struct rsc *new, struct rsc *old)
{
    8704:	94 21 ff b0 	stwu    r1,-80(r1)
    8708:	7c 08 02 a6 	mflr    r0
    870c:	90 01 00 54 	stw     r0,84(r1)
    8710:	90 61 00 48 	stw     r3,72(r1)
    8714:	90 81 00 4c 	stw     r4,76(r1)
    8718:	80 01 00 48 	lwz     r0,72(r1)
    871c:	90 01 00 14 	stw     r0,20(r1)
}

static inline int
rsc_hash(struct rsc *rsci)
{
	return hash_mem(rsci->handle.data, rsci->handle.len, RSC_HASHBITS);
    8720:	80 01 00 14 	lwz     r0,20(r1)
    8724:	7c 0b 03 78 	mr      r11,r0
    8728:	81 2b 00 18 	lwz     r9,24(r11)
    872c:	80 01 00 14 	lwz     r0,20(r1)
    8730:	7c 0b 03 78 	mr      r11,r0
    8734:	80 0b 00 14 	lwz     r0,20(r11)
    8738:	91 21 00 18 	stw     r9,24(r1)
    873c:	90 01 00 1c 	stw     r0,28(r1)
    8740:	38 00 00 0a 	li      r0,10
    8744:	90 01 00 20 	stw     r0,32(r1)
	return hash >> (BITS_PER_LONG - bits);
}

static inline unsigned long hash_mem(char *buf, int length, int bits)
{
	unsigned long hash = 0;
    8748:	38 00 00 00 	li      r0,0
    874c:	90 01 00 24 	stw     r0,36(r1)
	unsigned long l = 0;
    8750:	38 00 00 00 	li      r0,0
    8754:	90 01 00 28 	stw     r0,40(r1)
	int len = 0;
    8758:	38 00 00 00 	li      r0,0
    875c:	90 01 00 2c 	stw     r0,44(r1)
	unsigned char c;
	do {
		if (len == length) {
    8760:	81 21 00 1c 	lwz     r9,28(r1)
    8764:	80 01 00 2c 	lwz     r0,44(r1)
    8768:	7f 89 00 00 	cmpw    cr7,r9,r0
    876c:	40 9e 00 18 	bne-    cr7,8784 <rsc_update+0x80>
			c = (char)len; len = -1;
    8770:	80 01 00 2c 	lwz     r0,44(r1)
    8774:	98 01 00 30 	stb     r0,48(r1)
    8778:	38 00 ff ff 	li      r0,-1
    877c:	90 01 00 2c 	stw     r0,44(r1)
    8780:	48 00 00 20 	b       87a0 <rsc_update+0x9c>
		} else
			c = *buf++;
    8784:	80 01 00 18 	lwz     r0,24(r1)
    8788:	7c 09 03 78 	mr      r9,r0
    878c:	88 09 00 00 	lbz     r0,0(r9)
    8790:	98 01 00 30 	stb     r0,48(r1)
    8794:	80 01 00 18 	lwz     r0,24(r1)
    8798:	30 00 00 01 	addic   r0,r0,1
    879c:	90 01 00 18 	stw     r0,24(r1)
		l = (l << 8) | c;
    87a0:	80 01 00 28 	lwz     r0,40(r1)
    87a4:	54 09 40 2e 	rlwinm  r9,r0,8,0,23
    87a8:	88 01 00 30 	lbz     r0,48(r1)
    87ac:	54 00 06 3e 	clrlwi  r0,r0,24
    87b0:	7d 20 03 78 	or      r0,r9,r0
    87b4:	90 01 00 28 	stw     r0,40(r1)
		len++;
    87b8:	80 01 00 2c 	lwz     r0,44(r1)
    87bc:	30 00 00 01 	addic   r0,r0,1
    87c0:	90 01 00 2c 	stw     r0,44(r1)
		if ((len & (BITS_PER_LONG/8-1))==0)
    87c4:	80 01 00 2c 	lwz     r0,44(r1)
    87c8:	54 00 07 be 	clrlwi  r0,r0,30
    87cc:	2f 80 00 00 	cmpwi   cr7,r0,0
    87d0:	40 9e 00 44 	bne-    cr7,8814 <rsc_update+0x110>
			hash = hash_long(hash^l, BITS_PER_LONG);
    87d4:	81 21 00 28 	lwz     r9,40(r1)
    87d8:	80 01 00 24 	lwz     r0,36(r1)
    87dc:	7d 20 02 78 	xor     r0,r9,r0
    87e0:	90 01 00 34 	stw     r0,52(r1)
    87e4:	38 00 00 20 	li      r0,32
    87e8:	90 01 00 38 	stw     r0,56(r1)
}

static inline u32 hash_32(u32 val, unsigned int bits)
{
	/* On some cpus multiply is faster, on others gcc will do shifts */
	u32 hash = val * GOLDEN_RATIO_PRIME_32;
    87ec:	81 21 00 34 	lwz     r9,52(r1)
    87f0:	3c 00 9e 37 	lis     r0,-25033
    87f4:	60 00 00 01 	ori     r0,r0,1
    87f8:	7c 09 01 d6 	mullw   r0,r9,r0
    87fc:	90 01 00 3c 	stw     r0,60(r1)

	/* High bits are more random, so use them. */
	return hash >> (32 - bits);
    8800:	80 01 00 38 	lwz     r0,56(r1)
    8804:	20 00 00 20 	subfic  r0,r0,32
    8808:	81 21 00 3c 	lwz     r9,60(r1)
    880c:	7d 20 04 30 	srw     r0,r9,r0
    8810:	90 01 00 24 	stw     r0,36(r1)
	} while (len);
    8814:	80 01 00 2c 	lwz     r0,44(r1)
    8818:	2f 80 00 00 	cmpwi   cr7,r0,0
    881c:	40 9e ff 44 	bne+    cr7,8760 <rsc_update+0x5c>
	return hash >> (BITS_PER_LONG - bits);
    8820:	80 01 00 20 	lwz     r0,32(r1)
    8824:	20 00 00 20 	subfic  r0,r0,32
    8828:	81 21 00 24 	lwz     r9,36(r1)
    882c:	7d 20 04 30 	srw     r0,r9,r0
}

static struct rsc *rsc_update(struct rsc *new, struct rsc *old)
{
	struct cache_head *ch;
	int hash = rsc_hash(new);
    8830:	90 01 00 08 	stw     r0,8(r1)

	ch = sunrpc_cache_update(&rsc_cache, &new->h,
    8834:	81 21 00 48 	lwz     r9,72(r1)
    8838:	80 01 00 4c 	lwz     r0,76(r1)
    883c:	3d 60 00 00 	lis     r11,0
    8840:	38 6b 00 70 	addi    r3,r11,112
    8844:	7d 24 4b 78 	mr      r4,r9
    8848:	7c 05 03 78 	mr      r5,r0
    884c:	80 c1 00 08 	lwz     r6,8(r1)
    8850:	48 00 00 01 	bl      8850 <rsc_update+0x14c>
    8854:	90 61 00 0c 	stw     r3,12(r1)
				 &old->h, hash);
	if (ch)
    8858:	80 01 00 0c 	lwz     r0,12(r1)
    885c:	2f 80 00 00 	cmpwi   cr7,r0,0
    8860:	41 9e 00 14 	beq-    cr7,8874 <rsc_update+0x170>
		return container_of(ch, struct rsc, h);
    8864:	80 01 00 0c 	lwz     r0,12(r1)
    8868:	90 01 00 10 	stw     r0,16(r1)
    886c:	80 01 00 10 	lwz     r0,16(r1)
    8870:	48 00 00 08 	b       8878 <rsc_update+0x174>
	else
		return NULL;
    8874:	38 00 00 00 	li      r0,0
}
    8878:	7c 03 03 78 	mr      r3,r0
    887c:	80 01 00 54 	lwz     r0,84(r1)
    8880:	7c 08 03 a6 	mtlr    r0
    8884:	38 21 00 50 	addi    r1,r1,80
    8888:	4e 80 00 20 	blr

0000888c <gss_svc_searchbyctx>:


static struct rsc *
gss_svc_searchbyctx(struct xdr_netobj *handle)
{
    888c:	94 21 ff a0 	stwu    r1,-96(r1)
    8890:	7c 08 02 a6 	mflr    r0
    8894:	90 01 00 64 	stw     r0,100(r1)
    8898:	90 61 00 58 	stw     r3,88(r1)
	struct rsc rsci;
	struct rsc *found;

	memset(&rsci, 0, sizeof(rsci));
    889c:	38 01 00 0c 	addi    r0,r1,12
    88a0:	7c 09 03 78 	mr      r9,r0
    88a4:	38 00 00 44 	li      r0,68
    88a8:	7d 23 4b 78 	mr      r3,r9
    88ac:	38 80 00 00 	li      r4,0
    88b0:	7c 05 03 78 	mr      r5,r0
    88b4:	48 00 00 01 	bl      88b4 <gss_svc_searchbyctx+0x28>
	if (dup_to_netobj(&rsci.handle, handle->data, handle->len))
    88b8:	80 01 00 58 	lwz     r0,88(r1)
    88bc:	7c 0b 03 78 	mr      r11,r0
    88c0:	81 2b 00 04 	lwz     r9,4(r11)
    88c4:	80 01 00 58 	lwz     r0,88(r1)
    88c8:	7c 0b 03 78 	mr      r11,r0
    88cc:	80 0b 00 00 	lwz     r0,0(r11)
    88d0:	39 61 00 0c 	addi    r11,r1,12
    88d4:	39 6b 00 14 	addi    r11,r11,20
    88d8:	7d 63 5b 78 	mr      r3,r11
    88dc:	7d 24 4b 78 	mr      r4,r9
    88e0:	7c 05 03 78 	mr      r5,r0
    88e4:	4b ff e2 c9 	bl      6bac <dup_to_netobj>
    88e8:	7c 60 1b 78 	mr      r0,r3
    88ec:	2f 80 00 00 	cmpwi   cr7,r0,0
    88f0:	41 9e 00 0c 	beq-    cr7,88fc <gss_svc_searchbyctx+0x70>
		return NULL;
    88f4:	38 00 00 00 	li      r0,0
    88f8:	48 00 00 64 	b       895c <gss_svc_searchbyctx+0xd0>
	found = rsc_lookup(&rsci);
    88fc:	38 01 00 0c 	addi    r0,r1,12
    8900:	7c 03 03 78 	mr      r3,r0
    8904:	4b ff fc 85 	bl      8588 <rsc_lookup>
    8908:	90 61 00 08 	stw     r3,8(r1)
	rsc_free(&rsci);
    890c:	38 01 00 0c 	addi    r0,r1,12
    8910:	7c 03 03 78 	mr      r3,r0
    8914:	4b ff f0 dd 	bl      79f0 <rsc_free>
	if (!found)
    8918:	80 01 00 08 	lwz     r0,8(r1)
    891c:	2f 80 00 00 	cmpwi   cr7,r0,0
    8920:	40 9e 00 0c 	bne-    cr7,892c <gss_svc_searchbyctx+0xa0>
		return NULL;
    8924:	38 00 00 00 	li      r0,0
    8928:	48 00 00 34 	b       895c <gss_svc_searchbyctx+0xd0>
	if (cache_check(&rsc_cache, &found->h, NULL))
    892c:	80 01 00 08 	lwz     r0,8(r1)
    8930:	3d 20 00 00 	lis     r9,0
    8934:	38 69 00 70 	addi    r3,r9,112
    8938:	7c 04 03 78 	mr      r4,r0
    893c:	38 a0 00 00 	li      r5,0
    8940:	48 00 00 01 	bl      8940 <gss_svc_searchbyctx+0xb4>
    8944:	7c 60 1b 78 	mr      r0,r3
    8948:	2f 80 00 00 	cmpwi   cr7,r0,0
    894c:	41 9e 00 0c 	beq-    cr7,8958 <gss_svc_searchbyctx+0xcc>
		return NULL;
    8950:	38 00 00 00 	li      r0,0
    8954:	48 00 00 08 	b       895c <gss_svc_searchbyctx+0xd0>
	return found;
    8958:	80 01 00 08 	lwz     r0,8(r1)
}
    895c:	7c 03 03 78 	mr      r3,r0
    8960:	80 01 00 64 	lwz     r0,100(r1)
    8964:	7c 08 03 a6 	mtlr    r0
    8968:	38 21 00 60 	addi    r1,r1,96
    896c:	4e 80 00 20 	blr

00008970 <gss_check_seq_num>:

/* Implements sequence number algorithm as specified in RFC 2203. */
static int
gss_check_seq_num(struct rsc *rsci, int seq_num)
{
    8970:	94 21 ff a0 	stwu    r1,-96(r1)
    8974:	90 61 00 58 	stw     r3,88(r1)
    8978:	90 81 00 5c 	stw     r4,92(r1)
	struct gss_svc_seq_data *sd = &rsci->seqdata;
    897c:	80 01 00 58 	lwz     r0,88(r1)
    8980:	30 00 00 28 	addic   r0,r0,40
    8984:	90 01 00 08 	stw     r0,8(r1)

	spin_lock(&sd->sd_lock);
    8988:	80 01 00 08 	lwz     r0,8(r1)
    898c:	30 00 00 14 	addic   r0,r0,20
    8990:	90 01 00 40 	stw     r0,64(r1)
	if (seq_num > sd->sd_max) {
    8994:	80 01 00 08 	lwz     r0,8(r1)
    8998:	7c 0b 03 78 	mr      r11,r0
    899c:	81 2b 00 00 	lwz     r9,0(r11)
    89a0:	80 01 00 5c 	lwz     r0,92(r1)
    89a4:	7f 89 00 00 	cmpw    cr7,r9,r0
    89a8:	40 9c 01 b8 	bge-    cr7,8b60 <gss_check_seq_num+0x1f0>
		if (seq_num >= sd->sd_max + GSS_SEQ_WIN) {
    89ac:	80 01 00 08 	lwz     r0,8(r1)
    89b0:	7c 09 03 78 	mr      r9,r0
    89b4:	80 09 00 00 	lwz     r0,0(r9)
    89b8:	31 20 00 80 	addic   r9,r0,128
    89bc:	80 01 00 5c 	lwz     r0,92(r1)
    89c0:	7f 89 00 00 	cmpw    cr7,r9,r0
    89c4:	41 9d 00 fc 	bgt-    cr7,8ac0 <gss_check_seq_num+0x150>
			memset(sd->sd_win,0,sizeof(sd->sd_win));
    89c8:	80 01 00 08 	lwz     r0,8(r1)
    89cc:	30 00 00 04 	addic   r0,r0,4
    89d0:	39 20 00 00 	li      r9,0
    89d4:	7c 0b 03 78 	mr      r11,r0
    89d8:	91 2b 00 00 	stw     r9,0(r11)
    89dc:	39 20 00 00 	li      r9,0
    89e0:	7c 0b 03 78 	mr      r11,r0
    89e4:	91 2b 00 04 	stw     r9,4(r11)
    89e8:	39 20 00 00 	li      r9,0
    89ec:	7c 0b 03 78 	mr      r11,r0
    89f0:	91 2b 00 08 	stw     r9,8(r11)
    89f4:	39 20 00 00 	li      r9,0
    89f8:	7c 0b 03 78 	mr      r11,r0
    89fc:	91 2b 00 0c 	stw     r9,12(r11)
			sd->sd_max = seq_num;
    8a00:	80 01 00 08 	lwz     r0,8(r1)
    8a04:	81 21 00 5c 	lwz     r9,92(r1)
    8a08:	7c 0b 03 78 	mr      r11,r0
    8a0c:	91 2b 00 00 	stw     r9,0(r11)
    8a10:	48 00 00 cc 	b       8adc <gss_check_seq_num+0x16c>
		} else while (sd->sd_max < seq_num) {
			sd->sd_max++;
    8a14:	80 01 00 08 	lwz     r0,8(r1)
    8a18:	7c 09 03 78 	mr      r9,r0
    8a1c:	80 09 00 00 	lwz     r0,0(r9)
    8a20:	31 20 00 01 	addic   r9,r0,1
    8a24:	80 01 00 08 	lwz     r0,8(r1)
    8a28:	7c 0b 03 78 	mr      r11,r0
    8a2c:	91 2b 00 00 	stw     r9,0(r11)
			__clear_bit(sd->sd_max % GSS_SEQ_WIN, sd->sd_win);
    8a30:	80 01 00 08 	lwz     r0,8(r1)
    8a34:	7c 09 03 78 	mr      r9,r0
    8a38:	80 09 00 00 	lwz     r0,0(r9)
    8a3c:	7c 09 3e 70 	srawi   r9,r0,7
    8a40:	7d 29 01 94 	addze   r9,r9
    8a44:	55 29 38 30 	rlwinm  r9,r9,7,0,24
    8a48:	7d 29 00 50 	subf    r9,r9,r0
    8a4c:	80 01 00 08 	lwz     r0,8(r1)
    8a50:	30 00 00 04 	addic   r0,r0,4
    8a54:	91 21 00 0c 	stw     r9,12(r1)
    8a58:	90 01 00 10 	stw     r0,16(r1)
	*p  |= mask;
}

static inline void __clear_bit(int nr, volatile unsigned long *addr)
{
	unsigned long mask = BIT_MASK(nr);
    8a5c:	80 01 00 0c 	lwz     r0,12(r1)
    8a60:	7c 09 2e 70 	srawi   r9,r0,5
    8a64:	7d 29 01 94 	addze   r9,r9
    8a68:	55 29 28 34 	rlwinm  r9,r9,5,0,26
    8a6c:	7c 09 00 50 	subf    r0,r9,r0
    8a70:	39 20 00 01 	li      r9,1
    8a74:	7d 20 00 30 	slw     r0,r9,r0
    8a78:	90 01 00 14 	stw     r0,20(r1)
	unsigned long *p = ((unsigned long *)addr) + BIT_WORD(nr);
    8a7c:	80 01 00 0c 	lwz     r0,12(r1)
    8a80:	7c 00 2e 70 	srawi   r0,r0,5
    8a84:	7c 00 01 94 	addze   r0,r0
    8a88:	54 00 10 3a 	rlwinm  r0,r0,2,0,29
    8a8c:	81 21 00 10 	lwz     r9,16(r1)
    8a90:	7c 09 02 14 	add     r0,r9,r0
    8a94:	90 01 00 18 	stw     r0,24(r1)

	*p &= ~mask;
    8a98:	80 01 00 18 	lwz     r0,24(r1)
    8a9c:	7c 0b 03 78 	mr      r11,r0
    8aa0:	81 2b 00 00 	lwz     r9,0(r11)
    8aa4:	80 01 00 14 	lwz     r0,20(r1)
    8aa8:	7c 00 00 f8 	not     r0,r0
    8aac:	7d 29 00 38 	and     r9,r9,r0
    8ab0:	80 01 00 18 	lwz     r0,24(r1)
    8ab4:	7c 0b 03 78 	mr      r11,r0
    8ab8:	91 2b 00 00 	stw     r9,0(r11)
    8abc:	48 00 00 08 	b       8ac4 <gss_check_seq_num+0x154>
	spin_lock(&sd->sd_lock);
	if (seq_num > sd->sd_max) {
		if (seq_num >= sd->sd_max + GSS_SEQ_WIN) {
			memset(sd->sd_win,0,sizeof(sd->sd_win));
			sd->sd_max = seq_num;
		} else while (sd->sd_max < seq_num) {
    8ac0:	60 00 00 00 	nop
    8ac4:	80 01 00 08 	lwz     r0,8(r1)
    8ac8:	7c 0b 03 78 	mr      r11,r0
    8acc:	81 2b 00 00 	lwz     r9,0(r11)
    8ad0:	80 01 00 5c 	lwz     r0,92(r1)
    8ad4:	7f 89 00 00 	cmpw    cr7,r9,r0
    8ad8:	41 9c ff 3c 	blt+    cr7,8a14 <gss_check_seq_num+0xa4>
			sd->sd_max++;
			__clear_bit(sd->sd_max % GSS_SEQ_WIN, sd->sd_win);
		}
		__set_bit(seq_num % GSS_SEQ_WIN, sd->sd_win);
    8adc:	80 01 00 5c 	lwz     r0,92(r1)
    8ae0:	7c 09 3e 70 	srawi   r9,r0,7
    8ae4:	7d 29 01 94 	addze   r9,r9
    8ae8:	55 29 38 30 	rlwinm  r9,r9,7,0,24
    8aec:	7d 29 00 50 	subf    r9,r9,r0
    8af0:	80 01 00 08 	lwz     r0,8(r1)
    8af4:	30 00 00 04 	addic   r0,r0,4
    8af8:	91 21 00 1c 	stw     r9,28(r1)
    8afc:	90 01 00 20 	stw     r0,32(r1)
 * If it's called on the same region of memory simultaneously, the effect
 * may be that only one operation succeeds.
 */
static inline void __set_bit(int nr, volatile unsigned long *addr)
{
	unsigned long mask = BIT_MASK(nr);
    8b00:	80 01 00 1c 	lwz     r0,28(r1)
    8b04:	7c 09 2e 70 	srawi   r9,r0,5
    8b08:	7d 29 01 94 	addze   r9,r9
    8b0c:	55 29 28 34 	rlwinm  r9,r9,5,0,26
    8b10:	7c 09 00 50 	subf    r0,r9,r0
    8b14:	39 20 00 01 	li      r9,1
    8b18:	7d 20 00 30 	slw     r0,r9,r0
    8b1c:	90 01 00 24 	stw     r0,36(r1)
	unsigned long *p = ((unsigned long *)addr) + BIT_WORD(nr);
    8b20:	80 01 00 1c 	lwz     r0,28(r1)
    8b24:	7c 00 2e 70 	srawi   r0,r0,5
    8b28:	7c 00 01 94 	addze   r0,r0
    8b2c:	54 00 10 3a 	rlwinm  r0,r0,2,0,29
    8b30:	81 21 00 20 	lwz     r9,32(r1)
    8b34:	7c 09 02 14 	add     r0,r9,r0
    8b38:	90 01 00 28 	stw     r0,40(r1)

	*p  |= mask;
    8b3c:	80 01 00 28 	lwz     r0,40(r1)
    8b40:	7c 0b 03 78 	mr      r11,r0
    8b44:	81 2b 00 00 	lwz     r9,0(r11)
    8b48:	80 01 00 24 	lwz     r0,36(r1)
    8b4c:	7d 29 03 78 	or      r9,r9,r0
    8b50:	80 01 00 28 	lwz     r0,40(r1)
    8b54:	7c 0b 03 78 	mr      r11,r0
    8b58:	91 2b 00 00 	stw     r9,0(r11)
		goto ok;
    8b5c:	48 00 00 cc 	b       8c28 <gss_check_seq_num+0x2b8>
	} else if (seq_num <= sd->sd_max - GSS_SEQ_WIN) {
    8b60:	80 01 00 08 	lwz     r0,8(r1)
    8b64:	7c 09 03 78 	mr      r9,r0
    8b68:	80 09 00 00 	lwz     r0,0(r9)
    8b6c:	31 20 ff 80 	addic   r9,r0,-128
    8b70:	80 01 00 5c 	lwz     r0,92(r1)
    8b74:	7f 89 00 00 	cmpw    cr7,r9,r0
    8b78:	40 9c 00 c4 	bge-    cr7,8c3c <gss_check_seq_num+0x2cc>
		goto drop;
	}
	/* sd_max - GSS_SEQ_WIN < seq_num <= sd_max */
	if (__test_and_set_bit(seq_num % GSS_SEQ_WIN, sd->sd_win))
    8b7c:	80 01 00 5c 	lwz     r0,92(r1)
    8b80:	7c 09 3e 70 	srawi   r9,r0,7
    8b84:	7d 29 01 94 	addze   r9,r9
    8b88:	55 29 38 30 	rlwinm  r9,r9,7,0,24
    8b8c:	7d 29 00 50 	subf    r9,r9,r0
    8b90:	80 01 00 08 	lwz     r0,8(r1)
    8b94:	30 00 00 04 	addic   r0,r0,4
    8b98:	91 21 00 2c 	stw     r9,44(r1)
    8b9c:	90 01 00 30 	stw     r0,48(r1)
 * If two examples of this operation race, one can appear to succeed
 * but actually fail.  You must protect multiple accesses with a lock.
 */
static inline int __test_and_set_bit(int nr, volatile unsigned long *addr)
{
	unsigned long mask = BIT_MASK(nr);
    8ba0:	80 01 00 2c 	lwz     r0,44(r1)
    8ba4:	7c 09 2e 70 	srawi   r9,r0,5
    8ba8:	7d 29 01 94 	addze   r9,r9
    8bac:	55 29 28 34 	rlwinm  r9,r9,5,0,26
    8bb0:	7c 09 00 50 	subf    r0,r9,r0
    8bb4:	39 20 00 01 	li      r9,1
    8bb8:	7d 20 00 30 	slw     r0,r9,r0
    8bbc:	90 01 00 34 	stw     r0,52(r1)
	unsigned long *p = ((unsigned long *)addr) + BIT_WORD(nr);
    8bc0:	80 01 00 2c 	lwz     r0,44(r1)
    8bc4:	7c 00 2e 70 	srawi   r0,r0,5
    8bc8:	7c 00 01 94 	addze   r0,r0
    8bcc:	54 00 10 3a 	rlwinm  r0,r0,2,0,29
    8bd0:	81 21 00 30 	lwz     r9,48(r1)
    8bd4:	7c 09 02 14 	add     r0,r9,r0
    8bd8:	90 01 00 38 	stw     r0,56(r1)
	unsigned long old = *p;
    8bdc:	80 01 00 38 	lwz     r0,56(r1)
    8be0:	7c 0b 03 78 	mr      r11,r0
    8be4:	80 0b 00 00 	lwz     r0,0(r11)
    8be8:	90 01 00 3c 	stw     r0,60(r1)

	*p = old | mask;
    8bec:	81 21 00 34 	lwz     r9,52(r1)
    8bf0:	80 01 00 3c 	lwz     r0,60(r1)
    8bf4:	7d 29 03 78 	or      r9,r9,r0
    8bf8:	80 01 00 38 	lwz     r0,56(r1)
    8bfc:	7c 0b 03 78 	mr      r11,r0
    8c00:	91 2b 00 00 	stw     r9,0(r11)
	return (old & mask) != 0;
    8c04:	81 21 00 34 	lwz     r9,52(r1)
    8c08:	80 01 00 3c 	lwz     r0,60(r1)
    8c0c:	7d 20 00 38 	and     r0,r9,r0
    8c10:	2f 80 00 00 	cmpwi   cr7,r0,0
    8c14:	7c 00 00 26 	mfcr    r0
    8c18:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
    8c1c:	68 00 00 01 	xori    r0,r0,1
    8c20:	2f 80 00 00 	cmpwi   cr7,r0,0
    8c24:	40 9e 00 20 	bne-    cr7,8c44 <gss_check_seq_num+0x2d4>
		goto drop;
ok:
	spin_unlock(&sd->sd_lock);
    8c28:	80 01 00 08 	lwz     r0,8(r1)
    8c2c:	30 00 00 14 	addic   r0,r0,20
    8c30:	90 01 00 48 	stw     r0,72(r1)
	return 1;
    8c34:	38 00 00 01 	li      r0,1
    8c38:	48 00 00 20 	b       8c58 <gss_check_seq_num+0x2e8>
			__clear_bit(sd->sd_max % GSS_SEQ_WIN, sd->sd_win);
		}
		__set_bit(seq_num % GSS_SEQ_WIN, sd->sd_win);
		goto ok;
	} else if (seq_num <= sd->sd_max - GSS_SEQ_WIN) {
		goto drop;
    8c3c:	60 00 00 00 	nop
    8c40:	48 00 00 08 	b       8c48 <gss_check_seq_num+0x2d8>
	}
	/* sd_max - GSS_SEQ_WIN < seq_num <= sd_max */
	if (__test_and_set_bit(seq_num % GSS_SEQ_WIN, sd->sd_win))
		goto drop;
    8c44:	60 00 00 00 	nop
ok:
	spin_unlock(&sd->sd_lock);
	return 1;
drop:
	spin_unlock(&sd->sd_lock);
    8c48:	80 01 00 08 	lwz     r0,8(r1)
    8c4c:	30 00 00 14 	addic   r0,r0,20
    8c50:	90 01 00 44 	stw     r0,68(r1)
	return 0;
    8c54:	38 00 00 00 	li      r0,0
}
    8c58:	7c 03 03 78 	mr      r3,r0
    8c5c:	38 21 00 60 	addi    r1,r1,96
    8c60:	4e 80 00 20 	blr

00008c64 <gss_verify_header>:
 * or return SVC_DENIED and indicate error in authp.
 */
static int
gss_verify_header(struct svc_rqst *rqstp, struct rsc *rsci,
		  __be32 *rpcstart, struct rpc_gss_wire_cred *gc, __be32 *authp)
{
    8c64:	94 21 ff 70 	stwu    r1,-144(r1)
    8c68:	7c 08 02 a6 	mflr    r0
    8c6c:	90 01 00 94 	stw     r0,148(r1)
    8c70:	90 61 00 78 	stw     r3,120(r1)
    8c74:	90 81 00 7c 	stw     r4,124(r1)
    8c78:	90 a1 00 80 	stw     r5,128(r1)
    8c7c:	90 c1 00 84 	stw     r6,132(r1)
    8c80:	90 e1 00 88 	stw     r7,136(r1)
	struct gss_ctx		*ctx_id = rsci->mechctx;
    8c84:	80 01 00 7c 	lwz     r0,124(r1)
    8c88:	7c 09 03 78 	mr      r9,r0
    8c8c:	80 09 00 3c 	lwz     r0,60(r9)
    8c90:	90 01 00 08 	stw     r0,8(r1)
	struct xdr_buf		rpchdr;
	struct xdr_netobj	checksum;
	u32			flavor = 0;
    8c94:	38 00 00 00 	li      r0,0
    8c98:	90 01 00 0c 	stw     r0,12(r1)
	struct kvec		*argv = &rqstp->rq_arg.head[0];
    8c9c:	80 01 00 78 	lwz     r0,120(r1)
    8ca0:	30 00 00 c8 	addic   r0,r0,200
    8ca4:	90 01 00 10 	stw     r0,16(r1)
	struct kvec		iov;

	/* data to compute the checksum over: */
	iov.iov_base = rpcstart;
    8ca8:	80 01 00 80 	lwz     r0,128(r1)
    8cac:	90 01 00 6c 	stw     r0,108(r1)
	iov.iov_len = (u8 *)argv->iov_base - (u8 *)rpcstart;
    8cb0:	80 01 00 10 	lwz     r0,16(r1)
    8cb4:	7c 0b 03 78 	mr      r11,r0
    8cb8:	80 0b 00 00 	lwz     r0,0(r11)
    8cbc:	7c 09 03 78 	mr      r9,r0
    8cc0:	80 01 00 80 	lwz     r0,128(r1)
    8cc4:	7c 00 48 50 	subf    r0,r0,r9
    8cc8:	90 01 00 70 	stw     r0,112(r1)
	xdr_buf_from_iov(&iov, &rpchdr);
    8ccc:	39 21 00 6c 	addi    r9,r1,108
    8cd0:	38 01 00 3c 	addi    r0,r1,60
    8cd4:	7d 23 4b 78 	mr      r3,r9
    8cd8:	7c 04 03 78 	mr      r4,r0
    8cdc:	48 00 00 01 	bl      8cdc <gss_verify_header+0x78>

	*authp = rpc_autherr_badverf;
    8ce0:	80 01 00 88 	lwz     r0,136(r1)
    8ce4:	39 20 00 03 	li      r9,3
    8ce8:	7c 0b 03 78 	mr      r11,r0
    8cec:	91 2b 00 00 	stw     r9,0(r11)
	if (argv->iov_len < 4)
    8cf0:	80 01 00 10 	lwz     r0,16(r1)
    8cf4:	7c 09 03 78 	mr      r9,r0
    8cf8:	80 09 00 04 	lwz     r0,4(r9)
    8cfc:	2b 80 00 03 	cmplwi  cr7,r0,3
    8d00:	41 9d 00 0c 	bgt-    cr7,8d0c <gss_verify_header+0xa8>
		return SVC_DENIED;
    8d04:	38 00 00 08 	li      r0,8
    8d08:	48 00 03 0c 	b       9014 <gss_verify_header+0x3b0>
    8d0c:	80 01 00 10 	lwz     r0,16(r1)
    8d10:	90 01 00 14 	stw     r0,20(r1)
				+ 2 + 1)

static inline u32 svc_getnl(struct kvec *iov)
{
	__be32 val, *vp;
	vp = iov->iov_base;
    8d14:	80 01 00 14 	lwz     r0,20(r1)
    8d18:	7c 0b 03 78 	mr      r11,r0
    8d1c:	80 0b 00 00 	lwz     r0,0(r11)
    8d20:	90 01 00 18 	stw     r0,24(r1)
	val = *vp++;
    8d24:	80 01 00 18 	lwz     r0,24(r1)
    8d28:	7c 09 03 78 	mr      r9,r0
    8d2c:	80 09 00 00 	lwz     r0,0(r9)
    8d30:	90 01 00 1c 	stw     r0,28(r1)
    8d34:	80 01 00 18 	lwz     r0,24(r1)
    8d38:	30 00 00 04 	addic   r0,r0,4
    8d3c:	90 01 00 18 	stw     r0,24(r1)
	iov->iov_base = (void*)vp;
    8d40:	80 01 00 14 	lwz     r0,20(r1)
    8d44:	81 21 00 18 	lwz     r9,24(r1)
    8d48:	7c 0b 03 78 	mr      r11,r0
    8d4c:	91 2b 00 00 	stw     r9,0(r11)
	iov->iov_len -= sizeof(__be32);
    8d50:	80 01 00 14 	lwz     r0,20(r1)
    8d54:	7c 09 03 78 	mr      r9,r0
    8d58:	80 09 00 04 	lwz     r0,4(r9)
    8d5c:	31 20 ff fc 	addic   r9,r0,-4
    8d60:	80 01 00 14 	lwz     r0,20(r1)
    8d64:	7c 0b 03 78 	mr      r11,r0
    8d68:	91 2b 00 04 	stw     r9,4(r11)
	return ntohl(val);
    8d6c:	80 01 00 1c 	lwz     r0,28(r1)
	flavor = svc_getnl(argv);
    8d70:	90 01 00 0c 	stw     r0,12(r1)
	if (flavor != RPC_AUTH_GSS)
    8d74:	80 01 00 0c 	lwz     r0,12(r1)
    8d78:	2f 80 00 06 	cmpwi   cr7,r0,6
    8d7c:	41 9e 00 0c 	beq-    cr7,8d88 <gss_verify_header+0x124>
		return SVC_DENIED;
    8d80:	38 00 00 08 	li      r0,8
    8d84:	48 00 02 90 	b       9014 <gss_verify_header+0x3b0>
    8d88:	80 01 00 10 	lwz     r0,16(r1)
    8d8c:	90 01 00 20 	stw     r0,32(r1)
	if (svc_safe_getnetobj(argv, &checksum))
    8d90:	38 01 00 64 	addi    r0,r1,100
	*authp = rpc_autherr_badverf;
	if (argv->iov_len < 4)
		return SVC_DENIED;
	flavor = svc_getnl(argv);
	if (flavor != RPC_AUTH_GSS)
		return SVC_DENIED;
    8d94:	90 01 00 24 	stw     r0,36(r1)
static inline int
svc_safe_getnetobj(struct kvec *argv, struct xdr_netobj *o)
{
	int l;

	if (argv->iov_len < 4)
    8d98:	80 01 00 20 	lwz     r0,32(r1)
    8d9c:	7c 09 03 78 	mr      r9,r0
    8da0:	80 09 00 04 	lwz     r0,4(r9)
    8da4:	2b 80 00 03 	cmplwi  cr7,r0,3
    8da8:	41 9d 00 0c 	bgt-    cr7,8db4 <gss_verify_header+0x150>
		return -1;
    8dac:	38 00 ff ff 	li      r0,-1
    8db0:	48 00 01 14 	b       8ec4 <gss_verify_header+0x260>
    8db4:	80 01 00 20 	lwz     r0,32(r1)
    8db8:	90 01 00 28 	stw     r0,40(r1)
				+ 2 + 1)

static inline u32 svc_getnl(struct kvec *iov)
{
	__be32 val, *vp;
	vp = iov->iov_base;
    8dbc:	80 01 00 28 	lwz     r0,40(r1)
    8dc0:	7c 0b 03 78 	mr      r11,r0
    8dc4:	80 0b 00 00 	lwz     r0,0(r11)
    8dc8:	90 01 00 2c 	stw     r0,44(r1)
	val = *vp++;
    8dcc:	80 01 00 2c 	lwz     r0,44(r1)
    8dd0:	7c 09 03 78 	mr      r9,r0
    8dd4:	80 09 00 00 	lwz     r0,0(r9)
    8dd8:	90 01 00 30 	stw     r0,48(r1)
    8ddc:	80 01 00 2c 	lwz     r0,44(r1)
    8de0:	30 00 00 04 	addic   r0,r0,4
    8de4:	90 01 00 2c 	stw     r0,44(r1)
	iov->iov_base = (void*)vp;
    8de8:	80 01 00 28 	lwz     r0,40(r1)
    8dec:	81 21 00 2c 	lwz     r9,44(r1)
    8df0:	7c 0b 03 78 	mr      r11,r0
    8df4:	91 2b 00 00 	stw     r9,0(r11)
	iov->iov_len -= sizeof(__be32);
    8df8:	80 01 00 28 	lwz     r0,40(r1)
    8dfc:	7c 09 03 78 	mr      r9,r0
    8e00:	80 09 00 04 	lwz     r0,4(r9)
    8e04:	31 20 ff fc 	addic   r9,r0,-4
    8e08:	80 01 00 28 	lwz     r0,40(r1)
    8e0c:	7c 0b 03 78 	mr      r11,r0
    8e10:	91 2b 00 04 	stw     r9,4(r11)
	return ntohl(val);
    8e14:	80 01 00 30 	lwz     r0,48(r1)
	o->len = svc_getnl(argv);
    8e18:	7c 09 03 78 	mr      r9,r0
    8e1c:	80 01 00 24 	lwz     r0,36(r1)
    8e20:	7c 0b 03 78 	mr      r11,r0
    8e24:	91 2b 00 00 	stw     r9,0(r11)
	l = round_up_to_quad(o->len);
    8e28:	80 01 00 24 	lwz     r0,36(r1)
    8e2c:	7c 09 03 78 	mr      r9,r0
    8e30:	80 09 00 00 	lwz     r0,0(r9)
    8e34:	90 01 00 34 	stw     r0,52(r1)
	return 0;
}

static inline u32 round_up_to_quad(u32 i)
{
	return (i + 3 ) & ~3;
    8e38:	80 01 00 34 	lwz     r0,52(r1)
    8e3c:	30 00 00 03 	addic   r0,r0,3
    8e40:	54 00 00 3a 	rlwinm  r0,r0,0,0,29
	int l;

	if (argv->iov_len < 4)
		return -1;
	o->len = svc_getnl(argv);
	l = round_up_to_quad(o->len);
    8e44:	90 01 00 38 	stw     r0,56(r1)
	if (argv->iov_len < l)
    8e48:	80 01 00 20 	lwz     r0,32(r1)
    8e4c:	7c 0b 03 78 	mr      r11,r0
    8e50:	81 2b 00 04 	lwz     r9,4(r11)
    8e54:	80 01 00 38 	lwz     r0,56(r1)
    8e58:	7f 89 00 40 	cmplw   cr7,r9,r0
    8e5c:	40 9c 00 0c 	bge-    cr7,8e68 <gss_verify_header+0x204>
		return -1;
    8e60:	38 00 ff ff 	li      r0,-1
    8e64:	48 00 00 60 	b       8ec4 <gss_verify_header+0x260>
	o->data = argv->iov_base;
    8e68:	80 01 00 20 	lwz     r0,32(r1)
    8e6c:	7c 0b 03 78 	mr      r11,r0
    8e70:	81 2b 00 00 	lwz     r9,0(r11)
    8e74:	80 01 00 24 	lwz     r0,36(r1)
    8e78:	7c 0b 03 78 	mr      r11,r0
    8e7c:	91 2b 00 04 	stw     r9,4(r11)
	argv->iov_base += l;
    8e80:	80 01 00 20 	lwz     r0,32(r1)
    8e84:	7c 0b 03 78 	mr      r11,r0
    8e88:	81 2b 00 00 	lwz     r9,0(r11)
    8e8c:	80 01 00 38 	lwz     r0,56(r1)
    8e90:	7d 29 02 14 	add     r9,r9,r0
    8e94:	80 01 00 20 	lwz     r0,32(r1)
    8e98:	7c 0b 03 78 	mr      r11,r0
    8e9c:	91 2b 00 00 	stw     r9,0(r11)
	argv->iov_len -= l;
    8ea0:	80 01 00 20 	lwz     r0,32(r1)
    8ea4:	7c 0b 03 78 	mr      r11,r0
    8ea8:	81 2b 00 04 	lwz     r9,4(r11)
    8eac:	80 01 00 38 	lwz     r0,56(r1)
    8eb0:	7d 20 48 50 	subf    r9,r0,r9
    8eb4:	80 01 00 20 	lwz     r0,32(r1)
    8eb8:	7c 0b 03 78 	mr      r11,r0
    8ebc:	91 2b 00 04 	stw     r9,4(r11)
	return 0;
    8ec0:	38 00 00 00 	li      r0,0
	if (argv->iov_len < 4)
		return SVC_DENIED;
	flavor = svc_getnl(argv);
	if (flavor != RPC_AUTH_GSS)
		return SVC_DENIED;
	if (svc_safe_getnetobj(argv, &checksum))
    8ec4:	2f 80 00 00 	cmpwi   cr7,r0,0
    8ec8:	41 9e 00 0c 	beq-    cr7,8ed4 <gss_verify_header+0x270>
		return SVC_DENIED;
    8ecc:	38 00 00 08 	li      r0,8
    8ed0:	48 00 01 44 	b       9014 <gss_verify_header+0x3b0>

	if (rqstp->rq_deferred) /* skip verification of revisited request */
    8ed4:	80 01 00 78 	lwz     r0,120(r1)
    8ed8:	7c 09 03 78 	mr      r9,r0
    8edc:	80 09 00 bc 	lwz     r0,188(r9)
    8ee0:	2f 80 00 00 	cmpwi   cr7,r0,0
    8ee4:	41 9e 00 0c 	beq-    cr7,8ef0 <gss_verify_header+0x28c>
		return SVC_OK;
    8ee8:	38 00 00 05 	li      r0,5
    8eec:	48 00 01 28 	b       9014 <gss_verify_header+0x3b0>
	if (gss_verify_mic(ctx_id, &rpchdr, &checksum) != GSS_S_COMPLETE) {
    8ef0:	39 21 00 3c 	addi    r9,r1,60
    8ef4:	38 01 00 64 	addi    r0,r1,100
    8ef8:	80 61 00 08 	lwz     r3,8(r1)
    8efc:	7d 24 4b 78 	mr      r4,r9
    8f00:	7c 05 03 78 	mr      r5,r0
    8f04:	48 00 00 01 	bl      8f04 <gss_verify_header+0x2a0>
    8f08:	7c 60 1b 78 	mr      r0,r3
    8f0c:	2f 80 00 00 	cmpwi   cr7,r0,0
    8f10:	41 9e 00 1c 	beq-    cr7,8f2c <gss_verify_header+0x2c8>
		*authp = rpcsec_gsserr_credproblem;
    8f14:	80 01 00 88 	lwz     r0,136(r1)
    8f18:	39 20 00 0d 	li      r9,13
    8f1c:	7c 0b 03 78 	mr      r11,r0
    8f20:	91 2b 00 00 	stw     r9,0(r11)
		return SVC_DENIED;
    8f24:	38 00 00 08 	li      r0,8
    8f28:	48 00 00 ec 	b       9014 <gss_verify_header+0x3b0>
	}

	if (gc->gc_seq > MAXSEQ) {
    8f2c:	80 01 00 84 	lwz     r0,132(r1)
    8f30:	7c 0b 03 78 	mr      r11,r0
    8f34:	81 2b 00 08 	lwz     r9,8(r11)
    8f38:	3c 00 80 00 	lis     r0,-32768
    8f3c:	7f 89 00 40 	cmplw   cr7,r9,r0
    8f40:	40 9d 00 60 	ble-    cr7,8fa0 <gss_verify_header+0x33c>
		dprintk("RPC:       svcauth_gss: discarding request with "
    8f44:	3c 00 00 00 	lis     r0,0
    8f48:	7c 09 03 78 	mr      r9,r0
    8f4c:	80 09 00 00 	lwz     r0,0(r9)
    8f50:	54 00 06 f6 	rlwinm  r0,r0,0,27,27
    8f54:	2f 80 00 00 	cmpwi   cr7,r0,0
    8f58:	7c 00 00 26 	mfcr    r0
    8f5c:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
    8f60:	68 00 00 01 	xori    r0,r0,1
    8f64:	2f 80 00 00 	cmpwi   cr7,r0,0
    8f68:	41 9e 00 20 	beq-    cr7,8f88 <gss_verify_header+0x324>
    8f6c:	80 01 00 84 	lwz     r0,132(r1)
    8f70:	7c 0b 03 78 	mr      r11,r0
    8f74:	80 0b 00 08 	lwz     r0,8(r11)
    8f78:	3d 20 00 00 	lis     r9,0
    8f7c:	38 69 00 4c 	addi    r3,r9,76
    8f80:	7c 04 03 78 	mr      r4,r0
    8f84:	48 00 00 01 	bl      8f84 <gss_verify_header+0x320>
				"large sequence number %d\n", gc->gc_seq);
		*authp = rpcsec_gsserr_ctxproblem;
    8f88:	80 01 00 88 	lwz     r0,136(r1)
    8f8c:	39 20 00 0e 	li      r9,14
    8f90:	7c 0b 03 78 	mr      r11,r0
    8f94:	91 2b 00 00 	stw     r9,0(r11)
		return SVC_DENIED;
    8f98:	38 00 00 08 	li      r0,8
    8f9c:	48 00 00 78 	b       9014 <gss_verify_header+0x3b0>
	}
	if (!gss_check_seq_num(rsci, gc->gc_seq)) {
    8fa0:	80 01 00 84 	lwz     r0,132(r1)
    8fa4:	7c 09 03 78 	mr      r9,r0
    8fa8:	80 09 00 08 	lwz     r0,8(r9)
    8fac:	80 61 00 7c 	lwz     r3,124(r1)
    8fb0:	7c 04 03 78 	mr      r4,r0
    8fb4:	4b ff f9 bd 	bl      8970 <gss_check_seq_num>
    8fb8:	7c 60 1b 78 	mr      r0,r3
    8fbc:	2f 80 00 00 	cmpwi   cr7,r0,0
    8fc0:	40 9e 00 50 	bne-    cr7,9010 <gss_verify_header+0x3ac>
		dprintk("RPC:       svcauth_gss: discarding request with "
    8fc4:	3c 00 00 00 	lis     r0,0
    8fc8:	7c 0b 03 78 	mr      r11,r0
    8fcc:	80 0b 00 00 	lwz     r0,0(r11)
    8fd0:	54 00 06 f6 	rlwinm  r0,r0,0,27,27
    8fd4:	2f 80 00 00 	cmpwi   cr7,r0,0
    8fd8:	7c 00 00 26 	mfcr    r0
    8fdc:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
    8fe0:	68 00 00 01 	xori    r0,r0,1
    8fe4:	2f 80 00 00 	cmpwi   cr7,r0,0
    8fe8:	41 9e 00 20 	beq-    cr7,9008 <gss_verify_header+0x3a4>
    8fec:	80 01 00 84 	lwz     r0,132(r1)
    8ff0:	7c 09 03 78 	mr      r9,r0
    8ff4:	80 09 00 08 	lwz     r0,8(r9)
    8ff8:	3d 20 00 00 	lis     r9,0
    8ffc:	38 69 00 98 	addi    r3,r9,152
    9000:	7c 04 03 78 	mr      r4,r0
    9004:	48 00 00 01 	bl      9004 <gss_verify_header+0x3a0>
				"old sequence number %d\n", gc->gc_seq);
		return SVC_DROP;
    9008:	38 00 00 06 	li      r0,6
    900c:	48 00 00 08 	b       9014 <gss_verify_header+0x3b0>
	}
	return SVC_OK;
    9010:	38 00 00 05 	li      r0,5
}
    9014:	7c 03 03 78 	mr      r3,r0
    9018:	80 01 00 94 	lwz     r0,148(r1)
    901c:	7c 08 03 a6 	mtlr    r0
    9020:	38 21 00 90 	addi    r1,r1,144
    9024:	4e 80 00 20 	blr

00009028 <gss_write_null_verf>:

static int
gss_write_null_verf(struct svc_rqst *rqstp)
{
    9028:	94 21 ff d0 	stwu    r1,-48(r1)
    902c:	90 61 00 28 	stw     r3,40(r1)
	__be32     *p;

	svc_putnl(rqstp->rq_res.head, RPC_AUTH_NULL);
    9030:	80 01 00 28 	lwz     r0,40(r1)
    9034:	30 00 00 f0 	addic   r0,r0,240
    9038:	90 01 00 0c 	stw     r0,12(r1)
    903c:	38 00 00 00 	li      r0,0
    9040:	90 01 00 10 	stw     r0,16(r1)
}

static inline void svc_putnl(struct kvec *iov, u32 val)
{
	__be32 *vp = iov->iov_base + iov->iov_len;
    9044:	80 01 00 0c 	lwz     r0,12(r1)
    9048:	7c 0b 03 78 	mr      r11,r0
    904c:	81 2b 00 00 	lwz     r9,0(r11)
    9050:	80 01 00 0c 	lwz     r0,12(r1)
    9054:	7c 0b 03 78 	mr      r11,r0
    9058:	80 0b 00 04 	lwz     r0,4(r11)
    905c:	7c 09 02 14 	add     r0,r9,r0
    9060:	90 01 00 14 	stw     r0,20(r1)
	*vp = htonl(val);
    9064:	80 01 00 14 	lwz     r0,20(r1)
    9068:	81 21 00 10 	lwz     r9,16(r1)
    906c:	7c 0b 03 78 	mr      r11,r0
    9070:	91 2b 00 00 	stw     r9,0(r11)
	iov->iov_len += sizeof(__be32);
    9074:	80 01 00 0c 	lwz     r0,12(r1)
    9078:	7c 09 03 78 	mr      r9,r0
    907c:	80 09 00 04 	lwz     r0,4(r9)
    9080:	31 20 00 04 	addic   r9,r0,4
    9084:	80 01 00 0c 	lwz     r0,12(r1)
    9088:	7c 0b 03 78 	mr      r11,r0
    908c:	91 2b 00 04 	stw     r9,4(r11)
	p = rqstp->rq_res.head->iov_base + rqstp->rq_res.head->iov_len;
    9090:	80 01 00 28 	lwz     r0,40(r1)
    9094:	7c 0b 03 78 	mr      r11,r0
    9098:	81 2b 00 f0 	lwz     r9,240(r11)
    909c:	80 01 00 28 	lwz     r0,40(r1)
    90a0:	7c 0b 03 78 	mr      r11,r0
    90a4:	80 0b 00 f4 	lwz     r0,244(r11)
    90a8:	7c 09 02 14 	add     r0,r9,r0
    90ac:	90 01 00 08 	stw     r0,8(r1)
	/* don't really need to check if head->iov_len > PAGE_SIZE ... */
	*p++ = 0;
    90b0:	80 01 00 08 	lwz     r0,8(r1)
    90b4:	39 20 00 00 	li      r9,0
    90b8:	7c 0b 03 78 	mr      r11,r0
    90bc:	91 2b 00 00 	stw     r9,0(r11)
    90c0:	80 01 00 08 	lwz     r0,8(r1)
    90c4:	30 00 00 04 	addic   r0,r0,4
    90c8:	90 01 00 08 	stw     r0,8(r1)
    90cc:	80 01 00 28 	lwz     r0,40(r1)
    90d0:	90 01 00 18 	stw     r0,24(r1)
    90d4:	80 01 00 08 	lwz     r0,8(r1)
    90d8:	90 01 00 1c 	stw     r0,28(r1)
}

static inline int
xdr_ressize_check(struct svc_rqst *rqstp, __be32 *p)
{
	struct kvec *vec = &rqstp->rq_res.head[0];
    90dc:	80 01 00 18 	lwz     r0,24(r1)
    90e0:	30 00 00 f0 	addic   r0,r0,240
    90e4:	90 01 00 20 	stw     r0,32(r1)
	char *cp = (char*)p;
    90e8:	80 01 00 1c 	lwz     r0,28(r1)
    90ec:	90 01 00 24 	stw     r0,36(r1)

	vec->iov_len = cp - (char*)vec->iov_base;
    90f0:	81 21 00 24 	lwz     r9,36(r1)
    90f4:	80 01 00 20 	lwz     r0,32(r1)
    90f8:	7c 0b 03 78 	mr      r11,r0
    90fc:	80 0b 00 00 	lwz     r0,0(r11)
    9100:	7c 00 48 50 	subf    r0,r0,r9
    9104:	7c 09 03 78 	mr      r9,r0
    9108:	80 01 00 20 	lwz     r0,32(r1)
    910c:	7c 0b 03 78 	mr      r11,r0
    9110:	91 2b 00 04 	stw     r9,4(r11)

	return vec->iov_len <= PAGE_SIZE;
    9114:	80 01 00 20 	lwz     r0,32(r1)
    9118:	7c 09 03 78 	mr      r9,r0
    911c:	80 09 00 04 	lwz     r0,4(r9)
    9120:	2b 80 10 00 	cmplwi  cr7,r0,4096
    9124:	4f dd e8 42 	crnot   4*cr7+eq,4*cr7+gt
    9128:	7c 00 00 26 	mfcr    r0
    912c:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
	if (!xdr_ressize_check(rqstp, p))
    9130:	2f 80 00 00 	cmpwi   cr7,r0,0
    9134:	40 9e 00 0c 	bne-    cr7,9140 <gss_write_null_verf+0x118>
		return -1;
    9138:	38 00 ff ff 	li      r0,-1
    913c:	48 00 00 08 	b       9144 <gss_write_null_verf+0x11c>
	return 0;
    9140:	38 00 00 00 	li      r0,0
}
    9144:	7c 03 03 78 	mr      r3,r0
    9148:	38 21 00 30 	addi    r1,r1,48
    914c:	4e 80 00 20 	blr

00009150 <gss_write_verf>:

static int
gss_write_verf(struct svc_rqst *rqstp, struct gss_ctx *ctx_id, u32 seq)
{
    9150:	94 21 ff 70 	stwu    r1,-144(r1)
    9154:	7c 08 02 a6 	mflr    r0
    9158:	90 01 00 94 	stw     r0,148(r1)
    915c:	90 61 00 78 	stw     r3,120(r1)
    9160:	90 81 00 7c 	stw     r4,124(r1)
    9164:	90 a1 00 80 	stw     r5,128(r1)
	struct xdr_buf		verf_data;
	struct xdr_netobj	mic;
	__be32			*p;
	struct kvec		iov;

	svc_putnl(rqstp->rq_res.head, RPC_AUTH_GSS);
    9168:	80 01 00 78 	lwz     r0,120(r1)
    916c:	30 00 00 f0 	addic   r0,r0,240
    9170:	90 01 00 10 	stw     r0,16(r1)
    9174:	38 00 00 06 	li      r0,6
    9178:	90 01 00 14 	stw     r0,20(r1)
	return ntohl(val);
}

static inline void svc_putnl(struct kvec *iov, u32 val)
{
	__be32 *vp = iov->iov_base + iov->iov_len;
    917c:	80 01 00 10 	lwz     r0,16(r1)
    9180:	7c 0b 03 78 	mr      r11,r0
    9184:	81 2b 00 00 	lwz     r9,0(r11)
    9188:	80 01 00 10 	lwz     r0,16(r1)
    918c:	7c 0b 03 78 	mr      r11,r0
    9190:	80 0b 00 04 	lwz     r0,4(r11)
    9194:	7c 09 02 14 	add     r0,r9,r0
    9198:	90 01 00 18 	stw     r0,24(r1)
	*vp = htonl(val);
    919c:	80 01 00 18 	lwz     r0,24(r1)
    91a0:	81 21 00 14 	lwz     r9,20(r1)
    91a4:	7c 0b 03 78 	mr      r11,r0
    91a8:	91 2b 00 00 	stw     r9,0(r11)
	iov->iov_len += sizeof(__be32);
    91ac:	80 01 00 10 	lwz     r0,16(r1)
    91b0:	7c 09 03 78 	mr      r9,r0
    91b4:	80 09 00 04 	lwz     r0,4(r9)
    91b8:	31 20 00 04 	addic   r9,r0,4
    91bc:	80 01 00 10 	lwz     r0,16(r1)
    91c0:	7c 0b 03 78 	mr      r11,r0
    91c4:	91 2b 00 04 	stw     r9,4(r11)
	xdr_seq = htonl(seq);
    91c8:	80 01 00 80 	lwz     r0,128(r1)
    91cc:	90 01 00 30 	stw     r0,48(r1)

	iov.iov_base = &xdr_seq;
    91d0:	38 01 00 30 	addi    r0,r1,48
    91d4:	90 01 00 64 	stw     r0,100(r1)
	iov.iov_len = sizeof(xdr_seq);
    91d8:	38 00 00 04 	li      r0,4
    91dc:	90 01 00 68 	stw     r0,104(r1)
	xdr_buf_from_iov(&iov, &verf_data);
    91e0:	39 21 00 64 	addi    r9,r1,100
    91e4:	38 01 00 34 	addi    r0,r1,52
    91e8:	7d 23 4b 78 	mr      r3,r9
    91ec:	7c 04 03 78 	mr      r4,r0
    91f0:	48 00 00 01 	bl      91f0 <gss_write_verf+0xa0>
	p = rqstp->rq_res.head->iov_base + rqstp->rq_res.head->iov_len;
    91f4:	80 01 00 78 	lwz     r0,120(r1)
    91f8:	7c 0b 03 78 	mr      r11,r0
    91fc:	81 2b 00 f0 	lwz     r9,240(r11)
    9200:	80 01 00 78 	lwz     r0,120(r1)
    9204:	7c 0b 03 78 	mr      r11,r0
    9208:	80 0b 00 f4 	lwz     r0,244(r11)
    920c:	7c 09 02 14 	add     r0,r9,r0
    9210:	90 01 00 08 	stw     r0,8(r1)
	mic.data = (u8 *)(p + 1);
    9214:	80 01 00 08 	lwz     r0,8(r1)
    9218:	30 00 00 04 	addic   r0,r0,4
    921c:	90 01 00 60 	stw     r0,96(r1)
	maj_stat = gss_get_mic(ctx_id, &verf_data, &mic);
    9220:	39 21 00 34 	addi    r9,r1,52
    9224:	38 01 00 5c 	addi    r0,r1,92
    9228:	80 61 00 7c 	lwz     r3,124(r1)
    922c:	7d 24 4b 78 	mr      r4,r9
    9230:	7c 05 03 78 	mr      r5,r0
    9234:	48 00 00 01 	bl      9234 <gss_write_verf+0xe4>
    9238:	90 61 00 0c 	stw     r3,12(r1)
	if (maj_stat != GSS_S_COMPLETE)
    923c:	80 01 00 0c 	lwz     r0,12(r1)
    9240:	2f 80 00 00 	cmpwi   cr7,r0,0
    9244:	41 9e 00 0c 	beq-    cr7,9250 <gss_write_verf+0x100>
		return -1;
    9248:	38 00 ff ff 	li      r0,-1
    924c:	48 00 00 f0 	b       933c <gss_write_verf+0x1ec>
	*p++ = htonl(mic.len);
    9250:	81 21 00 5c 	lwz     r9,92(r1)
    9254:	80 01 00 08 	lwz     r0,8(r1)
    9258:	7c 0b 03 78 	mr      r11,r0
    925c:	91 2b 00 00 	stw     r9,0(r11)
    9260:	80 01 00 08 	lwz     r0,8(r1)
    9264:	30 00 00 04 	addic   r0,r0,4
    9268:	90 01 00 08 	stw     r0,8(r1)
	memset((u8 *)p + mic.len, 0, round_up_to_quad(mic.len) - mic.len);
    926c:	80 01 00 5c 	lwz     r0,92(r1)
    9270:	81 21 00 08 	lwz     r9,8(r1)
    9274:	7d 29 02 14 	add     r9,r9,r0
    9278:	80 01 00 5c 	lwz     r0,92(r1)
    927c:	90 01 00 1c 	stw     r0,28(r1)
	return 0;
}

static inline u32 round_up_to_quad(u32 i)
{
	return (i + 3 ) & ~3;
    9280:	80 01 00 1c 	lwz     r0,28(r1)
    9284:	30 00 00 03 	addic   r0,r0,3
    9288:	54 00 00 3a 	rlwinm  r0,r0,0,0,29
	mic.data = (u8 *)(p + 1);
	maj_stat = gss_get_mic(ctx_id, &verf_data, &mic);
	if (maj_stat != GSS_S_COMPLETE)
		return -1;
	*p++ = htonl(mic.len);
	memset((u8 *)p + mic.len, 0, round_up_to_quad(mic.len) - mic.len);
    928c:	7c 0b 03 78 	mr      r11,r0
    9290:	80 01 00 5c 	lwz     r0,92(r1)
    9294:	7c 00 58 50 	subf    r0,r0,r11
    9298:	7d 23 4b 78 	mr      r3,r9
    929c:	38 80 00 00 	li      r4,0
    92a0:	7c 05 03 78 	mr      r5,r0
    92a4:	48 00 00 01 	bl      92a4 <gss_write_verf+0x154>
	p += XDR_QUADLEN(mic.len);
    92a8:	80 01 00 5c 	lwz     r0,92(r1)
    92ac:	30 00 00 03 	addic   r0,r0,3
    92b0:	54 00 f0 be 	rlwinm  r0,r0,30,2,31
    92b4:	54 00 10 3a 	rlwinm  r0,r0,2,0,29
    92b8:	81 21 00 08 	lwz     r9,8(r1)
    92bc:	7c 09 02 14 	add     r0,r9,r0
    92c0:	90 01 00 08 	stw     r0,8(r1)
    92c4:	80 01 00 78 	lwz     r0,120(r1)
    92c8:	90 01 00 20 	stw     r0,32(r1)
    92cc:	80 01 00 08 	lwz     r0,8(r1)
    92d0:	90 01 00 24 	stw     r0,36(r1)
}

static inline int
xdr_ressize_check(struct svc_rqst *rqstp, __be32 *p)
{
	struct kvec *vec = &rqstp->rq_res.head[0];
    92d4:	80 01 00 20 	lwz     r0,32(r1)
    92d8:	30 00 00 f0 	addic   r0,r0,240
    92dc:	90 01 00 28 	stw     r0,40(r1)
	char *cp = (char*)p;
    92e0:	80 01 00 24 	lwz     r0,36(r1)
    92e4:	90 01 00 2c 	stw     r0,44(r1)

	vec->iov_len = cp - (char*)vec->iov_base;
    92e8:	81 21 00 2c 	lwz     r9,44(r1)
    92ec:	80 01 00 28 	lwz     r0,40(r1)
    92f0:	7c 0b 03 78 	mr      r11,r0
    92f4:	80 0b 00 00 	lwz     r0,0(r11)
    92f8:	7c 00 48 50 	subf    r0,r0,r9
    92fc:	7c 09 03 78 	mr      r9,r0
    9300:	80 01 00 28 	lwz     r0,40(r1)
    9304:	7c 0b 03 78 	mr      r11,r0
    9308:	91 2b 00 04 	stw     r9,4(r11)

	return vec->iov_len <= PAGE_SIZE;
    930c:	80 01 00 28 	lwz     r0,40(r1)
    9310:	7c 09 03 78 	mr      r9,r0
    9314:	80 09 00 04 	lwz     r0,4(r9)
    9318:	2b 80 10 00 	cmplwi  cr7,r0,4096
    931c:	4f dd e8 42 	crnot   4*cr7+eq,4*cr7+gt
    9320:	7c 00 00 26 	mfcr    r0
    9324:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
	if (!xdr_ressize_check(rqstp, p))
    9328:	2f 80 00 00 	cmpwi   cr7,r0,0
    932c:	40 9e 00 0c 	bne-    cr7,9338 <gss_write_verf+0x1e8>
		return -1;
    9330:	38 00 ff ff 	li      r0,-1
    9334:	48 00 00 08 	b       933c <gss_write_verf+0x1ec>
	return 0;
    9338:	38 00 00 00 	li      r0,0
}
    933c:	7c 03 03 78 	mr      r3,r0
    9340:	80 01 00 94 	lwz     r0,148(r1)
    9344:	7c 08 03 a6 	mtlr    r0
    9348:	38 21 00 90 	addi    r1,r1,144
    934c:	4e 80 00 20 	blr

00009350 <find_gss_auth_domain>:
	u32			pseudoflavor;
};

static struct auth_domain *
find_gss_auth_domain(struct gss_ctx *ctx, u32 svc)
{
    9350:	94 21 ff e0 	stwu    r1,-32(r1)
    9354:	7c 08 02 a6 	mflr    r0
    9358:	90 01 00 24 	stw     r0,36(r1)
    935c:	90 61 00 18 	stw     r3,24(r1)
    9360:	90 81 00 1c 	stw     r4,28(r1)
	char *name;

	name = gss_service_to_auth_domain_name(ctx->mech_type, svc);
    9364:	80 01 00 18 	lwz     r0,24(r1)
    9368:	7c 09 03 78 	mr      r9,r0
    936c:	80 09 00 00 	lwz     r0,0(r9)
    9370:	7c 03 03 78 	mr      r3,r0
    9374:	80 81 00 1c 	lwz     r4,28(r1)
    9378:	48 00 00 01 	bl      9378 <find_gss_auth_domain+0x28>
    937c:	90 61 00 08 	stw     r3,8(r1)
	if (!name)
    9380:	80 01 00 08 	lwz     r0,8(r1)
    9384:	2f 80 00 00 	cmpwi   cr7,r0,0
    9388:	40 9e 00 0c 	bne-    cr7,9394 <find_gss_auth_domain+0x44>
		return NULL;
    938c:	38 00 00 00 	li      r0,0
    9390:	48 00 00 10 	b       93a0 <find_gss_auth_domain+0x50>
	return auth_domain_find(name);
    9394:	80 61 00 08 	lwz     r3,8(r1)
    9398:	48 00 00 01 	bl      9398 <find_gss_auth_domain+0x48>
    939c:	7c 60 1b 78 	mr      r0,r3
}
    93a0:	7c 03 03 78 	mr      r3,r0
    93a4:	80 01 00 24 	lwz     r0,36(r1)
    93a8:	7c 08 03 a6 	mtlr    r0
    93ac:	38 21 00 20 	addi    r1,r1,32
    93b0:	4e 80 00 20 	blr

000093b4 <svcauth_gss_flavor>:

static struct auth_ops svcauthops_gss;

u32 svcauth_gss_flavor(struct auth_domain *dom)
{
    93b4:	94 21 ff e0 	stwu    r1,-32(r1)
    93b8:	90 61 00 18 	stw     r3,24(r1)
	struct gss_domain *gd = container_of(dom, struct gss_domain, h);
    93bc:	80 01 00 18 	lwz     r0,24(r1)
    93c0:	90 01 00 08 	stw     r0,8(r1)
    93c4:	80 01 00 08 	lwz     r0,8(r1)
    93c8:	90 01 00 0c 	stw     r0,12(r1)

	return gd->pseudoflavor;
    93cc:	80 01 00 0c 	lwz     r0,12(r1)
    93d0:	7c 09 03 78 	mr      r9,r0
    93d4:	80 09 00 14 	lwz     r0,20(r9)
}
    93d8:	7c 03 03 78 	mr      r3,r0
    93dc:	38 21 00 20 	addi    r1,r1,32
    93e0:	4e 80 00 20 	blr

000093e4 <svcauth_gss_register_pseudoflavor>:

EXPORT_SYMBOL_GPL(svcauth_gss_flavor);

int
svcauth_gss_register_pseudoflavor(u32 pseudoflavor, char * name)
{
    93e4:	94 21 ff d0 	stwu    r1,-48(r1)
    93e8:	7c 08 02 a6 	mflr    r0
    93ec:	90 01 00 34 	stw     r0,52(r1)
    93f0:	90 61 00 28 	stw     r3,40(r1)
    93f4:	90 81 00 2c 	stw     r4,44(r1)
	struct gss_domain	*new;
	struct auth_domain	*test;
	int			stat = -ENOMEM;
    93f8:	38 00 ff f4 	li      r0,-12
    93fc:	90 01 00 08 	stw     r0,8(r1)
    9400:	38 00 00 18 	li      r0,24
    9404:	90 01 00 14 	stw     r0,20(r1)
    9408:	38 00 00 d0 	li      r0,208
    940c:	90 01 00 18 	stw     r0,24(r1)
    9410:	80 61 00 14 	lwz     r3,20(r1)
    9414:	80 81 00 18 	lwz     r4,24(r1)
    9418:	48 00 00 01 	bl      9418 <svcauth_gss_register_pseudoflavor+0x34>
    941c:	7c 60 1b 78 	mr      r0,r3

	new = kmalloc(sizeof(*new), GFP_KERNEL);
    9420:	90 01 00 0c 	stw     r0,12(r1)
	if (!new)
    9424:	80 01 00 0c 	lwz     r0,12(r1)
    9428:	2f 80 00 00 	cmpwi   cr7,r0,0
    942c:	41 9e 00 c8 	beq-    cr7,94f4 <svcauth_gss_register_pseudoflavor+0x110>
		goto out;
	kref_init(&new->h.ref);
    9430:	80 01 00 0c 	lwz     r0,12(r1)
    9434:	7c 03 03 78 	mr      r3,r0
    9438:	48 00 00 01 	bl      9438 <svcauth_gss_register_pseudoflavor+0x54>
	new->h.name = kstrdup(name, GFP_KERNEL);
    943c:	80 61 00 2c 	lwz     r3,44(r1)
    9440:	38 80 00 d0 	li      r4,208
    9444:	48 00 00 01 	bl      9444 <svcauth_gss_register_pseudoflavor+0x60>
    9448:	7c 69 1b 78 	mr      r9,r3
    944c:	80 01 00 0c 	lwz     r0,12(r1)
    9450:	7c 0b 03 78 	mr      r11,r0
    9454:	91 2b 00 0c 	stw     r9,12(r11)
	if (!new->h.name)
    9458:	80 01 00 0c 	lwz     r0,12(r1)
    945c:	7c 09 03 78 	mr      r9,r0
    9460:	80 09 00 0c 	lwz     r0,12(r9)
    9464:	2f 80 00 00 	cmpwi   cr7,r0,0
    9468:	41 9e 00 7c 	beq-    cr7,94e4 <svcauth_gss_register_pseudoflavor+0x100>
		goto out_free_dom;
	new->h.flavour = &svcauthops_gss;
    946c:	80 01 00 0c 	lwz     r0,12(r1)
    9470:	3d 20 00 00 	lis     r9,0
    9474:	39 29 00 e0 	addi    r9,r9,224
    9478:	7c 0b 03 78 	mr      r11,r0
    947c:	91 2b 00 10 	stw     r9,16(r11)
	new->pseudoflavor = pseudoflavor;
    9480:	80 01 00 0c 	lwz     r0,12(r1)
    9484:	81 21 00 28 	lwz     r9,40(r1)
    9488:	7c 0b 03 78 	mr      r11,r0
    948c:	91 2b 00 14 	stw     r9,20(r11)

	stat = 0;
    9490:	38 00 00 00 	li      r0,0
    9494:	90 01 00 08 	stw     r0,8(r1)
	test = auth_domain_lookup(name, &new->h);
    9498:	80 01 00 0c 	lwz     r0,12(r1)
    949c:	80 61 00 2c 	lwz     r3,44(r1)
    94a0:	7c 04 03 78 	mr      r4,r0
    94a4:	48 00 00 01 	bl      94a4 <svcauth_gss_register_pseudoflavor+0xc0>
    94a8:	90 61 00 10 	stw     r3,16(r1)
	if (test != &new->h) { /* Duplicate registration */
    94ac:	81 21 00 0c 	lwz     r9,12(r1)
    94b0:	80 01 00 10 	lwz     r0,16(r1)
    94b4:	7f 89 00 00 	cmpw    cr7,r9,r0
    94b8:	41 9e 00 24 	beq-    cr7,94dc <svcauth_gss_register_pseudoflavor+0xf8>
		auth_domain_put(test);
    94bc:	80 61 00 10 	lwz     r3,16(r1)
    94c0:	48 00 00 01 	bl      94c0 <svcauth_gss_register_pseudoflavor+0xdc>
		kfree(new->h.name);
    94c4:	80 01 00 0c 	lwz     r0,12(r1)
    94c8:	7c 09 03 78 	mr      r9,r0
    94cc:	80 09 00 0c 	lwz     r0,12(r9)
    94d0:	7c 03 03 78 	mr      r3,r0
    94d4:	48 00 00 01 	bl      94d4 <svcauth_gss_register_pseudoflavor+0xf0>
		goto out_free_dom;
    94d8:	48 00 00 10 	b       94e8 <svcauth_gss_register_pseudoflavor+0x104>
	}
	return 0;
    94dc:	38 00 00 00 	li      r0,0
    94e0:	48 00 00 1c 	b       94fc <svcauth_gss_register_pseudoflavor+0x118>
	if (!new)
		goto out;
	kref_init(&new->h.ref);
	new->h.name = kstrdup(name, GFP_KERNEL);
	if (!new->h.name)
		goto out_free_dom;
    94e4:	60 00 00 00 	nop
		goto out_free_dom;
	}
	return 0;

out_free_dom:
	kfree(new);
    94e8:	80 61 00 0c 	lwz     r3,12(r1)
    94ec:	48 00 00 01 	bl      94ec <svcauth_gss_register_pseudoflavor+0x108>
    94f0:	48 00 00 08 	b       94f8 <svcauth_gss_register_pseudoflavor+0x114>
	struct auth_domain	*test;
	int			stat = -ENOMEM;

	new = kmalloc(sizeof(*new), GFP_KERNEL);
	if (!new)
		goto out;
    94f4:	60 00 00 00 	nop
	return 0;

out_free_dom:
	kfree(new);
out:
	return stat;
    94f8:	80 01 00 08 	lwz     r0,8(r1)
}
    94fc:	7c 03 03 78 	mr      r3,r0
    9500:	80 01 00 34 	lwz     r0,52(r1)
    9504:	7c 08 03 a6 	mtlr    r0
    9508:	38 21 00 30 	addi    r1,r1,48
    950c:	4e 80 00 20 	blr

00009510 <unwrap_integ_data>:
 *	The client shouldn't malloc(), would have to pass in own memory.
 *	The server uses base of head iovec as read pointer, while the
 *	client uses separate pointer. */
static int
unwrap_integ_data(struct xdr_buf *buf, u32 seq, struct gss_ctx *ctx)
{
    9510:	94 21 ff 70 	stwu    r1,-144(r1)
    9514:	7c 08 02 a6 	mflr    r0
    9518:	90 01 00 94 	stw     r0,148(r1)
    951c:	90 61 00 78 	stw     r3,120(r1)
    9520:	90 81 00 7c 	stw     r4,124(r1)
    9524:	90 a1 00 80 	stw     r5,128(r1)
	int stat = -EINVAL;
    9528:	38 00 ff ea 	li      r0,-22
    952c:	90 01 00 08 	stw     r0,8(r1)
	u32 integ_len, maj_stat;
	struct xdr_netobj mic;
	struct xdr_buf integ_buf;

	integ_len = svc_getnl(&buf->head[0]);
    9530:	80 01 00 78 	lwz     r0,120(r1)
    9534:	90 01 00 14 	stw     r0,20(r1)
				+ 2 + 1)

static inline u32 svc_getnl(struct kvec *iov)
{
	__be32 val, *vp;
	vp = iov->iov_base;
    9538:	80 01 00 14 	lwz     r0,20(r1)
    953c:	7c 09 03 78 	mr      r9,r0
    9540:	80 09 00 00 	lwz     r0,0(r9)
    9544:	90 01 00 18 	stw     r0,24(r1)
	val = *vp++;
    9548:	80 01 00 18 	lwz     r0,24(r1)
    954c:	7c 0b 03 78 	mr      r11,r0
    9550:	80 0b 00 00 	lwz     r0,0(r11)
    9554:	90 01 00 1c 	stw     r0,28(r1)
    9558:	80 01 00 18 	lwz     r0,24(r1)
    955c:	30 00 00 04 	addic   r0,r0,4
    9560:	90 01 00 18 	stw     r0,24(r1)
	iov->iov_base = (void*)vp;
    9564:	80 01 00 14 	lwz     r0,20(r1)
    9568:	81 21 00 18 	lwz     r9,24(r1)
    956c:	7c 0b 03 78 	mr      r11,r0
    9570:	91 2b 00 00 	stw     r9,0(r11)
	iov->iov_len -= sizeof(__be32);
    9574:	80 01 00 14 	lwz     r0,20(r1)
    9578:	7c 09 03 78 	mr      r9,r0
    957c:	80 09 00 04 	lwz     r0,4(r9)
    9580:	31 20 ff fc 	addic   r9,r0,-4
    9584:	80 01 00 14 	lwz     r0,20(r1)
    9588:	7c 0b 03 78 	mr      r11,r0
    958c:	91 2b 00 04 	stw     r9,4(r11)
	return ntohl(val);
    9590:	80 01 00 1c 	lwz     r0,28(r1)
    9594:	90 01 00 0c 	stw     r0,12(r1)
	if (integ_len & 3)
    9598:	80 01 00 0c 	lwz     r0,12(r1)
    959c:	54 00 07 be 	clrlwi  r0,r0,30
    95a0:	2f 80 00 00 	cmpwi   cr7,r0,0
    95a4:	41 9e 00 0c 	beq-    cr7,95b0 <unwrap_integ_data+0xa0>
		return stat;
    95a8:	80 01 00 08 	lwz     r0,8(r1)
    95ac:	48 00 02 00 	b       97ac <unwrap_integ_data+0x29c>
	if (integ_len > buf->len)
    95b0:	80 01 00 78 	lwz     r0,120(r1)
    95b4:	7c 0b 03 78 	mr      r11,r0
    95b8:	81 2b 00 24 	lwz     r9,36(r11)
    95bc:	80 01 00 0c 	lwz     r0,12(r1)
    95c0:	7f 89 00 40 	cmplw   cr7,r9,r0
    95c4:	40 9c 00 0c 	bge-    cr7,95d0 <unwrap_integ_data+0xc0>
		return stat;
    95c8:	80 01 00 08 	lwz     r0,8(r1)
    95cc:	48 00 01 e0 	b       97ac <unwrap_integ_data+0x29c>
	if (xdr_buf_subsegment(buf, &integ_buf, 0, integ_len))
    95d0:	38 01 00 4c 	addi    r0,r1,76
    95d4:	80 61 00 78 	lwz     r3,120(r1)
    95d8:	7c 04 03 78 	mr      r4,r0
    95dc:	38 a0 00 00 	li      r5,0
    95e0:	80 c1 00 0c 	lwz     r6,12(r1)
    95e4:	48 00 00 01 	bl      95e4 <unwrap_integ_data+0xd4>
    95e8:	7c 60 1b 78 	mr      r0,r3
    95ec:	2f 80 00 00 	cmpwi   cr7,r0,0
    95f0:	41 9e 00 08 	beq-    cr7,95f8 <unwrap_integ_data+0xe8>
		BUG();
    95f4:	0f e0 00 00 	twi     31,r0,0
	/* copy out mic... */
	if (read_u32_from_xdr_buf(buf, integ_len, &mic.len))
    95f8:	80 01 00 0c 	lwz     r0,12(r1)
    95fc:	81 21 00 78 	lwz     r9,120(r1)
    9600:	91 21 00 20 	stw     r9,32(r1)
    9604:	90 01 00 24 	stw     r0,36(r1)
    9608:	38 01 00 44 	addi    r0,r1,68
    960c:	90 01 00 28 	stw     r0,40(r1)
read_u32_from_xdr_buf(struct xdr_buf *buf, int base, u32 *obj)
{
	__be32  raw;
	int     status;

	status = read_bytes_from_xdr_buf(buf, base, &raw, sizeof(*obj));
    9610:	81 21 00 24 	lwz     r9,36(r1)
    9614:	38 01 00 74 	addi    r0,r1,116
    9618:	80 61 00 20 	lwz     r3,32(r1)
    961c:	7d 24 4b 78 	mr      r4,r9
    9620:	7c 05 03 78 	mr      r5,r0
    9624:	38 c0 00 04 	li      r6,4
    9628:	48 00 00 01 	bl      9628 <unwrap_integ_data+0x118>
    962c:	90 61 00 2c 	stw     r3,44(r1)
	if (status)
    9630:	80 01 00 2c 	lwz     r0,44(r1)
    9634:	2f 80 00 00 	cmpwi   cr7,r0,0
    9638:	41 9e 00 0c 	beq-    cr7,9644 <unwrap_integ_data+0x134>
		return status;
    963c:	80 01 00 2c 	lwz     r0,44(r1)
    9640:	48 00 00 18 	b       9658 <unwrap_integ_data+0x148>
	*obj = ntohl(raw);
    9644:	81 21 00 74 	lwz     r9,116(r1)
    9648:	80 01 00 28 	lwz     r0,40(r1)
    964c:	7c 0b 03 78 	mr      r11,r0
    9650:	91 2b 00 00 	stw     r9,0(r11)
	return 0;
    9654:	38 00 00 00 	li      r0,0
	if (integ_len > buf->len)
		return stat;
	if (xdr_buf_subsegment(buf, &integ_buf, 0, integ_len))
		BUG();
	/* copy out mic... */
	if (read_u32_from_xdr_buf(buf, integ_len, &mic.len))
    9658:	2f 80 00 00 	cmpwi   cr7,r0,0
    965c:	41 9e 00 08 	beq-    cr7,9664 <unwrap_integ_data+0x154>
		BUG();
    9660:	0f e0 00 00 	twi     31,r0,0
	if (mic.len > RPC_MAX_AUTH_SIZE)
    9664:	80 01 00 44 	lwz     r0,68(r1)
    9668:	2b 80 01 90 	cmplwi  cr7,r0,400
    966c:	40 9d 00 0c 	ble-    cr7,9678 <unwrap_integ_data+0x168>
		return stat;
    9670:	80 01 00 08 	lwz     r0,8(r1)
    9674:	48 00 01 38 	b       97ac <unwrap_integ_data+0x29c>
	mic.data = kmalloc(mic.len, GFP_KERNEL);
    9678:	80 01 00 44 	lwz     r0,68(r1)
    967c:	90 01 00 30 	stw     r0,48(r1)
    9680:	38 00 00 d0 	li      r0,208
    9684:	90 01 00 34 	stw     r0,52(r1)
    9688:	80 61 00 30 	lwz     r3,48(r1)
    968c:	80 81 00 34 	lwz     r4,52(r1)
    9690:	48 00 00 01 	bl      9690 <unwrap_integ_data+0x180>
    9694:	7c 60 1b 78 	mr      r0,r3
    9698:	90 01 00 48 	stw     r0,72(r1)
	if (!mic.data)
    969c:	80 01 00 48 	lwz     r0,72(r1)
    96a0:	2f 80 00 00 	cmpwi   cr7,r0,0
    96a4:	40 9e 00 0c 	bne-    cr7,96b0 <unwrap_integ_data+0x1a0>
		return stat;
    96a8:	80 01 00 08 	lwz     r0,8(r1)
    96ac:	48 00 01 00 	b       97ac <unwrap_integ_data+0x29c>
	if (read_bytes_from_xdr_buf(buf, integ_len + 4, mic.data, mic.len))
    96b0:	80 01 00 0c 	lwz     r0,12(r1)
    96b4:	31 60 00 04 	addic   r11,r0,4
    96b8:	81 21 00 48 	lwz     r9,72(r1)
    96bc:	80 01 00 44 	lwz     r0,68(r1)
    96c0:	80 61 00 78 	lwz     r3,120(r1)
    96c4:	7d 64 5b 78 	mr      r4,r11
    96c8:	7d 25 4b 78 	mr      r5,r9
    96cc:	7c 06 03 78 	mr      r6,r0
    96d0:	48 00 00 01 	bl      96d0 <unwrap_integ_data+0x1c0>
    96d4:	7c 60 1b 78 	mr      r0,r3
    96d8:	2f 80 00 00 	cmpwi   cr7,r0,0
    96dc:	40 9e 00 ac 	bne-    cr7,9788 <unwrap_integ_data+0x278>
		goto out;
	maj_stat = gss_verify_mic(ctx, &integ_buf, &mic);
    96e0:	39 21 00 4c 	addi    r9,r1,76
    96e4:	38 01 00 44 	addi    r0,r1,68
    96e8:	80 61 00 80 	lwz     r3,128(r1)
    96ec:	7d 24 4b 78 	mr      r4,r9
    96f0:	7c 05 03 78 	mr      r5,r0
    96f4:	48 00 00 01 	bl      96f4 <unwrap_integ_data+0x1e4>
    96f8:	90 61 00 10 	stw     r3,16(r1)
	if (maj_stat != GSS_S_COMPLETE)
    96fc:	80 01 00 10 	lwz     r0,16(r1)
    9700:	2f 80 00 00 	cmpwi   cr7,r0,0
    9704:	40 9e 00 8c 	bne-    cr7,9790 <unwrap_integ_data+0x280>
		goto out;
	if (svc_getnl(&buf->head[0]) != seq)
    9708:	80 01 00 78 	lwz     r0,120(r1)
    970c:	90 01 00 38 	stw     r0,56(r1)
				+ 2 + 1)

static inline u32 svc_getnl(struct kvec *iov)
{
	__be32 val, *vp;
	vp = iov->iov_base;
    9710:	80 01 00 38 	lwz     r0,56(r1)
    9714:	7c 09 03 78 	mr      r9,r0
    9718:	80 09 00 00 	lwz     r0,0(r9)
    971c:	90 01 00 3c 	stw     r0,60(r1)
	val = *vp++;
    9720:	80 01 00 3c 	lwz     r0,60(r1)
    9724:	7c 0b 03 78 	mr      r11,r0
    9728:	80 0b 00 00 	lwz     r0,0(r11)
    972c:	90 01 00 40 	stw     r0,64(r1)
    9730:	80 01 00 3c 	lwz     r0,60(r1)
    9734:	30 00 00 04 	addic   r0,r0,4
    9738:	90 01 00 3c 	stw     r0,60(r1)
	iov->iov_base = (void*)vp;
    973c:	80 01 00 38 	lwz     r0,56(r1)
    9740:	81 21 00 3c 	lwz     r9,60(r1)
    9744:	7c 0b 03 78 	mr      r11,r0
    9748:	91 2b 00 00 	stw     r9,0(r11)
	iov->iov_len -= sizeof(__be32);
    974c:	80 01 00 38 	lwz     r0,56(r1)
    9750:	7c 09 03 78 	mr      r9,r0
    9754:	80 09 00 04 	lwz     r0,4(r9)
    9758:	31 20 ff fc 	addic   r9,r0,-4
    975c:	80 01 00 38 	lwz     r0,56(r1)
    9760:	7c 0b 03 78 	mr      r11,r0
    9764:	91 2b 00 04 	stw     r9,4(r11)
	return ntohl(val);
    9768:	80 01 00 40 	lwz     r0,64(r1)
    976c:	7c 09 03 78 	mr      r9,r0
    9770:	80 01 00 7c 	lwz     r0,124(r1)
    9774:	7f 89 00 00 	cmpw    cr7,r9,r0
    9778:	40 9e 00 20 	bne-    cr7,9798 <unwrap_integ_data+0x288>
		goto out;
	stat = 0;
    977c:	38 00 00 00 	li      r0,0
    9780:	90 01 00 08 	stw     r0,8(r1)
    9784:	48 00 00 18 	b       979c <unwrap_integ_data+0x28c>
		return stat;
	mic.data = kmalloc(mic.len, GFP_KERNEL);
	if (!mic.data)
		return stat;
	if (read_bytes_from_xdr_buf(buf, integ_len + 4, mic.data, mic.len))
		goto out;
    9788:	60 00 00 00 	nop
    978c:	48 00 00 10 	b       979c <unwrap_integ_data+0x28c>
	maj_stat = gss_verify_mic(ctx, &integ_buf, &mic);
	if (maj_stat != GSS_S_COMPLETE)
		goto out;
    9790:	60 00 00 00 	nop
    9794:	48 00 00 08 	b       979c <unwrap_integ_data+0x28c>
	if (svc_getnl(&buf->head[0]) != seq)
		goto out;
    9798:	60 00 00 00 	nop
	stat = 0;
out:
	kfree(mic.data);
    979c:	80 01 00 48 	lwz     r0,72(r1)
    97a0:	7c 03 03 78 	mr      r3,r0
    97a4:	48 00 00 01 	bl      97a4 <unwrap_integ_data+0x294>
	return stat;
    97a8:	80 01 00 08 	lwz     r0,8(r1)
}
    97ac:	7c 03 03 78 	mr      r3,r0
    97b0:	80 01 00 94 	lwz     r0,148(r1)
    97b4:	7c 08 03 a6 	mtlr    r0
    97b8:	38 21 00 90 	addi    r1,r1,144
    97bc:	4e 80 00 20 	blr

000097c0 <fix_priv_head>:
	return buf->head[0].iov_len + buf->page_len + buf->tail[0].iov_len;
}

static void
fix_priv_head(struct xdr_buf *buf, int pad)
{
    97c0:	94 21 ff f0 	stwu    r1,-16(r1)
    97c4:	90 61 00 08 	stw     r3,8(r1)
    97c8:	90 81 00 0c 	stw     r4,12(r1)
	if (buf->page_len == 0) {
    97cc:	80 01 00 08 	lwz     r0,8(r1)
    97d0:	7c 09 03 78 	mr      r9,r0
    97d4:	80 09 00 18 	lwz     r0,24(r9)
    97d8:	2f 80 00 00 	cmpwi   cr7,r0,0
    97dc:	40 9e 00 24 	bne-    cr7,9800 <fix_priv_head+0x40>
		/* We need to adjust head and buf->len in tandem in this
		 * case to make svc_defer() work--it finds the original
		 * buffer start using buf->len - buf->head[0].iov_len. */
		buf->head[0].iov_len -= pad;
    97e0:	80 01 00 08 	lwz     r0,8(r1)
    97e4:	7c 0b 03 78 	mr      r11,r0
    97e8:	81 2b 00 04 	lwz     r9,4(r11)
    97ec:	80 01 00 0c 	lwz     r0,12(r1)
    97f0:	7d 20 48 50 	subf    r9,r0,r9
    97f4:	80 01 00 08 	lwz     r0,8(r1)
    97f8:	7c 0b 03 78 	mr      r11,r0
    97fc:	91 2b 00 04 	stw     r9,4(r11)
	}
}
    9800:	38 21 00 10 	addi    r1,r1,16
    9804:	4e 80 00 20 	blr

00009808 <unwrap_priv_data>:

static int
unwrap_priv_data(struct svc_rqst *rqstp, struct xdr_buf *buf, u32 seq, struct gss_ctx *ctx)
{
    9808:	94 21 ff a0 	stwu    r1,-96(r1)
    980c:	7c 08 02 a6 	mflr    r0
    9810:	90 01 00 64 	stw     r0,100(r1)
    9814:	90 61 00 48 	stw     r3,72(r1)
    9818:	90 81 00 4c 	stw     r4,76(r1)
    981c:	90 a1 00 50 	stw     r5,80(r1)
    9820:	90 c1 00 54 	stw     r6,84(r1)
	u32 priv_len, maj_stat;
	int pad, saved_len, remaining_len, offset;

	rqstp->rq_splice_ok = 0;
    9824:	80 01 00 48 	lwz     r0,72(r1)
    9828:	39 20 00 00 	li      r9,0
    982c:	7c 0b 03 78 	mr      r11,r0
    9830:	91 2b 0d 94 	stw     r9,3476(r11)

	priv_len = svc_getnl(&buf->head[0]);
    9834:	80 01 00 4c 	lwz     r0,76(r1)
    9838:	90 01 00 20 	stw     r0,32(r1)
				+ 2 + 1)

static inline u32 svc_getnl(struct kvec *iov)
{
	__be32 val, *vp;
	vp = iov->iov_base;
    983c:	80 01 00 20 	lwz     r0,32(r1)
    9840:	7c 09 03 78 	mr      r9,r0
    9844:	80 09 00 00 	lwz     r0,0(r9)
    9848:	90 01 00 24 	stw     r0,36(r1)
	val = *vp++;
    984c:	80 01 00 24 	lwz     r0,36(r1)
    9850:	7c 0b 03 78 	mr      r11,r0
    9854:	80 0b 00 00 	lwz     r0,0(r11)
    9858:	90 01 00 28 	stw     r0,40(r1)
    985c:	80 01 00 24 	lwz     r0,36(r1)
    9860:	30 00 00 04 	addic   r0,r0,4
    9864:	90 01 00 24 	stw     r0,36(r1)
	iov->iov_base = (void*)vp;
    9868:	80 01 00 20 	lwz     r0,32(r1)
    986c:	81 21 00 24 	lwz     r9,36(r1)
    9870:	7c 0b 03 78 	mr      r11,r0
    9874:	91 2b 00 00 	stw     r9,0(r11)
	iov->iov_len -= sizeof(__be32);
    9878:	80 01 00 20 	lwz     r0,32(r1)
    987c:	7c 09 03 78 	mr      r9,r0
    9880:	80 09 00 04 	lwz     r0,4(r9)
    9884:	31 20 ff fc 	addic   r9,r0,-4
    9888:	80 01 00 20 	lwz     r0,32(r1)
    988c:	7c 0b 03 78 	mr      r11,r0
    9890:	91 2b 00 04 	stw     r9,4(r11)
	return ntohl(val);
    9894:	80 01 00 28 	lwz     r0,40(r1)
    9898:	90 01 00 08 	stw     r0,8(r1)
	if (rqstp->rq_deferred) {
    989c:	80 01 00 48 	lwz     r0,72(r1)
    98a0:	7c 09 03 78 	mr      r9,r0
    98a4:	80 09 00 bc 	lwz     r0,188(r9)
    98a8:	2f 80 00 00 	cmpwi   cr7,r0,0
    98ac:	40 9e 01 6c 	bne-    cr7,9a18 <unwrap_priv_data+0x210>
		/* Already decrypted last time through! The sequence number
		 * check at out_seq is unnecessary but harmless: */
		goto out_seq;
    98b0:	80 01 00 4c 	lwz     r0,76(r1)
    98b4:	90 01 00 2c 	stw     r0,44(r1)
}

static inline int
total_buf_len(struct xdr_buf *buf)
{
	return buf->head[0].iov_len + buf->page_len + buf->tail[0].iov_len;
    98b8:	80 01 00 2c 	lwz     r0,44(r1)
    98bc:	7c 0b 03 78 	mr      r11,r0
    98c0:	81 2b 00 04 	lwz     r9,4(r11)
    98c4:	80 01 00 2c 	lwz     r0,44(r1)
    98c8:	7c 0b 03 78 	mr      r11,r0
    98cc:	80 0b 00 18 	lwz     r0,24(r11)
    98d0:	7d 29 02 14 	add     r9,r9,r0
    98d4:	80 01 00 2c 	lwz     r0,44(r1)
    98d8:	7c 0b 03 78 	mr      r11,r0
    98dc:	80 0b 00 0c 	lwz     r0,12(r11)
    98e0:	7c 09 02 14 	add     r0,r9,r0
		goto out_seq;
	}
	/* buf->len is the number of bytes from the original start of the
	 * request to the end, where head[0].iov_len is just the bytes
	 * not yet read from the head, so these two values are different: */
	remaining_len = total_buf_len(buf);
    98e4:	90 01 00 0c 	stw     r0,12(r1)
	if (priv_len > remaining_len)
    98e8:	81 21 00 0c 	lwz     r9,12(r1)
    98ec:	80 01 00 08 	lwz     r0,8(r1)
    98f0:	7f 89 00 40 	cmplw   cr7,r9,r0
    98f4:	40 9c 00 0c 	bge-    cr7,9900 <unwrap_priv_data+0xf8>
		return -EINVAL;
    98f8:	38 00 ff ea 	li      r0,-22
    98fc:	48 00 01 a0 	b       9a9c <unwrap_priv_data+0x294>
	pad = remaining_len - priv_len;
    9900:	81 21 00 0c 	lwz     r9,12(r1)
    9904:	80 01 00 08 	lwz     r0,8(r1)
    9908:	7c 00 48 50 	subf    r0,r0,r9
    990c:	90 01 00 10 	stw     r0,16(r1)
	buf->len -= pad;
    9910:	80 01 00 4c 	lwz     r0,76(r1)
    9914:	7c 0b 03 78 	mr      r11,r0
    9918:	81 2b 00 24 	lwz     r9,36(r11)
    991c:	80 01 00 10 	lwz     r0,16(r1)
    9920:	7d 20 48 50 	subf    r9,r0,r9
    9924:	80 01 00 4c 	lwz     r0,76(r1)
    9928:	7c 0b 03 78 	mr      r11,r0
    992c:	91 2b 00 24 	stw     r9,36(r11)
	fix_priv_head(buf, pad);
    9930:	80 61 00 4c 	lwz     r3,76(r1)
    9934:	80 81 00 10 	lwz     r4,16(r1)
    9938:	4b ff fe 89 	bl      97c0 <fix_priv_head>

	/* Maybe it would be better to give gss_unwrap a length parameter: */
	saved_len = buf->len;
    993c:	80 01 00 4c 	lwz     r0,76(r1)
    9940:	7c 09 03 78 	mr      r9,r0
    9944:	80 09 00 24 	lwz     r0,36(r9)
    9948:	90 01 00 14 	stw     r0,20(r1)
	buf->len = priv_len;
    994c:	80 01 00 4c 	lwz     r0,76(r1)
    9950:	81 21 00 08 	lwz     r9,8(r1)
    9954:	7c 0b 03 78 	mr      r11,r0
    9958:	91 2b 00 24 	stw     r9,36(r11)
	maj_stat = gss_unwrap(ctx, 0, buf);
    995c:	80 61 00 54 	lwz     r3,84(r1)
    9960:	38 80 00 00 	li      r4,0
    9964:	80 a1 00 4c 	lwz     r5,76(r1)
    9968:	48 00 00 01 	bl      9968 <unwrap_priv_data+0x160>
    996c:	90 61 00 18 	stw     r3,24(r1)
	pad = priv_len - buf->len;
    9970:	80 01 00 4c 	lwz     r0,76(r1)
    9974:	7c 09 03 78 	mr      r9,r0
    9978:	80 09 00 24 	lwz     r0,36(r9)
    997c:	81 21 00 08 	lwz     r9,8(r1)
    9980:	7c 00 48 50 	subf    r0,r0,r9
    9984:	90 01 00 10 	stw     r0,16(r1)
	buf->len = saved_len;
    9988:	81 21 00 14 	lwz     r9,20(r1)
    998c:	80 01 00 4c 	lwz     r0,76(r1)
    9990:	7c 0b 03 78 	mr      r11,r0
    9994:	91 2b 00 24 	stw     r9,36(r11)
	buf->len -= pad;
    9998:	80 01 00 4c 	lwz     r0,76(r1)
    999c:	7c 0b 03 78 	mr      r11,r0
    99a0:	81 2b 00 24 	lwz     r9,36(r11)
    99a4:	80 01 00 10 	lwz     r0,16(r1)
    99a8:	7d 20 48 50 	subf    r9,r0,r9
    99ac:	80 01 00 4c 	lwz     r0,76(r1)
    99b0:	7c 0b 03 78 	mr      r11,r0
    99b4:	91 2b 00 24 	stw     r9,36(r11)
	 * In the krb5p case, at least, the data ends up offset, so we need to
	 * move it around. */
	/* XXX: This is very inefficient.  It would be better to either do
	 * this while we encrypt, or maybe in the receive code, if we can peak
	 * ahead and work out the service and mechanism there. */
	offset = buf->head[0].iov_len % 4;
    99b8:	80 01 00 4c 	lwz     r0,76(r1)
    99bc:	7c 09 03 78 	mr      r9,r0
    99c0:	80 09 00 04 	lwz     r0,4(r9)
    99c4:	54 00 07 be 	clrlwi  r0,r0,30
    99c8:	90 01 00 1c 	stw     r0,28(r1)
	if (offset) {
    99cc:	80 01 00 1c 	lwz     r0,28(r1)
    99d0:	2f 80 00 00 	cmpwi   cr7,r0,0
    99d4:	41 9e 00 30 	beq-    cr7,9a04 <unwrap_priv_data+0x1fc>
		buf->buflen = RPCSVC_MAXPAYLOAD;
    99d8:	80 01 00 4c 	lwz     r0,76(r1)
    99dc:	3d 20 00 10 	lis     r9,16
    99e0:	7c 0b 03 78 	mr      r11,r0
    99e4:	91 2b 00 20 	stw     r9,32(r11)
		xdr_shift_buf(buf, offset);
    99e8:	80 01 00 1c 	lwz     r0,28(r1)
    99ec:	80 61 00 4c 	lwz     r3,76(r1)
    99f0:	7c 04 03 78 	mr      r4,r0
    99f4:	48 00 00 01 	bl      99f4 <unwrap_priv_data+0x1ec>
		fix_priv_head(buf, pad);
    99f8:	80 61 00 4c 	lwz     r3,76(r1)
    99fc:	80 81 00 10 	lwz     r4,16(r1)
    9a00:	4b ff fd c1 	bl      97c0 <fix_priv_head>
	}
	if (maj_stat != GSS_S_COMPLETE)
    9a04:	80 01 00 18 	lwz     r0,24(r1)
    9a08:	2f 80 00 00 	cmpwi   cr7,r0,0
    9a0c:	41 9e 00 10 	beq-    cr7,9a1c <unwrap_priv_data+0x214>
		return -EINVAL;
    9a10:	38 00 ff ea 	li      r0,-22
    9a14:	48 00 00 88 	b       9a9c <unwrap_priv_data+0x294>

	priv_len = svc_getnl(&buf->head[0]);
	if (rqstp->rq_deferred) {
		/* Already decrypted last time through! The sequence number
		 * check at out_seq is unnecessary but harmless: */
		goto out_seq;
    9a18:	60 00 00 00 	nop
		fix_priv_head(buf, pad);
	}
	if (maj_stat != GSS_S_COMPLETE)
		return -EINVAL;
out_seq:
	if (svc_getnl(&buf->head[0]) != seq)
    9a1c:	80 01 00 4c 	lwz     r0,76(r1)
    9a20:	90 01 00 30 	stw     r0,48(r1)
				+ 2 + 1)

static inline u32 svc_getnl(struct kvec *iov)
{
	__be32 val, *vp;
	vp = iov->iov_base;
    9a24:	80 01 00 30 	lwz     r0,48(r1)
    9a28:	7c 09 03 78 	mr      r9,r0
    9a2c:	80 09 00 00 	lwz     r0,0(r9)
    9a30:	90 01 00 34 	stw     r0,52(r1)
	val = *vp++;
    9a34:	80 01 00 34 	lwz     r0,52(r1)
    9a38:	7c 0b 03 78 	mr      r11,r0
    9a3c:	80 0b 00 00 	lwz     r0,0(r11)
    9a40:	90 01 00 38 	stw     r0,56(r1)
    9a44:	80 01 00 34 	lwz     r0,52(r1)
    9a48:	30 00 00 04 	addic   r0,r0,4
    9a4c:	90 01 00 34 	stw     r0,52(r1)
	iov->iov_base = (void*)vp;
    9a50:	80 01 00 30 	lwz     r0,48(r1)
    9a54:	81 21 00 34 	lwz     r9,52(r1)
    9a58:	7c 0b 03 78 	mr      r11,r0
    9a5c:	91 2b 00 00 	stw     r9,0(r11)
	iov->iov_len -= sizeof(__be32);
    9a60:	80 01 00 30 	lwz     r0,48(r1)
    9a64:	7c 09 03 78 	mr      r9,r0
    9a68:	80 09 00 04 	lwz     r0,4(r9)
    9a6c:	31 20 ff fc 	addic   r9,r0,-4
    9a70:	80 01 00 30 	lwz     r0,48(r1)
    9a74:	7c 0b 03 78 	mr      r11,r0
    9a78:	91 2b 00 04 	stw     r9,4(r11)
	return ntohl(val);
    9a7c:	80 01 00 38 	lwz     r0,56(r1)
    9a80:	7c 09 03 78 	mr      r9,r0
    9a84:	80 01 00 50 	lwz     r0,80(r1)
    9a88:	7f 89 00 00 	cmpw    cr7,r9,r0
    9a8c:	41 9e 00 0c 	beq-    cr7,9a98 <unwrap_priv_data+0x290>
		return -EINVAL;
    9a90:	38 00 ff ea 	li      r0,-22
    9a94:	48 00 00 08 	b       9a9c <unwrap_priv_data+0x294>
	return 0;
    9a98:	38 00 00 00 	li      r0,0
}
    9a9c:	7c 03 03 78 	mr      r3,r0
    9aa0:	80 01 00 64 	lwz     r0,100(r1)
    9aa4:	7c 08 03 a6 	mtlr    r0
    9aa8:	38 21 00 60 	addi    r1,r1,96
    9aac:	4e 80 00 20 	blr

00009ab0 <svc_gss_principal>:
	__be32				*verf_start;
	struct rsc			*rsci;
};

char *svc_gss_principal(struct svc_rqst *rqstp)
{
    9ab0:	94 21 ff e0 	stwu    r1,-32(r1)
    9ab4:	90 61 00 18 	stw     r3,24(r1)
	struct gss_svc_data *gd = (struct gss_svc_data *)rqstp->rq_auth_data;
    9ab8:	80 01 00 18 	lwz     r0,24(r1)
    9abc:	7c 09 03 78 	mr      r9,r0
    9ac0:	80 09 0d 74 	lwz     r0,3444(r9)
    9ac4:	90 01 00 08 	stw     r0,8(r1)

	if (gd && gd->rsci)
    9ac8:	80 01 00 08 	lwz     r0,8(r1)
    9acc:	2f 80 00 00 	cmpwi   cr7,r0,0
    9ad0:	41 9e 00 30 	beq-    cr7,9b00 <svc_gss_principal+0x50>
    9ad4:	80 01 00 08 	lwz     r0,8(r1)
    9ad8:	7c 09 03 78 	mr      r9,r0
    9adc:	80 09 00 1c 	lwz     r0,28(r9)
    9ae0:	2f 80 00 00 	cmpwi   cr7,r0,0
    9ae4:	41 9e 00 1c 	beq-    cr7,9b00 <svc_gss_principal+0x50>
		return gd->rsci->client_name;
    9ae8:	80 01 00 08 	lwz     r0,8(r1)
    9aec:	7c 09 03 78 	mr      r9,r0
    9af0:	80 09 00 1c 	lwz     r0,28(r9)
    9af4:	7c 09 03 78 	mr      r9,r0
    9af8:	80 09 00 40 	lwz     r0,64(r9)
    9afc:	48 00 00 08 	b       9b04 <svc_gss_principal+0x54>
	return NULL;
    9b00:	38 00 00 00 	li      r0,0
}
    9b04:	7c 03 03 78 	mr      r3,r0
    9b08:	38 21 00 20 	addi    r1,r1,32
    9b0c:	4e 80 00 20 	blr

00009b10 <svcauth_gss_set_client>:
EXPORT_SYMBOL_GPL(svc_gss_principal);

static int
svcauth_gss_set_client(struct svc_rqst *rqstp)
{
    9b10:	94 21 ff e0 	stwu    r1,-32(r1)
    9b14:	7c 08 02 a6 	mflr    r0
    9b18:	90 01 00 24 	stw     r0,36(r1)
    9b1c:	90 61 00 18 	stw     r3,24(r1)
	struct gss_svc_data *svcdata = rqstp->rq_auth_data;
    9b20:	80 01 00 18 	lwz     r0,24(r1)
    9b24:	7c 09 03 78 	mr      r9,r0
    9b28:	80 09 0d 74 	lwz     r0,3444(r9)
    9b2c:	90 01 00 08 	stw     r0,8(r1)
	struct rsc *rsci = svcdata->rsci;
    9b30:	80 01 00 08 	lwz     r0,8(r1)
    9b34:	7c 0b 03 78 	mr      r11,r0
    9b38:	80 0b 00 1c 	lwz     r0,28(r11)
    9b3c:	90 01 00 0c 	stw     r0,12(r1)
	struct rpc_gss_wire_cred *gc = &svcdata->clcred;
    9b40:	80 01 00 08 	lwz     r0,8(r1)
    9b44:	90 01 00 10 	stw     r0,16(r1)
	 * 	export gss/krb5(rw)
	 * The latter is deprecated; but for backwards compatibility reasons
	 * the nfsd code will still fall back on trying it if the former
	 * doesn't work; so we try to make both available to nfsd, below.
	 */
	rqstp->rq_gssclient = find_gss_auth_domain(rsci->mechctx, gc->gc_svc);
    9b48:	80 01 00 0c 	lwz     r0,12(r1)
    9b4c:	7c 0b 03 78 	mr      r11,r0
    9b50:	81 2b 00 3c 	lwz     r9,60(r11)
    9b54:	80 01 00 10 	lwz     r0,16(r1)
    9b58:	7c 0b 03 78 	mr      r11,r0
    9b5c:	80 0b 00 0c 	lwz     r0,12(r11)
    9b60:	7d 23 4b 78 	mr      r3,r9
    9b64:	7c 04 03 78 	mr      r4,r0
    9b68:	4b ff f7 e9 	bl      9350 <find_gss_auth_domain>
    9b6c:	7c 69 1b 78 	mr      r9,r3
    9b70:	80 01 00 18 	lwz     r0,24(r1)
    9b74:	7c 0b 03 78 	mr      r11,r0
    9b78:	91 2b 0d 8c 	stw     r9,3468(r11)
	if (rqstp->rq_gssclient == NULL)
    9b7c:	80 01 00 18 	lwz     r0,24(r1)
    9b80:	7c 09 03 78 	mr      r9,r0
    9b84:	80 09 0d 8c 	lwz     r0,3468(r9)
    9b88:	2f 80 00 00 	cmpwi   cr7,r0,0
    9b8c:	40 9e 00 0c 	bne-    cr7,9b98 <svcauth_gss_set_client+0x88>
		return SVC_DENIED;
    9b90:	38 00 00 08 	li      r0,8
    9b94:	48 00 00 34 	b       9bc8 <svcauth_gss_set_client+0xb8>
	stat = svcauth_unix_set_client(rqstp);
    9b98:	80 61 00 18 	lwz     r3,24(r1)
    9b9c:	48 00 00 01 	bl      9b9c <svcauth_gss_set_client+0x8c>
    9ba0:	90 61 00 14 	stw     r3,20(r1)
	if (stat == SVC_DROP || stat == SVC_CLOSE)
    9ba4:	80 01 00 14 	lwz     r0,20(r1)
    9ba8:	2f 80 00 06 	cmpwi   cr7,r0,6
    9bac:	41 9e 00 10 	beq-    cr7,9bbc <svcauth_gss_set_client+0xac>
    9bb0:	80 01 00 14 	lwz     r0,20(r1)
    9bb4:	2f 80 00 07 	cmpwi   cr7,r0,7
    9bb8:	40 9e 00 0c 	bne-    cr7,9bc4 <svcauth_gss_set_client+0xb4>
		return stat;
    9bbc:	80 01 00 14 	lwz     r0,20(r1)
    9bc0:	48 00 00 08 	b       9bc8 <svcauth_gss_set_client+0xb8>
	return SVC_OK;
    9bc4:	38 00 00 05 	li      r0,5
}
    9bc8:	7c 03 03 78 	mr      r3,r0
    9bcc:	80 01 00 24 	lwz     r0,36(r1)
    9bd0:	7c 08 03 a6 	mtlr    r0
    9bd4:	38 21 00 20 	addi    r1,r1,32
    9bd8:	4e 80 00 20 	blr

00009bdc <svcauth_gss_handle_init>:
 * the upcall results are available, write the verifier and result.
 * Otherwise, drop the request pending an answer to the upcall.
 */
static int svcauth_gss_handle_init(struct svc_rqst *rqstp,
			struct rpc_gss_wire_cred *gc, __be32 *authp)
{
    9bdc:	94 21 fe a0 	stwu    r1,-352(r1)
    9be0:	7c 08 02 a6 	mflr    r0
    9be4:	90 01 01 64 	stw     r0,356(r1)
    9be8:	93 e1 01 5c 	stw     r31,348(r1)
    9bec:	90 61 01 48 	stw     r3,328(r1)
    9bf0:	90 81 01 4c 	stw     r4,332(r1)
    9bf4:	90 a1 01 50 	stw     r5,336(r1)
	struct kvec *argv = &rqstp->rq_arg.head[0];
    9bf8:	80 01 01 48 	lwz     r0,328(r1)
    9bfc:	30 00 00 c8 	addic   r0,r0,200
    9c00:	90 01 00 0c 	stw     r0,12(r1)
	struct kvec *resv = &rqstp->rq_res.head[0];
    9c04:	80 01 01 48 	lwz     r0,328(r1)
    9c08:	30 00 00 f0 	addic   r0,r0,240
    9c0c:	90 01 00 10 	stw     r0,16(r1)
	struct xdr_netobj tmpobj;
	struct rsi *rsip, rsikey;
	int ret;

	/* Read the verifier; should be NULL: */
	*authp = rpc_autherr_badverf;
    9c10:	80 01 01 50 	lwz     r0,336(r1)
    9c14:	39 20 00 03 	li      r9,3
    9c18:	7c 0a 03 78 	mr      r10,r0
    9c1c:	91 2a 00 00 	stw     r9,0(r10)
	if (argv->iov_len < 2 * 4)
    9c20:	80 01 00 0c 	lwz     r0,12(r1)
    9c24:	7c 0b 03 78 	mr      r11,r0
    9c28:	80 0b 00 04 	lwz     r0,4(r11)
    9c2c:	2b 80 00 07 	cmplwi  cr7,r0,7
    9c30:	41 9d 00 0c 	bgt-    cr7,9c3c <svcauth_gss_handle_init+0x60>
		return SVC_DENIED;
    9c34:	38 00 00 08 	li      r0,8
    9c38:	48 00 0a a8 	b       a6e0 <svcauth_gss_handle_init+0xb04>
    9c3c:	80 01 00 0c 	lwz     r0,12(r1)
    9c40:	90 01 00 18 	stw     r0,24(r1)
				+ 2 + 1)

static inline u32 svc_getnl(struct kvec *iov)
{
	__be32 val, *vp;
	vp = iov->iov_base;
    9c44:	80 01 00 18 	lwz     r0,24(r1)
    9c48:	7c 09 03 78 	mr      r9,r0
    9c4c:	80 09 00 00 	lwz     r0,0(r9)
    9c50:	90 01 00 1c 	stw     r0,28(r1)
	val = *vp++;
    9c54:	80 01 00 1c 	lwz     r0,28(r1)
    9c58:	7c 0a 03 78 	mr      r10,r0
    9c5c:	80 0a 00 00 	lwz     r0,0(r10)
    9c60:	90 01 00 20 	stw     r0,32(r1)
    9c64:	80 01 00 1c 	lwz     r0,28(r1)
    9c68:	30 00 00 04 	addic   r0,r0,4
    9c6c:	90 01 00 1c 	stw     r0,28(r1)
	iov->iov_base = (void*)vp;
    9c70:	80 01 00 18 	lwz     r0,24(r1)
    9c74:	81 21 00 1c 	lwz     r9,28(r1)
    9c78:	7c 0b 03 78 	mr      r11,r0
    9c7c:	91 2b 00 00 	stw     r9,0(r11)
	iov->iov_len -= sizeof(__be32);
    9c80:	80 01 00 18 	lwz     r0,24(r1)
    9c84:	7c 09 03 78 	mr      r9,r0
    9c88:	80 09 00 04 	lwz     r0,4(r9)
    9c8c:	31 20 ff fc 	addic   r9,r0,-4
    9c90:	80 01 00 18 	lwz     r0,24(r1)
    9c94:	7c 0a 03 78 	mr      r10,r0
    9c98:	91 2a 00 04 	stw     r9,4(r10)
	return ntohl(val);
    9c9c:	80 01 00 20 	lwz     r0,32(r1)
	if (svc_getnl(argv) != RPC_AUTH_NULL)
    9ca0:	2f 80 00 00 	cmpwi   cr7,r0,0
    9ca4:	41 9e 00 0c 	beq-    cr7,9cb0 <svcauth_gss_handle_init+0xd4>
		return SVC_DENIED;
    9ca8:	38 00 00 08 	li      r0,8
    9cac:	48 00 0a 34 	b       a6e0 <svcauth_gss_handle_init+0xb04>
    9cb0:	80 01 00 0c 	lwz     r0,12(r1)
    9cb4:	90 01 00 24 	stw     r0,36(r1)
				+ 2 + 1)

static inline u32 svc_getnl(struct kvec *iov)
{
	__be32 val, *vp;
	vp = iov->iov_base;
    9cb8:	80 01 00 24 	lwz     r0,36(r1)
    9cbc:	7c 0b 03 78 	mr      r11,r0
    9cc0:	80 0b 00 00 	lwz     r0,0(r11)
    9cc4:	90 01 00 28 	stw     r0,40(r1)
	val = *vp++;
    9cc8:	80 01 00 28 	lwz     r0,40(r1)
    9ccc:	7c 09 03 78 	mr      r9,r0
    9cd0:	80 09 00 00 	lwz     r0,0(r9)
    9cd4:	90 01 00 2c 	stw     r0,44(r1)
    9cd8:	80 01 00 28 	lwz     r0,40(r1)
    9cdc:	30 00 00 04 	addic   r0,r0,4
    9ce0:	90 01 00 28 	stw     r0,40(r1)
	iov->iov_base = (void*)vp;
    9ce4:	80 01 00 24 	lwz     r0,36(r1)
    9ce8:	81 21 00 28 	lwz     r9,40(r1)
    9cec:	7c 0a 03 78 	mr      r10,r0
    9cf0:	91 2a 00 00 	stw     r9,0(r10)
	iov->iov_len -= sizeof(__be32);
    9cf4:	80 01 00 24 	lwz     r0,36(r1)
    9cf8:	7c 0b 03 78 	mr      r11,r0
    9cfc:	80 0b 00 04 	lwz     r0,4(r11)
    9d00:	31 20 ff fc 	addic   r9,r0,-4
    9d04:	80 01 00 24 	lwz     r0,36(r1)
    9d08:	7c 0a 03 78 	mr      r10,r0
    9d0c:	91 2a 00 04 	stw     r9,4(r10)
	return ntohl(val);
    9d10:	80 01 00 2c 	lwz     r0,44(r1)
	if (svc_getnl(argv) != 0)
    9d14:	2f 80 00 00 	cmpwi   cr7,r0,0
    9d18:	41 9e 00 0c 	beq-    cr7,9d24 <svcauth_gss_handle_init+0x148>
		return SVC_DENIED;
    9d1c:	38 00 00 08 	li      r0,8
    9d20:	48 00 09 c0 	b       a6e0 <svcauth_gss_handle_init+0xb04>

	/* Martial context handle and token for upcall: */
	*authp = rpc_autherr_badcred;
    9d24:	80 01 01 50 	lwz     r0,336(r1)
    9d28:	39 20 00 01 	li      r9,1
    9d2c:	7c 0b 03 78 	mr      r11,r0
    9d30:	91 2b 00 00 	stw     r9,0(r11)
	if (gc->gc_proc == RPC_GSS_PROC_INIT && gc->gc_ctx.len != 0)
    9d34:	80 01 01 4c 	lwz     r0,332(r1)
    9d38:	7c 09 03 78 	mr      r9,r0
    9d3c:	80 09 00 04 	lwz     r0,4(r9)
    9d40:	2f 80 00 01 	cmpwi   cr7,r0,1
    9d44:	40 9e 00 20 	bne-    cr7,9d64 <svcauth_gss_handle_init+0x188>
    9d48:	80 01 01 4c 	lwz     r0,332(r1)
    9d4c:	7c 0a 03 78 	mr      r10,r0
    9d50:	80 0a 00 10 	lwz     r0,16(r10)
    9d54:	2f 80 00 00 	cmpwi   cr7,r0,0
    9d58:	41 9e 00 0c 	beq-    cr7,9d64 <svcauth_gss_handle_init+0x188>
		return SVC_DENIED;
    9d5c:	38 00 00 08 	li      r0,8
    9d60:	48 00 09 80 	b       a6e0 <svcauth_gss_handle_init+0xb04>
	memset(&rsikey, 0, sizeof(rsikey));
    9d64:	38 01 01 04 	addi    r0,r1,260
    9d68:	7c 09 03 78 	mr      r9,r0
    9d6c:	38 00 00 3c 	li      r0,60
    9d70:	7d 23 4b 78 	mr      r3,r9
    9d74:	38 80 00 00 	li      r4,0
    9d78:	7c 05 03 78 	mr      r5,r0
    9d7c:	48 00 00 01 	bl      9d7c <svcauth_gss_handle_init+0x1a0>
	if (dup_netobj(&rsikey.in_handle, &gc->gc_ctx))
    9d80:	80 01 01 4c 	lwz     r0,332(r1)
    9d84:	30 00 00 10 	addic   r0,r0,16
    9d88:	39 21 01 04 	addi    r9,r1,260
    9d8c:	39 29 00 14 	addi    r9,r9,20
    9d90:	91 21 00 30 	stw     r9,48(r1)
    9d94:	90 01 00 34 	stw     r0,52(r1)
	return 0;
}

static inline int dup_netobj(struct xdr_netobj *dst, struct xdr_netobj *src)
{
	return dup_to_netobj(dst, src->data, src->len);
    9d98:	80 01 00 34 	lwz     r0,52(r1)
    9d9c:	7c 0b 03 78 	mr      r11,r0
    9da0:	81 2b 00 04 	lwz     r9,4(r11)
    9da4:	80 01 00 34 	lwz     r0,52(r1)
    9da8:	7c 0a 03 78 	mr      r10,r0
    9dac:	80 0a 00 00 	lwz     r0,0(r10)
    9db0:	80 61 00 30 	lwz     r3,48(r1)
    9db4:	7d 24 4b 78 	mr      r4,r9
    9db8:	7c 05 03 78 	mr      r5,r0
    9dbc:	4b ff cd f1 	bl      6bac <dup_to_netobj>
    9dc0:	7c 60 1b 78 	mr      r0,r3
	/* Martial context handle and token for upcall: */
	*authp = rpc_autherr_badcred;
	if (gc->gc_proc == RPC_GSS_PROC_INIT && gc->gc_ctx.len != 0)
		return SVC_DENIED;
	memset(&rsikey, 0, sizeof(rsikey));
	if (dup_netobj(&rsikey.in_handle, &gc->gc_ctx))
    9dc4:	2f 80 00 00 	cmpwi   cr7,r0,0
    9dc8:	41 9e 00 0c 	beq-    cr7,9dd4 <svcauth_gss_handle_init+0x1f8>
		return SVC_CLOSE;
    9dcc:	38 00 00 07 	li      r0,7
    9dd0:	48 00 09 10 	b       a6e0 <svcauth_gss_handle_init+0xb04>
	*authp = rpc_autherr_badverf;
    9dd4:	80 01 01 50 	lwz     r0,336(r1)
    9dd8:	39 20 00 03 	li      r9,3
    9ddc:	7c 0b 03 78 	mr      r11,r0
    9de0:	91 2b 00 00 	stw     r9,0(r11)
    9de4:	80 01 00 0c 	lwz     r0,12(r1)
    9de8:	90 01 00 38 	stw     r0,56(r1)
	if (svc_safe_getnetobj(argv, &tmpobj)) {
    9dec:	38 01 00 fc 	addi    r0,r1,252
	if (gc->gc_proc == RPC_GSS_PROC_INIT && gc->gc_ctx.len != 0)
		return SVC_DENIED;
	memset(&rsikey, 0, sizeof(rsikey));
	if (dup_netobj(&rsikey.in_handle, &gc->gc_ctx))
		return SVC_CLOSE;
	*authp = rpc_autherr_badverf;
    9df0:	90 01 00 3c 	stw     r0,60(r1)
static inline int
svc_safe_getnetobj(struct kvec *argv, struct xdr_netobj *o)
{
	int l;

	if (argv->iov_len < 4)
    9df4:	80 01 00 38 	lwz     r0,56(r1)
    9df8:	7c 09 03 78 	mr      r9,r0
    9dfc:	80 09 00 04 	lwz     r0,4(r9)
    9e00:	2b 80 00 03 	cmplwi  cr7,r0,3
    9e04:	41 9d 00 0c 	bgt-    cr7,9e10 <svcauth_gss_handle_init+0x234>
		return -1;
    9e08:	38 00 ff ff 	li      r0,-1
    9e0c:	48 00 01 14 	b       9f20 <svcauth_gss_handle_init+0x344>
    9e10:	80 01 00 38 	lwz     r0,56(r1)
    9e14:	90 01 00 40 	stw     r0,64(r1)
				+ 2 + 1)

static inline u32 svc_getnl(struct kvec *iov)
{
	__be32 val, *vp;
	vp = iov->iov_base;
    9e18:	80 01 00 40 	lwz     r0,64(r1)
    9e1c:	7c 0a 03 78 	mr      r10,r0
    9e20:	80 0a 00 00 	lwz     r0,0(r10)
    9e24:	90 01 00 44 	stw     r0,68(r1)
	val = *vp++;
    9e28:	80 01 00 44 	lwz     r0,68(r1)
    9e2c:	7c 0b 03 78 	mr      r11,r0
    9e30:	80 0b 00 00 	lwz     r0,0(r11)
    9e34:	90 01 00 48 	stw     r0,72(r1)
    9e38:	80 01 00 44 	lwz     r0,68(r1)
    9e3c:	30 00 00 04 	addic   r0,r0,4
    9e40:	90 01 00 44 	stw     r0,68(r1)
	iov->iov_base = (void*)vp;
    9e44:	80 01 00 40 	lwz     r0,64(r1)
    9e48:	81 21 00 44 	lwz     r9,68(r1)
    9e4c:	7c 0a 03 78 	mr      r10,r0
    9e50:	91 2a 00 00 	stw     r9,0(r10)
	iov->iov_len -= sizeof(__be32);
    9e54:	80 01 00 40 	lwz     r0,64(r1)
    9e58:	7c 0b 03 78 	mr      r11,r0
    9e5c:	80 0b 00 04 	lwz     r0,4(r11)
    9e60:	31 20 ff fc 	addic   r9,r0,-4
    9e64:	80 01 00 40 	lwz     r0,64(r1)
    9e68:	7c 0a 03 78 	mr      r10,r0
    9e6c:	91 2a 00 04 	stw     r9,4(r10)
	return ntohl(val);
    9e70:	80 01 00 48 	lwz     r0,72(r1)
	o->len = svc_getnl(argv);
    9e74:	7c 09 03 78 	mr      r9,r0
    9e78:	80 01 00 3c 	lwz     r0,60(r1)
    9e7c:	7c 0b 03 78 	mr      r11,r0
    9e80:	91 2b 00 00 	stw     r9,0(r11)
	l = round_up_to_quad(o->len);
    9e84:	80 01 00 3c 	lwz     r0,60(r1)
    9e88:	7c 09 03 78 	mr      r9,r0
    9e8c:	80 09 00 00 	lwz     r0,0(r9)
    9e90:	90 01 00 4c 	stw     r0,76(r1)
	return 0;
}

static inline u32 round_up_to_quad(u32 i)
{
	return (i + 3 ) & ~3;
    9e94:	80 01 00 4c 	lwz     r0,76(r1)
    9e98:	30 00 00 03 	addic   r0,r0,3
    9e9c:	54 00 00 3a 	rlwinm  r0,r0,0,0,29
	int l;

	if (argv->iov_len < 4)
		return -1;
	o->len = svc_getnl(argv);
	l = round_up_to_quad(o->len);
    9ea0:	90 01 00 50 	stw     r0,80(r1)
	if (argv->iov_len < l)
    9ea4:	80 01 00 38 	lwz     r0,56(r1)
    9ea8:	7c 0a 03 78 	mr      r10,r0
    9eac:	81 2a 00 04 	lwz     r9,4(r10)
    9eb0:	80 01 00 50 	lwz     r0,80(r1)
    9eb4:	7f 89 00 40 	cmplw   cr7,r9,r0
    9eb8:	40 9c 00 0c 	bge-    cr7,9ec4 <svcauth_gss_handle_init+0x2e8>
		return -1;
    9ebc:	38 00 ff ff 	li      r0,-1
    9ec0:	48 00 00 60 	b       9f20 <svcauth_gss_handle_init+0x344>
	o->data = argv->iov_base;
    9ec4:	80 01 00 38 	lwz     r0,56(r1)
    9ec8:	7c 0b 03 78 	mr      r11,r0
    9ecc:	81 2b 00 00 	lwz     r9,0(r11)
    9ed0:	80 01 00 3c 	lwz     r0,60(r1)
    9ed4:	7c 0a 03 78 	mr      r10,r0
    9ed8:	91 2a 00 04 	stw     r9,4(r10)
	argv->iov_base += l;
    9edc:	80 01 00 38 	lwz     r0,56(r1)
    9ee0:	7c 0b 03 78 	mr      r11,r0
    9ee4:	81 2b 00 00 	lwz     r9,0(r11)
    9ee8:	80 01 00 50 	lwz     r0,80(r1)
    9eec:	7d 29 02 14 	add     r9,r9,r0
    9ef0:	80 01 00 38 	lwz     r0,56(r1)
    9ef4:	7c 0a 03 78 	mr      r10,r0
    9ef8:	91 2a 00 00 	stw     r9,0(r10)
	argv->iov_len -= l;
    9efc:	80 01 00 38 	lwz     r0,56(r1)
    9f00:	7c 0b 03 78 	mr      r11,r0
    9f04:	81 2b 00 04 	lwz     r9,4(r11)
    9f08:	80 01 00 50 	lwz     r0,80(r1)
    9f0c:	7d 20 48 50 	subf    r9,r0,r9
    9f10:	80 01 00 38 	lwz     r0,56(r1)
    9f14:	7c 0a 03 78 	mr      r10,r0
    9f18:	91 2a 00 04 	stw     r9,4(r10)
	return 0;
    9f1c:	38 00 00 00 	li      r0,0
		return SVC_DENIED;
	memset(&rsikey, 0, sizeof(rsikey));
	if (dup_netobj(&rsikey.in_handle, &gc->gc_ctx))
		return SVC_CLOSE;
	*authp = rpc_autherr_badverf;
	if (svc_safe_getnetobj(argv, &tmpobj)) {
    9f20:	2f 80 00 00 	cmpwi   cr7,r0,0
    9f24:	41 9e 00 18 	beq-    cr7,9f3c <svcauth_gss_handle_init+0x360>
		kfree(rsikey.in_handle.data);
    9f28:	80 01 01 1c 	lwz     r0,284(r1)
    9f2c:	7c 03 03 78 	mr      r3,r0
    9f30:	48 00 00 01 	bl      9f30 <svcauth_gss_handle_init+0x354>
		return SVC_DENIED;
    9f34:	38 00 00 08 	li      r0,8
    9f38:	48 00 07 a8 	b       a6e0 <svcauth_gss_handle_init+0xb04>
	}
	if (dup_netobj(&rsikey.in_token, &tmpobj)) {
    9f3c:	38 01 01 04 	addi    r0,r1,260
    9f40:	30 00 00 1c 	addic   r0,r0,28
	if (dup_netobj(&rsikey.in_handle, &gc->gc_ctx))
		return SVC_CLOSE;
	*authp = rpc_autherr_badverf;
	if (svc_safe_getnetobj(argv, &tmpobj)) {
		kfree(rsikey.in_handle.data);
		return SVC_DENIED;
    9f44:	90 01 00 54 	stw     r0,84(r1)
	}
	if (dup_netobj(&rsikey.in_token, &tmpobj)) {
    9f48:	38 01 00 fc 	addi    r0,r1,252
	if (dup_netobj(&rsikey.in_handle, &gc->gc_ctx))
		return SVC_CLOSE;
	*authp = rpc_autherr_badverf;
	if (svc_safe_getnetobj(argv, &tmpobj)) {
		kfree(rsikey.in_handle.data);
		return SVC_DENIED;
    9f4c:	90 01 00 58 	stw     r0,88(r1)
	return 0;
}

static inline int dup_netobj(struct xdr_netobj *dst, struct xdr_netobj *src)
{
	return dup_to_netobj(dst, src->data, src->len);
    9f50:	80 01 00 58 	lwz     r0,88(r1)
    9f54:	7c 0b 03 78 	mr      r11,r0
    9f58:	81 2b 00 04 	lwz     r9,4(r11)
    9f5c:	80 01 00 58 	lwz     r0,88(r1)
    9f60:	7c 0a 03 78 	mr      r10,r0
    9f64:	80 0a 00 00 	lwz     r0,0(r10)
    9f68:	80 61 00 54 	lwz     r3,84(r1)
    9f6c:	7d 24 4b 78 	mr      r4,r9
    9f70:	7c 05 03 78 	mr      r5,r0
    9f74:	4b ff cc 39 	bl      6bac <dup_to_netobj>
    9f78:	7c 60 1b 78 	mr      r0,r3
	*authp = rpc_autherr_badverf;
	if (svc_safe_getnetobj(argv, &tmpobj)) {
		kfree(rsikey.in_handle.data);
		return SVC_DENIED;
	}
	if (dup_netobj(&rsikey.in_token, &tmpobj)) {
    9f7c:	2f 80 00 00 	cmpwi   cr7,r0,0
    9f80:	41 9e 00 18 	beq-    cr7,9f98 <svcauth_gss_handle_init+0x3bc>
		kfree(rsikey.in_handle.data);
    9f84:	80 01 01 1c 	lwz     r0,284(r1)
    9f88:	7c 03 03 78 	mr      r3,r0
    9f8c:	48 00 00 01 	bl      9f8c <svcauth_gss_handle_init+0x3b0>
		return SVC_CLOSE;
    9f90:	38 00 00 07 	li      r0,7
    9f94:	48 00 07 4c 	b       a6e0 <svcauth_gss_handle_init+0xb04>
	}

	/* Perform upcall, or find upcall result: */
	rsip = rsi_lookup(&rsikey);
    9f98:	38 01 01 04 	addi    r0,r1,260
    9f9c:	7c 03 03 78 	mr      r3,r0
    9fa0:	4b ff d5 1d 	bl      74bc <rsi_lookup>
    9fa4:	90 61 00 14 	stw     r3,20(r1)
	rsi_free(&rsikey);
    9fa8:	38 01 01 04 	addi    r0,r1,260
    9fac:	7c 03 03 78 	mr      r3,r0
    9fb0:	4b ff ca a5 	bl      6a54 <rsi_free>
	if (!rsip)
    9fb4:	80 01 00 14 	lwz     r0,20(r1)
    9fb8:	2f 80 00 00 	cmpwi   cr7,r0,0
    9fbc:	40 9e 00 0c 	bne-    cr7,9fc8 <svcauth_gss_handle_init+0x3ec>
		return SVC_CLOSE;
    9fc0:	38 00 00 07 	li      r0,7
    9fc4:	48 00 07 1c 	b       a6e0 <svcauth_gss_handle_init+0xb04>
	if (cache_check(&rsi_cache, &rsip->h, &rqstp->rq_chandle) < 0)
    9fc8:	81 21 00 14 	lwz     r9,20(r1)
    9fcc:	80 01 01 48 	lwz     r0,328(r1)
    9fd0:	30 00 0d 7c 	addic   r0,r0,3452
    9fd4:	3d 60 00 00 	lis     r11,0
    9fd8:	38 6b 00 00 	addi    r3,r11,0
    9fdc:	7d 24 4b 78 	mr      r4,r9
    9fe0:	7c 05 03 78 	mr      r5,r0
    9fe4:	48 00 00 01 	bl      9fe4 <svcauth_gss_handle_init+0x408>
    9fe8:	7c 60 1b 78 	mr      r0,r3
    9fec:	2f 80 00 00 	cmpwi   cr7,r0,0
    9ff0:	40 9c 00 0c 	bge-    cr7,9ffc <svcauth_gss_handle_init+0x420>
		/* No upcall result: */
		return SVC_CLOSE;
    9ff4:	38 00 00 07 	li      r0,7
    9ff8:	48 00 06 e8 	b       a6e0 <svcauth_gss_handle_init+0xb04>

	ret = SVC_CLOSE;
    9ffc:	38 00 00 07 	li      r0,7
    a000:	90 01 00 08 	stw     r0,8(r1)
    a004:	80 01 01 48 	lwz     r0,328(r1)
    a008:	90 01 00 5c 	stw     r0,92(r1)
    a00c:	80 01 00 14 	lwz     r0,20(r1)
    a010:	90 01 00 60 	stw     r0,96(r1)
gss_write_init_verf(struct svc_rqst *rqstp, struct rsi *rsip)
{
	struct rsc *rsci;
	int        rc;

	if (rsip->major_status != GSS_S_COMPLETE)
    a014:	80 01 00 60 	lwz     r0,96(r1)
    a018:	7c 0b 03 78 	mr      r11,r0
    a01c:	80 0b 00 34 	lwz     r0,52(r11)
    a020:	2f 80 00 00 	cmpwi   cr7,r0,0
    a024:	41 9e 00 14 	beq-    cr7,a038 <svcauth_gss_handle_init+0x45c>
		return gss_write_null_verf(rqstp);
    a028:	80 61 00 5c 	lwz     r3,92(r1)
    a02c:	4b ff ef fd 	bl      9028 <gss_write_null_verf>
    a030:	7c 60 1b 78 	mr      r0,r3
    a034:	48 00 00 fc 	b       a130 <svcauth_gss_handle_init+0x554>
	rsci = gss_svc_searchbyctx(&rsip->out_handle);
    a038:	80 01 00 60 	lwz     r0,96(r1)
    a03c:	30 00 00 24 	addic   r0,r0,36
    a040:	7c 03 03 78 	mr      r3,r0
    a044:	4b ff e8 49 	bl      888c <gss_svc_searchbyctx>
    a048:	90 61 00 64 	stw     r3,100(r1)
	if (rsci == NULL) {
    a04c:	80 01 00 64 	lwz     r0,100(r1)
    a050:	2f 80 00 00 	cmpwi   cr7,r0,0
    a054:	40 9e 00 24 	bne-    cr7,a078 <svcauth_gss_handle_init+0x49c>
		rsip->major_status = GSS_S_NO_CONTEXT;
    a058:	80 01 00 60 	lwz     r0,96(r1)
    a05c:	3d 20 00 08 	lis     r9,8
    a060:	7c 0a 03 78 	mr      r10,r0
    a064:	91 2a 00 34 	stw     r9,52(r10)
		return gss_write_null_verf(rqstp);
    a068:	80 61 00 5c 	lwz     r3,92(r1)
    a06c:	4b ff ef bd 	bl      9028 <gss_write_null_verf>
    a070:	7c 60 1b 78 	mr      r0,r3
    a074:	48 00 00 bc 	b       a130 <svcauth_gss_handle_init+0x554>
	}
	rc = gss_write_verf(rqstp, rsci->mechctx, GSS_SEQ_WIN);
    a078:	80 01 00 64 	lwz     r0,100(r1)
    a07c:	7c 0b 03 78 	mr      r11,r0
    a080:	80 0b 00 3c 	lwz     r0,60(r11)
    a084:	80 61 00 5c 	lwz     r3,92(r1)
    a088:	7c 04 03 78 	mr      r4,r0
    a08c:	38 a0 00 80 	li      r5,128
    a090:	4b ff f0 c1 	bl      9150 <gss_write_verf>
    a094:	90 61 00 68 	stw     r3,104(r1)
	cache_put(&rsci->h, &rsc_cache);
    a098:	80 01 00 64 	lwz     r0,100(r1)
    a09c:	90 01 00 6c 	stw     r0,108(r1)
    a0a0:	3c 00 00 00 	lis     r0,0
    a0a4:	30 00 00 70 	addic   r0,r0,112
    a0a8:	90 01 00 70 	stw     r0,112(r1)
}


static inline void cache_put(struct cache_head *h, struct cache_detail *cd)
{
	if (atomic_read(&h->ref.refcount) <= 2 &&
    a0ac:	80 01 00 6c 	lwz     r0,108(r1)
    a0b0:	30 00 00 0c 	addic   r0,r0,12
    a0b4:	90 01 00 74 	stw     r0,116(r1)

static __inline__ int atomic_read(const atomic_t *v)
{
	int t;

	__asm__ __volatile__("lwz%U1%X1 %0,%1" : "=r"(t) : "m"(v->counter));
    a0b8:	80 01 00 74 	lwz     r0,116(r1)
    a0bc:	7c 09 03 78 	mr      r9,r0
    a0c0:	83 e9 00 00 	lwz     r31,0(r9)
    a0c4:	93 e1 00 78 	stw     r31,120(r1)

	return t;
    a0c8:	80 01 00 78 	lwz     r0,120(r1)
    a0cc:	2f 80 00 02 	cmpwi   cr7,r0,2
    a0d0:	41 9d 00 3c 	bgt-    cr7,a10c <svcauth_gss_handle_init+0x530>
	    h->expiry_time < cd->nextcheck)
    a0d4:	80 01 00 6c 	lwz     r0,108(r1)
    a0d8:	7c 0a 03 78 	mr      r10,r0
    a0dc:	81 2a 00 04 	lwz     r9,4(r10)
    a0e0:	80 01 00 70 	lwz     r0,112(r1)
    a0e4:	7c 0b 03 78 	mr      r11,r0
    a0e8:	80 0b 00 44 	lwz     r0,68(r11)
}


static inline void cache_put(struct cache_head *h, struct cache_detail *cd)
{
	if (atomic_read(&h->ref.refcount) <= 2 &&
    a0ec:	7f 89 00 00 	cmpw    cr7,r9,r0
    a0f0:	40 9c 00 1c 	bge-    cr7,a10c <svcauth_gss_handle_init+0x530>
	    h->expiry_time < cd->nextcheck)
		cd->nextcheck = h->expiry_time;
    a0f4:	80 01 00 6c 	lwz     r0,108(r1)
    a0f8:	7c 0a 03 78 	mr      r10,r0
    a0fc:	81 2a 00 04 	lwz     r9,4(r10)
    a100:	80 01 00 70 	lwz     r0,112(r1)
    a104:	7c 0b 03 78 	mr      r11,r0
    a108:	91 2b 00 44 	stw     r9,68(r11)
	kref_put(&h->ref, cd->cache_put);
    a10c:	80 01 00 6c 	lwz     r0,108(r1)
    a110:	31 20 00 0c 	addic   r9,r0,12
    a114:	80 01 00 70 	lwz     r0,112(r1)
    a118:	7c 0a 03 78 	mr      r10,r0
    a11c:	80 0a 00 14 	lwz     r0,20(r10)
    a120:	7d 23 4b 78 	mr      r3,r9
    a124:	7c 04 03 78 	mr      r4,r0
    a128:	48 00 00 01 	bl      a128 <svcauth_gss_handle_init+0x54c>
	return rc;
    a12c:	80 01 00 68 	lwz     r0,104(r1)
		/* No upcall result: */
		return SVC_CLOSE;

	ret = SVC_CLOSE;
	/* Got an answer to the upcall; use it: */
	if (gss_write_init_verf(rqstp, rsip))
    a130:	2f 80 00 00 	cmpwi   cr7,r0,0
    a134:	40 9e 04 f0 	bne-    cr7,a624 <svcauth_gss_handle_init+0xa48>
		goto out;
	if (resv->iov_len + 4 > PAGE_SIZE)
    a138:	80 01 00 10 	lwz     r0,16(r1)
    a13c:	7c 0b 03 78 	mr      r11,r0
    a140:	80 0b 00 04 	lwz     r0,4(r11)
    a144:	30 00 00 04 	addic   r0,r0,4
    a148:	2b 80 10 00 	cmplwi  cr7,r0,4096
    a14c:	41 9d 04 e0 	bgt-    cr7,a62c <svcauth_gss_handle_init+0xa50>
		goto out;
    a150:	80 01 00 10 	lwz     r0,16(r1)
    a154:	90 01 00 7c 	stw     r0,124(r1)
    a158:	38 00 00 00 	li      r0,0
    a15c:	90 01 00 80 	stw     r0,128(r1)
}

static inline void svc_putnl(struct kvec *iov, u32 val)
{
	__be32 *vp = iov->iov_base + iov->iov_len;
    a160:	80 01 00 7c 	lwz     r0,124(r1)
    a164:	7c 0a 03 78 	mr      r10,r0
    a168:	81 2a 00 00 	lwz     r9,0(r10)
    a16c:	80 01 00 7c 	lwz     r0,124(r1)
    a170:	7c 0b 03 78 	mr      r11,r0
    a174:	80 0b 00 04 	lwz     r0,4(r11)
    a178:	7c 09 02 14 	add     r0,r9,r0
    a17c:	90 01 00 84 	stw     r0,132(r1)
	*vp = htonl(val);
    a180:	80 01 00 84 	lwz     r0,132(r1)
    a184:	81 21 00 80 	lwz     r9,128(r1)
    a188:	7c 0a 03 78 	mr      r10,r0
    a18c:	91 2a 00 00 	stw     r9,0(r10)
	iov->iov_len += sizeof(__be32);
    a190:	80 01 00 7c 	lwz     r0,124(r1)
    a194:	7c 0b 03 78 	mr      r11,r0
    a198:	80 0b 00 04 	lwz     r0,4(r11)
    a19c:	31 20 00 04 	addic   r9,r0,4
    a1a0:	80 01 00 7c 	lwz     r0,124(r1)
    a1a4:	7c 0a 03 78 	mr      r10,r0
    a1a8:	91 2a 00 04 	stw     r9,4(r10)
	svc_putnl(resv, RPC_SUCCESS);
	if (svc_safe_putnetobj(resv, &rsip->out_handle))
    a1ac:	80 01 00 14 	lwz     r0,20(r1)
    a1b0:	30 00 00 24 	addic   r0,r0,36
    a1b4:	81 21 00 10 	lwz     r9,16(r1)
    a1b8:	91 21 00 88 	stw     r9,136(r1)
    a1bc:	90 01 00 8c 	stw     r0,140(r1)
static inline int
svc_safe_putnetobj(struct kvec *resv, struct xdr_netobj *o)
{
	u8 *p;

	if (resv->iov_len + 4 > PAGE_SIZE)
    a1c0:	80 01 00 88 	lwz     r0,136(r1)
    a1c4:	7c 0b 03 78 	mr      r11,r0
    a1c8:	80 0b 00 04 	lwz     r0,4(r11)
    a1cc:	30 00 00 04 	addic   r0,r0,4
    a1d0:	2b 80 10 00 	cmplwi  cr7,r0,4096
    a1d4:	40 9d 00 0c 	ble-    cr7,a1e0 <svcauth_gss_handle_init+0x604>
		return -1;
    a1d8:	38 00 ff ff 	li      r0,-1
    a1dc:	48 00 01 60 	b       a33c <svcauth_gss_handle_init+0x760>
	svc_putnl(resv, o->len);
    a1e0:	80 01 00 8c 	lwz     r0,140(r1)
    a1e4:	7c 09 03 78 	mr      r9,r0
    a1e8:	80 09 00 00 	lwz     r0,0(r9)
    a1ec:	81 21 00 88 	lwz     r9,136(r1)
    a1f0:	91 21 00 90 	stw     r9,144(r1)
    a1f4:	90 01 00 94 	stw     r0,148(r1)
	return ntohl(val);
}

static inline void svc_putnl(struct kvec *iov, u32 val)
{
	__be32 *vp = iov->iov_base + iov->iov_len;
    a1f8:	80 01 00 90 	lwz     r0,144(r1)
    a1fc:	7c 0a 03 78 	mr      r10,r0
    a200:	81 2a 00 00 	lwz     r9,0(r10)
    a204:	80 01 00 90 	lwz     r0,144(r1)
    a208:	7c 0b 03 78 	mr      r11,r0
    a20c:	80 0b 00 04 	lwz     r0,4(r11)
    a210:	7c 09 02 14 	add     r0,r9,r0
    a214:	90 01 00 98 	stw     r0,152(r1)
	*vp = htonl(val);
    a218:	80 01 00 98 	lwz     r0,152(r1)
    a21c:	81 21 00 94 	lwz     r9,148(r1)
    a220:	7c 0a 03 78 	mr      r10,r0
    a224:	91 2a 00 00 	stw     r9,0(r10)
	iov->iov_len += sizeof(__be32);
    a228:	80 01 00 90 	lwz     r0,144(r1)
    a22c:	7c 0b 03 78 	mr      r11,r0
    a230:	80 0b 00 04 	lwz     r0,4(r11)
    a234:	31 20 00 04 	addic   r9,r0,4
    a238:	80 01 00 90 	lwz     r0,144(r1)
    a23c:	7c 0a 03 78 	mr      r10,r0
    a240:	91 2a 00 04 	stw     r9,4(r10)
	p = resv->iov_base + resv->iov_len;
    a244:	80 01 00 88 	lwz     r0,136(r1)
    a248:	7c 0b 03 78 	mr      r11,r0
    a24c:	81 2b 00 00 	lwz     r9,0(r11)
    a250:	80 01 00 88 	lwz     r0,136(r1)
    a254:	7c 0a 03 78 	mr      r10,r0
    a258:	80 0a 00 04 	lwz     r0,4(r10)
    a25c:	7c 09 02 14 	add     r0,r9,r0
    a260:	90 01 00 9c 	stw     r0,156(r1)
	resv->iov_len += round_up_to_quad(o->len);
    a264:	80 01 00 88 	lwz     r0,136(r1)
    a268:	7c 0b 03 78 	mr      r11,r0
    a26c:	81 2b 00 04 	lwz     r9,4(r11)
    a270:	80 01 00 8c 	lwz     r0,140(r1)
    a274:	7c 0a 03 78 	mr      r10,r0
    a278:	80 0a 00 00 	lwz     r0,0(r10)
    a27c:	90 01 00 a0 	stw     r0,160(r1)
	return 0;
}

static inline u32 round_up_to_quad(u32 i)
{
	return (i + 3 ) & ~3;
    a280:	80 01 00 a0 	lwz     r0,160(r1)
    a284:	30 00 00 03 	addic   r0,r0,3
    a288:	54 00 00 3a 	rlwinm  r0,r0,0,0,29

	if (resv->iov_len + 4 > PAGE_SIZE)
		return -1;
	svc_putnl(resv, o->len);
	p = resv->iov_base + resv->iov_len;
	resv->iov_len += round_up_to_quad(o->len);
    a28c:	7d 29 02 14 	add     r9,r9,r0
    a290:	80 01 00 88 	lwz     r0,136(r1)
    a294:	7c 0b 03 78 	mr      r11,r0
    a298:	91 2b 00 04 	stw     r9,4(r11)
	if (resv->iov_len > PAGE_SIZE)
    a29c:	80 01 00 88 	lwz     r0,136(r1)
    a2a0:	7c 09 03 78 	mr      r9,r0
    a2a4:	80 09 00 04 	lwz     r0,4(r9)
    a2a8:	2b 80 10 00 	cmplwi  cr7,r0,4096
    a2ac:	40 9d 00 0c 	ble-    cr7,a2b8 <svcauth_gss_handle_init+0x6dc>
		return -1;
    a2b0:	38 00 ff ff 	li      r0,-1
    a2b4:	48 00 00 88 	b       a33c <svcauth_gss_handle_init+0x760>
	memcpy(p, o->data, o->len);
    a2b8:	80 01 00 8c 	lwz     r0,140(r1)
    a2bc:	7c 0a 03 78 	mr      r10,r0
    a2c0:	81 2a 00 04 	lwz     r9,4(r10)
    a2c4:	80 01 00 8c 	lwz     r0,140(r1)
    a2c8:	7c 0b 03 78 	mr      r11,r0
    a2cc:	80 0b 00 00 	lwz     r0,0(r11)
    a2d0:	81 61 00 9c 	lwz     r11,156(r1)
    a2d4:	7d 63 5b 78 	mr      r3,r11
    a2d8:	7d 24 4b 78 	mr      r4,r9
    a2dc:	7c 05 03 78 	mr      r5,r0
    a2e0:	48 00 00 01 	bl      a2e0 <svcauth_gss_handle_init+0x704>
	memset(p + o->len, 0, round_up_to_quad(o->len) - o->len);
    a2e4:	80 01 00 8c 	lwz     r0,140(r1)
    a2e8:	7c 09 03 78 	mr      r9,r0
    a2ec:	80 09 00 00 	lwz     r0,0(r9)
    a2f0:	81 21 00 9c 	lwz     r9,156(r1)
    a2f4:	7d 29 02 14 	add     r9,r9,r0
    a2f8:	80 01 00 8c 	lwz     r0,140(r1)
    a2fc:	7c 0a 03 78 	mr      r10,r0
    a300:	80 0a 00 00 	lwz     r0,0(r10)
    a304:	90 01 00 a4 	stw     r0,164(r1)
	return 0;
}

static inline u32 round_up_to_quad(u32 i)
{
	return (i + 3 ) & ~3;
    a308:	80 01 00 a4 	lwz     r0,164(r1)
    a30c:	30 00 00 03 	addic   r0,r0,3
    a310:	54 00 00 3a 	rlwinm  r0,r0,0,0,29
	p = resv->iov_base + resv->iov_len;
	resv->iov_len += round_up_to_quad(o->len);
	if (resv->iov_len > PAGE_SIZE)
		return -1;
	memcpy(p, o->data, o->len);
	memset(p + o->len, 0, round_up_to_quad(o->len) - o->len);
    a314:	7c 0b 03 78 	mr      r11,r0
    a318:	80 01 00 8c 	lwz     r0,140(r1)
    a31c:	7c 0a 03 78 	mr      r10,r0
    a320:	80 0a 00 00 	lwz     r0,0(r10)
    a324:	7c 00 58 50 	subf    r0,r0,r11
    a328:	7d 23 4b 78 	mr      r3,r9
    a32c:	38 80 00 00 	li      r4,0
    a330:	7c 05 03 78 	mr      r5,r0
    a334:	48 00 00 01 	bl      a334 <svcauth_gss_handle_init+0x758>
	return 0;
    a338:	38 00 00 00 	li      r0,0
	if (gss_write_init_verf(rqstp, rsip))
		goto out;
	if (resv->iov_len + 4 > PAGE_SIZE)
		goto out;
	svc_putnl(resv, RPC_SUCCESS);
	if (svc_safe_putnetobj(resv, &rsip->out_handle))
    a33c:	2f 80 00 00 	cmpwi   cr7,r0,0
    a340:	40 9e 02 f4 	bne-    cr7,a634 <svcauth_gss_handle_init+0xa58>
		goto out;
	if (resv->iov_len + 3 * 4 > PAGE_SIZE)
    a344:	80 01 00 10 	lwz     r0,16(r1)
    a348:	7c 0b 03 78 	mr      r11,r0
    a34c:	80 0b 00 04 	lwz     r0,4(r11)
    a350:	30 00 00 0c 	addic   r0,r0,12
    a354:	2b 80 10 00 	cmplwi  cr7,r0,4096
    a358:	41 9d 02 e4 	bgt-    cr7,a63c <svcauth_gss_handle_init+0xa60>
		goto out;
	svc_putnl(resv, rsip->major_status);
    a35c:	80 01 00 14 	lwz     r0,20(r1)
    a360:	7c 09 03 78 	mr      r9,r0
    a364:	80 09 00 34 	lwz     r0,52(r9)
    a368:	81 21 00 10 	lwz     r9,16(r1)
    a36c:	91 21 00 a8 	stw     r9,168(r1)
    a370:	90 01 00 ac 	stw     r0,172(r1)
	return ntohl(val);
}

static inline void svc_putnl(struct kvec *iov, u32 val)
{
	__be32 *vp = iov->iov_base + iov->iov_len;
    a374:	80 01 00 a8 	lwz     r0,168(r1)
    a378:	7c 0a 03 78 	mr      r10,r0
    a37c:	81 2a 00 00 	lwz     r9,0(r10)
    a380:	80 01 00 a8 	lwz     r0,168(r1)
    a384:	7c 0b 03 78 	mr      r11,r0
    a388:	80 0b 00 04 	lwz     r0,4(r11)
    a38c:	7c 09 02 14 	add     r0,r9,r0
    a390:	90 01 00 b0 	stw     r0,176(r1)
	*vp = htonl(val);
    a394:	80 01 00 b0 	lwz     r0,176(r1)
    a398:	81 21 00 ac 	lwz     r9,172(r1)
    a39c:	7c 0a 03 78 	mr      r10,r0
    a3a0:	91 2a 00 00 	stw     r9,0(r10)
	iov->iov_len += sizeof(__be32);
    a3a4:	80 01 00 a8 	lwz     r0,168(r1)
    a3a8:	7c 0b 03 78 	mr      r11,r0
    a3ac:	80 0b 00 04 	lwz     r0,4(r11)
    a3b0:	31 20 00 04 	addic   r9,r0,4
    a3b4:	80 01 00 a8 	lwz     r0,168(r1)
    a3b8:	7c 0a 03 78 	mr      r10,r0
    a3bc:	91 2a 00 04 	stw     r9,4(r10)
	svc_putnl(resv, rsip->minor_status);
    a3c0:	80 01 00 14 	lwz     r0,20(r1)
    a3c4:	7c 0b 03 78 	mr      r11,r0
    a3c8:	80 0b 00 38 	lwz     r0,56(r11)
    a3cc:	81 21 00 10 	lwz     r9,16(r1)
    a3d0:	91 21 00 b4 	stw     r9,180(r1)
    a3d4:	90 01 00 b8 	stw     r0,184(r1)
	return ntohl(val);
}

static inline void svc_putnl(struct kvec *iov, u32 val)
{
	__be32 *vp = iov->iov_base + iov->iov_len;
    a3d8:	80 01 00 b4 	lwz     r0,180(r1)
    a3dc:	7c 0a 03 78 	mr      r10,r0
    a3e0:	81 2a 00 00 	lwz     r9,0(r10)
    a3e4:	80 01 00 b4 	lwz     r0,180(r1)
    a3e8:	7c 0b 03 78 	mr      r11,r0
    a3ec:	80 0b 00 04 	lwz     r0,4(r11)
    a3f0:	7c 09 02 14 	add     r0,r9,r0
    a3f4:	90 01 00 bc 	stw     r0,188(r1)
	*vp = htonl(val);
    a3f8:	80 01 00 bc 	lwz     r0,188(r1)
    a3fc:	81 21 00 b8 	lwz     r9,184(r1)
    a400:	7c 0a 03 78 	mr      r10,r0
    a404:	91 2a 00 00 	stw     r9,0(r10)
	iov->iov_len += sizeof(__be32);
    a408:	80 01 00 b4 	lwz     r0,180(r1)
    a40c:	7c 0b 03 78 	mr      r11,r0
    a410:	80 0b 00 04 	lwz     r0,4(r11)
    a414:	31 20 00 04 	addic   r9,r0,4
    a418:	80 01 00 b4 	lwz     r0,180(r1)
    a41c:	7c 0a 03 78 	mr      r10,r0
    a420:	91 2a 00 04 	stw     r9,4(r10)
    a424:	80 01 00 10 	lwz     r0,16(r1)
    a428:	90 01 00 c0 	stw     r0,192(r1)
    a42c:	38 00 00 80 	li      r0,128
    a430:	90 01 00 c4 	stw     r0,196(r1)
	return ntohl(val);
}

static inline void svc_putnl(struct kvec *iov, u32 val)
{
	__be32 *vp = iov->iov_base + iov->iov_len;
    a434:	80 01 00 c0 	lwz     r0,192(r1)
    a438:	7c 0b 03 78 	mr      r11,r0
    a43c:	81 2b 00 00 	lwz     r9,0(r11)
    a440:	80 01 00 c0 	lwz     r0,192(r1)
    a444:	7c 0a 03 78 	mr      r10,r0
    a448:	80 0a 00 04 	lwz     r0,4(r10)
    a44c:	7c 09 02 14 	add     r0,r9,r0
    a450:	90 01 00 c8 	stw     r0,200(r1)
	*vp = htonl(val);
    a454:	80 01 00 c8 	lwz     r0,200(r1)
    a458:	81 21 00 c4 	lwz     r9,196(r1)
    a45c:	7c 0b 03 78 	mr      r11,r0
    a460:	91 2b 00 00 	stw     r9,0(r11)
	iov->iov_len += sizeof(__be32);
    a464:	80 01 00 c0 	lwz     r0,192(r1)
    a468:	7c 09 03 78 	mr      r9,r0
    a46c:	80 09 00 04 	lwz     r0,4(r9)
    a470:	31 20 00 04 	addic   r9,r0,4
    a474:	80 01 00 c0 	lwz     r0,192(r1)
    a478:	7c 0a 03 78 	mr      r10,r0
    a47c:	91 2a 00 04 	stw     r9,4(r10)
	svc_putnl(resv, GSS_SEQ_WIN);
	if (svc_safe_putnetobj(resv, &rsip->out_token))
    a480:	80 01 00 14 	lwz     r0,20(r1)
    a484:	30 00 00 2c 	addic   r0,r0,44
    a488:	81 21 00 10 	lwz     r9,16(r1)
    a48c:	91 21 00 cc 	stw     r9,204(r1)
    a490:	90 01 00 d0 	stw     r0,208(r1)
static inline int
svc_safe_putnetobj(struct kvec *resv, struct xdr_netobj *o)
{
	u8 *p;

	if (resv->iov_len + 4 > PAGE_SIZE)
    a494:	80 01 00 cc 	lwz     r0,204(r1)
    a498:	7c 0b 03 78 	mr      r11,r0
    a49c:	80 0b 00 04 	lwz     r0,4(r11)
    a4a0:	30 00 00 04 	addic   r0,r0,4
    a4a4:	2b 80 10 00 	cmplwi  cr7,r0,4096
    a4a8:	40 9d 00 0c 	ble-    cr7,a4b4 <svcauth_gss_handle_init+0x8d8>
		return -1;
    a4ac:	38 00 ff ff 	li      r0,-1
    a4b0:	48 00 01 60 	b       a610 <svcauth_gss_handle_init+0xa34>
	svc_putnl(resv, o->len);
    a4b4:	80 01 00 d0 	lwz     r0,208(r1)
    a4b8:	7c 09 03 78 	mr      r9,r0
    a4bc:	80 09 00 00 	lwz     r0,0(r9)
    a4c0:	81 21 00 cc 	lwz     r9,204(r1)
    a4c4:	91 21 00 d4 	stw     r9,212(r1)
    a4c8:	90 01 00 d8 	stw     r0,216(r1)
	return ntohl(val);
}

static inline void svc_putnl(struct kvec *iov, u32 val)
{
	__be32 *vp = iov->iov_base + iov->iov_len;
    a4cc:	80 01 00 d4 	lwz     r0,212(r1)
    a4d0:	7c 0a 03 78 	mr      r10,r0
    a4d4:	81 2a 00 00 	lwz     r9,0(r10)
    a4d8:	80 01 00 d4 	lwz     r0,212(r1)
    a4dc:	7c 0b 03 78 	mr      r11,r0
    a4e0:	80 0b 00 04 	lwz     r0,4(r11)
    a4e4:	7c 09 02 14 	add     r0,r9,r0
    a4e8:	90 01 00 dc 	stw     r0,220(r1)
	*vp = htonl(val);
    a4ec:	80 01 00 dc 	lwz     r0,220(r1)
    a4f0:	81 21 00 d8 	lwz     r9,216(r1)
    a4f4:	7c 0a 03 78 	mr      r10,r0
    a4f8:	91 2a 00 00 	stw     r9,0(r10)
	iov->iov_len += sizeof(__be32);
    a4fc:	80 01 00 d4 	lwz     r0,212(r1)
    a500:	7c 0b 03 78 	mr      r11,r0
    a504:	80 0b 00 04 	lwz     r0,4(r11)
    a508:	31 20 00 04 	addic   r9,r0,4
    a50c:	80 01 00 d4 	lwz     r0,212(r1)
    a510:	7c 0a 03 78 	mr      r10,r0
    a514:	91 2a 00 04 	stw     r9,4(r10)
	p = resv->iov_base + resv->iov_len;
    a518:	80 01 00 cc 	lwz     r0,204(r1)
    a51c:	7c 0b 03 78 	mr      r11,r0
    a520:	81 2b 00 00 	lwz     r9,0(r11)
    a524:	80 01 00 cc 	lwz     r0,204(r1)
    a528:	7c 0a 03 78 	mr      r10,r0
    a52c:	80 0a 00 04 	lwz     r0,4(r10)
    a530:	7c 09 02 14 	add     r0,r9,r0
    a534:	90 01 00 e0 	stw     r0,224(r1)
	resv->iov_len += round_up_to_quad(o->len);
    a538:	80 01 00 cc 	lwz     r0,204(r1)
    a53c:	7c 0b 03 78 	mr      r11,r0
    a540:	81 2b 00 04 	lwz     r9,4(r11)
    a544:	80 01 00 d0 	lwz     r0,208(r1)
    a548:	7c 0a 03 78 	mr      r10,r0
    a54c:	80 0a 00 00 	lwz     r0,0(r10)
    a550:	90 01 00 e4 	stw     r0,228(r1)
	return 0;
}

static inline u32 round_up_to_quad(u32 i)
{
	return (i + 3 ) & ~3;
    a554:	80 01 00 e4 	lwz     r0,228(r1)
    a558:	30 00 00 03 	addic   r0,r0,3
    a55c:	54 00 00 3a 	rlwinm  r0,r0,0,0,29

	if (resv->iov_len + 4 > PAGE_SIZE)
		return -1;
	svc_putnl(resv, o->len);
	p = resv->iov_base + resv->iov_len;
	resv->iov_len += round_up_to_quad(o->len);
    a560:	7d 29 02 14 	add     r9,r9,r0
    a564:	80 01 00 cc 	lwz     r0,204(r1)
    a568:	7c 0b 03 78 	mr      r11,r0
    a56c:	91 2b 00 04 	stw     r9,4(r11)
	if (resv->iov_len > PAGE_SIZE)
    a570:	80 01 00 cc 	lwz     r0,204(r1)
    a574:	7c 09 03 78 	mr      r9,r0
    a578:	80 09 00 04 	lwz     r0,4(r9)
    a57c:	2b 80 10 00 	cmplwi  cr7,r0,4096
    a580:	40 9d 00 0c 	ble-    cr7,a58c <svcauth_gss_handle_init+0x9b0>
		return -1;
    a584:	38 00 ff ff 	li      r0,-1
    a588:	48 00 00 88 	b       a610 <svcauth_gss_handle_init+0xa34>
	memcpy(p, o->data, o->len);
    a58c:	80 01 00 d0 	lwz     r0,208(r1)
    a590:	7c 0a 03 78 	mr      r10,r0
    a594:	81 2a 00 04 	lwz     r9,4(r10)
    a598:	80 01 00 d0 	lwz     r0,208(r1)
    a59c:	7c 0b 03 78 	mr      r11,r0
    a5a0:	80 0b 00 00 	lwz     r0,0(r11)
    a5a4:	81 61 00 e0 	lwz     r11,224(r1)
    a5a8:	7d 63 5b 78 	mr      r3,r11
    a5ac:	7d 24 4b 78 	mr      r4,r9
    a5b0:	7c 05 03 78 	mr      r5,r0
    a5b4:	48 00 00 01 	bl      a5b4 <svcauth_gss_handle_init+0x9d8>
	memset(p + o->len, 0, round_up_to_quad(o->len) - o->len);
    a5b8:	80 01 00 d0 	lwz     r0,208(r1)
    a5bc:	7c 09 03 78 	mr      r9,r0
    a5c0:	80 09 00 00 	lwz     r0,0(r9)
    a5c4:	81 21 00 e0 	lwz     r9,224(r1)
    a5c8:	7d 29 02 14 	add     r9,r9,r0
    a5cc:	80 01 00 d0 	lwz     r0,208(r1)
    a5d0:	7c 0a 03 78 	mr      r10,r0
    a5d4:	80 0a 00 00 	lwz     r0,0(r10)
    a5d8:	90 01 00 e8 	stw     r0,232(r1)
	return 0;
}

static inline u32 round_up_to_quad(u32 i)
{
	return (i + 3 ) & ~3;
    a5dc:	80 01 00 e8 	lwz     r0,232(r1)
    a5e0:	30 00 00 03 	addic   r0,r0,3
    a5e4:	54 00 00 3a 	rlwinm  r0,r0,0,0,29
	p = resv->iov_base + resv->iov_len;
	resv->iov_len += round_up_to_quad(o->len);
	if (resv->iov_len > PAGE_SIZE)
		return -1;
	memcpy(p, o->data, o->len);
	memset(p + o->len, 0, round_up_to_quad(o->len) - o->len);
    a5e8:	7c 0b 03 78 	mr      r11,r0
    a5ec:	80 01 00 d0 	lwz     r0,208(r1)
    a5f0:	7c 0a 03 78 	mr      r10,r0
    a5f4:	80 0a 00 00 	lwz     r0,0(r10)
    a5f8:	7c 00 58 50 	subf    r0,r0,r11
    a5fc:	7d 23 4b 78 	mr      r3,r9
    a600:	38 80 00 00 	li      r4,0
    a604:	7c 05 03 78 	mr      r5,r0
    a608:	48 00 00 01 	bl      a608 <svcauth_gss_handle_init+0xa2c>
	return 0;
    a60c:	38 00 00 00 	li      r0,0
	if (resv->iov_len + 3 * 4 > PAGE_SIZE)
		goto out;
	svc_putnl(resv, rsip->major_status);
	svc_putnl(resv, rsip->minor_status);
	svc_putnl(resv, GSS_SEQ_WIN);
	if (svc_safe_putnetobj(resv, &rsip->out_token))
    a610:	2f 80 00 00 	cmpwi   cr7,r0,0
    a614:	40 9e 00 30 	bne-    cr7,a644 <svcauth_gss_handle_init+0xa68>
		goto out;

	ret = SVC_COMPLETE;
    a618:	38 00 00 0a 	li      r0,10
    a61c:	90 01 00 08 	stw     r0,8(r1)
    a620:	48 00 00 28 	b       a648 <svcauth_gss_handle_init+0xa6c>
		return SVC_CLOSE;

	ret = SVC_CLOSE;
	/* Got an answer to the upcall; use it: */
	if (gss_write_init_verf(rqstp, rsip))
		goto out;
    a624:	60 00 00 00 	nop
    a628:	48 00 00 20 	b       a648 <svcauth_gss_handle_init+0xa6c>
	if (resv->iov_len + 4 > PAGE_SIZE)
		goto out;
    a62c:	60 00 00 00 	nop
    a630:	48 00 00 18 	b       a648 <svcauth_gss_handle_init+0xa6c>
	svc_putnl(resv, RPC_SUCCESS);
	if (svc_safe_putnetobj(resv, &rsip->out_handle))
		goto out;
    a634:	60 00 00 00 	nop
    a638:	48 00 00 10 	b       a648 <svcauth_gss_handle_init+0xa6c>
	if (resv->iov_len + 3 * 4 > PAGE_SIZE)
		goto out;
    a63c:	60 00 00 00 	nop
    a640:	48 00 00 08 	b       a648 <svcauth_gss_handle_init+0xa6c>
	svc_putnl(resv, rsip->major_status);
	svc_putnl(resv, rsip->minor_status);
	svc_putnl(resv, GSS_SEQ_WIN);
	if (svc_safe_putnetobj(resv, &rsip->out_token))
		goto out;
    a644:	60 00 00 00 	nop

	ret = SVC_COMPLETE;
out:
	cache_put(&rsip->h, &rsi_cache);
    a648:	80 01 00 14 	lwz     r0,20(r1)
    a64c:	90 01 00 ec 	stw     r0,236(r1)
    a650:	3c 00 00 00 	lis     r0,0
    a654:	30 00 00 00 	addic   r0,r0,0
    a658:	90 01 00 f0 	stw     r0,240(r1)
}


static inline void cache_put(struct cache_head *h, struct cache_detail *cd)
{
	if (atomic_read(&h->ref.refcount) <= 2 &&
    a65c:	80 01 00 ec 	lwz     r0,236(r1)
    a660:	30 00 00 0c 	addic   r0,r0,12
    a664:	90 01 00 f4 	stw     r0,244(r1)

static __inline__ int atomic_read(const atomic_t *v)
{
	int t;

	__asm__ __volatile__("lwz%U1%X1 %0,%1" : "=r"(t) : "m"(v->counter));
    a668:	80 01 00 f4 	lwz     r0,244(r1)
    a66c:	7c 0b 03 78 	mr      r11,r0
    a670:	83 eb 00 00 	lwz     r31,0(r11)
    a674:	93 e1 00 f8 	stw     r31,248(r1)

	return t;
    a678:	80 01 00 f8 	lwz     r0,248(r1)
    a67c:	2f 80 00 02 	cmpwi   cr7,r0,2
    a680:	41 9d 00 3c 	bgt-    cr7,a6bc <svcauth_gss_handle_init+0xae0>
	    h->expiry_time < cd->nextcheck)
    a684:	80 01 00 ec 	lwz     r0,236(r1)
    a688:	7c 0a 03 78 	mr      r10,r0
    a68c:	81 2a 00 04 	lwz     r9,4(r10)
    a690:	80 01 00 f0 	lwz     r0,240(r1)
    a694:	7c 0b 03 78 	mr      r11,r0
    a698:	80 0b 00 44 	lwz     r0,68(r11)
}


static inline void cache_put(struct cache_head *h, struct cache_detail *cd)
{
	if (atomic_read(&h->ref.refcount) <= 2 &&
    a69c:	7f 89 00 00 	cmpw    cr7,r9,r0
    a6a0:	40 9c 00 1c 	bge-    cr7,a6bc <svcauth_gss_handle_init+0xae0>
	    h->expiry_time < cd->nextcheck)
		cd->nextcheck = h->expiry_time;
    a6a4:	80 01 00 ec 	lwz     r0,236(r1)
    a6a8:	7c 0a 03 78 	mr      r10,r0
    a6ac:	81 2a 00 04 	lwz     r9,4(r10)
    a6b0:	80 01 00 f0 	lwz     r0,240(r1)
    a6b4:	7c 0b 03 78 	mr      r11,r0
    a6b8:	91 2b 00 44 	stw     r9,68(r11)
	kref_put(&h->ref, cd->cache_put);
    a6bc:	80 01 00 ec 	lwz     r0,236(r1)
    a6c0:	31 20 00 0c 	addic   r9,r0,12
    a6c4:	80 01 00 f0 	lwz     r0,240(r1)
    a6c8:	7c 0a 03 78 	mr      r10,r0
    a6cc:	80 0a 00 14 	lwz     r0,20(r10)
    a6d0:	7d 23 4b 78 	mr      r3,r9
    a6d4:	7c 04 03 78 	mr      r4,r0
    a6d8:	48 00 00 01 	bl      a6d8 <svcauth_gss_handle_init+0xafc>
	return ret;
    a6dc:	80 01 00 08 	lwz     r0,8(r1)
}
    a6e0:	7c 03 03 78 	mr      r3,r0
    a6e4:	80 01 01 64 	lwz     r0,356(r1)
    a6e8:	7c 08 03 a6 	mtlr    r0
    a6ec:	83 e1 01 5c 	lwz     r31,348(r1)
    a6f0:	38 21 01 60 	addi    r1,r1,352
    a6f4:	4e 80 00 20 	blr

0000a6f8 <svcauth_gss_accept>:
 * In the context establishment and destruction case we encode
 * response here and return SVC_COMPLETE.
 */
static int
svcauth_gss_accept(struct svc_rqst *rqstp, __be32 *authp)
{
    a6f8:	94 21 fe d0 	stwu    r1,-304(r1)
    a6fc:	7c 08 02 a6 	mflr    r0
    a700:	90 01 01 34 	stw     r0,308(r1)
    a704:	93 e1 01 2c 	stw     r31,300(r1)
    a708:	90 61 01 18 	stw     r3,280(r1)
    a70c:	90 81 01 1c 	stw     r4,284(r1)
	struct kvec	*argv = &rqstp->rq_arg.head[0];
    a710:	80 01 01 18 	lwz     r0,280(r1)
    a714:	30 00 00 c8 	addic   r0,r0,200
    a718:	90 01 00 14 	stw     r0,20(r1)
	struct kvec	*resv = &rqstp->rq_res.head[0];
    a71c:	80 01 01 18 	lwz     r0,280(r1)
    a720:	30 00 00 f0 	addic   r0,r0,240
    a724:	90 01 00 18 	stw     r0,24(r1)
	u32		crlen;
	struct gss_svc_data *svcdata = rqstp->rq_auth_data;
    a728:	80 01 01 18 	lwz     r0,280(r1)
    a72c:	7c 08 03 78 	mr      r8,r0
    a730:	80 08 0d 74 	lwz     r0,3444(r8)
    a734:	90 01 00 08 	stw     r0,8(r1)
	struct rpc_gss_wire_cred *gc;
	struct rsc	*rsci = NULL;
    a738:	38 00 00 00 	li      r0,0
    a73c:	90 01 00 0c 	stw     r0,12(r1)
	__be32		*rpcstart;
	__be32		*reject_stat = resv->iov_base + resv->iov_len;
    a740:	80 01 00 18 	lwz     r0,24(r1)
    a744:	7c 0a 03 78 	mr      r10,r0
    a748:	81 2a 00 00 	lwz     r9,0(r10)
    a74c:	80 01 00 18 	lwz     r0,24(r1)
    a750:	7c 0b 03 78 	mr      r11,r0
    a754:	80 0b 00 04 	lwz     r0,4(r11)
    a758:	7c 09 02 14 	add     r0,r9,r0
    a75c:	90 01 00 1c 	stw     r0,28(r1)
	int		ret;

	dprintk("RPC:       svcauth_gss: argv->iov_len = %zd\n",
    a760:	3c 00 00 00 	lis     r0,0
    a764:	7c 08 03 78 	mr      r8,r0
    a768:	80 08 00 00 	lwz     r0,0(r8)
    a76c:	54 00 06 f6 	rlwinm  r0,r0,0,27,27
    a770:	2f 80 00 00 	cmpwi   cr7,r0,0
    a774:	7c 00 00 26 	mfcr    r0
    a778:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
    a77c:	68 00 00 01 	xori    r0,r0,1
    a780:	2f 80 00 00 	cmpwi   cr7,r0,0
    a784:	41 9e 00 20 	beq-    cr7,a7a4 <svcauth_gss_accept+0xac>
    a788:	80 01 00 14 	lwz     r0,20(r1)
    a78c:	7c 09 03 78 	mr      r9,r0
    a790:	80 09 00 04 	lwz     r0,4(r9)
    a794:	3d 20 00 00 	lis     r9,0
    a798:	38 69 00 ec 	addi    r3,r9,236
    a79c:	7c 04 03 78 	mr      r4,r0
    a7a0:	48 00 00 01 	bl      a7a0 <svcauth_gss_accept+0xa8>
			argv->iov_len);

	*authp = rpc_autherr_badcred;
    a7a4:	80 01 01 1c 	lwz     r0,284(r1)
    a7a8:	39 20 00 01 	li      r9,1
    a7ac:	7c 0a 03 78 	mr      r10,r0
    a7b0:	91 2a 00 00 	stw     r9,0(r10)
	if (!svcdata)
    a7b4:	80 01 00 08 	lwz     r0,8(r1)
    a7b8:	2f 80 00 00 	cmpwi   cr7,r0,0
    a7bc:	40 9e 00 28 	bne-    cr7,a7e4 <svcauth_gss_accept+0xec>
    a7c0:	38 00 00 20 	li      r0,32
    a7c4:	90 01 00 2c 	stw     r0,44(r1)
    a7c8:	38 00 00 d0 	li      r0,208
    a7cc:	90 01 00 30 	stw     r0,48(r1)
    a7d0:	80 61 00 2c 	lwz     r3,44(r1)
    a7d4:	80 81 00 30 	lwz     r4,48(r1)
    a7d8:	48 00 00 01 	bl      a7d8 <svcauth_gss_accept+0xe0>
    a7dc:	7c 60 1b 78 	mr      r0,r3
		svcdata = kmalloc(sizeof(*svcdata), GFP_KERNEL);
    a7e0:	90 01 00 08 	stw     r0,8(r1)
	if (!svcdata)
    a7e4:	80 01 00 08 	lwz     r0,8(r1)
    a7e8:	2f 80 00 00 	cmpwi   cr7,r0,0
    a7ec:	41 9e 0a 00 	beq-    cr7,b1ec <svcauth_gss_accept+0xaf4>
		goto auth_err;
	rqstp->rq_auth_data = svcdata;
    a7f0:	80 01 01 18 	lwz     r0,280(r1)
    a7f4:	81 21 00 08 	lwz     r9,8(r1)
    a7f8:	7c 0b 03 78 	mr      r11,r0
    a7fc:	91 2b 0d 74 	stw     r9,3444(r11)
	svcdata->verf_start = NULL;
    a800:	80 01 00 08 	lwz     r0,8(r1)
    a804:	39 20 00 00 	li      r9,0
    a808:	7c 08 03 78 	mr      r8,r0
    a80c:	91 28 00 18 	stw     r9,24(r8)
	svcdata->rsci = NULL;
    a810:	80 01 00 08 	lwz     r0,8(r1)
    a814:	39 20 00 00 	li      r9,0
    a818:	7c 0a 03 78 	mr      r10,r0
    a81c:	91 2a 00 1c 	stw     r9,28(r10)
	gc = &svcdata->clcred;
    a820:	80 01 00 08 	lwz     r0,8(r1)
    a824:	90 01 00 20 	stw     r0,32(r1)

	/* start of rpc packet is 7 u32's back from here:
	 * xid direction rpcversion prog vers proc flavour
	 */
	rpcstart = argv->iov_base;
    a828:	80 01 00 14 	lwz     r0,20(r1)
    a82c:	7c 0b 03 78 	mr      r11,r0
    a830:	80 0b 00 00 	lwz     r0,0(r11)
    a834:	90 01 00 24 	stw     r0,36(r1)
	rpcstart -= 7;
    a838:	80 01 00 24 	lwz     r0,36(r1)
    a83c:	30 00 ff e4 	addic   r0,r0,-28
    a840:	90 01 00 24 	stw     r0,36(r1)
	/* credential is:
	 *   version(==1), proc(0,1,2,3), seq, service (1,2,3), handle
	 * at least 5 u32s, and is preceeded by length, so that makes 6.
	 */

	if (argv->iov_len < 5 * 4)
    a844:	80 01 00 14 	lwz     r0,20(r1)
    a848:	7c 08 03 78 	mr      r8,r0
    a84c:	80 08 00 04 	lwz     r0,4(r8)
    a850:	2b 80 00 13 	cmplwi  cr7,r0,19
    a854:	40 9d 09 a0 	ble-    cr7,b1f4 <svcauth_gss_accept+0xafc>
		goto auth_err;
    a858:	80 01 00 14 	lwz     r0,20(r1)
    a85c:	90 01 00 34 	stw     r0,52(r1)
				+ 2 + 1)

static inline u32 svc_getnl(struct kvec *iov)
{
	__be32 val, *vp;
	vp = iov->iov_base;
    a860:	80 01 00 34 	lwz     r0,52(r1)
    a864:	7c 09 03 78 	mr      r9,r0
    a868:	80 09 00 00 	lwz     r0,0(r9)
    a86c:	90 01 00 38 	stw     r0,56(r1)
	val = *vp++;
    a870:	80 01 00 38 	lwz     r0,56(r1)
    a874:	7c 0a 03 78 	mr      r10,r0
    a878:	80 0a 00 00 	lwz     r0,0(r10)
    a87c:	90 01 00 3c 	stw     r0,60(r1)
    a880:	80 01 00 38 	lwz     r0,56(r1)
    a884:	30 00 00 04 	addic   r0,r0,4
    a888:	90 01 00 38 	stw     r0,56(r1)
	iov->iov_base = (void*)vp;
    a88c:	80 01 00 34 	lwz     r0,52(r1)
    a890:	81 21 00 38 	lwz     r9,56(r1)
    a894:	7c 0b 03 78 	mr      r11,r0
    a898:	91 2b 00 00 	stw     r9,0(r11)
	iov->iov_len -= sizeof(__be32);
    a89c:	80 01 00 34 	lwz     r0,52(r1)
    a8a0:	7c 08 03 78 	mr      r8,r0
    a8a4:	80 08 00 04 	lwz     r0,4(r8)
    a8a8:	31 20 ff fc 	addic   r9,r0,-4
    a8ac:	80 01 00 34 	lwz     r0,52(r1)
    a8b0:	7c 0a 03 78 	mr      r10,r0
    a8b4:	91 2a 00 04 	stw     r9,4(r10)
	return ntohl(val);
    a8b8:	80 01 00 3c 	lwz     r0,60(r1)
	crlen = svc_getnl(argv);
    a8bc:	90 01 00 28 	stw     r0,40(r1)
    a8c0:	80 01 00 14 	lwz     r0,20(r1)
    a8c4:	90 01 00 40 	stw     r0,64(r1)
				+ 2 + 1)

static inline u32 svc_getnl(struct kvec *iov)
{
	__be32 val, *vp;
	vp = iov->iov_base;
    a8c8:	80 01 00 40 	lwz     r0,64(r1)
    a8cc:	7c 0b 03 78 	mr      r11,r0
    a8d0:	80 0b 00 00 	lwz     r0,0(r11)
    a8d4:	90 01 00 44 	stw     r0,68(r1)
	val = *vp++;
    a8d8:	80 01 00 44 	lwz     r0,68(r1)
    a8dc:	7c 08 03 78 	mr      r8,r0
    a8e0:	80 08 00 00 	lwz     r0,0(r8)
    a8e4:	90 01 00 48 	stw     r0,72(r1)
    a8e8:	80 01 00 44 	lwz     r0,68(r1)
    a8ec:	30 00 00 04 	addic   r0,r0,4
    a8f0:	90 01 00 44 	stw     r0,68(r1)
	iov->iov_base = (void*)vp;
    a8f4:	80 01 00 40 	lwz     r0,64(r1)
    a8f8:	81 21 00 44 	lwz     r9,68(r1)
    a8fc:	7c 0a 03 78 	mr      r10,r0
    a900:	91 2a 00 00 	stw     r9,0(r10)
	iov->iov_len -= sizeof(__be32);
    a904:	80 01 00 40 	lwz     r0,64(r1)
    a908:	7c 0b 03 78 	mr      r11,r0
    a90c:	80 0b 00 04 	lwz     r0,4(r11)
    a910:	31 20 ff fc 	addic   r9,r0,-4
    a914:	80 01 00 40 	lwz     r0,64(r1)
    a918:	7c 08 03 78 	mr      r8,r0
    a91c:	91 28 00 04 	stw     r9,4(r8)
	return ntohl(val);
    a920:	80 01 00 48 	lwz     r0,72(r1)
	if (svc_getnl(argv) != RPC_GSS_VERSION)
    a924:	2f 80 00 01 	cmpwi   cr7,r0,1
    a928:	40 9e 08 d4 	bne-    cr7,b1fc <svcauth_gss_accept+0xb04>
		goto auth_err;
    a92c:	80 01 00 14 	lwz     r0,20(r1)
    a930:	90 01 00 4c 	stw     r0,76(r1)
				+ 2 + 1)

static inline u32 svc_getnl(struct kvec *iov)
{
	__be32 val, *vp;
	vp = iov->iov_base;
    a934:	80 01 00 4c 	lwz     r0,76(r1)
    a938:	7c 09 03 78 	mr      r9,r0
    a93c:	80 09 00 00 	lwz     r0,0(r9)
    a940:	90 01 00 50 	stw     r0,80(r1)
	val = *vp++;
    a944:	80 01 00 50 	lwz     r0,80(r1)
    a948:	7c 0a 03 78 	mr      r10,r0
    a94c:	80 0a 00 00 	lwz     r0,0(r10)
    a950:	90 01 00 54 	stw     r0,84(r1)
    a954:	80 01 00 50 	lwz     r0,80(r1)
    a958:	30 00 00 04 	addic   r0,r0,4
    a95c:	90 01 00 50 	stw     r0,80(r1)
	iov->iov_base = (void*)vp;
    a960:	80 01 00 4c 	lwz     r0,76(r1)
    a964:	81 21 00 50 	lwz     r9,80(r1)
    a968:	7c 0b 03 78 	mr      r11,r0
    a96c:	91 2b 00 00 	stw     r9,0(r11)
	iov->iov_len -= sizeof(__be32);
    a970:	80 01 00 4c 	lwz     r0,76(r1)
    a974:	7c 08 03 78 	mr      r8,r0
    a978:	80 08 00 04 	lwz     r0,4(r8)
    a97c:	31 20 ff fc 	addic   r9,r0,-4
    a980:	80 01 00 4c 	lwz     r0,76(r1)
    a984:	7c 0a 03 78 	mr      r10,r0
    a988:	91 2a 00 04 	stw     r9,4(r10)
	return ntohl(val);
    a98c:	80 01 00 54 	lwz     r0,84(r1)
	gc->gc_proc = svc_getnl(argv);
    a990:	7c 09 03 78 	mr      r9,r0
    a994:	80 01 00 20 	lwz     r0,32(r1)
    a998:	7c 0b 03 78 	mr      r11,r0
    a99c:	91 2b 00 04 	stw     r9,4(r11)
    a9a0:	80 01 00 14 	lwz     r0,20(r1)
    a9a4:	90 01 00 58 	stw     r0,88(r1)
				+ 2 + 1)

static inline u32 svc_getnl(struct kvec *iov)
{
	__be32 val, *vp;
	vp = iov->iov_base;
    a9a8:	80 01 00 58 	lwz     r0,88(r1)
    a9ac:	7c 08 03 78 	mr      r8,r0
    a9b0:	80 08 00 00 	lwz     r0,0(r8)
    a9b4:	90 01 00 5c 	stw     r0,92(r1)
	val = *vp++;
    a9b8:	80 01 00 5c 	lwz     r0,92(r1)
    a9bc:	7c 09 03 78 	mr      r9,r0
    a9c0:	80 09 00 00 	lwz     r0,0(r9)
    a9c4:	90 01 00 60 	stw     r0,96(r1)
    a9c8:	80 01 00 5c 	lwz     r0,92(r1)
    a9cc:	30 00 00 04 	addic   r0,r0,4
    a9d0:	90 01 00 5c 	stw     r0,92(r1)
	iov->iov_base = (void*)vp;
    a9d4:	80 01 00 58 	lwz     r0,88(r1)
    a9d8:	81 21 00 5c 	lwz     r9,92(r1)
    a9dc:	7c 0a 03 78 	mr      r10,r0
    a9e0:	91 2a 00 00 	stw     r9,0(r10)
	iov->iov_len -= sizeof(__be32);
    a9e4:	80 01 00 58 	lwz     r0,88(r1)
    a9e8:	7c 0b 03 78 	mr      r11,r0
    a9ec:	80 0b 00 04 	lwz     r0,4(r11)
    a9f0:	31 20 ff fc 	addic   r9,r0,-4
    a9f4:	80 01 00 58 	lwz     r0,88(r1)
    a9f8:	7c 08 03 78 	mr      r8,r0
    a9fc:	91 28 00 04 	stw     r9,4(r8)
	return ntohl(val);
    aa00:	80 01 00 60 	lwz     r0,96(r1)
	gc->gc_seq = svc_getnl(argv);
    aa04:	7c 09 03 78 	mr      r9,r0
    aa08:	80 01 00 20 	lwz     r0,32(r1)
    aa0c:	7c 0a 03 78 	mr      r10,r0
    aa10:	91 2a 00 08 	stw     r9,8(r10)
    aa14:	80 01 00 14 	lwz     r0,20(r1)
    aa18:	90 01 00 64 	stw     r0,100(r1)
				+ 2 + 1)

static inline u32 svc_getnl(struct kvec *iov)
{
	__be32 val, *vp;
	vp = iov->iov_base;
    aa1c:	80 01 00 64 	lwz     r0,100(r1)
    aa20:	7c 0b 03 78 	mr      r11,r0
    aa24:	80 0b 00 00 	lwz     r0,0(r11)
    aa28:	90 01 00 68 	stw     r0,104(r1)
	val = *vp++;
    aa2c:	80 01 00 68 	lwz     r0,104(r1)
    aa30:	7c 08 03 78 	mr      r8,r0
    aa34:	80 08 00 00 	lwz     r0,0(r8)
    aa38:	90 01 00 6c 	stw     r0,108(r1)
    aa3c:	80 01 00 68 	lwz     r0,104(r1)
    aa40:	30 00 00 04 	addic   r0,r0,4
    aa44:	90 01 00 68 	stw     r0,104(r1)
	iov->iov_base = (void*)vp;
    aa48:	80 01 00 64 	lwz     r0,100(r1)
    aa4c:	81 21 00 68 	lwz     r9,104(r1)
    aa50:	7c 0a 03 78 	mr      r10,r0
    aa54:	91 2a 00 00 	stw     r9,0(r10)
	iov->iov_len -= sizeof(__be32);
    aa58:	80 01 00 64 	lwz     r0,100(r1)
    aa5c:	7c 0b 03 78 	mr      r11,r0
    aa60:	80 0b 00 04 	lwz     r0,4(r11)
    aa64:	31 20 ff fc 	addic   r9,r0,-4
    aa68:	80 01 00 64 	lwz     r0,100(r1)
    aa6c:	7c 08 03 78 	mr      r8,r0
    aa70:	91 28 00 04 	stw     r9,4(r8)
	return ntohl(val);
    aa74:	80 01 00 6c 	lwz     r0,108(r1)
	gc->gc_svc = svc_getnl(argv);
    aa78:	7c 09 03 78 	mr      r9,r0
    aa7c:	80 01 00 20 	lwz     r0,32(r1)
    aa80:	7c 0a 03 78 	mr      r10,r0
    aa84:	91 2a 00 0c 	stw     r9,12(r10)
	if (svc_safe_getnetobj(argv, &gc->gc_ctx))
    aa88:	80 01 00 20 	lwz     r0,32(r1)
    aa8c:	30 00 00 10 	addic   r0,r0,16
    aa90:	81 21 00 14 	lwz     r9,20(r1)
    aa94:	91 21 00 70 	stw     r9,112(r1)
    aa98:	90 01 00 74 	stw     r0,116(r1)
static inline int
svc_safe_getnetobj(struct kvec *argv, struct xdr_netobj *o)
{
	int l;

	if (argv->iov_len < 4)
    aa9c:	80 01 00 70 	lwz     r0,112(r1)
    aaa0:	7c 0b 03 78 	mr      r11,r0
    aaa4:	80 0b 00 04 	lwz     r0,4(r11)
    aaa8:	2b 80 00 03 	cmplwi  cr7,r0,3
    aaac:	41 9d 00 0c 	bgt-    cr7,aab8 <svcauth_gss_accept+0x3c0>
		return -1;
    aab0:	38 00 ff ff 	li      r0,-1
    aab4:	48 00 01 14 	b       abc8 <svcauth_gss_accept+0x4d0>
    aab8:	80 01 00 70 	lwz     r0,112(r1)
    aabc:	90 01 00 78 	stw     r0,120(r1)
				+ 2 + 1)

static inline u32 svc_getnl(struct kvec *iov)
{
	__be32 val, *vp;
	vp = iov->iov_base;
    aac0:	80 01 00 78 	lwz     r0,120(r1)
    aac4:	7c 08 03 78 	mr      r8,r0
    aac8:	80 08 00 00 	lwz     r0,0(r8)
    aacc:	90 01 00 7c 	stw     r0,124(r1)
	val = *vp++;
    aad0:	80 01 00 7c 	lwz     r0,124(r1)
    aad4:	7c 09 03 78 	mr      r9,r0
    aad8:	80 09 00 00 	lwz     r0,0(r9)
    aadc:	90 01 00 80 	stw     r0,128(r1)
    aae0:	80 01 00 7c 	lwz     r0,124(r1)
    aae4:	30 00 00 04 	addic   r0,r0,4
    aae8:	90 01 00 7c 	stw     r0,124(r1)
	iov->iov_base = (void*)vp;
    aaec:	80 01 00 78 	lwz     r0,120(r1)
    aaf0:	81 21 00 7c 	lwz     r9,124(r1)
    aaf4:	7c 0a 03 78 	mr      r10,r0
    aaf8:	91 2a 00 00 	stw     r9,0(r10)
	iov->iov_len -= sizeof(__be32);
    aafc:	80 01 00 78 	lwz     r0,120(r1)
    ab00:	7c 0b 03 78 	mr      r11,r0
    ab04:	80 0b 00 04 	lwz     r0,4(r11)
    ab08:	31 20 ff fc 	addic   r9,r0,-4
    ab0c:	80 01 00 78 	lwz     r0,120(r1)
    ab10:	7c 08 03 78 	mr      r8,r0
    ab14:	91 28 00 04 	stw     r9,4(r8)
	return ntohl(val);
    ab18:	80 01 00 80 	lwz     r0,128(r1)
	o->len = svc_getnl(argv);
    ab1c:	7c 09 03 78 	mr      r9,r0
    ab20:	80 01 00 74 	lwz     r0,116(r1)
    ab24:	7c 0a 03 78 	mr      r10,r0
    ab28:	91 2a 00 00 	stw     r9,0(r10)
	l = round_up_to_quad(o->len);
    ab2c:	80 01 00 74 	lwz     r0,116(r1)
    ab30:	7c 0b 03 78 	mr      r11,r0
    ab34:	80 0b 00 00 	lwz     r0,0(r11)
    ab38:	90 01 00 84 	stw     r0,132(r1)
	return 0;
}

static inline u32 round_up_to_quad(u32 i)
{
	return (i + 3 ) & ~3;
    ab3c:	80 01 00 84 	lwz     r0,132(r1)
    ab40:	30 00 00 03 	addic   r0,r0,3
    ab44:	54 00 00 3a 	rlwinm  r0,r0,0,0,29
	int l;

	if (argv->iov_len < 4)
		return -1;
	o->len = svc_getnl(argv);
	l = round_up_to_quad(o->len);
    ab48:	90 01 00 88 	stw     r0,136(r1)
	if (argv->iov_len < l)
    ab4c:	80 01 00 70 	lwz     r0,112(r1)
    ab50:	7c 08 03 78 	mr      r8,r0
    ab54:	81 28 00 04 	lwz     r9,4(r8)
    ab58:	80 01 00 88 	lwz     r0,136(r1)
    ab5c:	7f 89 00 40 	cmplw   cr7,r9,r0
    ab60:	40 9c 00 0c 	bge-    cr7,ab6c <svcauth_gss_accept+0x474>
		return -1;
    ab64:	38 00 ff ff 	li      r0,-1
    ab68:	48 00 00 60 	b       abc8 <svcauth_gss_accept+0x4d0>
	o->data = argv->iov_base;
    ab6c:	80 01 00 70 	lwz     r0,112(r1)
    ab70:	7c 0a 03 78 	mr      r10,r0
    ab74:	81 2a 00 00 	lwz     r9,0(r10)
    ab78:	80 01 00 74 	lwz     r0,116(r1)
    ab7c:	7c 0b 03 78 	mr      r11,r0
    ab80:	91 2b 00 04 	stw     r9,4(r11)
	argv->iov_base += l;
    ab84:	80 01 00 70 	lwz     r0,112(r1)
    ab88:	7c 08 03 78 	mr      r8,r0
    ab8c:	81 28 00 00 	lwz     r9,0(r8)
    ab90:	80 01 00 88 	lwz     r0,136(r1)
    ab94:	7d 29 02 14 	add     r9,r9,r0
    ab98:	80 01 00 70 	lwz     r0,112(r1)
    ab9c:	7c 0a 03 78 	mr      r10,r0
    aba0:	91 2a 00 00 	stw     r9,0(r10)
	argv->iov_len -= l;
    aba4:	80 01 00 70 	lwz     r0,112(r1)
    aba8:	7c 0b 03 78 	mr      r11,r0
    abac:	81 2b 00 04 	lwz     r9,4(r11)
    abb0:	80 01 00 88 	lwz     r0,136(r1)
    abb4:	7d 20 48 50 	subf    r9,r0,r9
    abb8:	80 01 00 70 	lwz     r0,112(r1)
    abbc:	7c 08 03 78 	mr      r8,r0
    abc0:	91 28 00 04 	stw     r9,4(r8)
	return 0;
    abc4:	38 00 00 00 	li      r0,0
	if (svc_getnl(argv) != RPC_GSS_VERSION)
		goto auth_err;
	gc->gc_proc = svc_getnl(argv);
	gc->gc_seq = svc_getnl(argv);
	gc->gc_svc = svc_getnl(argv);
	if (svc_safe_getnetobj(argv, &gc->gc_ctx))
    abc8:	2f 80 00 00 	cmpwi   cr7,r0,0
    abcc:	40 9e 06 38 	bne-    cr7,b204 <svcauth_gss_accept+0xb0c>
		goto auth_err;
	if (crlen != round_up_to_quad(gc->gc_ctx.len) + 5 * 4)
    abd0:	80 01 00 20 	lwz     r0,32(r1)
    abd4:	7c 09 03 78 	mr      r9,r0
    abd8:	80 09 00 10 	lwz     r0,16(r9)
    abdc:	90 01 00 8c 	stw     r0,140(r1)
	return 0;
}

static inline u32 round_up_to_quad(u32 i)
{
	return (i + 3 ) & ~3;
    abe0:	80 01 00 8c 	lwz     r0,140(r1)
    abe4:	30 00 00 03 	addic   r0,r0,3
    abe8:	54 00 00 3a 	rlwinm  r0,r0,0,0,29
	gc->gc_proc = svc_getnl(argv);
	gc->gc_seq = svc_getnl(argv);
	gc->gc_svc = svc_getnl(argv);
	if (svc_safe_getnetobj(argv, &gc->gc_ctx))
		goto auth_err;
	if (crlen != round_up_to_quad(gc->gc_ctx.len) + 5 * 4)
    abec:	31 20 00 14 	addic   r9,r0,20
    abf0:	80 01 00 28 	lwz     r0,40(r1)
    abf4:	7f 89 00 00 	cmpw    cr7,r9,r0
    abf8:	40 9e 06 14 	bne-    cr7,b20c <svcauth_gss_accept+0xb14>
		goto auth_err;

	if ((gc->gc_proc != RPC_GSS_PROC_DATA) && (rqstp->rq_proc != 0))
    abfc:	80 01 00 20 	lwz     r0,32(r1)
    ac00:	7c 0a 03 78 	mr      r10,r0
    ac04:	80 0a 00 04 	lwz     r0,4(r10)
    ac08:	2f 80 00 00 	cmpwi   cr7,r0,0
    ac0c:	41 9e 00 18 	beq-    cr7,ac24 <svcauth_gss_accept+0x52c>
    ac10:	80 01 01 18 	lwz     r0,280(r1)
    ac14:	7c 0b 03 78 	mr      r11,r0
    ac18:	80 0b 0d 50 	lwz     r0,3408(r11)
    ac1c:	2f 80 00 00 	cmpwi   cr7,r0,0
    ac20:	40 9e 05 f4 	bne-    cr7,b214 <svcauth_gss_accept+0xb1c>
		goto auth_err;

	*authp = rpc_autherr_badverf;
    ac24:	80 01 01 1c 	lwz     r0,284(r1)
    ac28:	39 20 00 03 	li      r9,3
    ac2c:	7c 08 03 78 	mr      r8,r0
    ac30:	91 28 00 00 	stw     r9,0(r8)
	switch (gc->gc_proc) {
    ac34:	80 01 00 20 	lwz     r0,32(r1)
    ac38:	7c 09 03 78 	mr      r9,r0
    ac3c:	80 09 00 04 	lwz     r0,4(r9)
    ac40:	2b 80 00 02 	cmplwi  cr7,r0,2
    ac44:	41 9d 00 10 	bgt-    cr7,ac54 <svcauth_gss_accept+0x55c>
    ac48:	2b 80 00 01 	cmplwi  cr7,r0,1
    ac4c:	40 9c 00 14 	bge-    cr7,ac60 <svcauth_gss_accept+0x568>
    ac50:	48 00 00 28 	b       ac78 <svcauth_gss_accept+0x580>
    ac54:	2f 80 00 03 	cmpwi   cr7,r0,3
    ac58:	41 9e 00 20 	beq-    cr7,ac78 <svcauth_gss_accept+0x580>
    ac5c:	48 00 00 98 	b       acf4 <svcauth_gss_accept+0x5fc>
	case RPC_GSS_PROC_INIT:
	case RPC_GSS_PROC_CONTINUE_INIT:
		return svcauth_gss_handle_init(rqstp, gc, authp);
    ac60:	80 61 01 18 	lwz     r3,280(r1)
    ac64:	80 81 00 20 	lwz     r4,32(r1)
    ac68:	80 a1 01 1c 	lwz     r5,284(r1)
    ac6c:	4b ff ef 71 	bl      9bdc <svcauth_gss_handle_init>
    ac70:	7c 60 1b 78 	mr      r0,r3
    ac74:	48 00 06 d0 	b       b344 <svcauth_gss_accept+0xc4c>
	case RPC_GSS_PROC_DATA:
	case RPC_GSS_PROC_DESTROY:
		/* Look up the context, and check the verifier: */
		*authp = rpcsec_gsserr_credproblem;
    ac78:	80 01 01 1c 	lwz     r0,284(r1)
    ac7c:	39 20 00 0d 	li      r9,13
    ac80:	7c 0a 03 78 	mr      r10,r0
    ac84:	91 2a 00 00 	stw     r9,0(r10)
		rsci = gss_svc_searchbyctx(&gc->gc_ctx);
    ac88:	80 01 00 20 	lwz     r0,32(r1)
    ac8c:	30 00 00 10 	addic   r0,r0,16
    ac90:	7c 03 03 78 	mr      r3,r0
    ac94:	4b ff db f9 	bl      888c <gss_svc_searchbyctx>
    ac98:	90 61 00 0c 	stw     r3,12(r1)
		if (!rsci)
    ac9c:	80 01 00 0c 	lwz     r0,12(r1)
    aca0:	2f 80 00 00 	cmpwi   cr7,r0,0
    aca4:	41 9e 05 78 	beq-    cr7,b21c <svcauth_gss_accept+0xb24>
			goto auth_err;
		switch (gss_verify_header(rqstp, rsci, rpcstart, gc, authp)) {
    aca8:	80 61 01 18 	lwz     r3,280(r1)
    acac:	80 81 00 0c 	lwz     r4,12(r1)
    acb0:	80 a1 00 24 	lwz     r5,36(r1)
    acb4:	80 c1 00 20 	lwz     r6,32(r1)
    acb8:	80 e1 01 1c 	lwz     r7,284(r1)
    acbc:	4b ff df a9 	bl      8c64 <gss_verify_header>
    acc0:	7c 60 1b 78 	mr      r0,r3
    acc4:	2f 80 00 06 	cmpwi   cr7,r0,6
    acc8:	41 9e 05 c4 	beq-    cr7,b28c <svcauth_gss_accept+0xb94>
    accc:	2f 80 00 08 	cmpwi   cr7,r0,8
    acd0:	41 9e 05 54 	beq-    cr7,b224 <svcauth_gss_accept+0xb2c>
		case SVC_OK:
			break;
    acd4:	60 00 00 00 	nop
		case SVC_DENIED:
			goto auth_err;
		case SVC_DROP:
			goto drop;
		}
		break;
    acd8:	60 00 00 00 	nop
		*authp = rpc_autherr_rejectedcred;
		goto auth_err;
	}

	/* now act upon the command: */
	switch (gc->gc_proc) {
    acdc:	80 01 00 20 	lwz     r0,32(r1)
    ace0:	7c 0b 03 78 	mr      r11,r0
    ace4:	80 0b 00 04 	lwz     r0,4(r11)
    ace8:	2f 80 00 00 	cmpwi   cr7,r0,0
    acec:	41 9e 01 70 	beq-    cr7,ae5c <svcauth_gss_accept+0x764>
    acf0:	48 00 00 18 	b       ad08 <svcauth_gss_accept+0x610>
		case SVC_DROP:
			goto drop;
		}
		break;
	default:
		*authp = rpc_autherr_rejectedcred;
    acf4:	80 01 01 1c 	lwz     r0,284(r1)
    acf8:	39 20 00 02 	li      r9,2
    acfc:	7c 08 03 78 	mr      r8,r0
    ad00:	91 28 00 00 	stw     r9,0(r8)
		goto auth_err;
    ad04:	48 00 05 34 	b       b238 <svcauth_gss_accept+0xb40>
	}

	/* now act upon the command: */
	switch (gc->gc_proc) {
    ad08:	2f 80 00 03 	cmpwi   cr7,r0,3
    ad0c:	40 9e 04 d4 	bne-    cr7,b1e0 <svcauth_gss_accept+0xae8>
	case RPC_GSS_PROC_DESTROY:
		if (gss_write_verf(rqstp, rsci->mechctx, gc->gc_seq))
    ad10:	80 01 00 0c 	lwz     r0,12(r1)
    ad14:	7c 0a 03 78 	mr      r10,r0
    ad18:	81 2a 00 3c 	lwz     r9,60(r10)
    ad1c:	80 01 00 20 	lwz     r0,32(r1)
    ad20:	7c 0b 03 78 	mr      r11,r0
    ad24:	80 0b 00 08 	lwz     r0,8(r11)
    ad28:	80 61 01 18 	lwz     r3,280(r1)
    ad2c:	7d 24 4b 78 	mr      r4,r9
    ad30:	7c 05 03 78 	mr      r5,r0
    ad34:	4b ff e4 1d 	bl      9150 <gss_write_verf>
    ad38:	7c 60 1b 78 	mr      r0,r3
    ad3c:	2f 80 00 00 	cmpwi   cr7,r0,0
    ad40:	40 9e 04 ec 	bne-    cr7,b22c <svcauth_gss_accept+0xb34>
			goto auth_err;
		rsci->h.expiry_time = get_seconds();
    ad44:	48 00 00 01 	bl      ad44 <svcauth_gss_accept+0x64c>
    ad48:	7c 60 1b 78 	mr      r0,r3
    ad4c:	7c 09 03 78 	mr      r9,r0
    ad50:	80 01 00 0c 	lwz     r0,12(r1)
    ad54:	7c 08 03 78 	mr      r8,r0
    ad58:	91 28 00 04 	stw     r9,4(r8)
		set_bit(CACHE_NEGATIVE, &rsci->h.flags);
    ad5c:	80 01 00 0c 	lwz     r0,12(r1)
    ad60:	30 00 00 10 	addic   r0,r0,16
    ad64:	39 20 00 01 	li      r9,1
    ad68:	91 21 00 90 	stw     r9,144(r1)
    ad6c:	90 01 00 94 	stw     r0,148(r1)
DEFINE_BITOP(clear_bits_unlock, andc, PPC_RELEASE_BARRIER, "")
DEFINE_BITOP(change_bits, xor, "", "")

static __inline__ void set_bit(int nr, volatile unsigned long *addr)
{
	set_bits(BITOP_MASK(nr), addr + BITOP_WORD(nr));
    ad70:	80 01 00 90 	lwz     r0,144(r1)
    ad74:	7c 09 2e 70 	srawi   r9,r0,5
    ad78:	7d 29 01 94 	addze   r9,r9
    ad7c:	55 29 28 34 	rlwinm  r9,r9,5,0,26
    ad80:	7c 09 00 50 	subf    r0,r9,r0
    ad84:	39 20 00 01 	li      r9,1
    ad88:	7d 29 00 30 	slw     r9,r9,r0
    ad8c:	80 01 00 90 	lwz     r0,144(r1)
    ad90:	7c 00 2e 70 	srawi   r0,r0,5
    ad94:	7c 00 01 94 	addze   r0,r0
    ad98:	54 00 10 3a 	rlwinm  r0,r0,2,0,29
    ad9c:	81 61 00 94 	lwz     r11,148(r1)
    ada0:	7c 0b 02 14 	add     r0,r11,r0
    ada4:	91 21 00 98 	stw     r9,152(r1)
    ada8:	90 01 00 9c 	stw     r0,156(r1)
	: "=&r" (old), "+m" (*p)		\
	: "r" (mask), "r" (p)			\
	: "cc", "memory");			\
}

DEFINE_BITOP(set_bits, or, "", "")
    adac:	80 01 00 9c 	lwz     r0,156(r1)
    adb0:	90 01 00 a0 	stw     r0,160(r1)
    adb4:	81 41 00 a0 	lwz     r10,160(r1)
    adb8:	80 01 00 98 	lwz     r0,152(r1)
    adbc:	81 21 00 a0 	lwz     r9,160(r1)
    adc0:	81 61 00 a0 	lwz     r11,160(r1)
    adc4:	7f e0 48 28 	lwarx   r31,0,r9
    adc8:	7f ff 03 78 	or      r31,r31,r0
    adcc:	7f e0 49 2d 	stwcx.  r31,0,r9
    add0:	40 a2 ff f4 	bne-    adc4 <svcauth_gss_accept+0x6cc>
    add4:	93 e1 00 a4 	stw     r31,164(r1)
		if (resv->iov_len + 4 > PAGE_SIZE)
    add8:	80 01 00 18 	lwz     r0,24(r1)
    addc:	7c 09 03 78 	mr      r9,r0
    ade0:	80 09 00 04 	lwz     r0,4(r9)
    ade4:	30 00 00 04 	addic   r0,r0,4
    ade8:	2b 80 10 00 	cmplwi  cr7,r0,4096
    adec:	41 9d 04 a8 	bgt-    cr7,b294 <svcauth_gss_accept+0xb9c>
			goto drop;
    adf0:	80 01 00 18 	lwz     r0,24(r1)
    adf4:	90 01 00 a8 	stw     r0,168(r1)
    adf8:	38 00 00 00 	li      r0,0
    adfc:	90 01 00 ac 	stw     r0,172(r1)
}

static inline void svc_putnl(struct kvec *iov, u32 val)
{
	__be32 *vp = iov->iov_base + iov->iov_len;
    ae00:	80 01 00 a8 	lwz     r0,168(r1)
    ae04:	7c 0a 03 78 	mr      r10,r0
    ae08:	81 2a 00 00 	lwz     r9,0(r10)
    ae0c:	80 01 00 a8 	lwz     r0,168(r1)
    ae10:	7c 0b 03 78 	mr      r11,r0
    ae14:	80 0b 00 04 	lwz     r0,4(r11)
    ae18:	7c 09 02 14 	add     r0,r9,r0
    ae1c:	90 01 00 b0 	stw     r0,176(r1)
	*vp = htonl(val);
    ae20:	80 01 00 b0 	lwz     r0,176(r1)
    ae24:	81 21 00 ac 	lwz     r9,172(r1)
    ae28:	7c 08 03 78 	mr      r8,r0
    ae2c:	91 28 00 00 	stw     r9,0(r8)
	iov->iov_len += sizeof(__be32);
    ae30:	80 01 00 a8 	lwz     r0,168(r1)
    ae34:	7c 09 03 78 	mr      r9,r0
    ae38:	80 09 00 04 	lwz     r0,4(r9)
    ae3c:	31 20 00 04 	addic   r9,r0,4
    ae40:	80 01 00 a8 	lwz     r0,168(r1)
    ae44:	7c 0a 03 78 	mr      r10,r0
    ae48:	91 2a 00 04 	stw     r9,4(r10)
		svc_putnl(resv, RPC_SUCCESS);
		goto complete;
    ae4c:	60 00 00 00 	nop
	/* Restore write pointer to its original value: */
	xdr_ressize_check(rqstp, reject_stat);
	ret = SVC_DENIED;
	goto out;
complete:
	ret = SVC_COMPLETE;
    ae50:	38 00 00 0a 	li      r0,10
    ae54:	90 01 00 10 	stw     r0,16(r1)
	goto out;
    ae58:	48 00 04 48 	b       b2a0 <svcauth_gss_accept+0xba8>
		if (resv->iov_len + 4 > PAGE_SIZE)
			goto drop;
		svc_putnl(resv, RPC_SUCCESS);
		goto complete;
	case RPC_GSS_PROC_DATA:
		*authp = rpcsec_gsserr_ctxproblem;
    ae5c:	80 01 01 1c 	lwz     r0,284(r1)
    ae60:	39 20 00 0e 	li      r9,14
    ae64:	7c 0b 03 78 	mr      r11,r0
    ae68:	91 2b 00 00 	stw     r9,0(r11)
		svcdata->verf_start = resv->iov_base + resv->iov_len;
    ae6c:	80 01 00 18 	lwz     r0,24(r1)
    ae70:	7c 08 03 78 	mr      r8,r0
    ae74:	81 28 00 00 	lwz     r9,0(r8)
    ae78:	80 01 00 18 	lwz     r0,24(r1)
    ae7c:	7c 0a 03 78 	mr      r10,r0
    ae80:	80 0a 00 04 	lwz     r0,4(r10)
    ae84:	7d 29 02 14 	add     r9,r9,r0
    ae88:	80 01 00 08 	lwz     r0,8(r1)
    ae8c:	7c 0b 03 78 	mr      r11,r0
    ae90:	91 2b 00 18 	stw     r9,24(r11)
		if (gss_write_verf(rqstp, rsci->mechctx, gc->gc_seq))
    ae94:	80 01 00 0c 	lwz     r0,12(r1)
    ae98:	7c 08 03 78 	mr      r8,r0
    ae9c:	81 28 00 3c 	lwz     r9,60(r8)
    aea0:	80 01 00 20 	lwz     r0,32(r1)
    aea4:	7c 0a 03 78 	mr      r10,r0
    aea8:	80 0a 00 08 	lwz     r0,8(r10)
    aeac:	80 61 01 18 	lwz     r3,280(r1)
    aeb0:	7d 24 4b 78 	mr      r4,r9
    aeb4:	7c 05 03 78 	mr      r5,r0
    aeb8:	4b ff e2 99 	bl      9150 <gss_write_verf>
    aebc:	7c 60 1b 78 	mr      r0,r3
    aec0:	2f 80 00 00 	cmpwi   cr7,r0,0
    aec4:	40 9e 03 70 	bne-    cr7,b234 <svcauth_gss_accept+0xb3c>
			goto auth_err;
		rqstp->rq_cred = rsci->cred;
    aec8:	80 01 01 18 	lwz     r0,280(r1)
    aecc:	81 21 00 0c 	lwz     r9,12(r1)
    aed0:	81 49 00 1c 	lwz     r10,28(r9)
    aed4:	81 69 00 20 	lwz     r11,32(r9)
    aed8:	81 29 00 24 	lwz     r9,36(r9)
    aedc:	7c 08 03 78 	mr      r8,r0
    aee0:	91 48 00 ac 	stw     r10,172(r8)
    aee4:	7c 0a 03 78 	mr      r10,r0
    aee8:	91 6a 00 b0 	stw     r11,176(r10)
    aeec:	7c 0b 03 78 	mr      r11,r0
    aef0:	91 2b 00 b4 	stw     r9,180(r11)
		get_group_info(rsci->cred.cr_group_info);
    aef4:	80 01 00 0c 	lwz     r0,12(r1)
    aef8:	7c 08 03 78 	mr      r8,r0
    aefc:	80 08 00 24 	lwz     r0,36(r8)
    af00:	90 01 00 b4 	stw     r0,180(r1)
 * If the caller is accessing a task's credentials, they must hold the RCU read
 * lock when reading.
 */
static inline struct group_info *get_group_info(struct group_info *gi)
{
	atomic_inc(&gi->usage);
    af04:	80 01 00 b4 	lwz     r0,180(r1)
    af08:	90 01 00 b8 	stw     r0,184(r1)
	addic	%0,%0,1\n"
	PPC405_ERR77(0,%2)
"	stwcx.	%0,0,%2 \n\
	bne-	1b"
	: "=&r" (t), "+m" (v->counter)
	: "r" (&v->counter)
    af0c:	80 01 00 b8 	lwz     r0,184(r1)
"1:	lwarx	%0,0,%2		# atomic_inc\n\
	addic	%0,%0,1\n"
	PPC405_ERR77(0,%2)
"	stwcx.	%0,0,%2 \n\
	bne-	1b"
	: "=&r" (t), "+m" (v->counter)
    af10:	81 61 00 b8 	lwz     r11,184(r1)
    af14:	81 21 00 b8 	lwz     r9,184(r1)

static __inline__ void atomic_inc(atomic_t *v)
{
	int t;

	__asm__ __volatile__(
    af18:	7f e0 00 28 	lwarx   r31,0,r0
    af1c:	33 ff 00 01 	addic   r31,r31,1
    af20:	7f e0 01 2d 	stwcx.  r31,0,r0
    af24:	40 a2 ff f4 	bne-    af18 <svcauth_gss_accept+0x820>
    af28:	93 e1 00 bc 	stw     r31,188(r1)
		*authp = rpc_autherr_badcred;
    af2c:	80 01 01 1c 	lwz     r0,284(r1)
    af30:	39 20 00 01 	li      r9,1
    af34:	7c 0a 03 78 	mr      r10,r0
    af38:	91 2a 00 00 	stw     r9,0(r10)
		switch (gc->gc_svc) {
    af3c:	80 01 00 20 	lwz     r0,32(r1)
    af40:	7c 0b 03 78 	mr      r11,r0
    af44:	80 0b 00 0c 	lwz     r0,12(r11)
    af48:	2f 80 00 02 	cmpwi   cr7,r0,2
    af4c:	41 9e 00 18 	beq-    cr7,af64 <svcauth_gss_accept+0x86c>
    af50:	2f 80 00 03 	cmpwi   cr7,r0,3
    af54:	41 9e 01 08 	beq-    cr7,b05c <svcauth_gss_accept+0x964>
    af58:	2f 80 00 01 	cmpwi   cr7,r0,1
    af5c:	41 9e 02 00 	beq-    cr7,b15c <svcauth_gss_accept+0xa64>
    af60:	48 00 01 f8 	b       b158 <svcauth_gss_accept+0xa60>
		case RPC_GSS_SVC_NONE:
			break;
    af64:	80 01 00 18 	lwz     r0,24(r1)
    af68:	90 01 00 c0 	stw     r0,192(r1)
    af6c:	38 00 00 00 	li      r0,0
    af70:	90 01 00 c4 	stw     r0,196(r1)
	return ntohl(val);
}

static inline void svc_putnl(struct kvec *iov, u32 val)
{
	__be32 *vp = iov->iov_base + iov->iov_len;
    af74:	80 01 00 c0 	lwz     r0,192(r1)
    af78:	7c 08 03 78 	mr      r8,r0
    af7c:	81 28 00 00 	lwz     r9,0(r8)
    af80:	80 01 00 c0 	lwz     r0,192(r1)
    af84:	7c 0a 03 78 	mr      r10,r0
    af88:	80 0a 00 04 	lwz     r0,4(r10)
    af8c:	7c 09 02 14 	add     r0,r9,r0
    af90:	90 01 00 c8 	stw     r0,200(r1)
	*vp = htonl(val);
    af94:	80 01 00 c8 	lwz     r0,200(r1)
    af98:	81 21 00 c4 	lwz     r9,196(r1)
    af9c:	7c 0b 03 78 	mr      r11,r0
    afa0:	91 2b 00 00 	stw     r9,0(r11)
	iov->iov_len += sizeof(__be32);
    afa4:	80 01 00 c0 	lwz     r0,192(r1)
    afa8:	7c 08 03 78 	mr      r8,r0
    afac:	80 08 00 04 	lwz     r0,4(r8)
    afb0:	31 20 00 04 	addic   r9,r0,4
    afb4:	80 01 00 c0 	lwz     r0,192(r1)
    afb8:	7c 0a 03 78 	mr      r10,r0
    afbc:	91 2a 00 04 	stw     r9,4(r10)
    afc0:	80 01 00 18 	lwz     r0,24(r1)
    afc4:	90 01 00 cc 	stw     r0,204(r1)
    afc8:	38 00 00 00 	li      r0,0
    afcc:	90 01 00 d0 	stw     r0,208(r1)
	return ntohl(val);
}

static inline void svc_putnl(struct kvec *iov, u32 val)
{
	__be32 *vp = iov->iov_base + iov->iov_len;
    afd0:	80 01 00 cc 	lwz     r0,204(r1)
    afd4:	7c 0b 03 78 	mr      r11,r0
    afd8:	81 2b 00 00 	lwz     r9,0(r11)
    afdc:	80 01 00 cc 	lwz     r0,204(r1)
    afe0:	7c 08 03 78 	mr      r8,r0
    afe4:	80 08 00 04 	lwz     r0,4(r8)
    afe8:	7c 09 02 14 	add     r0,r9,r0
    afec:	90 01 00 d4 	stw     r0,212(r1)
	*vp = htonl(val);
    aff0:	80 01 00 d4 	lwz     r0,212(r1)
    aff4:	81 21 00 d0 	lwz     r9,208(r1)
    aff8:	7c 0a 03 78 	mr      r10,r0
    affc:	91 2a 00 00 	stw     r9,0(r10)
	iov->iov_len += sizeof(__be32);
    b000:	80 01 00 cc 	lwz     r0,204(r1)
    b004:	7c 0b 03 78 	mr      r11,r0
    b008:	80 0b 00 04 	lwz     r0,4(r11)
    b00c:	31 20 00 04 	addic   r9,r0,4
    b010:	80 01 00 cc 	lwz     r0,204(r1)
    b014:	7c 08 03 78 	mr      r8,r0
    b018:	91 28 00 04 	stw     r9,4(r8)
		case RPC_GSS_SVC_INTEGRITY:
			/* placeholders for length and seq. number: */
			svc_putnl(resv, 0);
			svc_putnl(resv, 0);
			if (unwrap_integ_data(&rqstp->rq_arg,
    b01c:	80 01 01 18 	lwz     r0,280(r1)
    b020:	31 60 00 c8 	addic   r11,r0,200
					gc->gc_seq, rsci->mechctx))
    b024:	80 01 00 20 	lwz     r0,32(r1)
			break;
		case RPC_GSS_SVC_INTEGRITY:
			/* placeholders for length and seq. number: */
			svc_putnl(resv, 0);
			svc_putnl(resv, 0);
			if (unwrap_integ_data(&rqstp->rq_arg,
    b028:	7c 0a 03 78 	mr      r10,r0
    b02c:	81 2a 00 08 	lwz     r9,8(r10)
					gc->gc_seq, rsci->mechctx))
    b030:	80 01 00 0c 	lwz     r0,12(r1)
			break;
		case RPC_GSS_SVC_INTEGRITY:
			/* placeholders for length and seq. number: */
			svc_putnl(resv, 0);
			svc_putnl(resv, 0);
			if (unwrap_integ_data(&rqstp->rq_arg,
    b034:	7c 08 03 78 	mr      r8,r0
    b038:	80 08 00 3c 	lwz     r0,60(r8)
    b03c:	7d 63 5b 78 	mr      r3,r11
    b040:	7d 24 4b 78 	mr      r4,r9
    b044:	7c 05 03 78 	mr      r5,r0
    b048:	4b ff e4 c9 	bl      9510 <unwrap_integ_data>
    b04c:	7c 60 1b 78 	mr      r0,r3
    b050:	2f 80 00 00 	cmpwi   cr7,r0,0
    b054:	41 9e 01 10 	beq-    cr7,b164 <svcauth_gss_accept+0xa6c>
					gc->gc_seq, rsci->mechctx))
				goto garbage_args;
    b058:	48 00 01 88 	b       b1e0 <svcauth_gss_accept+0xae8>
			break;
    b05c:	80 01 00 18 	lwz     r0,24(r1)
    b060:	90 01 00 d8 	stw     r0,216(r1)
    b064:	38 00 00 00 	li      r0,0
    b068:	90 01 00 dc 	stw     r0,220(r1)
	return ntohl(val);
}

static inline void svc_putnl(struct kvec *iov, u32 val)
{
	__be32 *vp = iov->iov_base + iov->iov_len;
    b06c:	80 01 00 d8 	lwz     r0,216(r1)
    b070:	7c 0a 03 78 	mr      r10,r0
    b074:	81 2a 00 00 	lwz     r9,0(r10)
    b078:	80 01 00 d8 	lwz     r0,216(r1)
    b07c:	7c 0b 03 78 	mr      r11,r0
    b080:	80 0b 00 04 	lwz     r0,4(r11)
    b084:	7c 09 02 14 	add     r0,r9,r0
    b088:	90 01 00 e0 	stw     r0,224(r1)
	*vp = htonl(val);
    b08c:	80 01 00 e0 	lwz     r0,224(r1)
    b090:	81 21 00 dc 	lwz     r9,220(r1)
    b094:	7c 08 03 78 	mr      r8,r0
    b098:	91 28 00 00 	stw     r9,0(r8)
	iov->iov_len += sizeof(__be32);
    b09c:	80 01 00 d8 	lwz     r0,216(r1)
    b0a0:	7c 09 03 78 	mr      r9,r0
    b0a4:	80 09 00 04 	lwz     r0,4(r9)
    b0a8:	31 20 00 04 	addic   r9,r0,4
    b0ac:	80 01 00 d8 	lwz     r0,216(r1)
    b0b0:	7c 0a 03 78 	mr      r10,r0
    b0b4:	91 2a 00 04 	stw     r9,4(r10)
    b0b8:	80 01 00 18 	lwz     r0,24(r1)
    b0bc:	90 01 00 e4 	stw     r0,228(r1)
    b0c0:	38 00 00 00 	li      r0,0
    b0c4:	90 01 00 e8 	stw     r0,232(r1)
	return ntohl(val);
}

static inline void svc_putnl(struct kvec *iov, u32 val)
{
	__be32 *vp = iov->iov_base + iov->iov_len;
    b0c8:	80 01 00 e4 	lwz     r0,228(r1)
    b0cc:	7c 0b 03 78 	mr      r11,r0
    b0d0:	81 2b 00 00 	lwz     r9,0(r11)
    b0d4:	80 01 00 e4 	lwz     r0,228(r1)
    b0d8:	7c 08 03 78 	mr      r8,r0
    b0dc:	80 08 00 04 	lwz     r0,4(r8)
    b0e0:	7c 09 02 14 	add     r0,r9,r0
    b0e4:	90 01 00 ec 	stw     r0,236(r1)
	*vp = htonl(val);
    b0e8:	80 01 00 ec 	lwz     r0,236(r1)
    b0ec:	81 21 00 e8 	lwz     r9,232(r1)
    b0f0:	7c 0a 03 78 	mr      r10,r0
    b0f4:	91 2a 00 00 	stw     r9,0(r10)
	iov->iov_len += sizeof(__be32);
    b0f8:	80 01 00 e4 	lwz     r0,228(r1)
    b0fc:	7c 0b 03 78 	mr      r11,r0
    b100:	80 0b 00 04 	lwz     r0,4(r11)
    b104:	31 20 00 04 	addic   r9,r0,4
    b108:	80 01 00 e4 	lwz     r0,228(r1)
    b10c:	7c 08 03 78 	mr      r8,r0
    b110:	91 28 00 04 	stw     r9,4(r8)
		case RPC_GSS_SVC_PRIVACY:
			/* placeholders for length and seq. number: */
			svc_putnl(resv, 0);
			svc_putnl(resv, 0);
			if (unwrap_priv_data(rqstp, &rqstp->rq_arg,
    b114:	80 01 01 18 	lwz     r0,280(r1)
    b118:	31 60 00 c8 	addic   r11,r0,200
					gc->gc_seq, rsci->mechctx))
    b11c:	80 01 00 20 	lwz     r0,32(r1)
			break;
		case RPC_GSS_SVC_PRIVACY:
			/* placeholders for length and seq. number: */
			svc_putnl(resv, 0);
			svc_putnl(resv, 0);
			if (unwrap_priv_data(rqstp, &rqstp->rq_arg,
    b120:	7c 0a 03 78 	mr      r10,r0
    b124:	81 2a 00 08 	lwz     r9,8(r10)
					gc->gc_seq, rsci->mechctx))
    b128:	80 01 00 0c 	lwz     r0,12(r1)
			break;
		case RPC_GSS_SVC_PRIVACY:
			/* placeholders for length and seq. number: */
			svc_putnl(resv, 0);
			svc_putnl(resv, 0);
			if (unwrap_priv_data(rqstp, &rqstp->rq_arg,
    b12c:	7c 08 03 78 	mr      r8,r0
    b130:	80 08 00 3c 	lwz     r0,60(r8)
    b134:	80 61 01 18 	lwz     r3,280(r1)
    b138:	7d 64 5b 78 	mr      r4,r11
    b13c:	7d 25 4b 78 	mr      r5,r9
    b140:	7c 06 03 78 	mr      r6,r0
    b144:	4b ff e6 c5 	bl      9808 <unwrap_priv_data>
    b148:	7c 60 1b 78 	mr      r0,r3
    b14c:	2f 80 00 00 	cmpwi   cr7,r0,0
    b150:	41 9e 00 1c 	beq-    cr7,b16c <svcauth_gss_accept+0xa74>
					gc->gc_seq, rsci->mechctx))
				goto garbage_args;
    b154:	48 00 00 8c 	b       b1e0 <svcauth_gss_accept+0xae8>
			break;
		default:
			goto auth_err;
    b158:	48 00 00 e0 	b       b238 <svcauth_gss_accept+0xb40>
		rqstp->rq_cred = rsci->cred;
		get_group_info(rsci->cred.cr_group_info);
		*authp = rpc_autherr_badcred;
		switch (gc->gc_svc) {
		case RPC_GSS_SVC_NONE:
			break;
    b15c:	60 00 00 00 	nop
    b160:	48 00 00 10 	b       b170 <svcauth_gss_accept+0xa78>
			svc_putnl(resv, 0);
			svc_putnl(resv, 0);
			if (unwrap_integ_data(&rqstp->rq_arg,
					gc->gc_seq, rsci->mechctx))
				goto garbage_args;
			break;
    b164:	60 00 00 00 	nop
    b168:	48 00 00 08 	b       b170 <svcauth_gss_accept+0xa78>
			svc_putnl(resv, 0);
			svc_putnl(resv, 0);
			if (unwrap_priv_data(rqstp, &rqstp->rq_arg,
					gc->gc_seq, rsci->mechctx))
				goto garbage_args;
			break;
    b16c:	60 00 00 00 	nop
		default:
			goto auth_err;
		}
		svcdata->rsci = rsci;
    b170:	80 01 00 08 	lwz     r0,8(r1)
    b174:	81 21 00 0c 	lwz     r9,12(r1)
    b178:	7c 0a 03 78 	mr      r10,r0
    b17c:	91 2a 00 1c 	stw     r9,28(r10)
		cache_get(&rsci->h);
    b180:	80 01 00 0c 	lwz     r0,12(r1)
    b184:	90 01 00 f0 	stw     r0,240(r1)

extern void cache_clean_deferred(void *owner);

static inline struct cache_head  *cache_get(struct cache_head *h)
{
	kref_get(&h->ref);
    b188:	80 01 00 f0 	lwz     r0,240(r1)
    b18c:	30 00 00 0c 	addic   r0,r0,12
    b190:	7c 03 03 78 	mr      r3,r0
    b194:	48 00 00 01 	bl      b194 <svcauth_gss_accept+0xa9c>
		rqstp->rq_flavor = gss_svc_to_pseudoflavor(
					rsci->mechctx->mech_type, gc->gc_svc);
    b198:	80 01 00 0c 	lwz     r0,12(r1)
    b19c:	7c 0b 03 78 	mr      r11,r0
    b1a0:	80 0b 00 3c 	lwz     r0,60(r11)
		default:
			goto auth_err;
		}
		svcdata->rsci = rsci;
		cache_get(&rsci->h);
		rqstp->rq_flavor = gss_svc_to_pseudoflavor(
    b1a4:	7c 08 03 78 	mr      r8,r0
    b1a8:	81 28 00 00 	lwz     r9,0(r8)
					rsci->mechctx->mech_type, gc->gc_svc);
    b1ac:	80 01 00 20 	lwz     r0,32(r1)
		default:
			goto auth_err;
		}
		svcdata->rsci = rsci;
		cache_get(&rsci->h);
		rqstp->rq_flavor = gss_svc_to_pseudoflavor(
    b1b0:	7c 0a 03 78 	mr      r10,r0
    b1b4:	80 0a 00 0c 	lwz     r0,12(r10)
    b1b8:	7d 23 4b 78 	mr      r3,r9
    b1bc:	7c 04 03 78 	mr      r4,r0
    b1c0:	48 00 00 01 	bl      b1c0 <svcauth_gss_accept+0xac8>
    b1c4:	7c 69 1b 78 	mr      r9,r3
    b1c8:	80 01 01 18 	lwz     r0,280(r1)
    b1cc:	7c 0b 03 78 	mr      r11,r0
    b1d0:	91 2b 00 a8 	stw     r9,168(r11)
					rsci->mechctx->mech_type, gc->gc_svc);
		ret = SVC_OK;
    b1d4:	38 00 00 05 	li      r0,5
    b1d8:	90 01 00 10 	stw     r0,16(r1)
		goto out;
    b1dc:	48 00 00 c4 	b       b2a0 <svcauth_gss_accept+0xba8>
	}
garbage_args:
	ret = SVC_GARBAGE;
    b1e0:	38 00 00 01 	li      r0,1
    b1e4:	90 01 00 10 	stw     r0,16(r1)
	goto out;
    b1e8:	48 00 00 b8 	b       b2a0 <svcauth_gss_accept+0xba8>

	*authp = rpc_autherr_badcred;
	if (!svcdata)
		svcdata = kmalloc(sizeof(*svcdata), GFP_KERNEL);
	if (!svcdata)
		goto auth_err;
    b1ec:	60 00 00 00 	nop
    b1f0:	48 00 00 48 	b       b238 <svcauth_gss_accept+0xb40>
	 *   version(==1), proc(0,1,2,3), seq, service (1,2,3), handle
	 * at least 5 u32s, and is preceeded by length, so that makes 6.
	 */

	if (argv->iov_len < 5 * 4)
		goto auth_err;
    b1f4:	60 00 00 00 	nop
    b1f8:	48 00 00 40 	b       b238 <svcauth_gss_accept+0xb40>
	crlen = svc_getnl(argv);
	if (svc_getnl(argv) != RPC_GSS_VERSION)
		goto auth_err;
    b1fc:	60 00 00 00 	nop
    b200:	48 00 00 38 	b       b238 <svcauth_gss_accept+0xb40>
	gc->gc_proc = svc_getnl(argv);
	gc->gc_seq = svc_getnl(argv);
	gc->gc_svc = svc_getnl(argv);
	if (svc_safe_getnetobj(argv, &gc->gc_ctx))
		goto auth_err;
    b204:	60 00 00 00 	nop
    b208:	48 00 00 30 	b       b238 <svcauth_gss_accept+0xb40>
	if (crlen != round_up_to_quad(gc->gc_ctx.len) + 5 * 4)
		goto auth_err;
    b20c:	60 00 00 00 	nop
    b210:	48 00 00 28 	b       b238 <svcauth_gss_accept+0xb40>

	if ((gc->gc_proc != RPC_GSS_PROC_DATA) && (rqstp->rq_proc != 0))
		goto auth_err;
    b214:	60 00 00 00 	nop
    b218:	48 00 00 20 	b       b238 <svcauth_gss_accept+0xb40>
	case RPC_GSS_PROC_DESTROY:
		/* Look up the context, and check the verifier: */
		*authp = rpcsec_gsserr_credproblem;
		rsci = gss_svc_searchbyctx(&gc->gc_ctx);
		if (!rsci)
			goto auth_err;
    b21c:	60 00 00 00 	nop
    b220:	48 00 00 18 	b       b238 <svcauth_gss_accept+0xb40>
		switch (gss_verify_header(rqstp, rsci, rpcstart, gc, authp)) {
		case SVC_OK:
			break;
		case SVC_DENIED:
			goto auth_err;
    b224:	60 00 00 00 	nop
    b228:	48 00 00 10 	b       b238 <svcauth_gss_accept+0xb40>

	/* now act upon the command: */
	switch (gc->gc_proc) {
	case RPC_GSS_PROC_DESTROY:
		if (gss_write_verf(rqstp, rsci->mechctx, gc->gc_seq))
			goto auth_err;
    b22c:	60 00 00 00 	nop
    b230:	48 00 00 08 	b       b238 <svcauth_gss_accept+0xb40>
		goto complete;
	case RPC_GSS_PROC_DATA:
		*authp = rpcsec_gsserr_ctxproblem;
		svcdata->verf_start = resv->iov_base + resv->iov_len;
		if (gss_write_verf(rqstp, rsci->mechctx, gc->gc_seq))
			goto auth_err;
    b234:	60 00 00 00 	nop
		ret = SVC_OK;
		goto out;
	}
garbage_args:
	ret = SVC_GARBAGE;
	goto out;
    b238:	80 01 01 18 	lwz     r0,280(r1)
    b23c:	90 01 00 f4 	stw     r0,244(r1)
    b240:	80 01 00 1c 	lwz     r0,28(r1)
    b244:	90 01 00 f8 	stw     r0,248(r1)
}

static inline int
xdr_ressize_check(struct svc_rqst *rqstp, __be32 *p)
{
	struct kvec *vec = &rqstp->rq_res.head[0];
    b248:	80 01 00 f4 	lwz     r0,244(r1)
    b24c:	30 00 00 f0 	addic   r0,r0,240
    b250:	90 01 00 fc 	stw     r0,252(r1)
	char *cp = (char*)p;
    b254:	80 01 00 f8 	lwz     r0,248(r1)
    b258:	90 01 01 00 	stw     r0,256(r1)

	vec->iov_len = cp - (char*)vec->iov_base;
    b25c:	81 21 01 00 	lwz     r9,256(r1)
    b260:	80 01 00 fc 	lwz     r0,252(r1)
    b264:	7c 08 03 78 	mr      r8,r0
    b268:	80 08 00 00 	lwz     r0,0(r8)
    b26c:	7c 00 48 50 	subf    r0,r0,r9
    b270:	7c 09 03 78 	mr      r9,r0
    b274:	80 01 00 fc 	lwz     r0,252(r1)
    b278:	7c 0a 03 78 	mr      r10,r0
    b27c:	91 2a 00 04 	stw     r9,4(r10)
auth_err:
	/* Restore write pointer to its original value: */
	xdr_ressize_check(rqstp, reject_stat);
	ret = SVC_DENIED;
    b280:	38 00 00 08 	li      r0,8
    b284:	90 01 00 10 	stw     r0,16(r1)
	goto out;
    b288:	48 00 00 18 	b       b2a0 <svcauth_gss_accept+0xba8>
		case SVC_OK:
			break;
		case SVC_DENIED:
			goto auth_err;
		case SVC_DROP:
			goto drop;
    b28c:	60 00 00 00 	nop
    b290:	48 00 00 08 	b       b298 <svcauth_gss_accept+0xba0>
		if (gss_write_verf(rqstp, rsci->mechctx, gc->gc_seq))
			goto auth_err;
		rsci->h.expiry_time = get_seconds();
		set_bit(CACHE_NEGATIVE, &rsci->h.flags);
		if (resv->iov_len + 4 > PAGE_SIZE)
			goto drop;
    b294:	60 00 00 00 	nop
	goto out;
complete:
	ret = SVC_COMPLETE;
	goto out;
drop:
	ret = SVC_DROP;
    b298:	38 00 00 06 	li      r0,6
    b29c:	90 01 00 10 	stw     r0,16(r1)
out:
	if (rsci)
    b2a0:	80 01 00 0c 	lwz     r0,12(r1)
    b2a4:	2f 80 00 00 	cmpwi   cr7,r0,0
    b2a8:	41 9e 00 98 	beq-    cr7,b340 <svcauth_gss_accept+0xc48>
		cache_put(&rsci->h, &rsc_cache);
    b2ac:	80 01 00 0c 	lwz     r0,12(r1)
    b2b0:	90 01 01 04 	stw     r0,260(r1)
    b2b4:	3c 00 00 00 	lis     r0,0
    b2b8:	30 00 00 70 	addic   r0,r0,112
    b2bc:	90 01 01 08 	stw     r0,264(r1)
}


static inline void cache_put(struct cache_head *h, struct cache_detail *cd)
{
	if (atomic_read(&h->ref.refcount) <= 2 &&
    b2c0:	80 01 01 04 	lwz     r0,260(r1)
    b2c4:	30 00 00 0c 	addic   r0,r0,12
    b2c8:	90 01 01 0c 	stw     r0,268(r1)

static __inline__ int atomic_read(const atomic_t *v)
{
	int t;

	__asm__ __volatile__("lwz%U1%X1 %0,%1" : "=r"(t) : "m"(v->counter));
    b2cc:	80 01 01 0c 	lwz     r0,268(r1)
    b2d0:	7c 0b 03 78 	mr      r11,r0
    b2d4:	83 eb 00 00 	lwz     r31,0(r11)
    b2d8:	93 e1 01 10 	stw     r31,272(r1)

	return t;
    b2dc:	80 01 01 10 	lwz     r0,272(r1)
    b2e0:	2f 80 00 02 	cmpwi   cr7,r0,2
    b2e4:	41 9d 00 3c 	bgt-    cr7,b320 <svcauth_gss_accept+0xc28>
	    h->expiry_time < cd->nextcheck)
    b2e8:	80 01 01 04 	lwz     r0,260(r1)
    b2ec:	7c 08 03 78 	mr      r8,r0
    b2f0:	81 28 00 04 	lwz     r9,4(r8)
    b2f4:	80 01 01 08 	lwz     r0,264(r1)
    b2f8:	7c 0a 03 78 	mr      r10,r0
    b2fc:	80 0a 00 44 	lwz     r0,68(r10)
}


static inline void cache_put(struct cache_head *h, struct cache_detail *cd)
{
	if (atomic_read(&h->ref.refcount) <= 2 &&
    b300:	7f 89 00 00 	cmpw    cr7,r9,r0
    b304:	40 9c 00 1c 	bge-    cr7,b320 <svcauth_gss_accept+0xc28>
	    h->expiry_time < cd->nextcheck)
		cd->nextcheck = h->expiry_time;
    b308:	80 01 01 04 	lwz     r0,260(r1)
    b30c:	7c 0b 03 78 	mr      r11,r0
    b310:	81 2b 00 04 	lwz     r9,4(r11)
    b314:	80 01 01 08 	lwz     r0,264(r1)
    b318:	7c 08 03 78 	mr      r8,r0
    b31c:	91 28 00 44 	stw     r9,68(r8)
	kref_put(&h->ref, cd->cache_put);
    b320:	80 01 01 04 	lwz     r0,260(r1)
    b324:	31 20 00 0c 	addic   r9,r0,12
    b328:	80 01 01 08 	lwz     r0,264(r1)
    b32c:	7c 0a 03 78 	mr      r10,r0
    b330:	80 0a 00 14 	lwz     r0,20(r10)
    b334:	7d 23 4b 78 	mr      r3,r9
    b338:	7c 04 03 78 	mr      r4,r0
    b33c:	48 00 00 01 	bl      b33c <svcauth_gss_accept+0xc44>
	return ret;
    b340:	80 01 00 10 	lwz     r0,16(r1)
}
    b344:	7c 03 03 78 	mr      r3,r0
    b348:	80 01 01 34 	lwz     r0,308(r1)
    b34c:	7c 08 03 a6 	mtlr    r0
    b350:	83 e1 01 2c 	lwz     r31,300(r1)
    b354:	38 21 01 30 	addi    r1,r1,304
    b358:	4e 80 00 20 	blr

0000b35c <svcauth_gss_prepare_to_wrap>:

static __be32 *
svcauth_gss_prepare_to_wrap(struct xdr_buf *resbuf, struct gss_svc_data *gsd)
{
    b35c:	94 21 ff e0 	stwu    r1,-32(r1)
    b360:	90 61 00 18 	stw     r3,24(r1)
    b364:	90 81 00 1c 	stw     r4,28(r1)
	__be32 *p;
	u32 verf_len;

	p = gsd->verf_start;
    b368:	80 01 00 1c 	lwz     r0,28(r1)
    b36c:	7c 09 03 78 	mr      r9,r0
    b370:	80 09 00 18 	lwz     r0,24(r9)
    b374:	90 01 00 08 	stw     r0,8(r1)
	gsd->verf_start = NULL;
    b378:	80 01 00 1c 	lwz     r0,28(r1)
    b37c:	39 20 00 00 	li      r9,0
    b380:	7c 0b 03 78 	mr      r11,r0
    b384:	91 2b 00 18 	stw     r9,24(r11)

	/* If the reply stat is nonzero, don't wrap: */
	if (*(p-1) != rpc_success)
    b388:	80 01 00 08 	lwz     r0,8(r1)
    b38c:	30 00 ff fc 	addic   r0,r0,-4
    b390:	7c 09 03 78 	mr      r9,r0
    b394:	80 09 00 00 	lwz     r0,0(r9)
    b398:	2f 80 00 00 	cmpwi   cr7,r0,0
    b39c:	41 9e 00 0c 	beq-    cr7,b3a8 <svcauth_gss_prepare_to_wrap+0x4c>
		return NULL;
    b3a0:	38 00 00 00 	li      r0,0
    b3a4:	48 00 00 a8 	b       b44c <svcauth_gss_prepare_to_wrap+0xf0>
	/* Skip the verifier: */
	p += 1;
    b3a8:	80 01 00 08 	lwz     r0,8(r1)
    b3ac:	30 00 00 04 	addic   r0,r0,4
    b3b0:	90 01 00 08 	stw     r0,8(r1)
	verf_len = ntohl(*p++);
    b3b4:	80 01 00 08 	lwz     r0,8(r1)
    b3b8:	7c 0b 03 78 	mr      r11,r0
    b3bc:	80 0b 00 00 	lwz     r0,0(r11)
    b3c0:	90 01 00 0c 	stw     r0,12(r1)
    b3c4:	80 01 00 08 	lwz     r0,8(r1)
    b3c8:	30 00 00 04 	addic   r0,r0,4
    b3cc:	90 01 00 08 	stw     r0,8(r1)
	p += XDR_QUADLEN(verf_len);
    b3d0:	80 01 00 0c 	lwz     r0,12(r1)
    b3d4:	30 00 00 03 	addic   r0,r0,3
    b3d8:	54 00 f0 be 	rlwinm  r0,r0,30,2,31
    b3dc:	54 00 10 3a 	rlwinm  r0,r0,2,0,29
    b3e0:	81 21 00 08 	lwz     r9,8(r1)
    b3e4:	7c 09 02 14 	add     r0,r9,r0
    b3e8:	90 01 00 08 	stw     r0,8(r1)
	/* move accept_stat to right place: */
	memcpy(p, p + 2, 4);
    b3ec:	80 01 00 08 	lwz     r0,8(r1)
    b3f0:	31 20 00 08 	addic   r9,r0,8
    b3f4:	80 01 00 08 	lwz     r0,8(r1)
    b3f8:	81 29 00 00 	lwz     r9,0(r9)
    b3fc:	7c 0b 03 78 	mr      r11,r0
    b400:	91 2b 00 00 	stw     r9,0(r11)
	/* Also don't wrap if the accept stat is nonzero: */
	if (*p != rpc_success) {
    b404:	80 01 00 08 	lwz     r0,8(r1)
    b408:	7c 09 03 78 	mr      r9,r0
    b40c:	80 09 00 00 	lwz     r0,0(r9)
    b410:	2f 80 00 00 	cmpwi   cr7,r0,0
    b414:	41 9e 00 28 	beq-    cr7,b43c <svcauth_gss_prepare_to_wrap+0xe0>
		resbuf->head[0].iov_len -= 2 * 4;
    b418:	80 01 00 18 	lwz     r0,24(r1)
    b41c:	7c 0b 03 78 	mr      r11,r0
    b420:	80 0b 00 04 	lwz     r0,4(r11)
    b424:	31 20 ff f8 	addic   r9,r0,-8
    b428:	80 01 00 18 	lwz     r0,24(r1)
    b42c:	7c 0b 03 78 	mr      r11,r0
    b430:	91 2b 00 04 	stw     r9,4(r11)
		return NULL;
    b434:	38 00 00 00 	li      r0,0
    b438:	48 00 00 14 	b       b44c <svcauth_gss_prepare_to_wrap+0xf0>
	}
	p++;
    b43c:	80 01 00 08 	lwz     r0,8(r1)
    b440:	30 00 00 04 	addic   r0,r0,4
    b444:	90 01 00 08 	stw     r0,8(r1)
	return p;
    b448:	80 01 00 08 	lwz     r0,8(r1)
}
    b44c:	7c 03 03 78 	mr      r3,r0
    b450:	38 21 00 20 	addi    r1,r1,32
    b454:	4e 80 00 20 	blr

0000b458 <svcauth_gss_release>:
	return 0;
}

static int
svcauth_gss_release(struct svc_rqst *rqstp)
{
    b458:	94 21 ff 20 	stwu    r1,-224(r1)
    b45c:	7c 08 02 a6 	mflr    r0
    b460:	90 01 00 e4 	stw     r0,228(r1)
    b464:	93 e1 00 dc 	stw     r31,220(r1)
    b468:	90 61 00 c8 	stw     r3,200(r1)
	struct gss_svc_data *gsd = (struct gss_svc_data *)rqstp->rq_auth_data;
    b46c:	80 01 00 c8 	lwz     r0,200(r1)
    b470:	7c 09 03 78 	mr      r9,r0
    b474:	80 09 0d 74 	lwz     r0,3444(r9)
    b478:	90 01 00 0c 	stw     r0,12(r1)
	struct rpc_gss_wire_cred *gc = &gsd->clcred;
    b47c:	80 01 00 0c 	lwz     r0,12(r1)
    b480:	90 01 00 10 	stw     r0,16(r1)
	struct xdr_buf *resbuf = &rqstp->rq_res;
    b484:	80 01 00 c8 	lwz     r0,200(r1)
    b488:	30 00 00 f0 	addic   r0,r0,240
    b48c:	90 01 00 14 	stw     r0,20(r1)
	int stat = -EINVAL;
    b490:	38 00 ff ea 	li      r0,-22
    b494:	90 01 00 08 	stw     r0,8(r1)

	if (gc->gc_proc != RPC_GSS_PROC_DATA)
    b498:	80 01 00 10 	lwz     r0,16(r1)
    b49c:	7c 0a 03 78 	mr      r10,r0
    b4a0:	80 0a 00 04 	lwz     r0,4(r10)
    b4a4:	2f 80 00 00 	cmpwi   cr7,r0,0
    b4a8:	40 9e 06 ac 	bne-    cr7,bb54 <svcauth_gss_release+0x6fc>
		goto out;
	/* Release can be called twice, but we only wrap once. */
	if (gsd->verf_start == NULL)
    b4ac:	80 01 00 0c 	lwz     r0,12(r1)
    b4b0:	7c 0b 03 78 	mr      r11,r0
    b4b4:	80 0b 00 18 	lwz     r0,24(r11)
    b4b8:	2f 80 00 00 	cmpwi   cr7,r0,0
    b4bc:	41 9e 06 a0 	beq-    cr7,bb5c <svcauth_gss_release+0x704>
		goto out;
    b4c0:	80 01 00 14 	lwz     r0,20(r1)
    b4c4:	90 01 00 18 	stw     r0,24(r1)
}

static inline int
total_buf_len(struct xdr_buf *buf)
{
	return buf->head[0].iov_len + buf->page_len + buf->tail[0].iov_len;
    b4c8:	80 01 00 18 	lwz     r0,24(r1)
    b4cc:	7c 0a 03 78 	mr      r10,r0
    b4d0:	81 2a 00 04 	lwz     r9,4(r10)
    b4d4:	80 01 00 18 	lwz     r0,24(r1)
    b4d8:	7c 0b 03 78 	mr      r11,r0
    b4dc:	80 0b 00 18 	lwz     r0,24(r11)
    b4e0:	7d 29 02 14 	add     r9,r9,r0
    b4e4:	80 01 00 18 	lwz     r0,24(r1)
    b4e8:	7c 0a 03 78 	mr      r10,r0
    b4ec:	80 0a 00 0c 	lwz     r0,12(r10)
    b4f0:	7c 09 02 14 	add     r0,r9,r0
	if (gsd->verf_start == NULL)
		goto out;
	/* normally not set till svc_send, but we need it here: */
	/* XXX: what for?  Do we mess it up the moment we call svc_putu32
	 * or whatever? */
	resbuf->len = total_buf_len(resbuf);
    b4f4:	7c 09 03 78 	mr      r9,r0
    b4f8:	80 01 00 14 	lwz     r0,20(r1)
    b4fc:	7c 0b 03 78 	mr      r11,r0
    b500:	91 2b 00 24 	stw     r9,36(r11)
	switch (gc->gc_svc) {
    b504:	80 01 00 10 	lwz     r0,16(r1)
    b508:	7c 09 03 78 	mr      r9,r0
    b50c:	80 09 00 0c 	lwz     r0,12(r9)
    b510:	2f 80 00 02 	cmpwi   cr7,r0,2
    b514:	41 9e 00 10 	beq-    cr7,b524 <svcauth_gss_release+0xcc>
    b518:	2f 80 00 03 	cmpwi   cr7,r0,3
    b51c:	41 9e 03 18 	beq-    cr7,b834 <svcauth_gss_release+0x3dc>
	case RPC_GSS_SVC_NONE:
		break;
    b520:	48 00 06 48 	b       bb68 <svcauth_gss_release+0x710>
    b524:	80 01 00 c8 	lwz     r0,200(r1)
    b528:	90 01 00 1c 	stw     r0,28(r1)
}

static inline int
svcauth_gss_wrap_resp_integ(struct svc_rqst *rqstp)
{
	struct gss_svc_data *gsd = (struct gss_svc_data *)rqstp->rq_auth_data;
    b52c:	80 01 00 1c 	lwz     r0,28(r1)
    b530:	7c 0a 03 78 	mr      r10,r0
    b534:	80 0a 0d 74 	lwz     r0,3444(r10)
    b538:	90 01 00 20 	stw     r0,32(r1)
	struct rpc_gss_wire_cred *gc = &gsd->clcred;
    b53c:	80 01 00 20 	lwz     r0,32(r1)
    b540:	90 01 00 24 	stw     r0,36(r1)
	struct xdr_buf *resbuf = &rqstp->rq_res;
    b544:	80 01 00 1c 	lwz     r0,28(r1)
    b548:	30 00 00 f0 	addic   r0,r0,240
    b54c:	90 01 00 28 	stw     r0,40(r1)
	struct xdr_buf integ_buf;
	struct xdr_netobj mic;
	struct kvec *resv;
	__be32 *p;
	int integ_offset, integ_len;
	int stat = -EINVAL;
    b550:	38 00 ff ea 	li      r0,-22
    b554:	90 01 00 2c 	stw     r0,44(r1)

	p = svcauth_gss_prepare_to_wrap(resbuf, gsd);
    b558:	80 61 00 28 	lwz     r3,40(r1)
    b55c:	80 81 00 20 	lwz     r4,32(r1)
    b560:	4b ff fd fd 	bl      b35c <svcauth_gss_prepare_to_wrap>
    b564:	90 61 00 30 	stw     r3,48(r1)
	if (p == NULL)
    b568:	80 01 00 30 	lwz     r0,48(r1)
    b56c:	2f 80 00 00 	cmpwi   cr7,r0,0
    b570:	41 9e 02 a4 	beq-    cr7,b814 <svcauth_gss_release+0x3bc>
		goto out;
	integ_offset = (u8 *)(p + 1) - (u8 *)resbuf->head[0].iov_base;
    b574:	80 01 00 30 	lwz     r0,48(r1)
    b578:	30 00 00 04 	addic   r0,r0,4
    b57c:	7c 09 03 78 	mr      r9,r0
    b580:	80 01 00 28 	lwz     r0,40(r1)
    b584:	7c 0b 03 78 	mr      r11,r0
    b588:	80 0b 00 00 	lwz     r0,0(r11)
    b58c:	7c 00 48 50 	subf    r0,r0,r9
    b590:	90 01 00 34 	stw     r0,52(r1)
	integ_len = resbuf->len - integ_offset;
    b594:	80 01 00 28 	lwz     r0,40(r1)
    b598:	7c 0a 03 78 	mr      r10,r0
    b59c:	81 2a 00 24 	lwz     r9,36(r10)
    b5a0:	80 01 00 34 	lwz     r0,52(r1)
    b5a4:	7c 00 48 50 	subf    r0,r0,r9
    b5a8:	90 01 00 38 	stw     r0,56(r1)
	BUG_ON(integ_len % 4);
    b5ac:	80 01 00 38 	lwz     r0,56(r1)
    b5b0:	7c 09 16 70 	srawi   r9,r0,2
    b5b4:	7d 29 01 94 	addze   r9,r9
    b5b8:	55 29 10 3a 	rlwinm  r9,r9,2,0,29
    b5bc:	7c 09 00 50 	subf    r0,r9,r0
    b5c0:	0f 00 00 00 	twnei   r0,0
	*p++ = htonl(integ_len);
    b5c4:	81 21 00 38 	lwz     r9,56(r1)
    b5c8:	80 01 00 30 	lwz     r0,48(r1)
    b5cc:	7c 0b 03 78 	mr      r11,r0
    b5d0:	91 2b 00 00 	stw     r9,0(r11)
    b5d4:	80 01 00 30 	lwz     r0,48(r1)
    b5d8:	30 00 00 04 	addic   r0,r0,4
    b5dc:	90 01 00 30 	stw     r0,48(r1)
	*p++ = htonl(gc->gc_seq);
    b5e0:	80 01 00 24 	lwz     r0,36(r1)
    b5e4:	7c 0a 03 78 	mr      r10,r0
    b5e8:	81 2a 00 08 	lwz     r9,8(r10)
    b5ec:	80 01 00 30 	lwz     r0,48(r1)
    b5f0:	7c 0b 03 78 	mr      r11,r0
    b5f4:	91 2b 00 00 	stw     r9,0(r11)
    b5f8:	80 01 00 30 	lwz     r0,48(r1)
    b5fc:	30 00 00 04 	addic   r0,r0,4
    b600:	90 01 00 30 	stw     r0,48(r1)
	if (xdr_buf_subsegment(resbuf, &integ_buf, integ_offset,
    b604:	81 21 00 34 	lwz     r9,52(r1)
    b608:	80 01 00 38 	lwz     r0,56(r1)
    b60c:	39 61 00 94 	addi    r11,r1,148
    b610:	80 61 00 28 	lwz     r3,40(r1)
    b614:	7d 64 5b 78 	mr      r4,r11
    b618:	7d 25 4b 78 	mr      r5,r9
    b61c:	7c 06 03 78 	mr      r6,r0
    b620:	48 00 00 01 	bl      b620 <svcauth_gss_release+0x1c8>
    b624:	7c 60 1b 78 	mr      r0,r3
    b628:	2f 80 00 00 	cmpwi   cr7,r0,0
    b62c:	41 9e 00 08 	beq-    cr7,b634 <svcauth_gss_release+0x1dc>
				integ_len))
		BUG();
    b630:	0f e0 00 00 	twi     31,r0,0
	if (resbuf->tail[0].iov_base == NULL) {
    b634:	80 01 00 28 	lwz     r0,40(r1)
    b638:	7c 09 03 78 	mr      r9,r0
    b63c:	80 09 00 08 	lwz     r0,8(r9)
    b640:	2f 80 00 00 	cmpwi   cr7,r0,0
    b644:	40 9e 00 64 	bne-    cr7,b6a8 <svcauth_gss_release+0x250>
		if (resbuf->head[0].iov_len + RPC_MAX_AUTH_SIZE > PAGE_SIZE)
    b648:	80 01 00 28 	lwz     r0,40(r1)
    b64c:	7c 0a 03 78 	mr      r10,r0
    b650:	80 0a 00 04 	lwz     r0,4(r10)
    b654:	30 00 01 90 	addic   r0,r0,400
    b658:	2b 80 10 00 	cmplwi  cr7,r0,4096
    b65c:	41 9d 01 c0 	bgt-    cr7,b81c <svcauth_gss_release+0x3c4>
			goto out_err;
		resbuf->tail[0].iov_base = resbuf->head[0].iov_base
    b660:	80 01 00 28 	lwz     r0,40(r1)
    b664:	7c 0b 03 78 	mr      r11,r0
    b668:	81 2b 00 00 	lwz     r9,0(r11)
						+ resbuf->head[0].iov_len;
    b66c:	80 01 00 28 	lwz     r0,40(r1)
    b670:	7c 0a 03 78 	mr      r10,r0
    b674:	80 0a 00 04 	lwz     r0,4(r10)
    b678:	7d 29 02 14 	add     r9,r9,r0
				integ_len))
		BUG();
	if (resbuf->tail[0].iov_base == NULL) {
		if (resbuf->head[0].iov_len + RPC_MAX_AUTH_SIZE > PAGE_SIZE)
			goto out_err;
		resbuf->tail[0].iov_base = resbuf->head[0].iov_base
    b67c:	80 01 00 28 	lwz     r0,40(r1)
    b680:	7c 0b 03 78 	mr      r11,r0
    b684:	91 2b 00 08 	stw     r9,8(r11)
						+ resbuf->head[0].iov_len;
		resbuf->tail[0].iov_len = 0;
    b688:	80 01 00 28 	lwz     r0,40(r1)
    b68c:	39 20 00 00 	li      r9,0
    b690:	7c 0a 03 78 	mr      r10,r0
    b694:	91 2a 00 0c 	stw     r9,12(r10)
		resv = &resbuf->tail[0];
    b698:	80 01 00 28 	lwz     r0,40(r1)
    b69c:	30 00 00 08 	addic   r0,r0,8
    b6a0:	90 01 00 3c 	stw     r0,60(r1)
    b6a4:	48 00 00 10 	b       b6b4 <svcauth_gss_release+0x25c>
	} else {
		resv = &resbuf->tail[0];
    b6a8:	80 01 00 28 	lwz     r0,40(r1)
    b6ac:	30 00 00 08 	addic   r0,r0,8
    b6b0:	90 01 00 3c 	stw     r0,60(r1)
	}
	mic.data = (u8 *)resv->iov_base + resv->iov_len + 4;
    b6b4:	80 01 00 3c 	lwz     r0,60(r1)
    b6b8:	7c 0b 03 78 	mr      r11,r0
    b6bc:	81 2b 00 00 	lwz     r9,0(r11)
    b6c0:	80 01 00 3c 	lwz     r0,60(r1)
    b6c4:	7c 0a 03 78 	mr      r10,r0
    b6c8:	80 0a 00 04 	lwz     r0,4(r10)
    b6cc:	30 00 00 04 	addic   r0,r0,4
    b6d0:	7c 09 02 14 	add     r0,r9,r0
    b6d4:	90 01 00 90 	stw     r0,144(r1)
	if (gss_get_mic(gsd->rsci->mechctx, &integ_buf, &mic))
    b6d8:	80 01 00 20 	lwz     r0,32(r1)
    b6dc:	7c 0b 03 78 	mr      r11,r0
    b6e0:	80 0b 00 1c 	lwz     r0,28(r11)
    b6e4:	7c 09 03 78 	mr      r9,r0
    b6e8:	81 69 00 3c 	lwz     r11,60(r9)
    b6ec:	39 21 00 94 	addi    r9,r1,148
    b6f0:	38 01 00 8c 	addi    r0,r1,140
    b6f4:	7d 63 5b 78 	mr      r3,r11
    b6f8:	7d 24 4b 78 	mr      r4,r9
    b6fc:	7c 05 03 78 	mr      r5,r0
    b700:	48 00 00 01 	bl      b700 <svcauth_gss_release+0x2a8>
    b704:	7c 60 1b 78 	mr      r0,r3
    b708:	2f 80 00 00 	cmpwi   cr7,r0,0
    b70c:	40 9e 01 10 	bne-    cr7,b81c <svcauth_gss_release+0x3c4>
		goto out_err;
	svc_putnl(resv, mic.len);
    b710:	80 01 00 8c 	lwz     r0,140(r1)
    b714:	81 21 00 3c 	lwz     r9,60(r1)
    b718:	91 21 00 40 	stw     r9,64(r1)
    b71c:	90 01 00 44 	stw     r0,68(r1)
	return ntohl(val);
}

static inline void svc_putnl(struct kvec *iov, u32 val)
{
	__be32 *vp = iov->iov_base + iov->iov_len;
    b720:	80 01 00 40 	lwz     r0,64(r1)
    b724:	7c 0a 03 78 	mr      r10,r0
    b728:	81 2a 00 00 	lwz     r9,0(r10)
    b72c:	80 01 00 40 	lwz     r0,64(r1)
    b730:	7c 0b 03 78 	mr      r11,r0
    b734:	80 0b 00 04 	lwz     r0,4(r11)
    b738:	7c 09 02 14 	add     r0,r9,r0
    b73c:	90 01 00 48 	stw     r0,72(r1)
	*vp = htonl(val);
    b740:	80 01 00 48 	lwz     r0,72(r1)
    b744:	81 21 00 44 	lwz     r9,68(r1)
    b748:	7c 0a 03 78 	mr      r10,r0
    b74c:	91 2a 00 00 	stw     r9,0(r10)
	iov->iov_len += sizeof(__be32);
    b750:	80 01 00 40 	lwz     r0,64(r1)
    b754:	7c 0b 03 78 	mr      r11,r0
    b758:	80 0b 00 04 	lwz     r0,4(r11)
    b75c:	31 20 00 04 	addic   r9,r0,4
    b760:	80 01 00 40 	lwz     r0,64(r1)
    b764:	7c 0a 03 78 	mr      r10,r0
    b768:	91 2a 00 04 	stw     r9,4(r10)
	memset(mic.data + mic.len, 0,
    b76c:	81 21 00 90 	lwz     r9,144(r1)
    b770:	80 01 00 8c 	lwz     r0,140(r1)
    b774:	7d 29 02 14 	add     r9,r9,r0
			round_up_to_quad(mic.len) - mic.len);
    b778:	80 01 00 8c 	lwz     r0,140(r1)
    b77c:	90 01 00 4c 	stw     r0,76(r1)
	return 0;
}

static inline u32 round_up_to_quad(u32 i)
{
	return (i + 3 ) & ~3;
    b780:	80 01 00 4c 	lwz     r0,76(r1)
    b784:	30 00 00 03 	addic   r0,r0,3
    b788:	54 00 00 3a 	rlwinm  r0,r0,0,0,29
	mic.data = (u8 *)resv->iov_base + resv->iov_len + 4;
	if (gss_get_mic(gsd->rsci->mechctx, &integ_buf, &mic))
		goto out_err;
	svc_putnl(resv, mic.len);
	memset(mic.data + mic.len, 0,
			round_up_to_quad(mic.len) - mic.len);
    b78c:	7c 0b 03 78 	mr      r11,r0
    b790:	80 01 00 8c 	lwz     r0,140(r1)
	}
	mic.data = (u8 *)resv->iov_base + resv->iov_len + 4;
	if (gss_get_mic(gsd->rsci->mechctx, &integ_buf, &mic))
		goto out_err;
	svc_putnl(resv, mic.len);
	memset(mic.data + mic.len, 0,
    b794:	7c 00 58 50 	subf    r0,r0,r11
    b798:	7d 23 4b 78 	mr      r3,r9
    b79c:	38 80 00 00 	li      r4,0
    b7a0:	7c 05 03 78 	mr      r5,r0
    b7a4:	48 00 00 01 	bl      b7a4 <svcauth_gss_release+0x34c>
			round_up_to_quad(mic.len) - mic.len);
	resv->iov_len += XDR_QUADLEN(mic.len) << 2;
    b7a8:	80 01 00 3c 	lwz     r0,60(r1)
    b7ac:	7c 0b 03 78 	mr      r11,r0
    b7b0:	81 2b 00 04 	lwz     r9,4(r11)
    b7b4:	80 01 00 8c 	lwz     r0,140(r1)
    b7b8:	30 00 00 03 	addic   r0,r0,3
    b7bc:	54 00 00 3a 	rlwinm  r0,r0,0,0,29
    b7c0:	7d 29 02 14 	add     r9,r9,r0
    b7c4:	80 01 00 3c 	lwz     r0,60(r1)
    b7c8:	7c 0a 03 78 	mr      r10,r0
    b7cc:	91 2a 00 04 	stw     r9,4(r10)
	/* not strictly required: */
	resbuf->len += XDR_QUADLEN(mic.len) << 2;
    b7d0:	80 01 00 28 	lwz     r0,40(r1)
    b7d4:	7c 0b 03 78 	mr      r11,r0
    b7d8:	81 2b 00 24 	lwz     r9,36(r11)
    b7dc:	80 01 00 8c 	lwz     r0,140(r1)
    b7e0:	30 00 00 03 	addic   r0,r0,3
    b7e4:	54 00 00 3a 	rlwinm  r0,r0,0,0,29
    b7e8:	7d 29 02 14 	add     r9,r9,r0
    b7ec:	80 01 00 28 	lwz     r0,40(r1)
    b7f0:	7c 0a 03 78 	mr      r10,r0
    b7f4:	91 2a 00 24 	stw     r9,36(r10)
	BUG_ON(resv->iov_len > PAGE_SIZE);
    b7f8:	80 01 00 3c 	lwz     r0,60(r1)
    b7fc:	7c 0b 03 78 	mr      r11,r0
    b800:	80 0b 00 04 	lwz     r0,4(r11)
    b804:	2b 80 10 00 	cmplwi  cr7,r0,4096
    b808:	7c 00 00 26 	mfcr    r0
    b80c:	54 00 f7 fe 	rlwinm  r0,r0,30,31,31
    b810:	0f 00 00 00 	twnei   r0,0
out:
	stat = 0;
    b814:	38 00 00 00 	li      r0,0
    b818:	90 01 00 2c 	stw     r0,44(r1)
out_err:
	return stat;
    b81c:	80 01 00 2c 	lwz     r0,44(r1)
	resbuf->len = total_buf_len(resbuf);
	switch (gc->gc_svc) {
	case RPC_GSS_SVC_NONE:
		break;
	case RPC_GSS_SVC_INTEGRITY:
		stat = svcauth_gss_wrap_resp_integ(rqstp);
    b820:	90 01 00 08 	stw     r0,8(r1)
		if (stat)
    b824:	80 01 00 08 	lwz     r0,8(r1)
    b828:	2f 80 00 00 	cmpwi   cr7,r0,0
    b82c:	41 9e 03 38 	beq-    cr7,bb64 <svcauth_gss_release+0x70c>
			goto out_err;
    b830:	48 00 03 48 	b       bb78 <svcauth_gss_release+0x720>
		break;
    b834:	80 01 00 c8 	lwz     r0,200(r1)
    b838:	90 01 00 50 	stw     r0,80(r1)
}

static inline int
svcauth_gss_wrap_resp_priv(struct svc_rqst *rqstp)
{
	struct gss_svc_data *gsd = (struct gss_svc_data *)rqstp->rq_auth_data;
    b83c:	80 01 00 50 	lwz     r0,80(r1)
    b840:	7c 09 03 78 	mr      r9,r0
    b844:	80 09 0d 74 	lwz     r0,3444(r9)
    b848:	90 01 00 54 	stw     r0,84(r1)
	struct rpc_gss_wire_cred *gc = &gsd->clcred;
    b84c:	80 01 00 54 	lwz     r0,84(r1)
    b850:	90 01 00 58 	stw     r0,88(r1)
	struct xdr_buf *resbuf = &rqstp->rq_res;
    b854:	80 01 00 50 	lwz     r0,80(r1)
    b858:	30 00 00 f0 	addic   r0,r0,240
    b85c:	90 01 00 5c 	stw     r0,92(r1)
	struct page **inpages = NULL;
    b860:	38 00 00 00 	li      r0,0
    b864:	90 01 00 60 	stw     r0,96(r1)
	__be32 *p, *len;
	int offset;
	int pad;

	p = svcauth_gss_prepare_to_wrap(resbuf, gsd);
    b868:	80 61 00 5c 	lwz     r3,92(r1)
    b86c:	80 81 00 54 	lwz     r4,84(r1)
    b870:	4b ff fa ed 	bl      b35c <svcauth_gss_prepare_to_wrap>
    b874:	90 61 00 64 	stw     r3,100(r1)
	if (p == NULL)
    b878:	80 01 00 64 	lwz     r0,100(r1)
    b87c:	2f 80 00 00 	cmpwi   cr7,r0,0
    b880:	40 9e 00 0c 	bne-    cr7,b88c <svcauth_gss_release+0x434>
		return 0;
    b884:	38 00 00 00 	li      r0,0
    b888:	48 00 02 b8 	b       bb40 <svcauth_gss_release+0x6e8>
	len = p++;
    b88c:	80 01 00 64 	lwz     r0,100(r1)
    b890:	90 01 00 68 	stw     r0,104(r1)
    b894:	80 01 00 64 	lwz     r0,100(r1)
    b898:	30 00 00 04 	addic   r0,r0,4
    b89c:	90 01 00 64 	stw     r0,100(r1)
	offset = (u8 *)p - (u8 *)resbuf->head[0].iov_base;
    b8a0:	81 21 00 64 	lwz     r9,100(r1)
    b8a4:	80 01 00 5c 	lwz     r0,92(r1)
    b8a8:	7c 0a 03 78 	mr      r10,r0
    b8ac:	80 0a 00 00 	lwz     r0,0(r10)
    b8b0:	7c 00 48 50 	subf    r0,r0,r9
    b8b4:	90 01 00 6c 	stw     r0,108(r1)
	*p++ = htonl(gc->gc_seq);
    b8b8:	80 01 00 58 	lwz     r0,88(r1)
    b8bc:	7c 0b 03 78 	mr      r11,r0
    b8c0:	81 2b 00 08 	lwz     r9,8(r11)
    b8c4:	80 01 00 64 	lwz     r0,100(r1)
    b8c8:	7c 0a 03 78 	mr      r10,r0
    b8cc:	91 2a 00 00 	stw     r9,0(r10)
    b8d0:	80 01 00 64 	lwz     r0,100(r1)
    b8d4:	30 00 00 04 	addic   r0,r0,4
    b8d8:	90 01 00 64 	stw     r0,100(r1)
	inpages = resbuf->pages;
    b8dc:	80 01 00 5c 	lwz     r0,92(r1)
    b8e0:	7c 0b 03 78 	mr      r11,r0
    b8e4:	80 0b 00 10 	lwz     r0,16(r11)
    b8e8:	90 01 00 60 	stw     r0,96(r1)
	 * room for the head, tail, and 2 * RPC_MAX_AUTH_SIZE in
	 * the page, and move the current tail data such that
	 * there is RPC_MAX_AUTH_SIZE slack space available in
	 * both the head and tail.
	 */
	if (resbuf->tail[0].iov_base) {
    b8ec:	80 01 00 5c 	lwz     r0,92(r1)
    b8f0:	7c 09 03 78 	mr      r9,r0
    b8f4:	80 09 00 08 	lwz     r0,8(r9)
    b8f8:	2f 80 00 00 	cmpwi   cr7,r0,0
    b8fc:	41 9e 00 e0 	beq-    cr7,b9dc <svcauth_gss_release+0x584>
		BUG_ON(resbuf->tail[0].iov_base >= resbuf->head[0].iov_base
    b900:	80 01 00 5c 	lwz     r0,92(r1)
    b904:	7c 0a 03 78 	mr      r10,r0
    b908:	81 2a 00 08 	lwz     r9,8(r10)
    b90c:	80 01 00 5c 	lwz     r0,92(r1)
    b910:	7c 0b 03 78 	mr      r11,r0
    b914:	80 0b 00 00 	lwz     r0,0(r11)
    b918:	30 00 10 00 	addic   r0,r0,4096
    b91c:	7f 89 00 40 	cmplw   cr7,r9,r0
    b920:	4f dc e0 42 	crnot   4*cr7+eq,4*cr7+lt
    b924:	7c 00 00 26 	mfcr    r0
    b928:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
    b92c:	0f 00 00 00 	twnei   r0,0
							+ PAGE_SIZE);
		BUG_ON(resbuf->tail[0].iov_base < resbuf->head[0].iov_base);
    b930:	80 01 00 5c 	lwz     r0,92(r1)
    b934:	7c 0a 03 78 	mr      r10,r0
    b938:	81 2a 00 08 	lwz     r9,8(r10)
    b93c:	80 01 00 5c 	lwz     r0,92(r1)
    b940:	7c 0b 03 78 	mr      r11,r0
    b944:	80 0b 00 00 	lwz     r0,0(r11)
    b948:	7f 89 00 40 	cmplw   cr7,r9,r0
    b94c:	7c 00 00 26 	mfcr    r0
    b950:	54 00 ef fe 	rlwinm  r0,r0,29,31,31
    b954:	0f 00 00 00 	twnei   r0,0
		if (resbuf->tail[0].iov_len + resbuf->head[0].iov_len
    b958:	80 01 00 5c 	lwz     r0,92(r1)
    b95c:	7c 0a 03 78 	mr      r10,r0
    b960:	81 2a 00 0c 	lwz     r9,12(r10)
    b964:	80 01 00 5c 	lwz     r0,92(r1)
    b968:	7c 0b 03 78 	mr      r11,r0
    b96c:	80 0b 00 04 	lwz     r0,4(r11)
    b970:	7c 09 02 14 	add     r0,r9,r0
				+ 2 * RPC_MAX_AUTH_SIZE > PAGE_SIZE)
    b974:	30 00 03 20 	addic   r0,r0,800
	 */
	if (resbuf->tail[0].iov_base) {
		BUG_ON(resbuf->tail[0].iov_base >= resbuf->head[0].iov_base
							+ PAGE_SIZE);
		BUG_ON(resbuf->tail[0].iov_base < resbuf->head[0].iov_base);
		if (resbuf->tail[0].iov_len + resbuf->head[0].iov_len
    b978:	2b 80 10 00 	cmplwi  cr7,r0,4096
    b97c:	40 9d 00 0c 	ble-    cr7,b988 <svcauth_gss_release+0x530>
				+ 2 * RPC_MAX_AUTH_SIZE > PAGE_SIZE)
			return -ENOMEM;
    b980:	38 00 ff f4 	li      r0,-12
    b984:	48 00 01 bc 	b       bb40 <svcauth_gss_release+0x6e8>
		memmove(resbuf->tail[0].iov_base + RPC_MAX_AUTH_SIZE,
    b988:	80 01 00 5c 	lwz     r0,92(r1)
    b98c:	7c 09 03 78 	mr      r9,r0
    b990:	80 09 00 08 	lwz     r0,8(r9)
    b994:	31 60 01 90 	addic   r11,r0,400
			resbuf->tail[0].iov_base,
    b998:	80 01 00 5c 	lwz     r0,92(r1)
    b99c:	7c 0a 03 78 	mr      r10,r0
    b9a0:	81 2a 00 08 	lwz     r9,8(r10)
							+ PAGE_SIZE);
		BUG_ON(resbuf->tail[0].iov_base < resbuf->head[0].iov_base);
		if (resbuf->tail[0].iov_len + resbuf->head[0].iov_len
				+ 2 * RPC_MAX_AUTH_SIZE > PAGE_SIZE)
			return -ENOMEM;
		memmove(resbuf->tail[0].iov_base + RPC_MAX_AUTH_SIZE,
    b9a4:	80 01 00 5c 	lwz     r0,92(r1)
    b9a8:	7c 0a 03 78 	mr      r10,r0
    b9ac:	80 0a 00 0c 	lwz     r0,12(r10)
    b9b0:	7d 63 5b 78 	mr      r3,r11
    b9b4:	7d 24 4b 78 	mr      r4,r9
    b9b8:	7c 05 03 78 	mr      r5,r0
    b9bc:	48 00 00 01 	bl      b9bc <svcauth_gss_release+0x564>
			resbuf->tail[0].iov_base,
			resbuf->tail[0].iov_len);
		resbuf->tail[0].iov_base += RPC_MAX_AUTH_SIZE;
    b9c0:	80 01 00 5c 	lwz     r0,92(r1)
    b9c4:	7c 0b 03 78 	mr      r11,r0
    b9c8:	80 0b 00 08 	lwz     r0,8(r11)
    b9cc:	31 20 01 90 	addic   r9,r0,400
    b9d0:	80 01 00 5c 	lwz     r0,92(r1)
    b9d4:	7c 0a 03 78 	mr      r10,r0
    b9d8:	91 2a 00 08 	stw     r9,8(r10)
	 * room for the head data, and 2 * RPC_MAX_AUTH_SIZE in the
	 * allotted page, and set up tail information such that there
	 * is RPC_MAX_AUTH_SIZE slack space available in both the
	 * head and tail.
	 */
	if (resbuf->tail[0].iov_base == NULL) {
    b9dc:	80 01 00 5c 	lwz     r0,92(r1)
    b9e0:	7c 0b 03 78 	mr      r11,r0
    b9e4:	80 0b 00 08 	lwz     r0,8(r11)
    b9e8:	2f 80 00 00 	cmpwi   cr7,r0,0
    b9ec:	40 9e 00 60 	bne-    cr7,ba4c <svcauth_gss_release+0x5f4>
		if (resbuf->head[0].iov_len + 2*RPC_MAX_AUTH_SIZE > PAGE_SIZE)
    b9f0:	80 01 00 5c 	lwz     r0,92(r1)
    b9f4:	7c 09 03 78 	mr      r9,r0
    b9f8:	80 09 00 04 	lwz     r0,4(r9)
    b9fc:	30 00 03 20 	addic   r0,r0,800
    ba00:	2b 80 10 00 	cmplwi  cr7,r0,4096
    ba04:	40 9d 00 0c 	ble-    cr7,ba10 <svcauth_gss_release+0x5b8>
			return -ENOMEM;
    ba08:	38 00 ff f4 	li      r0,-12
    ba0c:	48 00 01 34 	b       bb40 <svcauth_gss_release+0x6e8>
		resbuf->tail[0].iov_base = resbuf->head[0].iov_base
    ba10:	80 01 00 5c 	lwz     r0,92(r1)
    ba14:	7c 0a 03 78 	mr      r10,r0
    ba18:	81 2a 00 00 	lwz     r9,0(r10)
			+ resbuf->head[0].iov_len + RPC_MAX_AUTH_SIZE;
    ba1c:	80 01 00 5c 	lwz     r0,92(r1)
    ba20:	7c 0b 03 78 	mr      r11,r0
    ba24:	80 0b 00 04 	lwz     r0,4(r11)
    ba28:	30 00 01 90 	addic   r0,r0,400
    ba2c:	7d 29 02 14 	add     r9,r9,r0
	 * head and tail.
	 */
	if (resbuf->tail[0].iov_base == NULL) {
		if (resbuf->head[0].iov_len + 2*RPC_MAX_AUTH_SIZE > PAGE_SIZE)
			return -ENOMEM;
		resbuf->tail[0].iov_base = resbuf->head[0].iov_base
    ba30:	80 01 00 5c 	lwz     r0,92(r1)
    ba34:	7c 0a 03 78 	mr      r10,r0
    ba38:	91 2a 00 08 	stw     r9,8(r10)
			+ resbuf->head[0].iov_len + RPC_MAX_AUTH_SIZE;
		resbuf->tail[0].iov_len = 0;
    ba3c:	80 01 00 5c 	lwz     r0,92(r1)
    ba40:	39 20 00 00 	li      r9,0
    ba44:	7c 0b 03 78 	mr      r11,r0
    ba48:	91 2b 00 0c 	stw     r9,12(r11)
	}
	if (gss_wrap(gsd->rsci->mechctx, offset, resbuf, inpages))
    ba4c:	80 01 00 54 	lwz     r0,84(r1)
    ba50:	7c 09 03 78 	mr      r9,r0
    ba54:	80 09 00 1c 	lwz     r0,28(r9)
    ba58:	7c 0a 03 78 	mr      r10,r0
    ba5c:	80 0a 00 3c 	lwz     r0,60(r10)
    ba60:	7c 03 03 78 	mr      r3,r0
    ba64:	80 81 00 6c 	lwz     r4,108(r1)
    ba68:	80 a1 00 5c 	lwz     r5,92(r1)
    ba6c:	80 c1 00 60 	lwz     r6,96(r1)
    ba70:	48 00 00 01 	bl      ba70 <svcauth_gss_release+0x618>
    ba74:	7c 60 1b 78 	mr      r0,r3
    ba78:	2f 80 00 00 	cmpwi   cr7,r0,0
    ba7c:	41 9e 00 0c 	beq-    cr7,ba88 <svcauth_gss_release+0x630>
		return -ENOMEM;
    ba80:	38 00 ff f4 	li      r0,-12
    ba84:	48 00 00 bc 	b       bb40 <svcauth_gss_release+0x6e8>
	*len = htonl(resbuf->len - offset);
    ba88:	80 01 00 5c 	lwz     r0,92(r1)
    ba8c:	7c 0b 03 78 	mr      r11,r0
    ba90:	81 2b 00 24 	lwz     r9,36(r11)
    ba94:	80 01 00 6c 	lwz     r0,108(r1)
    ba98:	7d 20 48 50 	subf    r9,r0,r9
    ba9c:	80 01 00 68 	lwz     r0,104(r1)
    baa0:	7c 0a 03 78 	mr      r10,r0
    baa4:	91 2a 00 00 	stw     r9,0(r10)
	pad = 3 - ((resbuf->len - offset - 1)&3);
    baa8:	81 21 00 6c 	lwz     r9,108(r1)
    baac:	80 01 00 5c 	lwz     r0,92(r1)
    bab0:	7c 0b 03 78 	mr      r11,r0
    bab4:	80 0b 00 24 	lwz     r0,36(r11)
    bab8:	7c 00 48 50 	subf    r0,r0,r9
    babc:	54 00 07 be 	clrlwi  r0,r0,30
    bac0:	90 01 00 70 	stw     r0,112(r1)
	p = (__be32 *)(resbuf->tail[0].iov_base + resbuf->tail[0].iov_len);
    bac4:	80 01 00 5c 	lwz     r0,92(r1)
    bac8:	7c 0a 03 78 	mr      r10,r0
    bacc:	81 2a 00 08 	lwz     r9,8(r10)
    bad0:	80 01 00 5c 	lwz     r0,92(r1)
    bad4:	7c 0b 03 78 	mr      r11,r0
    bad8:	80 0b 00 0c 	lwz     r0,12(r11)
    badc:	7c 09 02 14 	add     r0,r9,r0
    bae0:	90 01 00 64 	stw     r0,100(r1)
	memset(p, 0, pad);
    bae4:	80 01 00 70 	lwz     r0,112(r1)
    bae8:	81 21 00 64 	lwz     r9,100(r1)
    baec:	7d 23 4b 78 	mr      r3,r9
    baf0:	38 80 00 00 	li      r4,0
    baf4:	7c 05 03 78 	mr      r5,r0
    baf8:	48 00 00 01 	bl      baf8 <svcauth_gss_release+0x6a0>
	resbuf->tail[0].iov_len += pad;
    bafc:	80 01 00 5c 	lwz     r0,92(r1)
    bb00:	7c 0a 03 78 	mr      r10,r0
    bb04:	81 2a 00 0c 	lwz     r9,12(r10)
    bb08:	80 01 00 70 	lwz     r0,112(r1)
    bb0c:	7d 29 02 14 	add     r9,r9,r0
    bb10:	80 01 00 5c 	lwz     r0,92(r1)
    bb14:	7c 0b 03 78 	mr      r11,r0
    bb18:	91 2b 00 0c 	stw     r9,12(r11)
	resbuf->len += pad;
    bb1c:	80 01 00 5c 	lwz     r0,92(r1)
    bb20:	7c 0a 03 78 	mr      r10,r0
    bb24:	81 2a 00 24 	lwz     r9,36(r10)
    bb28:	80 01 00 70 	lwz     r0,112(r1)
    bb2c:	7d 29 02 14 	add     r9,r9,r0
    bb30:	80 01 00 5c 	lwz     r0,92(r1)
    bb34:	7c 0b 03 78 	mr      r11,r0
    bb38:	91 2b 00 24 	stw     r9,36(r11)
	return 0;
    bb3c:	38 00 00 00 	li      r0,0
		stat = svcauth_gss_wrap_resp_integ(rqstp);
		if (stat)
			goto out_err;
		break;
	case RPC_GSS_SVC_PRIVACY:
		stat = svcauth_gss_wrap_resp_priv(rqstp);
    bb40:	90 01 00 08 	stw     r0,8(r1)
		if (stat)
    bb44:	80 01 00 08 	lwz     r0,8(r1)
    bb48:	2f 80 00 00 	cmpwi   cr7,r0,0
    bb4c:	40 9e 00 28 	bne-    cr7,bb74 <svcauth_gss_release+0x71c>
			goto out_err;
		break;
    bb50:	48 00 00 18 	b       bb68 <svcauth_gss_release+0x710>
	struct rpc_gss_wire_cred *gc = &gsd->clcred;
	struct xdr_buf *resbuf = &rqstp->rq_res;
	int stat = -EINVAL;

	if (gc->gc_proc != RPC_GSS_PROC_DATA)
		goto out;
    bb54:	60 00 00 00 	nop
    bb58:	48 00 00 10 	b       bb68 <svcauth_gss_release+0x710>
	/* Release can be called twice, but we only wrap once. */
	if (gsd->verf_start == NULL)
		goto out;
    bb5c:	60 00 00 00 	nop
    bb60:	48 00 00 08 	b       bb68 <svcauth_gss_release+0x710>
		break;
	case RPC_GSS_SVC_INTEGRITY:
		stat = svcauth_gss_wrap_resp_integ(rqstp);
		if (stat)
			goto out_err;
		break;
    bb64:	60 00 00 00 	nop
	 * the auth_error appropriately; just fall through:
	 */
	}

out:
	stat = 0;
    bb68:	38 00 00 00 	li      r0,0
    bb6c:	90 01 00 08 	stw     r0,8(r1)
    bb70:	48 00 00 08 	b       bb78 <svcauth_gss_release+0x720>
			goto out_err;
		break;
	case RPC_GSS_SVC_PRIVACY:
		stat = svcauth_gss_wrap_resp_priv(rqstp);
		if (stat)
			goto out_err;
    bb74:	60 00 00 00 	nop
	}

out:
	stat = 0;
out_err:
	if (rqstp->rq_client)
    bb78:	80 01 00 c8 	lwz     r0,200(r1)
    bb7c:	7c 09 03 78 	mr      r9,r0
    bb80:	80 09 0d 88 	lwz     r0,3464(r9)
    bb84:	2f 80 00 00 	cmpwi   cr7,r0,0
    bb88:	41 9e 00 18 	beq-    cr7,bba0 <svcauth_gss_release+0x748>
		auth_domain_put(rqstp->rq_client);
    bb8c:	80 01 00 c8 	lwz     r0,200(r1)
    bb90:	7c 0a 03 78 	mr      r10,r0
    bb94:	80 0a 0d 88 	lwz     r0,3464(r10)
    bb98:	7c 03 03 78 	mr      r3,r0
    bb9c:	48 00 00 01 	bl      bb9c <svcauth_gss_release+0x744>
	rqstp->rq_client = NULL;
    bba0:	80 01 00 c8 	lwz     r0,200(r1)
    bba4:	39 20 00 00 	li      r9,0
    bba8:	7c 0b 03 78 	mr      r11,r0
    bbac:	91 2b 0d 88 	stw     r9,3464(r11)
	if (rqstp->rq_gssclient)
    bbb0:	80 01 00 c8 	lwz     r0,200(r1)
    bbb4:	7c 09 03 78 	mr      r9,r0
    bbb8:	80 09 0d 8c 	lwz     r0,3468(r9)
    bbbc:	2f 80 00 00 	cmpwi   cr7,r0,0
    bbc0:	41 9e 00 18 	beq-    cr7,bbd8 <svcauth_gss_release+0x780>
		auth_domain_put(rqstp->rq_gssclient);
    bbc4:	80 01 00 c8 	lwz     r0,200(r1)
    bbc8:	7c 0a 03 78 	mr      r10,r0
    bbcc:	80 0a 0d 8c 	lwz     r0,3468(r10)
    bbd0:	7c 03 03 78 	mr      r3,r0
    bbd4:	48 00 00 01 	bl      bbd4 <svcauth_gss_release+0x77c>
	rqstp->rq_gssclient = NULL;
    bbd8:	80 01 00 c8 	lwz     r0,200(r1)
    bbdc:	39 20 00 00 	li      r9,0
    bbe0:	7c 0b 03 78 	mr      r11,r0
    bbe4:	91 2b 0d 8c 	stw     r9,3468(r11)
	if (rqstp->rq_cred.cr_group_info)
    bbe8:	80 01 00 c8 	lwz     r0,200(r1)
    bbec:	7c 09 03 78 	mr      r9,r0
    bbf0:	80 09 00 b4 	lwz     r0,180(r9)
    bbf4:	2f 80 00 00 	cmpwi   cr7,r0,0
    bbf8:	41 9e 00 4c 	beq-    cr7,bc44 <svcauth_gss_release+0x7ec>
		put_group_info(rqstp->rq_cred.cr_group_info);
    bbfc:	80 01 00 c8 	lwz     r0,200(r1)
    bc00:	7c 0a 03 78 	mr      r10,r0
    bc04:	80 0a 00 b4 	lwz     r0,180(r10)
    bc08:	90 01 00 74 	stw     r0,116(r1)
	PPC405_ERR77(0,%1)
"	stwcx.	%0,0,%1\n\
	bne-	1b"
	PPC_ACQUIRE_BARRIER
	: "=&r" (t)
	: "r" (&v->counter)
    bc0c:	80 01 00 74 	lwz     r0,116(r1)

static __inline__ int atomic_dec_return(atomic_t *v)
{
	int t;

	__asm__ __volatile__(
    bc10:	7f e0 00 28 	lwarx   r31,0,r0
    bc14:	33 ff ff ff 	addic   r31,r31,-1
    bc18:	7f e0 01 2d 	stwcx.  r31,0,r0
    bc1c:	40 a2 ff f4 	bne-    bc10 <svcauth_gss_release+0x7b8>
    bc20:	93 e1 00 78 	stw     r31,120(r1)
	PPC_ACQUIRE_BARRIER
	: "=&r" (t)
	: "r" (&v->counter)
	: "cc", "xer", "memory");

	return t;
    bc24:	80 01 00 78 	lwz     r0,120(r1)
    bc28:	2f 80 00 00 	cmpwi   cr7,r0,0
    bc2c:	40 9e 00 18 	bne-    cr7,bc44 <svcauth_gss_release+0x7ec>
    bc30:	80 01 00 c8 	lwz     r0,200(r1)
    bc34:	7c 0b 03 78 	mr      r11,r0
    bc38:	80 0b 00 b4 	lwz     r0,180(r11)
    bc3c:	7c 03 03 78 	mr      r3,r0
    bc40:	48 00 00 01 	bl      bc40 <svcauth_gss_release+0x7e8>
	rqstp->rq_cred.cr_group_info = NULL;
    bc44:	80 01 00 c8 	lwz     r0,200(r1)
    bc48:	39 20 00 00 	li      r9,0
    bc4c:	7c 0a 03 78 	mr      r10,r0
    bc50:	91 2a 00 b4 	stw     r9,180(r10)
	if (gsd->rsci)
    bc54:	80 01 00 0c 	lwz     r0,12(r1)
    bc58:	7c 0b 03 78 	mr      r11,r0
    bc5c:	80 0b 00 1c 	lwz     r0,28(r11)
    bc60:	2f 80 00 00 	cmpwi   cr7,r0,0
    bc64:	41 9e 00 a0 	beq-    cr7,bd04 <svcauth_gss_release+0x8ac>
		cache_put(&gsd->rsci->h, &rsc_cache);
    bc68:	80 01 00 0c 	lwz     r0,12(r1)
    bc6c:	7c 09 03 78 	mr      r9,r0
    bc70:	80 09 00 1c 	lwz     r0,28(r9)
    bc74:	90 01 00 7c 	stw     r0,124(r1)
    bc78:	3c 00 00 00 	lis     r0,0
    bc7c:	30 00 00 70 	addic   r0,r0,112
    bc80:	90 01 00 80 	stw     r0,128(r1)
}


static inline void cache_put(struct cache_head *h, struct cache_detail *cd)
{
	if (atomic_read(&h->ref.refcount) <= 2 &&
    bc84:	80 01 00 7c 	lwz     r0,124(r1)
    bc88:	30 00 00 0c 	addic   r0,r0,12
    bc8c:	90 01 00 84 	stw     r0,132(r1)

static __inline__ int atomic_read(const atomic_t *v)
{
	int t;

	__asm__ __volatile__("lwz%U1%X1 %0,%1" : "=r"(t) : "m"(v->counter));
    bc90:	80 01 00 84 	lwz     r0,132(r1)
    bc94:	7c 0a 03 78 	mr      r10,r0
    bc98:	83 ea 00 00 	lwz     r31,0(r10)
    bc9c:	93 e1 00 88 	stw     r31,136(r1)

	return t;
    bca0:	80 01 00 88 	lwz     r0,136(r1)
    bca4:	2f 80 00 02 	cmpwi   cr7,r0,2
    bca8:	41 9d 00 3c 	bgt-    cr7,bce4 <svcauth_gss_release+0x88c>
	    h->expiry_time < cd->nextcheck)
    bcac:	80 01 00 7c 	lwz     r0,124(r1)
    bcb0:	7c 0b 03 78 	mr      r11,r0
    bcb4:	81 2b 00 04 	lwz     r9,4(r11)
    bcb8:	80 01 00 80 	lwz     r0,128(r1)
    bcbc:	7c 0a 03 78 	mr      r10,r0
    bcc0:	80 0a 00 44 	lwz     r0,68(r10)
}


static inline void cache_put(struct cache_head *h, struct cache_detail *cd)
{
	if (atomic_read(&h->ref.refcount) <= 2 &&
    bcc4:	7f 89 00 00 	cmpw    cr7,r9,r0
    bcc8:	40 9c 00 1c 	bge-    cr7,bce4 <svcauth_gss_release+0x88c>
	    h->expiry_time < cd->nextcheck)
		cd->nextcheck = h->expiry_time;
    bccc:	80 01 00 7c 	lwz     r0,124(r1)
    bcd0:	7c 0b 03 78 	mr      r11,r0
    bcd4:	81 2b 00 04 	lwz     r9,4(r11)
    bcd8:	80 01 00 80 	lwz     r0,128(r1)
    bcdc:	7c 0a 03 78 	mr      r10,r0
    bce0:	91 2a 00 44 	stw     r9,68(r10)
	kref_put(&h->ref, cd->cache_put);
    bce4:	80 01 00 7c 	lwz     r0,124(r1)
    bce8:	31 20 00 0c 	addic   r9,r0,12
    bcec:	80 01 00 80 	lwz     r0,128(r1)
    bcf0:	7c 0b 03 78 	mr      r11,r0
    bcf4:	80 0b 00 14 	lwz     r0,20(r11)
    bcf8:	7d 23 4b 78 	mr      r3,r9
    bcfc:	7c 04 03 78 	mr      r4,r0
    bd00:	48 00 00 01 	bl      bd00 <svcauth_gss_release+0x8a8>
	gsd->rsci = NULL;
    bd04:	80 01 00 0c 	lwz     r0,12(r1)
    bd08:	39 20 00 00 	li      r9,0
    bd0c:	7c 0a 03 78 	mr      r10,r0
    bd10:	91 2a 00 1c 	stw     r9,28(r10)

	return stat;
    bd14:	80 01 00 08 	lwz     r0,8(r1)
}
    bd18:	7c 03 03 78 	mr      r3,r0
    bd1c:	80 01 00 e4 	lwz     r0,228(r1)
    bd20:	7c 08 03 a6 	mtlr    r0
    bd24:	83 e1 00 dc 	lwz     r31,220(r1)
    bd28:	38 21 00 e0 	addi    r1,r1,224
    bd2c:	4e 80 00 20 	blr

0000bd30 <svcauth_gss_domain_release>:

static void
svcauth_gss_domain_release(struct auth_domain *dom)
{
    bd30:	94 21 ff e0 	stwu    r1,-32(r1)
    bd34:	7c 08 02 a6 	mflr    r0
    bd38:	90 01 00 24 	stw     r0,36(r1)
    bd3c:	90 61 00 18 	stw     r3,24(r1)
	struct gss_domain *gd = container_of(dom, struct gss_domain, h);
    bd40:	80 01 00 18 	lwz     r0,24(r1)
    bd44:	90 01 00 08 	stw     r0,8(r1)
    bd48:	80 01 00 08 	lwz     r0,8(r1)
    bd4c:	90 01 00 0c 	stw     r0,12(r1)

	kfree(dom->name);
    bd50:	80 01 00 18 	lwz     r0,24(r1)
    bd54:	7c 09 03 78 	mr      r9,r0
    bd58:	80 09 00 0c 	lwz     r0,12(r9)
    bd5c:	7c 03 03 78 	mr      r3,r0
    bd60:	48 00 00 01 	bl      bd60 <svcauth_gss_domain_release+0x30>
	kfree(gd);
    bd64:	80 61 00 0c 	lwz     r3,12(r1)
    bd68:	48 00 00 01 	bl      bd68 <svcauth_gss_domain_release+0x38>
}
    bd6c:	80 01 00 24 	lwz     r0,36(r1)
    bd70:	7c 08 03 a6 	mtlr    r0
    bd74:	38 21 00 20 	addi    r1,r1,32
    bd78:	4e 80 00 20 	blr

0000bd7c <gss_svc_init>:
	.set_client	= svcauth_gss_set_client,
};

int
gss_svc_init(void)
{
    bd7c:	94 21 ff e0 	stwu    r1,-32(r1)
    bd80:	7c 08 02 a6 	mflr    r0
    bd84:	90 01 00 24 	stw     r0,36(r1)
	int rv = svc_auth_register(RPC_AUTH_GSS, &svcauthops_gss);
    bd88:	38 60 00 06 	li      r3,6
    bd8c:	3c 00 00 00 	lis     r0,0
    bd90:	30 80 00 e0 	addic   r4,r0,224
    bd94:	48 00 00 01 	bl      bd94 <gss_svc_init+0x18>
    bd98:	90 61 00 08 	stw     r3,8(r1)
	if (rv)
    bd9c:	80 01 00 08 	lwz     r0,8(r1)
    bda0:	2f 80 00 00 	cmpwi   cr7,r0,0
    bda4:	41 9e 00 0c 	beq-    cr7,bdb0 <gss_svc_init+0x34>
		return rv;
    bda8:	80 01 00 08 	lwz     r0,8(r1)
    bdac:	48 00 00 68 	b       be14 <gss_svc_init+0x98>
	rv = cache_register(&rsc_cache);
    bdb0:	3c 00 00 00 	lis     r0,0
    bdb4:	30 60 00 70 	addic   r3,r0,112
    bdb8:	48 00 00 01 	bl      bdb8 <gss_svc_init+0x3c>
    bdbc:	90 61 00 08 	stw     r3,8(r1)
	if (rv)
    bdc0:	80 01 00 08 	lwz     r0,8(r1)
    bdc4:	2f 80 00 00 	cmpwi   cr7,r0,0
    bdc8:	40 9e 00 3c 	bne-    cr7,be04 <gss_svc_init+0x88>
		goto out1;
	rv = cache_register(&rsi_cache);
    bdcc:	3c 00 00 00 	lis     r0,0
    bdd0:	30 60 00 00 	addic   r3,r0,0
    bdd4:	48 00 00 01 	bl      bdd4 <gss_svc_init+0x58>
    bdd8:	90 61 00 08 	stw     r3,8(r1)
	if (rv)
    bddc:	80 01 00 08 	lwz     r0,8(r1)
    bde0:	2f 80 00 00 	cmpwi   cr7,r0,0
    bde4:	40 9e 00 0c 	bne-    cr7,bdf0 <gss_svc_init+0x74>
		goto out2;
	return 0;
    bde8:	38 00 00 00 	li      r0,0
    bdec:	48 00 00 28 	b       be14 <gss_svc_init+0x98>
	rv = cache_register(&rsc_cache);
	if (rv)
		goto out1;
	rv = cache_register(&rsi_cache);
	if (rv)
		goto out2;
    bdf0:	60 00 00 00 	nop
	return 0;
out2:
	cache_unregister(&rsc_cache);
    bdf4:	3c 00 00 00 	lis     r0,0
    bdf8:	30 60 00 70 	addic   r3,r0,112
    bdfc:	48 00 00 01 	bl      bdfc <gss_svc_init+0x80>
    be00:	48 00 00 08 	b       be08 <gss_svc_init+0x8c>
	int rv = svc_auth_register(RPC_AUTH_GSS, &svcauthops_gss);
	if (rv)
		return rv;
	rv = cache_register(&rsc_cache);
	if (rv)
		goto out1;
    be04:	60 00 00 00 	nop
		goto out2;
	return 0;
out2:
	cache_unregister(&rsc_cache);
out1:
	svc_auth_unregister(RPC_AUTH_GSS);
    be08:	38 60 00 06 	li      r3,6
    be0c:	48 00 00 01 	bl      be0c <gss_svc_init+0x90>
	return rv;
    be10:	80 01 00 08 	lwz     r0,8(r1)
}
    be14:	7c 03 03 78 	mr      r3,r0
    be18:	80 01 00 24 	lwz     r0,36(r1)
    be1c:	7c 08 03 a6 	mtlr    r0
    be20:	38 21 00 20 	addi    r1,r1,32
    be24:	4e 80 00 20 	blr

0000be28 <gss_svc_shutdown>:

void
gss_svc_shutdown(void)
{
    be28:	94 21 ff f0 	stwu    r1,-16(r1)
    be2c:	7c 08 02 a6 	mflr    r0
    be30:	90 01 00 14 	stw     r0,20(r1)
	cache_unregister(&rsc_cache);
    be34:	3c 00 00 00 	lis     r0,0
    be38:	30 60 00 70 	addic   r3,r0,112
    be3c:	48 00 00 01 	bl      be3c <gss_svc_shutdown+0x14>
	cache_unregister(&rsi_cache);
    be40:	3c 00 00 00 	lis     r0,0
    be44:	30 60 00 00 	addic   r3,r0,0
    be48:	48 00 00 01 	bl      be48 <gss_svc_shutdown+0x20>
	svc_auth_unregister(RPC_AUTH_GSS);
    be4c:	38 60 00 06 	li      r3,6
    be50:	48 00 00 01 	bl      be50 <gss_svc_shutdown+0x28>
}
    be54:	80 01 00 14 	lwz     r0,20(r1)
    be58:	7c 08 03 a6 	mtlr    r0
    be5c:	38 21 00 10 	addi    r1,r1,16
    be60:	4e 80 00 20 	blr

Disassembly of section .init.text:

00000000 <init_rpcsec_gss>:

/*
 * Initialize RPCSEC_GSS module
 */
static int __init init_rpcsec_gss(void)
{
   0:	94 21 ff e0 	stwu    r1,-32(r1)
   4:	7c 08 02 a6 	mflr    r0
   8:	90 01 00 24 	stw     r0,36(r1)
	int err = 0;
   c:	38 00 00 00 	li      r0,0
  10:	90 01 00 08 	stw     r0,8(r1)

	err = rpcauth_register(&authgss_ops);
  14:	3c 00 00 00 	lis     r0,0
  18:	30 60 00 0c 	addic   r3,r0,12
  1c:	48 00 00 01 	bl      1c <init_rpcsec_gss+0x1c>
  20:	90 61 00 08 	stw     r3,8(r1)
	if (err)
  24:	80 01 00 08 	lwz     r0,8(r1)
  28:	2f 80 00 00 	cmpwi   cr7,r0,0
  2c:	40 9e 00 48 	bne-    cr7,74 <init_rpcsec_gss+0x74>
		goto out;
	err = gss_svc_init();
  30:	48 00 00 01 	bl      30 <init_rpcsec_gss+0x30>
  34:	90 61 00 08 	stw     r3,8(r1)
	if (err)
  38:	80 01 00 08 	lwz     r0,8(r1)
  3c:	2f 80 00 00 	cmpwi   cr7,r0,0
  40:	40 9e 00 20 	bne-    cr7,60 <init_rpcsec_gss+0x60>
		goto out_unregister;
	rpc_init_wait_queue(&pipe_version_rpc_waitqueue, "gss pipe version");
  44:	3c 00 00 00 	lis     r0,0
  48:	30 60 00 04 	addic   r3,r0,4
  4c:	3c 00 00 00 	lis     r0,0
  50:	30 80 05 c8 	addic   r4,r0,1480
  54:	48 00 00 01 	bl      54 <init_rpcsec_gss+0x54>
	return 0;
  58:	38 00 00 00 	li      r0,0
  5c:	48 00 00 20 	b       7c <init_rpcsec_gss+0x7c>
	err = rpcauth_register(&authgss_ops);
	if (err)
		goto out;
	err = gss_svc_init();
	if (err)
		goto out_unregister;
  60:	60 00 00 00 	nop
	rpc_init_wait_queue(&pipe_version_rpc_waitqueue, "gss pipe version");
	return 0;
out_unregister:
	rpcauth_unregister(&authgss_ops);
  64:	3c 00 00 00 	lis     r0,0
  68:	30 60 00 0c 	addic   r3,r0,12
  6c:	48 00 00 01 	bl      6c <init_rpcsec_gss+0x6c>
  70:	48 00 00 08 	b       78 <init_rpcsec_gss+0x78>
{
	int err = 0;

	err = rpcauth_register(&authgss_ops);
	if (err)
		goto out;
  74:	60 00 00 00 	nop
	rpc_init_wait_queue(&pipe_version_rpc_waitqueue, "gss pipe version");
	return 0;
out_unregister:
	rpcauth_unregister(&authgss_ops);
out:
	return err;
  78:	80 01 00 08 	lwz     r0,8(r1)
}
  7c:	7c 03 03 78 	mr      r3,r0
  80:	80 01 00 24 	lwz     r0,36(r1)
  84:	7c 08 03 a6 	mtlr    r0
  88:	38 21 00 20 	addi    r1,r1,32
  8c:	4e 80 00 20 	blr

Disassembly of section .exit.text:

00000000 <exit_rpcsec_gss>:

static void __exit exit_rpcsec_gss(void)
{
   0:	94 21 ff f0 	stwu    r1,-16(r1)
   4:	7c 08 02 a6 	mflr    r0
   8:	90 01 00 14 	stw     r0,20(r1)
	gss_svc_shutdown();
   c:	48 00 00 01 	bl      c <exit_rpcsec_gss+0xc>
	rpcauth_unregister(&authgss_ops);
  10:	3c 00 00 00 	lis     r0,0
  14:	30 60 00 0c 	addic   r3,r0,12
  18:	48 00 00 01 	bl      18 <exit_rpcsec_gss+0x18>
	synchronize_sched();	/* Only one CPU, so pretty fast anyway!!! */
}

static inline void rcu_barrier(void)
{
	rcu_barrier_sched();  /* Only one CPU, so only one list of callbacks! */
  1c:	48 00 00 01 	bl      1c <exit_rpcsec_gss+0x1c>
	rcu_barrier(); /* Wait for completion of call_rcu()'s */
}
  20:	80 01 00 14 	lwz     r0,20(r1)
  24:	7c 08 03 a6 	mtlr    r0
  28:	38 21 00 10 	addi    r1,r1,16
  2c:	4e 80 00 20 	blr
