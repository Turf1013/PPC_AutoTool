
/home/bombe/target-project/powerpc-module/kernel/linux-2.6.38/net/key/af_key.o:     file format elf32-powerpc


Disassembly of section .text:

00000000 <pfkey_can_dump>:
{
	return (struct pfkey_sock *)sk;
}

static int pfkey_can_dump(struct sock *sk)
{
       0:	94 21 ff d0 	stwu    r1,-48(r1)
       4:	93 e1 00 2c 	stw     r31,44(r1)
       8:	90 61 00 18 	stw     r3,24(r1)
	if (3 * atomic_read(&sk->sk_rmem_alloc) <= 2 * sk->sk_rcvbuf)
       c:	80 01 00 18 	lwz     r0,24(r1)
      10:	30 00 00 48 	addic   r0,r0,72
      14:	90 01 00 08 	stw     r0,8(r1)

static __inline__ int atomic_read(const atomic_t *v)
{
	int t;

	__asm__ __volatile__("lwz%U1%X1 %0,%1" : "=r"(t) : "m"(v->counter));
      18:	80 01 00 08 	lwz     r0,8(r1)
      1c:	7c 09 03 78 	mr      r9,r0
      20:	83 e9 00 00 	lwz     r31,0(r9)
      24:	93 e1 00 0c 	stw     r31,12(r1)

	return t;
      28:	80 01 00 0c 	lwz     r0,12(r1)
      2c:	7c 09 03 78 	mr      r9,r0
      30:	7d 20 4b 78 	mr      r0,r9
      34:	54 00 08 3c 	rlwinm  r0,r0,1,0,30
      38:	7d 20 4a 14 	add     r9,r0,r9
      3c:	80 01 00 18 	lwz     r0,24(r1)
      40:	7c 0b 03 78 	mr      r11,r0
      44:	80 0b 00 60 	lwz     r0,96(r11)
      48:	54 00 08 3c 	rlwinm  r0,r0,1,0,30
      4c:	7f 89 00 00 	cmpw    cr7,r9,r0
      50:	41 9d 00 0c 	bgt-    cr7,5c <pfkey_can_dump+0x5c>
		return 1;
      54:	38 00 00 01 	li      r0,1
      58:	48 00 00 08 	b       60 <pfkey_can_dump+0x60>
	return 0;
      5c:	38 00 00 00 	li      r0,0
}
      60:	7c 03 03 78 	mr      r3,r0
      64:	83 e1 00 2c 	lwz     r31,44(r1)
      68:	38 21 00 30 	addi    r1,r1,48
      6c:	4e 80 00 20 	blr

00000070 <pfkey_terminate_dump>:

static void pfkey_terminate_dump(struct pfkey_sock *pfk)
{
      70:	94 21 ff f0 	stwu    r1,-16(r1)
      74:	7c 08 02 a6 	mflr    r0
      78:	90 01 00 14 	stw     r0,20(r1)
      7c:	90 61 00 08 	stw     r3,8(r1)
	if (pfk->dump.dump) {
      80:	80 01 00 08 	lwz     r0,8(r1)
      84:	7c 09 03 78 	mr      r9,r0
      88:	80 09 01 58 	lwz     r0,344(r9)
      8c:	2f 80 00 00 	cmpwi   cr7,r0,0
      90:	41 9e 00 74 	beq-    cr7,104 <pfkey_terminate_dump+0x94>
		if (pfk->dump.skb) {
      94:	80 01 00 08 	lwz     r0,8(r1)
      98:	7c 0b 03 78 	mr      r11,r0
      9c:	80 0b 01 74 	lwz     r0,372(r11)
      a0:	2f 80 00 00 	cmpwi   cr7,r0,0
      a4:	41 9e 00 28 	beq-    cr7,cc <pfkey_terminate_dump+0x5c>
			kfree_skb(pfk->dump.skb);
      a8:	80 01 00 08 	lwz     r0,8(r1)
      ac:	7c 09 03 78 	mr      r9,r0
      b0:	80 09 01 74 	lwz     r0,372(r9)
      b4:	7c 03 03 78 	mr      r3,r0
      b8:	48 00 00 01 	bl      b8 <pfkey_terminate_dump+0x48>
			pfk->dump.skb = NULL;
      bc:	80 01 00 08 	lwz     r0,8(r1)
      c0:	39 20 00 00 	li      r9,0
      c4:	7c 0b 03 78 	mr      r11,r0
      c8:	91 2b 01 74 	stw     r9,372(r11)
		}
		pfk->dump.done(pfk);
      cc:	80 01 00 08 	lwz     r0,8(r1)
      d0:	7c 09 03 78 	mr      r9,r0
      d4:	80 09 01 5c 	lwz     r0,348(r9)
      d8:	80 61 00 08 	lwz     r3,8(r1)
      dc:	7c 09 03 a6 	mtctr   r0
      e0:	4e 80 04 21 	bctrl
		pfk->dump.dump = NULL;
      e4:	80 01 00 08 	lwz     r0,8(r1)
      e8:	39 20 00 00 	li      r9,0
      ec:	7c 0b 03 78 	mr      r11,r0
      f0:	91 2b 01 58 	stw     r9,344(r11)
		pfk->dump.done = NULL;
      f4:	80 01 00 08 	lwz     r0,8(r1)
      f8:	39 20 00 00 	li      r9,0
      fc:	7c 0b 03 78 	mr      r11,r0
     100:	91 2b 01 5c 	stw     r9,348(r11)
	}
}
     104:	80 01 00 14 	lwz     r0,20(r1)
     108:	7c 08 03 a6 	mtlr    r0
     10c:	38 21 00 10 	addi    r1,r1,16
     110:	4e 80 00 20 	blr

00000114 <pfkey_sock_destruct>:

static void pfkey_sock_destruct(struct sock *sk)
{
     114:	94 21 ff 80 	stwu    r1,-128(r1)
     118:	7c 08 02 a6 	mflr    r0
     11c:	90 01 00 84 	stw     r0,132(r1)
     120:	93 e1 00 7c 	stw     r31,124(r1)
     124:	90 61 00 68 	stw     r3,104(r1)
     128:	80 01 00 68 	lwz     r0,104(r1)
     12c:	90 01 00 58 	stw     r0,88(r1)
#endif

static inline
struct net *sock_net(const struct sock *sk)
{
	return read_pnet(&sk->sk_net);
     130:	3c 00 00 00 	lis     r0,0
     134:	30 00 00 00 	addic   r0,r0,0
	struct net *net = sock_net(sk);
     138:	90 01 00 08 	stw     r0,8(r1)
	struct netns_pfkey *net_pfkey = net_generic(net, pfkey_net_id);
     13c:	3c 00 00 00 	lis     r0,0
     140:	7c 09 03 78 	mr      r9,r0
     144:	80 09 00 00 	lwz     r0,0(r9)
     148:	81 21 00 08 	lwz     r9,8(r1)
     14c:	91 21 00 18 	stw     r9,24(r1)
     150:	90 01 00 1c 	stw     r0,28(r1)
{
	struct net_generic *ng;
	void *ptr;

	rcu_read_lock();
	ng = rcu_dereference(net->gen);
     154:	80 01 00 18 	lwz     r0,24(r1)
     158:	7c 0b 03 78 	mr      r11,r0
     15c:	80 0b 02 20 	lwz     r0,544(r11)
     160:	90 01 00 20 	stw     r0,32(r1)
     164:	80 01 00 20 	lwz     r0,32(r1)
     168:	90 01 00 24 	stw     r0,36(r1)
	BUG_ON(id == 0 || id > ng->len);
     16c:	80 01 00 1c 	lwz     r0,28(r1)
     170:	2f 80 00 00 	cmpwi   cr7,r0,0
     174:	41 9e 00 1c 	beq-    cr7,190 <pfkey_sock_destruct+0x7c>
     178:	81 21 00 1c 	lwz     r9,28(r1)
     17c:	80 01 00 24 	lwz     r0,36(r1)
     180:	7c 0b 03 78 	mr      r11,r0
     184:	80 0b 00 00 	lwz     r0,0(r11)
     188:	7f 89 00 40 	cmplw   cr7,r9,r0
     18c:	40 9d 00 0c 	ble-    cr7,198 <pfkey_sock_destruct+0x84>
     190:	38 00 00 01 	li      r0,1
     194:	48 00 00 08 	b       19c <pfkey_sock_destruct+0x88>
     198:	38 00 00 00 	li      r0,0
     19c:	0f 00 00 00 	twnei   r0,0
	ptr = ng->ptr[id - 1];
     1a0:	80 01 00 1c 	lwz     r0,28(r1)
     1a4:	30 00 ff ff 	addic   r0,r0,-1
     1a8:	81 21 00 24 	lwz     r9,36(r1)
     1ac:	54 00 10 3a 	rlwinm  r0,r0,2,0,29
     1b0:	7c 09 02 14 	add     r0,r9,r0
     1b4:	30 00 00 0c 	addic   r0,r0,12
     1b8:	7c 09 03 78 	mr      r9,r0
     1bc:	80 09 00 00 	lwz     r0,0(r9)
     1c0:	90 01 00 28 	stw     r0,40(r1)
	rcu_read_unlock();

	return ptr;
     1c4:	80 01 00 28 	lwz     r0,40(r1)
     1c8:	90 01 00 0c 	stw     r0,12(r1)
     1cc:	80 01 00 68 	lwz     r0,104(r1)
     1d0:	90 01 00 2c 	stw     r0,44(r1)
	} dump;
};

static inline struct pfkey_sock *pfkey_sk(struct sock *sk)
{
	return (struct pfkey_sock *)sk;
     1d4:	80 01 00 2c 	lwz     r0,44(r1)
static void pfkey_sock_destruct(struct sock *sk)
{
	struct net *net = sock_net(sk);
	struct netns_pfkey *net_pfkey = net_generic(net, pfkey_net_id);

	pfkey_terminate_dump(pfkey_sk(sk));
     1d8:	7c 03 03 78 	mr      r3,r0
     1dc:	4b ff fe 95 	bl      70 <pfkey_terminate_dump>
	skb_queue_purge(&sk->sk_receive_queue);
     1e0:	80 01 00 68 	lwz     r0,104(r1)
     1e4:	30 00 00 3c 	addic   r0,r0,60
     1e8:	7c 03 03 78 	mr      r3,r0
     1ec:	48 00 00 01 	bl      1ec <pfkey_sock_destruct+0xd8>
     1f0:	80 01 00 68 	lwz     r0,104(r1)
     1f4:	90 01 00 30 	stw     r0,48(r1)
     1f8:	38 00 00 00 	li      r0,0
     1fc:	90 01 00 34 	stw     r0,52(r1)
	__clear_bit(flag, &sk->sk_flags);
}

static inline int sock_flag(struct sock *sk, enum sock_flags flag)
{
	return test_bit(flag, &sk->sk_flags);
     200:	81 21 00 34 	lwz     r9,52(r1)
     204:	80 01 00 30 	lwz     r0,48(r1)
     208:	30 00 00 74 	addic   r0,r0,116
     20c:	91 21 00 38 	stw     r9,56(r1)
     210:	90 01 00 3c 	stw     r0,60(r1)
 * @nr: bit number to test
 * @addr: Address to start counting from
 */
static inline int test_bit(int nr, const volatile unsigned long *addr)
{
	return 1UL & (addr[BIT_WORD(nr)] >> (nr & (BITS_PER_LONG-1)));
     214:	80 01 00 38 	lwz     r0,56(r1)
     218:	7c 00 2e 70 	srawi   r0,r0,5
     21c:	7c 00 01 94 	addze   r0,r0
     220:	54 00 10 3a 	rlwinm  r0,r0,2,0,29
     224:	81 21 00 3c 	lwz     r9,60(r1)
     228:	7c 09 02 14 	add     r0,r9,r0
     22c:	7c 0b 03 78 	mr      r11,r0
     230:	81 2b 00 00 	lwz     r9,0(r11)
     234:	80 01 00 38 	lwz     r0,56(r1)
     238:	54 00 06 fe 	clrlwi  r0,r0,27
     23c:	7d 20 04 30 	srw     r0,r9,r0
     240:	54 00 07 fe 	clrlwi  r0,r0,31

	if (!sock_flag(sk, SOCK_DEAD)) {
     244:	2f 80 00 00 	cmpwi   cr7,r0,0
     248:	40 9e 00 18 	bne-    cr7,260 <pfkey_sock_destruct+0x14c>
		pr_err("Attempt to release alive pfkey socket: %p\n", sk);
     24c:	3c 00 00 00 	lis     r0,0
     250:	30 60 00 1c 	addic   r3,r0,28
     254:	80 81 00 68 	lwz     r4,104(r1)
     258:	48 00 00 01 	bl      258 <pfkey_sock_destruct+0x144>
		return;
     25c:	48 00 00 a8 	b       304 <pfkey_sock_destruct+0x1f0>
	}

	WARN_ON(atomic_read(&sk->sk_rmem_alloc));
     260:	80 01 00 68 	lwz     r0,104(r1)
     264:	30 00 00 48 	addic   r0,r0,72
     268:	90 01 00 40 	stw     r0,64(r1)

static __inline__ int atomic_read(const atomic_t *v)
{
	int t;

	__asm__ __volatile__("lwz%U1%X1 %0,%1" : "=r"(t) : "m"(v->counter));
     26c:	80 01 00 40 	lwz     r0,64(r1)
     270:	7c 09 03 78 	mr      r9,r0
     274:	83 e9 00 00 	lwz     r31,0(r9)
     278:	93 e1 00 44 	stw     r31,68(r1)

	return t;
     27c:	80 01 00 44 	lwz     r0,68(r1)
     280:	2f 80 00 00 	cmpwi   cr7,r0,0
     284:	7c 00 00 26 	mfcr    r0
     288:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
     28c:	68 00 00 01 	xori    r0,r0,1
     290:	90 01 00 10 	stw     r0,16(r1)
     294:	80 01 00 10 	lwz     r0,16(r1)
     298:	0f 00 00 00 	twnei   r0,0
	WARN_ON(atomic_read(&sk->sk_wmem_alloc));
     29c:	80 01 00 68 	lwz     r0,104(r1)
     2a0:	30 00 00 7c 	addic   r0,r0,124
     2a4:	90 01 00 48 	stw     r0,72(r1)

static __inline__ int atomic_read(const atomic_t *v)
{
	int t;

	__asm__ __volatile__("lwz%U1%X1 %0,%1" : "=r"(t) : "m"(v->counter));
     2a8:	80 01 00 48 	lwz     r0,72(r1)
     2ac:	7c 0b 03 78 	mr      r11,r0
     2b0:	83 eb 00 00 	lwz     r31,0(r11)
     2b4:	93 e1 00 4c 	stw     r31,76(r1)

	return t;
     2b8:	80 01 00 4c 	lwz     r0,76(r1)
     2bc:	2f 80 00 00 	cmpwi   cr7,r0,0
     2c0:	7c 00 00 26 	mfcr    r0
     2c4:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
     2c8:	68 00 00 01 	xori    r0,r0,1
     2cc:	90 01 00 14 	stw     r0,20(r1)
     2d0:	80 01 00 14 	lwz     r0,20(r1)
     2d4:	0f 00 00 00 	twnei   r0,0

	atomic_dec(&net_pfkey->socks_nr);
     2d8:	80 01 00 0c 	lwz     r0,12(r1)
     2dc:	30 00 00 04 	addic   r0,r0,4
     2e0:	90 01 00 50 	stw     r0,80(r1)
	addic	%0,%0,-1\n"
	PPC405_ERR77(0,%2)\
"	stwcx.	%0,0,%2\n\
	bne-	1b"
	: "=&r" (t), "+m" (v->counter)
	: "r" (&v->counter)
     2e4:	80 01 00 50 	lwz     r0,80(r1)
"1:	lwarx	%0,0,%2		# atomic_dec\n\
	addic	%0,%0,-1\n"
	PPC405_ERR77(0,%2)\
"	stwcx.	%0,0,%2\n\
	bne-	1b"
	: "=&r" (t), "+m" (v->counter)
     2e8:	81 61 00 50 	lwz     r11,80(r1)
     2ec:	81 21 00 50 	lwz     r9,80(r1)

static __inline__ void atomic_dec(atomic_t *v)
{
	int t;

	__asm__ __volatile__(
     2f0:	7f e0 00 28 	lwarx   r31,0,r0
     2f4:	33 ff ff ff 	addic   r31,r31,-1
     2f8:	7f e0 01 2d 	stwcx.  r31,0,r0
     2fc:	40 a2 ff f4 	bne-    2f0 <pfkey_sock_destruct+0x1dc>
     300:	93 e1 00 54 	stw     r31,84(r1)
}
     304:	80 01 00 84 	lwz     r0,132(r1)
     308:	7c 08 03 a6 	mtlr    r0
     30c:	83 e1 00 7c 	lwz     r31,124(r1)
     310:	38 21 00 80 	addi    r1,r1,128
     314:	4e 80 00 20 	blr

00000318 <pfkey_insert>:

static const struct proto_ops pfkey_ops;

static void pfkey_insert(struct sock *sk)
{
     318:	94 21 ff a0 	stwu    r1,-96(r1)
     31c:	7c 08 02 a6 	mflr    r0
     320:	90 01 00 64 	stw     r0,100(r1)
     324:	93 e1 00 5c 	stw     r31,92(r1)
     328:	90 61 00 48 	stw     r3,72(r1)
     32c:	80 01 00 48 	lwz     r0,72(r1)
     330:	90 01 00 44 	stw     r0,68(r1)
#endif

static inline
struct net *sock_net(const struct sock *sk)
{
	return read_pnet(&sk->sk_net);
     334:	3c 00 00 00 	lis     r0,0
     338:	30 00 00 00 	addic   r0,r0,0
	struct net *net = sock_net(sk);
     33c:	90 01 00 08 	stw     r0,8(r1)
	struct netns_pfkey *net_pfkey = net_generic(net, pfkey_net_id);
     340:	3c 00 00 00 	lis     r0,0
     344:	7c 09 03 78 	mr      r9,r0
     348:	80 09 00 00 	lwz     r0,0(r9)
     34c:	81 21 00 08 	lwz     r9,8(r1)
     350:	91 21 00 10 	stw     r9,16(r1)
     354:	90 01 00 14 	stw     r0,20(r1)
{
	struct net_generic *ng;
	void *ptr;

	rcu_read_lock();
	ng = rcu_dereference(net->gen);
     358:	80 01 00 10 	lwz     r0,16(r1)
     35c:	7c 0b 03 78 	mr      r11,r0
     360:	80 0b 02 20 	lwz     r0,544(r11)
     364:	90 01 00 18 	stw     r0,24(r1)
     368:	80 01 00 18 	lwz     r0,24(r1)
     36c:	90 01 00 1c 	stw     r0,28(r1)
	BUG_ON(id == 0 || id > ng->len);
     370:	80 01 00 14 	lwz     r0,20(r1)
     374:	2f 80 00 00 	cmpwi   cr7,r0,0
     378:	41 9e 00 1c 	beq-    cr7,394 <pfkey_insert+0x7c>
     37c:	81 21 00 14 	lwz     r9,20(r1)
     380:	80 01 00 1c 	lwz     r0,28(r1)
     384:	7c 0b 03 78 	mr      r11,r0
     388:	80 0b 00 00 	lwz     r0,0(r11)
     38c:	7f 89 00 40 	cmplw   cr7,r9,r0
     390:	40 9d 00 0c 	ble-    cr7,39c <pfkey_insert+0x84>
     394:	38 00 00 01 	li      r0,1
     398:	48 00 00 08 	b       3a0 <pfkey_insert+0x88>
     39c:	38 00 00 00 	li      r0,0
     3a0:	0f 00 00 00 	twnei   r0,0
	ptr = ng->ptr[id - 1];
     3a4:	80 01 00 14 	lwz     r0,20(r1)
     3a8:	30 00 ff ff 	addic   r0,r0,-1
     3ac:	81 21 00 1c 	lwz     r9,28(r1)
     3b0:	54 00 10 3a 	rlwinm  r0,r0,2,0,29
     3b4:	7c 09 02 14 	add     r0,r9,r0
     3b8:	30 00 00 0c 	addic   r0,r0,12
     3bc:	7c 09 03 78 	mr      r9,r0
     3c0:	80 09 00 00 	lwz     r0,0(r9)
     3c4:	90 01 00 20 	stw     r0,32(r1)
	rcu_read_unlock();

	return ptr;
     3c8:	80 01 00 20 	lwz     r0,32(r1)
     3cc:	90 01 00 0c 	stw     r0,12(r1)

	mutex_lock(&pfkey_mutex);
     3d0:	3c 00 00 00 	lis     r0,0
     3d4:	30 60 00 00 	addic   r3,r0,0
     3d8:	48 00 00 01 	bl      3d8 <pfkey_insert+0xc0>
	sk_add_node_rcu(sk, &net_pfkey->table);
     3dc:	80 01 00 0c 	lwz     r0,12(r1)
     3e0:	81 21 00 48 	lwz     r9,72(r1)
     3e4:	91 21 00 24 	stw     r9,36(r1)
     3e8:	90 01 00 28 	stw     r0,40(r1)
     3ec:	80 01 00 24 	lwz     r0,36(r1)
     3f0:	90 01 00 2c 	stw     r0,44(r1)
   modifications.
 */

static inline void sock_hold(struct sock *sk)
{
	atomic_inc(&sk->sk_refcnt);
     3f4:	80 01 00 2c 	lwz     r0,44(r1)
     3f8:	30 00 00 2c 	addic   r0,r0,44
     3fc:	90 01 00 30 	stw     r0,48(r1)
	addic	%0,%0,1\n"
	PPC405_ERR77(0,%2)
"	stwcx.	%0,0,%2 \n\
	bne-	1b"
	: "=&r" (t), "+m" (v->counter)
	: "r" (&v->counter)
     400:	80 01 00 30 	lwz     r0,48(r1)
"1:	lwarx	%0,0,%2		# atomic_inc\n\
	addic	%0,%0,1\n"
	PPC405_ERR77(0,%2)
"	stwcx.	%0,0,%2 \n\
	bne-	1b"
	: "=&r" (t), "+m" (v->counter)
     404:	81 61 00 30 	lwz     r11,48(r1)
     408:	81 21 00 30 	lwz     r9,48(r1)

static __inline__ void atomic_inc(atomic_t *v)
{
	int t;

	__asm__ __volatile__(
     40c:	7f e0 00 28 	lwarx   r31,0,r0
     410:	33 ff 00 01 	addic   r31,r31,1
     414:	7f e0 01 2d 	stwcx.  r31,0,r0
     418:	40 a2 ff f4 	bne-    40c <pfkey_insert+0xf4>
     41c:	93 e1 00 34 	stw     r31,52(r1)
}

static __inline__ void sk_add_node_rcu(struct sock *sk, struct hlist_head *list)
{
	sock_hold(sk);
	hlist_add_head_rcu(&sk->sk_node, list);
     420:	80 01 00 24 	lwz     r0,36(r1)
     424:	30 00 00 20 	addic   r0,r0,32
     428:	90 01 00 38 	stw     r0,56(r1)
     42c:	80 01 00 28 	lwz     r0,40(r1)
     430:	90 01 00 3c 	stw     r0,60(r1)
 * list-traversal primitive must be guarded by rcu_read_lock().
 */
static inline void hlist_add_head_rcu(struct hlist_node *n,
					struct hlist_head *h)
{
	struct hlist_node *first = h->first;
     434:	80 01 00 3c 	lwz     r0,60(r1)
     438:	7c 0b 03 78 	mr      r11,r0
     43c:	80 0b 00 00 	lwz     r0,0(r11)
     440:	90 01 00 40 	stw     r0,64(r1)

	n->next = first;
     444:	80 01 00 38 	lwz     r0,56(r1)
     448:	81 21 00 40 	lwz     r9,64(r1)
     44c:	7c 0b 03 78 	mr      r11,r0
     450:	91 2b 00 00 	stw     r9,0(r11)
	n->pprev = &h->first;
     454:	81 21 00 3c 	lwz     r9,60(r1)
     458:	80 01 00 38 	lwz     r0,56(r1)
     45c:	7c 0b 03 78 	mr      r11,r0
     460:	91 2b 00 04 	stw     r9,4(r11)
	rcu_assign_pointer(hlist_first_rcu(h), n);
     464:	80 01 00 3c 	lwz     r0,60(r1)
     468:	81 21 00 38 	lwz     r9,56(r1)
     46c:	7c 0b 03 78 	mr      r11,r0
     470:	91 2b 00 00 	stw     r9,0(r11)
	if (first)
     474:	80 01 00 40 	lwz     r0,64(r1)
     478:	2f 80 00 00 	cmpwi   cr7,r0,0
     47c:	41 9e 00 14 	beq-    cr7,490 <pfkey_insert+0x178>
		first->pprev = &n->next;
     480:	81 21 00 38 	lwz     r9,56(r1)
     484:	80 01 00 40 	lwz     r0,64(r1)
     488:	7c 0b 03 78 	mr      r11,r0
     48c:	91 2b 00 04 	stw     r9,4(r11)
	mutex_unlock(&pfkey_mutex);
     490:	3c 00 00 00 	lis     r0,0
     494:	30 60 00 00 	addic   r3,r0,0
     498:	48 00 00 01 	bl      498 <pfkey_insert+0x180>
}
     49c:	80 01 00 64 	lwz     r0,100(r1)
     4a0:	7c 08 03 a6 	mtlr    r0
     4a4:	83 e1 00 5c 	lwz     r31,92(r1)
     4a8:	38 21 00 60 	addi    r1,r1,96
     4ac:	4e 80 00 20 	blr

000004b0 <pfkey_remove>:

static void pfkey_remove(struct sock *sk)
{
     4b0:	94 21 ff 90 	stwu    r1,-112(r1)
     4b4:	7c 08 02 a6 	mflr    r0
     4b8:	90 01 00 74 	stw     r0,116(r1)
     4bc:	93 e1 00 6c 	stw     r31,108(r1)
     4c0:	90 61 00 58 	stw     r3,88(r1)
	mutex_lock(&pfkey_mutex);
     4c4:	3c 00 00 00 	lis     r0,0
     4c8:	30 60 00 00 	addic   r3,r0,0
     4cc:	48 00 00 01 	bl      4cc <pfkey_remove+0x1c>
     4d0:	80 01 00 58 	lwz     r0,88(r1)
     4d4:	90 01 00 08 	stw     r0,8(r1)
     4d8:	80 01 00 08 	lwz     r0,8(r1)
     4dc:	90 01 00 0c 	stw     r0,12(r1)
     4e0:	80 01 00 0c 	lwz     r0,12(r1)
     4e4:	90 01 00 10 	stw     r0,16(r1)
     4e8:	80 01 00 10 	lwz     r0,16(r1)
     4ec:	90 01 00 14 	stw     r0,20(r1)
		NULL;
}

static inline int sk_unhashed(const struct sock *sk)
{
	return hlist_unhashed(&sk->sk_node);
     4f0:	80 01 00 14 	lwz     r0,20(r1)
     4f4:	30 00 00 20 	addic   r0,r0,32
     4f8:	90 01 00 18 	stw     r0,24(r1)
	h->pprev = NULL;
}

static inline int hlist_unhashed(const struct hlist_node *h)
{
	return !h->pprev;
     4fc:	80 01 00 18 	lwz     r0,24(r1)
     500:	7c 09 03 78 	mr      r9,r0
     504:	80 09 00 04 	lwz     r0,4(r9)
     508:	2f 80 00 00 	cmpwi   cr7,r0,0
     50c:	7c 00 00 26 	mfcr    r0
     510:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
}

static inline int sk_hashed(const struct sock *sk)
{
	return !sk_unhashed(sk);
     514:	2f 80 00 00 	cmpwi   cr7,r0,0
     518:	7c 00 00 26 	mfcr    r0
     51c:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
}

/* NB: equivalent to hlist_del_init_rcu */
static __inline__ int __sk_del_node_init(struct sock *sk)
{
	if (sk_hashed(sk)) {
     520:	2f 80 00 00 	cmpwi   cr7,r0,0
     524:	41 9e 00 88 	beq-    cr7,5ac <pfkey_remove+0xfc>
     528:	80 01 00 0c 	lwz     r0,12(r1)
     52c:	90 01 00 1c 	stw     r0,28(r1)
	node->pprev = NULL;
}

static __inline__ void __sk_del_node(struct sock *sk)
{
	__hlist_del(&sk->sk_node);
     530:	80 01 00 1c 	lwz     r0,28(r1)
     534:	30 00 00 20 	addic   r0,r0,32
     538:	90 01 00 20 	stw     r0,32(r1)
	return !h->first;
}

static inline void __hlist_del(struct hlist_node *n)
{
	struct hlist_node *next = n->next;
     53c:	80 01 00 20 	lwz     r0,32(r1)
     540:	7c 0b 03 78 	mr      r11,r0
     544:	80 0b 00 00 	lwz     r0,0(r11)
     548:	90 01 00 24 	stw     r0,36(r1)
	struct hlist_node **pprev = n->pprev;
     54c:	80 01 00 20 	lwz     r0,32(r1)
     550:	7c 09 03 78 	mr      r9,r0
     554:	80 09 00 04 	lwz     r0,4(r9)
     558:	90 01 00 28 	stw     r0,40(r1)
	*pprev = next;
     55c:	80 01 00 28 	lwz     r0,40(r1)
     560:	81 21 00 24 	lwz     r9,36(r1)
     564:	7c 0b 03 78 	mr      r11,r0
     568:	91 2b 00 00 	stw     r9,0(r11)
	if (next)
     56c:	80 01 00 24 	lwz     r0,36(r1)
     570:	2f 80 00 00 	cmpwi   cr7,r0,0
     574:	41 9e 00 14 	beq-    cr7,588 <pfkey_remove+0xd8>
		next->pprev = pprev;
     578:	80 01 00 24 	lwz     r0,36(r1)
     57c:	81 21 00 28 	lwz     r9,40(r1)
     580:	7c 0b 03 78 	mr      r11,r0
     584:	91 2b 00 04 	stw     r9,4(r11)
/* NB: equivalent to hlist_del_init_rcu */
static __inline__ int __sk_del_node_init(struct sock *sk)
{
	if (sk_hashed(sk)) {
		__sk_del_node(sk);
		sk_node_init(&sk->sk_node);
     588:	80 01 00 0c 	lwz     r0,12(r1)
     58c:	30 00 00 20 	addic   r0,r0,32
     590:	90 01 00 2c 	stw     r0,44(r1)
	return !sk_unhashed(sk);
}

static __inline__ void sk_node_init(struct hlist_node *node)
{
	node->pprev = NULL;
     594:	80 01 00 2c 	lwz     r0,44(r1)
     598:	39 20 00 00 	li      r9,0
     59c:	7c 0b 03 78 	mr      r11,r0
     5a0:	91 2b 00 04 	stw     r9,4(r11)
static __inline__ int __sk_del_node_init(struct sock *sk)
{
	if (sk_hashed(sk)) {
		__sk_del_node(sk);
		sk_node_init(&sk->sk_node);
		return 1;
     5a4:	38 00 00 01 	li      r0,1
     5a8:	48 00 00 08 	b       5b0 <pfkey_remove+0x100>
	}
	return 0;
     5ac:	38 00 00 00 	li      r0,0
	atomic_dec(&sk->sk_refcnt);
}

static __inline__ int sk_del_node_init(struct sock *sk)
{
	int rc = __sk_del_node_init(sk);
     5b0:	90 01 00 30 	stw     r0,48(r1)

	if (rc) {
     5b4:	80 01 00 30 	lwz     r0,48(r1)
     5b8:	2f 80 00 00 	cmpwi   cr7,r0,0
     5bc:	41 9e 00 70 	beq-    cr7,62c <pfkey_remove+0x17c>
		/* paranoid for a while -acme */
		WARN_ON(atomic_read(&sk->sk_refcnt) == 1);
     5c0:	80 01 00 08 	lwz     r0,8(r1)
     5c4:	30 00 00 2c 	addic   r0,r0,44
     5c8:	90 01 00 34 	stw     r0,52(r1)

static __inline__ int atomic_read(const atomic_t *v)
{
	int t;

	__asm__ __volatile__("lwz%U1%X1 %0,%1" : "=r"(t) : "m"(v->counter));
     5cc:	80 01 00 34 	lwz     r0,52(r1)
     5d0:	7c 09 03 78 	mr      r9,r0
     5d4:	83 e9 00 00 	lwz     r31,0(r9)
     5d8:	93 e1 00 38 	stw     r31,56(r1)

	return t;
     5dc:	80 01 00 38 	lwz     r0,56(r1)
     5e0:	2f 80 00 01 	cmpwi   cr7,r0,1
     5e4:	7c 00 00 26 	mfcr    r0
     5e8:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
     5ec:	90 01 00 3c 	stw     r0,60(r1)
     5f0:	80 01 00 3c 	lwz     r0,60(r1)
     5f4:	0f 00 00 00 	twnei   r0,0
     5f8:	80 01 00 08 	lwz     r0,8(r1)
     5fc:	90 01 00 40 	stw     r0,64(r1)
/* Ungrab socket in the context, which assumes that socket refcnt
   cannot hit zero, f.e. it is true in context of any socketcall.
 */
static inline void __sock_put(struct sock *sk)
{
	atomic_dec(&sk->sk_refcnt);
     600:	80 01 00 40 	lwz     r0,64(r1)
     604:	30 00 00 2c 	addic   r0,r0,44
     608:	90 01 00 44 	stw     r0,68(r1)
	addic	%0,%0,-1\n"
	PPC405_ERR77(0,%2)\
"	stwcx.	%0,0,%2\n\
	bne-	1b"
	: "=&r" (t), "+m" (v->counter)
	: "r" (&v->counter)
     60c:	80 01 00 44 	lwz     r0,68(r1)
"1:	lwarx	%0,0,%2		# atomic_dec\n\
	addic	%0,%0,-1\n"
	PPC405_ERR77(0,%2)\
"	stwcx.	%0,0,%2\n\
	bne-	1b"
	: "=&r" (t), "+m" (v->counter)
     610:	81 61 00 44 	lwz     r11,68(r1)
     614:	81 21 00 44 	lwz     r9,68(r1)

static __inline__ void atomic_dec(atomic_t *v)
{
	int t;

	__asm__ __volatile__(
     618:	7f e0 00 28 	lwarx   r31,0,r0
     61c:	33 ff ff ff 	addic   r31,r31,-1
     620:	7f e0 01 2d 	stwcx.  r31,0,r0
     624:	40 a2 ff f4 	bne-    618 <pfkey_remove+0x168>
     628:	93 e1 00 48 	stw     r31,72(r1)
	sk_del_node_init_rcu(sk);
	mutex_unlock(&pfkey_mutex);
     62c:	3c 00 00 00 	lis     r0,0
     630:	30 60 00 00 	addic   r3,r0,0
     634:	48 00 00 01 	bl      634 <pfkey_remove+0x184>
}
     638:	80 01 00 74 	lwz     r0,116(r1)
     63c:	7c 08 03 a6 	mtlr    r0
     640:	83 e1 00 6c 	lwz     r31,108(r1)
     644:	38 21 00 70 	addi    r1,r1,112
     648:	4e 80 00 20 	blr

0000064c <pfkey_create>:
	.obj_size = sizeof(struct pfkey_sock),
};

static int pfkey_create(struct net *net, struct socket *sock, int protocol,
			int kern)
{
     64c:	94 21 ff b0 	stwu    r1,-80(r1)
     650:	7c 08 02 a6 	mflr    r0
     654:	90 01 00 54 	stw     r0,84(r1)
     658:	93 e1 00 4c 	stw     r31,76(r1)
     65c:	90 61 00 38 	stw     r3,56(r1)
     660:	90 81 00 3c 	stw     r4,60(r1)
     664:	90 a1 00 40 	stw     r5,64(r1)
     668:	90 c1 00 44 	stw     r6,68(r1)
	struct netns_pfkey *net_pfkey = net_generic(net, pfkey_net_id);
     66c:	3c 00 00 00 	lis     r0,0
     670:	7c 09 03 78 	mr      r9,r0
     674:	80 09 00 00 	lwz     r0,0(r9)
     678:	81 21 00 38 	lwz     r9,56(r1)
     67c:	91 21 00 14 	stw     r9,20(r1)
     680:	90 01 00 18 	stw     r0,24(r1)
{
	struct net_generic *ng;
	void *ptr;

	rcu_read_lock();
	ng = rcu_dereference(net->gen);
     684:	80 01 00 14 	lwz     r0,20(r1)
     688:	7c 0b 03 78 	mr      r11,r0
     68c:	80 0b 02 20 	lwz     r0,544(r11)
     690:	90 01 00 1c 	stw     r0,28(r1)
     694:	80 01 00 1c 	lwz     r0,28(r1)
     698:	90 01 00 20 	stw     r0,32(r1)
	BUG_ON(id == 0 || id > ng->len);
     69c:	80 01 00 18 	lwz     r0,24(r1)
     6a0:	2f 80 00 00 	cmpwi   cr7,r0,0
     6a4:	41 9e 00 1c 	beq-    cr7,6c0 <pfkey_create+0x74>
     6a8:	81 21 00 18 	lwz     r9,24(r1)
     6ac:	80 01 00 20 	lwz     r0,32(r1)
     6b0:	7c 0b 03 78 	mr      r11,r0
     6b4:	80 0b 00 00 	lwz     r0,0(r11)
     6b8:	7f 89 00 40 	cmplw   cr7,r9,r0
     6bc:	40 9d 00 0c 	ble-    cr7,6c8 <pfkey_create+0x7c>
     6c0:	38 00 00 01 	li      r0,1
     6c4:	48 00 00 08 	b       6cc <pfkey_create+0x80>
     6c8:	38 00 00 00 	li      r0,0
     6cc:	0f 00 00 00 	twnei   r0,0
	ptr = ng->ptr[id - 1];
     6d0:	80 01 00 18 	lwz     r0,24(r1)
     6d4:	30 00 ff ff 	addic   r0,r0,-1
     6d8:	81 21 00 20 	lwz     r9,32(r1)
     6dc:	54 00 10 3a 	rlwinm  r0,r0,2,0,29
     6e0:	7c 09 02 14 	add     r0,r9,r0
     6e4:	30 00 00 0c 	addic   r0,r0,12
     6e8:	7c 09 03 78 	mr      r9,r0
     6ec:	80 09 00 00 	lwz     r0,0(r9)
     6f0:	90 01 00 24 	stw     r0,36(r1)
	rcu_read_unlock();

	return ptr;
     6f4:	80 01 00 24 	lwz     r0,36(r1)
     6f8:	90 01 00 08 	stw     r0,8(r1)
	struct sock *sk;
	int err;

	if (!capable(CAP_NET_ADMIN))
     6fc:	38 60 00 0c 	li      r3,12
     700:	48 00 00 01 	bl      700 <pfkey_create+0xb4>
     704:	7c 60 1b 78 	mr      r0,r3
     708:	2f 80 00 00 	cmpwi   cr7,r0,0
     70c:	40 9e 00 0c 	bne-    cr7,718 <pfkey_create+0xcc>
		return -EPERM;
     710:	38 00 ff ff 	li      r0,-1
     714:	48 00 00 f0 	b       804 <pfkey_create+0x1b8>
	if (sock->type != SOCK_RAW)
     718:	80 01 00 3c 	lwz     r0,60(r1)
     71c:	7c 0b 03 78 	mr      r11,r0
     720:	a0 0b 00 04 	lhz     r0,4(r11)
     724:	7c 00 07 34 	extsh   r0,r0
     728:	2f 80 00 03 	cmpwi   cr7,r0,3
     72c:	41 9e 00 0c 	beq-    cr7,738 <pfkey_create+0xec>
		return -ESOCKTNOSUPPORT;
     730:	38 00 ff a2 	li      r0,-94
     734:	48 00 00 d0 	b       804 <pfkey_create+0x1b8>
	if (protocol != PF_KEY_V2)
     738:	80 01 00 40 	lwz     r0,64(r1)
     73c:	2f 80 00 02 	cmpwi   cr7,r0,2
     740:	41 9e 00 0c 	beq-    cr7,74c <pfkey_create+0x100>
		return -EPROTONOSUPPORT;
     744:	38 00 ff a3 	li      r0,-93
     748:	48 00 00 bc 	b       804 <pfkey_create+0x1b8>

	err = -ENOMEM;
     74c:	38 00 ff f4 	li      r0,-12
     750:	90 01 00 0c 	stw     r0,12(r1)
	sk = sk_alloc(net, PF_KEY, GFP_KERNEL, &key_proto);
     754:	80 61 00 38 	lwz     r3,56(r1)
     758:	38 80 00 0f 	li      r4,15
     75c:	38 a0 00 d0 	li      r5,208
     760:	3c 00 00 00 	lis     r0,0
     764:	30 c0 00 0c 	addic   r6,r0,12
     768:	48 00 00 01 	bl      768 <pfkey_create+0x11c>
     76c:	90 61 00 10 	stw     r3,16(r1)
	if (sk == NULL)
     770:	80 01 00 10 	lwz     r0,16(r1)
     774:	2f 80 00 00 	cmpwi   cr7,r0,0
     778:	41 9e 00 84 	beq-    cr7,7fc <pfkey_create+0x1b0>
		goto out;

	sock->ops = &pfkey_ops;
     77c:	80 01 00 3c 	lwz     r0,60(r1)
     780:	3d 20 00 00 	lis     r9,0
     784:	39 29 00 60 	addi    r9,r9,96
     788:	7c 0b 03 78 	mr      r11,r0
     78c:	91 2b 00 18 	stw     r9,24(r11)
	sock_init_data(sock, sk);
     790:	80 61 00 3c 	lwz     r3,60(r1)
     794:	80 81 00 10 	lwz     r4,16(r1)
     798:	48 00 00 01 	bl      798 <pfkey_create+0x14c>

	sk->sk_family = PF_KEY;
     79c:	80 01 00 10 	lwz     r0,16(r1)
     7a0:	39 20 00 0f 	li      r9,15
     7a4:	7c 0b 03 78 	mr      r11,r0
     7a8:	b1 2b 00 0c 	sth     r9,12(r11)
	sk->sk_destruct = pfkey_sock_destruct;
     7ac:	80 01 00 10 	lwz     r0,16(r1)
     7b0:	3d 20 00 00 	lis     r9,0
     7b4:	39 29 01 14 	addi    r9,r9,276
     7b8:	7c 0b 03 78 	mr      r11,r0
     7bc:	91 2b 01 44 	stw     r9,324(r11)

	atomic_inc(&net_pfkey->socks_nr);
     7c0:	80 01 00 08 	lwz     r0,8(r1)
     7c4:	30 00 00 04 	addic   r0,r0,4
     7c8:	90 01 00 28 	stw     r0,40(r1)
	addic	%0,%0,1\n"
	PPC405_ERR77(0,%2)
"	stwcx.	%0,0,%2 \n\
	bne-	1b"
	: "=&r" (t), "+m" (v->counter)
	: "r" (&v->counter)
     7cc:	80 01 00 28 	lwz     r0,40(r1)
"1:	lwarx	%0,0,%2		# atomic_inc\n\
	addic	%0,%0,1\n"
	PPC405_ERR77(0,%2)
"	stwcx.	%0,0,%2 \n\
	bne-	1b"
	: "=&r" (t), "+m" (v->counter)
     7d0:	81 61 00 28 	lwz     r11,40(r1)
     7d4:	81 21 00 28 	lwz     r9,40(r1)

static __inline__ void atomic_inc(atomic_t *v)
{
	int t;

	__asm__ __volatile__(
     7d8:	7f e0 00 28 	lwarx   r31,0,r0
     7dc:	33 ff 00 01 	addic   r31,r31,1
     7e0:	7f e0 01 2d 	stwcx.  r31,0,r0
     7e4:	40 a2 ff f4 	bne-    7d8 <pfkey_create+0x18c>
     7e8:	93 e1 00 2c 	stw     r31,44(r1)

	pfkey_insert(sk);
     7ec:	80 61 00 10 	lwz     r3,16(r1)
     7f0:	4b ff fb 29 	bl      318 <pfkey_insert>

	return 0;
     7f4:	38 00 00 00 	li      r0,0
     7f8:	48 00 00 0c 	b       804 <pfkey_create+0x1b8>
		return -EPROTONOSUPPORT;

	err = -ENOMEM;
	sk = sk_alloc(net, PF_KEY, GFP_KERNEL, &key_proto);
	if (sk == NULL)
		goto out;
     7fc:	60 00 00 00 	nop

	pfkey_insert(sk);

	return 0;
out:
	return err;
     800:	80 01 00 0c 	lwz     r0,12(r1)
}
     804:	7c 03 03 78 	mr      r3,r0
     808:	80 01 00 54 	lwz     r0,84(r1)
     80c:	7c 08 03 a6 	mtlr    r0
     810:	83 e1 00 4c 	lwz     r31,76(r1)
     814:	38 21 00 50 	addi    r1,r1,80
     818:	4e 80 00 20 	blr

0000081c <pfkey_release>:

static int pfkey_release(struct socket *sock)
{
     81c:	94 21 ff a0 	stwu    r1,-96(r1)
     820:	7c 08 02 a6 	mflr    r0
     824:	90 01 00 64 	stw     r0,100(r1)
     828:	93 e1 00 5c 	stw     r31,92(r1)
     82c:	90 61 00 48 	stw     r3,72(r1)
	struct sock *sk = sock->sk;
     830:	80 01 00 48 	lwz     r0,72(r1)
     834:	7c 09 03 78 	mr      r9,r0
     838:	80 09 00 14 	lwz     r0,20(r9)
     83c:	90 01 00 08 	stw     r0,8(r1)

	if (!sk)
     840:	80 01 00 08 	lwz     r0,8(r1)
     844:	2f 80 00 00 	cmpwi   cr7,r0,0
     848:	40 9e 00 0c 	bne-    cr7,854 <pfkey_release+0x38>
		return 0;
     84c:	38 00 00 00 	li      r0,0
     850:	48 00 01 4c 	b       99c <pfkey_release+0x180>

	pfkey_remove(sk);
     854:	80 61 00 08 	lwz     r3,8(r1)
     858:	4b ff fc 59 	bl      4b0 <pfkey_remove>
     85c:	80 01 00 08 	lwz     r0,8(r1)
     860:	90 01 00 0c 	stw     r0,12(r1)
 * probably wants some additional cleanups or even continuing
 * to work with this socket (TCP).
 */
static inline void sock_orphan(struct sock *sk)
{
	write_lock_bh(&sk->sk_callback_lock);
     864:	48 00 00 01 	bl      864 <pfkey_release+0x48>
     868:	80 01 00 0c 	lwz     r0,12(r1)
     86c:	90 01 00 10 	stw     r0,16(r1)
     870:	38 00 00 00 	li      r0,0
     874:	90 01 00 14 	stw     r0,20(r1)
	nsk->sk_flags = osk->sk_flags;
}

static inline void sock_set_flag(struct sock *sk, enum sock_flags flag)
{
	__set_bit(flag, &sk->sk_flags);
     878:	81 21 00 14 	lwz     r9,20(r1)
     87c:	80 01 00 10 	lwz     r0,16(r1)
     880:	30 00 00 74 	addic   r0,r0,116
     884:	91 21 00 18 	stw     r9,24(r1)
     888:	90 01 00 1c 	stw     r0,28(r1)
 * If it's called on the same region of memory simultaneously, the effect
 * may be that only one operation succeeds.
 */
static inline void __set_bit(int nr, volatile unsigned long *addr)
{
	unsigned long mask = BIT_MASK(nr);
     88c:	80 01 00 18 	lwz     r0,24(r1)
     890:	7c 09 2e 70 	srawi   r9,r0,5
     894:	7d 29 01 94 	addze   r9,r9
     898:	55 29 28 34 	rlwinm  r9,r9,5,0,26
     89c:	7c 09 00 50 	subf    r0,r9,r0
     8a0:	39 20 00 01 	li      r9,1
     8a4:	7d 20 00 30 	slw     r0,r9,r0
     8a8:	90 01 00 20 	stw     r0,32(r1)
	unsigned long *p = ((unsigned long *)addr) + BIT_WORD(nr);
     8ac:	80 01 00 18 	lwz     r0,24(r1)
     8b0:	7c 00 2e 70 	srawi   r0,r0,5
     8b4:	7c 00 01 94 	addze   r0,r0
     8b8:	54 00 10 3a 	rlwinm  r0,r0,2,0,29
     8bc:	81 21 00 1c 	lwz     r9,28(r1)
     8c0:	7c 09 02 14 	add     r0,r9,r0
     8c4:	90 01 00 24 	stw     r0,36(r1)

	*p  |= mask;
     8c8:	80 01 00 24 	lwz     r0,36(r1)
     8cc:	7c 0b 03 78 	mr      r11,r0
     8d0:	81 2b 00 00 	lwz     r9,0(r11)
     8d4:	80 01 00 20 	lwz     r0,32(r1)
     8d8:	7d 29 03 78 	or      r9,r9,r0
     8dc:	80 01 00 24 	lwz     r0,36(r1)
     8e0:	7c 0b 03 78 	mr      r11,r0
     8e4:	91 2b 00 00 	stw     r9,0(r11)
     8e8:	80 01 00 0c 	lwz     r0,12(r1)
     8ec:	90 01 00 28 	stw     r0,40(r1)
     8f0:	38 00 00 00 	li      r0,0
     8f4:	90 01 00 2c 	stw     r0,44(r1)
     8f8:	80 01 00 28 	lwz     r0,40(r1)
     8fc:	90 01 00 30 	stw     r0,48(r1)
	sk->sk_tx_queue_mapping = tx_queue;
}

static inline void sk_tx_queue_clear(struct sock *sk)
{
	sk->sk_tx_queue_mapping = -1;
     900:	80 01 00 30 	lwz     r0,48(r1)
     904:	39 20 ff ff 	li      r9,-1
     908:	7c 0b 03 78 	mr      r11,r0
     90c:	91 2b 00 28 	stw     r9,40(r11)
}

static inline void sk_set_socket(struct sock *sk, struct socket *sock)
{
	sk_tx_queue_clear(sk);
	sk->sk_socket = sock;
     910:	80 01 00 28 	lwz     r0,40(r1)
     914:	81 21 00 2c 	lwz     r9,44(r1)
     918:	7c 0b 03 78 	mr      r11,r0
     91c:	91 2b 01 10 	stw     r9,272(r11)
static inline void sock_orphan(struct sock *sk)
{
	write_lock_bh(&sk->sk_callback_lock);
	sock_set_flag(sk, SOCK_DEAD);
	sk_set_socket(sk, NULL);
	sk->sk_wq  = NULL;
     920:	80 01 00 0c 	lwz     r0,12(r1)
     924:	39 20 00 00 	li      r9,0
     928:	7c 0b 03 78 	mr      r11,r0
     92c:	91 2b 00 68 	stw     r9,104(r11)
	write_unlock_bh(&sk->sk_callback_lock);
     930:	48 00 00 01 	bl      930 <pfkey_release+0x114>

	sock_orphan(sk);
	sock->sk = NULL;
     934:	80 01 00 48 	lwz     r0,72(r1)
     938:	39 20 00 00 	li      r9,0
     93c:	7c 0b 03 78 	mr      r11,r0
     940:	91 2b 00 14 	stw     r9,20(r11)
	skb_queue_purge(&sk->sk_write_queue);
     944:	80 01 00 08 	lwz     r0,8(r1)
     948:	30 00 00 88 	addic   r0,r0,136
     94c:	7c 03 03 78 	mr      r3,r0
     950:	48 00 00 01 	bl      950 <pfkey_release+0x134>
	preempt_enable();
}

static inline void synchronize_rcu(void)
{
	synchronize_sched();
     954:	48 00 00 01 	bl      954 <pfkey_release+0x138>
     958:	80 01 00 08 	lwz     r0,8(r1)
     95c:	90 01 00 34 	stw     r0,52(r1)
 */

/* Ungrab socket and destroy it, if it was the last reference. */
static inline void sock_put(struct sock *sk)
{
	if (atomic_dec_and_test(&sk->sk_refcnt))
     960:	80 01 00 34 	lwz     r0,52(r1)
     964:	30 00 00 2c 	addic   r0,r0,44
     968:	90 01 00 38 	stw     r0,56(r1)
	PPC405_ERR77(0,%1)
"	stwcx.	%0,0,%1\n\
	bne-	1b"
	PPC_ACQUIRE_BARRIER
	: "=&r" (t)
	: "r" (&v->counter)
     96c:	80 01 00 38 	lwz     r0,56(r1)

static __inline__ int atomic_dec_return(atomic_t *v)
{
	int t;

	__asm__ __volatile__(
     970:	7f e0 00 28 	lwarx   r31,0,r0
     974:	33 ff ff ff 	addic   r31,r31,-1
     978:	7f e0 01 2d 	stwcx.  r31,0,r0
     97c:	40 a2 ff f4 	bne-    970 <pfkey_release+0x154>
     980:	93 e1 00 3c 	stw     r31,60(r1)
	PPC_ACQUIRE_BARRIER
	: "=&r" (t)
	: "r" (&v->counter)
	: "cc", "xer", "memory");

	return t;
     984:	80 01 00 3c 	lwz     r0,60(r1)
     988:	2f 80 00 00 	cmpwi   cr7,r0,0
     98c:	40 9e 00 0c 	bne-    cr7,998 <pfkey_release+0x17c>
		sk_free(sk);
     990:	80 61 00 34 	lwz     r3,52(r1)
     994:	48 00 00 01 	bl      994 <pfkey_release+0x178>

	synchronize_rcu();
	sock_put(sk);

	return 0;
     998:	38 00 00 00 	li      r0,0
}
     99c:	7c 03 03 78 	mr      r3,r0
     9a0:	80 01 00 64 	lwz     r0,100(r1)
     9a4:	7c 08 03 a6 	mtlr    r0
     9a8:	83 e1 00 5c 	lwz     r31,92(r1)
     9ac:	38 21 00 60 	addi    r1,r1,96
     9b0:	4e 80 00 20 	blr

000009b4 <pfkey_broadcast_one>:

static int pfkey_broadcast_one(struct sk_buff *skb, struct sk_buff **skb2,
			       gfp_t allocation, struct sock *sk)
{
     9b4:	94 21 ff 80 	stwu    r1,-128(r1)
     9b8:	7c 08 02 a6 	mflr    r0
     9bc:	90 01 00 84 	stw     r0,132(r1)
     9c0:	93 e1 00 7c 	stw     r31,124(r1)
     9c4:	90 61 00 68 	stw     r3,104(r1)
     9c8:	90 81 00 6c 	stw     r4,108(r1)
     9cc:	90 a1 00 70 	stw     r5,112(r1)
     9d0:	90 c1 00 74 	stw     r6,116(r1)
	int err = -ENOBUFS;
     9d4:	38 00 ff 97 	li      r0,-105
     9d8:	90 01 00 08 	stw     r0,8(r1)
     9dc:	80 01 00 74 	lwz     r0,116(r1)
     9e0:	90 01 00 0c 	stw     r0,12(r1)
   modifications.
 */

static inline void sock_hold(struct sock *sk)
{
	atomic_inc(&sk->sk_refcnt);
     9e4:	80 01 00 0c 	lwz     r0,12(r1)
     9e8:	30 00 00 2c 	addic   r0,r0,44
     9ec:	90 01 00 10 	stw     r0,16(r1)
	addic	%0,%0,1\n"
	PPC405_ERR77(0,%2)
"	stwcx.	%0,0,%2 \n\
	bne-	1b"
	: "=&r" (t), "+m" (v->counter)
	: "r" (&v->counter)
     9f0:	80 01 00 10 	lwz     r0,16(r1)
"1:	lwarx	%0,0,%2		# atomic_inc\n\
	addic	%0,%0,1\n"
	PPC405_ERR77(0,%2)
"	stwcx.	%0,0,%2 \n\
	bne-	1b"
	: "=&r" (t), "+m" (v->counter)
     9f4:	81 61 00 10 	lwz     r11,16(r1)
     9f8:	81 21 00 10 	lwz     r9,16(r1)

static __inline__ void atomic_inc(atomic_t *v)
{
	int t;

	__asm__ __volatile__(
     9fc:	7f e0 00 28 	lwarx   r31,0,r0
     a00:	33 ff 00 01 	addic   r31,r31,1
     a04:	7f e0 01 2d 	stwcx.  r31,0,r0
     a08:	40 a2 ff f4 	bne-    9fc <pfkey_broadcast_one+0x48>
     a0c:	93 e1 00 14 	stw     r31,20(r1)

	sock_hold(sk);
	if (*skb2 == NULL) {
     a10:	80 01 00 6c 	lwz     r0,108(r1)
     a14:	7c 09 03 78 	mr      r9,r0
     a18:	80 09 00 00 	lwz     r0,0(r9)
     a1c:	2f 80 00 00 	cmpwi   cr7,r0,0
     a20:	40 9e 00 88 	bne-    cr7,aa8 <pfkey_broadcast_one+0xf4>
		if (atomic_read(&skb->users) != 1) {
     a24:	80 01 00 68 	lwz     r0,104(r1)
     a28:	30 00 00 a0 	addic   r0,r0,160
     a2c:	90 01 00 18 	stw     r0,24(r1)

static __inline__ int atomic_read(const atomic_t *v)
{
	int t;

	__asm__ __volatile__("lwz%U1%X1 %0,%1" : "=r"(t) : "m"(v->counter));
     a30:	80 01 00 18 	lwz     r0,24(r1)
     a34:	7c 0b 03 78 	mr      r11,r0
     a38:	83 eb 00 00 	lwz     r31,0(r11)
     a3c:	93 e1 00 1c 	stw     r31,28(r1)

	return t;
     a40:	80 01 00 1c 	lwz     r0,28(r1)
     a44:	2f 80 00 01 	cmpwi   cr7,r0,1
     a48:	41 9e 00 24 	beq-    cr7,a6c <pfkey_broadcast_one+0xb8>
			*skb2 = skb_clone(skb, allocation);
     a4c:	80 61 00 68 	lwz     r3,104(r1)
     a50:	80 81 00 70 	lwz     r4,112(r1)
     a54:	48 00 00 01 	bl      a54 <pfkey_broadcast_one+0xa0>
     a58:	7c 69 1b 78 	mr      r9,r3
     a5c:	80 01 00 6c 	lwz     r0,108(r1)
     a60:	7c 0b 03 78 	mr      r11,r0
     a64:	91 2b 00 00 	stw     r9,0(r11)
     a68:	48 00 00 40 	b       aa8 <pfkey_broadcast_one+0xf4>
		} else {
			*skb2 = skb;
     a6c:	80 01 00 6c 	lwz     r0,108(r1)
     a70:	81 21 00 68 	lwz     r9,104(r1)
     a74:	7c 0b 03 78 	mr      r11,r0
     a78:	91 2b 00 00 	stw     r9,0(r11)
			atomic_inc(&skb->users);
     a7c:	80 01 00 68 	lwz     r0,104(r1)
     a80:	30 00 00 a0 	addic   r0,r0,160
     a84:	90 01 00 20 	stw     r0,32(r1)
	addic	%0,%0,1\n"
	PPC405_ERR77(0,%2)
"	stwcx.	%0,0,%2 \n\
	bne-	1b"
	: "=&r" (t), "+m" (v->counter)
	: "r" (&v->counter)
     a88:	80 01 00 20 	lwz     r0,32(r1)
"1:	lwarx	%0,0,%2		# atomic_inc\n\
	addic	%0,%0,1\n"
	PPC405_ERR77(0,%2)
"	stwcx.	%0,0,%2 \n\
	bne-	1b"
	: "=&r" (t), "+m" (v->counter)
     a8c:	81 61 00 20 	lwz     r11,32(r1)
     a90:	81 21 00 20 	lwz     r9,32(r1)

static __inline__ void atomic_inc(atomic_t *v)
{
	int t;

	__asm__ __volatile__(
     a94:	7f e0 00 28 	lwarx   r31,0,r0
     a98:	33 ff 00 01 	addic   r31,r31,1
     a9c:	7f e0 01 2d 	stwcx.  r31,0,r0
     aa0:	40 a2 ff f4 	bne-    a94 <pfkey_broadcast_one+0xe0>
     aa4:	93 e1 00 24 	stw     r31,36(r1)
		}
	}
	if (*skb2 != NULL) {
     aa8:	80 01 00 6c 	lwz     r0,108(r1)
     aac:	7c 09 03 78 	mr      r9,r0
     ab0:	80 09 00 00 	lwz     r0,0(r9)
     ab4:	2f 80 00 00 	cmpwi   cr7,r0,0
     ab8:	41 9e 02 38 	beq-    cr7,cf0 <pfkey_broadcast_one+0x33c>
		if (atomic_read(&sk->sk_rmem_alloc) <= sk->sk_rcvbuf) {
     abc:	80 01 00 74 	lwz     r0,116(r1)
     ac0:	30 00 00 48 	addic   r0,r0,72
     ac4:	90 01 00 28 	stw     r0,40(r1)

static __inline__ int atomic_read(const atomic_t *v)
{
	int t;

	__asm__ __volatile__("lwz%U1%X1 %0,%1" : "=r"(t) : "m"(v->counter));
     ac8:	80 01 00 28 	lwz     r0,40(r1)
     acc:	7c 0b 03 78 	mr      r11,r0
     ad0:	83 eb 00 00 	lwz     r31,0(r11)
     ad4:	93 e1 00 2c 	stw     r31,44(r1)

	return t;
     ad8:	80 01 00 2c 	lwz     r0,44(r1)
     adc:	7c 09 03 78 	mr      r9,r0
     ae0:	80 01 00 74 	lwz     r0,116(r1)
     ae4:	7c 0b 03 78 	mr      r11,r0
     ae8:	80 0b 00 60 	lwz     r0,96(r11)
     aec:	7f 89 00 00 	cmpw    cr7,r9,r0
     af0:	41 9d 02 00 	bgt-    cr7,cf0 <pfkey_broadcast_one+0x33c>
			skb_orphan(*skb2);
     af4:	80 01 00 6c 	lwz     r0,108(r1)
     af8:	7c 09 03 78 	mr      r9,r0
     afc:	80 09 00 00 	lwz     r0,0(r9)
     b00:	90 01 00 30 	stw     r0,48(r1)
 *	destructor function and make the @skb unowned. The buffer continues
 *	to exist but is no longer charged to its former owner.
 */
static inline void skb_orphan(struct sk_buff *skb)
{
	if (skb->destructor)
     b04:	80 01 00 30 	lwz     r0,48(r1)
     b08:	7c 0b 03 78 	mr      r11,r0
     b0c:	80 0b 00 68 	lwz     r0,104(r11)
     b10:	2f 80 00 00 	cmpwi   cr7,r0,0
     b14:	41 9e 00 1c 	beq-    cr7,b30 <pfkey_broadcast_one+0x17c>
		skb->destructor(skb);
     b18:	80 01 00 30 	lwz     r0,48(r1)
     b1c:	7c 09 03 78 	mr      r9,r0
     b20:	80 09 00 68 	lwz     r0,104(r9)
     b24:	80 61 00 30 	lwz     r3,48(r1)
     b28:	7c 09 03 a6 	mtctr   r0
     b2c:	4e 80 04 21 	bctrl
	skb->destructor = NULL;
     b30:	80 01 00 30 	lwz     r0,48(r1)
     b34:	39 20 00 00 	li      r9,0
     b38:	7c 0b 03 78 	mr      r11,r0
     b3c:	91 2b 00 68 	stw     r9,104(r11)
	skb->sk		= NULL;
     b40:	80 01 00 30 	lwz     r0,48(r1)
     b44:	39 20 00 00 	li      r9,0
     b48:	7c 0b 03 78 	mr      r11,r0
     b4c:	91 2b 00 10 	stw     r9,16(r11)
			skb_set_owner_r(*skb2, sk);
     b50:	80 01 00 6c 	lwz     r0,108(r1)
     b54:	7c 09 03 78 	mr      r9,r0
     b58:	80 09 00 00 	lwz     r0,0(r9)
     b5c:	90 01 00 34 	stw     r0,52(r1)
     b60:	80 01 00 74 	lwz     r0,116(r1)
     b64:	90 01 00 38 	stw     r0,56(r1)
     b68:	80 01 00 34 	lwz     r0,52(r1)
     b6c:	90 01 00 3c 	stw     r0,60(r1)
 *	destructor function and make the @skb unowned. The buffer continues
 *	to exist but is no longer charged to its former owner.
 */
static inline void skb_orphan(struct sk_buff *skb)
{
	if (skb->destructor)
     b70:	80 01 00 3c 	lwz     r0,60(r1)
     b74:	7c 0b 03 78 	mr      r11,r0
     b78:	80 0b 00 68 	lwz     r0,104(r11)
     b7c:	2f 80 00 00 	cmpwi   cr7,r0,0
     b80:	41 9e 00 1c 	beq-    cr7,b9c <pfkey_broadcast_one+0x1e8>
		skb->destructor(skb);
     b84:	80 01 00 3c 	lwz     r0,60(r1)
     b88:	7c 09 03 78 	mr      r9,r0
     b8c:	80 09 00 68 	lwz     r0,104(r9)
     b90:	80 61 00 3c 	lwz     r3,60(r1)
     b94:	7c 09 03 a6 	mtctr   r0
     b98:	4e 80 04 21 	bctrl
	skb->destructor = NULL;
     b9c:	80 01 00 3c 	lwz     r0,60(r1)
     ba0:	39 20 00 00 	li      r9,0
     ba4:	7c 0b 03 78 	mr      r11,r0
     ba8:	91 2b 00 68 	stw     r9,104(r11)
	skb->sk		= NULL;
     bac:	80 01 00 3c 	lwz     r0,60(r1)
     bb0:	39 20 00 00 	li      r9,0
     bb4:	7c 0b 03 78 	mr      r11,r0
     bb8:	91 2b 00 10 	stw     r9,16(r11)
}

static inline void skb_set_owner_r(struct sk_buff *skb, struct sock *sk)
{
	skb_orphan(skb);
	skb->sk = sk;
     bbc:	80 01 00 34 	lwz     r0,52(r1)
     bc0:	81 21 00 38 	lwz     r9,56(r1)
     bc4:	7c 0b 03 78 	mr      r11,r0
     bc8:	91 2b 00 10 	stw     r9,16(r11)
	skb->destructor = sock_rfree;
     bcc:	80 01 00 34 	lwz     r0,52(r1)
     bd0:	3d 20 00 00 	lis     r9,0
     bd4:	39 29 00 00 	addi    r9,r9,0
     bd8:	7c 0b 03 78 	mr      r11,r0
     bdc:	91 2b 00 68 	stw     r9,104(r11)
	atomic_add(skb->truesize, &sk->sk_rmem_alloc);
     be0:	80 01 00 34 	lwz     r0,52(r1)
     be4:	7c 09 03 78 	mr      r9,r0
     be8:	80 09 00 9c 	lwz     r0,156(r9)
     bec:	7c 09 03 78 	mr      r9,r0
     bf0:	80 01 00 38 	lwz     r0,56(r1)
     bf4:	30 00 00 48 	addic   r0,r0,72
     bf8:	91 21 00 40 	stw     r9,64(r1)
     bfc:	90 01 00 44 	stw     r0,68(r1)
	add	%0,%2,%0\n"
	PPC405_ERR77(0,%3)
"	stwcx.	%0,0,%3 \n\
	bne-	1b"
	: "=&r" (t), "+m" (v->counter)
	: "r" (a), "r" (&v->counter)
     c00:	81 21 00 44 	lwz     r9,68(r1)
"1:	lwarx	%0,0,%3		# atomic_add\n\
	add	%0,%2,%0\n"
	PPC405_ERR77(0,%3)
"	stwcx.	%0,0,%3 \n\
	bne-	1b"
	: "=&r" (t), "+m" (v->counter)
     c04:	81 41 00 44 	lwz     r10,68(r1)

static __inline__ void atomic_add(int a, atomic_t *v)
{
	int t;

	__asm__ __volatile__(
     c08:	80 01 00 40 	lwz     r0,64(r1)
"1:	lwarx	%0,0,%3		# atomic_add\n\
	add	%0,%2,%0\n"
	PPC405_ERR77(0,%3)
"	stwcx.	%0,0,%3 \n\
	bne-	1b"
	: "=&r" (t), "+m" (v->counter)
     c0c:	81 61 00 44 	lwz     r11,68(r1)

static __inline__ void atomic_add(int a, atomic_t *v)
{
	int t;

	__asm__ __volatile__(
     c10:	7f e0 48 28 	lwarx   r31,0,r9
     c14:	7f e0 fa 14 	add     r31,r0,r31
     c18:	7f e0 49 2d 	stwcx.  r31,0,r9
     c1c:	40 a2 ff f4 	bne-    c10 <pfkey_broadcast_one+0x25c>
     c20:	93 e1 00 48 	stw     r31,72(r1)
	sk_mem_charge(sk, skb->truesize);
     c24:	80 01 00 34 	lwz     r0,52(r1)
     c28:	7c 0b 03 78 	mr      r11,r0
     c2c:	80 0b 00 9c 	lwz     r0,156(r11)
     c30:	81 21 00 38 	lwz     r9,56(r1)
     c34:	91 21 00 4c 	stw     r9,76(r1)
     c38:	90 01 00 50 	stw     r0,80(r1)
     c3c:	80 01 00 4c 	lwz     r0,76(r1)
     c40:	90 01 00 54 	stw     r0,84(r1)
}

static inline int sk_has_account(struct sock *sk)
{
	/* return true if protocol supports memory accounting */
	return !!sk->sk_prot->memory_allocated;
     c44:	80 01 00 54 	lwz     r0,84(r1)
     c48:	7c 09 03 78 	mr      r9,r0
     c4c:	80 09 00 1c 	lwz     r0,28(r9)
     c50:	7c 0b 03 78 	mr      r11,r0
     c54:	80 0b 00 58 	lwz     r0,88(r11)
     c58:	2f 80 00 00 	cmpwi   cr7,r0,0
     c5c:	7c 00 00 26 	mfcr    r0
     c60:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
     c64:	68 00 00 01 	xori    r0,r0,1
		__sk_mem_reclaim(sk);
}

static inline void sk_mem_charge(struct sock *sk, int size)
{
	if (!sk_has_account(sk))
     c68:	2f 80 00 00 	cmpwi   cr7,r0,0
     c6c:	41 9e 00 24 	beq-    cr7,c90 <pfkey_broadcast_one+0x2dc>
		return;
	sk->sk_forward_alloc -= size;
     c70:	80 01 00 4c 	lwz     r0,76(r1)
     c74:	7c 0b 03 78 	mr      r11,r0
     c78:	81 2b 00 58 	lwz     r9,88(r11)
     c7c:	80 01 00 50 	lwz     r0,80(r1)
     c80:	7d 20 48 50 	subf    r9,r0,r9
     c84:	80 01 00 4c 	lwz     r0,76(r1)
     c88:	7c 0b 03 78 	mr      r11,r0
     c8c:	91 2b 00 58 	stw     r9,88(r11)
			skb_queue_tail(&sk->sk_receive_queue, *skb2);
     c90:	80 01 00 74 	lwz     r0,116(r1)
     c94:	31 20 00 3c 	addic   r9,r0,60
     c98:	80 01 00 6c 	lwz     r0,108(r1)
     c9c:	7c 0b 03 78 	mr      r11,r0
     ca0:	80 0b 00 00 	lwz     r0,0(r11)
     ca4:	7d 23 4b 78 	mr      r3,r9
     ca8:	7c 04 03 78 	mr      r4,r0
     cac:	48 00 00 01 	bl      cac <pfkey_broadcast_one+0x2f8>
			sk->sk_data_ready(sk, (*skb2)->len);
     cb0:	80 01 00 74 	lwz     r0,116(r1)
     cb4:	7c 09 03 78 	mr      r9,r0
     cb8:	80 09 01 34 	lwz     r0,308(r9)
     cbc:	81 21 00 6c 	lwz     r9,108(r1)
     cc0:	81 29 00 00 	lwz     r9,0(r9)
     cc4:	81 29 00 50 	lwz     r9,80(r9)
     cc8:	80 61 00 74 	lwz     r3,116(r1)
     ccc:	7d 24 4b 78 	mr      r4,r9
     cd0:	7c 09 03 a6 	mtctr   r0
     cd4:	4e 80 04 21 	bctrl
			*skb2 = NULL;
     cd8:	80 01 00 6c 	lwz     r0,108(r1)
     cdc:	39 20 00 00 	li      r9,0
     ce0:	7c 0b 03 78 	mr      r11,r0
     ce4:	91 2b 00 00 	stw     r9,0(r11)
			err = 0;
     ce8:	38 00 00 00 	li      r0,0
     cec:	90 01 00 08 	stw     r0,8(r1)
     cf0:	80 01 00 74 	lwz     r0,116(r1)
     cf4:	90 01 00 58 	stw     r0,88(r1)
 */

/* Ungrab socket and destroy it, if it was the last reference. */
static inline void sock_put(struct sock *sk)
{
	if (atomic_dec_and_test(&sk->sk_refcnt))
     cf8:	80 01 00 58 	lwz     r0,88(r1)
     cfc:	30 00 00 2c 	addic   r0,r0,44
     d00:	90 01 00 5c 	stw     r0,92(r1)
	PPC405_ERR77(0,%1)
"	stwcx.	%0,0,%1\n\
	bne-	1b"
	PPC_ACQUIRE_BARRIER
	: "=&r" (t)
	: "r" (&v->counter)
     d04:	80 01 00 5c 	lwz     r0,92(r1)

static __inline__ int atomic_dec_return(atomic_t *v)
{
	int t;

	__asm__ __volatile__(
     d08:	7f e0 00 28 	lwarx   r31,0,r0
     d0c:	33 ff ff ff 	addic   r31,r31,-1
     d10:	7f e0 01 2d 	stwcx.  r31,0,r0
     d14:	40 a2 ff f4 	bne-    d08 <pfkey_broadcast_one+0x354>
     d18:	93 e1 00 60 	stw     r31,96(r1)
	PPC_ACQUIRE_BARRIER
	: "=&r" (t)
	: "r" (&v->counter)
	: "cc", "xer", "memory");

	return t;
     d1c:	80 01 00 60 	lwz     r0,96(r1)
     d20:	2f 80 00 00 	cmpwi   cr7,r0,0
     d24:	40 9e 00 0c 	bne-    cr7,d30 <pfkey_broadcast_one+0x37c>
		sk_free(sk);
     d28:	80 61 00 58 	lwz     r3,88(r1)
     d2c:	48 00 00 01 	bl      d2c <pfkey_broadcast_one+0x378>
		}
	}
	sock_put(sk);
	return err;
     d30:	80 01 00 08 	lwz     r0,8(r1)
}
     d34:	7c 03 03 78 	mr      r3,r0
     d38:	80 01 00 84 	lwz     r0,132(r1)
     d3c:	7c 08 03 a6 	mtlr    r0
     d40:	83 e1 00 7c 	lwz     r31,124(r1)
     d44:	38 21 00 80 	addi    r1,r1,128
     d48:	4e 80 00 20 	blr

00000d4c <pfkey_broadcast>:
#define BROADCAST_REGISTERED	2
#define BROADCAST_PROMISC_ONLY	4
static int pfkey_broadcast(struct sk_buff *skb, gfp_t allocation,
			   int broadcast_flags, struct sock *one_sk,
			   struct net *net)
{
     d4c:	94 21 ff 90 	stwu    r1,-112(r1)
     d50:	7c 08 02 a6 	mflr    r0
     d54:	90 01 00 74 	stw     r0,116(r1)
     d58:	90 61 00 58 	stw     r3,88(r1)
     d5c:	90 81 00 5c 	stw     r4,92(r1)
     d60:	90 a1 00 60 	stw     r5,96(r1)
     d64:	90 c1 00 64 	stw     r6,100(r1)
     d68:	90 e1 00 68 	stw     r7,104(r1)
	struct netns_pfkey *net_pfkey = net_generic(net, pfkey_net_id);
     d6c:	3c 00 00 00 	lis     r0,0
     d70:	7c 09 03 78 	mr      r9,r0
     d74:	80 09 00 00 	lwz     r0,0(r9)
     d78:	81 21 00 68 	lwz     r9,104(r1)
     d7c:	91 21 00 2c 	stw     r9,44(r1)
     d80:	90 01 00 30 	stw     r0,48(r1)
{
	struct net_generic *ng;
	void *ptr;

	rcu_read_lock();
	ng = rcu_dereference(net->gen);
     d84:	80 01 00 2c 	lwz     r0,44(r1)
     d88:	7c 0b 03 78 	mr      r11,r0
     d8c:	80 0b 02 20 	lwz     r0,544(r11)
     d90:	90 01 00 34 	stw     r0,52(r1)
     d94:	80 01 00 34 	lwz     r0,52(r1)
     d98:	90 01 00 38 	stw     r0,56(r1)
	BUG_ON(id == 0 || id > ng->len);
     d9c:	80 01 00 30 	lwz     r0,48(r1)
     da0:	2f 80 00 00 	cmpwi   cr7,r0,0
     da4:	41 9e 00 1c 	beq-    cr7,dc0 <pfkey_broadcast+0x74>
     da8:	81 21 00 30 	lwz     r9,48(r1)
     dac:	80 01 00 38 	lwz     r0,56(r1)
     db0:	7c 0b 03 78 	mr      r11,r0
     db4:	80 0b 00 00 	lwz     r0,0(r11)
     db8:	7f 89 00 40 	cmplw   cr7,r9,r0
     dbc:	40 9d 00 0c 	ble-    cr7,dc8 <pfkey_broadcast+0x7c>
     dc0:	38 00 00 01 	li      r0,1
     dc4:	48 00 00 08 	b       dcc <pfkey_broadcast+0x80>
     dc8:	38 00 00 00 	li      r0,0
     dcc:	0f 00 00 00 	twnei   r0,0
	ptr = ng->ptr[id - 1];
     dd0:	80 01 00 30 	lwz     r0,48(r1)
     dd4:	30 00 ff ff 	addic   r0,r0,-1
     dd8:	81 21 00 38 	lwz     r9,56(r1)
     ddc:	54 00 10 3a 	rlwinm  r0,r0,2,0,29
     de0:	7c 09 02 14 	add     r0,r9,r0
     de4:	30 00 00 0c 	addic   r0,r0,12
     de8:	7c 09 03 78 	mr      r9,r0
     dec:	80 09 00 00 	lwz     r0,0(r9)
     df0:	90 01 00 3c 	stw     r0,60(r1)
	rcu_read_unlock();

	return ptr;
     df4:	80 01 00 3c 	lwz     r0,60(r1)
     df8:	90 01 00 10 	stw     r0,16(r1)
	struct sock *sk;
	struct hlist_node *node;
	struct sk_buff *skb2 = NULL;
     dfc:	38 00 00 00 	li      r0,0
     e00:	90 01 00 48 	stw     r0,72(r1)
	int err = -ESRCH;
     e04:	38 00 ff fd 	li      r0,-3
     e08:	90 01 00 0c 	stw     r0,12(r1)

	/* XXX Do we need something like netlink_overrun?  I think
	 * XXX PF_KEY socket apps will not mind current behavior.
	 */
	if (!skb)
     e0c:	80 01 00 58 	lwz     r0,88(r1)
     e10:	2f 80 00 00 	cmpwi   cr7,r0,0
     e14:	40 9e 00 0c 	bne-    cr7,e20 <pfkey_broadcast+0xd4>
		return -ENOMEM;
     e18:	38 00 ff f4 	li      r0,-12
     e1c:	48 00 01 e0 	b       ffc <pfkey_broadcast+0x2b0>

	rcu_read_lock();
	sk_for_each_rcu(sk, node, &net_pfkey->table) {
     e20:	80 01 00 10 	lwz     r0,16(r1)
     e24:	7c 0b 03 78 	mr      r11,r0
     e28:	80 0b 00 00 	lwz     r0,0(r11)
     e2c:	90 01 00 14 	stw     r0,20(r1)
     e30:	80 01 00 14 	lwz     r0,20(r1)
     e34:	90 01 00 08 	stw     r0,8(r1)
     e38:	48 00 01 1c 	b       f54 <pfkey_broadcast+0x208>
     e3c:	80 01 00 1c 	lwz     r0,28(r1)
     e40:	90 01 00 40 	stw     r0,64(r1)
	} dump;
};

static inline struct pfkey_sock *pfkey_sk(struct sock *sk)
{
	return (struct pfkey_sock *)sk;
     e44:	80 01 00 40 	lwz     r0,64(r1)
	if (!skb)
		return -ENOMEM;

	rcu_read_lock();
	sk_for_each_rcu(sk, node, &net_pfkey->table) {
		struct pfkey_sock *pfk = pfkey_sk(sk);
     e48:	90 01 00 20 	stw     r0,32(r1)

		/* Yes, it means that if you are meant to receive this
		 * pfkey message you receive it twice as promiscuous
		 * socket.
		 */
		if (pfk->promisc)
     e4c:	80 01 00 20 	lwz     r0,32(r1)
     e50:	7c 09 03 78 	mr      r9,r0
     e54:	80 09 01 4c 	lwz     r0,332(r9)
     e58:	2f 80 00 00 	cmpwi   cr7,r0,0
     e5c:	41 9e 00 1c 	beq-    cr7,e78 <pfkey_broadcast+0x12c>
			pfkey_broadcast_one(skb, &skb2, allocation, sk);
     e60:	38 01 00 48 	addi    r0,r1,72
     e64:	80 61 00 58 	lwz     r3,88(r1)
     e68:	7c 04 03 78 	mr      r4,r0
     e6c:	80 a1 00 5c 	lwz     r5,92(r1)
     e70:	80 c1 00 1c 	lwz     r6,28(r1)
     e74:	4b ff fb 41 	bl      9b4 <pfkey_broadcast_one>

		/* the exact target will be processed later */
		if (sk == one_sk)
     e78:	81 21 00 1c 	lwz     r9,28(r1)
     e7c:	80 01 00 64 	lwz     r0,100(r1)
     e80:	7f 89 00 00 	cmpw    cr7,r9,r0
     e84:	41 9e 00 9c 	beq-    cr7,f20 <pfkey_broadcast+0x1d4>
			continue;
		if (broadcast_flags != BROADCAST_ALL) {
     e88:	80 01 00 60 	lwz     r0,96(r1)
     e8c:	2f 80 00 00 	cmpwi   cr7,r0,0
     e90:	41 9e 00 4c 	beq-    cr7,edc <pfkey_broadcast+0x190>
			if (broadcast_flags & BROADCAST_PROMISC_ONLY)
     e94:	80 01 00 60 	lwz     r0,96(r1)
     e98:	54 00 07 7a 	rlwinm  r0,r0,0,29,29
     e9c:	2f 80 00 00 	cmpwi   cr7,r0,0
     ea0:	40 9e 00 88 	bne-    cr7,f28 <pfkey_broadcast+0x1dc>
				continue;
			if ((broadcast_flags & BROADCAST_REGISTERED) &&
     ea4:	80 01 00 60 	lwz     r0,96(r1)
     ea8:	54 00 07 bc 	rlwinm  r0,r0,0,30,30
     eac:	2f 80 00 00 	cmpwi   cr7,r0,0
     eb0:	41 9e 00 18 	beq-    cr7,ec8 <pfkey_broadcast+0x17c>
			    !pfk->registered)
     eb4:	80 01 00 20 	lwz     r0,32(r1)
     eb8:	7c 0b 03 78 	mr      r11,r0
     ebc:	80 0b 01 48 	lwz     r0,328(r11)
		if (sk == one_sk)
			continue;
		if (broadcast_flags != BROADCAST_ALL) {
			if (broadcast_flags & BROADCAST_PROMISC_ONLY)
				continue;
			if ((broadcast_flags & BROADCAST_REGISTERED) &&
     ec0:	2f 80 00 00 	cmpwi   cr7,r0,0
     ec4:	41 9e 00 6c 	beq-    cr7,f30 <pfkey_broadcast+0x1e4>
			    !pfk->registered)
				continue;
			if (broadcast_flags & BROADCAST_ONE)
     ec8:	80 01 00 60 	lwz     r0,96(r1)
     ecc:	54 00 07 fe 	clrlwi  r0,r0,31
     ed0:	54 00 06 3e 	clrlwi  r0,r0,24
     ed4:	2f 80 00 00 	cmpwi   cr7,r0,0
     ed8:	40 9e 00 60 	bne-    cr7,f38 <pfkey_broadcast+0x1ec>
				continue;
		}

		err2 = pfkey_broadcast_one(skb, &skb2, allocation, sk);
     edc:	38 01 00 48 	addi    r0,r1,72
     ee0:	80 61 00 58 	lwz     r3,88(r1)
     ee4:	7c 04 03 78 	mr      r4,r0
     ee8:	80 a1 00 5c 	lwz     r5,92(r1)
     eec:	80 c1 00 1c 	lwz     r6,28(r1)
     ef0:	4b ff fa c5 	bl      9b4 <pfkey_broadcast_one>
     ef4:	90 61 00 24 	stw     r3,36(r1)

		/* Error is cleare after succecful sending to at least one
		 * registered KM */
		if ((broadcast_flags & BROADCAST_REGISTERED) && err)
     ef8:	80 01 00 60 	lwz     r0,96(r1)
     efc:	54 00 07 bc 	rlwinm  r0,r0,0,30,30
     f00:	2f 80 00 00 	cmpwi   cr7,r0,0
     f04:	41 9e 00 38 	beq-    cr7,f3c <pfkey_broadcast+0x1f0>
     f08:	80 01 00 0c 	lwz     r0,12(r1)
     f0c:	2f 80 00 00 	cmpwi   cr7,r0,0
     f10:	41 9e 00 2c 	beq-    cr7,f3c <pfkey_broadcast+0x1f0>
			err = err2;
     f14:	80 01 00 24 	lwz     r0,36(r1)
     f18:	90 01 00 0c 	stw     r0,12(r1)
     f1c:	48 00 00 20 	b       f3c <pfkey_broadcast+0x1f0>
		if (pfk->promisc)
			pfkey_broadcast_one(skb, &skb2, allocation, sk);

		/* the exact target will be processed later */
		if (sk == one_sk)
			continue;
     f20:	60 00 00 00 	nop
     f24:	48 00 00 18 	b       f3c <pfkey_broadcast+0x1f0>
		if (broadcast_flags != BROADCAST_ALL) {
			if (broadcast_flags & BROADCAST_PROMISC_ONLY)
				continue;
     f28:	60 00 00 00 	nop
     f2c:	48 00 00 10 	b       f3c <pfkey_broadcast+0x1f0>
			if ((broadcast_flags & BROADCAST_REGISTERED) &&
			    !pfk->registered)
				continue;
     f30:	60 00 00 00 	nop
     f34:	48 00 00 08 	b       f3c <pfkey_broadcast+0x1f0>
			if (broadcast_flags & BROADCAST_ONE)
				continue;
     f38:	60 00 00 00 	nop
	 */
	if (!skb)
		return -ENOMEM;

	rcu_read_lock();
	sk_for_each_rcu(sk, node, &net_pfkey->table) {
     f3c:	80 01 00 08 	lwz     r0,8(r1)
     f40:	7c 09 03 78 	mr      r9,r0
     f44:	80 09 00 00 	lwz     r0,0(r9)
     f48:	90 01 00 28 	stw     r0,40(r1)
     f4c:	80 01 00 28 	lwz     r0,40(r1)
     f50:	90 01 00 08 	stw     r0,8(r1)
     f54:	80 01 00 08 	lwz     r0,8(r1)
     f58:	2f 80 00 00 	cmpwi   cr7,r0,0
     f5c:	41 9e 00 60 	beq-    cr7,fbc <pfkey_broadcast+0x270>
     f60:	80 01 00 08 	lwz     r0,8(r1)
     f64:	7c 0b 03 78 	mr      r11,r0
     f68:	80 0b 00 00 	lwz     r0,0(r11)
     f6c:	90 01 00 44 	stw     r0,68(r1)
#define ARCH_HAS_PREFETCHW
#define ARCH_HAS_SPINLOCK_PREFETCH

static inline void prefetch(const void *x)
{
	if (unlikely(!x))
     f70:	80 01 00 44 	lwz     r0,68(r1)
     f74:	2f 80 00 00 	cmpwi   cr7,r0,0
     f78:	7c 00 00 26 	mfcr    r0
     f7c:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
     f80:	2f 80 00 00 	cmpwi   cr7,r0,0
     f84:	40 9e 00 0c 	bne-    cr7,f90 <pfkey_broadcast+0x244>
		return;

	__asm__ __volatile__ ("dcbt 0,%0" : : "r" (x));
     f88:	80 01 00 44 	lwz     r0,68(r1)
     f8c:	7c 00 02 2c 	dcbt    r0,r0
     f90:	38 00 00 01 	li      r0,1
     f94:	2f 80 00 00 	cmpwi   cr7,r0,0
     f98:	41 9e 00 24 	beq-    cr7,fbc <pfkey_broadcast+0x270>
     f9c:	80 01 00 08 	lwz     r0,8(r1)
     fa0:	90 01 00 18 	stw     r0,24(r1)
     fa4:	80 01 00 18 	lwz     r0,24(r1)
     fa8:	30 00 ff e0 	addic   r0,r0,-32
     fac:	90 01 00 1c 	stw     r0,28(r1)
     fb0:	38 00 00 01 	li      r0,1
     fb4:	2f 80 00 00 	cmpwi   cr7,r0,0
     fb8:	40 9e fe 84 	bne+    cr7,e3c <pfkey_broadcast+0xf0>
		if ((broadcast_flags & BROADCAST_REGISTERED) && err)
			err = err2;
	}
	rcu_read_unlock();

	if (one_sk != NULL)
     fbc:	80 01 00 64 	lwz     r0,100(r1)
     fc0:	2f 80 00 00 	cmpwi   cr7,r0,0
     fc4:	41 9e 00 20 	beq-    cr7,fe4 <pfkey_broadcast+0x298>
		err = pfkey_broadcast_one(skb, &skb2, allocation, one_sk);
     fc8:	38 01 00 48 	addi    r0,r1,72
     fcc:	80 61 00 58 	lwz     r3,88(r1)
     fd0:	7c 04 03 78 	mr      r4,r0
     fd4:	80 a1 00 5c 	lwz     r5,92(r1)
     fd8:	80 c1 00 64 	lwz     r6,100(r1)
     fdc:	4b ff f9 d9 	bl      9b4 <pfkey_broadcast_one>
     fe0:	90 61 00 0c 	stw     r3,12(r1)

	kfree_skb(skb2);
     fe4:	80 01 00 48 	lwz     r0,72(r1)
     fe8:	7c 03 03 78 	mr      r3,r0
     fec:	48 00 00 01 	bl      fec <pfkey_broadcast+0x2a0>
	kfree_skb(skb);
     ff0:	80 61 00 58 	lwz     r3,88(r1)
     ff4:	48 00 00 01 	bl      ff4 <pfkey_broadcast+0x2a8>
	return err;
     ff8:	80 01 00 0c 	lwz     r0,12(r1)
}
     ffc:	7c 03 03 78 	mr      r3,r0
    1000:	80 01 00 74 	lwz     r0,116(r1)
    1004:	7c 08 03 a6 	mtlr    r0
    1008:	38 21 00 70 	addi    r1,r1,112
    100c:	4e 80 00 20 	blr

00001010 <pfkey_do_dump>:

static int pfkey_do_dump(struct pfkey_sock *pfk)
{
    1010:	94 21 ff e0 	stwu    r1,-32(r1)
    1014:	7c 08 02 a6 	mflr    r0
    1018:	90 01 00 24 	stw     r0,36(r1)
    101c:	90 61 00 18 	stw     r3,24(r1)
	struct sadb_msg *hdr;
	int rc;

	rc = pfk->dump.dump(pfk);
    1020:	80 01 00 18 	lwz     r0,24(r1)
    1024:	7c 09 03 78 	mr      r9,r0
    1028:	80 09 01 58 	lwz     r0,344(r9)
    102c:	80 61 00 18 	lwz     r3,24(r1)
    1030:	7c 09 03 a6 	mtctr   r0
    1034:	4e 80 04 21 	bctrl
    1038:	90 61 00 08 	stw     r3,8(r1)
	if (rc == -ENOBUFS)
    103c:	81 21 00 08 	lwz     r9,8(r1)
    1040:	38 00 ff 97 	li      r0,-105
    1044:	7f 89 00 00 	cmpw    cr7,r9,r0
    1048:	40 9e 00 0c 	bne-    cr7,1054 <pfkey_do_dump+0x44>
		return 0;
    104c:	38 00 00 00 	li      r0,0
    1050:	48 00 00 c8 	b       1118 <pfkey_do_dump+0x108>

	if (pfk->dump.skb) {
    1054:	80 01 00 18 	lwz     r0,24(r1)
    1058:	7c 09 03 78 	mr      r9,r0
    105c:	80 09 01 74 	lwz     r0,372(r9)
    1060:	2f 80 00 00 	cmpwi   cr7,r0,0
    1064:	41 9e 00 a8 	beq-    cr7,110c <pfkey_do_dump+0xfc>
		if (!pfkey_can_dump(&pfk->sk))
    1068:	80 01 00 18 	lwz     r0,24(r1)
    106c:	7c 03 03 78 	mr      r3,r0
    1070:	4b ff ef 91 	bl      0 <pfkey_can_dump>
    1074:	7c 60 1b 78 	mr      r0,r3
    1078:	2f 80 00 00 	cmpwi   cr7,r0,0
    107c:	40 9e 00 0c 	bne-    cr7,1088 <pfkey_do_dump+0x78>
			return 0;
    1080:	38 00 00 00 	li      r0,0
    1084:	48 00 00 94 	b       1118 <pfkey_do_dump+0x108>

		hdr = (struct sadb_msg *) pfk->dump.skb->data;
    1088:	80 01 00 18 	lwz     r0,24(r1)
    108c:	7c 0b 03 78 	mr      r11,r0
    1090:	80 0b 01 74 	lwz     r0,372(r11)
    1094:	7c 09 03 78 	mr      r9,r0
    1098:	80 09 00 98 	lwz     r0,152(r9)
    109c:	90 01 00 0c 	stw     r0,12(r1)
		hdr->sadb_msg_seq = 0;
    10a0:	80 01 00 0c 	lwz     r0,12(r1)
    10a4:	39 20 00 00 	li      r9,0
    10a8:	7c 0b 03 78 	mr      r11,r0
    10ac:	91 2b 00 08 	stw     r9,8(r11)
		hdr->sadb_msg_errno = rc;
    10b0:	80 01 00 08 	lwz     r0,8(r1)
    10b4:	54 09 06 3e 	clrlwi  r9,r0,24
    10b8:	80 01 00 0c 	lwz     r0,12(r1)
    10bc:	7c 0b 03 78 	mr      r11,r0
    10c0:	99 2b 00 02 	stb     r9,2(r11)
		pfkey_broadcast(pfk->dump.skb, GFP_ATOMIC, BROADCAST_ONE,
    10c4:	80 01 00 18 	lwz     r0,24(r1)
    10c8:	7c 09 03 78 	mr      r9,r0
    10cc:	81 69 01 74 	lwz     r11,372(r9)
    10d0:	81 21 00 18 	lwz     r9,24(r1)
				&pfk->sk, sock_net(&pfk->sk));
    10d4:	80 01 00 18 	lwz     r0,24(r1)
    10d8:	90 01 00 10 	stw     r0,16(r1)
#endif

static inline
struct net *sock_net(const struct sock *sk)
{
	return read_pnet(&sk->sk_net);
    10dc:	3c 00 00 00 	lis     r0,0
    10e0:	30 00 00 00 	addic   r0,r0,0
			return 0;

		hdr = (struct sadb_msg *) pfk->dump.skb->data;
		hdr->sadb_msg_seq = 0;
		hdr->sadb_msg_errno = rc;
		pfkey_broadcast(pfk->dump.skb, GFP_ATOMIC, BROADCAST_ONE,
    10e4:	7d 63 5b 78 	mr      r3,r11
    10e8:	38 80 00 20 	li      r4,32
    10ec:	38 a0 00 01 	li      r5,1
    10f0:	7d 26 4b 78 	mr      r6,r9
    10f4:	7c 07 03 78 	mr      r7,r0
    10f8:	4b ff fc 55 	bl      d4c <pfkey_broadcast>
				&pfk->sk, sock_net(&pfk->sk));
		pfk->dump.skb = NULL;
    10fc:	80 01 00 18 	lwz     r0,24(r1)
    1100:	39 20 00 00 	li      r9,0
    1104:	7c 0b 03 78 	mr      r11,r0
    1108:	91 2b 01 74 	stw     r9,372(r11)
	}

	pfkey_terminate_dump(pfk);
    110c:	80 61 00 18 	lwz     r3,24(r1)
    1110:	4b ff ef 61 	bl      70 <pfkey_terminate_dump>
	return rc;
    1114:	80 01 00 08 	lwz     r0,8(r1)
}
    1118:	7c 03 03 78 	mr      r3,r0
    111c:	80 01 00 24 	lwz     r0,36(r1)
    1120:	7c 08 03 a6 	mtlr    r0
    1124:	38 21 00 20 	addi    r1,r1,32
    1128:	4e 80 00 20 	blr

0000112c <pfkey_error>:
{
	*new = *orig;
}

static int pfkey_error(struct sadb_msg *orig, int err, struct sock *sk)
{
    112c:	94 21 ff c0 	stwu    r1,-64(r1)
    1130:	7c 08 02 a6 	mflr    r0
    1134:	90 01 00 44 	stw     r0,68(r1)
    1138:	90 61 00 28 	stw     r3,40(r1)
    113c:	90 81 00 2c 	stw     r4,44(r1)
    1140:	90 a1 00 30 	stw     r5,48(r1)
    1144:	38 00 00 20 	li      r0,32
    1148:	90 01 00 10 	stw     r0,16(r1)
    114c:	38 00 00 d0 	li      r0,208
    1150:	90 01 00 14 	stw     r0,20(r1)
extern struct sk_buff *__alloc_skb(unsigned int size,
				   gfp_t priority, int fclone, int node);
static inline struct sk_buff *alloc_skb(unsigned int size,
					gfp_t priority)
{
	return __alloc_skb(size, priority, 0, NUMA_NO_NODE);
    1154:	80 61 00 10 	lwz     r3,16(r1)
    1158:	80 81 00 14 	lwz     r4,20(r1)
    115c:	38 a0 00 00 	li      r5,0
    1160:	38 c0 ff ff 	li      r6,-1
    1164:	48 00 00 01 	bl      1164 <pfkey_error+0x38>
    1168:	7c 60 1b 78 	mr      r0,r3
	struct sk_buff *skb = alloc_skb(sizeof(struct sadb_msg) + 16, GFP_KERNEL);
    116c:	90 01 00 08 	stw     r0,8(r1)
	struct sadb_msg *hdr;

	if (!skb)
    1170:	80 01 00 08 	lwz     r0,8(r1)
    1174:	2f 80 00 00 	cmpwi   cr7,r0,0
    1178:	40 9e 00 0c 	bne-    cr7,1184 <pfkey_error+0x58>
		return -ENOBUFS;
    117c:	38 00 ff 97 	li      r0,-105
    1180:	48 00 01 20 	b       12a0 <pfkey_error+0x174>

	/* Woe be to the platform trying to support PFKEY yet
	 * having normal errnos outside the 1-255 range, inclusive.
	 */
	err = -err;
    1184:	80 01 00 2c 	lwz     r0,44(r1)
    1188:	7c 00 00 d0 	neg     r0,r0
    118c:	90 01 00 2c 	stw     r0,44(r1)
	if (err == ERESTARTSYS ||
    1190:	80 01 00 2c 	lwz     r0,44(r1)
    1194:	2f 80 02 00 	cmpwi   cr7,r0,512
    1198:	41 9e 00 1c 	beq-    cr7,11b4 <pfkey_error+0x88>
    119c:	80 01 00 2c 	lwz     r0,44(r1)
    11a0:	2f 80 02 02 	cmpwi   cr7,r0,514
    11a4:	41 9e 00 10 	beq-    cr7,11b4 <pfkey_error+0x88>
	    err == ERESTARTNOHAND ||
    11a8:	80 01 00 2c 	lwz     r0,44(r1)
    11ac:	2f 80 02 01 	cmpwi   cr7,r0,513
    11b0:	40 9e 00 0c 	bne-    cr7,11bc <pfkey_error+0x90>
	    err == ERESTARTNOINTR)
		err = EINTR;
    11b4:	38 00 00 04 	li      r0,4
    11b8:	90 01 00 2c 	stw     r0,44(r1)
	if (err >= 512)
    11bc:	80 01 00 2c 	lwz     r0,44(r1)
    11c0:	2f 80 01 ff 	cmpwi   cr7,r0,511
    11c4:	40 9d 00 0c 	ble-    cr7,11d0 <pfkey_error+0xa4>
		err = EINVAL;
    11c8:	38 00 00 16 	li      r0,22
    11cc:	90 01 00 2c 	stw     r0,44(r1)
	BUG_ON(err <= 0 || err >= 256);
    11d0:	80 01 00 2c 	lwz     r0,44(r1)
    11d4:	2f 80 00 00 	cmpwi   cr7,r0,0
    11d8:	40 9d 00 10 	ble-    cr7,11e8 <pfkey_error+0xbc>
    11dc:	80 01 00 2c 	lwz     r0,44(r1)
    11e0:	2f 80 00 ff 	cmpwi   cr7,r0,255
    11e4:	40 9d 00 0c 	ble-    cr7,11f0 <pfkey_error+0xc4>
    11e8:	38 00 00 01 	li      r0,1
    11ec:	48 00 00 08 	b       11f4 <pfkey_error+0xc8>
    11f0:	38 00 00 00 	li      r0,0
    11f4:	0f 00 00 00 	twnei   r0,0

	hdr = (struct sadb_msg *) skb_put(skb, sizeof(struct sadb_msg));
    11f8:	80 61 00 08 	lwz     r3,8(r1)
    11fc:	38 80 00 10 	li      r4,16
    1200:	48 00 00 01 	bl      1200 <pfkey_error+0xd4>
    1204:	90 61 00 0c 	stw     r3,12(r1)
    1208:	80 01 00 0c 	lwz     r0,12(r1)
    120c:	90 01 00 18 	stw     r0,24(r1)
    1210:	80 01 00 28 	lwz     r0,40(r1)
    1214:	90 01 00 1c 	stw     r0,28(r1)
	return rc;
}

static inline void pfkey_hdr_dup(struct sadb_msg *new, struct sadb_msg *orig)
{
	*new = *orig;
    1218:	80 01 00 18 	lwz     r0,24(r1)
    121c:	81 21 00 1c 	lwz     r9,28(r1)
    1220:	81 09 00 00 	lwz     r8,0(r9)
    1224:	81 49 00 04 	lwz     r10,4(r9)
    1228:	81 69 00 08 	lwz     r11,8(r9)
    122c:	81 29 00 0c 	lwz     r9,12(r9)
    1230:	7c 07 03 78 	mr      r7,r0
    1234:	91 07 00 00 	stw     r8,0(r7)
    1238:	7c 08 03 78 	mr      r8,r0
    123c:	91 48 00 04 	stw     r10,4(r8)
    1240:	7c 0a 03 78 	mr      r10,r0
    1244:	91 6a 00 08 	stw     r11,8(r10)
    1248:	7c 0b 03 78 	mr      r11,r0
    124c:	91 2b 00 0c 	stw     r9,12(r11)
		err = EINVAL;
	BUG_ON(err <= 0 || err >= 256);

	hdr = (struct sadb_msg *) skb_put(skb, sizeof(struct sadb_msg));
	pfkey_hdr_dup(hdr, orig);
	hdr->sadb_msg_errno = (uint8_t) err;
    1250:	80 01 00 2c 	lwz     r0,44(r1)
    1254:	54 09 06 3e 	clrlwi  r9,r0,24
    1258:	80 01 00 0c 	lwz     r0,12(r1)
    125c:	7c 07 03 78 	mr      r7,r0
    1260:	99 27 00 02 	stb     r9,2(r7)
	hdr->sadb_msg_len = (sizeof(struct sadb_msg) /
    1264:	80 01 00 0c 	lwz     r0,12(r1)
    1268:	39 20 00 02 	li      r9,2
    126c:	7c 08 03 78 	mr      r8,r0
    1270:	b1 28 00 04 	sth     r9,4(r8)
    1274:	80 01 00 30 	lwz     r0,48(r1)
    1278:	90 01 00 20 	stw     r0,32(r1)
    127c:	3c 00 00 00 	lis     r0,0
    1280:	30 00 00 00 	addic   r0,r0,0
			     sizeof(uint64_t));

	pfkey_broadcast(skb, GFP_KERNEL, BROADCAST_ONE, sk, sock_net(sk));
    1284:	80 61 00 08 	lwz     r3,8(r1)
    1288:	38 80 00 d0 	li      r4,208
    128c:	38 a0 00 01 	li      r5,1
    1290:	80 c1 00 30 	lwz     r6,48(r1)
    1294:	7c 07 03 78 	mr      r7,r0
    1298:	4b ff fa b5 	bl      d4c <pfkey_broadcast>

	return 0;
    129c:	38 00 00 00 	li      r0,0
}
    12a0:	7c 03 03 78 	mr      r3,r0
    12a4:	80 01 00 44 	lwz     r0,68(r1)
    12a8:	7c 08 03 a6 	mtlr    r0
    12ac:	38 21 00 40 	addi    r1,r1,64
    12b0:	4e 80 00 20 	blr

000012b4 <verify_address_len>:
	[SADB_X_EXT_KMADDRESS]		= (u8) sizeof(struct sadb_x_kmaddress),
};

/* Verify sadb_address_{len,prefixlen} against sa_family.  */
static int verify_address_len(void *p)
{
    12b4:	94 21 ff e0 	stwu    r1,-32(r1)
    12b8:	90 61 00 18 	stw     r3,24(r1)
	struct sadb_address *sp = p;
    12bc:	80 01 00 18 	lwz     r0,24(r1)
    12c0:	90 01 00 08 	stw     r0,8(r1)
	struct sockaddr *addr = (struct sockaddr *)(sp + 1);
    12c4:	80 01 00 08 	lwz     r0,8(r1)
    12c8:	30 00 00 08 	addic   r0,r0,8
    12cc:	90 01 00 0c 	stw     r0,12(r1)
#if defined(CONFIG_IPV6) || defined(CONFIG_IPV6_MODULE)
	struct sockaddr_in6 *sin6;
#endif
	int len;

	switch (addr->sa_family) {
    12d0:	80 01 00 0c 	lwz     r0,12(r1)
    12d4:	7c 09 03 78 	mr      r9,r0
    12d8:	a0 09 00 00 	lhz     r0,0(r9)
    12dc:	54 00 04 3e 	clrlwi  r0,r0,16
    12e0:	2f 80 00 02 	cmpwi   cr7,r0,2
    12e4:	41 9e 00 10 	beq-    cr7,12f4 <verify_address_len+0x40>
    12e8:	2f 80 00 0a 	cmpwi   cr7,r0,10
    12ec:	41 9e 00 50 	beq-    cr7,133c <verify_address_len+0x88>
    12f0:	48 00 00 94 	b       1384 <verify_address_len+0xd0>
	case AF_INET:
		len = DIV_ROUND_UP(sizeof(*sp) + sizeof(*sin), sizeof(uint64_t));
    12f4:	38 00 00 03 	li      r0,3
    12f8:	90 01 00 10 	stw     r0,16(r1)
		if (sp->sadb_address_len != len ||
    12fc:	80 01 00 08 	lwz     r0,8(r1)
    1300:	7c 09 03 78 	mr      r9,r0
    1304:	a0 09 00 00 	lhz     r0,0(r9)
    1308:	54 00 04 3e 	clrlwi  r0,r0,16
    130c:	7c 09 03 78 	mr      r9,r0
    1310:	80 01 00 10 	lwz     r0,16(r1)
    1314:	7f 89 00 00 	cmpw    cr7,r9,r0
    1318:	40 9e 00 1c 	bne-    cr7,1334 <verify_address_len+0x80>
		    sp->sadb_address_prefixlen > 32)
    131c:	80 01 00 08 	lwz     r0,8(r1)
    1320:	7c 09 03 78 	mr      r9,r0
    1324:	88 09 00 05 	lbz     r0,5(r9)
    1328:	54 00 06 3e 	clrlwi  r0,r0,24
	int len;

	switch (addr->sa_family) {
	case AF_INET:
		len = DIV_ROUND_UP(sizeof(*sp) + sizeof(*sin), sizeof(uint64_t));
		if (sp->sadb_address_len != len ||
    132c:	2b 80 00 20 	cmplwi  cr7,r0,32
    1330:	40 9d 00 5c 	ble-    cr7,138c <verify_address_len+0xd8>
		    sp->sadb_address_prefixlen > 32)
			return -EINVAL;
    1334:	38 00 ff ea 	li      r0,-22
    1338:	48 00 00 64 	b       139c <verify_address_len+0xe8>
		break;
#if defined(CONFIG_IPV6) || defined(CONFIG_IPV6_MODULE)
	case AF_INET6:
		len = DIV_ROUND_UP(sizeof(*sp) + sizeof(*sin6), sizeof(uint64_t));
    133c:	38 00 00 05 	li      r0,5
    1340:	90 01 00 10 	stw     r0,16(r1)
		if (sp->sadb_address_len != len ||
    1344:	80 01 00 08 	lwz     r0,8(r1)
    1348:	7c 09 03 78 	mr      r9,r0
    134c:	a0 09 00 00 	lhz     r0,0(r9)
    1350:	54 00 04 3e 	clrlwi  r0,r0,16
    1354:	7c 09 03 78 	mr      r9,r0
    1358:	80 01 00 10 	lwz     r0,16(r1)
    135c:	7f 89 00 00 	cmpw    cr7,r9,r0
    1360:	40 9e 00 1c 	bne-    cr7,137c <verify_address_len+0xc8>
		    sp->sadb_address_prefixlen > 128)
    1364:	80 01 00 08 	lwz     r0,8(r1)
    1368:	7c 09 03 78 	mr      r9,r0
    136c:	88 09 00 05 	lbz     r0,5(r9)
    1370:	54 00 06 3e 	clrlwi  r0,r0,24
			return -EINVAL;
		break;
#if defined(CONFIG_IPV6) || defined(CONFIG_IPV6_MODULE)
	case AF_INET6:
		len = DIV_ROUND_UP(sizeof(*sp) + sizeof(*sin6), sizeof(uint64_t));
		if (sp->sadb_address_len != len ||
    1374:	2b 80 00 80 	cmplwi  cr7,r0,128
    1378:	40 9d 00 1c 	ble-    cr7,1394 <verify_address_len+0xe0>
		    sp->sadb_address_prefixlen > 128)
			return -EINVAL;
    137c:	38 00 ff ea 	li      r0,-22
    1380:	48 00 00 1c 	b       139c <verify_address_len+0xe8>
		 *
		 * XXX Actually, association/policy database is not yet
		 * XXX able to cope with arbitrary sockaddr families.
		 * XXX When it can, remove this -EINVAL.  -DaveM
		 */
		return -EINVAL;
    1384:	38 00 ff ea 	li      r0,-22
    1388:	48 00 00 14 	b       139c <verify_address_len+0xe8>
	case AF_INET:
		len = DIV_ROUND_UP(sizeof(*sp) + sizeof(*sin), sizeof(uint64_t));
		if (sp->sadb_address_len != len ||
		    sp->sadb_address_prefixlen > 32)
			return -EINVAL;
		break;
    138c:	60 00 00 00 	nop
    1390:	48 00 00 08 	b       1398 <verify_address_len+0xe4>
	case AF_INET6:
		len = DIV_ROUND_UP(sizeof(*sp) + sizeof(*sin6), sizeof(uint64_t));
		if (sp->sadb_address_len != len ||
		    sp->sadb_address_prefixlen > 128)
			return -EINVAL;
		break;
    1394:	60 00 00 00 	nop
		 */
		return -EINVAL;
		break;
	}

	return 0;
    1398:	38 00 00 00 	li      r0,0
}
    139c:	7c 03 03 78 	mr      r3,r0
    13a0:	38 21 00 20 	addi    r1,r1,32
    13a4:	4e 80 00 20 	blr

000013a8 <present_and_same_family>:
	return uctx;
}

static int present_and_same_family(struct sadb_address *src,
				   struct sadb_address *dst)
{
    13a8:	94 21 ff e0 	stwu    r1,-32(r1)
    13ac:	90 61 00 18 	stw     r3,24(r1)
    13b0:	90 81 00 1c 	stw     r4,28(r1)
	struct sockaddr *s_addr, *d_addr;

	if (!src || !dst)
    13b4:	80 01 00 18 	lwz     r0,24(r1)
    13b8:	2f 80 00 00 	cmpwi   cr7,r0,0
    13bc:	41 9e 00 10 	beq-    cr7,13cc <present_and_same_family+0x24>
    13c0:	80 01 00 1c 	lwz     r0,28(r1)
    13c4:	2f 80 00 00 	cmpwi   cr7,r0,0
    13c8:	40 9e 00 0c 	bne-    cr7,13d4 <present_and_same_family+0x2c>
		return 0;
    13cc:	38 00 00 00 	li      r0,0
    13d0:	48 00 00 88 	b       1458 <present_and_same_family+0xb0>

	s_addr = (struct sockaddr *)(src + 1);
    13d4:	80 01 00 18 	lwz     r0,24(r1)
    13d8:	30 00 00 08 	addic   r0,r0,8
    13dc:	90 01 00 08 	stw     r0,8(r1)
	d_addr = (struct sockaddr *)(dst + 1);
    13e0:	80 01 00 1c 	lwz     r0,28(r1)
    13e4:	30 00 00 08 	addic   r0,r0,8
    13e8:	90 01 00 0c 	stw     r0,12(r1)
	if (s_addr->sa_family != d_addr->sa_family)
    13ec:	80 01 00 08 	lwz     r0,8(r1)
    13f0:	7c 09 03 78 	mr      r9,r0
    13f4:	a0 09 00 00 	lhz     r0,0(r9)
    13f8:	54 09 04 3e 	clrlwi  r9,r0,16
    13fc:	80 01 00 0c 	lwz     r0,12(r1)
    1400:	7c 0b 03 78 	mr      r11,r0
    1404:	a0 0b 00 00 	lhz     r0,0(r11)
    1408:	54 00 04 3e 	clrlwi  r0,r0,16
    140c:	7f 89 00 00 	cmpw    cr7,r9,r0
    1410:	41 9e 00 0c 	beq-    cr7,141c <present_and_same_family+0x74>
		return 0;
    1414:	38 00 00 00 	li      r0,0
    1418:	48 00 00 40 	b       1458 <present_and_same_family+0xb0>
	if (s_addr->sa_family != AF_INET
    141c:	80 01 00 08 	lwz     r0,8(r1)
    1420:	7c 09 03 78 	mr      r9,r0
    1424:	a0 09 00 00 	lhz     r0,0(r9)
    1428:	54 00 04 3e 	clrlwi  r0,r0,16
    142c:	2f 80 00 02 	cmpwi   cr7,r0,2
    1430:	41 9e 00 24 	beq-    cr7,1454 <present_and_same_family+0xac>
#if defined(CONFIG_IPV6) || defined(CONFIG_IPV6_MODULE)
	    && s_addr->sa_family != AF_INET6
    1434:	80 01 00 08 	lwz     r0,8(r1)
    1438:	7c 0b 03 78 	mr      r11,r0
    143c:	a0 0b 00 00 	lhz     r0,0(r11)
    1440:	54 00 04 3e 	clrlwi  r0,r0,16
    1444:	2f 80 00 0a 	cmpwi   cr7,r0,10
    1448:	41 9e 00 0c 	beq-    cr7,1454 <present_and_same_family+0xac>
#endif
		)
		return 0;
    144c:	38 00 00 00 	li      r0,0
    1450:	48 00 00 08 	b       1458 <present_and_same_family+0xb0>

	return 1;
    1454:	38 00 00 01 	li      r0,1
}
    1458:	7c 03 03 78 	mr      r3,r0
    145c:	38 21 00 20 	addi    r1,r1,32
    1460:	4e 80 00 20 	blr

00001464 <parse_exthdrs>:

static int parse_exthdrs(struct sk_buff *skb, struct sadb_msg *hdr, void **ext_hdrs)
{
    1464:	94 21 ff b0 	stwu    r1,-80(r1)
    1468:	7c 08 02 a6 	mflr    r0
    146c:	90 01 00 54 	stw     r0,84(r1)
    1470:	90 61 00 38 	stw     r3,56(r1)
    1474:	90 81 00 3c 	stw     r4,60(r1)
    1478:	90 a1 00 40 	stw     r5,64(r1)
	char *p = (char *) hdr;
    147c:	80 01 00 3c 	lwz     r0,60(r1)
    1480:	90 01 00 08 	stw     r0,8(r1)
	int len = skb->len;
    1484:	80 01 00 38 	lwz     r0,56(r1)
    1488:	7c 09 03 78 	mr      r9,r0
    148c:	80 09 00 50 	lwz     r0,80(r9)
    1490:	90 01 00 0c 	stw     r0,12(r1)

	len -= sizeof(*hdr);
    1494:	80 01 00 0c 	lwz     r0,12(r1)
    1498:	30 00 ff f0 	addic   r0,r0,-16
    149c:	90 01 00 0c 	stw     r0,12(r1)
	p += sizeof(*hdr);
    14a0:	80 01 00 08 	lwz     r0,8(r1)
    14a4:	30 00 00 10 	addic   r0,r0,16
    14a8:	90 01 00 08 	stw     r0,8(r1)
	while (len > 0) {
    14ac:	48 00 02 28 	b       16d4 <parse_exthdrs+0x270>
		struct sadb_ext *ehdr = (struct sadb_ext *) p;
    14b0:	80 01 00 08 	lwz     r0,8(r1)
    14b4:	90 01 00 10 	stw     r0,16(r1)
		uint16_t ext_type;
		int ext_len;

		ext_len  = ehdr->sadb_ext_len;
    14b8:	80 01 00 10 	lwz     r0,16(r1)
    14bc:	7c 0b 03 78 	mr      r11,r0
    14c0:	a0 0b 00 00 	lhz     r0,0(r11)
    14c4:	54 00 04 3e 	clrlwi  r0,r0,16
    14c8:	90 01 00 14 	stw     r0,20(r1)
		ext_len *= sizeof(uint64_t);
    14cc:	80 01 00 14 	lwz     r0,20(r1)
    14d0:	54 00 18 38 	rlwinm  r0,r0,3,0,28
    14d4:	90 01 00 14 	stw     r0,20(r1)
		ext_type = ehdr->sadb_ext_type;
    14d8:	80 01 00 10 	lwz     r0,16(r1)
    14dc:	7c 09 03 78 	mr      r9,r0
    14e0:	a0 09 00 02 	lhz     r0,2(r9)
    14e4:	b0 01 00 18 	sth     r0,24(r1)
		if (ext_len < sizeof(uint64_t) ||
    14e8:	80 01 00 14 	lwz     r0,20(r1)
    14ec:	2b 80 00 07 	cmplwi  cr7,r0,7
    14f0:	40 9d 00 24 	ble-    cr7,1514 <parse_exthdrs+0xb0>
    14f4:	81 21 00 14 	lwz     r9,20(r1)
    14f8:	80 01 00 0c 	lwz     r0,12(r1)
    14fc:	7f 89 00 00 	cmpw    cr7,r9,r0
    1500:	41 9d 00 14 	bgt-    cr7,1514 <parse_exthdrs+0xb0>
		    ext_len > len ||
    1504:	a0 01 00 18 	lhz     r0,24(r1)
    1508:	54 00 04 3e 	clrlwi  r0,r0,16
    150c:	2f 80 00 00 	cmpwi   cr7,r0,0
    1510:	40 9e 00 0c 	bne-    cr7,151c <parse_exthdrs+0xb8>
		    ext_type == SADB_EXT_RESERVED)
			return -EINVAL;
    1514:	38 00 ff ea 	li      r0,-22
    1518:	48 00 01 cc 	b       16e4 <parse_exthdrs+0x280>

		if (ext_type <= SADB_EXT_MAX) {
    151c:	a0 01 00 18 	lhz     r0,24(r1)
    1520:	54 00 04 3e 	clrlwi  r0,r0,16
    1524:	2b 80 00 19 	cmplwi  cr7,r0,25
    1528:	41 9d 01 8c 	bgt-    cr7,16b4 <parse_exthdrs+0x250>
			int min = (int) sadb_ext_min_len[ext_type];
    152c:	a0 01 00 18 	lhz     r0,24(r1)
    1530:	54 00 04 3e 	clrlwi  r0,r0,16
    1534:	3d 20 00 00 	lis     r9,0
    1538:	39 29 00 cc 	addi    r9,r9,204
    153c:	7c 09 00 ae 	lbzx    r0,r9,r0
    1540:	54 00 06 3e 	clrlwi  r0,r0,24
    1544:	90 01 00 1c 	stw     r0,28(r1)
			if (ext_len < min)
    1548:	81 21 00 14 	lwz     r9,20(r1)
    154c:	80 01 00 1c 	lwz     r0,28(r1)
    1550:	7f 89 00 00 	cmpw    cr7,r9,r0
    1554:	40 9c 00 0c 	bge-    cr7,1560 <parse_exthdrs+0xfc>
				return -EINVAL;
    1558:	38 00 ff ea 	li      r0,-22
    155c:	48 00 01 88 	b       16e4 <parse_exthdrs+0x280>
			if (ext_hdrs[ext_type-1] != NULL)
    1560:	a0 01 00 18 	lhz     r0,24(r1)
    1564:	54 00 04 3e 	clrlwi  r0,r0,16
    1568:	30 00 ff ff 	addic   r0,r0,-1
    156c:	54 00 10 3a 	rlwinm  r0,r0,2,0,29
    1570:	81 21 00 40 	lwz     r9,64(r1)
    1574:	7c 09 02 14 	add     r0,r9,r0
    1578:	7c 0b 03 78 	mr      r11,r0
    157c:	80 0b 00 00 	lwz     r0,0(r11)
    1580:	2f 80 00 00 	cmpwi   cr7,r0,0
    1584:	41 9e 00 0c 	beq-    cr7,1590 <parse_exthdrs+0x12c>
				return -EINVAL;
    1588:	38 00 ff ea 	li      r0,-22
    158c:	48 00 01 58 	b       16e4 <parse_exthdrs+0x280>
			if (ext_type == SADB_EXT_ADDRESS_SRC ||
    1590:	a0 01 00 18 	lhz     r0,24(r1)
    1594:	54 00 04 3e 	clrlwi  r0,r0,16
    1598:	2f 80 00 05 	cmpwi   cr7,r0,5
    159c:	41 9e 00 34 	beq-    cr7,15d0 <parse_exthdrs+0x16c>
    15a0:	a0 01 00 18 	lhz     r0,24(r1)
    15a4:	54 00 04 3e 	clrlwi  r0,r0,16
    15a8:	2f 80 00 06 	cmpwi   cr7,r0,6
    15ac:	41 9e 00 24 	beq-    cr7,15d0 <parse_exthdrs+0x16c>
			    ext_type == SADB_EXT_ADDRESS_DST ||
    15b0:	a0 01 00 18 	lhz     r0,24(r1)
    15b4:	54 00 04 3e 	clrlwi  r0,r0,16
    15b8:	2f 80 00 07 	cmpwi   cr7,r0,7
    15bc:	41 9e 00 14 	beq-    cr7,15d0 <parse_exthdrs+0x16c>
			    ext_type == SADB_EXT_ADDRESS_PROXY ||
    15c0:	a0 01 00 18 	lhz     r0,24(r1)
    15c4:	54 00 04 3e 	clrlwi  r0,r0,16
    15c8:	2f 80 00 17 	cmpwi   cr7,r0,23
    15cc:	40 9e 00 20 	bne-    cr7,15ec <parse_exthdrs+0x188>
			    ext_type == SADB_X_EXT_NAT_T_OA) {
				if (verify_address_len(p))
    15d0:	80 61 00 08 	lwz     r3,8(r1)
    15d4:	4b ff fc e1 	bl      12b4 <verify_address_len>
    15d8:	7c 60 1b 78 	mr      r0,r3
    15dc:	2f 80 00 00 	cmpwi   cr7,r0,0
    15e0:	41 9e 00 0c 	beq-    cr7,15ec <parse_exthdrs+0x188>
					return -EINVAL;
    15e4:	38 00 ff ea 	li      r0,-22
    15e8:	48 00 00 fc 	b       16e4 <parse_exthdrs+0x280>
			}
			if (ext_type == SADB_X_EXT_SEC_CTX) {
    15ec:	a0 01 00 18 	lhz     r0,24(r1)
    15f0:	54 00 04 3e 	clrlwi  r0,r0,16
    15f4:	2f 80 00 18 	cmpwi   cr7,r0,24
    15f8:	40 9e 00 98 	bne-    cr7,1690 <parse_exthdrs+0x22c>
    15fc:	80 01 00 08 	lwz     r0,8(r1)
    1600:	90 01 00 20 	stw     r0,32(r1)
			    sizeof(uint64_t));
}

static inline int verify_sec_ctx_len(void *p)
{
	struct sadb_x_sec_ctx *sec_ctx = (struct sadb_x_sec_ctx *)p;
    1604:	80 01 00 20 	lwz     r0,32(r1)
    1608:	90 01 00 24 	stw     r0,36(r1)
	int len = sec_ctx->sadb_x_ctx_len;
    160c:	80 01 00 24 	lwz     r0,36(r1)
    1610:	7c 09 03 78 	mr      r9,r0
    1614:	a0 09 00 06 	lhz     r0,6(r9)
    1618:	54 00 04 3e 	clrlwi  r0,r0,16
    161c:	90 01 00 28 	stw     r0,40(r1)

	if (len > PAGE_SIZE)
    1620:	80 01 00 28 	lwz     r0,40(r1)
    1624:	2b 80 10 00 	cmplwi  cr7,r0,4096
    1628:	40 9d 00 0c 	ble-    cr7,1634 <parse_exthdrs+0x1d0>
		return -EINVAL;
    162c:	38 00 ff ea 	li      r0,-22
    1630:	48 00 00 50 	b       1680 <parse_exthdrs+0x21c>
    1634:	80 01 00 24 	lwz     r0,36(r1)
    1638:	90 01 00 2c 	stw     r0,44(r1)
	return 0;
}

static inline int pfkey_sec_ctx_len(struct sadb_x_sec_ctx *sec_ctx)
{
	return DIV_ROUND_UP(sizeof(struct sadb_x_sec_ctx) +
    163c:	80 01 00 2c 	lwz     r0,44(r1)
    1640:	7c 0b 03 78 	mr      r11,r0
    1644:	a0 0b 00 06 	lhz     r0,6(r11)
    1648:	54 00 04 3e 	clrlwi  r0,r0,16
    164c:	30 00 00 0f 	addic   r0,r0,15
    1650:	54 00 e8 fe 	rlwinm  r0,r0,29,3,31
	int len = sec_ctx->sadb_x_ctx_len;

	if (len > PAGE_SIZE)
		return -EINVAL;

	len = pfkey_sec_ctx_len(sec_ctx);
    1654:	90 01 00 28 	stw     r0,40(r1)

	if (sec_ctx->sadb_x_sec_len != len)
    1658:	80 01 00 24 	lwz     r0,36(r1)
    165c:	7c 09 03 78 	mr      r9,r0
    1660:	a0 09 00 00 	lhz     r0,0(r9)
    1664:	54 00 04 3e 	clrlwi  r0,r0,16
    1668:	81 21 00 28 	lwz     r9,40(r1)
    166c:	7f 89 00 00 	cmpw    cr7,r9,r0
    1670:	41 9e 00 0c 	beq-    cr7,167c <parse_exthdrs+0x218>
		return -EINVAL;
    1674:	38 00 ff ea 	li      r0,-22
    1678:	48 00 00 08 	b       1680 <parse_exthdrs+0x21c>

	return 0;
    167c:	38 00 00 00 	li      r0,0
			    ext_type == SADB_X_EXT_NAT_T_OA) {
				if (verify_address_len(p))
					return -EINVAL;
			}
			if (ext_type == SADB_X_EXT_SEC_CTX) {
				if (verify_sec_ctx_len(p))
    1680:	2f 80 00 00 	cmpwi   cr7,r0,0
    1684:	41 9e 00 0c 	beq-    cr7,1690 <parse_exthdrs+0x22c>
					return -EINVAL;
    1688:	38 00 ff ea 	li      r0,-22
    168c:	48 00 00 58 	b       16e4 <parse_exthdrs+0x280>
			}
			ext_hdrs[ext_type-1] = p;
    1690:	a0 01 00 18 	lhz     r0,24(r1)
    1694:	54 00 04 3e 	clrlwi  r0,r0,16
    1698:	30 00 ff ff 	addic   r0,r0,-1
    169c:	54 00 10 3a 	rlwinm  r0,r0,2,0,29
    16a0:	81 21 00 40 	lwz     r9,64(r1)
    16a4:	7c 09 02 14 	add     r0,r9,r0
    16a8:	81 21 00 08 	lwz     r9,8(r1)
    16ac:	7c 0b 03 78 	mr      r11,r0
    16b0:	91 2b 00 00 	stw     r9,0(r11)
		}
		p   += ext_len;
    16b4:	80 01 00 14 	lwz     r0,20(r1)
    16b8:	81 21 00 08 	lwz     r9,8(r1)
    16bc:	7c 09 02 14 	add     r0,r9,r0
    16c0:	90 01 00 08 	stw     r0,8(r1)
		len -= ext_len;
    16c4:	81 21 00 0c 	lwz     r9,12(r1)
    16c8:	80 01 00 14 	lwz     r0,20(r1)
    16cc:	7c 00 48 50 	subf    r0,r0,r9
    16d0:	90 01 00 0c 	stw     r0,12(r1)
	char *p = (char *) hdr;
	int len = skb->len;

	len -= sizeof(*hdr);
	p += sizeof(*hdr);
	while (len > 0) {
    16d4:	80 01 00 0c 	lwz     r0,12(r1)
    16d8:	2f 80 00 00 	cmpwi   cr7,r0,0
    16dc:	41 9d fd d4 	bgt+    cr7,14b0 <parse_exthdrs+0x4c>
		}
		p   += ext_len;
		len -= ext_len;
	}

	return 0;
    16e0:	38 00 00 00 	li      r0,0
}
    16e4:	7c 03 03 78 	mr      r3,r0
    16e8:	80 01 00 54 	lwz     r0,84(r1)
    16ec:	7c 08 03 a6 	mtlr    r0
    16f0:	38 21 00 50 	addi    r1,r1,80
    16f4:	4e 80 00 20 	blr

000016f8 <pfkey_satype2proto>:

static uint16_t
pfkey_satype2proto(uint8_t satype)
{
    16f8:	94 21 ff f0 	stwu    r1,-16(r1)
    16fc:	7c 60 1b 78 	mr      r0,r3
    1700:	98 01 00 08 	stb     r0,8(r1)
	switch (satype) {
    1704:	88 01 00 08 	lbz     r0,8(r1)
    1708:	54 00 06 3e 	clrlwi  r0,r0,24
    170c:	2f 80 00 02 	cmpwi   cr7,r0,2
    1710:	41 9e 00 34 	beq-    cr7,1744 <pfkey_satype2proto+0x4c>
    1714:	2f 80 00 02 	cmpwi   cr7,r0,2
    1718:	41 9d 00 10 	bgt-    cr7,1728 <pfkey_satype2proto+0x30>
    171c:	2f 80 00 00 	cmpwi   cr7,r0,0
    1720:	41 9e 00 1c 	beq-    cr7,173c <pfkey_satype2proto+0x44>
    1724:	48 00 00 38 	b       175c <pfkey_satype2proto+0x64>
    1728:	2f 80 00 03 	cmpwi   cr7,r0,3
    172c:	41 9e 00 20 	beq-    cr7,174c <pfkey_satype2proto+0x54>
    1730:	2f 80 00 09 	cmpwi   cr7,r0,9
    1734:	41 9e 00 20 	beq-    cr7,1754 <pfkey_satype2proto+0x5c>
    1738:	48 00 00 24 	b       175c <pfkey_satype2proto+0x64>
	case SADB_SATYPE_UNSPEC:
		return IPSEC_PROTO_ANY;
    173c:	38 00 00 ff 	li      r0,255
    1740:	48 00 00 20 	b       1760 <pfkey_satype2proto+0x68>
	case SADB_SATYPE_AH:
		return IPPROTO_AH;
    1744:	38 00 00 33 	li      r0,51
    1748:	48 00 00 18 	b       1760 <pfkey_satype2proto+0x68>
	case SADB_SATYPE_ESP:
		return IPPROTO_ESP;
    174c:	38 00 00 32 	li      r0,50
    1750:	48 00 00 10 	b       1760 <pfkey_satype2proto+0x68>
	case SADB_X_SATYPE_IPCOMP:
		return IPPROTO_COMP;
    1754:	38 00 00 6c 	li      r0,108
    1758:	48 00 00 08 	b       1760 <pfkey_satype2proto+0x68>
		break;
	default:
		return 0;
    175c:	38 00 00 00 	li      r0,0
	}
	/* NOTREACHED */
}
    1760:	7c 03 03 78 	mr      r3,r0
    1764:	38 21 00 10 	addi    r1,r1,16
    1768:	4e 80 00 20 	blr

0000176c <pfkey_proto2satype>:

static uint8_t
pfkey_proto2satype(uint16_t proto)
{
    176c:	94 21 ff f0 	stwu    r1,-16(r1)
    1770:	7c 60 1b 78 	mr      r0,r3
    1774:	b0 01 00 08 	sth     r0,8(r1)
	switch (proto) {
    1778:	a0 01 00 08 	lhz     r0,8(r1)
    177c:	54 00 04 3e 	clrlwi  r0,r0,16
    1780:	2f 80 00 33 	cmpwi   cr7,r0,51
    1784:	41 9e 00 18 	beq-    cr7,179c <pfkey_proto2satype+0x30>
    1788:	2f 80 00 6c 	cmpwi   cr7,r0,108
    178c:	41 9e 00 20 	beq-    cr7,17ac <pfkey_proto2satype+0x40>
    1790:	2f 80 00 32 	cmpwi   cr7,r0,50
    1794:	41 9e 00 10 	beq-    cr7,17a4 <pfkey_proto2satype+0x38>
    1798:	48 00 00 1c 	b       17b4 <pfkey_proto2satype+0x48>
	case IPPROTO_AH:
		return SADB_SATYPE_AH;
    179c:	38 00 00 02 	li      r0,2
    17a0:	48 00 00 18 	b       17b8 <pfkey_proto2satype+0x4c>
	case IPPROTO_ESP:
		return SADB_SATYPE_ESP;
    17a4:	38 00 00 03 	li      r0,3
    17a8:	48 00 00 10 	b       17b8 <pfkey_proto2satype+0x4c>
	case IPPROTO_COMP:
		return SADB_X_SATYPE_IPCOMP;
    17ac:	38 00 00 09 	li      r0,9
    17b0:	48 00 00 08 	b       17b8 <pfkey_proto2satype+0x4c>
		break;
	default:
		return 0;
    17b4:	38 00 00 00 	li      r0,0
	}
	/* NOTREACHED */
}
    17b8:	7c 03 03 78 	mr      r3,r0
    17bc:	38 21 00 10 	addi    r1,r1,16
    17c0:	4e 80 00 20 	blr

000017c4 <pfkey_proto_to_xfrm>:
/* BTW, this scheme means that there is no way with PFKEY2 sockets to
 * say specifically 'just raw sockets' as we encode them as 255.
 */

static uint8_t pfkey_proto_to_xfrm(uint8_t proto)
{
    17c4:	94 21 ff f0 	stwu    r1,-16(r1)
    17c8:	7c 60 1b 78 	mr      r0,r3
    17cc:	98 01 00 08 	stb     r0,8(r1)
	return proto == IPSEC_PROTO_ANY ? 0 : proto;
    17d0:	88 01 00 08 	lbz     r0,8(r1)
    17d4:	54 00 06 3e 	clrlwi  r0,r0,24
    17d8:	2f 80 00 ff 	cmpwi   cr7,r0,255
    17dc:	41 9e 00 10 	beq-    cr7,17ec <pfkey_proto_to_xfrm+0x28>
    17e0:	88 01 00 08 	lbz     r0,8(r1)
    17e4:	54 00 06 3e 	clrlwi  r0,r0,24
    17e8:	48 00 00 08 	b       17f0 <pfkey_proto_to_xfrm+0x2c>
    17ec:	38 00 00 00 	li      r0,0
}
    17f0:	7c 03 03 78 	mr      r3,r0
    17f4:	38 21 00 10 	addi    r1,r1,16
    17f8:	4e 80 00 20 	blr

000017fc <pfkey_proto_from_xfrm>:

static uint8_t pfkey_proto_from_xfrm(uint8_t proto)
{
    17fc:	94 21 ff f0 	stwu    r1,-16(r1)
    1800:	7c 60 1b 78 	mr      r0,r3
    1804:	98 01 00 08 	stb     r0,8(r1)
	return proto ? proto : IPSEC_PROTO_ANY;
    1808:	88 01 00 08 	lbz     r0,8(r1)
    180c:	54 00 06 3e 	clrlwi  r0,r0,24
    1810:	2f 80 00 00 	cmpwi   cr7,r0,0
    1814:	41 9e 00 10 	beq-    cr7,1824 <pfkey_proto_from_xfrm+0x28>
    1818:	88 01 00 08 	lbz     r0,8(r1)
    181c:	54 00 06 3e 	clrlwi  r0,r0,24
    1820:	48 00 00 08 	b       1828 <pfkey_proto_from_xfrm+0x2c>
    1824:	38 00 00 ff 	li      r0,255
}
    1828:	7c 03 03 78 	mr      r3,r0
    182c:	38 21 00 10 	addi    r1,r1,16
    1830:	4e 80 00 20 	blr

00001834 <pfkey_sockaddr_extract>:
	return 0;
}

static
int pfkey_sockaddr_extract(const struct sockaddr *sa, xfrm_address_t *xaddr)
{
    1834:	94 21 ff f0 	stwu    r1,-16(r1)
    1838:	90 61 00 08 	stw     r3,8(r1)
    183c:	90 81 00 0c 	stw     r4,12(r1)
	switch (sa->sa_family) {
    1840:	80 01 00 08 	lwz     r0,8(r1)
    1844:	7c 07 03 78 	mr      r7,r0
    1848:	a0 07 00 00 	lhz     r0,0(r7)
    184c:	54 00 04 3e 	clrlwi  r0,r0,16
    1850:	2f 80 00 02 	cmpwi   cr7,r0,2
    1854:	41 9e 00 10 	beq-    cr7,1864 <pfkey_sockaddr_extract+0x30>
    1858:	2f 80 00 0a 	cmpwi   cr7,r0,10
    185c:	41 9e 00 28 	beq-    cr7,1884 <pfkey_sockaddr_extract+0x50>
    1860:	48 00 00 68 	b       18c8 <pfkey_sockaddr_extract+0x94>
	case AF_INET:
		xaddr->a4 =
			((struct sockaddr_in *)sa)->sin_addr.s_addr;
    1864:	80 01 00 08 	lwz     r0,8(r1)
    1868:	7c 08 03 78 	mr      r8,r0
    186c:	81 28 00 04 	lwz     r9,4(r8)
static
int pfkey_sockaddr_extract(const struct sockaddr *sa, xfrm_address_t *xaddr)
{
	switch (sa->sa_family) {
	case AF_INET:
		xaddr->a4 =
    1870:	80 01 00 0c 	lwz     r0,12(r1)
    1874:	7c 0a 03 78 	mr      r10,r0
    1878:	91 2a 00 00 	stw     r9,0(r10)
			((struct sockaddr_in *)sa)->sin_addr.s_addr;
		return AF_INET;
    187c:	38 00 00 02 	li      r0,2
    1880:	48 00 00 4c 	b       18cc <pfkey_sockaddr_extract+0x98>
#if defined(CONFIG_IPV6) || defined(CONFIG_IPV6_MODULE)
	case AF_INET6:
		memcpy(xaddr->a6,
    1884:	80 01 00 0c 	lwz     r0,12(r1)
		       &((struct sockaddr_in6 *)sa)->sin6_addr,
    1888:	81 21 00 08 	lwz     r9,8(r1)
    188c:	39 29 00 08 	addi    r9,r9,8
		xaddr->a4 =
			((struct sockaddr_in *)sa)->sin_addr.s_addr;
		return AF_INET;
#if defined(CONFIG_IPV6) || defined(CONFIG_IPV6_MODULE)
	case AF_INET6:
		memcpy(xaddr->a6,
    1890:	81 09 00 00 	lwz     r8,0(r9)
    1894:	81 49 00 04 	lwz     r10,4(r9)
    1898:	81 69 00 08 	lwz     r11,8(r9)
    189c:	81 29 00 0c 	lwz     r9,12(r9)
    18a0:	7c 07 03 78 	mr      r7,r0
    18a4:	91 07 00 00 	stw     r8,0(r7)
    18a8:	7c 08 03 78 	mr      r8,r0
    18ac:	91 48 00 04 	stw     r10,4(r8)
    18b0:	7c 0a 03 78 	mr      r10,r0
    18b4:	91 6a 00 08 	stw     r11,8(r10)
    18b8:	7c 0b 03 78 	mr      r11,r0
    18bc:	91 2b 00 0c 	stw     r9,12(r11)
		       &((struct sockaddr_in6 *)sa)->sin6_addr,
		       sizeof(struct in6_addr));
		return AF_INET6;
    18c0:	38 00 00 0a 	li      r0,10
    18c4:	48 00 00 08 	b       18cc <pfkey_sockaddr_extract+0x98>
#endif
	}
	return 0;
    18c8:	38 00 00 00 	li      r0,0
}
    18cc:	7c 03 03 78 	mr      r3,r0
    18d0:	38 21 00 10 	addi    r1,r1,16
    18d4:	4e 80 00 20 	blr

000018d8 <pfkey_sadb_addr2xfrm_addr>:

static
int pfkey_sadb_addr2xfrm_addr(struct sadb_address *addr, xfrm_address_t *xaddr)
{
    18d8:	94 21 ff f0 	stwu    r1,-16(r1)
    18dc:	7c 08 02 a6 	mflr    r0
    18e0:	90 01 00 14 	stw     r0,20(r1)
    18e4:	90 61 00 08 	stw     r3,8(r1)
    18e8:	90 81 00 0c 	stw     r4,12(r1)
	return pfkey_sockaddr_extract((struct sockaddr *)(addr + 1),
    18ec:	80 01 00 08 	lwz     r0,8(r1)
    18f0:	30 00 00 08 	addic   r0,r0,8
    18f4:	7c 03 03 78 	mr      r3,r0
    18f8:	80 81 00 0c 	lwz     r4,12(r1)
    18fc:	4b ff ff 39 	bl      1834 <pfkey_sockaddr_extract>
    1900:	7c 60 1b 78 	mr      r0,r3
				      xaddr);
}
    1904:	7c 03 03 78 	mr      r3,r0
    1908:	80 01 00 14 	lwz     r0,20(r1)
    190c:	7c 08 03 a6 	mtlr    r0
    1910:	38 21 00 10 	addi    r1,r1,16
    1914:	4e 80 00 20 	blr

00001918 <pfkey_xfrm_state_lookup>:

static struct  xfrm_state *pfkey_xfrm_state_lookup(struct net *net, struct sadb_msg *hdr, void **ext_hdrs)
{
    1918:	94 21 ff c0 	stwu    r1,-64(r1)
    191c:	7c 08 02 a6 	mflr    r0
    1920:	90 01 00 44 	stw     r0,68(r1)
    1924:	90 61 00 28 	stw     r3,40(r1)
    1928:	90 81 00 2c 	stw     r4,44(r1)
    192c:	90 a1 00 30 	stw     r5,48(r1)
	struct sadb_address *addr;
	uint16_t proto;
	unsigned short family;
	xfrm_address_t *xaddr;

	sa = (struct sadb_sa *) ext_hdrs[SADB_EXT_SA-1];
    1930:	80 01 00 30 	lwz     r0,48(r1)
    1934:	7c 09 03 78 	mr      r9,r0
    1938:	80 09 00 00 	lwz     r0,0(r9)
    193c:	90 01 00 0c 	stw     r0,12(r1)
	if (sa == NULL)
    1940:	80 01 00 0c 	lwz     r0,12(r1)
    1944:	2f 80 00 00 	cmpwi   cr7,r0,0
    1948:	40 9e 00 0c 	bne-    cr7,1954 <pfkey_xfrm_state_lookup+0x3c>
		return NULL;
    194c:	38 00 00 00 	li      r0,0
    1950:	48 00 01 10 	b       1a60 <pfkey_xfrm_state_lookup+0x148>

	proto = pfkey_satype2proto(hdr->sadb_msg_satype);
    1954:	80 01 00 2c 	lwz     r0,44(r1)
    1958:	7c 09 03 78 	mr      r9,r0
    195c:	88 09 00 03 	lbz     r0,3(r9)
    1960:	54 00 06 3e 	clrlwi  r0,r0,24
    1964:	7c 03 03 78 	mr      r3,r0
    1968:	4b ff fd 91 	bl      16f8 <pfkey_satype2proto>
    196c:	7c 60 1b 78 	mr      r0,r3
    1970:	b0 01 00 10 	sth     r0,16(r1)
	if (proto == 0)
    1974:	a0 01 00 10 	lhz     r0,16(r1)
    1978:	54 00 04 3e 	clrlwi  r0,r0,16
    197c:	2f 80 00 00 	cmpwi   cr7,r0,0
    1980:	40 9e 00 0c 	bne-    cr7,198c <pfkey_xfrm_state_lookup+0x74>
		return NULL;
    1984:	38 00 00 00 	li      r0,0
    1988:	48 00 00 d8 	b       1a60 <pfkey_xfrm_state_lookup+0x148>

	/* sadb_address_len should be checked by caller */
	addr = (struct sadb_address *) ext_hdrs[SADB_EXT_ADDRESS_DST-1];
    198c:	80 01 00 30 	lwz     r0,48(r1)
    1990:	7c 09 03 78 	mr      r9,r0
    1994:	80 09 00 14 	lwz     r0,20(r9)
    1998:	90 01 00 14 	stw     r0,20(r1)
	if (addr == NULL)
    199c:	80 01 00 14 	lwz     r0,20(r1)
    19a0:	2f 80 00 00 	cmpwi   cr7,r0,0
    19a4:	40 9e 00 0c 	bne-    cr7,19b0 <pfkey_xfrm_state_lookup+0x98>
		return NULL;
    19a8:	38 00 00 00 	li      r0,0
    19ac:	48 00 00 b4 	b       1a60 <pfkey_xfrm_state_lookup+0x148>

	family = ((struct sockaddr *)(addr + 1))->sa_family;
    19b0:	80 01 00 14 	lwz     r0,20(r1)
    19b4:	30 00 00 08 	addic   r0,r0,8
    19b8:	7c 09 03 78 	mr      r9,r0
    19bc:	a0 09 00 00 	lhz     r0,0(r9)
    19c0:	b0 01 00 18 	sth     r0,24(r1)
	switch (family) {
    19c4:	a0 01 00 18 	lhz     r0,24(r1)
    19c8:	54 00 04 3e 	clrlwi  r0,r0,16
    19cc:	2f 80 00 02 	cmpwi   cr7,r0,2
    19d0:	41 9e 00 10 	beq-    cr7,19e0 <pfkey_xfrm_state_lookup+0xc8>
    19d4:	2f 80 00 0a 	cmpwi   cr7,r0,10
    19d8:	41 9e 00 1c 	beq-    cr7,19f4 <pfkey_xfrm_state_lookup+0xdc>
    19dc:	48 00 00 2c 	b       1a08 <pfkey_xfrm_state_lookup+0xf0>
	case AF_INET:
		xaddr = (xfrm_address_t *)&((struct sockaddr_in *)(addr + 1))->sin_addr;
    19e0:	80 01 00 14 	lwz     r0,20(r1)
    19e4:	30 00 00 08 	addic   r0,r0,8
    19e8:	30 00 00 04 	addic   r0,r0,4
    19ec:	90 01 00 08 	stw     r0,8(r1)
		break;
    19f0:	48 00 00 20 	b       1a10 <pfkey_xfrm_state_lookup+0xf8>
#if defined(CONFIG_IPV6) || defined(CONFIG_IPV6_MODULE)
	case AF_INET6:
		xaddr = (xfrm_address_t *)&((struct sockaddr_in6 *)(addr + 1))->sin6_addr;
    19f4:	80 01 00 14 	lwz     r0,20(r1)
    19f8:	30 00 00 08 	addic   r0,r0,8
    19fc:	30 00 00 08 	addic   r0,r0,8
    1a00:	90 01 00 08 	stw     r0,8(r1)
		break;
    1a04:	48 00 00 0c 	b       1a10 <pfkey_xfrm_state_lookup+0xf8>
#endif
	default:
		xaddr = NULL;
    1a08:	38 00 00 00 	li      r0,0
    1a0c:	90 01 00 08 	stw     r0,8(r1)
	}

	if (!xaddr)
    1a10:	80 01 00 08 	lwz     r0,8(r1)
    1a14:	2f 80 00 00 	cmpwi   cr7,r0,0
    1a18:	40 9e 00 0c 	bne-    cr7,1a24 <pfkey_xfrm_state_lookup+0x10c>
		return NULL;
    1a1c:	38 00 00 00 	li      r0,0
    1a20:	48 00 00 40 	b       1a60 <pfkey_xfrm_state_lookup+0x148>

	return xfrm_state_lookup(net, DUMMY_MARK, xaddr, sa->sadb_sa_spi, proto, family);
    1a24:	80 01 00 0c 	lwz     r0,12(r1)
    1a28:	7c 09 03 78 	mr      r9,r0
    1a2c:	81 69 00 04 	lwz     r11,4(r9)
    1a30:	a0 01 00 10 	lhz     r0,16(r1)
    1a34:	54 09 06 3e 	clrlwi  r9,r0,24
    1a38:	a0 01 00 18 	lhz     r0,24(r1)
    1a3c:	54 00 04 3e 	clrlwi  r0,r0,16
    1a40:	80 61 00 28 	lwz     r3,40(r1)
    1a44:	38 80 00 00 	li      r4,0
    1a48:	80 a1 00 08 	lwz     r5,8(r1)
    1a4c:	7d 66 5b 78 	mr      r6,r11
    1a50:	7d 27 4b 78 	mr      r7,r9
    1a54:	7c 08 03 78 	mr      r8,r0
    1a58:	48 00 00 01 	bl      1a58 <pfkey_xfrm_state_lookup+0x140>
    1a5c:	7c 60 1b 78 	mr      r0,r3
}
    1a60:	7c 03 03 78 	mr      r3,r0
    1a64:	80 01 00 44 	lwz     r0,68(r1)
    1a68:	7c 08 03 a6 	mtlr    r0
    1a6c:	38 21 00 40 	addi    r1,r1,64
    1a70:	4e 80 00 20 	blr

00001a74 <pfkey_sockaddr_size>:

#define PFKEY_ALIGN8(a) (1 + (((a) - 1) | (8 - 1)))

static int
pfkey_sockaddr_size(sa_family_t family)
{
    1a74:	94 21 ff e0 	stwu    r1,-32(r1)
    1a78:	7c 60 1b 78 	mr      r0,r3
    1a7c:	b0 01 00 18 	sth     r0,24(r1)
    1a80:	a0 01 00 18 	lhz     r0,24(r1)
    1a84:	b0 01 00 08 	sth     r0,8(r1)
	return proto ? proto : IPSEC_PROTO_ANY;
}

static inline int pfkey_sockaddr_len(sa_family_t family)
{
	switch (family) {
    1a88:	a0 01 00 08 	lhz     r0,8(r1)
    1a8c:	54 00 04 3e 	clrlwi  r0,r0,16
    1a90:	2f 80 00 02 	cmpwi   cr7,r0,2
    1a94:	41 9e 00 10 	beq-    cr7,1aa4 <pfkey_sockaddr_size+0x30>
    1a98:	2f 80 00 0a 	cmpwi   cr7,r0,10
    1a9c:	41 9e 00 10 	beq-    cr7,1aac <pfkey_sockaddr_size+0x38>
    1aa0:	48 00 00 14 	b       1ab4 <pfkey_sockaddr_size+0x40>
	case AF_INET:
		return sizeof(struct sockaddr_in);
    1aa4:	38 00 00 10 	li      r0,16
    1aa8:	48 00 00 10 	b       1ab8 <pfkey_sockaddr_size+0x44>
#if defined(CONFIG_IPV6) || defined(CONFIG_IPV6_MODULE)
	case AF_INET6:
		return sizeof(struct sockaddr_in6);
    1aac:	38 00 00 1c 	li      r0,28
    1ab0:	48 00 00 08 	b       1ab8 <pfkey_sockaddr_size+0x44>
#endif
	}
	return 0;
    1ab4:	38 00 00 00 	li      r0,0
#define PFKEY_ALIGN8(a) (1 + (((a) - 1) | (8 - 1)))

static int
pfkey_sockaddr_size(sa_family_t family)
{
	return PFKEY_ALIGN8(pfkey_sockaddr_len(family));
    1ab8:	30 00 ff ff 	addic   r0,r0,-1
    1abc:	60 00 00 07 	ori     r0,r0,7
    1ac0:	30 00 00 01 	addic   r0,r0,1
}
    1ac4:	7c 03 03 78 	mr      r3,r0
    1ac8:	38 21 00 20 	addi    r1,r1,32
    1acc:	4e 80 00 20 	blr

00001ad0 <pfkey_sockaddr_fill>:
}

static unsigned int pfkey_sockaddr_fill(xfrm_address_t *xaddr, __be16 port,
				       struct sockaddr *sa,
				       unsigned short family)
{
    1ad0:	94 21 ff d0 	stwu    r1,-48(r1)
    1ad4:	90 61 00 18 	stw     r3,24(r1)
    1ad8:	7c 89 23 78 	mr      r9,r4
    1adc:	90 a1 00 20 	stw     r5,32(r1)
    1ae0:	7c c0 33 78 	mr      r0,r6
    1ae4:	b1 21 00 1c 	sth     r9,28(r1)
    1ae8:	b0 01 00 1e 	sth     r0,30(r1)
	switch (family) {
    1aec:	a0 01 00 1e 	lhz     r0,30(r1)
    1af0:	54 00 04 3e 	clrlwi  r0,r0,16
    1af4:	2f 80 00 02 	cmpwi   cr7,r0,2
    1af8:	41 9e 00 10 	beq-    cr7,1b08 <pfkey_sockaddr_fill+0x38>
    1afc:	2f 80 00 0a 	cmpwi   cr7,r0,10
    1b00:	41 9e 00 70 	beq-    cr7,1b70 <pfkey_sockaddr_fill+0xa0>
    1b04:	48 00 01 08 	b       1c0c <pfkey_sockaddr_fill+0x13c>
	case AF_INET:
	    {
		struct sockaddr_in *sin = (struct sockaddr_in *)sa;
    1b08:	80 01 00 20 	lwz     r0,32(r1)
    1b0c:	90 01 00 08 	stw     r0,8(r1)
		sin->sin_family = AF_INET;
    1b10:	80 01 00 08 	lwz     r0,8(r1)
    1b14:	39 20 00 02 	li      r9,2
    1b18:	7c 07 03 78 	mr      r7,r0
    1b1c:	b1 27 00 00 	sth     r9,0(r7)
		sin->sin_port = port;
    1b20:	80 01 00 08 	lwz     r0,8(r1)
    1b24:	a1 21 00 1c 	lhz     r9,28(r1)
    1b28:	7c 08 03 78 	mr      r8,r0
    1b2c:	b1 28 00 02 	sth     r9,2(r8)
		sin->sin_addr.s_addr = xaddr->a4;
    1b30:	80 01 00 18 	lwz     r0,24(r1)
    1b34:	7c 0a 03 78 	mr      r10,r0
    1b38:	81 2a 00 00 	lwz     r9,0(r10)
    1b3c:	80 01 00 08 	lwz     r0,8(r1)
    1b40:	7c 0b 03 78 	mr      r11,r0
    1b44:	91 2b 00 04 	stw     r9,4(r11)
		memset(sin->sin_zero, 0, sizeof(sin->sin_zero));
    1b48:	80 01 00 08 	lwz     r0,8(r1)
    1b4c:	30 00 00 08 	addic   r0,r0,8
    1b50:	39 20 00 00 	li      r9,0
    1b54:	7c 07 03 78 	mr      r7,r0
    1b58:	91 27 00 00 	stw     r9,0(r7)
    1b5c:	39 20 00 00 	li      r9,0
    1b60:	7c 08 03 78 	mr      r8,r0
    1b64:	91 28 00 04 	stw     r9,4(r8)
		return 32;
    1b68:	38 00 00 20 	li      r0,32
    1b6c:	48 00 00 a4 	b       1c10 <pfkey_sockaddr_fill+0x140>
	    }
#if defined(CONFIG_IPV6) || defined(CONFIG_IPV6_MODULE)
	case AF_INET6:
	    {
		struct sockaddr_in6 *sin6 = (struct sockaddr_in6 *)sa;
    1b70:	80 01 00 20 	lwz     r0,32(r1)
    1b74:	90 01 00 0c 	stw     r0,12(r1)
		sin6->sin6_family = AF_INET6;
    1b78:	80 01 00 0c 	lwz     r0,12(r1)
    1b7c:	39 20 00 0a 	li      r9,10
    1b80:	7c 0a 03 78 	mr      r10,r0
    1b84:	b1 2a 00 00 	sth     r9,0(r10)
		sin6->sin6_port = port;
    1b88:	80 01 00 0c 	lwz     r0,12(r1)
    1b8c:	a1 21 00 1c 	lhz     r9,28(r1)
    1b90:	7c 0b 03 78 	mr      r11,r0
    1b94:	b1 2b 00 02 	sth     r9,2(r11)
		sin6->sin6_flowinfo = 0;
    1b98:	80 01 00 0c 	lwz     r0,12(r1)
    1b9c:	39 20 00 00 	li      r9,0
    1ba0:	7c 07 03 78 	mr      r7,r0
    1ba4:	91 27 00 04 	stw     r9,4(r7)
		ipv6_addr_copy(&sin6->sin6_addr, (struct in6_addr *)xaddr->a6);
    1ba8:	80 01 00 0c 	lwz     r0,12(r1)
    1bac:	31 20 00 08 	addic   r9,r0,8
    1bb0:	80 01 00 18 	lwz     r0,24(r1)
    1bb4:	91 21 00 10 	stw     r9,16(r1)
    1bb8:	90 01 00 14 	stw     r0,20(r1)
		  ((a1->s6_addr32[3] ^ a2->s6_addr32[3]) & m->s6_addr32[3]));
}

static inline void ipv6_addr_copy(struct in6_addr *a1, const struct in6_addr *a2)
{
	memcpy(a1, a2, sizeof(struct in6_addr));
    1bbc:	80 01 00 10 	lwz     r0,16(r1)
    1bc0:	81 21 00 14 	lwz     r9,20(r1)
    1bc4:	81 09 00 00 	lwz     r8,0(r9)
    1bc8:	81 49 00 04 	lwz     r10,4(r9)
    1bcc:	81 69 00 08 	lwz     r11,8(r9)
    1bd0:	81 29 00 0c 	lwz     r9,12(r9)
    1bd4:	7c 07 03 78 	mr      r7,r0
    1bd8:	91 07 00 00 	stw     r8,0(r7)
    1bdc:	7c 08 03 78 	mr      r8,r0
    1be0:	91 48 00 04 	stw     r10,4(r8)
    1be4:	7c 0a 03 78 	mr      r10,r0
    1be8:	91 6a 00 08 	stw     r11,8(r10)
    1bec:	7c 0b 03 78 	mr      r11,r0
    1bf0:	91 2b 00 0c 	stw     r9,12(r11)
		sin6->sin6_scope_id = 0;
    1bf4:	80 01 00 0c 	lwz     r0,12(r1)
    1bf8:	39 20 00 00 	li      r9,0
    1bfc:	7c 07 03 78 	mr      r7,r0
    1c00:	91 27 00 18 	stw     r9,24(r7)
		return 128;
    1c04:	38 00 00 80 	li      r0,128
    1c08:	48 00 00 08 	b       1c10 <pfkey_sockaddr_fill+0x140>
	    }
#endif
	}
	return 0;
    1c0c:	38 00 00 00 	li      r0,0
}
    1c10:	7c 03 03 78 	mr      r3,r0
    1c14:	38 21 00 30 	addi    r1,r1,48
    1c18:	4e 80 00 20 	blr

00001c1c <__pfkey_xfrm_state2msg>:

static struct sk_buff *__pfkey_xfrm_state2msg(struct xfrm_state *x,
					      int add_keys, int hsc)
{
    1c1c:	94 21 ff 40 	stwu    r1,-192(r1)
    1c20:	7c 08 02 a6 	mflr    r0
    1c24:	90 01 00 c4 	stw     r0,196(r1)
    1c28:	90 61 00 a8 	stw     r3,168(r1)
    1c2c:	90 81 00 ac 	stw     r4,172(r1)
    1c30:	90 a1 00 b0 	stw     r5,176(r1)
	struct sadb_address *addr;
	struct sadb_key *key;
	struct sadb_x_sa2 *sa2;
	struct sadb_x_sec_ctx *sec_ctx;
	struct xfrm_sec_ctx *xfrm_ctx;
	int ctx_size = 0;
    1c34:	38 00 00 00 	li      r0,0
    1c38:	90 01 00 08 	stw     r0,8(r1)
	int size;
	int auth_key_size = 0;
    1c3c:	38 00 00 00 	li      r0,0
    1c40:	90 01 00 10 	stw     r0,16(r1)
	int encrypt_key_size = 0;
    1c44:	38 00 00 00 	li      r0,0
    1c48:	90 01 00 14 	stw     r0,20(r1)
	int sockaddr_size;
	struct xfrm_encap_tmpl *natt = NULL;
    1c4c:	38 00 00 00 	li      r0,0
    1c50:	90 01 00 18 	stw     r0,24(r1)
	int mode;

	/* address family check */
	sockaddr_size = pfkey_sockaddr_size(x->props.family);
    1c54:	80 01 00 a8 	lwz     r0,168(r1)
    1c58:	7c 08 03 78 	mr      r8,r0
    1c5c:	a0 08 00 96 	lhz     r0,150(r8)
    1c60:	54 00 04 3e 	clrlwi  r0,r0,16
    1c64:	7c 03 03 78 	mr      r3,r0
    1c68:	4b ff fe 0d 	bl      1a74 <pfkey_sockaddr_size>
    1c6c:	90 61 00 1c 	stw     r3,28(r1)
	if (!sockaddr_size)
    1c70:	80 01 00 1c 	lwz     r0,28(r1)
    1c74:	2f 80 00 00 	cmpwi   cr7,r0,0
    1c78:	40 9e 00 14 	bne-    cr7,1c8c <__pfkey_xfrm_state2msg+0x70>
    1c7c:	38 00 ff ea 	li      r0,-22
    1c80:	90 01 00 5c 	stw     r0,92(r1)

#define IS_ERR_VALUE(x) unlikely((x) >= (unsigned long)-MAX_ERRNO)

static inline void * __must_check ERR_PTR(long error)
{
	return (void *) error;
    1c84:	80 01 00 5c 	lwz     r0,92(r1)
		return ERR_PTR(-EINVAL);
    1c88:	48 00 11 10 	b       2d98 <__pfkey_xfrm_state2msg+0x117c>

	/* base, SA, (lifetime (HSC),) address(SD), (address(P),)
	   key(AE), (identity(SD),) (sensitivity)> */
	size = sizeof(struct sadb_msg) +sizeof(struct sadb_sa) +
		sizeof(struct sadb_lifetime) +
		((hsc & 1) ? sizeof(struct sadb_lifetime) : 0) +
    1c8c:	80 01 00 b0 	lwz     r0,176(r1)
    1c90:	54 00 07 fe 	clrlwi  r0,r0,31
    1c94:	54 00 06 3e 	clrlwi  r0,r0,24
		return ERR_PTR(-EINVAL);

	/* base, SA, (lifetime (HSC),) address(SD), (address(P),)
	   key(AE), (identity(SD),) (sensitivity)> */
	size = sizeof(struct sadb_msg) +sizeof(struct sadb_sa) +
		sizeof(struct sadb_lifetime) +
    1c98:	2f 80 00 00 	cmpwi   cr7,r0,0
    1c9c:	41 9e 00 0c 	beq-    cr7,1ca8 <__pfkey_xfrm_state2msg+0x8c>
    1ca0:	39 20 00 60 	li      r9,96
    1ca4:	48 00 00 08 	b       1cac <__pfkey_xfrm_state2msg+0x90>
    1ca8:	39 20 00 40 	li      r9,64
		((hsc & 1) ? sizeof(struct sadb_lifetime) : 0) +
		((hsc & 2) ? sizeof(struct sadb_lifetime) : 0) +
    1cac:	80 01 00 b0 	lwz     r0,176(r1)
    1cb0:	54 00 07 bc 	rlwinm  r0,r0,0,30,30
    1cb4:	2f 80 00 00 	cmpwi   cr7,r0,0
    1cb8:	41 9e 00 0c 	beq-    cr7,1cc4 <__pfkey_xfrm_state2msg+0xa8>
    1cbc:	38 00 00 20 	li      r0,32
    1cc0:	48 00 00 08 	b       1cc8 <__pfkey_xfrm_state2msg+0xac>
    1cc4:	38 00 00 00 	li      r0,0

	/* base, SA, (lifetime (HSC),) address(SD), (address(P),)
	   key(AE), (identity(SD),) (sensitivity)> */
	size = sizeof(struct sadb_msg) +sizeof(struct sadb_sa) +
		sizeof(struct sadb_lifetime) +
		((hsc & 1) ? sizeof(struct sadb_lifetime) : 0) +
    1cc8:	7d 29 02 14 	add     r9,r9,r0
		((hsc & 2) ? sizeof(struct sadb_lifetime) : 0) +
			sizeof(struct sadb_address)*2 +
				sockaddr_size*2 +
    1ccc:	80 01 00 1c 	lwz     r0,28(r1)
    1cd0:	54 00 08 3c 	rlwinm  r0,r0,1,0,30
	   key(AE), (identity(SD),) (sensitivity)> */
	size = sizeof(struct sadb_msg) +sizeof(struct sadb_sa) +
		sizeof(struct sadb_lifetime) +
		((hsc & 1) ? sizeof(struct sadb_lifetime) : 0) +
		((hsc & 2) ? sizeof(struct sadb_lifetime) : 0) +
			sizeof(struct sadb_address)*2 +
    1cd4:	7c 09 02 14 	add     r0,r9,r0
				sockaddr_size*2 +
    1cd8:	30 00 00 20 	addic   r0,r0,32
	if (!sockaddr_size)
		return ERR_PTR(-EINVAL);

	/* base, SA, (lifetime (HSC),) address(SD), (address(P),)
	   key(AE), (identity(SD),) (sensitivity)> */
	size = sizeof(struct sadb_msg) +sizeof(struct sadb_sa) +
    1cdc:	90 01 00 0c 	stw     r0,12(r1)
		((hsc & 2) ? sizeof(struct sadb_lifetime) : 0) +
			sizeof(struct sadb_address)*2 +
				sockaddr_size*2 +
					sizeof(struct sadb_x_sa2);

	if ((xfrm_ctx = x->security)) {
    1ce0:	80 01 00 a8 	lwz     r0,168(r1)
    1ce4:	7c 09 03 78 	mr      r9,r0
    1ce8:	80 09 01 dc 	lwz     r0,476(r9)
    1cec:	90 01 00 20 	stw     r0,32(r1)
    1cf0:	80 01 00 20 	lwz     r0,32(r1)
    1cf4:	2f 80 00 00 	cmpwi   cr7,r0,0
    1cf8:	41 9e 00 38 	beq-    cr7,1d30 <__pfkey_xfrm_state2msg+0x114>
		ctx_size = PFKEY_ALIGN8(xfrm_ctx->ctx_len);
    1cfc:	80 01 00 20 	lwz     r0,32(r1)
    1d00:	7c 0a 03 78 	mr      r10,r0
    1d04:	a0 0a 00 02 	lhz     r0,2(r10)
    1d08:	54 00 04 3e 	clrlwi  r0,r0,16
    1d0c:	30 00 ff ff 	addic   r0,r0,-1
    1d10:	60 00 00 07 	ori     r0,r0,7
    1d14:	30 00 00 01 	addic   r0,r0,1
    1d18:	90 01 00 08 	stw     r0,8(r1)
		size += sizeof(struct sadb_x_sec_ctx) + ctx_size;
    1d1c:	81 21 00 08 	lwz     r9,8(r1)
    1d20:	80 01 00 0c 	lwz     r0,12(r1)
    1d24:	7c 09 02 14 	add     r0,r9,r0
    1d28:	30 00 00 08 	addic   r0,r0,8
    1d2c:	90 01 00 0c 	stw     r0,12(r1)
	}

	/* identity & sensitivity */
	if (xfrm_addr_cmp(&x->sel.saddr, &x->props.saddr, x->props.family))
    1d30:	80 01 00 a8 	lwz     r0,168(r1)
    1d34:	31 60 00 44 	addic   r11,r0,68
    1d38:	80 01 00 a8 	lwz     r0,168(r1)
    1d3c:	31 20 00 98 	addic   r9,r0,152
    1d40:	80 01 00 a8 	lwz     r0,168(r1)
    1d44:	7c 08 03 78 	mr      r8,r0
    1d48:	a0 08 00 96 	lhz     r0,150(r8)
    1d4c:	54 00 04 3e 	clrlwi  r0,r0,16
    1d50:	91 61 00 60 	stw     r11,96(r1)
    1d54:	91 21 00 64 	stw     r9,100(r1)
    1d58:	90 01 00 68 	stw     r0,104(r1)
			      unsigned int);

static inline int xfrm_addr_cmp(xfrm_address_t *a, xfrm_address_t *b,
				int family)
{
	switch (family) {
    1d5c:	80 01 00 68 	lwz     r0,104(r1)
    1d60:	2f 80 00 0a 	cmpwi   cr7,r0,10
    1d64:	41 9e 00 24 	beq-    cr7,1d88 <__pfkey_xfrm_state2msg+0x16c>
	default:
	case AF_INET:
		return (__force u32)a->a4 - (__force u32)b->a4;
    1d68:	80 01 00 60 	lwz     r0,96(r1)
    1d6c:	7c 0a 03 78 	mr      r10,r0
    1d70:	81 2a 00 00 	lwz     r9,0(r10)
    1d74:	80 01 00 64 	lwz     r0,100(r1)
    1d78:	7c 0b 03 78 	mr      r11,r0
    1d7c:	80 0b 00 00 	lwz     r0,0(r11)
    1d80:	7c 00 48 50 	subf    r0,r0,r9
    1d84:	48 00 00 28 	b       1dac <__pfkey_xfrm_state2msg+0x190>
    1d88:	80 01 00 60 	lwz     r0,96(r1)
    1d8c:	90 01 00 6c 	stw     r0,108(r1)
    1d90:	80 01 00 64 	lwz     r0,100(r1)
    1d94:	90 01 00 70 	stw     r0,112(r1)
	return __ipv6_addr_src_scope(__ipv6_addr_type(addr));
}

static inline int ipv6_addr_cmp(const struct in6_addr *a1, const struct in6_addr *a2)
{
	return memcmp(a1, a2, sizeof(struct in6_addr));
    1d98:	80 61 00 6c 	lwz     r3,108(r1)
    1d9c:	80 81 00 70 	lwz     r4,112(r1)
    1da0:	38 a0 00 10 	li      r5,16
    1da4:	48 00 00 01 	bl      1da4 <__pfkey_xfrm_state2msg+0x188>
    1da8:	7c 60 1b 78 	mr      r0,r3
    1dac:	2f 80 00 00 	cmpwi   cr7,r0,0
    1db0:	41 9e 00 18 	beq-    cr7,1dc8 <__pfkey_xfrm_state2msg+0x1ac>
		size += sizeof(struct sadb_address) + sockaddr_size;
    1db4:	81 21 00 1c 	lwz     r9,28(r1)
    1db8:	80 01 00 0c 	lwz     r0,12(r1)
    1dbc:	7c 09 02 14 	add     r0,r9,r0
    1dc0:	30 00 00 08 	addic   r0,r0,8
    1dc4:	90 01 00 0c 	stw     r0,12(r1)

	if (add_keys) {
    1dc8:	80 01 00 ac 	lwz     r0,172(r1)
    1dcc:	2f 80 00 00 	cmpwi   cr7,r0,0
    1dd0:	41 9e 00 e4 	beq-    cr7,1eb4 <__pfkey_xfrm_state2msg+0x298>
		if (x->aalg && x->aalg->alg_key_len) {
    1dd4:	80 01 00 a8 	lwz     r0,168(r1)
    1dd8:	7c 08 03 78 	mr      r8,r0
    1ddc:	80 08 00 f0 	lwz     r0,240(r8)
    1de0:	2f 80 00 00 	cmpwi   cr7,r0,0
    1de4:	41 9e 00 60 	beq-    cr7,1e44 <__pfkey_xfrm_state2msg+0x228>
    1de8:	80 01 00 a8 	lwz     r0,168(r1)
    1dec:	7c 09 03 78 	mr      r9,r0
    1df0:	80 09 00 f0 	lwz     r0,240(r9)
    1df4:	7c 0a 03 78 	mr      r10,r0
    1df8:	80 0a 00 40 	lwz     r0,64(r10)
    1dfc:	2f 80 00 00 	cmpwi   cr7,r0,0
    1e00:	41 9e 00 44 	beq-    cr7,1e44 <__pfkey_xfrm_state2msg+0x228>
			auth_key_size =
				PFKEY_ALIGN8((x->aalg->alg_key_len + 7) / 8);
    1e04:	80 01 00 a8 	lwz     r0,168(r1)
    1e08:	7c 0b 03 78 	mr      r11,r0
    1e0c:	80 0b 00 f0 	lwz     r0,240(r11)
    1e10:	7c 08 03 78 	mr      r8,r0
    1e14:	80 08 00 40 	lwz     r0,64(r8)
    1e18:	30 00 00 07 	addic   r0,r0,7
    1e1c:	54 00 e8 fe 	rlwinm  r0,r0,29,3,31
    1e20:	30 00 ff ff 	addic   r0,r0,-1
    1e24:	60 00 00 07 	ori     r0,r0,7
    1e28:	30 00 00 01 	addic   r0,r0,1
	if (xfrm_addr_cmp(&x->sel.saddr, &x->props.saddr, x->props.family))
		size += sizeof(struct sadb_address) + sockaddr_size;

	if (add_keys) {
		if (x->aalg && x->aalg->alg_key_len) {
			auth_key_size =
    1e2c:	90 01 00 10 	stw     r0,16(r1)
				PFKEY_ALIGN8((x->aalg->alg_key_len + 7) / 8);
			size += sizeof(struct sadb_key) + auth_key_size;
    1e30:	81 21 00 10 	lwz     r9,16(r1)
    1e34:	80 01 00 0c 	lwz     r0,12(r1)
    1e38:	7c 09 02 14 	add     r0,r9,r0
    1e3c:	30 00 00 08 	addic   r0,r0,8
    1e40:	90 01 00 0c 	stw     r0,12(r1)
		}
		if (x->ealg && x->ealg->alg_key_len) {
    1e44:	80 01 00 a8 	lwz     r0,168(r1)
    1e48:	7c 09 03 78 	mr      r9,r0
    1e4c:	80 09 00 f4 	lwz     r0,244(r9)
    1e50:	2f 80 00 00 	cmpwi   cr7,r0,0
    1e54:	41 9e 00 60 	beq-    cr7,1eb4 <__pfkey_xfrm_state2msg+0x298>
    1e58:	80 01 00 a8 	lwz     r0,168(r1)
    1e5c:	7c 0a 03 78 	mr      r10,r0
    1e60:	80 0a 00 f4 	lwz     r0,244(r10)
    1e64:	7c 0b 03 78 	mr      r11,r0
    1e68:	80 0b 00 40 	lwz     r0,64(r11)
    1e6c:	2f 80 00 00 	cmpwi   cr7,r0,0
    1e70:	41 9e 00 44 	beq-    cr7,1eb4 <__pfkey_xfrm_state2msg+0x298>
			encrypt_key_size =
				PFKEY_ALIGN8((x->ealg->alg_key_len+7) / 8);
    1e74:	80 01 00 a8 	lwz     r0,168(r1)
    1e78:	7c 08 03 78 	mr      r8,r0
    1e7c:	80 08 00 f4 	lwz     r0,244(r8)
    1e80:	7c 09 03 78 	mr      r9,r0
    1e84:	80 09 00 40 	lwz     r0,64(r9)
    1e88:	30 00 00 07 	addic   r0,r0,7
    1e8c:	54 00 e8 fe 	rlwinm  r0,r0,29,3,31
    1e90:	30 00 ff ff 	addic   r0,r0,-1
    1e94:	60 00 00 07 	ori     r0,r0,7
    1e98:	30 00 00 01 	addic   r0,r0,1
			auth_key_size =
				PFKEY_ALIGN8((x->aalg->alg_key_len + 7) / 8);
			size += sizeof(struct sadb_key) + auth_key_size;
		}
		if (x->ealg && x->ealg->alg_key_len) {
			encrypt_key_size =
    1e9c:	90 01 00 14 	stw     r0,20(r1)
				PFKEY_ALIGN8((x->ealg->alg_key_len+7) / 8);
			size += sizeof(struct sadb_key) + encrypt_key_size;
    1ea0:	81 21 00 14 	lwz     r9,20(r1)
    1ea4:	80 01 00 0c 	lwz     r0,12(r1)
    1ea8:	7c 09 02 14 	add     r0,r9,r0
    1eac:	30 00 00 08 	addic   r0,r0,8
    1eb0:	90 01 00 0c 	stw     r0,12(r1)
		}
	}
	if (x->encap)
    1eb4:	80 01 00 a8 	lwz     r0,168(r1)
    1eb8:	7c 0a 03 78 	mr      r10,r0
    1ebc:	80 0a 01 00 	lwz     r0,256(r10)
    1ec0:	2f 80 00 00 	cmpwi   cr7,r0,0
    1ec4:	41 9e 00 14 	beq-    cr7,1ed8 <__pfkey_xfrm_state2msg+0x2bc>
		natt = x->encap;
    1ec8:	80 01 00 a8 	lwz     r0,168(r1)
    1ecc:	7c 0b 03 78 	mr      r11,r0
    1ed0:	80 0b 01 00 	lwz     r0,256(r11)
    1ed4:	90 01 00 18 	stw     r0,24(r1)

	if (natt && natt->encap_type) {
    1ed8:	80 01 00 18 	lwz     r0,24(r1)
    1edc:	2f 80 00 00 	cmpwi   cr7,r0,0
    1ee0:	41 9e 00 40 	beq-    cr7,1f20 <__pfkey_xfrm_state2msg+0x304>
    1ee4:	80 01 00 18 	lwz     r0,24(r1)
    1ee8:	7c 08 03 78 	mr      r8,r0
    1eec:	a0 08 00 00 	lhz     r0,0(r8)
    1ef0:	54 00 04 3e 	clrlwi  r0,r0,16
    1ef4:	2f 80 00 00 	cmpwi   cr7,r0,0
    1ef8:	41 9e 00 28 	beq-    cr7,1f20 <__pfkey_xfrm_state2msg+0x304>
		size += sizeof(struct sadb_x_nat_t_type);
    1efc:	80 01 00 0c 	lwz     r0,12(r1)
    1f00:	30 00 00 08 	addic   r0,r0,8
    1f04:	90 01 00 0c 	stw     r0,12(r1)
		size += sizeof(struct sadb_x_nat_t_port);
    1f08:	80 01 00 0c 	lwz     r0,12(r1)
    1f0c:	30 00 00 08 	addic   r0,r0,8
    1f10:	90 01 00 0c 	stw     r0,12(r1)
		size += sizeof(struct sadb_x_nat_t_port);
    1f14:	80 01 00 0c 	lwz     r0,12(r1)
    1f18:	30 00 00 08 	addic   r0,r0,8
    1f1c:	90 01 00 0c 	stw     r0,12(r1)
	}

	skb =  alloc_skb(size + 16, GFP_ATOMIC);
    1f20:	80 01 00 0c 	lwz     r0,12(r1)
    1f24:	30 00 00 10 	addic   r0,r0,16
    1f28:	90 01 00 74 	stw     r0,116(r1)
    1f2c:	38 00 00 20 	li      r0,32
    1f30:	90 01 00 78 	stw     r0,120(r1)
    1f34:	80 61 00 74 	lwz     r3,116(r1)
    1f38:	80 81 00 78 	lwz     r4,120(r1)
    1f3c:	38 a0 00 00 	li      r5,0
    1f40:	38 c0 ff ff 	li      r6,-1
    1f44:	48 00 00 01 	bl      1f44 <__pfkey_xfrm_state2msg+0x328>
    1f48:	7c 60 1b 78 	mr      r0,r3
    1f4c:	90 01 00 24 	stw     r0,36(r1)
	if (skb == NULL)
    1f50:	80 01 00 24 	lwz     r0,36(r1)
    1f54:	2f 80 00 00 	cmpwi   cr7,r0,0
    1f58:	40 9e 00 14 	bne-    cr7,1f6c <__pfkey_xfrm_state2msg+0x350>
    1f5c:	38 00 ff 97 	li      r0,-105
    1f60:	90 01 00 7c 	stw     r0,124(r1)
    1f64:	80 01 00 7c 	lwz     r0,124(r1)
		return ERR_PTR(-ENOBUFS);
    1f68:	48 00 0e 30 	b       2d98 <__pfkey_xfrm_state2msg+0x117c>

	/* call should fill header later */
	hdr = (struct sadb_msg *) skb_put(skb, sizeof(struct sadb_msg));
    1f6c:	80 61 00 24 	lwz     r3,36(r1)
    1f70:	38 80 00 10 	li      r4,16
    1f74:	48 00 00 01 	bl      1f74 <__pfkey_xfrm_state2msg+0x358>
    1f78:	90 61 00 28 	stw     r3,40(r1)
	memset(hdr, 0, size);	/* XXX do we need this ? */
    1f7c:	80 01 00 0c 	lwz     r0,12(r1)
    1f80:	81 21 00 28 	lwz     r9,40(r1)
    1f84:	7d 23 4b 78 	mr      r3,r9
    1f88:	38 80 00 00 	li      r4,0
    1f8c:	7c 05 03 78 	mr      r5,r0
    1f90:	48 00 00 01 	bl      1f90 <__pfkey_xfrm_state2msg+0x374>
	hdr->sadb_msg_len = size / sizeof(uint64_t);
    1f94:	80 01 00 0c 	lwz     r0,12(r1)
    1f98:	54 00 e8 fe 	rlwinm  r0,r0,29,3,31
    1f9c:	54 09 04 3e 	clrlwi  r9,r0,16
    1fa0:	80 01 00 28 	lwz     r0,40(r1)
    1fa4:	7c 0a 03 78 	mr      r10,r0
    1fa8:	b1 2a 00 04 	sth     r9,4(r10)

	/* sa */
	sa = (struct sadb_sa *)  skb_put(skb, sizeof(struct sadb_sa));
    1fac:	80 61 00 24 	lwz     r3,36(r1)
    1fb0:	38 80 00 10 	li      r4,16
    1fb4:	48 00 00 01 	bl      1fb4 <__pfkey_xfrm_state2msg+0x398>
    1fb8:	90 61 00 2c 	stw     r3,44(r1)
	sa->sadb_sa_len = sizeof(struct sadb_sa)/sizeof(uint64_t);
    1fbc:	80 01 00 2c 	lwz     r0,44(r1)
    1fc0:	39 20 00 02 	li      r9,2
    1fc4:	7c 0b 03 78 	mr      r11,r0
    1fc8:	b1 2b 00 00 	sth     r9,0(r11)
	sa->sadb_sa_exttype = SADB_EXT_SA;
    1fcc:	80 01 00 2c 	lwz     r0,44(r1)
    1fd0:	39 20 00 01 	li      r9,1
    1fd4:	7c 08 03 78 	mr      r8,r0
    1fd8:	b1 28 00 02 	sth     r9,2(r8)
	sa->sadb_sa_spi = x->id.spi;
    1fdc:	80 01 00 a8 	lwz     r0,168(r1)
    1fe0:	7c 0a 03 78 	mr      r10,r0
    1fe4:	81 2a 00 2c 	lwz     r9,44(r10)
    1fe8:	80 01 00 2c 	lwz     r0,44(r1)
    1fec:	7c 0b 03 78 	mr      r11,r0
    1ff0:	91 2b 00 04 	stw     r9,4(r11)
	sa->sadb_sa_replay = x->props.replay_window;
    1ff4:	80 01 00 a8 	lwz     r0,168(r1)
    1ff8:	7c 08 03 78 	mr      r8,r0
    1ffc:	88 08 00 91 	lbz     r0,145(r8)
    2000:	54 09 06 3e 	clrlwi  r9,r0,24
    2004:	80 01 00 2c 	lwz     r0,44(r1)
    2008:	7c 0a 03 78 	mr      r10,r0
    200c:	99 2a 00 08 	stb     r9,8(r10)
	switch (x->km.state) {
    2010:	80 01 00 a8 	lwz     r0,168(r1)
    2014:	7c 0b 03 78 	mr      r11,r0
    2018:	88 0b 00 84 	lbz     r0,132(r11)
    201c:	54 00 06 3e 	clrlwi  r0,r0,24
    2020:	2f 80 00 01 	cmpwi   cr7,r0,1
    2024:	41 9e 00 3c 	beq-    cr7,2060 <__pfkey_xfrm_state2msg+0x444>
    2028:	2f 80 00 02 	cmpwi   cr7,r0,2
    202c:	40 9e 00 48 	bne-    cr7,2074 <__pfkey_xfrm_state2msg+0x458>
	case XFRM_STATE_VALID:
		sa->sadb_sa_state = x->km.dying ?
    2030:	80 01 00 a8 	lwz     r0,168(r1)
    2034:	7c 08 03 78 	mr      r8,r0
    2038:	88 08 00 85 	lbz     r0,133(r8)
    203c:	54 00 06 3e 	clrlwi  r0,r0,24
    2040:	2f 80 00 00 	cmpwi   cr7,r0,0
    2044:	41 9e 00 0c 	beq-    cr7,2050 <__pfkey_xfrm_state2msg+0x434>
    2048:	38 00 00 02 	li      r0,2
    204c:	48 00 00 08 	b       2054 <__pfkey_xfrm_state2msg+0x438>
    2050:	38 00 00 01 	li      r0,1
    2054:	81 21 00 2c 	lwz     r9,44(r1)
    2058:	98 09 00 09 	stb     r0,9(r9)
			SADB_SASTATE_DYING : SADB_SASTATE_MATURE;
		break;
    205c:	48 00 00 2c 	b       2088 <__pfkey_xfrm_state2msg+0x46c>
	case XFRM_STATE_ACQ:
		sa->sadb_sa_state = SADB_SASTATE_LARVAL;
    2060:	80 01 00 2c 	lwz     r0,44(r1)
    2064:	39 20 00 00 	li      r9,0
    2068:	7c 0a 03 78 	mr      r10,r0
    206c:	99 2a 00 09 	stb     r9,9(r10)
		break;
    2070:	48 00 00 18 	b       2088 <__pfkey_xfrm_state2msg+0x46c>
	default:
		sa->sadb_sa_state = SADB_SASTATE_DEAD;
    2074:	80 01 00 2c 	lwz     r0,44(r1)
    2078:	39 20 00 03 	li      r9,3
    207c:	7c 0b 03 78 	mr      r11,r0
    2080:	99 2b 00 09 	stb     r9,9(r11)
		break;
    2084:	60 00 00 00 	nop
	}
	sa->sadb_sa_auth = 0;
    2088:	80 01 00 2c 	lwz     r0,44(r1)
    208c:	39 20 00 00 	li      r9,0
    2090:	7c 08 03 78 	mr      r8,r0
    2094:	99 28 00 0a 	stb     r9,10(r8)
	if (x->aalg) {
    2098:	80 01 00 a8 	lwz     r0,168(r1)
    209c:	7c 09 03 78 	mr      r9,r0
    20a0:	80 09 00 f0 	lwz     r0,240(r9)
    20a4:	2f 80 00 00 	cmpwi   cr7,r0,0
    20a8:	41 9e 00 4c 	beq-    cr7,20f4 <__pfkey_xfrm_state2msg+0x4d8>
		struct xfrm_algo_desc *a = xfrm_aalg_get_byname(x->aalg->alg_name, 0);
    20ac:	80 01 00 a8 	lwz     r0,168(r1)
    20b0:	7c 0a 03 78 	mr      r10,r0
    20b4:	80 0a 00 f0 	lwz     r0,240(r10)
    20b8:	7c 03 03 78 	mr      r3,r0
    20bc:	38 80 00 00 	li      r4,0
    20c0:	48 00 00 01 	bl      20c0 <__pfkey_xfrm_state2msg+0x4a4>
    20c4:	90 61 00 30 	stw     r3,48(r1)
		sa->sadb_sa_auth = a ? a->desc.sadb_alg_id : 0;
    20c8:	80 01 00 30 	lwz     r0,48(r1)
    20cc:	2f 80 00 00 	cmpwi   cr7,r0,0
    20d0:	41 9e 00 18 	beq-    cr7,20e8 <__pfkey_xfrm_state2msg+0x4cc>
    20d4:	80 01 00 30 	lwz     r0,48(r1)
    20d8:	7c 0b 03 78 	mr      r11,r0
    20dc:	88 0b 00 0e 	lbz     r0,14(r11)
    20e0:	54 00 06 3e 	clrlwi  r0,r0,24
    20e4:	48 00 00 08 	b       20ec <__pfkey_xfrm_state2msg+0x4d0>
    20e8:	38 00 00 00 	li      r0,0
    20ec:	81 21 00 2c 	lwz     r9,44(r1)
    20f0:	98 09 00 0a 	stb     r0,10(r9)
	}
	sa->sadb_sa_encrypt = 0;
    20f4:	80 01 00 2c 	lwz     r0,44(r1)
    20f8:	39 20 00 00 	li      r9,0
    20fc:	7c 08 03 78 	mr      r8,r0
    2100:	99 28 00 0b 	stb     r9,11(r8)
	BUG_ON(x->ealg && x->calg);
    2104:	80 01 00 a8 	lwz     r0,168(r1)
    2108:	7c 09 03 78 	mr      r9,r0
    210c:	80 09 00 f4 	lwz     r0,244(r9)
    2110:	2f 80 00 00 	cmpwi   cr7,r0,0
    2114:	41 9e 00 20 	beq-    cr7,2134 <__pfkey_xfrm_state2msg+0x518>
    2118:	80 01 00 a8 	lwz     r0,168(r1)
    211c:	7c 0a 03 78 	mr      r10,r0
    2120:	80 0a 00 f8 	lwz     r0,248(r10)
    2124:	2f 80 00 00 	cmpwi   cr7,r0,0
    2128:	41 9e 00 0c 	beq-    cr7,2134 <__pfkey_xfrm_state2msg+0x518>
    212c:	38 00 00 01 	li      r0,1
    2130:	48 00 00 08 	b       2138 <__pfkey_xfrm_state2msg+0x51c>
    2134:	38 00 00 00 	li      r0,0
    2138:	0f 00 00 00 	twnei   r0,0
	if (x->ealg) {
    213c:	80 01 00 a8 	lwz     r0,168(r1)
    2140:	7c 0b 03 78 	mr      r11,r0
    2144:	80 0b 00 f4 	lwz     r0,244(r11)
    2148:	2f 80 00 00 	cmpwi   cr7,r0,0
    214c:	41 9e 00 4c 	beq-    cr7,2198 <__pfkey_xfrm_state2msg+0x57c>
		struct xfrm_algo_desc *a = xfrm_ealg_get_byname(x->ealg->alg_name, 0);
    2150:	80 01 00 a8 	lwz     r0,168(r1)
    2154:	7c 08 03 78 	mr      r8,r0
    2158:	80 08 00 f4 	lwz     r0,244(r8)
    215c:	7c 03 03 78 	mr      r3,r0
    2160:	38 80 00 00 	li      r4,0
    2164:	48 00 00 01 	bl      2164 <__pfkey_xfrm_state2msg+0x548>
    2168:	90 61 00 34 	stw     r3,52(r1)
		sa->sadb_sa_encrypt = a ? a->desc.sadb_alg_id : 0;
    216c:	80 01 00 34 	lwz     r0,52(r1)
    2170:	2f 80 00 00 	cmpwi   cr7,r0,0
    2174:	41 9e 00 18 	beq-    cr7,218c <__pfkey_xfrm_state2msg+0x570>
    2178:	80 01 00 34 	lwz     r0,52(r1)
    217c:	7c 09 03 78 	mr      r9,r0
    2180:	88 09 00 0e 	lbz     r0,14(r9)
    2184:	54 00 06 3e 	clrlwi  r0,r0,24
    2188:	48 00 00 08 	b       2190 <__pfkey_xfrm_state2msg+0x574>
    218c:	38 00 00 00 	li      r0,0
    2190:	81 21 00 2c 	lwz     r9,44(r1)
    2194:	98 09 00 0b 	stb     r0,11(r9)
	}
	/* KAME compatible: sadb_sa_encrypt is overloaded with calg id */
	if (x->calg) {
    2198:	80 01 00 a8 	lwz     r0,168(r1)
    219c:	7c 0a 03 78 	mr      r10,r0
    21a0:	80 0a 00 f8 	lwz     r0,248(r10)
    21a4:	2f 80 00 00 	cmpwi   cr7,r0,0
    21a8:	41 9e 00 4c 	beq-    cr7,21f4 <__pfkey_xfrm_state2msg+0x5d8>
		struct xfrm_algo_desc *a = xfrm_calg_get_byname(x->calg->alg_name, 0);
    21ac:	80 01 00 a8 	lwz     r0,168(r1)
    21b0:	7c 0b 03 78 	mr      r11,r0
    21b4:	80 0b 00 f8 	lwz     r0,248(r11)
    21b8:	7c 03 03 78 	mr      r3,r0
    21bc:	38 80 00 00 	li      r4,0
    21c0:	48 00 00 01 	bl      21c0 <__pfkey_xfrm_state2msg+0x5a4>
    21c4:	90 61 00 38 	stw     r3,56(r1)
		sa->sadb_sa_encrypt = a ? a->desc.sadb_alg_id : 0;
    21c8:	80 01 00 38 	lwz     r0,56(r1)
    21cc:	2f 80 00 00 	cmpwi   cr7,r0,0
    21d0:	41 9e 00 18 	beq-    cr7,21e8 <__pfkey_xfrm_state2msg+0x5cc>
    21d4:	80 01 00 38 	lwz     r0,56(r1)
    21d8:	7c 08 03 78 	mr      r8,r0
    21dc:	88 08 00 0e 	lbz     r0,14(r8)
    21e0:	54 00 06 3e 	clrlwi  r0,r0,24
    21e4:	48 00 00 08 	b       21ec <__pfkey_xfrm_state2msg+0x5d0>
    21e8:	38 00 00 00 	li      r0,0
    21ec:	81 21 00 2c 	lwz     r9,44(r1)
    21f0:	98 09 00 0b 	stb     r0,11(r9)
	}

	sa->sadb_sa_flags = 0;
    21f4:	80 01 00 2c 	lwz     r0,44(r1)
    21f8:	39 20 00 00 	li      r9,0
    21fc:	7c 0a 03 78 	mr      r10,r0
    2200:	91 2a 00 0c 	stw     r9,12(r10)
	if (x->props.flags & XFRM_STATE_NOECN)
    2204:	80 01 00 a8 	lwz     r0,168(r1)
    2208:	7c 0b 03 78 	mr      r11,r0
    220c:	88 0b 00 95 	lbz     r0,149(r11)
    2210:	54 00 06 3e 	clrlwi  r0,r0,24
    2214:	54 00 07 fe 	clrlwi  r0,r0,31
    2218:	54 00 06 3e 	clrlwi  r0,r0,24
    221c:	2f 80 00 00 	cmpwi   cr7,r0,0
    2220:	41 9e 00 20 	beq-    cr7,2240 <__pfkey_xfrm_state2msg+0x624>
		sa->sadb_sa_flags |= SADB_SAFLAGS_NOECN;
    2224:	80 01 00 2c 	lwz     r0,44(r1)
    2228:	7c 08 03 78 	mr      r8,r0
    222c:	80 08 00 0c 	lwz     r0,12(r8)
    2230:	64 09 80 00 	oris    r9,r0,32768
    2234:	80 01 00 2c 	lwz     r0,44(r1)
    2238:	7c 0a 03 78 	mr      r10,r0
    223c:	91 2a 00 0c 	stw     r9,12(r10)
	if (x->props.flags & XFRM_STATE_DECAP_DSCP)
    2240:	80 01 00 a8 	lwz     r0,168(r1)
    2244:	7c 0b 03 78 	mr      r11,r0
    2248:	88 0b 00 95 	lbz     r0,149(r11)
    224c:	54 00 06 3e 	clrlwi  r0,r0,24
    2250:	54 00 07 bc 	rlwinm  r0,r0,0,30,30
    2254:	2f 80 00 00 	cmpwi   cr7,r0,0
    2258:	41 9e 00 20 	beq-    cr7,2278 <__pfkey_xfrm_state2msg+0x65c>
		sa->sadb_sa_flags |= SADB_SAFLAGS_DECAP_DSCP;
    225c:	80 01 00 2c 	lwz     r0,44(r1)
    2260:	7c 08 03 78 	mr      r8,r0
    2264:	80 08 00 0c 	lwz     r0,12(r8)
    2268:	64 09 40 00 	oris    r9,r0,16384
    226c:	80 01 00 2c 	lwz     r0,44(r1)
    2270:	7c 0a 03 78 	mr      r10,r0
    2274:	91 2a 00 0c 	stw     r9,12(r10)
	if (x->props.flags & XFRM_STATE_NOPMTUDISC)
    2278:	80 01 00 a8 	lwz     r0,168(r1)
    227c:	7c 0b 03 78 	mr      r11,r0
    2280:	88 0b 00 95 	lbz     r0,149(r11)
    2284:	54 00 06 3e 	clrlwi  r0,r0,24
    2288:	54 00 07 7a 	rlwinm  r0,r0,0,29,29
    228c:	2f 80 00 00 	cmpwi   cr7,r0,0
    2290:	41 9e 00 20 	beq-    cr7,22b0 <__pfkey_xfrm_state2msg+0x694>
		sa->sadb_sa_flags |= SADB_SAFLAGS_NOPMTUDISC;
    2294:	80 01 00 2c 	lwz     r0,44(r1)
    2298:	7c 08 03 78 	mr      r8,r0
    229c:	80 08 00 0c 	lwz     r0,12(r8)
    22a0:	64 09 20 00 	oris    r9,r0,8192
    22a4:	80 01 00 2c 	lwz     r0,44(r1)
    22a8:	7c 0a 03 78 	mr      r10,r0
    22ac:	91 2a 00 0c 	stw     r9,12(r10)

	/* hard time */
	if (hsc & 2) {
    22b0:	80 01 00 b0 	lwz     r0,176(r1)
    22b4:	54 00 07 bc 	rlwinm  r0,r0,0,30,30
    22b8:	2f 80 00 00 	cmpwi   cr7,r0,0
    22bc:	41 9e 01 20 	beq-    cr7,23dc <__pfkey_xfrm_state2msg+0x7c0>
		lifetime = (struct sadb_lifetime *)  skb_put(skb,
    22c0:	80 61 00 24 	lwz     r3,36(r1)
    22c4:	38 80 00 20 	li      r4,32
    22c8:	48 00 00 01 	bl      22c8 <__pfkey_xfrm_state2msg+0x6ac>
    22cc:	90 61 00 3c 	stw     r3,60(r1)
							     sizeof(struct sadb_lifetime));
		lifetime->sadb_lifetime_len =
    22d0:	80 01 00 3c 	lwz     r0,60(r1)
    22d4:	39 20 00 04 	li      r9,4
    22d8:	7c 0b 03 78 	mr      r11,r0
    22dc:	b1 2b 00 00 	sth     r9,0(r11)
			sizeof(struct sadb_lifetime)/sizeof(uint64_t);
		lifetime->sadb_lifetime_exttype = SADB_EXT_LIFETIME_HARD;
    22e0:	80 01 00 3c 	lwz     r0,60(r1)
    22e4:	39 20 00 03 	li      r9,3
    22e8:	7c 08 03 78 	mr      r8,r0
    22ec:	b1 28 00 02 	sth     r9,2(r8)
		lifetime->sadb_lifetime_allocations =  _X2KEY(x->lft.hard_packet_limit);
    22f0:	80 01 00 a8 	lwz     r0,168(r1)
    22f4:	7c 0b 03 78 	mr      r11,r0
    22f8:	81 2b 00 c8 	lwz     r9,200(r11)
    22fc:	81 4b 00 cc 	lwz     r10,204(r11)
    2300:	38 00 ff ff 	li      r0,-1
    2304:	7f 89 00 00 	cmpw    cr7,r9,r0
    2308:	40 9e 00 10 	bne-    cr7,2318 <__pfkey_xfrm_state2msg+0x6fc>
    230c:	38 00 ff ff 	li      r0,-1
    2310:	7f 8a 00 00 	cmpw    cr7,r10,r0
    2314:	41 9e 00 1c 	beq-    cr7,2330 <__pfkey_xfrm_state2msg+0x714>
    2318:	80 01 00 a8 	lwz     r0,168(r1)
    231c:	7c 08 03 78 	mr      r8,r0
    2320:	81 28 00 c8 	lwz     r9,200(r8)
    2324:	81 48 00 cc 	lwz     r10,204(r8)
    2328:	7d 40 53 78 	mr      r0,r10
    232c:	48 00 00 08 	b       2334 <__pfkey_xfrm_state2msg+0x718>
    2330:	38 00 00 00 	li      r0,0
    2334:	81 21 00 3c 	lwz     r9,60(r1)
    2338:	90 09 00 04 	stw     r0,4(r9)
		lifetime->sadb_lifetime_bytes = _X2KEY(x->lft.hard_byte_limit);
    233c:	80 01 00 a8 	lwz     r0,168(r1)
    2340:	7c 0b 03 78 	mr      r11,r0
    2344:	81 2b 00 b8 	lwz     r9,184(r11)
    2348:	81 4b 00 bc 	lwz     r10,188(r11)
    234c:	38 00 ff ff 	li      r0,-1
    2350:	7f 89 00 00 	cmpw    cr7,r9,r0
    2354:	40 9e 00 10 	bne-    cr7,2364 <__pfkey_xfrm_state2msg+0x748>
    2358:	38 00 ff ff 	li      r0,-1
    235c:	7f 8a 00 00 	cmpw    cr7,r10,r0
    2360:	41 9e 00 18 	beq-    cr7,2378 <__pfkey_xfrm_state2msg+0x75c>
    2364:	80 01 00 a8 	lwz     r0,168(r1)
    2368:	7c 08 03 78 	mr      r8,r0
    236c:	81 28 00 b8 	lwz     r9,184(r8)
    2370:	81 48 00 bc 	lwz     r10,188(r8)
    2374:	48 00 00 0c 	b       2380 <__pfkey_xfrm_state2msg+0x764>
    2378:	39 20 00 00 	li      r9,0
    237c:	39 40 00 00 	li      r10,0
    2380:	80 01 00 3c 	lwz     r0,60(r1)
    2384:	7c 0b 03 78 	mr      r11,r0
    2388:	91 4b 00 0c 	stw     r10,12(r11)
    238c:	7c 08 03 78 	mr      r8,r0
    2390:	91 28 00 08 	stw     r9,8(r8)
		lifetime->sadb_lifetime_addtime = x->lft.hard_add_expires_seconds;
    2394:	80 01 00 a8 	lwz     r0,168(r1)
    2398:	7c 0b 03 78 	mr      r11,r0
    239c:	81 2b 00 d8 	lwz     r9,216(r11)
    23a0:	81 4b 00 dc 	lwz     r10,220(r11)
    23a4:	80 01 00 3c 	lwz     r0,60(r1)
    23a8:	7c 08 03 78 	mr      r8,r0
    23ac:	91 48 00 14 	stw     r10,20(r8)
    23b0:	7c 0b 03 78 	mr      r11,r0
    23b4:	91 2b 00 10 	stw     r9,16(r11)
		lifetime->sadb_lifetime_usetime = x->lft.hard_use_expires_seconds;
    23b8:	80 01 00 a8 	lwz     r0,168(r1)
    23bc:	7c 08 03 78 	mr      r8,r0
    23c0:	81 28 00 e8 	lwz     r9,232(r8)
    23c4:	81 48 00 ec 	lwz     r10,236(r8)
    23c8:	80 01 00 3c 	lwz     r0,60(r1)
    23cc:	7c 0b 03 78 	mr      r11,r0
    23d0:	91 4b 00 1c 	stw     r10,28(r11)
    23d4:	7c 08 03 78 	mr      r8,r0
    23d8:	91 28 00 18 	stw     r9,24(r8)
	}
	/* soft time */
	if (hsc & 1) {
    23dc:	80 01 00 b0 	lwz     r0,176(r1)
    23e0:	54 00 07 fe 	clrlwi  r0,r0,31
    23e4:	54 00 06 3e 	clrlwi  r0,r0,24
    23e8:	2f 80 00 00 	cmpwi   cr7,r0,0
    23ec:	41 9e 01 20 	beq-    cr7,250c <__pfkey_xfrm_state2msg+0x8f0>
		lifetime = (struct sadb_lifetime *)  skb_put(skb,
    23f0:	80 61 00 24 	lwz     r3,36(r1)
    23f4:	38 80 00 20 	li      r4,32
    23f8:	48 00 00 01 	bl      23f8 <__pfkey_xfrm_state2msg+0x7dc>
    23fc:	90 61 00 3c 	stw     r3,60(r1)
							     sizeof(struct sadb_lifetime));
		lifetime->sadb_lifetime_len =
    2400:	80 01 00 3c 	lwz     r0,60(r1)
    2404:	39 20 00 04 	li      r9,4
    2408:	7c 0a 03 78 	mr      r10,r0
    240c:	b1 2a 00 00 	sth     r9,0(r10)
			sizeof(struct sadb_lifetime)/sizeof(uint64_t);
		lifetime->sadb_lifetime_exttype = SADB_EXT_LIFETIME_SOFT;
    2410:	80 01 00 3c 	lwz     r0,60(r1)
    2414:	39 20 00 04 	li      r9,4
    2418:	7c 0b 03 78 	mr      r11,r0
    241c:	b1 2b 00 02 	sth     r9,2(r11)
		lifetime->sadb_lifetime_allocations =  _X2KEY(x->lft.soft_packet_limit);
    2420:	80 01 00 a8 	lwz     r0,168(r1)
    2424:	7c 08 03 78 	mr      r8,r0
    2428:	81 28 00 c0 	lwz     r9,192(r8)
    242c:	81 48 00 c4 	lwz     r10,196(r8)
    2430:	38 00 ff ff 	li      r0,-1
    2434:	7f 89 00 00 	cmpw    cr7,r9,r0
    2438:	40 9e 00 10 	bne-    cr7,2448 <__pfkey_xfrm_state2msg+0x82c>
    243c:	38 00 ff ff 	li      r0,-1
    2440:	7f 8a 00 00 	cmpw    cr7,r10,r0
    2444:	41 9e 00 1c 	beq-    cr7,2460 <__pfkey_xfrm_state2msg+0x844>
    2448:	80 01 00 a8 	lwz     r0,168(r1)
    244c:	7c 0b 03 78 	mr      r11,r0
    2450:	81 2b 00 c0 	lwz     r9,192(r11)
    2454:	81 4b 00 c4 	lwz     r10,196(r11)
    2458:	7d 40 53 78 	mr      r0,r10
    245c:	48 00 00 08 	b       2464 <__pfkey_xfrm_state2msg+0x848>
    2460:	38 00 00 00 	li      r0,0
    2464:	81 21 00 3c 	lwz     r9,60(r1)
    2468:	90 09 00 04 	stw     r0,4(r9)
		lifetime->sadb_lifetime_bytes = _X2KEY(x->lft.soft_byte_limit);
    246c:	80 01 00 a8 	lwz     r0,168(r1)
    2470:	7c 08 03 78 	mr      r8,r0
    2474:	81 28 00 b0 	lwz     r9,176(r8)
    2478:	81 48 00 b4 	lwz     r10,180(r8)
    247c:	38 00 ff ff 	li      r0,-1
    2480:	7f 89 00 00 	cmpw    cr7,r9,r0
    2484:	40 9e 00 10 	bne-    cr7,2494 <__pfkey_xfrm_state2msg+0x878>
    2488:	38 00 ff ff 	li      r0,-1
    248c:	7f 8a 00 00 	cmpw    cr7,r10,r0
    2490:	41 9e 00 18 	beq-    cr7,24a8 <__pfkey_xfrm_state2msg+0x88c>
    2494:	80 01 00 a8 	lwz     r0,168(r1)
    2498:	7c 0b 03 78 	mr      r11,r0
    249c:	81 2b 00 b0 	lwz     r9,176(r11)
    24a0:	81 4b 00 b4 	lwz     r10,180(r11)
    24a4:	48 00 00 0c 	b       24b0 <__pfkey_xfrm_state2msg+0x894>
    24a8:	39 20 00 00 	li      r9,0
    24ac:	39 40 00 00 	li      r10,0
    24b0:	80 01 00 3c 	lwz     r0,60(r1)
    24b4:	7c 08 03 78 	mr      r8,r0
    24b8:	91 48 00 0c 	stw     r10,12(r8)
    24bc:	7c 0b 03 78 	mr      r11,r0
    24c0:	91 2b 00 08 	stw     r9,8(r11)
		lifetime->sadb_lifetime_addtime = x->lft.soft_add_expires_seconds;
    24c4:	80 01 00 a8 	lwz     r0,168(r1)
    24c8:	7c 08 03 78 	mr      r8,r0
    24cc:	81 28 00 d0 	lwz     r9,208(r8)
    24d0:	81 48 00 d4 	lwz     r10,212(r8)
    24d4:	80 01 00 3c 	lwz     r0,60(r1)
    24d8:	7c 0b 03 78 	mr      r11,r0
    24dc:	91 4b 00 14 	stw     r10,20(r11)
    24e0:	7c 08 03 78 	mr      r8,r0
    24e4:	91 28 00 10 	stw     r9,16(r8)
		lifetime->sadb_lifetime_usetime = x->lft.soft_use_expires_seconds;
    24e8:	80 01 00 a8 	lwz     r0,168(r1)
    24ec:	7c 0b 03 78 	mr      r11,r0
    24f0:	81 2b 00 e0 	lwz     r9,224(r11)
    24f4:	81 4b 00 e4 	lwz     r10,228(r11)
    24f8:	80 01 00 3c 	lwz     r0,60(r1)
    24fc:	7c 08 03 78 	mr      r8,r0
    2500:	91 48 00 1c 	stw     r10,28(r8)
    2504:	7c 0b 03 78 	mr      r11,r0
    2508:	91 2b 00 18 	stw     r9,24(r11)
	}
	/* current time */
	lifetime = (struct sadb_lifetime *)  skb_put(skb,
    250c:	80 61 00 24 	lwz     r3,36(r1)
    2510:	38 80 00 20 	li      r4,32
    2514:	48 00 00 01 	bl      2514 <__pfkey_xfrm_state2msg+0x8f8>
    2518:	90 61 00 3c 	stw     r3,60(r1)
						     sizeof(struct sadb_lifetime));
	lifetime->sadb_lifetime_len =
    251c:	80 01 00 3c 	lwz     r0,60(r1)
    2520:	39 20 00 04 	li      r9,4
    2524:	7c 08 03 78 	mr      r8,r0
    2528:	b1 28 00 00 	sth     r9,0(r8)
		sizeof(struct sadb_lifetime)/sizeof(uint64_t);
	lifetime->sadb_lifetime_exttype = SADB_EXT_LIFETIME_CURRENT;
    252c:	80 01 00 3c 	lwz     r0,60(r1)
    2530:	39 20 00 02 	li      r9,2
    2534:	7c 0a 03 78 	mr      r10,r0
    2538:	b1 2a 00 02 	sth     r9,2(r10)
	lifetime->sadb_lifetime_allocations = x->curlft.packets;
    253c:	80 01 00 a8 	lwz     r0,168(r1)
    2540:	7c 0b 03 78 	mr      r11,r0
    2544:	81 2b 01 68 	lwz     r9,360(r11)
    2548:	81 4b 01 6c 	lwz     r10,364(r11)
    254c:	7d 49 53 78 	mr      r9,r10
    2550:	80 01 00 3c 	lwz     r0,60(r1)
    2554:	7c 08 03 78 	mr      r8,r0
    2558:	91 28 00 04 	stw     r9,4(r8)
	lifetime->sadb_lifetime_bytes = x->curlft.bytes;
    255c:	80 01 00 a8 	lwz     r0,168(r1)
    2560:	7c 0b 03 78 	mr      r11,r0
    2564:	81 2b 01 60 	lwz     r9,352(r11)
    2568:	81 4b 01 64 	lwz     r10,356(r11)
    256c:	80 01 00 3c 	lwz     r0,60(r1)
    2570:	7c 08 03 78 	mr      r8,r0
    2574:	91 48 00 0c 	stw     r10,12(r8)
    2578:	7c 0b 03 78 	mr      r11,r0
    257c:	91 2b 00 08 	stw     r9,8(r11)
	lifetime->sadb_lifetime_addtime = x->curlft.add_time;
    2580:	80 01 00 a8 	lwz     r0,168(r1)
    2584:	7c 08 03 78 	mr      r8,r0
    2588:	81 28 01 70 	lwz     r9,368(r8)
    258c:	81 48 01 74 	lwz     r10,372(r8)
    2590:	80 01 00 3c 	lwz     r0,60(r1)
    2594:	7c 0b 03 78 	mr      r11,r0
    2598:	91 4b 00 14 	stw     r10,20(r11)
    259c:	7c 08 03 78 	mr      r8,r0
    25a0:	91 28 00 10 	stw     r9,16(r8)
	lifetime->sadb_lifetime_usetime = x->curlft.use_time;
    25a4:	80 01 00 a8 	lwz     r0,168(r1)
    25a8:	7c 0b 03 78 	mr      r11,r0
    25ac:	81 2b 01 78 	lwz     r9,376(r11)
    25b0:	81 4b 01 7c 	lwz     r10,380(r11)
    25b4:	80 01 00 3c 	lwz     r0,60(r1)
    25b8:	7c 08 03 78 	mr      r8,r0
    25bc:	91 48 00 1c 	stw     r10,28(r8)
    25c0:	7c 0b 03 78 	mr      r11,r0
    25c4:	91 2b 00 18 	stw     r9,24(r11)
	/* src address */
	addr = (struct sadb_address*) skb_put(skb,
    25c8:	80 01 00 1c 	lwz     r0,28(r1)
    25cc:	30 00 00 08 	addic   r0,r0,8
    25d0:	80 61 00 24 	lwz     r3,36(r1)
    25d4:	7c 04 03 78 	mr      r4,r0
    25d8:	48 00 00 01 	bl      25d8 <__pfkey_xfrm_state2msg+0x9bc>
    25dc:	90 61 00 40 	stw     r3,64(r1)
					      sizeof(struct sadb_address)+sockaddr_size);
	addr->sadb_address_len =
		(sizeof(struct sadb_address)+sockaddr_size)/
    25e0:	80 01 00 1c 	lwz     r0,28(r1)
    25e4:	30 00 00 08 	addic   r0,r0,8
    25e8:	54 00 e8 fe 	rlwinm  r0,r0,29,3,31
	lifetime->sadb_lifetime_addtime = x->curlft.add_time;
	lifetime->sadb_lifetime_usetime = x->curlft.use_time;
	/* src address */
	addr = (struct sadb_address*) skb_put(skb,
					      sizeof(struct sadb_address)+sockaddr_size);
	addr->sadb_address_len =
    25ec:	54 09 04 3e 	clrlwi  r9,r0,16
    25f0:	80 01 00 40 	lwz     r0,64(r1)
    25f4:	7c 08 03 78 	mr      r8,r0
    25f8:	b1 28 00 00 	sth     r9,0(r8)
		(sizeof(struct sadb_address)+sockaddr_size)/
			sizeof(uint64_t);
	addr->sadb_address_exttype = SADB_EXT_ADDRESS_SRC;
    25fc:	80 01 00 40 	lwz     r0,64(r1)
    2600:	39 20 00 05 	li      r9,5
    2604:	7c 0a 03 78 	mr      r10,r0
    2608:	b1 2a 00 02 	sth     r9,2(r10)
	/* "if the ports are non-zero, then the sadb_address_proto field,
	   normally zero, MUST be filled in with the transport
	   protocol's number." - RFC2367 */
	addr->sadb_address_proto = 0;
    260c:	80 01 00 40 	lwz     r0,64(r1)
    2610:	39 20 00 00 	li      r9,0
    2614:	7c 0b 03 78 	mr      r11,r0
    2618:	99 2b 00 04 	stb     r9,4(r11)
	addr->sadb_address_reserved = 0;
    261c:	80 01 00 40 	lwz     r0,64(r1)
    2620:	39 20 00 00 	li      r9,0
    2624:	7c 08 03 78 	mr      r8,r0
    2628:	b1 28 00 06 	sth     r9,6(r8)

	addr->sadb_address_prefixlen =
		pfkey_sockaddr_fill(&x->props.saddr, 0,
    262c:	80 01 00 a8 	lwz     r0,168(r1)
    2630:	31 60 00 98 	addic   r11,r0,152
    2634:	80 01 00 40 	lwz     r0,64(r1)
    2638:	31 20 00 08 	addic   r9,r0,8
				    (struct sockaddr *) (addr + 1),
				    x->props.family);
    263c:	80 01 00 a8 	lwz     r0,168(r1)
	   protocol's number." - RFC2367 */
	addr->sadb_address_proto = 0;
	addr->sadb_address_reserved = 0;

	addr->sadb_address_prefixlen =
		pfkey_sockaddr_fill(&x->props.saddr, 0,
    2640:	7c 0a 03 78 	mr      r10,r0
    2644:	a0 0a 00 96 	lhz     r0,150(r10)
    2648:	54 00 04 3e 	clrlwi  r0,r0,16
    264c:	7d 63 5b 78 	mr      r3,r11
    2650:	38 80 00 00 	li      r4,0
    2654:	7d 25 4b 78 	mr      r5,r9
    2658:	7c 06 03 78 	mr      r6,r0
    265c:	4b ff f4 75 	bl      1ad0 <pfkey_sockaddr_fill>
    2660:	7c 60 1b 78 	mr      r0,r3
	   normally zero, MUST be filled in with the transport
	   protocol's number." - RFC2367 */
	addr->sadb_address_proto = 0;
	addr->sadb_address_reserved = 0;

	addr->sadb_address_prefixlen =
    2664:	54 09 06 3e 	clrlwi  r9,r0,24
    2668:	80 01 00 40 	lwz     r0,64(r1)
    266c:	7c 0b 03 78 	mr      r11,r0
    2670:	99 2b 00 05 	stb     r9,5(r11)
		pfkey_sockaddr_fill(&x->props.saddr, 0,
				    (struct sockaddr *) (addr + 1),
				    x->props.family);
	if (!addr->sadb_address_prefixlen)
    2674:	80 01 00 40 	lwz     r0,64(r1)
    2678:	7c 08 03 78 	mr      r8,r0
    267c:	88 08 00 05 	lbz     r0,5(r8)
    2680:	54 00 06 3e 	clrlwi  r0,r0,24
    2684:	2f 80 00 00 	cmpwi   cr7,r0,0
    2688:	40 9e 00 08 	bne-    cr7,2690 <__pfkey_xfrm_state2msg+0xa74>
		BUG();
    268c:	0f e0 00 00 	twi     31,r0,0

	/* dst address */
	addr = (struct sadb_address*) skb_put(skb,
    2690:	80 01 00 1c 	lwz     r0,28(r1)
    2694:	30 00 00 08 	addic   r0,r0,8
    2698:	80 61 00 24 	lwz     r3,36(r1)
    269c:	7c 04 03 78 	mr      r4,r0
    26a0:	48 00 00 01 	bl      26a0 <__pfkey_xfrm_state2msg+0xa84>
    26a4:	90 61 00 40 	stw     r3,64(r1)
					      sizeof(struct sadb_address)+sockaddr_size);
	addr->sadb_address_len =
		(sizeof(struct sadb_address)+sockaddr_size)/
    26a8:	80 01 00 1c 	lwz     r0,28(r1)
    26ac:	30 00 00 08 	addic   r0,r0,8
    26b0:	54 00 e8 fe 	rlwinm  r0,r0,29,3,31
		BUG();

	/* dst address */
	addr = (struct sadb_address*) skb_put(skb,
					      sizeof(struct sadb_address)+sockaddr_size);
	addr->sadb_address_len =
    26b4:	54 09 04 3e 	clrlwi  r9,r0,16
    26b8:	80 01 00 40 	lwz     r0,64(r1)
    26bc:	7c 0a 03 78 	mr      r10,r0
    26c0:	b1 2a 00 00 	sth     r9,0(r10)
		(sizeof(struct sadb_address)+sockaddr_size)/
			sizeof(uint64_t);
	addr->sadb_address_exttype = SADB_EXT_ADDRESS_DST;
    26c4:	80 01 00 40 	lwz     r0,64(r1)
    26c8:	39 20 00 06 	li      r9,6
    26cc:	7c 0b 03 78 	mr      r11,r0
    26d0:	b1 2b 00 02 	sth     r9,2(r11)
	addr->sadb_address_proto = 0;
    26d4:	80 01 00 40 	lwz     r0,64(r1)
    26d8:	39 20 00 00 	li      r9,0
    26dc:	7c 08 03 78 	mr      r8,r0
    26e0:	99 28 00 04 	stb     r9,4(r8)
	addr->sadb_address_reserved = 0;
    26e4:	80 01 00 40 	lwz     r0,64(r1)
    26e8:	39 20 00 00 	li      r9,0
    26ec:	7c 0a 03 78 	mr      r10,r0
    26f0:	b1 2a 00 06 	sth     r9,6(r10)

	addr->sadb_address_prefixlen =
		pfkey_sockaddr_fill(&x->id.daddr, 0,
    26f4:	80 01 00 a8 	lwz     r0,168(r1)
    26f8:	31 60 00 1c 	addic   r11,r0,28
    26fc:	80 01 00 40 	lwz     r0,64(r1)
    2700:	31 20 00 08 	addic   r9,r0,8
				    (struct sockaddr *) (addr + 1),
				    x->props.family);
    2704:	80 01 00 a8 	lwz     r0,168(r1)
	addr->sadb_address_exttype = SADB_EXT_ADDRESS_DST;
	addr->sadb_address_proto = 0;
	addr->sadb_address_reserved = 0;

	addr->sadb_address_prefixlen =
		pfkey_sockaddr_fill(&x->id.daddr, 0,
    2708:	7c 08 03 78 	mr      r8,r0
    270c:	a0 08 00 96 	lhz     r0,150(r8)
    2710:	54 00 04 3e 	clrlwi  r0,r0,16
    2714:	7d 63 5b 78 	mr      r3,r11
    2718:	38 80 00 00 	li      r4,0
    271c:	7d 25 4b 78 	mr      r5,r9
    2720:	7c 06 03 78 	mr      r6,r0
    2724:	4b ff f3 ad 	bl      1ad0 <pfkey_sockaddr_fill>
    2728:	7c 60 1b 78 	mr      r0,r3
			sizeof(uint64_t);
	addr->sadb_address_exttype = SADB_EXT_ADDRESS_DST;
	addr->sadb_address_proto = 0;
	addr->sadb_address_reserved = 0;

	addr->sadb_address_prefixlen =
    272c:	54 09 06 3e 	clrlwi  r9,r0,24
    2730:	80 01 00 40 	lwz     r0,64(r1)
    2734:	7c 0a 03 78 	mr      r10,r0
    2738:	99 2a 00 05 	stb     r9,5(r10)
		pfkey_sockaddr_fill(&x->id.daddr, 0,
				    (struct sockaddr *) (addr + 1),
				    x->props.family);
	if (!addr->sadb_address_prefixlen)
    273c:	80 01 00 40 	lwz     r0,64(r1)
    2740:	7c 0b 03 78 	mr      r11,r0
    2744:	88 0b 00 05 	lbz     r0,5(r11)
    2748:	54 00 06 3e 	clrlwi  r0,r0,24
    274c:	2f 80 00 00 	cmpwi   cr7,r0,0
    2750:	40 9e 00 08 	bne-    cr7,2758 <__pfkey_xfrm_state2msg+0xb3c>
		BUG();
    2754:	0f e0 00 00 	twi     31,r0,0

	if (xfrm_addr_cmp(&x->sel.saddr, &x->props.saddr,
    2758:	80 01 00 a8 	lwz     r0,168(r1)
    275c:	31 60 00 44 	addic   r11,r0,68
    2760:	80 01 00 a8 	lwz     r0,168(r1)
    2764:	31 20 00 98 	addic   r9,r0,152
			  x->props.family)) {
    2768:	80 01 00 a8 	lwz     r0,168(r1)
    276c:	7c 08 03 78 	mr      r8,r0
    2770:	a0 08 00 96 	lhz     r0,150(r8)
    2774:	54 00 04 3e 	clrlwi  r0,r0,16
				    (struct sockaddr *) (addr + 1),
				    x->props.family);
	if (!addr->sadb_address_prefixlen)
		BUG();

	if (xfrm_addr_cmp(&x->sel.saddr, &x->props.saddr,
    2778:	91 61 00 80 	stw     r11,128(r1)
    277c:	91 21 00 84 	stw     r9,132(r1)
    2780:	90 01 00 88 	stw     r0,136(r1)
			      unsigned int);

static inline int xfrm_addr_cmp(xfrm_address_t *a, xfrm_address_t *b,
				int family)
{
	switch (family) {
    2784:	80 01 00 88 	lwz     r0,136(r1)
    2788:	2f 80 00 0a 	cmpwi   cr7,r0,10
    278c:	41 9e 00 24 	beq-    cr7,27b0 <__pfkey_xfrm_state2msg+0xb94>
	default:
	case AF_INET:
		return (__force u32)a->a4 - (__force u32)b->a4;
    2790:	80 01 00 80 	lwz     r0,128(r1)
    2794:	7c 0a 03 78 	mr      r10,r0
    2798:	81 2a 00 00 	lwz     r9,0(r10)
    279c:	80 01 00 84 	lwz     r0,132(r1)
    27a0:	7c 0b 03 78 	mr      r11,r0
    27a4:	80 0b 00 00 	lwz     r0,0(r11)
    27a8:	7c 00 48 50 	subf    r0,r0,r9
    27ac:	48 00 00 28 	b       27d4 <__pfkey_xfrm_state2msg+0xbb8>
    27b0:	80 01 00 80 	lwz     r0,128(r1)
    27b4:	90 01 00 8c 	stw     r0,140(r1)
    27b8:	80 01 00 84 	lwz     r0,132(r1)
    27bc:	90 01 00 90 	stw     r0,144(r1)
    27c0:	80 61 00 8c 	lwz     r3,140(r1)
    27c4:	80 81 00 90 	lwz     r4,144(r1)
    27c8:	38 a0 00 10 	li      r5,16
    27cc:	48 00 00 01 	bl      27cc <__pfkey_xfrm_state2msg+0xbb0>
    27d0:	7c 60 1b 78 	mr      r0,r3
    27d4:	2f 80 00 00 	cmpwi   cr7,r0,0
    27d8:	41 9e 00 e4 	beq-    cr7,28bc <__pfkey_xfrm_state2msg+0xca0>
			  x->props.family)) {
		addr = (struct sadb_address*) skb_put(skb,
    27dc:	80 01 00 1c 	lwz     r0,28(r1)
    27e0:	30 00 00 08 	addic   r0,r0,8
    27e4:	80 61 00 24 	lwz     r3,36(r1)
    27e8:	7c 04 03 78 	mr      r4,r0
    27ec:	48 00 00 01 	bl      27ec <__pfkey_xfrm_state2msg+0xbd0>
    27f0:	90 61 00 40 	stw     r3,64(r1)
			sizeof(struct sadb_address)+sockaddr_size);
		addr->sadb_address_len =
			(sizeof(struct sadb_address)+sockaddr_size)/
    27f4:	80 01 00 1c 	lwz     r0,28(r1)
    27f8:	30 00 00 08 	addic   r0,r0,8
    27fc:	54 00 e8 fe 	rlwinm  r0,r0,29,3,31

	if (xfrm_addr_cmp(&x->sel.saddr, &x->props.saddr,
			  x->props.family)) {
		addr = (struct sadb_address*) skb_put(skb,
			sizeof(struct sadb_address)+sockaddr_size);
		addr->sadb_address_len =
    2800:	54 09 04 3e 	clrlwi  r9,r0,16
    2804:	80 01 00 40 	lwz     r0,64(r1)
    2808:	7c 08 03 78 	mr      r8,r0
    280c:	b1 28 00 00 	sth     r9,0(r8)
			(sizeof(struct sadb_address)+sockaddr_size)/
			sizeof(uint64_t);
		addr->sadb_address_exttype = SADB_EXT_ADDRESS_PROXY;
    2810:	80 01 00 40 	lwz     r0,64(r1)
    2814:	39 20 00 07 	li      r9,7
    2818:	7c 0a 03 78 	mr      r10,r0
    281c:	b1 2a 00 02 	sth     r9,2(r10)
		addr->sadb_address_proto =
			pfkey_proto_from_xfrm(x->sel.proto);
    2820:	80 01 00 a8 	lwz     r0,168(r1)
    2824:	7c 0b 03 78 	mr      r11,r0
    2828:	88 0b 00 60 	lbz     r0,96(r11)
    282c:	54 00 06 3e 	clrlwi  r0,r0,24
    2830:	7c 03 03 78 	mr      r3,r0
    2834:	4b ff ef c9 	bl      17fc <pfkey_proto_from_xfrm>
    2838:	7c 60 1b 78 	mr      r0,r3
    283c:	7c 09 03 78 	mr      r9,r0
			sizeof(struct sadb_address)+sockaddr_size);
		addr->sadb_address_len =
			(sizeof(struct sadb_address)+sockaddr_size)/
			sizeof(uint64_t);
		addr->sadb_address_exttype = SADB_EXT_ADDRESS_PROXY;
		addr->sadb_address_proto =
    2840:	80 01 00 40 	lwz     r0,64(r1)
    2844:	7c 08 03 78 	mr      r8,r0
    2848:	99 28 00 04 	stb     r9,4(r8)
			pfkey_proto_from_xfrm(x->sel.proto);
		addr->sadb_address_prefixlen = x->sel.prefixlen_s;
    284c:	80 01 00 a8 	lwz     r0,168(r1)
    2850:	7c 09 03 78 	mr      r9,r0
    2854:	88 09 00 5f 	lbz     r0,95(r9)
    2858:	54 09 06 3e 	clrlwi  r9,r0,24
    285c:	80 01 00 40 	lwz     r0,64(r1)
    2860:	7c 0a 03 78 	mr      r10,r0
    2864:	99 2a 00 05 	stb     r9,5(r10)
		addr->sadb_address_reserved = 0;
    2868:	80 01 00 40 	lwz     r0,64(r1)
    286c:	39 20 00 00 	li      r9,0
    2870:	7c 0b 03 78 	mr      r11,r0
    2874:	b1 2b 00 06 	sth     r9,6(r11)

		pfkey_sockaddr_fill(&x->sel.saddr, x->sel.sport,
    2878:	80 01 00 a8 	lwz     r0,168(r1)
    287c:	31 40 00 44 	addic   r10,r0,68
    2880:	80 01 00 a8 	lwz     r0,168(r1)
    2884:	7c 08 03 78 	mr      r8,r0
    2888:	a0 08 00 58 	lhz     r0,88(r8)
    288c:	54 0b 04 3e 	clrlwi  r11,r0,16
    2890:	80 01 00 40 	lwz     r0,64(r1)
    2894:	31 20 00 08 	addic   r9,r0,8
				    (struct sockaddr *) (addr + 1),
				    x->props.family);
    2898:	80 01 00 a8 	lwz     r0,168(r1)
		addr->sadb_address_proto =
			pfkey_proto_from_xfrm(x->sel.proto);
		addr->sadb_address_prefixlen = x->sel.prefixlen_s;
		addr->sadb_address_reserved = 0;

		pfkey_sockaddr_fill(&x->sel.saddr, x->sel.sport,
    289c:	7c 08 03 78 	mr      r8,r0
    28a0:	a0 08 00 96 	lhz     r0,150(r8)
    28a4:	54 00 04 3e 	clrlwi  r0,r0,16
    28a8:	7d 43 53 78 	mr      r3,r10
    28ac:	7d 64 5b 78 	mr      r4,r11
    28b0:	7d 25 4b 78 	mr      r5,r9
    28b4:	7c 06 03 78 	mr      r6,r0
    28b8:	4b ff f2 19 	bl      1ad0 <pfkey_sockaddr_fill>
				    (struct sockaddr *) (addr + 1),
				    x->props.family);
	}

	/* auth key */
	if (add_keys && auth_key_size) {
    28bc:	80 01 00 ac 	lwz     r0,172(r1)
    28c0:	2f 80 00 00 	cmpwi   cr7,r0,0
    28c4:	41 9e 00 cc 	beq-    cr7,2990 <__pfkey_xfrm_state2msg+0xd74>
    28c8:	80 01 00 10 	lwz     r0,16(r1)
    28cc:	2f 80 00 00 	cmpwi   cr7,r0,0
    28d0:	41 9e 00 c0 	beq-    cr7,2990 <__pfkey_xfrm_state2msg+0xd74>
		key = (struct sadb_key *) skb_put(skb,
    28d4:	80 01 00 10 	lwz     r0,16(r1)
    28d8:	30 00 00 08 	addic   r0,r0,8
    28dc:	80 61 00 24 	lwz     r3,36(r1)
    28e0:	7c 04 03 78 	mr      r4,r0
    28e4:	48 00 00 01 	bl      28e4 <__pfkey_xfrm_state2msg+0xcc8>
    28e8:	90 61 00 44 	stw     r3,68(r1)
						  sizeof(struct sadb_key)+auth_key_size);
		key->sadb_key_len = (sizeof(struct sadb_key) + auth_key_size) /
    28ec:	80 01 00 10 	lwz     r0,16(r1)
    28f0:	30 00 00 08 	addic   r0,r0,8
    28f4:	54 00 e8 fe 	rlwinm  r0,r0,29,3,31
    28f8:	54 09 04 3e 	clrlwi  r9,r0,16
    28fc:	80 01 00 44 	lwz     r0,68(r1)
    2900:	7c 0a 03 78 	mr      r10,r0
    2904:	b1 2a 00 00 	sth     r9,0(r10)
			sizeof(uint64_t);
		key->sadb_key_exttype = SADB_EXT_KEY_AUTH;
    2908:	80 01 00 44 	lwz     r0,68(r1)
    290c:	39 20 00 08 	li      r9,8
    2910:	7c 0b 03 78 	mr      r11,r0
    2914:	b1 2b 00 02 	sth     r9,2(r11)
		key->sadb_key_bits = x->aalg->alg_key_len;
    2918:	80 01 00 a8 	lwz     r0,168(r1)
    291c:	7c 08 03 78 	mr      r8,r0
    2920:	80 08 00 f0 	lwz     r0,240(r8)
    2924:	7c 09 03 78 	mr      r9,r0
    2928:	80 09 00 40 	lwz     r0,64(r9)
    292c:	54 09 04 3e 	clrlwi  r9,r0,16
    2930:	80 01 00 44 	lwz     r0,68(r1)
    2934:	7c 0a 03 78 	mr      r10,r0
    2938:	b1 2a 00 04 	sth     r9,4(r10)
		key->sadb_key_reserved = 0;
    293c:	80 01 00 44 	lwz     r0,68(r1)
    2940:	39 20 00 00 	li      r9,0
    2944:	7c 0b 03 78 	mr      r11,r0
    2948:	b1 2b 00 06 	sth     r9,6(r11)
		memcpy(key + 1, x->aalg->alg_key, (x->aalg->alg_key_len+7)/8);
    294c:	80 01 00 44 	lwz     r0,68(r1)
    2950:	31 60 00 08 	addic   r11,r0,8
    2954:	80 01 00 a8 	lwz     r0,168(r1)
    2958:	7c 08 03 78 	mr      r8,r0
    295c:	80 08 00 f0 	lwz     r0,240(r8)
    2960:	31 20 00 48 	addic   r9,r0,72
    2964:	80 01 00 a8 	lwz     r0,168(r1)
    2968:	7c 0a 03 78 	mr      r10,r0
    296c:	80 0a 00 f0 	lwz     r0,240(r10)
    2970:	7c 08 03 78 	mr      r8,r0
    2974:	80 08 00 40 	lwz     r0,64(r8)
    2978:	30 00 00 07 	addic   r0,r0,7
    297c:	54 00 e8 fe 	rlwinm  r0,r0,29,3,31
    2980:	7d 63 5b 78 	mr      r3,r11
    2984:	7d 24 4b 78 	mr      r4,r9
    2988:	7c 05 03 78 	mr      r5,r0
    298c:	48 00 00 01 	bl      298c <__pfkey_xfrm_state2msg+0xd70>
	}
	/* encrypt key */
	if (add_keys && encrypt_key_size) {
    2990:	80 01 00 ac 	lwz     r0,172(r1)
    2994:	2f 80 00 00 	cmpwi   cr7,r0,0
    2998:	41 9e 00 cc 	beq-    cr7,2a64 <__pfkey_xfrm_state2msg+0xe48>
    299c:	80 01 00 14 	lwz     r0,20(r1)
    29a0:	2f 80 00 00 	cmpwi   cr7,r0,0
    29a4:	41 9e 00 c0 	beq-    cr7,2a64 <__pfkey_xfrm_state2msg+0xe48>
		key = (struct sadb_key *) skb_put(skb,
    29a8:	80 01 00 14 	lwz     r0,20(r1)
    29ac:	30 00 00 08 	addic   r0,r0,8
    29b0:	80 61 00 24 	lwz     r3,36(r1)
    29b4:	7c 04 03 78 	mr      r4,r0
    29b8:	48 00 00 01 	bl      29b8 <__pfkey_xfrm_state2msg+0xd9c>
    29bc:	90 61 00 44 	stw     r3,68(r1)
						  sizeof(struct sadb_key)+encrypt_key_size);
		key->sadb_key_len = (sizeof(struct sadb_key) +
    29c0:	80 01 00 14 	lwz     r0,20(r1)
    29c4:	30 00 00 08 	addic   r0,r0,8
				     encrypt_key_size) / sizeof(uint64_t);
    29c8:	54 00 e8 fe 	rlwinm  r0,r0,29,3,31
	}
	/* encrypt key */
	if (add_keys && encrypt_key_size) {
		key = (struct sadb_key *) skb_put(skb,
						  sizeof(struct sadb_key)+encrypt_key_size);
		key->sadb_key_len = (sizeof(struct sadb_key) +
    29cc:	54 09 04 3e 	clrlwi  r9,r0,16
    29d0:	80 01 00 44 	lwz     r0,68(r1)
    29d4:	7c 0a 03 78 	mr      r10,r0
    29d8:	b1 2a 00 00 	sth     r9,0(r10)
				     encrypt_key_size) / sizeof(uint64_t);
		key->sadb_key_exttype = SADB_EXT_KEY_ENCRYPT;
    29dc:	80 01 00 44 	lwz     r0,68(r1)
    29e0:	39 20 00 09 	li      r9,9
    29e4:	7c 0b 03 78 	mr      r11,r0
    29e8:	b1 2b 00 02 	sth     r9,2(r11)
		key->sadb_key_bits = x->ealg->alg_key_len;
    29ec:	80 01 00 a8 	lwz     r0,168(r1)
    29f0:	7c 08 03 78 	mr      r8,r0
    29f4:	80 08 00 f4 	lwz     r0,244(r8)
    29f8:	7c 09 03 78 	mr      r9,r0
    29fc:	80 09 00 40 	lwz     r0,64(r9)
    2a00:	54 09 04 3e 	clrlwi  r9,r0,16
    2a04:	80 01 00 44 	lwz     r0,68(r1)
    2a08:	7c 0a 03 78 	mr      r10,r0
    2a0c:	b1 2a 00 04 	sth     r9,4(r10)
		key->sadb_key_reserved = 0;
    2a10:	80 01 00 44 	lwz     r0,68(r1)
    2a14:	39 20 00 00 	li      r9,0
    2a18:	7c 0b 03 78 	mr      r11,r0
    2a1c:	b1 2b 00 06 	sth     r9,6(r11)
		memcpy(key + 1, x->ealg->alg_key,
    2a20:	80 01 00 44 	lwz     r0,68(r1)
    2a24:	31 60 00 08 	addic   r11,r0,8
    2a28:	80 01 00 a8 	lwz     r0,168(r1)
    2a2c:	7c 08 03 78 	mr      r8,r0
    2a30:	80 08 00 f4 	lwz     r0,244(r8)
    2a34:	31 20 00 44 	addic   r9,r0,68
		       (x->ealg->alg_key_len+7)/8);
    2a38:	80 01 00 a8 	lwz     r0,168(r1)
    2a3c:	7c 0a 03 78 	mr      r10,r0
    2a40:	80 0a 00 f4 	lwz     r0,244(r10)
    2a44:	7c 08 03 78 	mr      r8,r0
    2a48:	80 08 00 40 	lwz     r0,64(r8)
    2a4c:	30 00 00 07 	addic   r0,r0,7
		key->sadb_key_len = (sizeof(struct sadb_key) +
				     encrypt_key_size) / sizeof(uint64_t);
		key->sadb_key_exttype = SADB_EXT_KEY_ENCRYPT;
		key->sadb_key_bits = x->ealg->alg_key_len;
		key->sadb_key_reserved = 0;
		memcpy(key + 1, x->ealg->alg_key,
    2a50:	54 00 e8 fe 	rlwinm  r0,r0,29,3,31
    2a54:	7d 63 5b 78 	mr      r3,r11
    2a58:	7d 24 4b 78 	mr      r4,r9
    2a5c:	7c 05 03 78 	mr      r5,r0
    2a60:	48 00 00 01 	bl      2a60 <__pfkey_xfrm_state2msg+0xe44>
		       (x->ealg->alg_key_len+7)/8);
	}

	/* sa */
	sa2 = (struct sadb_x_sa2 *)  skb_put(skb, sizeof(struct sadb_x_sa2));
    2a64:	80 61 00 24 	lwz     r3,36(r1)
    2a68:	38 80 00 10 	li      r4,16
    2a6c:	48 00 00 01 	bl      2a6c <__pfkey_xfrm_state2msg+0xe50>
    2a70:	90 61 00 48 	stw     r3,72(r1)
	sa2->sadb_x_sa2_len = sizeof(struct sadb_x_sa2)/sizeof(uint64_t);
    2a74:	80 01 00 48 	lwz     r0,72(r1)
    2a78:	39 20 00 02 	li      r9,2
    2a7c:	7c 0a 03 78 	mr      r10,r0
    2a80:	b1 2a 00 00 	sth     r9,0(r10)
	sa2->sadb_x_sa2_exttype = SADB_X_EXT_SA2;
    2a84:	80 01 00 48 	lwz     r0,72(r1)
    2a88:	39 20 00 13 	li      r9,19
    2a8c:	7c 0b 03 78 	mr      r11,r0
    2a90:	b1 2b 00 02 	sth     r9,2(r11)
	if ((mode = pfkey_mode_from_xfrm(x->props.mode)) < 0) {
    2a94:	80 01 00 a8 	lwz     r0,168(r1)
    2a98:	7c 08 03 78 	mr      r8,r0
    2a9c:	88 08 00 90 	lbz     r0,144(r8)
    2aa0:	54 00 06 3e 	clrlwi  r0,r0,24
    2aa4:	90 01 00 94 	stw     r0,148(r1)
	return PFKEY_ALIGN8(pfkey_sockaddr_len(family));
}

static inline int pfkey_mode_from_xfrm(int mode)
{
	switch(mode) {
    2aa8:	80 01 00 94 	lwz     r0,148(r1)
    2aac:	2f 80 00 01 	cmpwi   cr7,r0,1
    2ab0:	41 9e 00 1c 	beq-    cr7,2acc <__pfkey_xfrm_state2msg+0xeb0>
    2ab4:	2f 80 00 04 	cmpwi   cr7,r0,4
    2ab8:	41 9e 00 1c 	beq-    cr7,2ad4 <__pfkey_xfrm_state2msg+0xeb8>
    2abc:	2f 80 00 00 	cmpwi   cr7,r0,0
    2ac0:	40 9e 00 1c 	bne-    cr7,2adc <__pfkey_xfrm_state2msg+0xec0>
	case XFRM_MODE_TRANSPORT:
		return IPSEC_MODE_TRANSPORT;
    2ac4:	38 00 00 01 	li      r0,1
    2ac8:	48 00 00 18 	b       2ae0 <__pfkey_xfrm_state2msg+0xec4>
	case XFRM_MODE_TUNNEL:
		return IPSEC_MODE_TUNNEL;
    2acc:	38 00 00 02 	li      r0,2
    2ad0:	48 00 00 10 	b       2ae0 <__pfkey_xfrm_state2msg+0xec4>
	case XFRM_MODE_BEET:
		return IPSEC_MODE_BEET;
    2ad4:	38 00 00 03 	li      r0,3
    2ad8:	48 00 00 08 	b       2ae0 <__pfkey_xfrm_state2msg+0xec4>
	default:
		return -1;
    2adc:	38 00 ff ff 	li      r0,-1

	/* sa */
	sa2 = (struct sadb_x_sa2 *)  skb_put(skb, sizeof(struct sadb_x_sa2));
	sa2->sadb_x_sa2_len = sizeof(struct sadb_x_sa2)/sizeof(uint64_t);
	sa2->sadb_x_sa2_exttype = SADB_X_EXT_SA2;
	if ((mode = pfkey_mode_from_xfrm(x->props.mode)) < 0) {
    2ae0:	90 01 00 4c 	stw     r0,76(r1)
    2ae4:	80 01 00 4c 	lwz     r0,76(r1)
    2ae8:	2f 80 00 00 	cmpwi   cr7,r0,0
    2aec:	40 9c 00 1c 	bge-    cr7,2b08 <__pfkey_xfrm_state2msg+0xeec>
		kfree_skb(skb);
    2af0:	80 61 00 24 	lwz     r3,36(r1)
    2af4:	48 00 00 01 	bl      2af4 <__pfkey_xfrm_state2msg+0xed8>
    2af8:	38 00 ff ea 	li      r0,-22
    2afc:	90 01 00 98 	stw     r0,152(r1)
    2b00:	80 01 00 98 	lwz     r0,152(r1)
		return ERR_PTR(-EINVAL);
    2b04:	48 00 02 94 	b       2d98 <__pfkey_xfrm_state2msg+0x117c>
	}
	sa2->sadb_x_sa2_mode = mode;
    2b08:	80 01 00 4c 	lwz     r0,76(r1)
    2b0c:	54 09 06 3e 	clrlwi  r9,r0,24
    2b10:	80 01 00 48 	lwz     r0,72(r1)
    2b14:	7c 0a 03 78 	mr      r10,r0
    2b18:	99 2a 00 04 	stb     r9,4(r10)
	sa2->sadb_x_sa2_reserved1 = 0;
    2b1c:	80 01 00 48 	lwz     r0,72(r1)
    2b20:	39 20 00 00 	li      r9,0
    2b24:	7c 0b 03 78 	mr      r11,r0
    2b28:	99 2b 00 05 	stb     r9,5(r11)
	sa2->sadb_x_sa2_reserved2 = 0;
    2b2c:	80 01 00 48 	lwz     r0,72(r1)
    2b30:	39 20 00 00 	li      r9,0
    2b34:	7c 08 03 78 	mr      r8,r0
    2b38:	b1 28 00 06 	sth     r9,6(r8)
	sa2->sadb_x_sa2_sequence = 0;
    2b3c:	80 01 00 48 	lwz     r0,72(r1)
    2b40:	39 20 00 00 	li      r9,0
    2b44:	7c 0a 03 78 	mr      r10,r0
    2b48:	91 2a 00 08 	stw     r9,8(r10)
	sa2->sadb_x_sa2_reqid = x->props.reqid;
    2b4c:	80 01 00 a8 	lwz     r0,168(r1)
    2b50:	7c 0b 03 78 	mr      r11,r0
    2b54:	81 2b 00 8c 	lwz     r9,140(r11)
    2b58:	80 01 00 48 	lwz     r0,72(r1)
    2b5c:	7c 08 03 78 	mr      r8,r0
    2b60:	91 28 00 0c 	stw     r9,12(r8)

	if (natt && natt->encap_type) {
    2b64:	80 01 00 18 	lwz     r0,24(r1)
    2b68:	2f 80 00 00 	cmpwi   cr7,r0,0
    2b6c:	41 9e 01 54 	beq-    cr7,2cc0 <__pfkey_xfrm_state2msg+0x10a4>
    2b70:	80 01 00 18 	lwz     r0,24(r1)
    2b74:	7c 09 03 78 	mr      r9,r0
    2b78:	a0 09 00 00 	lhz     r0,0(r9)
    2b7c:	54 00 04 3e 	clrlwi  r0,r0,16
    2b80:	2f 80 00 00 	cmpwi   cr7,r0,0
    2b84:	41 9e 01 3c 	beq-    cr7,2cc0 <__pfkey_xfrm_state2msg+0x10a4>
		struct sadb_x_nat_t_type *n_type;
		struct sadb_x_nat_t_port *n_port;

		/* type */
		n_type = (struct sadb_x_nat_t_type*) skb_put(skb, sizeof(*n_type));
    2b88:	80 61 00 24 	lwz     r3,36(r1)
    2b8c:	38 80 00 08 	li      r4,8
    2b90:	48 00 00 01 	bl      2b90 <__pfkey_xfrm_state2msg+0xf74>
    2b94:	90 61 00 50 	stw     r3,80(r1)
		n_type->sadb_x_nat_t_type_len = sizeof(*n_type)/sizeof(uint64_t);
    2b98:	80 01 00 50 	lwz     r0,80(r1)
    2b9c:	39 20 00 01 	li      r9,1
    2ba0:	7c 0a 03 78 	mr      r10,r0
    2ba4:	b1 2a 00 00 	sth     r9,0(r10)
		n_type->sadb_x_nat_t_type_exttype = SADB_X_EXT_NAT_T_TYPE;
    2ba8:	80 01 00 50 	lwz     r0,80(r1)
    2bac:	39 20 00 14 	li      r9,20
    2bb0:	7c 0b 03 78 	mr      r11,r0
    2bb4:	b1 2b 00 02 	sth     r9,2(r11)
		n_type->sadb_x_nat_t_type_type = natt->encap_type;
    2bb8:	80 01 00 18 	lwz     r0,24(r1)
    2bbc:	7c 08 03 78 	mr      r8,r0
    2bc0:	a0 08 00 00 	lhz     r0,0(r8)
    2bc4:	54 00 04 3e 	clrlwi  r0,r0,16
    2bc8:	54 09 06 3e 	clrlwi  r9,r0,24
    2bcc:	80 01 00 50 	lwz     r0,80(r1)
    2bd0:	7c 0a 03 78 	mr      r10,r0
    2bd4:	99 2a 00 04 	stb     r9,4(r10)
		n_type->sadb_x_nat_t_type_reserved[0] = 0;
    2bd8:	80 01 00 50 	lwz     r0,80(r1)
    2bdc:	39 20 00 00 	li      r9,0
    2be0:	7c 0b 03 78 	mr      r11,r0
    2be4:	99 2b 00 05 	stb     r9,5(r11)
		n_type->sadb_x_nat_t_type_reserved[1] = 0;
    2be8:	80 01 00 50 	lwz     r0,80(r1)
    2bec:	39 20 00 00 	li      r9,0
    2bf0:	7c 08 03 78 	mr      r8,r0
    2bf4:	99 28 00 06 	stb     r9,6(r8)
		n_type->sadb_x_nat_t_type_reserved[2] = 0;
    2bf8:	80 01 00 50 	lwz     r0,80(r1)
    2bfc:	39 20 00 00 	li      r9,0
    2c00:	7c 0a 03 78 	mr      r10,r0
    2c04:	99 2a 00 07 	stb     r9,7(r10)

		/* source port */
		n_port = (struct sadb_x_nat_t_port*) skb_put(skb, sizeof (*n_port));
    2c08:	80 61 00 24 	lwz     r3,36(r1)
    2c0c:	38 80 00 08 	li      r4,8
    2c10:	48 00 00 01 	bl      2c10 <__pfkey_xfrm_state2msg+0xff4>
    2c14:	90 61 00 54 	stw     r3,84(r1)
		n_port->sadb_x_nat_t_port_len = sizeof(*n_port)/sizeof(uint64_t);
    2c18:	80 01 00 54 	lwz     r0,84(r1)
    2c1c:	39 20 00 01 	li      r9,1
    2c20:	7c 0b 03 78 	mr      r11,r0
    2c24:	b1 2b 00 00 	sth     r9,0(r11)
		n_port->sadb_x_nat_t_port_exttype = SADB_X_EXT_NAT_T_SPORT;
    2c28:	80 01 00 54 	lwz     r0,84(r1)
    2c2c:	39 20 00 15 	li      r9,21
    2c30:	7c 08 03 78 	mr      r8,r0
    2c34:	b1 28 00 02 	sth     r9,2(r8)
		n_port->sadb_x_nat_t_port_port = natt->encap_sport;
    2c38:	80 01 00 18 	lwz     r0,24(r1)
    2c3c:	7c 09 03 78 	mr      r9,r0
    2c40:	a0 09 00 02 	lhz     r0,2(r9)
    2c44:	54 09 04 3e 	clrlwi  r9,r0,16
    2c48:	80 01 00 54 	lwz     r0,84(r1)
    2c4c:	7c 0a 03 78 	mr      r10,r0
    2c50:	b1 2a 00 04 	sth     r9,4(r10)
		n_port->sadb_x_nat_t_port_reserved = 0;
    2c54:	80 01 00 54 	lwz     r0,84(r1)
    2c58:	39 20 00 00 	li      r9,0
    2c5c:	7c 0b 03 78 	mr      r11,r0
    2c60:	b1 2b 00 06 	sth     r9,6(r11)

		/* dest port */
		n_port = (struct sadb_x_nat_t_port*) skb_put(skb, sizeof (*n_port));
    2c64:	80 61 00 24 	lwz     r3,36(r1)
    2c68:	38 80 00 08 	li      r4,8
    2c6c:	48 00 00 01 	bl      2c6c <__pfkey_xfrm_state2msg+0x1050>
    2c70:	90 61 00 54 	stw     r3,84(r1)
		n_port->sadb_x_nat_t_port_len = sizeof(*n_port)/sizeof(uint64_t);
    2c74:	80 01 00 54 	lwz     r0,84(r1)
    2c78:	39 20 00 01 	li      r9,1
    2c7c:	7c 08 03 78 	mr      r8,r0
    2c80:	b1 28 00 00 	sth     r9,0(r8)
		n_port->sadb_x_nat_t_port_exttype = SADB_X_EXT_NAT_T_DPORT;
    2c84:	80 01 00 54 	lwz     r0,84(r1)
    2c88:	39 20 00 16 	li      r9,22
    2c8c:	7c 0a 03 78 	mr      r10,r0
    2c90:	b1 2a 00 02 	sth     r9,2(r10)
		n_port->sadb_x_nat_t_port_port = natt->encap_dport;
    2c94:	80 01 00 18 	lwz     r0,24(r1)
    2c98:	7c 0b 03 78 	mr      r11,r0
    2c9c:	a0 0b 00 04 	lhz     r0,4(r11)
    2ca0:	54 09 04 3e 	clrlwi  r9,r0,16
    2ca4:	80 01 00 54 	lwz     r0,84(r1)
    2ca8:	7c 08 03 78 	mr      r8,r0
    2cac:	b1 28 00 04 	sth     r9,4(r8)
		n_port->sadb_x_nat_t_port_reserved = 0;
    2cb0:	80 01 00 54 	lwz     r0,84(r1)
    2cb4:	39 20 00 00 	li      r9,0
    2cb8:	7c 0a 03 78 	mr      r10,r0
    2cbc:	b1 2a 00 06 	sth     r9,6(r10)
	}

	/* security context */
	if (xfrm_ctx) {
    2cc0:	80 01 00 20 	lwz     r0,32(r1)
    2cc4:	2f 80 00 00 	cmpwi   cr7,r0,0
    2cc8:	41 9e 00 cc 	beq-    cr7,2d94 <__pfkey_xfrm_state2msg+0x1178>
		sec_ctx = (struct sadb_x_sec_ctx *) skb_put(skb,
    2ccc:	80 01 00 08 	lwz     r0,8(r1)
    2cd0:	30 00 00 08 	addic   r0,r0,8
    2cd4:	80 61 00 24 	lwz     r3,36(r1)
    2cd8:	7c 04 03 78 	mr      r4,r0
    2cdc:	48 00 00 01 	bl      2cdc <__pfkey_xfrm_state2msg+0x10c0>
    2ce0:	90 61 00 58 	stw     r3,88(r1)
				sizeof(struct sadb_x_sec_ctx) + ctx_size);
		sec_ctx->sadb_x_sec_len =
		  (sizeof(struct sadb_x_sec_ctx) + ctx_size) / sizeof(uint64_t);
    2ce4:	80 01 00 08 	lwz     r0,8(r1)
    2ce8:	30 00 00 08 	addic   r0,r0,8
    2cec:	54 00 e8 fe 	rlwinm  r0,r0,29,3,31

	/* security context */
	if (xfrm_ctx) {
		sec_ctx = (struct sadb_x_sec_ctx *) skb_put(skb,
				sizeof(struct sadb_x_sec_ctx) + ctx_size);
		sec_ctx->sadb_x_sec_len =
    2cf0:	54 09 04 3e 	clrlwi  r9,r0,16
    2cf4:	80 01 00 58 	lwz     r0,88(r1)
    2cf8:	7c 0b 03 78 	mr      r11,r0
    2cfc:	b1 2b 00 00 	sth     r9,0(r11)
		  (sizeof(struct sadb_x_sec_ctx) + ctx_size) / sizeof(uint64_t);
		sec_ctx->sadb_x_sec_exttype = SADB_X_EXT_SEC_CTX;
    2d00:	80 01 00 58 	lwz     r0,88(r1)
    2d04:	39 20 00 18 	li      r9,24
    2d08:	7c 08 03 78 	mr      r8,r0
    2d0c:	b1 28 00 02 	sth     r9,2(r8)
		sec_ctx->sadb_x_ctx_doi = xfrm_ctx->ctx_doi;
    2d10:	80 01 00 20 	lwz     r0,32(r1)
    2d14:	7c 09 03 78 	mr      r9,r0
    2d18:	88 09 00 00 	lbz     r0,0(r9)
    2d1c:	54 09 06 3e 	clrlwi  r9,r0,24
    2d20:	80 01 00 58 	lwz     r0,88(r1)
    2d24:	7c 0a 03 78 	mr      r10,r0
    2d28:	99 2a 00 05 	stb     r9,5(r10)
		sec_ctx->sadb_x_ctx_alg = xfrm_ctx->ctx_alg;
    2d2c:	80 01 00 20 	lwz     r0,32(r1)
    2d30:	7c 0b 03 78 	mr      r11,r0
    2d34:	88 0b 00 01 	lbz     r0,1(r11)
    2d38:	54 09 06 3e 	clrlwi  r9,r0,24
    2d3c:	80 01 00 58 	lwz     r0,88(r1)
    2d40:	7c 08 03 78 	mr      r8,r0
    2d44:	99 28 00 04 	stb     r9,4(r8)
		sec_ctx->sadb_x_ctx_len = xfrm_ctx->ctx_len;
    2d48:	80 01 00 20 	lwz     r0,32(r1)
    2d4c:	7c 09 03 78 	mr      r9,r0
    2d50:	a0 09 00 02 	lhz     r0,2(r9)
    2d54:	54 09 04 3e 	clrlwi  r9,r0,16
    2d58:	80 01 00 58 	lwz     r0,88(r1)
    2d5c:	7c 0a 03 78 	mr      r10,r0
    2d60:	b1 2a 00 06 	sth     r9,6(r10)
		memcpy(sec_ctx + 1, xfrm_ctx->ctx_str,
    2d64:	80 01 00 58 	lwz     r0,88(r1)
    2d68:	31 60 00 08 	addic   r11,r0,8
    2d6c:	80 01 00 20 	lwz     r0,32(r1)
    2d70:	31 20 00 08 	addic   r9,r0,8
		       xfrm_ctx->ctx_len);
    2d74:	80 01 00 20 	lwz     r0,32(r1)
    2d78:	7c 08 03 78 	mr      r8,r0
    2d7c:	a0 08 00 02 	lhz     r0,2(r8)
    2d80:	54 00 04 3e 	clrlwi  r0,r0,16
		  (sizeof(struct sadb_x_sec_ctx) + ctx_size) / sizeof(uint64_t);
		sec_ctx->sadb_x_sec_exttype = SADB_X_EXT_SEC_CTX;
		sec_ctx->sadb_x_ctx_doi = xfrm_ctx->ctx_doi;
		sec_ctx->sadb_x_ctx_alg = xfrm_ctx->ctx_alg;
		sec_ctx->sadb_x_ctx_len = xfrm_ctx->ctx_len;
		memcpy(sec_ctx + 1, xfrm_ctx->ctx_str,
    2d84:	7d 63 5b 78 	mr      r3,r11
    2d88:	7d 24 4b 78 	mr      r4,r9
    2d8c:	7c 05 03 78 	mr      r5,r0
    2d90:	48 00 00 01 	bl      2d90 <__pfkey_xfrm_state2msg+0x1174>
		       xfrm_ctx->ctx_len);
	}

	return skb;
    2d94:	80 01 00 24 	lwz     r0,36(r1)
}
    2d98:	7c 03 03 78 	mr      r3,r0
    2d9c:	80 01 00 c4 	lwz     r0,196(r1)
    2da0:	7c 08 03 a6 	mtlr    r0
    2da4:	38 21 00 c0 	addi    r1,r1,192
    2da8:	4e 80 00 20 	blr

00002dac <pfkey_msg2xfrm_state>:
}

static struct xfrm_state * pfkey_msg2xfrm_state(struct net *net,
						struct sadb_msg *hdr,
						void **ext_hdrs)
{
    2dac:	94 21 ff 00 	stwu    r1,-256(r1)
    2db0:	7c 08 02 a6 	mflr    r0
    2db4:	90 01 01 04 	stw     r0,260(r1)
    2db8:	bf 81 00 f0 	stmw    r28,240(r1)
    2dbc:	90 61 00 d8 	stw     r3,216(r1)
    2dc0:	90 81 00 dc 	stw     r4,220(r1)
    2dc4:	90 a1 00 e0 	stw     r5,224(r1)
	struct sadb_x_sec_ctx *sec_ctx;
	uint16_t proto;
	int err;


	sa = (struct sadb_sa *) ext_hdrs[SADB_EXT_SA-1];
    2dc8:	80 01 00 e0 	lwz     r0,224(r1)
    2dcc:	7c 07 03 78 	mr      r7,r0
    2dd0:	80 07 00 00 	lwz     r0,0(r7)
    2dd4:	90 01 00 14 	stw     r0,20(r1)
	if (!sa ||
    2dd8:	80 01 00 14 	lwz     r0,20(r1)
    2ddc:	2f 80 00 00 	cmpwi   cr7,r0,0
    2de0:	41 9e 00 3c 	beq-    cr7,2e1c <pfkey_msg2xfrm_state+0x70>
	    !present_and_same_family(ext_hdrs[SADB_EXT_ADDRESS_SRC-1],
    2de4:	80 01 00 e0 	lwz     r0,224(r1)
    2de8:	30 00 00 10 	addic   r0,r0,16
    2dec:	7c 08 03 78 	mr      r8,r0
    2df0:	81 28 00 00 	lwz     r9,0(r8)
				     ext_hdrs[SADB_EXT_ADDRESS_DST-1]))
    2df4:	80 01 00 e0 	lwz     r0,224(r1)
    2df8:	30 00 00 14 	addic   r0,r0,20
	int err;


	sa = (struct sadb_sa *) ext_hdrs[SADB_EXT_SA-1];
	if (!sa ||
	    !present_and_same_family(ext_hdrs[SADB_EXT_ADDRESS_SRC-1],
    2dfc:	7c 0a 03 78 	mr      r10,r0
    2e00:	80 0a 00 00 	lwz     r0,0(r10)
    2e04:	7d 23 4b 78 	mr      r3,r9
    2e08:	7c 04 03 78 	mr      r4,r0
    2e0c:	4b ff e5 9d 	bl      13a8 <present_and_same_family>
    2e10:	7c 60 1b 78 	mr      r0,r3
	uint16_t proto;
	int err;


	sa = (struct sadb_sa *) ext_hdrs[SADB_EXT_SA-1];
	if (!sa ||
    2e14:	2f 80 00 00 	cmpwi   cr7,r0,0
    2e18:	40 9e 00 14 	bne-    cr7,2e2c <pfkey_msg2xfrm_state+0x80>
    2e1c:	38 00 ff ea 	li      r0,-22
    2e20:	90 01 00 58 	stw     r0,88(r1)
    2e24:	80 01 00 58 	lwz     r0,88(r1)
	    !present_and_same_family(ext_hdrs[SADB_EXT_ADDRESS_SRC-1],
				     ext_hdrs[SADB_EXT_ADDRESS_DST-1]))
		return ERR_PTR(-EINVAL);
    2e28:	48 00 14 00 	b       4228 <pfkey_msg2xfrm_state+0x147c>
	if (hdr->sadb_msg_satype == SADB_SATYPE_ESP &&
    2e2c:	80 01 00 dc 	lwz     r0,220(r1)
    2e30:	7c 0b 03 78 	mr      r11,r0
    2e34:	88 0b 00 03 	lbz     r0,3(r11)
    2e38:	54 00 06 3e 	clrlwi  r0,r0,24
    2e3c:	2f 80 00 03 	cmpwi   cr7,r0,3
    2e40:	40 9e 00 2c 	bne-    cr7,2e6c <pfkey_msg2xfrm_state+0xc0>
	    !ext_hdrs[SADB_EXT_KEY_ENCRYPT-1])
    2e44:	80 01 00 e0 	lwz     r0,224(r1)
    2e48:	30 00 00 20 	addic   r0,r0,32
    2e4c:	7c 07 03 78 	mr      r7,r0
    2e50:	80 07 00 00 	lwz     r0,0(r7)
	sa = (struct sadb_sa *) ext_hdrs[SADB_EXT_SA-1];
	if (!sa ||
	    !present_and_same_family(ext_hdrs[SADB_EXT_ADDRESS_SRC-1],
				     ext_hdrs[SADB_EXT_ADDRESS_DST-1]))
		return ERR_PTR(-EINVAL);
	if (hdr->sadb_msg_satype == SADB_SATYPE_ESP &&
    2e54:	2f 80 00 00 	cmpwi   cr7,r0,0
    2e58:	40 9e 00 14 	bne-    cr7,2e6c <pfkey_msg2xfrm_state+0xc0>
    2e5c:	38 00 ff ea 	li      r0,-22
    2e60:	90 01 00 5c 	stw     r0,92(r1)
    2e64:	80 01 00 5c 	lwz     r0,92(r1)
	    !ext_hdrs[SADB_EXT_KEY_ENCRYPT-1])
		return ERR_PTR(-EINVAL);
    2e68:	48 00 13 c0 	b       4228 <pfkey_msg2xfrm_state+0x147c>
	if (hdr->sadb_msg_satype == SADB_SATYPE_AH &&
    2e6c:	80 01 00 dc 	lwz     r0,220(r1)
    2e70:	7c 08 03 78 	mr      r8,r0
    2e74:	88 08 00 03 	lbz     r0,3(r8)
    2e78:	54 00 06 3e 	clrlwi  r0,r0,24
    2e7c:	2f 80 00 02 	cmpwi   cr7,r0,2
    2e80:	40 9e 00 2c 	bne-    cr7,2eac <pfkey_msg2xfrm_state+0x100>
	    !ext_hdrs[SADB_EXT_KEY_AUTH-1])
    2e84:	80 01 00 e0 	lwz     r0,224(r1)
    2e88:	30 00 00 1c 	addic   r0,r0,28
    2e8c:	7c 09 03 78 	mr      r9,r0
    2e90:	80 09 00 00 	lwz     r0,0(r9)
				     ext_hdrs[SADB_EXT_ADDRESS_DST-1]))
		return ERR_PTR(-EINVAL);
	if (hdr->sadb_msg_satype == SADB_SATYPE_ESP &&
	    !ext_hdrs[SADB_EXT_KEY_ENCRYPT-1])
		return ERR_PTR(-EINVAL);
	if (hdr->sadb_msg_satype == SADB_SATYPE_AH &&
    2e94:	2f 80 00 00 	cmpwi   cr7,r0,0
    2e98:	40 9e 00 14 	bne-    cr7,2eac <pfkey_msg2xfrm_state+0x100>
    2e9c:	38 00 ff ea 	li      r0,-22
    2ea0:	90 01 00 60 	stw     r0,96(r1)
    2ea4:	80 01 00 60 	lwz     r0,96(r1)
	    !ext_hdrs[SADB_EXT_KEY_AUTH-1])
		return ERR_PTR(-EINVAL);
    2ea8:	48 00 13 80 	b       4228 <pfkey_msg2xfrm_state+0x147c>
	if (!!ext_hdrs[SADB_EXT_LIFETIME_HARD-1] !=
    2eac:	80 01 00 e0 	lwz     r0,224(r1)
    2eb0:	30 00 00 08 	addic   r0,r0,8
    2eb4:	7c 0a 03 78 	mr      r10,r0
    2eb8:	80 0a 00 00 	lwz     r0,0(r10)
    2ebc:	2f 80 00 00 	cmpwi   cr7,r0,0
    2ec0:	7c 00 00 26 	mfcr    r0
    2ec4:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
    2ec8:	68 00 00 01 	xori    r0,r0,1
    2ecc:	54 09 06 3e 	clrlwi  r9,r0,24
	    !!ext_hdrs[SADB_EXT_LIFETIME_SOFT-1])
    2ed0:	80 01 00 e0 	lwz     r0,224(r1)
    2ed4:	30 00 00 0c 	addic   r0,r0,12
    2ed8:	7c 0b 03 78 	mr      r11,r0
    2edc:	80 0b 00 00 	lwz     r0,0(r11)
    2ee0:	2f 80 00 00 	cmpwi   cr7,r0,0
    2ee4:	7c 00 00 26 	mfcr    r0
    2ee8:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
    2eec:	68 00 00 01 	xori    r0,r0,1
    2ef0:	54 00 06 3e 	clrlwi  r0,r0,24
	    !ext_hdrs[SADB_EXT_KEY_ENCRYPT-1])
		return ERR_PTR(-EINVAL);
	if (hdr->sadb_msg_satype == SADB_SATYPE_AH &&
	    !ext_hdrs[SADB_EXT_KEY_AUTH-1])
		return ERR_PTR(-EINVAL);
	if (!!ext_hdrs[SADB_EXT_LIFETIME_HARD-1] !=
    2ef4:	7d 20 02 78 	xor     r0,r9,r0
    2ef8:	54 00 06 3e 	clrlwi  r0,r0,24
    2efc:	2f 80 00 00 	cmpwi   cr7,r0,0
    2f00:	41 9e 00 14 	beq-    cr7,2f14 <pfkey_msg2xfrm_state+0x168>
    2f04:	38 00 ff ea 	li      r0,-22
    2f08:	90 01 00 64 	stw     r0,100(r1)
    2f0c:	80 01 00 64 	lwz     r0,100(r1)
	    !!ext_hdrs[SADB_EXT_LIFETIME_SOFT-1])
		return ERR_PTR(-EINVAL);
    2f10:	48 00 13 18 	b       4228 <pfkey_msg2xfrm_state+0x147c>

	proto = pfkey_satype2proto(hdr->sadb_msg_satype);
    2f14:	80 01 00 dc 	lwz     r0,220(r1)
    2f18:	7c 07 03 78 	mr      r7,r0
    2f1c:	88 07 00 03 	lbz     r0,3(r7)
    2f20:	54 00 06 3e 	clrlwi  r0,r0,24
    2f24:	7c 03 03 78 	mr      r3,r0
    2f28:	4b ff e7 d1 	bl      16f8 <pfkey_satype2proto>
    2f2c:	7c 60 1b 78 	mr      r0,r3
    2f30:	b0 01 00 18 	sth     r0,24(r1)
	if (proto == 0)
    2f34:	a0 01 00 18 	lhz     r0,24(r1)
    2f38:	54 00 04 3e 	clrlwi  r0,r0,16
    2f3c:	2f 80 00 00 	cmpwi   cr7,r0,0
    2f40:	40 9e 00 14 	bne-    cr7,2f54 <pfkey_msg2xfrm_state+0x1a8>
    2f44:	38 00 ff ea 	li      r0,-22
    2f48:	90 01 00 68 	stw     r0,104(r1)
    2f4c:	80 01 00 68 	lwz     r0,104(r1)
		return ERR_PTR(-EINVAL);
    2f50:	48 00 12 d8 	b       4228 <pfkey_msg2xfrm_state+0x147c>

	/* default error is no buffer space */
	err = -ENOBUFS;
    2f54:	38 00 ff 97 	li      r0,-105
    2f58:	90 01 00 08 	stw     r0,8(r1)
   not true.

	   However, KAME setkey always uses SADB_SASTATE_LARVAL.
	   Hence, we have to _ignore_ sadb_sa_state, which is also reasonable.
	 */
	if (sa->sadb_sa_auth > SADB_AALG_MAX ||
    2f5c:	80 01 00 14 	lwz     r0,20(r1)
    2f60:	7c 08 03 78 	mr      r8,r0
    2f64:	88 08 00 0a 	lbz     r0,10(r8)
    2f68:	54 00 06 3e 	clrlwi  r0,r0,24
    2f6c:	2b 80 00 fb 	cmplwi  cr7,r0,251
    2f70:	41 9d 00 4c 	bgt-    cr7,2fbc <pfkey_msg2xfrm_state+0x210>
	    (hdr->sadb_msg_satype == SADB_X_SATYPE_IPCOMP &&
    2f74:	80 01 00 dc 	lwz     r0,220(r1)
    2f78:	7c 09 03 78 	mr      r9,r0
    2f7c:	88 09 00 03 	lbz     r0,3(r9)
    2f80:	54 00 06 3e 	clrlwi  r0,r0,24
   not true.

	   However, KAME setkey always uses SADB_SASTATE_LARVAL.
	   Hence, we have to _ignore_ sadb_sa_state, which is also reasonable.
	 */
	if (sa->sadb_sa_auth > SADB_AALG_MAX ||
    2f84:	2f 80 00 09 	cmpwi   cr7,r0,9
    2f88:	40 9e 00 1c 	bne-    cr7,2fa4 <pfkey_msg2xfrm_state+0x1f8>
	    (hdr->sadb_msg_satype == SADB_X_SATYPE_IPCOMP &&
	     sa->sadb_sa_encrypt > SADB_X_CALG_MAX) ||
    2f8c:	80 01 00 14 	lwz     r0,20(r1)
    2f90:	7c 0a 03 78 	mr      r10,r0
    2f94:	88 0a 00 0b 	lbz     r0,11(r10)
    2f98:	54 00 06 3e 	clrlwi  r0,r0,24

	   However, KAME setkey always uses SADB_SASTATE_LARVAL.
	   Hence, we have to _ignore_ sadb_sa_state, which is also reasonable.
	 */
	if (sa->sadb_sa_auth > SADB_AALG_MAX ||
	    (hdr->sadb_msg_satype == SADB_X_SATYPE_IPCOMP &&
    2f9c:	2b 80 00 04 	cmplwi  cr7,r0,4
    2fa0:	41 9d 00 1c 	bgt-    cr7,2fbc <pfkey_msg2xfrm_state+0x210>
	     sa->sadb_sa_encrypt > SADB_X_CALG_MAX) ||
	    sa->sadb_sa_encrypt > SADB_EALG_MAX)
    2fa4:	80 01 00 14 	lwz     r0,20(r1)
    2fa8:	7c 0b 03 78 	mr      r11,r0
    2fac:	88 0b 00 0b 	lbz     r0,11(r11)
    2fb0:	54 00 06 3e 	clrlwi  r0,r0,24
	   However, KAME setkey always uses SADB_SASTATE_LARVAL.
	   Hence, we have to _ignore_ sadb_sa_state, which is also reasonable.
	 */
	if (sa->sadb_sa_auth > SADB_AALG_MAX ||
	    (hdr->sadb_msg_satype == SADB_X_SATYPE_IPCOMP &&
	     sa->sadb_sa_encrypt > SADB_X_CALG_MAX) ||
    2fb4:	2b 80 00 fd 	cmplwi  cr7,r0,253
    2fb8:	40 9d 00 14 	ble-    cr7,2fcc <pfkey_msg2xfrm_state+0x220>
    2fbc:	38 00 ff ea 	li      r0,-22
    2fc0:	90 01 00 6c 	stw     r0,108(r1)
    2fc4:	80 01 00 6c 	lwz     r0,108(r1)
	    sa->sadb_sa_encrypt > SADB_EALG_MAX)
		return ERR_PTR(-EINVAL);
    2fc8:	48 00 12 60 	b       4228 <pfkey_msg2xfrm_state+0x147c>
	key = (struct sadb_key*) ext_hdrs[SADB_EXT_KEY_AUTH-1];
    2fcc:	80 01 00 e0 	lwz     r0,224(r1)
    2fd0:	7c 07 03 78 	mr      r7,r0
    2fd4:	80 07 00 1c 	lwz     r0,28(r7)
    2fd8:	90 01 00 1c 	stw     r0,28(r1)
	if (key != NULL &&
    2fdc:	80 01 00 1c 	lwz     r0,28(r1)
    2fe0:	2f 80 00 00 	cmpwi   cr7,r0,0
    2fe4:	41 9e 00 84 	beq-    cr7,3068 <pfkey_msg2xfrm_state+0x2bc>
	    sa->sadb_sa_auth != SADB_X_AALG_NULL &&
    2fe8:	80 01 00 14 	lwz     r0,20(r1)
    2fec:	7c 08 03 78 	mr      r8,r0
    2ff0:	88 08 00 0a 	lbz     r0,10(r8)
    2ff4:	54 00 06 3e 	clrlwi  r0,r0,24
	    (hdr->sadb_msg_satype == SADB_X_SATYPE_IPCOMP &&
	     sa->sadb_sa_encrypt > SADB_X_CALG_MAX) ||
	    sa->sadb_sa_encrypt > SADB_EALG_MAX)
		return ERR_PTR(-EINVAL);
	key = (struct sadb_key*) ext_hdrs[SADB_EXT_KEY_AUTH-1];
	if (key != NULL &&
    2ff8:	2f 80 00 fb 	cmpwi   cr7,r0,251
    2ffc:	41 9e 00 6c 	beq-    cr7,3068 <pfkey_msg2xfrm_state+0x2bc>
	    sa->sadb_sa_auth != SADB_X_AALG_NULL &&
	    ((key->sadb_key_bits+7) / 8 == 0 ||
    3000:	80 01 00 1c 	lwz     r0,28(r1)
    3004:	7c 09 03 78 	mr      r9,r0
    3008:	a0 09 00 04 	lhz     r0,4(r9)
    300c:	54 00 04 3e 	clrlwi  r0,r0,16
    3010:	30 00 00 0e 	addic   r0,r0,14
	     sa->sadb_sa_encrypt > SADB_X_CALG_MAX) ||
	    sa->sadb_sa_encrypt > SADB_EALG_MAX)
		return ERR_PTR(-EINVAL);
	key = (struct sadb_key*) ext_hdrs[SADB_EXT_KEY_AUTH-1];
	if (key != NULL &&
	    sa->sadb_sa_auth != SADB_X_AALG_NULL &&
    3014:	2b 80 00 0e 	cmplwi  cr7,r0,14
    3018:	40 9d 00 40 	ble-    cr7,3058 <pfkey_msg2xfrm_state+0x2ac>
	    ((key->sadb_key_bits+7) / 8 == 0 ||
	     (key->sadb_key_bits+7) / 8 > key->sadb_key_len * sizeof(uint64_t)))
    301c:	80 01 00 1c 	lwz     r0,28(r1)
    3020:	7c 0a 03 78 	mr      r10,r0
    3024:	a0 0a 00 04 	lhz     r0,4(r10)
    3028:	54 00 04 3e 	clrlwi  r0,r0,16
    302c:	30 00 00 07 	addic   r0,r0,7
    3030:	7c 00 1e 70 	srawi   r0,r0,3
    3034:	7c 00 01 94 	addze   r0,r0
    3038:	7c 09 03 78 	mr      r9,r0
    303c:	80 01 00 1c 	lwz     r0,28(r1)
    3040:	7c 0b 03 78 	mr      r11,r0
    3044:	a0 0b 00 00 	lhz     r0,0(r11)
    3048:	54 00 04 3e 	clrlwi  r0,r0,16
    304c:	54 00 18 38 	rlwinm  r0,r0,3,0,28
	    sa->sadb_sa_encrypt > SADB_EALG_MAX)
		return ERR_PTR(-EINVAL);
	key = (struct sadb_key*) ext_hdrs[SADB_EXT_KEY_AUTH-1];
	if (key != NULL &&
	    sa->sadb_sa_auth != SADB_X_AALG_NULL &&
	    ((key->sadb_key_bits+7) / 8 == 0 ||
    3050:	7f 89 00 40 	cmplw   cr7,r9,r0
    3054:	40 9d 00 14 	ble-    cr7,3068 <pfkey_msg2xfrm_state+0x2bc>
    3058:	38 00 ff ea 	li      r0,-22
    305c:	90 01 00 70 	stw     r0,112(r1)
    3060:	80 01 00 70 	lwz     r0,112(r1)
	     (key->sadb_key_bits+7) / 8 > key->sadb_key_len * sizeof(uint64_t)))
		return ERR_PTR(-EINVAL);
    3064:	48 00 11 c4 	b       4228 <pfkey_msg2xfrm_state+0x147c>
	key = ext_hdrs[SADB_EXT_KEY_ENCRYPT-1];
    3068:	80 01 00 e0 	lwz     r0,224(r1)
    306c:	7c 07 03 78 	mr      r7,r0
    3070:	80 07 00 20 	lwz     r0,32(r7)
    3074:	90 01 00 1c 	stw     r0,28(r1)
	if (key != NULL &&
    3078:	80 01 00 1c 	lwz     r0,28(r1)
    307c:	2f 80 00 00 	cmpwi   cr7,r0,0
    3080:	41 9e 00 84 	beq-    cr7,3104 <pfkey_msg2xfrm_state+0x358>
	    sa->sadb_sa_encrypt != SADB_EALG_NULL &&
    3084:	80 01 00 14 	lwz     r0,20(r1)
    3088:	7c 08 03 78 	mr      r8,r0
    308c:	88 08 00 0b 	lbz     r0,11(r8)
    3090:	54 00 06 3e 	clrlwi  r0,r0,24
	    sa->sadb_sa_auth != SADB_X_AALG_NULL &&
	    ((key->sadb_key_bits+7) / 8 == 0 ||
	     (key->sadb_key_bits+7) / 8 > key->sadb_key_len * sizeof(uint64_t)))
		return ERR_PTR(-EINVAL);
	key = ext_hdrs[SADB_EXT_KEY_ENCRYPT-1];
	if (key != NULL &&
    3094:	2f 80 00 0b 	cmpwi   cr7,r0,11
    3098:	41 9e 00 6c 	beq-    cr7,3104 <pfkey_msg2xfrm_state+0x358>
	    sa->sadb_sa_encrypt != SADB_EALG_NULL &&
	    ((key->sadb_key_bits+7) / 8 == 0 ||
    309c:	80 01 00 1c 	lwz     r0,28(r1)
    30a0:	7c 09 03 78 	mr      r9,r0
    30a4:	a0 09 00 04 	lhz     r0,4(r9)
    30a8:	54 00 04 3e 	clrlwi  r0,r0,16
    30ac:	30 00 00 0e 	addic   r0,r0,14
	    ((key->sadb_key_bits+7) / 8 == 0 ||
	     (key->sadb_key_bits+7) / 8 > key->sadb_key_len * sizeof(uint64_t)))
		return ERR_PTR(-EINVAL);
	key = ext_hdrs[SADB_EXT_KEY_ENCRYPT-1];
	if (key != NULL &&
	    sa->sadb_sa_encrypt != SADB_EALG_NULL &&
    30b0:	2b 80 00 0e 	cmplwi  cr7,r0,14
    30b4:	40 9d 00 40 	ble-    cr7,30f4 <pfkey_msg2xfrm_state+0x348>
	    ((key->sadb_key_bits+7) / 8 == 0 ||
	     (key->sadb_key_bits+7) / 8 > key->sadb_key_len * sizeof(uint64_t)))
    30b8:	80 01 00 1c 	lwz     r0,28(r1)
    30bc:	7c 0a 03 78 	mr      r10,r0
    30c0:	a0 0a 00 04 	lhz     r0,4(r10)
    30c4:	54 00 04 3e 	clrlwi  r0,r0,16
    30c8:	30 00 00 07 	addic   r0,r0,7
    30cc:	7c 00 1e 70 	srawi   r0,r0,3
    30d0:	7c 00 01 94 	addze   r0,r0
    30d4:	7c 09 03 78 	mr      r9,r0
    30d8:	80 01 00 1c 	lwz     r0,28(r1)
    30dc:	7c 0b 03 78 	mr      r11,r0
    30e0:	a0 0b 00 00 	lhz     r0,0(r11)
    30e4:	54 00 04 3e 	clrlwi  r0,r0,16
    30e8:	54 00 18 38 	rlwinm  r0,r0,3,0,28
	     (key->sadb_key_bits+7) / 8 > key->sadb_key_len * sizeof(uint64_t)))
		return ERR_PTR(-EINVAL);
	key = ext_hdrs[SADB_EXT_KEY_ENCRYPT-1];
	if (key != NULL &&
	    sa->sadb_sa_encrypt != SADB_EALG_NULL &&
	    ((key->sadb_key_bits+7) / 8 == 0 ||
    30ec:	7f 89 00 40 	cmplw   cr7,r9,r0
    30f0:	40 9d 00 14 	ble-    cr7,3104 <pfkey_msg2xfrm_state+0x358>
    30f4:	38 00 ff ea 	li      r0,-22
    30f8:	90 01 00 74 	stw     r0,116(r1)
    30fc:	80 01 00 74 	lwz     r0,116(r1)
	     (key->sadb_key_bits+7) / 8 > key->sadb_key_len * sizeof(uint64_t)))
		return ERR_PTR(-EINVAL);
    3100:	48 00 11 28 	b       4228 <pfkey_msg2xfrm_state+0x147c>

	x = xfrm_state_alloc(net);
    3104:	80 61 00 d8 	lwz     r3,216(r1)
    3108:	48 00 00 01 	bl      3108 <pfkey_msg2xfrm_state+0x35c>
    310c:	90 61 00 20 	stw     r3,32(r1)
	if (x == NULL)
    3110:	80 01 00 20 	lwz     r0,32(r1)
    3114:	2f 80 00 00 	cmpwi   cr7,r0,0
    3118:	40 9e 00 14 	bne-    cr7,312c <pfkey_msg2xfrm_state+0x380>
    311c:	38 00 ff 97 	li      r0,-105
    3120:	90 01 00 78 	stw     r0,120(r1)
    3124:	80 01 00 78 	lwz     r0,120(r1)
		return ERR_PTR(-ENOBUFS);
    3128:	48 00 11 00 	b       4228 <pfkey_msg2xfrm_state+0x147c>

	x->id.proto = proto;
    312c:	a0 01 00 18 	lhz     r0,24(r1)
    3130:	54 09 06 3e 	clrlwi  r9,r0,24
    3134:	80 01 00 20 	lwz     r0,32(r1)
    3138:	7c 07 03 78 	mr      r7,r0
    313c:	99 27 00 30 	stb     r9,48(r7)
	x->id.spi = sa->sadb_sa_spi;
    3140:	80 01 00 14 	lwz     r0,20(r1)
    3144:	7c 08 03 78 	mr      r8,r0
    3148:	81 28 00 04 	lwz     r9,4(r8)
    314c:	80 01 00 20 	lwz     r0,32(r1)
    3150:	7c 0a 03 78 	mr      r10,r0
    3154:	91 2a 00 2c 	stw     r9,44(r10)
	x->props.replay_window = sa->sadb_sa_replay;
    3158:	80 01 00 14 	lwz     r0,20(r1)
    315c:	7c 0b 03 78 	mr      r11,r0
    3160:	88 0b 00 08 	lbz     r0,8(r11)
    3164:	54 09 06 3e 	clrlwi  r9,r0,24
    3168:	80 01 00 20 	lwz     r0,32(r1)
    316c:	7c 07 03 78 	mr      r7,r0
    3170:	99 27 00 91 	stb     r9,145(r7)
	if (sa->sadb_sa_flags & SADB_SAFLAGS_NOECN)
    3174:	80 01 00 14 	lwz     r0,20(r1)
    3178:	7c 08 03 78 	mr      r8,r0
    317c:	80 08 00 0c 	lwz     r0,12(r8)
    3180:	2f 80 00 00 	cmpwi   cr7,r0,0
    3184:	40 9c 00 28 	bge-    cr7,31ac <pfkey_msg2xfrm_state+0x400>
		x->props.flags |= XFRM_STATE_NOECN;
    3188:	80 01 00 20 	lwz     r0,32(r1)
    318c:	7c 09 03 78 	mr      r9,r0
    3190:	88 09 00 95 	lbz     r0,149(r9)
    3194:	54 00 06 3e 	clrlwi  r0,r0,24
    3198:	60 00 00 01 	ori     r0,r0,1
    319c:	54 09 06 3e 	clrlwi  r9,r0,24
    31a0:	80 01 00 20 	lwz     r0,32(r1)
    31a4:	7c 0a 03 78 	mr      r10,r0
    31a8:	99 2a 00 95 	stb     r9,149(r10)
	if (sa->sadb_sa_flags & SADB_SAFLAGS_DECAP_DSCP)
    31ac:	80 01 00 14 	lwz     r0,20(r1)
    31b0:	7c 0b 03 78 	mr      r11,r0
    31b4:	80 0b 00 0c 	lwz     r0,12(r11)
    31b8:	54 00 00 42 	rlwinm  r0,r0,0,1,1
    31bc:	2f 80 00 00 	cmpwi   cr7,r0,0
    31c0:	41 9e 00 28 	beq-    cr7,31e8 <pfkey_msg2xfrm_state+0x43c>
		x->props.flags |= XFRM_STATE_DECAP_DSCP;
    31c4:	80 01 00 20 	lwz     r0,32(r1)
    31c8:	7c 07 03 78 	mr      r7,r0
    31cc:	88 07 00 95 	lbz     r0,149(r7)
    31d0:	54 00 06 3e 	clrlwi  r0,r0,24
    31d4:	60 00 00 02 	ori     r0,r0,2
    31d8:	54 09 06 3e 	clrlwi  r9,r0,24
    31dc:	80 01 00 20 	lwz     r0,32(r1)
    31e0:	7c 08 03 78 	mr      r8,r0
    31e4:	99 28 00 95 	stb     r9,149(r8)
	if (sa->sadb_sa_flags & SADB_SAFLAGS_NOPMTUDISC)
    31e8:	80 01 00 14 	lwz     r0,20(r1)
    31ec:	7c 09 03 78 	mr      r9,r0
    31f0:	80 09 00 0c 	lwz     r0,12(r9)
    31f4:	54 00 00 84 	rlwinm  r0,r0,0,2,2
    31f8:	2f 80 00 00 	cmpwi   cr7,r0,0
    31fc:	41 9e 00 28 	beq-    cr7,3224 <pfkey_msg2xfrm_state+0x478>
		x->props.flags |= XFRM_STATE_NOPMTUDISC;
    3200:	80 01 00 20 	lwz     r0,32(r1)
    3204:	7c 0a 03 78 	mr      r10,r0
    3208:	88 0a 00 95 	lbz     r0,149(r10)
    320c:	54 00 06 3e 	clrlwi  r0,r0,24
    3210:	60 00 00 04 	ori     r0,r0,4
    3214:	54 09 06 3e 	clrlwi  r9,r0,24
    3218:	80 01 00 20 	lwz     r0,32(r1)
    321c:	7c 0b 03 78 	mr      r11,r0
    3220:	99 2b 00 95 	stb     r9,149(r11)

	lifetime = (struct sadb_lifetime*) ext_hdrs[SADB_EXT_LIFETIME_HARD-1];
    3224:	80 01 00 e0 	lwz     r0,224(r1)
    3228:	7c 07 03 78 	mr      r7,r0
    322c:	80 07 00 08 	lwz     r0,8(r7)
    3230:	90 01 00 24 	stw     r0,36(r1)
	if (lifetime != NULL) {
    3234:	80 01 00 24 	lwz     r0,36(r1)
    3238:	2f 80 00 00 	cmpwi   cr7,r0,0
    323c:	41 9e 03 14 	beq-    cr7,3550 <pfkey_msg2xfrm_state+0x7a4>
		x->lft.hard_packet_limit = _KEY2X(lifetime->sadb_lifetime_allocations);
    3240:	80 01 00 24 	lwz     r0,36(r1)
    3244:	7c 08 03 78 	mr      r8,r0
    3248:	80 08 00 04 	lwz     r0,4(r8)
    324c:	2f 80 00 00 	cmpwi   cr7,r0,0
    3250:	41 9e 00 1c 	beq-    cr7,326c <pfkey_msg2xfrm_state+0x4c0>
    3254:	80 01 00 24 	lwz     r0,36(r1)
    3258:	7c 09 03 78 	mr      r9,r0
    325c:	80 09 00 04 	lwz     r0,4(r9)
    3260:	7c 1d 03 78 	mr      r29,r0
    3264:	3b 80 00 00 	li      r28,0
    3268:	48 00 00 0c 	b       3274 <pfkey_msg2xfrm_state+0x4c8>
    326c:	3b 80 ff ff 	li      r28,-1
    3270:	3b a0 ff ff 	li      r29,-1
    3274:	80 01 00 20 	lwz     r0,32(r1)
    3278:	7c 0a 03 78 	mr      r10,r0
    327c:	39 4a 00 c8 	addi    r10,r10,200
    3280:	93 8a 00 00 	stw     r28,0(r10)
    3284:	93 aa 00 04 	stw     r29,4(r10)
		x->lft.hard_byte_limit = _KEY2X(lifetime->sadb_lifetime_bytes);
    3288:	80 01 00 24 	lwz     r0,36(r1)
    328c:	7c 07 03 78 	mr      r7,r0
    3290:	89 67 00 0c 	lbz     r11,12(r7)
    3294:	55 6b 06 3e 	clrlwi  r11,r11,24
    3298:	55 6b c0 0e 	rlwinm  r11,r11,24,0,7
    329c:	7c 09 03 78 	mr      r9,r0
    32a0:	89 09 00 0d 	lbz     r8,13(r9)
    32a4:	55 08 06 3e 	clrlwi  r8,r8,24
    32a8:	55 08 80 1e 	rlwinm  r8,r8,16,0,15
    32ac:	7d 0b 5b 78 	or      r11,r8,r11
    32b0:	7c 0a 03 78 	mr      r10,r0
    32b4:	89 0a 00 0e 	lbz     r8,14(r10)
    32b8:	55 08 06 3e 	clrlwi  r8,r8,24
    32bc:	55 08 40 2e 	rlwinm  r8,r8,8,0,23
    32c0:	7d 0b 5b 78 	or      r11,r8,r11
    32c4:	7c 07 03 78 	mr      r7,r0
    32c8:	89 07 00 0f 	lbz     r8,15(r7)
    32cc:	55 08 06 3e 	clrlwi  r8,r8,24
    32d0:	7d 0b 5b 78 	or      r11,r8,r11
    32d4:	7d 6a 5b 78 	mr      r10,r11
    32d8:	7c 08 03 78 	mr      r8,r0
    32dc:	89 68 00 08 	lbz     r11,8(r8)
    32e0:	55 6b 06 3e 	clrlwi  r11,r11,24
    32e4:	55 6b c0 0e 	rlwinm  r11,r11,24,0,7
    32e8:	7c 07 03 78 	mr      r7,r0
    32ec:	89 07 00 09 	lbz     r8,9(r7)
    32f0:	55 08 06 3e 	clrlwi  r8,r8,24
    32f4:	55 08 80 1e 	rlwinm  r8,r8,16,0,15
    32f8:	7d 0b 5b 78 	or      r11,r8,r11
    32fc:	7c 07 03 78 	mr      r7,r0
    3300:	89 07 00 0a 	lbz     r8,10(r7)
    3304:	55 08 06 3e 	clrlwi  r8,r8,24
    3308:	55 08 40 2e 	rlwinm  r8,r8,8,0,23
    330c:	7d 0b 5b 78 	or      r11,r8,r11
    3310:	7c 08 03 78 	mr      r8,r0
    3314:	88 08 00 0b 	lbz     r0,11(r8)
    3318:	54 00 06 3e 	clrlwi  r0,r0,24
    331c:	7c 00 5b 78 	or      r0,r0,r11
    3320:	7c 09 03 78 	mr      r9,r0
    3324:	7d 20 4b 78 	mr      r0,r9
    3328:	7c 00 53 78 	or      r0,r0,r10
    332c:	2f 80 00 00 	cmpwi   cr7,r0,0
    3330:	41 9e 00 a4 	beq-    cr7,33d4 <pfkey_msg2xfrm_state+0x628>
    3334:	80 01 00 24 	lwz     r0,36(r1)
    3338:	7c 09 03 78 	mr      r9,r0
    333c:	89 69 00 0c 	lbz     r11,12(r9)
    3340:	55 6b 06 3e 	clrlwi  r11,r11,24
    3344:	55 6b c0 0e 	rlwinm  r11,r11,24,0,7
    3348:	7c 0a 03 78 	mr      r10,r0
    334c:	89 0a 00 0d 	lbz     r8,13(r10)
    3350:	55 08 06 3e 	clrlwi  r8,r8,24
    3354:	55 08 80 1e 	rlwinm  r8,r8,16,0,15
    3358:	7d 0b 5b 78 	or      r11,r8,r11
    335c:	7c 07 03 78 	mr      r7,r0
    3360:	89 07 00 0e 	lbz     r8,14(r7)
    3364:	55 08 06 3e 	clrlwi  r8,r8,24
    3368:	55 08 40 2e 	rlwinm  r8,r8,8,0,23
    336c:	7d 0b 5b 78 	or      r11,r8,r11
    3370:	7c 09 03 78 	mr      r9,r0
    3374:	89 09 00 0f 	lbz     r8,15(r9)
    3378:	55 08 06 3e 	clrlwi  r8,r8,24
    337c:	7d 0b 5b 78 	or      r11,r8,r11
    3380:	7d 6a 5b 78 	mr      r10,r11
    3384:	7c 07 03 78 	mr      r7,r0
    3388:	89 67 00 08 	lbz     r11,8(r7)
    338c:	55 6b 06 3e 	clrlwi  r11,r11,24
    3390:	55 6b c0 0e 	rlwinm  r11,r11,24,0,7
    3394:	7c 07 03 78 	mr      r7,r0
    3398:	89 07 00 09 	lbz     r8,9(r7)
    339c:	55 08 06 3e 	clrlwi  r8,r8,24
    33a0:	55 08 80 1e 	rlwinm  r8,r8,16,0,15
    33a4:	7d 0b 5b 78 	or      r11,r8,r11
    33a8:	7c 07 03 78 	mr      r7,r0
    33ac:	89 07 00 0a 	lbz     r8,10(r7)
    33b0:	55 08 06 3e 	clrlwi  r8,r8,24
    33b4:	55 08 40 2e 	rlwinm  r8,r8,8,0,23
    33b8:	7d 0b 5b 78 	or      r11,r8,r11
    33bc:	7c 08 03 78 	mr      r8,r0
    33c0:	88 08 00 0b 	lbz     r0,11(r8)
    33c4:	54 00 06 3e 	clrlwi  r0,r0,24
    33c8:	7c 00 5b 78 	or      r0,r0,r11
    33cc:	7c 09 03 78 	mr      r9,r0
    33d0:	48 00 00 0c 	b       33dc <pfkey_msg2xfrm_state+0x630>
    33d4:	39 20 ff ff 	li      r9,-1
    33d8:	39 40 ff ff 	li      r10,-1
    33dc:	80 01 00 20 	lwz     r0,32(r1)
    33e0:	7c 0b 03 78 	mr      r11,r0
    33e4:	39 6b 00 b8 	addi    r11,r11,184
    33e8:	91 2b 00 00 	stw     r9,0(r11)
    33ec:	91 4b 00 04 	stw     r10,4(r11)
		x->lft.hard_add_expires_seconds = lifetime->sadb_lifetime_addtime;
    33f0:	80 01 00 24 	lwz     r0,36(r1)
    33f4:	7c 07 03 78 	mr      r7,r0
    33f8:	89 67 00 14 	lbz     r11,20(r7)
    33fc:	55 6b 06 3e 	clrlwi  r11,r11,24
    3400:	55 6b c0 0e 	rlwinm  r11,r11,24,0,7
    3404:	7c 09 03 78 	mr      r9,r0
    3408:	89 09 00 15 	lbz     r8,21(r9)
    340c:	55 08 06 3e 	clrlwi  r8,r8,24
    3410:	55 08 80 1e 	rlwinm  r8,r8,16,0,15
    3414:	7d 0b 5b 78 	or      r11,r8,r11
    3418:	7c 0a 03 78 	mr      r10,r0
    341c:	89 0a 00 16 	lbz     r8,22(r10)
    3420:	55 08 06 3e 	clrlwi  r8,r8,24
    3424:	55 08 40 2e 	rlwinm  r8,r8,8,0,23
    3428:	7d 0b 5b 78 	or      r11,r8,r11
    342c:	7c 07 03 78 	mr      r7,r0
    3430:	89 07 00 17 	lbz     r8,23(r7)
    3434:	55 08 06 3e 	clrlwi  r8,r8,24
    3438:	7d 0b 5b 78 	or      r11,r8,r11
    343c:	7d 6a 5b 78 	mr      r10,r11
    3440:	7c 08 03 78 	mr      r8,r0
    3444:	89 68 00 10 	lbz     r11,16(r8)
    3448:	55 6b 06 3e 	clrlwi  r11,r11,24
    344c:	55 6b c0 0e 	rlwinm  r11,r11,24,0,7
    3450:	7c 07 03 78 	mr      r7,r0
    3454:	89 07 00 11 	lbz     r8,17(r7)
    3458:	55 08 06 3e 	clrlwi  r8,r8,24
    345c:	55 08 80 1e 	rlwinm  r8,r8,16,0,15
    3460:	7d 0b 5b 78 	or      r11,r8,r11
    3464:	7c 07 03 78 	mr      r7,r0
    3468:	89 07 00 12 	lbz     r8,18(r7)
    346c:	55 08 06 3e 	clrlwi  r8,r8,24
    3470:	55 08 40 2e 	rlwinm  r8,r8,8,0,23
    3474:	7d 0b 5b 78 	or      r11,r8,r11
    3478:	7c 08 03 78 	mr      r8,r0
    347c:	88 08 00 13 	lbz     r0,19(r8)
    3480:	54 00 06 3e 	clrlwi  r0,r0,24
    3484:	7c 00 5b 78 	or      r0,r0,r11
    3488:	7c 09 03 78 	mr      r9,r0
    348c:	80 01 00 20 	lwz     r0,32(r1)
    3490:	7c 0b 03 78 	mr      r11,r0
    3494:	39 6b 00 d8 	addi    r11,r11,216
    3498:	91 2b 00 00 	stw     r9,0(r11)
    349c:	91 4b 00 04 	stw     r10,4(r11)
		x->lft.hard_use_expires_seconds = lifetime->sadb_lifetime_usetime;
    34a0:	80 01 00 24 	lwz     r0,36(r1)
    34a4:	7c 07 03 78 	mr      r7,r0
    34a8:	89 67 00 1c 	lbz     r11,28(r7)
    34ac:	55 6b 06 3e 	clrlwi  r11,r11,24
    34b0:	55 6b c0 0e 	rlwinm  r11,r11,24,0,7
    34b4:	7c 09 03 78 	mr      r9,r0
    34b8:	89 09 00 1d 	lbz     r8,29(r9)
    34bc:	55 08 06 3e 	clrlwi  r8,r8,24
    34c0:	55 08 80 1e 	rlwinm  r8,r8,16,0,15
    34c4:	7d 0b 5b 78 	or      r11,r8,r11
    34c8:	7c 0a 03 78 	mr      r10,r0
    34cc:	89 0a 00 1e 	lbz     r8,30(r10)
    34d0:	55 08 06 3e 	clrlwi  r8,r8,24
    34d4:	55 08 40 2e 	rlwinm  r8,r8,8,0,23
    34d8:	7d 0b 5b 78 	or      r11,r8,r11
    34dc:	7c 07 03 78 	mr      r7,r0
    34e0:	89 07 00 1f 	lbz     r8,31(r7)
    34e4:	55 08 06 3e 	clrlwi  r8,r8,24
    34e8:	7d 0b 5b 78 	or      r11,r8,r11
    34ec:	7d 6a 5b 78 	mr      r10,r11
    34f0:	7c 08 03 78 	mr      r8,r0
    34f4:	89 68 00 18 	lbz     r11,24(r8)
    34f8:	55 6b 06 3e 	clrlwi  r11,r11,24
    34fc:	55 6b c0 0e 	rlwinm  r11,r11,24,0,7
    3500:	7c 07 03 78 	mr      r7,r0
    3504:	89 07 00 19 	lbz     r8,25(r7)
    3508:	55 08 06 3e 	clrlwi  r8,r8,24
    350c:	55 08 80 1e 	rlwinm  r8,r8,16,0,15
    3510:	7d 0b 5b 78 	or      r11,r8,r11
    3514:	7c 07 03 78 	mr      r7,r0
    3518:	89 07 00 1a 	lbz     r8,26(r7)
    351c:	55 08 06 3e 	clrlwi  r8,r8,24
    3520:	55 08 40 2e 	rlwinm  r8,r8,8,0,23
    3524:	7d 0b 5b 78 	or      r11,r8,r11
    3528:	7c 08 03 78 	mr      r8,r0
    352c:	88 08 00 1b 	lbz     r0,27(r8)
    3530:	54 00 06 3e 	clrlwi  r0,r0,24
    3534:	7c 00 5b 78 	or      r0,r0,r11
    3538:	7c 09 03 78 	mr      r9,r0
    353c:	80 01 00 20 	lwz     r0,32(r1)
    3540:	7c 0b 03 78 	mr      r11,r0
    3544:	39 6b 00 e8 	addi    r11,r11,232
    3548:	91 2b 00 00 	stw     r9,0(r11)
    354c:	91 4b 00 04 	stw     r10,4(r11)
	}
	lifetime = (struct sadb_lifetime*) ext_hdrs[SADB_EXT_LIFETIME_SOFT-1];
    3550:	80 01 00 e0 	lwz     r0,224(r1)
    3554:	7c 07 03 78 	mr      r7,r0
    3558:	80 07 00 0c 	lwz     r0,12(r7)
    355c:	90 01 00 24 	stw     r0,36(r1)
	if (lifetime != NULL) {
    3560:	80 01 00 24 	lwz     r0,36(r1)
    3564:	2f 80 00 00 	cmpwi   cr7,r0,0
    3568:	41 9e 03 14 	beq-    cr7,387c <pfkey_msg2xfrm_state+0xad0>
		x->lft.soft_packet_limit = _KEY2X(lifetime->sadb_lifetime_allocations);
    356c:	80 01 00 24 	lwz     r0,36(r1)
    3570:	7c 08 03 78 	mr      r8,r0
    3574:	80 08 00 04 	lwz     r0,4(r8)
    3578:	2f 80 00 00 	cmpwi   cr7,r0,0
    357c:	41 9e 00 1c 	beq-    cr7,3598 <pfkey_msg2xfrm_state+0x7ec>
    3580:	80 01 00 24 	lwz     r0,36(r1)
    3584:	7c 09 03 78 	mr      r9,r0
    3588:	80 09 00 04 	lwz     r0,4(r9)
    358c:	7c 1f 03 78 	mr      r31,r0
    3590:	3b c0 00 00 	li      r30,0
    3594:	48 00 00 0c 	b       35a0 <pfkey_msg2xfrm_state+0x7f4>
    3598:	3b c0 ff ff 	li      r30,-1
    359c:	3b e0 ff ff 	li      r31,-1
    35a0:	80 01 00 20 	lwz     r0,32(r1)
    35a4:	7c 0a 03 78 	mr      r10,r0
    35a8:	39 4a 00 c0 	addi    r10,r10,192
    35ac:	93 ca 00 00 	stw     r30,0(r10)
    35b0:	93 ea 00 04 	stw     r31,4(r10)
		x->lft.soft_byte_limit = _KEY2X(lifetime->sadb_lifetime_bytes);
    35b4:	80 01 00 24 	lwz     r0,36(r1)
    35b8:	7c 07 03 78 	mr      r7,r0
    35bc:	89 67 00 0c 	lbz     r11,12(r7)
    35c0:	55 6b 06 3e 	clrlwi  r11,r11,24
    35c4:	55 6b c0 0e 	rlwinm  r11,r11,24,0,7
    35c8:	7c 09 03 78 	mr      r9,r0
    35cc:	89 09 00 0d 	lbz     r8,13(r9)
    35d0:	55 08 06 3e 	clrlwi  r8,r8,24
    35d4:	55 08 80 1e 	rlwinm  r8,r8,16,0,15
    35d8:	7d 0b 5b 78 	or      r11,r8,r11
    35dc:	7c 0a 03 78 	mr      r10,r0
    35e0:	89 0a 00 0e 	lbz     r8,14(r10)
    35e4:	55 08 06 3e 	clrlwi  r8,r8,24
    35e8:	55 08 40 2e 	rlwinm  r8,r8,8,0,23
    35ec:	7d 0b 5b 78 	or      r11,r8,r11
    35f0:	7c 07 03 78 	mr      r7,r0
    35f4:	89 07 00 0f 	lbz     r8,15(r7)
    35f8:	55 08 06 3e 	clrlwi  r8,r8,24
    35fc:	7d 0b 5b 78 	or      r11,r8,r11
    3600:	7d 6a 5b 78 	mr      r10,r11
    3604:	7c 08 03 78 	mr      r8,r0
    3608:	89 68 00 08 	lbz     r11,8(r8)
    360c:	55 6b 06 3e 	clrlwi  r11,r11,24
    3610:	55 6b c0 0e 	rlwinm  r11,r11,24,0,7
    3614:	7c 07 03 78 	mr      r7,r0
    3618:	89 07 00 09 	lbz     r8,9(r7)
    361c:	55 08 06 3e 	clrlwi  r8,r8,24
    3620:	55 08 80 1e 	rlwinm  r8,r8,16,0,15
    3624:	7d 0b 5b 78 	or      r11,r8,r11
    3628:	7c 07 03 78 	mr      r7,r0
    362c:	89 07 00 0a 	lbz     r8,10(r7)
    3630:	55 08 06 3e 	clrlwi  r8,r8,24
    3634:	55 08 40 2e 	rlwinm  r8,r8,8,0,23
    3638:	7d 0b 5b 78 	or      r11,r8,r11
    363c:	7c 08 03 78 	mr      r8,r0
    3640:	88 08 00 0b 	lbz     r0,11(r8)
    3644:	54 00 06 3e 	clrlwi  r0,r0,24
    3648:	7c 00 5b 78 	or      r0,r0,r11
    364c:	7c 09 03 78 	mr      r9,r0
    3650:	7d 20 4b 78 	mr      r0,r9
    3654:	7c 00 53 78 	or      r0,r0,r10
    3658:	2f 80 00 00 	cmpwi   cr7,r0,0
    365c:	41 9e 00 a4 	beq-    cr7,3700 <pfkey_msg2xfrm_state+0x954>
    3660:	80 01 00 24 	lwz     r0,36(r1)
    3664:	7c 09 03 78 	mr      r9,r0
    3668:	89 69 00 0c 	lbz     r11,12(r9)
    366c:	55 6b 06 3e 	clrlwi  r11,r11,24
    3670:	55 6b c0 0e 	rlwinm  r11,r11,24,0,7
    3674:	7c 0a 03 78 	mr      r10,r0
    3678:	89 0a 00 0d 	lbz     r8,13(r10)
    367c:	55 08 06 3e 	clrlwi  r8,r8,24
    3680:	55 08 80 1e 	rlwinm  r8,r8,16,0,15
    3684:	7d 0b 5b 78 	or      r11,r8,r11
    3688:	7c 07 03 78 	mr      r7,r0
    368c:	89 07 00 0e 	lbz     r8,14(r7)
    3690:	55 08 06 3e 	clrlwi  r8,r8,24
    3694:	55 08 40 2e 	rlwinm  r8,r8,8,0,23
    3698:	7d 0b 5b 78 	or      r11,r8,r11
    369c:	7c 09 03 78 	mr      r9,r0
    36a0:	89 09 00 0f 	lbz     r8,15(r9)
    36a4:	55 08 06 3e 	clrlwi  r8,r8,24
    36a8:	7d 0b 5b 78 	or      r11,r8,r11
    36ac:	7d 6a 5b 78 	mr      r10,r11
    36b0:	7c 07 03 78 	mr      r7,r0
    36b4:	89 67 00 08 	lbz     r11,8(r7)
    36b8:	55 6b 06 3e 	clrlwi  r11,r11,24
    36bc:	55 6b c0 0e 	rlwinm  r11,r11,24,0,7
    36c0:	7c 07 03 78 	mr      r7,r0
    36c4:	89 07 00 09 	lbz     r8,9(r7)
    36c8:	55 08 06 3e 	clrlwi  r8,r8,24
    36cc:	55 08 80 1e 	rlwinm  r8,r8,16,0,15
    36d0:	7d 0b 5b 78 	or      r11,r8,r11
    36d4:	7c 07 03 78 	mr      r7,r0
    36d8:	89 07 00 0a 	lbz     r8,10(r7)
    36dc:	55 08 06 3e 	clrlwi  r8,r8,24
    36e0:	55 08 40 2e 	rlwinm  r8,r8,8,0,23
    36e4:	7d 0b 5b 78 	or      r11,r8,r11
    36e8:	7c 08 03 78 	mr      r8,r0
    36ec:	88 08 00 0b 	lbz     r0,11(r8)
    36f0:	54 00 06 3e 	clrlwi  r0,r0,24
    36f4:	7c 00 5b 78 	or      r0,r0,r11
    36f8:	7c 09 03 78 	mr      r9,r0
    36fc:	48 00 00 0c 	b       3708 <pfkey_msg2xfrm_state+0x95c>
    3700:	39 20 ff ff 	li      r9,-1
    3704:	39 40 ff ff 	li      r10,-1
    3708:	80 01 00 20 	lwz     r0,32(r1)
    370c:	7c 0b 03 78 	mr      r11,r0
    3710:	39 6b 00 b0 	addi    r11,r11,176
    3714:	91 2b 00 00 	stw     r9,0(r11)
    3718:	91 4b 00 04 	stw     r10,4(r11)
		x->lft.soft_add_expires_seconds = lifetime->sadb_lifetime_addtime;
    371c:	80 01 00 24 	lwz     r0,36(r1)
    3720:	7c 07 03 78 	mr      r7,r0
    3724:	89 67 00 14 	lbz     r11,20(r7)
    3728:	55 6b 06 3e 	clrlwi  r11,r11,24
    372c:	55 6b c0 0e 	rlwinm  r11,r11,24,0,7
    3730:	7c 09 03 78 	mr      r9,r0
    3734:	89 09 00 15 	lbz     r8,21(r9)
    3738:	55 08 06 3e 	clrlwi  r8,r8,24
    373c:	55 08 80 1e 	rlwinm  r8,r8,16,0,15
    3740:	7d 0b 5b 78 	or      r11,r8,r11
    3744:	7c 0a 03 78 	mr      r10,r0
    3748:	89 0a 00 16 	lbz     r8,22(r10)
    374c:	55 08 06 3e 	clrlwi  r8,r8,24
    3750:	55 08 40 2e 	rlwinm  r8,r8,8,0,23
    3754:	7d 0b 5b 78 	or      r11,r8,r11
    3758:	7c 07 03 78 	mr      r7,r0
    375c:	89 07 00 17 	lbz     r8,23(r7)
    3760:	55 08 06 3e 	clrlwi  r8,r8,24
    3764:	7d 0b 5b 78 	or      r11,r8,r11
    3768:	7d 6a 5b 78 	mr      r10,r11
    376c:	7c 08 03 78 	mr      r8,r0
    3770:	89 68 00 10 	lbz     r11,16(r8)
    3774:	55 6b 06 3e 	clrlwi  r11,r11,24
    3778:	55 6b c0 0e 	rlwinm  r11,r11,24,0,7
    377c:	7c 07 03 78 	mr      r7,r0
    3780:	89 07 00 11 	lbz     r8,17(r7)
    3784:	55 08 06 3e 	clrlwi  r8,r8,24
    3788:	55 08 80 1e 	rlwinm  r8,r8,16,0,15
    378c:	7d 0b 5b 78 	or      r11,r8,r11
    3790:	7c 07 03 78 	mr      r7,r0
    3794:	89 07 00 12 	lbz     r8,18(r7)
    3798:	55 08 06 3e 	clrlwi  r8,r8,24
    379c:	55 08 40 2e 	rlwinm  r8,r8,8,0,23
    37a0:	7d 0b 5b 78 	or      r11,r8,r11
    37a4:	7c 08 03 78 	mr      r8,r0
    37a8:	88 08 00 13 	lbz     r0,19(r8)
    37ac:	54 00 06 3e 	clrlwi  r0,r0,24
    37b0:	7c 00 5b 78 	or      r0,r0,r11
    37b4:	7c 09 03 78 	mr      r9,r0
    37b8:	80 01 00 20 	lwz     r0,32(r1)
    37bc:	7c 0b 03 78 	mr      r11,r0
    37c0:	39 6b 00 d0 	addi    r11,r11,208
    37c4:	91 2b 00 00 	stw     r9,0(r11)
    37c8:	91 4b 00 04 	stw     r10,4(r11)
		x->lft.soft_use_expires_seconds = lifetime->sadb_lifetime_usetime;
    37cc:	80 01 00 24 	lwz     r0,36(r1)
    37d0:	7c 07 03 78 	mr      r7,r0
    37d4:	89 67 00 1c 	lbz     r11,28(r7)
    37d8:	55 6b 06 3e 	clrlwi  r11,r11,24
    37dc:	55 6b c0 0e 	rlwinm  r11,r11,24,0,7
    37e0:	7c 09 03 78 	mr      r9,r0
    37e4:	89 09 00 1d 	lbz     r8,29(r9)
    37e8:	55 08 06 3e 	clrlwi  r8,r8,24
    37ec:	55 08 80 1e 	rlwinm  r8,r8,16,0,15
    37f0:	7d 0b 5b 78 	or      r11,r8,r11
    37f4:	7c 0a 03 78 	mr      r10,r0
    37f8:	89 0a 00 1e 	lbz     r8,30(r10)
    37fc:	55 08 06 3e 	clrlwi  r8,r8,24
    3800:	55 08 40 2e 	rlwinm  r8,r8,8,0,23
    3804:	7d 0b 5b 78 	or      r11,r8,r11
    3808:	7c 07 03 78 	mr      r7,r0
    380c:	89 07 00 1f 	lbz     r8,31(r7)
    3810:	55 08 06 3e 	clrlwi  r8,r8,24
    3814:	7d 0b 5b 78 	or      r11,r8,r11
    3818:	7d 6a 5b 78 	mr      r10,r11
    381c:	7c 08 03 78 	mr      r8,r0
    3820:	89 68 00 18 	lbz     r11,24(r8)
    3824:	55 6b 06 3e 	clrlwi  r11,r11,24
    3828:	55 6b c0 0e 	rlwinm  r11,r11,24,0,7
    382c:	7c 07 03 78 	mr      r7,r0
    3830:	89 07 00 19 	lbz     r8,25(r7)
    3834:	55 08 06 3e 	clrlwi  r8,r8,24
    3838:	55 08 80 1e 	rlwinm  r8,r8,16,0,15
    383c:	7d 0b 5b 78 	or      r11,r8,r11
    3840:	7c 07 03 78 	mr      r7,r0
    3844:	89 07 00 1a 	lbz     r8,26(r7)
    3848:	55 08 06 3e 	clrlwi  r8,r8,24
    384c:	55 08 40 2e 	rlwinm  r8,r8,8,0,23
    3850:	7d 0b 5b 78 	or      r11,r8,r11
    3854:	7c 08 03 78 	mr      r8,r0
    3858:	88 08 00 1b 	lbz     r0,27(r8)
    385c:	54 00 06 3e 	clrlwi  r0,r0,24
    3860:	7c 00 5b 78 	or      r0,r0,r11
    3864:	7c 09 03 78 	mr      r9,r0
    3868:	80 01 00 20 	lwz     r0,32(r1)
    386c:	7c 0b 03 78 	mr      r11,r0
    3870:	39 6b 00 e0 	addi    r11,r11,224
    3874:	91 2b 00 00 	stw     r9,0(r11)
    3878:	91 4b 00 04 	stw     r10,4(r11)
	}

	sec_ctx = (struct sadb_x_sec_ctx *) ext_hdrs[SADB_X_EXT_SEC_CTX-1];
    387c:	80 01 00 e0 	lwz     r0,224(r1)
    3880:	7c 07 03 78 	mr      r7,r0
    3884:	80 07 00 5c 	lwz     r0,92(r7)
    3888:	90 01 00 28 	stw     r0,40(r1)
	if (sec_ctx != NULL) {
    388c:	80 01 00 28 	lwz     r0,40(r1)
    3890:	2f 80 00 00 	cmpwi   cr7,r0,0
    3894:	41 9e 01 74 	beq-    cr7,3a08 <pfkey_msg2xfrm_state+0xc5c>
    3898:	80 01 00 28 	lwz     r0,40(r1)
    389c:	90 01 00 7c 	stw     r0,124(r1)
	return 0;
}

static inline struct xfrm_user_sec_ctx *pfkey_sadb2xfrm_user_sec_ctx(struct sadb_x_sec_ctx *sec_ctx)
{
	struct xfrm_user_sec_ctx *uctx = NULL;
    38a0:	38 00 00 00 	li      r0,0
    38a4:	90 01 00 80 	stw     r0,128(r1)
	int ctx_size = sec_ctx->sadb_x_ctx_len;
    38a8:	80 01 00 7c 	lwz     r0,124(r1)
    38ac:	7c 08 03 78 	mr      r8,r0
    38b0:	a0 08 00 06 	lhz     r0,6(r8)
    38b4:	54 00 04 3e 	clrlwi  r0,r0,16
    38b8:	90 01 00 84 	stw     r0,132(r1)

	uctx = kmalloc((sizeof(*uctx)+ctx_size), GFP_KERNEL);
    38bc:	80 01 00 84 	lwz     r0,132(r1)
    38c0:	30 00 00 08 	addic   r0,r0,8
    38c4:	90 01 00 88 	stw     r0,136(r1)
    38c8:	38 00 00 d0 	li      r0,208
    38cc:	90 01 00 8c 	stw     r0,140(r1)
				return ZERO_SIZE_PTR;

			return kmem_cache_alloc_trace(s, flags, size);
		}
	}
	return __kmalloc(size, flags);
    38d0:	80 61 00 88 	lwz     r3,136(r1)
    38d4:	80 81 00 8c 	lwz     r4,140(r1)
    38d8:	48 00 00 01 	bl      38d8 <pfkey_msg2xfrm_state+0xb2c>
    38dc:	7c 60 1b 78 	mr      r0,r3
    38e0:	90 01 00 80 	stw     r0,128(r1)

	if (!uctx)
    38e4:	80 01 00 80 	lwz     r0,128(r1)
    38e8:	2f 80 00 00 	cmpwi   cr7,r0,0
    38ec:	40 9e 00 0c 	bne-    cr7,38f8 <pfkey_msg2xfrm_state+0xb4c>
		return NULL;
    38f0:	38 00 00 00 	li      r0,0
    38f4:	48 00 00 d8 	b       39cc <pfkey_msg2xfrm_state+0xc20>
    38f8:	80 01 00 7c 	lwz     r0,124(r1)
    38fc:	90 01 00 90 	stw     r0,144(r1)
	return 0;
}

static inline int pfkey_sec_ctx_len(struct sadb_x_sec_ctx *sec_ctx)
{
	return DIV_ROUND_UP(sizeof(struct sadb_x_sec_ctx) +
    3900:	80 01 00 90 	lwz     r0,144(r1)
    3904:	7c 09 03 78 	mr      r9,r0
    3908:	a0 09 00 06 	lhz     r0,6(r9)
    390c:	54 00 04 3e 	clrlwi  r0,r0,16
    3910:	30 00 00 0f 	addic   r0,r0,15
    3914:	54 00 e8 fe 	rlwinm  r0,r0,29,3,31
	uctx = kmalloc((sizeof(*uctx)+ctx_size), GFP_KERNEL);

	if (!uctx)
		return NULL;

	uctx->len = pfkey_sec_ctx_len(sec_ctx);
    3918:	54 09 04 3e 	clrlwi  r9,r0,16
    391c:	80 01 00 80 	lwz     r0,128(r1)
    3920:	7c 0a 03 78 	mr      r10,r0
    3924:	b1 2a 00 00 	sth     r9,0(r10)
	uctx->exttype = sec_ctx->sadb_x_sec_exttype;
    3928:	80 01 00 7c 	lwz     r0,124(r1)
    392c:	7c 0b 03 78 	mr      r11,r0
    3930:	a0 0b 00 02 	lhz     r0,2(r11)
    3934:	54 09 04 3e 	clrlwi  r9,r0,16
    3938:	80 01 00 80 	lwz     r0,128(r1)
    393c:	7c 07 03 78 	mr      r7,r0
    3940:	b1 27 00 02 	sth     r9,2(r7)
	uctx->ctx_doi = sec_ctx->sadb_x_ctx_doi;
    3944:	80 01 00 7c 	lwz     r0,124(r1)
    3948:	7c 08 03 78 	mr      r8,r0
    394c:	88 08 00 05 	lbz     r0,5(r8)
    3950:	54 09 06 3e 	clrlwi  r9,r0,24
    3954:	80 01 00 80 	lwz     r0,128(r1)
    3958:	7c 0a 03 78 	mr      r10,r0
    395c:	99 2a 00 05 	stb     r9,5(r10)
	uctx->ctx_alg = sec_ctx->sadb_x_ctx_alg;
    3960:	80 01 00 7c 	lwz     r0,124(r1)
    3964:	7c 0b 03 78 	mr      r11,r0
    3968:	88 0b 00 04 	lbz     r0,4(r11)
    396c:	54 09 06 3e 	clrlwi  r9,r0,24
    3970:	80 01 00 80 	lwz     r0,128(r1)
    3974:	7c 07 03 78 	mr      r7,r0
    3978:	99 27 00 04 	stb     r9,4(r7)
	uctx->ctx_len = sec_ctx->sadb_x_ctx_len;
    397c:	80 01 00 7c 	lwz     r0,124(r1)
    3980:	7c 08 03 78 	mr      r8,r0
    3984:	a0 08 00 06 	lhz     r0,6(r8)
    3988:	54 09 04 3e 	clrlwi  r9,r0,16
    398c:	80 01 00 80 	lwz     r0,128(r1)
    3990:	7c 0a 03 78 	mr      r10,r0
    3994:	b1 2a 00 06 	sth     r9,6(r10)
	memcpy(uctx + 1, sec_ctx + 1,
    3998:	80 01 00 80 	lwz     r0,128(r1)
    399c:	31 60 00 08 	addic   r11,r0,8
    39a0:	80 01 00 7c 	lwz     r0,124(r1)
    39a4:	31 20 00 08 	addic   r9,r0,8
	       uctx->ctx_len);
    39a8:	80 01 00 80 	lwz     r0,128(r1)
    39ac:	7c 07 03 78 	mr      r7,r0
    39b0:	a0 07 00 06 	lhz     r0,6(r7)
    39b4:	54 00 04 3e 	clrlwi  r0,r0,16
	uctx->len = pfkey_sec_ctx_len(sec_ctx);
	uctx->exttype = sec_ctx->sadb_x_sec_exttype;
	uctx->ctx_doi = sec_ctx->sadb_x_ctx_doi;
	uctx->ctx_alg = sec_ctx->sadb_x_ctx_alg;
	uctx->ctx_len = sec_ctx->sadb_x_ctx_len;
	memcpy(uctx + 1, sec_ctx + 1,
    39b8:	7d 63 5b 78 	mr      r3,r11
    39bc:	7d 24 4b 78 	mr      r4,r9
    39c0:	7c 05 03 78 	mr      r5,r0
    39c4:	48 00 00 01 	bl      39c4 <pfkey_msg2xfrm_state+0xc18>
	       uctx->ctx_len);

	return uctx;
    39c8:	80 01 00 80 	lwz     r0,128(r1)
		x->lft.soft_use_expires_seconds = lifetime->sadb_lifetime_usetime;
	}

	sec_ctx = (struct sadb_x_sec_ctx *) ext_hdrs[SADB_X_EXT_SEC_CTX-1];
	if (sec_ctx != NULL) {
		struct xfrm_user_sec_ctx *uctx = pfkey_sadb2xfrm_user_sec_ctx(sec_ctx);
    39cc:	90 01 00 2c 	stw     r0,44(r1)

		if (!uctx)
    39d0:	80 01 00 2c 	lwz     r0,44(r1)
    39d4:	2f 80 00 00 	cmpwi   cr7,r0,0
    39d8:	41 9e 07 c0 	beq-    cr7,4198 <pfkey_msg2xfrm_state+0x13ec>
			goto out;
    39dc:	80 01 00 20 	lwz     r0,32(r1)
    39e0:	90 01 00 c8 	stw     r0,200(r1)
    39e4:	80 01 00 2c 	lwz     r0,44(r1)
    39e8:	90 01 00 cc 	stw     r0,204(r1)
}

static inline int security_xfrm_state_alloc(struct xfrm_state *x,
					struct xfrm_user_sec_ctx *sec_ctx)
{
	return 0;
    39ec:	38 00 00 00 	li      r0,0

		err = security_xfrm_state_alloc(x, uctx);
    39f0:	90 01 00 08 	stw     r0,8(r1)
		kfree(uctx);
    39f4:	80 61 00 2c 	lwz     r3,44(r1)
    39f8:	48 00 00 01 	bl      39f8 <pfkey_msg2xfrm_state+0xc4c>

		if (err)
    39fc:	80 01 00 08 	lwz     r0,8(r1)
    3a00:	2f 80 00 00 	cmpwi   cr7,r0,0
    3a04:	40 9e 07 9c 	bne-    cr7,41a0 <pfkey_msg2xfrm_state+0x13f4>
			goto out;
	}

	key = (struct sadb_key*) ext_hdrs[SADB_EXT_KEY_AUTH-1];
    3a08:	80 01 00 e0 	lwz     r0,224(r1)
    3a0c:	7c 08 03 78 	mr      r8,r0
    3a10:	80 08 00 1c 	lwz     r0,28(r8)
    3a14:	90 01 00 1c 	stw     r0,28(r1)
	if (sa->sadb_sa_auth) {
    3a18:	80 01 00 14 	lwz     r0,20(r1)
    3a1c:	7c 09 03 78 	mr      r9,r0
    3a20:	88 09 00 0a 	lbz     r0,10(r9)
    3a24:	54 00 06 3e 	clrlwi  r0,r0,24
    3a28:	2f 80 00 00 	cmpwi   cr7,r0,0
    3a2c:	41 9e 01 88 	beq-    cr7,3bb4 <pfkey_msg2xfrm_state+0xe08>
		int keysize = 0;
    3a30:	38 00 00 00 	li      r0,0
    3a34:	90 01 00 0c 	stw     r0,12(r1)
		struct xfrm_algo_desc *a = xfrm_aalg_get_byid(sa->sadb_sa_auth);
    3a38:	80 01 00 14 	lwz     r0,20(r1)
    3a3c:	7c 0a 03 78 	mr      r10,r0
    3a40:	88 0a 00 0a 	lbz     r0,10(r10)
    3a44:	54 00 06 3e 	clrlwi  r0,r0,24
    3a48:	7c 03 03 78 	mr      r3,r0
    3a4c:	48 00 00 01 	bl      3a4c <pfkey_msg2xfrm_state+0xca0>
    3a50:	90 61 00 30 	stw     r3,48(r1)
		if (!a) {
    3a54:	80 01 00 30 	lwz     r0,48(r1)
    3a58:	2f 80 00 00 	cmpwi   cr7,r0,0
    3a5c:	40 9e 00 10 	bne-    cr7,3a6c <pfkey_msg2xfrm_state+0xcc0>
			err = -ENOSYS;
    3a60:	38 00 ff da 	li      r0,-38
    3a64:	90 01 00 08 	stw     r0,8(r1)
			goto out;
    3a68:	48 00 07 64 	b       41cc <pfkey_msg2xfrm_state+0x1420>
		}
		if (key)
    3a6c:	80 01 00 1c 	lwz     r0,28(r1)
    3a70:	2f 80 00 00 	cmpwi   cr7,r0,0
    3a74:	41 9e 00 24 	beq-    cr7,3a98 <pfkey_msg2xfrm_state+0xcec>
			keysize = (key->sadb_key_bits + 7) / 8;
    3a78:	80 01 00 1c 	lwz     r0,28(r1)
    3a7c:	7c 0b 03 78 	mr      r11,r0
    3a80:	a0 0b 00 04 	lhz     r0,4(r11)
    3a84:	54 00 04 3e 	clrlwi  r0,r0,16
    3a88:	30 00 00 07 	addic   r0,r0,7
    3a8c:	7c 00 1e 70 	srawi   r0,r0,3
    3a90:	7c 00 01 94 	addze   r0,r0
    3a94:	90 01 00 0c 	stw     r0,12(r1)
		x->aalg = kmalloc(sizeof(*x->aalg) + keysize, GFP_KERNEL);
    3a98:	80 01 00 0c 	lwz     r0,12(r1)
    3a9c:	30 00 00 48 	addic   r0,r0,72
    3aa0:	90 01 00 94 	stw     r0,148(r1)
    3aa4:	38 00 00 d0 	li      r0,208
    3aa8:	90 01 00 98 	stw     r0,152(r1)
    3aac:	80 61 00 94 	lwz     r3,148(r1)
    3ab0:	80 81 00 98 	lwz     r4,152(r1)
    3ab4:	48 00 00 01 	bl      3ab4 <pfkey_msg2xfrm_state+0xd08>
    3ab8:	7c 60 1b 78 	mr      r0,r3
    3abc:	7c 09 03 78 	mr      r9,r0
    3ac0:	80 01 00 20 	lwz     r0,32(r1)
    3ac4:	7c 07 03 78 	mr      r7,r0
    3ac8:	91 27 00 f0 	stw     r9,240(r7)
		if (!x->aalg)
    3acc:	80 01 00 20 	lwz     r0,32(r1)
    3ad0:	7c 08 03 78 	mr      r8,r0
    3ad4:	80 08 00 f0 	lwz     r0,240(r8)
    3ad8:	2f 80 00 00 	cmpwi   cr7,r0,0
    3adc:	41 9e 06 cc 	beq-    cr7,41a8 <pfkey_msg2xfrm_state+0x13fc>
			goto out;
		strcpy(x->aalg->alg_name, a->name);
    3ae0:	80 01 00 20 	lwz     r0,32(r1)
    3ae4:	7c 09 03 78 	mr      r9,r0
    3ae8:	80 09 00 f0 	lwz     r0,240(r9)
    3aec:	7c 09 03 78 	mr      r9,r0
    3af0:	80 01 00 30 	lwz     r0,48(r1)
    3af4:	7c 0a 03 78 	mr      r10,r0
    3af8:	80 0a 00 00 	lwz     r0,0(r10)
    3afc:	7d 23 4b 78 	mr      r3,r9
    3b00:	7c 04 03 78 	mr      r4,r0
    3b04:	48 00 00 01 	bl      3b04 <pfkey_msg2xfrm_state+0xd58>
		x->aalg->alg_key_len = 0;
    3b08:	80 01 00 20 	lwz     r0,32(r1)
    3b0c:	7c 0b 03 78 	mr      r11,r0
    3b10:	80 0b 00 f0 	lwz     r0,240(r11)
    3b14:	39 20 00 00 	li      r9,0
    3b18:	7c 07 03 78 	mr      r7,r0
    3b1c:	91 27 00 40 	stw     r9,64(r7)
		if (key) {
    3b20:	80 01 00 1c 	lwz     r0,28(r1)
    3b24:	2f 80 00 00 	cmpwi   cr7,r0,0
    3b28:	41 9e 00 50 	beq-    cr7,3b78 <pfkey_msg2xfrm_state+0xdcc>
			x->aalg->alg_key_len = key->sadb_key_bits;
    3b2c:	80 01 00 20 	lwz     r0,32(r1)
    3b30:	7c 08 03 78 	mr      r8,r0
    3b34:	80 08 00 f0 	lwz     r0,240(r8)
    3b38:	81 21 00 1c 	lwz     r9,28(r1)
    3b3c:	a1 29 00 04 	lhz     r9,4(r9)
    3b40:	55 29 04 3e 	clrlwi  r9,r9,16
    3b44:	7c 0a 03 78 	mr      r10,r0
    3b48:	91 2a 00 40 	stw     r9,64(r10)
			memcpy(x->aalg->alg_key, key+1, keysize);
    3b4c:	80 01 00 20 	lwz     r0,32(r1)
    3b50:	7c 0b 03 78 	mr      r11,r0
    3b54:	80 0b 00 f0 	lwz     r0,240(r11)
    3b58:	31 60 00 48 	addic   r11,r0,72
    3b5c:	80 01 00 1c 	lwz     r0,28(r1)
    3b60:	31 20 00 08 	addic   r9,r0,8
    3b64:	80 01 00 0c 	lwz     r0,12(r1)
    3b68:	7d 63 5b 78 	mr      r3,r11
    3b6c:	7d 24 4b 78 	mr      r4,r9
    3b70:	7c 05 03 78 	mr      r5,r0
    3b74:	48 00 00 01 	bl      3b74 <pfkey_msg2xfrm_state+0xdc8>
		}
		x->aalg->alg_trunc_len = a->uinfo.auth.icv_truncbits;
    3b78:	80 01 00 20 	lwz     r0,32(r1)
    3b7c:	7c 07 03 78 	mr      r7,r0
    3b80:	80 07 00 f0 	lwz     r0,240(r7)
    3b84:	81 21 00 30 	lwz     r9,48(r1)
    3b88:	a1 29 00 0a 	lhz     r9,10(r9)
    3b8c:	55 29 04 3e 	clrlwi  r9,r9,16
    3b90:	7c 08 03 78 	mr      r8,r0
    3b94:	91 28 00 44 	stw     r9,68(r8)
		x->props.aalgo = sa->sadb_sa_auth;
    3b98:	80 01 00 14 	lwz     r0,20(r1)
    3b9c:	7c 09 03 78 	mr      r9,r0
    3ba0:	88 09 00 0a 	lbz     r0,10(r9)
    3ba4:	54 09 06 3e 	clrlwi  r9,r0,24
    3ba8:	80 01 00 20 	lwz     r0,32(r1)
    3bac:	7c 0a 03 78 	mr      r10,r0
    3bb0:	99 2a 00 92 	stb     r9,146(r10)
		/* x->algo.flags = sa->sadb_sa_flags; */
	}
	if (sa->sadb_sa_encrypt) {
    3bb4:	80 01 00 14 	lwz     r0,20(r1)
    3bb8:	7c 0b 03 78 	mr      r11,r0
    3bbc:	88 0b 00 0b 	lbz     r0,11(r11)
    3bc0:	54 00 06 3e 	clrlwi  r0,r0,24
    3bc4:	2f 80 00 00 	cmpwi   cr7,r0,0
    3bc8:	41 9e 02 50 	beq-    cr7,3e18 <pfkey_msg2xfrm_state+0x106c>
		if (hdr->sadb_msg_satype == SADB_X_SATYPE_IPCOMP) {
    3bcc:	80 01 00 dc 	lwz     r0,220(r1)
    3bd0:	7c 07 03 78 	mr      r7,r0
    3bd4:	88 07 00 03 	lbz     r0,3(r7)
    3bd8:	54 00 06 3e 	clrlwi  r0,r0,24
    3bdc:	2f 80 00 09 	cmpwi   cr7,r0,9
    3be0:	40 9e 00 c4 	bne-    cr7,3ca4 <pfkey_msg2xfrm_state+0xef8>
			struct xfrm_algo_desc *a = xfrm_calg_get_byid(sa->sadb_sa_encrypt);
    3be4:	80 01 00 14 	lwz     r0,20(r1)
    3be8:	7c 08 03 78 	mr      r8,r0
    3bec:	88 08 00 0b 	lbz     r0,11(r8)
    3bf0:	54 00 06 3e 	clrlwi  r0,r0,24
    3bf4:	7c 03 03 78 	mr      r3,r0
    3bf8:	48 00 00 01 	bl      3bf8 <pfkey_msg2xfrm_state+0xe4c>
    3bfc:	90 61 00 34 	stw     r3,52(r1)
			if (!a) {
    3c00:	80 01 00 34 	lwz     r0,52(r1)
    3c04:	2f 80 00 00 	cmpwi   cr7,r0,0
    3c08:	40 9e 00 10 	bne-    cr7,3c18 <pfkey_msg2xfrm_state+0xe6c>
				err = -ENOSYS;
    3c0c:	38 00 ff da 	li      r0,-38
    3c10:	90 01 00 08 	stw     r0,8(r1)
				goto out;
    3c14:	48 00 05 b8 	b       41cc <pfkey_msg2xfrm_state+0x1420>
    3c18:	38 00 00 44 	li      r0,68
    3c1c:	90 01 00 9c 	stw     r0,156(r1)
    3c20:	38 00 00 d0 	li      r0,208
    3c24:	90 01 00 a0 	stw     r0,160(r1)
    3c28:	80 61 00 9c 	lwz     r3,156(r1)
    3c2c:	80 81 00 a0 	lwz     r4,160(r1)
    3c30:	48 00 00 01 	bl      3c30 <pfkey_msg2xfrm_state+0xe84>
    3c34:	7c 60 1b 78 	mr      r0,r3
			}
			x->calg = kmalloc(sizeof(*x->calg), GFP_KERNEL);
    3c38:	7c 09 03 78 	mr      r9,r0
    3c3c:	80 01 00 20 	lwz     r0,32(r1)
    3c40:	7c 0a 03 78 	mr      r10,r0
    3c44:	91 2a 00 f8 	stw     r9,248(r10)
			if (!x->calg)
    3c48:	80 01 00 20 	lwz     r0,32(r1)
    3c4c:	7c 0b 03 78 	mr      r11,r0
    3c50:	80 0b 00 f8 	lwz     r0,248(r11)
    3c54:	2f 80 00 00 	cmpwi   cr7,r0,0
    3c58:	41 9e 05 58 	beq-    cr7,41b0 <pfkey_msg2xfrm_state+0x1404>
				goto out;
			strcpy(x->calg->alg_name, a->name);
    3c5c:	80 01 00 20 	lwz     r0,32(r1)
    3c60:	7c 07 03 78 	mr      r7,r0
    3c64:	80 07 00 f8 	lwz     r0,248(r7)
    3c68:	7c 09 03 78 	mr      r9,r0
    3c6c:	80 01 00 34 	lwz     r0,52(r1)
    3c70:	7c 08 03 78 	mr      r8,r0
    3c74:	80 08 00 00 	lwz     r0,0(r8)
    3c78:	7d 23 4b 78 	mr      r3,r9
    3c7c:	7c 04 03 78 	mr      r4,r0
    3c80:	48 00 00 01 	bl      3c80 <pfkey_msg2xfrm_state+0xed4>
			x->props.calgo = sa->sadb_sa_encrypt;
    3c84:	80 01 00 14 	lwz     r0,20(r1)
    3c88:	7c 09 03 78 	mr      r9,r0
    3c8c:	88 09 00 0b 	lbz     r0,11(r9)
    3c90:	54 09 06 3e 	clrlwi  r9,r0,24
    3c94:	80 01 00 20 	lwz     r0,32(r1)
    3c98:	7c 0a 03 78 	mr      r10,r0
    3c9c:	99 2a 00 94 	stb     r9,148(r10)
    3ca0:	48 00 01 78 	b       3e18 <pfkey_msg2xfrm_state+0x106c>
		} else {
			int keysize = 0;
    3ca4:	38 00 00 00 	li      r0,0
    3ca8:	90 01 00 10 	stw     r0,16(r1)
			struct xfrm_algo_desc *a = xfrm_ealg_get_byid(sa->sadb_sa_encrypt);
    3cac:	80 01 00 14 	lwz     r0,20(r1)
    3cb0:	7c 0b 03 78 	mr      r11,r0
    3cb4:	88 0b 00 0b 	lbz     r0,11(r11)
    3cb8:	54 00 06 3e 	clrlwi  r0,r0,24
    3cbc:	7c 03 03 78 	mr      r3,r0
    3cc0:	48 00 00 01 	bl      3cc0 <pfkey_msg2xfrm_state+0xf14>
    3cc4:	90 61 00 38 	stw     r3,56(r1)
			if (!a) {
    3cc8:	80 01 00 38 	lwz     r0,56(r1)
    3ccc:	2f 80 00 00 	cmpwi   cr7,r0,0
    3cd0:	40 9e 00 10 	bne-    cr7,3ce0 <pfkey_msg2xfrm_state+0xf34>
				err = -ENOSYS;
    3cd4:	38 00 ff da 	li      r0,-38
    3cd8:	90 01 00 08 	stw     r0,8(r1)
				goto out;
    3cdc:	48 00 04 f0 	b       41cc <pfkey_msg2xfrm_state+0x1420>
			}
			key = (struct sadb_key*) ext_hdrs[SADB_EXT_KEY_ENCRYPT-1];
    3ce0:	80 01 00 e0 	lwz     r0,224(r1)
    3ce4:	7c 07 03 78 	mr      r7,r0
    3ce8:	80 07 00 20 	lwz     r0,32(r7)
    3cec:	90 01 00 1c 	stw     r0,28(r1)
			if (key)
    3cf0:	80 01 00 1c 	lwz     r0,28(r1)
    3cf4:	2f 80 00 00 	cmpwi   cr7,r0,0
    3cf8:	41 9e 00 24 	beq-    cr7,3d1c <pfkey_msg2xfrm_state+0xf70>
				keysize = (key->sadb_key_bits + 7) / 8;
    3cfc:	80 01 00 1c 	lwz     r0,28(r1)
    3d00:	7c 08 03 78 	mr      r8,r0
    3d04:	a0 08 00 04 	lhz     r0,4(r8)
    3d08:	54 00 04 3e 	clrlwi  r0,r0,16
    3d0c:	30 00 00 07 	addic   r0,r0,7
    3d10:	7c 00 1e 70 	srawi   r0,r0,3
    3d14:	7c 00 01 94 	addze   r0,r0
    3d18:	90 01 00 10 	stw     r0,16(r1)
			x->ealg = kmalloc(sizeof(*x->ealg) + keysize, GFP_KERNEL);
    3d1c:	80 01 00 10 	lwz     r0,16(r1)
    3d20:	30 00 00 44 	addic   r0,r0,68
    3d24:	90 01 00 a4 	stw     r0,164(r1)
    3d28:	38 00 00 d0 	li      r0,208
    3d2c:	90 01 00 a8 	stw     r0,168(r1)
    3d30:	80 61 00 a4 	lwz     r3,164(r1)
    3d34:	80 81 00 a8 	lwz     r4,168(r1)
    3d38:	48 00 00 01 	bl      3d38 <pfkey_msg2xfrm_state+0xf8c>
    3d3c:	7c 60 1b 78 	mr      r0,r3
    3d40:	7c 09 03 78 	mr      r9,r0
    3d44:	80 01 00 20 	lwz     r0,32(r1)
    3d48:	7c 0a 03 78 	mr      r10,r0
    3d4c:	91 2a 00 f4 	stw     r9,244(r10)
			if (!x->ealg)
    3d50:	80 01 00 20 	lwz     r0,32(r1)
    3d54:	7c 0b 03 78 	mr      r11,r0
    3d58:	80 0b 00 f4 	lwz     r0,244(r11)
    3d5c:	2f 80 00 00 	cmpwi   cr7,r0,0
    3d60:	41 9e 04 58 	beq-    cr7,41b8 <pfkey_msg2xfrm_state+0x140c>
				goto out;
			strcpy(x->ealg->alg_name, a->name);
    3d64:	80 01 00 20 	lwz     r0,32(r1)
    3d68:	7c 07 03 78 	mr      r7,r0
    3d6c:	80 07 00 f4 	lwz     r0,244(r7)
    3d70:	7c 09 03 78 	mr      r9,r0
    3d74:	80 01 00 38 	lwz     r0,56(r1)
    3d78:	7c 08 03 78 	mr      r8,r0
    3d7c:	80 08 00 00 	lwz     r0,0(r8)
    3d80:	7d 23 4b 78 	mr      r3,r9
    3d84:	7c 04 03 78 	mr      r4,r0
    3d88:	48 00 00 01 	bl      3d88 <pfkey_msg2xfrm_state+0xfdc>
			x->ealg->alg_key_len = 0;
    3d8c:	80 01 00 20 	lwz     r0,32(r1)
    3d90:	7c 09 03 78 	mr      r9,r0
    3d94:	80 09 00 f4 	lwz     r0,244(r9)
    3d98:	39 20 00 00 	li      r9,0
    3d9c:	7c 0a 03 78 	mr      r10,r0
    3da0:	91 2a 00 40 	stw     r9,64(r10)
			if (key) {
    3da4:	80 01 00 1c 	lwz     r0,28(r1)
    3da8:	2f 80 00 00 	cmpwi   cr7,r0,0
    3dac:	41 9e 00 50 	beq-    cr7,3dfc <pfkey_msg2xfrm_state+0x1050>
				x->ealg->alg_key_len = key->sadb_key_bits;
    3db0:	80 01 00 20 	lwz     r0,32(r1)
    3db4:	7c 0b 03 78 	mr      r11,r0
    3db8:	80 0b 00 f4 	lwz     r0,244(r11)
    3dbc:	81 21 00 1c 	lwz     r9,28(r1)
    3dc0:	a1 29 00 04 	lhz     r9,4(r9)
    3dc4:	55 29 04 3e 	clrlwi  r9,r9,16
    3dc8:	7c 07 03 78 	mr      r7,r0
    3dcc:	91 27 00 40 	stw     r9,64(r7)
				memcpy(x->ealg->alg_key, key+1, keysize);
    3dd0:	80 01 00 20 	lwz     r0,32(r1)
    3dd4:	7c 08 03 78 	mr      r8,r0
    3dd8:	80 08 00 f4 	lwz     r0,244(r8)
    3ddc:	31 60 00 44 	addic   r11,r0,68
    3de0:	80 01 00 1c 	lwz     r0,28(r1)
    3de4:	31 20 00 08 	addic   r9,r0,8
    3de8:	80 01 00 10 	lwz     r0,16(r1)
    3dec:	7d 63 5b 78 	mr      r3,r11
    3df0:	7d 24 4b 78 	mr      r4,r9
    3df4:	7c 05 03 78 	mr      r5,r0
    3df8:	48 00 00 01 	bl      3df8 <pfkey_msg2xfrm_state+0x104c>
			}
			x->props.ealgo = sa->sadb_sa_encrypt;
    3dfc:	80 01 00 14 	lwz     r0,20(r1)
    3e00:	7c 09 03 78 	mr      r9,r0
    3e04:	88 09 00 0b 	lbz     r0,11(r9)
    3e08:	54 09 06 3e 	clrlwi  r9,r0,24
    3e0c:	80 01 00 20 	lwz     r0,32(r1)
    3e10:	7c 0a 03 78 	mr      r10,r0
    3e14:	99 2a 00 93 	stb     r9,147(r10)
		}
	}
	/* x->algo.flags = sa->sadb_sa_flags; */

	x->props.family = pfkey_sadb_addr2xfrm_addr((struct sadb_address *) ext_hdrs[SADB_EXT_ADDRESS_SRC-1],
    3e18:	80 01 00 e0 	lwz     r0,224(r1)
    3e1c:	30 00 00 10 	addic   r0,r0,16
    3e20:	7c 0b 03 78 	mr      r11,r0
    3e24:	81 2b 00 00 	lwz     r9,0(r11)
    3e28:	80 01 00 20 	lwz     r0,32(r1)
    3e2c:	30 00 00 98 	addic   r0,r0,152
    3e30:	7d 23 4b 78 	mr      r3,r9
    3e34:	7c 04 03 78 	mr      r4,r0
    3e38:	4b ff da a1 	bl      18d8 <pfkey_sadb_addr2xfrm_addr>
    3e3c:	7c 60 1b 78 	mr      r0,r3
    3e40:	54 09 04 3e 	clrlwi  r9,r0,16
    3e44:	80 01 00 20 	lwz     r0,32(r1)
    3e48:	7c 07 03 78 	mr      r7,r0
    3e4c:	b1 27 00 96 	sth     r9,150(r7)
						    &x->props.saddr);
	if (!x->props.family) {
    3e50:	80 01 00 20 	lwz     r0,32(r1)
    3e54:	7c 08 03 78 	mr      r8,r0
    3e58:	a0 08 00 96 	lhz     r0,150(r8)
    3e5c:	54 00 04 3e 	clrlwi  r0,r0,16
    3e60:	2f 80 00 00 	cmpwi   cr7,r0,0
    3e64:	40 9e 00 10 	bne-    cr7,3e74 <pfkey_msg2xfrm_state+0x10c8>
		err = -EAFNOSUPPORT;
    3e68:	38 00 ff 9f 	li      r0,-97
    3e6c:	90 01 00 08 	stw     r0,8(r1)
		goto out;
    3e70:	48 00 03 5c 	b       41cc <pfkey_msg2xfrm_state+0x1420>
	}
	pfkey_sadb_addr2xfrm_addr((struct sadb_address *) ext_hdrs[SADB_EXT_ADDRESS_DST-1],
    3e74:	80 01 00 e0 	lwz     r0,224(r1)
    3e78:	30 00 00 14 	addic   r0,r0,20
    3e7c:	7c 0a 03 78 	mr      r10,r0
    3e80:	81 2a 00 00 	lwz     r9,0(r10)
    3e84:	80 01 00 20 	lwz     r0,32(r1)
    3e88:	30 00 00 1c 	addic   r0,r0,28
    3e8c:	7d 23 4b 78 	mr      r3,r9
    3e90:	7c 04 03 78 	mr      r4,r0
    3e94:	4b ff da 45 	bl      18d8 <pfkey_sadb_addr2xfrm_addr>
				  &x->id.daddr);

	if (ext_hdrs[SADB_X_EXT_SA2-1]) {
    3e98:	80 01 00 e0 	lwz     r0,224(r1)
    3e9c:	30 00 00 48 	addic   r0,r0,72
    3ea0:	7c 0b 03 78 	mr      r11,r0
    3ea4:	80 0b 00 00 	lwz     r0,0(r11)
    3ea8:	2f 80 00 00 	cmpwi   cr7,r0,0
    3eac:	41 9e 00 b8 	beq-    cr7,3f64 <pfkey_msg2xfrm_state+0x11b8>
		struct sadb_x_sa2 *sa2 = (void*)ext_hdrs[SADB_X_EXT_SA2-1];
    3eb0:	80 01 00 e0 	lwz     r0,224(r1)
    3eb4:	7c 07 03 78 	mr      r7,r0
    3eb8:	80 07 00 48 	lwz     r0,72(r7)
    3ebc:	90 01 00 3c 	stw     r0,60(r1)
		int mode = pfkey_mode_to_xfrm(sa2->sadb_x_sa2_mode);
    3ec0:	80 01 00 3c 	lwz     r0,60(r1)
    3ec4:	7c 08 03 78 	mr      r8,r0
    3ec8:	88 08 00 04 	lbz     r0,4(r8)
    3ecc:	54 00 06 3e 	clrlwi  r0,r0,24
    3ed0:	90 01 00 ac 	stw     r0,172(r1)
	}
}

static inline int pfkey_mode_to_xfrm(int mode)
{
	switch(mode) {
    3ed4:	80 01 00 ac 	lwz     r0,172(r1)
    3ed8:	2f 80 00 02 	cmpwi   cr7,r0,2
    3edc:	41 9e 00 2c 	beq-    cr7,3f08 <pfkey_msg2xfrm_state+0x115c>
    3ee0:	2f 80 00 02 	cmpwi   cr7,r0,2
    3ee4:	41 9d 00 10 	bgt-    cr7,3ef4 <pfkey_msg2xfrm_state+0x1148>
    3ee8:	2f 80 00 00 	cmpwi   cr7,r0,0
    3eec:	41 9c 00 2c 	blt-    cr7,3f18 <pfkey_msg2xfrm_state+0x116c>
    3ef0:	48 00 00 10 	b       3f00 <pfkey_msg2xfrm_state+0x1154>
    3ef4:	2f 80 00 03 	cmpwi   cr7,r0,3
    3ef8:	41 9e 00 18 	beq-    cr7,3f10 <pfkey_msg2xfrm_state+0x1164>
    3efc:	48 00 00 1c 	b       3f18 <pfkey_msg2xfrm_state+0x116c>
	case IPSEC_MODE_ANY:	/*XXX*/
	case IPSEC_MODE_TRANSPORT:
		return XFRM_MODE_TRANSPORT;
    3f00:	38 00 00 00 	li      r0,0
    3f04:	48 00 00 18 	b       3f1c <pfkey_msg2xfrm_state+0x1170>
	case IPSEC_MODE_TUNNEL:
		return XFRM_MODE_TUNNEL;
    3f08:	38 00 00 01 	li      r0,1
    3f0c:	48 00 00 10 	b       3f1c <pfkey_msg2xfrm_state+0x1170>
	case IPSEC_MODE_BEET:
		return XFRM_MODE_BEET;
    3f10:	38 00 00 04 	li      r0,4
    3f14:	48 00 00 08 	b       3f1c <pfkey_msg2xfrm_state+0x1170>
	default:
		return -1;
    3f18:	38 00 ff ff 	li      r0,-1
	pfkey_sadb_addr2xfrm_addr((struct sadb_address *) ext_hdrs[SADB_EXT_ADDRESS_DST-1],
				  &x->id.daddr);

	if (ext_hdrs[SADB_X_EXT_SA2-1]) {
		struct sadb_x_sa2 *sa2 = (void*)ext_hdrs[SADB_X_EXT_SA2-1];
		int mode = pfkey_mode_to_xfrm(sa2->sadb_x_sa2_mode);
    3f1c:	90 01 00 40 	stw     r0,64(r1)
		if (mode < 0) {
    3f20:	80 01 00 40 	lwz     r0,64(r1)
    3f24:	2f 80 00 00 	cmpwi   cr7,r0,0
    3f28:	40 9c 00 10 	bge-    cr7,3f38 <pfkey_msg2xfrm_state+0x118c>
			err = -EINVAL;
    3f2c:	38 00 ff ea 	li      r0,-22
    3f30:	90 01 00 08 	stw     r0,8(r1)
			goto out;
    3f34:	48 00 02 98 	b       41cc <pfkey_msg2xfrm_state+0x1420>
		}
		x->props.mode = mode;
    3f38:	80 01 00 40 	lwz     r0,64(r1)
    3f3c:	54 09 06 3e 	clrlwi  r9,r0,24
    3f40:	80 01 00 20 	lwz     r0,32(r1)
    3f44:	7c 0a 03 78 	mr      r10,r0
    3f48:	99 2a 00 90 	stb     r9,144(r10)
		x->props.reqid = sa2->sadb_x_sa2_reqid;
    3f4c:	80 01 00 3c 	lwz     r0,60(r1)
    3f50:	7c 0b 03 78 	mr      r11,r0
    3f54:	81 2b 00 0c 	lwz     r9,12(r11)
    3f58:	80 01 00 20 	lwz     r0,32(r1)
    3f5c:	7c 07 03 78 	mr      r7,r0
    3f60:	91 27 00 8c 	stw     r9,140(r7)
	}

	if (ext_hdrs[SADB_EXT_ADDRESS_PROXY-1]) {
    3f64:	80 01 00 e0 	lwz     r0,224(r1)
    3f68:	30 00 00 18 	addic   r0,r0,24
    3f6c:	7c 08 03 78 	mr      r8,r0
    3f70:	80 08 00 00 	lwz     r0,0(r8)
    3f74:	2f 80 00 00 	cmpwi   cr7,r0,0
    3f78:	41 9e 00 58 	beq-    cr7,3fd0 <pfkey_msg2xfrm_state+0x1224>
		struct sadb_address *addr = ext_hdrs[SADB_EXT_ADDRESS_PROXY-1];
    3f7c:	80 01 00 e0 	lwz     r0,224(r1)
    3f80:	7c 09 03 78 	mr      r9,r0
    3f84:	80 09 00 18 	lwz     r0,24(r9)
    3f88:	90 01 00 44 	stw     r0,68(r1)

		/* Nobody uses this, but we try. */
		x->sel.family = pfkey_sadb_addr2xfrm_addr(addr, &x->sel.saddr);
    3f8c:	80 01 00 20 	lwz     r0,32(r1)
    3f90:	30 00 00 44 	addic   r0,r0,68
    3f94:	80 61 00 44 	lwz     r3,68(r1)
    3f98:	7c 04 03 78 	mr      r4,r0
    3f9c:	4b ff d9 3d 	bl      18d8 <pfkey_sadb_addr2xfrm_addr>
    3fa0:	7c 60 1b 78 	mr      r0,r3
    3fa4:	54 09 04 3e 	clrlwi  r9,r0,16
    3fa8:	80 01 00 20 	lwz     r0,32(r1)
    3fac:	7c 0a 03 78 	mr      r10,r0
    3fb0:	b1 2a 00 5c 	sth     r9,92(r10)
		x->sel.prefixlen_s = addr->sadb_address_prefixlen;
    3fb4:	80 01 00 44 	lwz     r0,68(r1)
    3fb8:	7c 0b 03 78 	mr      r11,r0
    3fbc:	88 0b 00 05 	lbz     r0,5(r11)
    3fc0:	54 09 06 3e 	clrlwi  r9,r0,24
    3fc4:	80 01 00 20 	lwz     r0,32(r1)
    3fc8:	7c 07 03 78 	mr      r7,r0
    3fcc:	99 27 00 5f 	stb     r9,95(r7)
	}

	if (!x->sel.family)
    3fd0:	80 01 00 20 	lwz     r0,32(r1)
    3fd4:	7c 08 03 78 	mr      r8,r0
    3fd8:	a0 08 00 5c 	lhz     r0,92(r8)
    3fdc:	54 00 04 3e 	clrlwi  r0,r0,16
    3fe0:	2f 80 00 00 	cmpwi   cr7,r0,0
    3fe4:	40 9e 00 20 	bne-    cr7,4004 <pfkey_msg2xfrm_state+0x1258>
		x->sel.family = x->props.family;
    3fe8:	80 01 00 20 	lwz     r0,32(r1)
    3fec:	7c 09 03 78 	mr      r9,r0
    3ff0:	a0 09 00 96 	lhz     r0,150(r9)
    3ff4:	54 09 04 3e 	clrlwi  r9,r0,16
    3ff8:	80 01 00 20 	lwz     r0,32(r1)
    3ffc:	7c 0a 03 78 	mr      r10,r0
    4000:	b1 2a 00 5c 	sth     r9,92(r10)

	if (ext_hdrs[SADB_X_EXT_NAT_T_TYPE-1]) {
    4004:	80 01 00 e0 	lwz     r0,224(r1)
    4008:	30 00 00 4c 	addic   r0,r0,76
    400c:	7c 0b 03 78 	mr      r11,r0
    4010:	80 0b 00 00 	lwz     r0,0(r11)
    4014:	2f 80 00 00 	cmpwi   cr7,r0,0
    4018:	41 9e 01 48 	beq-    cr7,4160 <pfkey_msg2xfrm_state+0x13b4>
    401c:	38 00 00 18 	li      r0,24
    4020:	90 01 00 b0 	stw     r0,176(r1)
    4024:	38 00 00 d0 	li      r0,208
    4028:	90 01 00 b4 	stw     r0,180(r1)
    402c:	80 61 00 b0 	lwz     r3,176(r1)
    4030:	80 81 00 b4 	lwz     r4,180(r1)
    4034:	48 00 00 01 	bl      4034 <pfkey_msg2xfrm_state+0x1288>
    4038:	7c 60 1b 78 	mr      r0,r3
		struct sadb_x_nat_t_type* n_type;
		struct xfrm_encap_tmpl *natt;

		x->encap = kmalloc(sizeof(*x->encap), GFP_KERNEL);
    403c:	7c 09 03 78 	mr      r9,r0
    4040:	80 01 00 20 	lwz     r0,32(r1)
    4044:	7c 07 03 78 	mr      r7,r0
    4048:	91 27 01 00 	stw     r9,256(r7)
		if (!x->encap)
    404c:	80 01 00 20 	lwz     r0,32(r1)
    4050:	7c 08 03 78 	mr      r8,r0
    4054:	80 08 01 00 	lwz     r0,256(r8)
    4058:	2f 80 00 00 	cmpwi   cr7,r0,0
    405c:	41 9e 01 64 	beq-    cr7,41c0 <pfkey_msg2xfrm_state+0x1414>
			goto out;

		natt = x->encap;
    4060:	80 01 00 20 	lwz     r0,32(r1)
    4064:	7c 09 03 78 	mr      r9,r0
    4068:	80 09 01 00 	lwz     r0,256(r9)
    406c:	90 01 00 48 	stw     r0,72(r1)
		n_type = ext_hdrs[SADB_X_EXT_NAT_T_TYPE-1];
    4070:	80 01 00 e0 	lwz     r0,224(r1)
    4074:	7c 0a 03 78 	mr      r10,r0
    4078:	80 0a 00 4c 	lwz     r0,76(r10)
    407c:	90 01 00 4c 	stw     r0,76(r1)
		natt->encap_type = n_type->sadb_x_nat_t_type_type;
    4080:	80 01 00 4c 	lwz     r0,76(r1)
    4084:	7c 0b 03 78 	mr      r11,r0
    4088:	88 0b 00 04 	lbz     r0,4(r11)
    408c:	54 00 06 3e 	clrlwi  r0,r0,24
    4090:	7c 09 03 78 	mr      r9,r0
    4094:	80 01 00 48 	lwz     r0,72(r1)
    4098:	7c 07 03 78 	mr      r7,r0
    409c:	b1 27 00 00 	sth     r9,0(r7)

		if (ext_hdrs[SADB_X_EXT_NAT_T_SPORT-1]) {
    40a0:	80 01 00 e0 	lwz     r0,224(r1)
    40a4:	30 00 00 50 	addic   r0,r0,80
    40a8:	7c 08 03 78 	mr      r8,r0
    40ac:	80 08 00 00 	lwz     r0,0(r8)
    40b0:	2f 80 00 00 	cmpwi   cr7,r0,0
    40b4:	41 9e 00 30 	beq-    cr7,40e4 <pfkey_msg2xfrm_state+0x1338>
			struct sadb_x_nat_t_port* n_port =
    40b8:	80 01 00 e0 	lwz     r0,224(r1)
    40bc:	7c 09 03 78 	mr      r9,r0
    40c0:	80 09 00 50 	lwz     r0,80(r9)
    40c4:	90 01 00 50 	stw     r0,80(r1)
				ext_hdrs[SADB_X_EXT_NAT_T_SPORT-1];
			natt->encap_sport = n_port->sadb_x_nat_t_port_port;
    40c8:	80 01 00 50 	lwz     r0,80(r1)
    40cc:	7c 0a 03 78 	mr      r10,r0
    40d0:	a0 0a 00 04 	lhz     r0,4(r10)
    40d4:	54 09 04 3e 	clrlwi  r9,r0,16
    40d8:	80 01 00 48 	lwz     r0,72(r1)
    40dc:	7c 0b 03 78 	mr      r11,r0
    40e0:	b1 2b 00 02 	sth     r9,2(r11)
		}
		if (ext_hdrs[SADB_X_EXT_NAT_T_DPORT-1]) {
    40e4:	80 01 00 e0 	lwz     r0,224(r1)
    40e8:	30 00 00 54 	addic   r0,r0,84
    40ec:	7c 07 03 78 	mr      r7,r0
    40f0:	80 07 00 00 	lwz     r0,0(r7)
    40f4:	2f 80 00 00 	cmpwi   cr7,r0,0
    40f8:	41 9e 00 30 	beq-    cr7,4128 <pfkey_msg2xfrm_state+0x137c>
			struct sadb_x_nat_t_port* n_port =
    40fc:	80 01 00 e0 	lwz     r0,224(r1)
    4100:	7c 08 03 78 	mr      r8,r0
    4104:	80 08 00 54 	lwz     r0,84(r8)
    4108:	90 01 00 54 	stw     r0,84(r1)
				ext_hdrs[SADB_X_EXT_NAT_T_DPORT-1];
			natt->encap_dport = n_port->sadb_x_nat_t_port_port;
    410c:	80 01 00 54 	lwz     r0,84(r1)
    4110:	7c 09 03 78 	mr      r9,r0
    4114:	a0 09 00 04 	lhz     r0,4(r9)
    4118:	54 09 04 3e 	clrlwi  r9,r0,16
    411c:	80 01 00 48 	lwz     r0,72(r1)
    4120:	7c 0a 03 78 	mr      r10,r0
    4124:	b1 2a 00 04 	sth     r9,4(r10)
		}
		memset(&natt->encap_oa, 0, sizeof(natt->encap_oa));
    4128:	80 01 00 48 	lwz     r0,72(r1)
    412c:	30 00 00 08 	addic   r0,r0,8
    4130:	39 20 00 00 	li      r9,0
    4134:	7c 0b 03 78 	mr      r11,r0
    4138:	91 2b 00 00 	stw     r9,0(r11)
    413c:	39 20 00 00 	li      r9,0
    4140:	7c 07 03 78 	mr      r7,r0
    4144:	91 27 00 04 	stw     r9,4(r7)
    4148:	39 20 00 00 	li      r9,0
    414c:	7c 08 03 78 	mr      r8,r0
    4150:	91 28 00 08 	stw     r9,8(r8)
    4154:	39 20 00 00 	li      r9,0
    4158:	7c 0a 03 78 	mr      r10,r0
    415c:	91 2a 00 0c 	stw     r9,12(r10)
	}

	err = xfrm_init_state(x);
    4160:	80 61 00 20 	lwz     r3,32(r1)
    4164:	48 00 00 01 	bl      4164 <pfkey_msg2xfrm_state+0x13b8>
    4168:	90 61 00 08 	stw     r3,8(r1)
	if (err)
    416c:	80 01 00 08 	lwz     r0,8(r1)
    4170:	2f 80 00 00 	cmpwi   cr7,r0,0
    4174:	40 9e 00 54 	bne-    cr7,41c8 <pfkey_msg2xfrm_state+0x141c>
		goto out;

	x->km.seq = hdr->sadb_msg_seq;
    4178:	80 01 00 dc 	lwz     r0,220(r1)
    417c:	7c 0b 03 78 	mr      r11,r0
    4180:	81 2b 00 08 	lwz     r9,8(r11)
    4184:	80 01 00 20 	lwz     r0,32(r1)
    4188:	7c 07 03 78 	mr      r7,r0
    418c:	91 27 00 88 	stw     r9,136(r7)
	return x;
    4190:	80 01 00 20 	lwz     r0,32(r1)
    4194:	48 00 00 94 	b       4228 <pfkey_msg2xfrm_state+0x147c>
	sec_ctx = (struct sadb_x_sec_ctx *) ext_hdrs[SADB_X_EXT_SEC_CTX-1];
	if (sec_ctx != NULL) {
		struct xfrm_user_sec_ctx *uctx = pfkey_sadb2xfrm_user_sec_ctx(sec_ctx);

		if (!uctx)
			goto out;
    4198:	60 00 00 00 	nop
    419c:	48 00 00 30 	b       41cc <pfkey_msg2xfrm_state+0x1420>

		err = security_xfrm_state_alloc(x, uctx);
		kfree(uctx);

		if (err)
			goto out;
    41a0:	60 00 00 00 	nop
    41a4:	48 00 00 28 	b       41cc <pfkey_msg2xfrm_state+0x1420>
		}
		if (key)
			keysize = (key->sadb_key_bits + 7) / 8;
		x->aalg = kmalloc(sizeof(*x->aalg) + keysize, GFP_KERNEL);
		if (!x->aalg)
			goto out;
    41a8:	60 00 00 00 	nop
    41ac:	48 00 00 20 	b       41cc <pfkey_msg2xfrm_state+0x1420>
				err = -ENOSYS;
				goto out;
			}
			x->calg = kmalloc(sizeof(*x->calg), GFP_KERNEL);
			if (!x->calg)
				goto out;
    41b0:	60 00 00 00 	nop
    41b4:	48 00 00 18 	b       41cc <pfkey_msg2xfrm_state+0x1420>
			key = (struct sadb_key*) ext_hdrs[SADB_EXT_KEY_ENCRYPT-1];
			if (key)
				keysize = (key->sadb_key_bits + 7) / 8;
			x->ealg = kmalloc(sizeof(*x->ealg) + keysize, GFP_KERNEL);
			if (!x->ealg)
				goto out;
    41b8:	60 00 00 00 	nop
    41bc:	48 00 00 10 	b       41cc <pfkey_msg2xfrm_state+0x1420>
		struct sadb_x_nat_t_type* n_type;
		struct xfrm_encap_tmpl *natt;

		x->encap = kmalloc(sizeof(*x->encap), GFP_KERNEL);
		if (!x->encap)
			goto out;
    41c0:	60 00 00 00 	nop
    41c4:	48 00 00 08 	b       41cc <pfkey_msg2xfrm_state+0x1420>
		memset(&natt->encap_oa, 0, sizeof(natt->encap_oa));
	}

	err = xfrm_init_state(x);
	if (err)
		goto out;
    41c8:	60 00 00 00 	nop

	x->km.seq = hdr->sadb_msg_seq;
	return x;

out:
	x->km.state = XFRM_STATE_DEAD;
    41cc:	80 01 00 20 	lwz     r0,32(r1)
    41d0:	39 20 00 05 	li      r9,5
    41d4:	7c 08 03 78 	mr      r8,r0
    41d8:	99 28 00 84 	stb     r9,132(r8)
    41dc:	80 01 00 20 	lwz     r0,32(r1)
    41e0:	90 01 00 b8 	stw     r0,184(r1)
	atomic_dec(&x->refcnt);
}

static inline void xfrm_state_put(struct xfrm_state *x)
{
	if (atomic_dec_and_test(&x->refcnt))
    41e4:	80 01 00 b8 	lwz     r0,184(r1)
    41e8:	30 00 00 18 	addic   r0,r0,24
    41ec:	90 01 00 bc 	stw     r0,188(r1)
	PPC405_ERR77(0,%1)
"	stwcx.	%0,0,%1\n\
	bne-	1b"
	PPC_ACQUIRE_BARRIER
	: "=&r" (t)
	: "r" (&v->counter)
    41f0:	80 01 00 bc 	lwz     r0,188(r1)

static __inline__ int atomic_dec_return(atomic_t *v)
{
	int t;

	__asm__ __volatile__(
    41f4:	7f e0 00 28 	lwarx   r31,0,r0
    41f8:	33 ff ff ff 	addic   r31,r31,-1
    41fc:	7f e0 01 2d 	stwcx.  r31,0,r0
    4200:	40 a2 ff f4 	bne-    41f4 <pfkey_msg2xfrm_state+0x1448>
    4204:	93 e1 00 c0 	stw     r31,192(r1)
	PPC_ACQUIRE_BARRIER
	: "=&r" (t)
	: "r" (&v->counter)
	: "cc", "xer", "memory");

	return t;
    4208:	80 01 00 c0 	lwz     r0,192(r1)
    420c:	2f 80 00 00 	cmpwi   cr7,r0,0
    4210:	40 9e 00 0c 	bne-    cr7,421c <pfkey_msg2xfrm_state+0x1470>
		__xfrm_state_destroy(x);
    4214:	80 61 00 b8 	lwz     r3,184(r1)
    4218:	48 00 00 01 	bl      4218 <pfkey_msg2xfrm_state+0x146c>
    421c:	80 01 00 08 	lwz     r0,8(r1)
    4220:	90 01 00 c4 	stw     r0,196(r1)
    4224:	80 01 00 c4 	lwz     r0,196(r1)
	xfrm_state_put(x);
	return ERR_PTR(err);
}
    4228:	7c 03 03 78 	mr      r3,r0
    422c:	80 01 01 04 	lwz     r0,260(r1)
    4230:	7c 08 03 a6 	mtlr    r0
    4234:	bb 81 00 f0 	lmw     r28,240(r1)
    4238:	38 21 01 00 	addi    r1,r1,256
    423c:	4e 80 00 20 	blr

00004240 <pfkey_reserved>:

static int pfkey_reserved(struct sock *sk, struct sk_buff *skb, struct sadb_msg *hdr, void **ext_hdrs)
{
    4240:	94 21 ff e0 	stwu    r1,-32(r1)
    4244:	90 61 00 08 	stw     r3,8(r1)
    4248:	90 81 00 0c 	stw     r4,12(r1)
    424c:	90 a1 00 10 	stw     r5,16(r1)
    4250:	90 c1 00 14 	stw     r6,20(r1)
	return -EOPNOTSUPP;
    4254:	38 00 ff a1 	li      r0,-95
}
    4258:	7c 03 03 78 	mr      r3,r0
    425c:	38 21 00 20 	addi    r1,r1,32
    4260:	4e 80 00 20 	blr

00004264 <pfkey_getspi>:

static int pfkey_getspi(struct sock *sk, struct sk_buff *skb, struct sadb_msg *hdr, void **ext_hdrs)
{
    4264:	94 21 ff 30 	stwu    r1,-208(r1)
    4268:	7c 08 02 a6 	mflr    r0
    426c:	90 01 00 d4 	stw     r0,212(r1)
    4270:	93 e1 00 cc 	stw     r31,204(r1)
    4274:	90 61 00 b0 	stw     r3,176(r1)
    4278:	90 81 00 b4 	stw     r4,180(r1)
    427c:	90 a1 00 b8 	stw     r5,184(r1)
    4280:	90 c1 00 bc 	stw     r6,188(r1)
    4284:	80 01 00 b0 	lwz     r0,176(r1)
    4288:	90 01 00 a4 	stw     r0,164(r1)
    428c:	3c 00 00 00 	lis     r0,0
    4290:	30 00 00 00 	addic   r0,r0,0
	struct net *net = sock_net(sk);
    4294:	90 01 00 2c 	stw     r0,44(r1)
	struct sk_buff *resp_skb;
	struct sadb_x_sa2 *sa2;
	struct sadb_address *saddr, *daddr;
	struct sadb_msg *out_hdr;
	struct sadb_spirange *range;
	struct xfrm_state *x = NULL;
    4298:	38 00 00 00 	li      r0,0
    429c:	90 01 00 10 	stw     r0,16(r1)
	int err;
	u32 min_spi, max_spi;
	u32 reqid;
	u8 proto;
	unsigned short family;
	xfrm_address_t *xsaddr = NULL, *xdaddr = NULL;
    42a0:	38 00 00 00 	li      r0,0
    42a4:	90 01 00 24 	stw     r0,36(r1)
    42a8:	38 00 00 00 	li      r0,0
    42ac:	90 01 00 28 	stw     r0,40(r1)

	if (!present_and_same_family(ext_hdrs[SADB_EXT_ADDRESS_SRC-1],
    42b0:	80 01 00 bc 	lwz     r0,188(r1)
    42b4:	30 00 00 10 	addic   r0,r0,16
    42b8:	7c 0b 03 78 	mr      r11,r0
    42bc:	81 2b 00 00 	lwz     r9,0(r11)
				     ext_hdrs[SADB_EXT_ADDRESS_DST-1]))
    42c0:	80 01 00 bc 	lwz     r0,188(r1)
    42c4:	30 00 00 14 	addic   r0,r0,20
	u32 reqid;
	u8 proto;
	unsigned short family;
	xfrm_address_t *xsaddr = NULL, *xdaddr = NULL;

	if (!present_and_same_family(ext_hdrs[SADB_EXT_ADDRESS_SRC-1],
    42c8:	7c 0b 03 78 	mr      r11,r0
    42cc:	80 0b 00 00 	lwz     r0,0(r11)
    42d0:	7d 23 4b 78 	mr      r3,r9
    42d4:	7c 04 03 78 	mr      r4,r0
    42d8:	4b ff d0 d1 	bl      13a8 <present_and_same_family>
    42dc:	7c 60 1b 78 	mr      r0,r3
    42e0:	2f 80 00 00 	cmpwi   cr7,r0,0
    42e4:	40 9e 00 0c 	bne-    cr7,42f0 <pfkey_getspi+0x8c>
				     ext_hdrs[SADB_EXT_ADDRESS_DST-1]))
		return -EINVAL;
    42e8:	38 00 ff ea 	li      r0,-22
    42ec:	48 00 05 18 	b       4804 <pfkey_getspi+0x5a0>

	proto = pfkey_satype2proto(hdr->sadb_msg_satype);
    42f0:	80 01 00 b8 	lwz     r0,184(r1)
    42f4:	7c 09 03 78 	mr      r9,r0
    42f8:	88 09 00 03 	lbz     r0,3(r9)
    42fc:	54 00 06 3e 	clrlwi  r0,r0,24
    4300:	7c 03 03 78 	mr      r3,r0
    4304:	4b ff d3 f5 	bl      16f8 <pfkey_satype2proto>
    4308:	7c 60 1b 78 	mr      r0,r3
    430c:	98 01 00 30 	stb     r0,48(r1)
	if (proto == 0)
    4310:	88 01 00 30 	lbz     r0,48(r1)
    4314:	54 00 06 3e 	clrlwi  r0,r0,24
    4318:	2f 80 00 00 	cmpwi   cr7,r0,0
    431c:	40 9e 00 0c 	bne-    cr7,4328 <pfkey_getspi+0xc4>
		return -EINVAL;
    4320:	38 00 ff ea 	li      r0,-22
    4324:	48 00 04 e0 	b       4804 <pfkey_getspi+0x5a0>

	if ((sa2 = ext_hdrs[SADB_X_EXT_SA2-1]) != NULL) {
    4328:	80 01 00 bc 	lwz     r0,188(r1)
    432c:	7c 0b 03 78 	mr      r11,r0
    4330:	80 0b 00 48 	lwz     r0,72(r11)
    4334:	90 01 00 34 	stw     r0,52(r1)
    4338:	80 01 00 34 	lwz     r0,52(r1)
    433c:	2f 80 00 00 	cmpwi   cr7,r0,0
    4340:	41 9e 00 8c 	beq-    cr7,43cc <pfkey_getspi+0x168>
		mode = pfkey_mode_to_xfrm(sa2->sadb_x_sa2_mode);
    4344:	80 01 00 34 	lwz     r0,52(r1)
    4348:	7c 09 03 78 	mr      r9,r0
    434c:	88 09 00 04 	lbz     r0,4(r9)
    4350:	54 00 06 3e 	clrlwi  r0,r0,24
    4354:	90 01 00 54 	stw     r0,84(r1)
	}
}

static inline int pfkey_mode_to_xfrm(int mode)
{
	switch(mode) {
    4358:	80 01 00 54 	lwz     r0,84(r1)
    435c:	2f 80 00 02 	cmpwi   cr7,r0,2
    4360:	41 9e 00 2c 	beq-    cr7,438c <pfkey_getspi+0x128>
    4364:	2f 80 00 02 	cmpwi   cr7,r0,2
    4368:	41 9d 00 10 	bgt-    cr7,4378 <pfkey_getspi+0x114>
    436c:	2f 80 00 00 	cmpwi   cr7,r0,0
    4370:	41 9c 00 2c 	blt-    cr7,439c <pfkey_getspi+0x138>
    4374:	48 00 00 10 	b       4384 <pfkey_getspi+0x120>
    4378:	2f 80 00 03 	cmpwi   cr7,r0,3
    437c:	41 9e 00 18 	beq-    cr7,4394 <pfkey_getspi+0x130>
    4380:	48 00 00 1c 	b       439c <pfkey_getspi+0x138>
	case IPSEC_MODE_ANY:	/*XXX*/
	case IPSEC_MODE_TRANSPORT:
		return XFRM_MODE_TRANSPORT;
    4384:	38 00 00 00 	li      r0,0
    4388:	48 00 00 18 	b       43a0 <pfkey_getspi+0x13c>
	case IPSEC_MODE_TUNNEL:
		return XFRM_MODE_TUNNEL;
    438c:	38 00 00 01 	li      r0,1
    4390:	48 00 00 10 	b       43a0 <pfkey_getspi+0x13c>
	case IPSEC_MODE_BEET:
		return XFRM_MODE_BEET;
    4394:	38 00 00 04 	li      r0,4
    4398:	48 00 00 08 	b       43a0 <pfkey_getspi+0x13c>
	default:
		return -1;
    439c:	38 00 ff ff 	li      r0,-1
	proto = pfkey_satype2proto(hdr->sadb_msg_satype);
	if (proto == 0)
		return -EINVAL;

	if ((sa2 = ext_hdrs[SADB_X_EXT_SA2-1]) != NULL) {
		mode = pfkey_mode_to_xfrm(sa2->sadb_x_sa2_mode);
    43a0:	90 01 00 14 	stw     r0,20(r1)
		if (mode < 0)
    43a4:	80 01 00 14 	lwz     r0,20(r1)
    43a8:	2f 80 00 00 	cmpwi   cr7,r0,0
    43ac:	40 9c 00 0c 	bge-    cr7,43b8 <pfkey_getspi+0x154>
			return -EINVAL;
    43b0:	38 00 ff ea 	li      r0,-22
    43b4:	48 00 04 50 	b       4804 <pfkey_getspi+0x5a0>
		reqid = sa2->sadb_x_sa2_reqid;
    43b8:	80 01 00 34 	lwz     r0,52(r1)
    43bc:	7c 0b 03 78 	mr      r11,r0
    43c0:	80 0b 00 0c 	lwz     r0,12(r11)
    43c4:	90 01 00 20 	stw     r0,32(r1)
    43c8:	48 00 00 14 	b       43dc <pfkey_getspi+0x178>
	} else {
		mode = 0;
    43cc:	38 00 00 00 	li      r0,0
    43d0:	90 01 00 14 	stw     r0,20(r1)
		reqid = 0;
    43d4:	38 00 00 00 	li      r0,0
    43d8:	90 01 00 20 	stw     r0,32(r1)
	}

	saddr = ext_hdrs[SADB_EXT_ADDRESS_SRC-1];
    43dc:	80 01 00 bc 	lwz     r0,188(r1)
    43e0:	7c 09 03 78 	mr      r9,r0
    43e4:	80 09 00 10 	lwz     r0,16(r9)
    43e8:	90 01 00 38 	stw     r0,56(r1)
	daddr = ext_hdrs[SADB_EXT_ADDRESS_DST-1];
    43ec:	80 01 00 bc 	lwz     r0,188(r1)
    43f0:	7c 0b 03 78 	mr      r11,r0
    43f4:	80 0b 00 14 	lwz     r0,20(r11)
    43f8:	90 01 00 3c 	stw     r0,60(r1)

	family = ((struct sockaddr *)(saddr + 1))->sa_family;
    43fc:	80 01 00 38 	lwz     r0,56(r1)
    4400:	30 00 00 08 	addic   r0,r0,8
    4404:	7c 09 03 78 	mr      r9,r0
    4408:	a0 09 00 00 	lhz     r0,0(r9)
    440c:	b0 01 00 40 	sth     r0,64(r1)
	switch (family) {
    4410:	a0 01 00 40 	lhz     r0,64(r1)
    4414:	54 00 04 3e 	clrlwi  r0,r0,16
    4418:	2f 80 00 02 	cmpwi   cr7,r0,2
    441c:	41 9e 00 10 	beq-    cr7,442c <pfkey_getspi+0x1c8>
    4420:	2f 80 00 0a 	cmpwi   cr7,r0,10
    4424:	41 9e 00 2c 	beq-    cr7,4450 <pfkey_getspi+0x1ec>
    4428:	48 00 00 4c 	b       4474 <pfkey_getspi+0x210>
	case AF_INET:
		xdaddr = (xfrm_address_t *)&((struct sockaddr_in *)(daddr + 1))->sin_addr.s_addr;
    442c:	80 01 00 3c 	lwz     r0,60(r1)
    4430:	30 00 00 08 	addic   r0,r0,8
    4434:	30 00 00 04 	addic   r0,r0,4
    4438:	90 01 00 28 	stw     r0,40(r1)
		xsaddr = (xfrm_address_t *)&((struct sockaddr_in *)(saddr + 1))->sin_addr.s_addr;
    443c:	80 01 00 38 	lwz     r0,56(r1)
    4440:	30 00 00 08 	addic   r0,r0,8
    4444:	30 00 00 04 	addic   r0,r0,4
    4448:	90 01 00 24 	stw     r0,36(r1)
		break;
    444c:	48 00 00 28 	b       4474 <pfkey_getspi+0x210>
#if defined(CONFIG_IPV6) || defined(CONFIG_IPV6_MODULE)
	case AF_INET6:
		xdaddr = (xfrm_address_t *)&((struct sockaddr_in6 *)(daddr + 1))->sin6_addr;
    4450:	80 01 00 3c 	lwz     r0,60(r1)
    4454:	30 00 00 08 	addic   r0,r0,8
    4458:	30 00 00 08 	addic   r0,r0,8
    445c:	90 01 00 28 	stw     r0,40(r1)
		xsaddr = (xfrm_address_t *)&((struct sockaddr_in6 *)(saddr + 1))->sin6_addr;
    4460:	80 01 00 38 	lwz     r0,56(r1)
    4464:	30 00 00 08 	addic   r0,r0,8
    4468:	30 00 00 08 	addic   r0,r0,8
    446c:	90 01 00 24 	stw     r0,36(r1)
		break;
    4470:	60 00 00 00 	nop
#endif
	}

	if (hdr->sadb_msg_seq) {
    4474:	80 01 00 b8 	lwz     r0,184(r1)
    4478:	7c 0b 03 78 	mr      r11,r0
    447c:	80 0b 00 08 	lwz     r0,8(r11)
    4480:	2f 80 00 00 	cmpwi   cr7,r0,0
    4484:	41 9e 00 f0 	beq-    cr7,4574 <pfkey_getspi+0x310>
		x = xfrm_find_acq_byseq(net, DUMMY_MARK, hdr->sadb_msg_seq);
    4488:	80 01 00 b8 	lwz     r0,184(r1)
    448c:	7c 09 03 78 	mr      r9,r0
    4490:	80 09 00 08 	lwz     r0,8(r9)
    4494:	80 61 00 2c 	lwz     r3,44(r1)
    4498:	38 80 00 00 	li      r4,0
    449c:	7c 05 03 78 	mr      r5,r0
    44a0:	48 00 00 01 	bl      44a0 <pfkey_getspi+0x23c>
    44a4:	90 61 00 10 	stw     r3,16(r1)
		if (x && xfrm_addr_cmp(&x->id.daddr, xdaddr, family)) {
    44a8:	80 01 00 10 	lwz     r0,16(r1)
    44ac:	2f 80 00 00 	cmpwi   cr7,r0,0
    44b0:	41 9e 00 c4 	beq-    cr7,4574 <pfkey_getspi+0x310>
    44b4:	80 01 00 10 	lwz     r0,16(r1)
    44b8:	31 20 00 1c 	addic   r9,r0,28
    44bc:	a0 01 00 40 	lhz     r0,64(r1)
    44c0:	54 00 04 3e 	clrlwi  r0,r0,16
    44c4:	91 21 00 58 	stw     r9,88(r1)
    44c8:	81 21 00 28 	lwz     r9,40(r1)
    44cc:	91 21 00 5c 	stw     r9,92(r1)
    44d0:	90 01 00 60 	stw     r0,96(r1)
			      unsigned int);

static inline int xfrm_addr_cmp(xfrm_address_t *a, xfrm_address_t *b,
				int family)
{
	switch (family) {
    44d4:	80 01 00 60 	lwz     r0,96(r1)
    44d8:	2f 80 00 0a 	cmpwi   cr7,r0,10
    44dc:	41 9e 00 24 	beq-    cr7,4500 <pfkey_getspi+0x29c>
	default:
	case AF_INET:
		return (__force u32)a->a4 - (__force u32)b->a4;
    44e0:	80 01 00 58 	lwz     r0,88(r1)
    44e4:	7c 0b 03 78 	mr      r11,r0
    44e8:	81 2b 00 00 	lwz     r9,0(r11)
    44ec:	80 01 00 5c 	lwz     r0,92(r1)
    44f0:	7c 0b 03 78 	mr      r11,r0
    44f4:	80 0b 00 00 	lwz     r0,0(r11)
    44f8:	7c 00 48 50 	subf    r0,r0,r9
    44fc:	48 00 00 28 	b       4524 <pfkey_getspi+0x2c0>
    4500:	80 01 00 58 	lwz     r0,88(r1)
    4504:	90 01 00 64 	stw     r0,100(r1)
    4508:	80 01 00 5c 	lwz     r0,92(r1)
    450c:	90 01 00 68 	stw     r0,104(r1)
    4510:	80 61 00 64 	lwz     r3,100(r1)
    4514:	80 81 00 68 	lwz     r4,104(r1)
    4518:	38 a0 00 10 	li      r5,16
    451c:	48 00 00 01 	bl      451c <pfkey_getspi+0x2b8>
    4520:	7c 60 1b 78 	mr      r0,r3
    4524:	2f 80 00 00 	cmpwi   cr7,r0,0
    4528:	41 9e 00 4c 	beq-    cr7,4574 <pfkey_getspi+0x310>
    452c:	80 01 00 10 	lwz     r0,16(r1)
    4530:	90 01 00 6c 	stw     r0,108(r1)
	atomic_dec(&x->refcnt);
}

static inline void xfrm_state_put(struct xfrm_state *x)
{
	if (atomic_dec_and_test(&x->refcnt))
    4534:	80 01 00 6c 	lwz     r0,108(r1)
    4538:	30 00 00 18 	addic   r0,r0,24
    453c:	90 01 00 70 	stw     r0,112(r1)
	PPC405_ERR77(0,%1)
"	stwcx.	%0,0,%1\n\
	bne-	1b"
	PPC_ACQUIRE_BARRIER
	: "=&r" (t)
	: "r" (&v->counter)
    4540:	80 01 00 70 	lwz     r0,112(r1)

static __inline__ int atomic_dec_return(atomic_t *v)
{
	int t;

	__asm__ __volatile__(
    4544:	7f e0 00 28 	lwarx   r31,0,r0
    4548:	33 ff ff ff 	addic   r31,r31,-1
    454c:	7f e0 01 2d 	stwcx.  r31,0,r0
    4550:	40 a2 ff f4 	bne-    4544 <pfkey_getspi+0x2e0>
    4554:	93 e1 00 74 	stw     r31,116(r1)
	PPC_ACQUIRE_BARRIER
	: "=&r" (t)
	: "r" (&v->counter)
	: "cc", "xer", "memory");

	return t;
    4558:	80 01 00 74 	lwz     r0,116(r1)
    455c:	2f 80 00 00 	cmpwi   cr7,r0,0
    4560:	40 9e 00 0c 	bne-    cr7,456c <pfkey_getspi+0x308>
		__xfrm_state_destroy(x);
    4564:	80 61 00 6c 	lwz     r3,108(r1)
    4568:	48 00 00 01 	bl      4568 <pfkey_getspi+0x304>
			xfrm_state_put(x);
			x = NULL;
    456c:	38 00 00 00 	li      r0,0
    4570:	90 01 00 10 	stw     r0,16(r1)
		}
	}

	if (!x)
    4574:	80 01 00 10 	lwz     r0,16(r1)
    4578:	2f 80 00 00 	cmpwi   cr7,r0,0
    457c:	40 9e 00 4c 	bne-    cr7,45c8 <pfkey_getspi+0x364>
		x = xfrm_find_acq(net, &dummy_mark, mode, reqid, proto, xdaddr, xsaddr, 1, family);
    4580:	80 01 00 14 	lwz     r0,20(r1)
    4584:	54 09 06 3e 	clrlwi  r9,r0,24
    4588:	88 01 00 30 	lbz     r0,48(r1)
    458c:	54 00 06 3e 	clrlwi  r0,r0,24
    4590:	a1 61 00 40 	lhz     r11,64(r1)
    4594:	55 6b 04 3e 	clrlwi  r11,r11,16
    4598:	91 61 00 08 	stw     r11,8(r1)
    459c:	80 61 00 2c 	lwz     r3,44(r1)
    45a0:	3d 60 00 00 	lis     r11,0
    45a4:	38 8b 00 00 	addi    r4,r11,0
    45a8:	7d 25 4b 78 	mr      r5,r9
    45ac:	80 c1 00 20 	lwz     r6,32(r1)
    45b0:	7c 07 03 78 	mr      r7,r0
    45b4:	81 01 00 28 	lwz     r8,40(r1)
    45b8:	81 21 00 24 	lwz     r9,36(r1)
    45bc:	39 40 00 01 	li      r10,1
    45c0:	48 00 00 01 	bl      45c0 <pfkey_getspi+0x35c>
    45c4:	90 61 00 10 	stw     r3,16(r1)

	if (x == NULL)
    45c8:	80 01 00 10 	lwz     r0,16(r1)
    45cc:	2f 80 00 00 	cmpwi   cr7,r0,0
    45d0:	40 9e 00 0c 	bne-    cr7,45dc <pfkey_getspi+0x378>
		return -ENOENT;
    45d4:	38 00 ff fe 	li      r0,-2
    45d8:	48 00 02 2c 	b       4804 <pfkey_getspi+0x5a0>

	min_spi = 0x100;
    45dc:	38 00 01 00 	li      r0,256
    45e0:	90 01 00 18 	stw     r0,24(r1)
	max_spi = 0x0fffffff;
    45e4:	3c 00 0f ff 	lis     r0,4095
    45e8:	60 00 ff ff 	ori     r0,r0,65535
    45ec:	90 01 00 1c 	stw     r0,28(r1)

	range = ext_hdrs[SADB_EXT_SPIRANGE-1];
    45f0:	80 01 00 bc 	lwz     r0,188(r1)
    45f4:	7c 09 03 78 	mr      r9,r0
    45f8:	80 09 00 3c 	lwz     r0,60(r9)
    45fc:	90 01 00 44 	stw     r0,68(r1)
	if (range) {
    4600:	80 01 00 44 	lwz     r0,68(r1)
    4604:	2f 80 00 00 	cmpwi   cr7,r0,0
    4608:	41 9e 00 24 	beq-    cr7,462c <pfkey_getspi+0x3c8>
		min_spi = range->sadb_spirange_min;
    460c:	80 01 00 44 	lwz     r0,68(r1)
    4610:	7c 0b 03 78 	mr      r11,r0
    4614:	80 0b 00 04 	lwz     r0,4(r11)
    4618:	90 01 00 18 	stw     r0,24(r1)
		max_spi = range->sadb_spirange_max;
    461c:	80 01 00 44 	lwz     r0,68(r1)
    4620:	7c 09 03 78 	mr      r9,r0
    4624:	80 09 00 08 	lwz     r0,8(r9)
    4628:	90 01 00 1c 	stw     r0,28(r1)
	}

	err = xfrm_alloc_spi(x, min_spi, max_spi);
    462c:	80 61 00 10 	lwz     r3,16(r1)
    4630:	80 81 00 18 	lwz     r4,24(r1)
    4634:	80 a1 00 1c 	lwz     r5,28(r1)
    4638:	48 00 00 01 	bl      4638 <pfkey_getspi+0x3d4>
    463c:	90 61 00 48 	stw     r3,72(r1)
	resp_skb = err ? ERR_PTR(err) : pfkey_xfrm_state2msg(x);
    4640:	80 01 00 48 	lwz     r0,72(r1)
    4644:	2f 80 00 00 	cmpwi   cr7,r0,0
    4648:	41 9e 00 14 	beq-    cr7,465c <pfkey_getspi+0x3f8>
    464c:	80 01 00 48 	lwz     r0,72(r1)
    4650:	90 01 00 78 	stw     r0,120(r1)
    4654:	80 01 00 78 	lwz     r0,120(r1)
    4658:	48 00 00 24 	b       467c <pfkey_getspi+0x418>
    465c:	80 01 00 10 	lwz     r0,16(r1)
    4660:	90 01 00 7c 	stw     r0,124(r1)

static inline struct sk_buff *pfkey_xfrm_state2msg(struct xfrm_state *x)
{
	struct sk_buff *skb;

	skb = __pfkey_xfrm_state2msg(x, 1, 3);
    4664:	80 61 00 7c 	lwz     r3,124(r1)
    4668:	38 80 00 01 	li      r4,1
    466c:	38 a0 00 03 	li      r5,3
    4670:	4b ff d5 ad 	bl      1c1c <__pfkey_xfrm_state2msg>
    4674:	90 61 00 80 	stw     r3,128(r1)

	return skb;
    4678:	80 01 00 80 	lwz     r0,128(r1)
		min_spi = range->sadb_spirange_min;
		max_spi = range->sadb_spirange_max;
	}

	err = xfrm_alloc_spi(x, min_spi, max_spi);
	resp_skb = err ? ERR_PTR(err) : pfkey_xfrm_state2msg(x);
    467c:	90 01 00 4c 	stw     r0,76(r1)
    4680:	80 01 00 4c 	lwz     r0,76(r1)
    4684:	90 01 00 84 	stw     r0,132(r1)
	return (long) ptr;
}

static inline long __must_check IS_ERR(const void *ptr)
{
	return IS_ERR_VALUE((unsigned long)ptr);
    4688:	81 21 00 84 	lwz     r9,132(r1)
    468c:	38 00 f0 00 	li      r0,-4096
    4690:	7f 89 00 40 	cmplw   cr7,r9,r0
    4694:	7c 00 00 26 	mfcr    r0
    4698:	54 00 f7 fe 	rlwinm  r0,r0,30,31,31

	if (IS_ERR(resp_skb)) {
    469c:	2f 80 00 00 	cmpwi   cr7,r0,0
    46a0:	41 9e 00 54 	beq-    cr7,46f4 <pfkey_getspi+0x490>
    46a4:	80 01 00 10 	lwz     r0,16(r1)
    46a8:	90 01 00 88 	stw     r0,136(r1)
	atomic_dec(&x->refcnt);
}

static inline void xfrm_state_put(struct xfrm_state *x)
{
	if (atomic_dec_and_test(&x->refcnt))
    46ac:	80 01 00 88 	lwz     r0,136(r1)
    46b0:	30 00 00 18 	addic   r0,r0,24
    46b4:	90 01 00 8c 	stw     r0,140(r1)
	PPC405_ERR77(0,%1)
"	stwcx.	%0,0,%1\n\
	bne-	1b"
	PPC_ACQUIRE_BARRIER
	: "=&r" (t)
	: "r" (&v->counter)
    46b8:	80 01 00 8c 	lwz     r0,140(r1)

static __inline__ int atomic_dec_return(atomic_t *v)
{
	int t;

	__asm__ __volatile__(
    46bc:	7f e0 00 28 	lwarx   r31,0,r0
    46c0:	33 ff ff ff 	addic   r31,r31,-1
    46c4:	7f e0 01 2d 	stwcx.  r31,0,r0
    46c8:	40 a2 ff f4 	bne-    46bc <pfkey_getspi+0x458>
    46cc:	93 e1 00 90 	stw     r31,144(r1)
	PPC_ACQUIRE_BARRIER
	: "=&r" (t)
	: "r" (&v->counter)
	: "cc", "xer", "memory");

	return t;
    46d0:	80 01 00 90 	lwz     r0,144(r1)
    46d4:	2f 80 00 00 	cmpwi   cr7,r0,0
    46d8:	40 9e 00 0c 	bne-    cr7,46e4 <pfkey_getspi+0x480>
		__xfrm_state_destroy(x);
    46dc:	80 61 00 88 	lwz     r3,136(r1)
    46e0:	48 00 00 01 	bl      46e0 <pfkey_getspi+0x47c>
    46e4:	80 01 00 4c 	lwz     r0,76(r1)
    46e8:	90 01 00 94 	stw     r0,148(r1)
	return (void *) error;
}

static inline long __must_check PTR_ERR(const void *ptr)
{
	return (long) ptr;
    46ec:	80 01 00 94 	lwz     r0,148(r1)
		xfrm_state_put(x);
		return  PTR_ERR(resp_skb);
    46f0:	48 00 01 14 	b       4804 <pfkey_getspi+0x5a0>
	}

	out_hdr = (struct sadb_msg *) resp_skb->data;
    46f4:	80 01 00 4c 	lwz     r0,76(r1)
    46f8:	7c 0b 03 78 	mr      r11,r0
    46fc:	80 0b 00 98 	lwz     r0,152(r11)
    4700:	90 01 00 50 	stw     r0,80(r1)
	out_hdr->sadb_msg_version = hdr->sadb_msg_version;
    4704:	80 01 00 b8 	lwz     r0,184(r1)
    4708:	7c 09 03 78 	mr      r9,r0
    470c:	88 09 00 00 	lbz     r0,0(r9)
    4710:	54 09 06 3e 	clrlwi  r9,r0,24
    4714:	80 01 00 50 	lwz     r0,80(r1)
    4718:	7c 0b 03 78 	mr      r11,r0
    471c:	99 2b 00 00 	stb     r9,0(r11)
	out_hdr->sadb_msg_type = SADB_GETSPI;
    4720:	80 01 00 50 	lwz     r0,80(r1)
    4724:	39 20 00 01 	li      r9,1
    4728:	7c 0b 03 78 	mr      r11,r0
    472c:	99 2b 00 01 	stb     r9,1(r11)
	out_hdr->sadb_msg_satype = pfkey_proto2satype(proto);
    4730:	88 01 00 30 	lbz     r0,48(r1)
    4734:	54 00 06 3e 	clrlwi  r0,r0,24
    4738:	54 00 04 3e 	clrlwi  r0,r0,16
    473c:	7c 03 03 78 	mr      r3,r0
    4740:	4b ff d0 2d 	bl      176c <pfkey_proto2satype>
    4744:	7c 60 1b 78 	mr      r0,r3
    4748:	7c 09 03 78 	mr      r9,r0
    474c:	80 01 00 50 	lwz     r0,80(r1)
    4750:	7c 0b 03 78 	mr      r11,r0
    4754:	99 2b 00 03 	stb     r9,3(r11)
	out_hdr->sadb_msg_errno = 0;
    4758:	80 01 00 50 	lwz     r0,80(r1)
    475c:	39 20 00 00 	li      r9,0
    4760:	7c 0b 03 78 	mr      r11,r0
    4764:	99 2b 00 02 	stb     r9,2(r11)
	out_hdr->sadb_msg_reserved = 0;
    4768:	80 01 00 50 	lwz     r0,80(r1)
    476c:	39 20 00 00 	li      r9,0
    4770:	7c 0b 03 78 	mr      r11,r0
    4774:	b1 2b 00 06 	sth     r9,6(r11)
	out_hdr->sadb_msg_seq = hdr->sadb_msg_seq;
    4778:	80 01 00 b8 	lwz     r0,184(r1)
    477c:	7c 0b 03 78 	mr      r11,r0
    4780:	81 2b 00 08 	lwz     r9,8(r11)
    4784:	80 01 00 50 	lwz     r0,80(r1)
    4788:	7c 0b 03 78 	mr      r11,r0
    478c:	91 2b 00 08 	stw     r9,8(r11)
	out_hdr->sadb_msg_pid = hdr->sadb_msg_pid;
    4790:	80 01 00 b8 	lwz     r0,184(r1)
    4794:	7c 0b 03 78 	mr      r11,r0
    4798:	81 2b 00 0c 	lwz     r9,12(r11)
    479c:	80 01 00 50 	lwz     r0,80(r1)
    47a0:	7c 0b 03 78 	mr      r11,r0
    47a4:	91 2b 00 0c 	stw     r9,12(r11)
    47a8:	80 01 00 10 	lwz     r0,16(r1)
    47ac:	90 01 00 98 	stw     r0,152(r1)
	atomic_dec(&x->refcnt);
}

static inline void xfrm_state_put(struct xfrm_state *x)
{
	if (atomic_dec_and_test(&x->refcnt))
    47b0:	80 01 00 98 	lwz     r0,152(r1)
    47b4:	30 00 00 18 	addic   r0,r0,24
    47b8:	90 01 00 9c 	stw     r0,156(r1)
	PPC405_ERR77(0,%1)
"	stwcx.	%0,0,%1\n\
	bne-	1b"
	PPC_ACQUIRE_BARRIER
	: "=&r" (t)
	: "r" (&v->counter)
    47bc:	80 01 00 9c 	lwz     r0,156(r1)

static __inline__ int atomic_dec_return(atomic_t *v)
{
	int t;

	__asm__ __volatile__(
    47c0:	7f e0 00 28 	lwarx   r31,0,r0
    47c4:	33 ff ff ff 	addic   r31,r31,-1
    47c8:	7f e0 01 2d 	stwcx.  r31,0,r0
    47cc:	40 a2 ff f4 	bne-    47c0 <pfkey_getspi+0x55c>
    47d0:	93 e1 00 a0 	stw     r31,160(r1)
	PPC_ACQUIRE_BARRIER
	: "=&r" (t)
	: "r" (&v->counter)
	: "cc", "xer", "memory");

	return t;
    47d4:	80 01 00 a0 	lwz     r0,160(r1)
    47d8:	2f 80 00 00 	cmpwi   cr7,r0,0
    47dc:	40 9e 00 0c 	bne-    cr7,47e8 <pfkey_getspi+0x584>
		__xfrm_state_destroy(x);
    47e0:	80 61 00 98 	lwz     r3,152(r1)
    47e4:	48 00 00 01 	bl      47e4 <pfkey_getspi+0x580>

	xfrm_state_put(x);

	pfkey_broadcast(resp_skb, GFP_KERNEL, BROADCAST_ONE, sk, net);
    47e8:	80 61 00 4c 	lwz     r3,76(r1)
    47ec:	38 80 00 d0 	li      r4,208
    47f0:	38 a0 00 01 	li      r5,1
    47f4:	80 c1 00 b0 	lwz     r6,176(r1)
    47f8:	80 e1 00 2c 	lwz     r7,44(r1)
    47fc:	4b ff c5 51 	bl      d4c <pfkey_broadcast>

	return 0;
    4800:	38 00 00 00 	li      r0,0
}
    4804:	7c 03 03 78 	mr      r3,r0
    4808:	80 01 00 d4 	lwz     r0,212(r1)
    480c:	7c 08 03 a6 	mtlr    r0
    4810:	83 e1 00 cc 	lwz     r31,204(r1)
    4814:	38 21 00 d0 	addi    r1,r1,208
    4818:	4e 80 00 20 	blr

0000481c <pfkey_acquire>:

static int pfkey_acquire(struct sock *sk, struct sk_buff *skb, struct sadb_msg *hdr, void **ext_hdrs)
{
    481c:	94 21 ff c0 	stwu    r1,-64(r1)
    4820:	7c 08 02 a6 	mflr    r0
    4824:	90 01 00 44 	stw     r0,68(r1)
    4828:	93 e1 00 3c 	stw     r31,60(r1)
    482c:	90 61 00 28 	stw     r3,40(r1)
    4830:	90 81 00 2c 	stw     r4,44(r1)
    4834:	90 a1 00 30 	stw     r5,48(r1)
    4838:	90 c1 00 34 	stw     r6,52(r1)
    483c:	80 01 00 28 	lwz     r0,40(r1)
    4840:	90 01 00 1c 	stw     r0,28(r1)
    4844:	3c 00 00 00 	lis     r0,0
    4848:	30 00 00 00 	addic   r0,r0,0
	struct net *net = sock_net(sk);
    484c:	90 01 00 08 	stw     r0,8(r1)
	struct xfrm_state *x;

	if (hdr->sadb_msg_len != sizeof(struct sadb_msg)/8)
    4850:	80 01 00 30 	lwz     r0,48(r1)
    4854:	7c 09 03 78 	mr      r9,r0
    4858:	a0 09 00 04 	lhz     r0,4(r9)
    485c:	54 00 04 3e 	clrlwi  r0,r0,16
    4860:	2f 80 00 02 	cmpwi   cr7,r0,2
    4864:	41 9e 00 0c 	beq-    cr7,4870 <pfkey_acquire+0x54>
		return -EOPNOTSUPP;
    4868:	38 00 ff a1 	li      r0,-95
    486c:	48 00 01 14 	b       4980 <pfkey_acquire+0x164>

	if (hdr->sadb_msg_seq == 0 || hdr->sadb_msg_errno == 0)
    4870:	80 01 00 30 	lwz     r0,48(r1)
    4874:	7c 0b 03 78 	mr      r11,r0
    4878:	80 0b 00 08 	lwz     r0,8(r11)
    487c:	2f 80 00 00 	cmpwi   cr7,r0,0
    4880:	41 9e 00 1c 	beq-    cr7,489c <pfkey_acquire+0x80>
    4884:	80 01 00 30 	lwz     r0,48(r1)
    4888:	7c 09 03 78 	mr      r9,r0
    488c:	88 09 00 02 	lbz     r0,2(r9)
    4890:	54 00 06 3e 	clrlwi  r0,r0,24
    4894:	2f 80 00 00 	cmpwi   cr7,r0,0
    4898:	40 9e 00 0c 	bne-    cr7,48a4 <pfkey_acquire+0x88>
		return 0;
    489c:	38 00 00 00 	li      r0,0
    48a0:	48 00 00 e0 	b       4980 <pfkey_acquire+0x164>

	x = xfrm_find_acq_byseq(net, DUMMY_MARK, hdr->sadb_msg_seq);
    48a4:	80 01 00 30 	lwz     r0,48(r1)
    48a8:	7c 0b 03 78 	mr      r11,r0
    48ac:	80 0b 00 08 	lwz     r0,8(r11)
    48b0:	80 61 00 08 	lwz     r3,8(r1)
    48b4:	38 80 00 00 	li      r4,0
    48b8:	7c 05 03 78 	mr      r5,r0
    48bc:	48 00 00 01 	bl      48bc <pfkey_acquire+0xa0>
    48c0:	90 61 00 0c 	stw     r3,12(r1)
	if (x == NULL)
    48c4:	80 01 00 0c 	lwz     r0,12(r1)
    48c8:	2f 80 00 00 	cmpwi   cr7,r0,0
    48cc:	40 9e 00 0c 	bne-    cr7,48d8 <pfkey_acquire+0xbc>
		return 0;
    48d0:	38 00 00 00 	li      r0,0
    48d4:	48 00 00 ac 	b       4980 <pfkey_acquire+0x164>

	spin_lock_bh(&x->lock);
    48d8:	80 01 00 0c 	lwz     r0,12(r1)
    48dc:	30 00 00 1c 	addic   r0,r0,28
    48e0:	90 01 00 20 	stw     r0,32(r1)
	raw_spin_lock(&lock->rlock);
}

static inline void spin_lock_bh(spinlock_t *lock)
{
	raw_spin_lock_bh(&lock->rlock);
    48e4:	48 00 00 01 	bl      48e4 <pfkey_acquire+0xc8>
	if (x->km.state == XFRM_STATE_ACQ) {
    48e8:	80 01 00 0c 	lwz     r0,12(r1)
    48ec:	7c 09 03 78 	mr      r9,r0
    48f0:	88 09 00 84 	lbz     r0,132(r9)
    48f4:	54 00 06 3e 	clrlwi  r0,r0,24
    48f8:	2f 80 00 01 	cmpwi   cr7,r0,1
    48fc:	40 9e 00 30 	bne-    cr7,492c <pfkey_acquire+0x110>
		x->km.state = XFRM_STATE_ERROR;
    4900:	80 01 00 0c 	lwz     r0,12(r1)
    4904:	39 20 00 03 	li      r9,3
    4908:	7c 0b 03 78 	mr      r11,r0
    490c:	99 2b 00 84 	stb     r9,132(r11)
		wake_up(&net->xfrm.km_waitq);
    4910:	80 01 00 08 	lwz     r0,8(r1)
    4914:	30 00 02 68 	addic   r0,r0,616
    4918:	7c 03 03 78 	mr      r3,r0
    491c:	38 80 00 03 	li      r4,3
    4920:	38 a0 00 01 	li      r5,1
    4924:	38 c0 00 00 	li      r6,0
    4928:	48 00 00 01 	bl      4928 <pfkey_acquire+0x10c>
	}
	spin_unlock_bh(&x->lock);
    492c:	80 01 00 0c 	lwz     r0,12(r1)
    4930:	30 00 00 1c 	addic   r0,r0,28
    4934:	90 01 00 24 	stw     r0,36(r1)
	raw_spin_unlock(&lock->rlock);
}

static inline void spin_unlock_bh(spinlock_t *lock)
{
	raw_spin_unlock_bh(&lock->rlock);
    4938:	48 00 00 01 	bl      4938 <pfkey_acquire+0x11c>
    493c:	80 01 00 0c 	lwz     r0,12(r1)
    4940:	90 01 00 10 	stw     r0,16(r1)
	atomic_dec(&x->refcnt);
}

static inline void xfrm_state_put(struct xfrm_state *x)
{
	if (atomic_dec_and_test(&x->refcnt))
    4944:	80 01 00 10 	lwz     r0,16(r1)
    4948:	30 00 00 18 	addic   r0,r0,24
    494c:	90 01 00 14 	stw     r0,20(r1)
	PPC405_ERR77(0,%1)
"	stwcx.	%0,0,%1\n\
	bne-	1b"
	PPC_ACQUIRE_BARRIER
	: "=&r" (t)
	: "r" (&v->counter)
    4950:	80 01 00 14 	lwz     r0,20(r1)

static __inline__ int atomic_dec_return(atomic_t *v)
{
	int t;

	__asm__ __volatile__(
    4954:	7f e0 00 28 	lwarx   r31,0,r0
    4958:	33 ff ff ff 	addic   r31,r31,-1
    495c:	7f e0 01 2d 	stwcx.  r31,0,r0
    4960:	40 a2 ff f4 	bne-    4954 <pfkey_acquire+0x138>
    4964:	93 e1 00 18 	stw     r31,24(r1)
	PPC_ACQUIRE_BARRIER
	: "=&r" (t)
	: "r" (&v->counter)
	: "cc", "xer", "memory");

	return t;
    4968:	80 01 00 18 	lwz     r0,24(r1)
    496c:	2f 80 00 00 	cmpwi   cr7,r0,0
    4970:	40 9e 00 0c 	bne-    cr7,497c <pfkey_acquire+0x160>
		__xfrm_state_destroy(x);
    4974:	80 61 00 10 	lwz     r3,16(r1)
    4978:	48 00 00 01 	bl      4978 <pfkey_acquire+0x15c>
	xfrm_state_put(x);
	return 0;
    497c:	38 00 00 00 	li      r0,0
}
    4980:	7c 03 03 78 	mr      r3,r0
    4984:	80 01 00 44 	lwz     r0,68(r1)
    4988:	7c 08 03 a6 	mtlr    r0
    498c:	83 e1 00 3c 	lwz     r31,60(r1)
    4990:	38 21 00 40 	addi    r1,r1,64
    4994:	4e 80 00 20 	blr

00004998 <key_notify_sa>:
	return 0;
}

/* ADD/UPD/DEL */
static int key_notify_sa(struct xfrm_state *x, struct km_event *c)
{
    4998:	94 21 ff d0 	stwu    r1,-48(r1)
    499c:	7c 08 02 a6 	mflr    r0
    49a0:	90 01 00 34 	stw     r0,52(r1)
    49a4:	90 61 00 28 	stw     r3,40(r1)
    49a8:	90 81 00 2c 	stw     r4,44(r1)
    49ac:	80 01 00 28 	lwz     r0,40(r1)
    49b0:	90 01 00 10 	stw     r0,16(r1)

static inline struct sk_buff *pfkey_xfrm_state2msg(struct xfrm_state *x)
{
	struct sk_buff *skb;

	skb = __pfkey_xfrm_state2msg(x, 1, 3);
    49b4:	80 61 00 10 	lwz     r3,16(r1)
    49b8:	38 80 00 01 	li      r4,1
    49bc:	38 a0 00 03 	li      r5,3
    49c0:	4b ff d2 5d 	bl      1c1c <__pfkey_xfrm_state2msg>
    49c4:	90 61 00 14 	stw     r3,20(r1)

	return skb;
    49c8:	80 01 00 14 	lwz     r0,20(r1)
static int key_notify_sa(struct xfrm_state *x, struct km_event *c)
{
	struct sk_buff *skb;
	struct sadb_msg *hdr;

	skb = pfkey_xfrm_state2msg(x);
    49cc:	90 01 00 08 	stw     r0,8(r1)
    49d0:	80 01 00 08 	lwz     r0,8(r1)
    49d4:	90 01 00 18 	stw     r0,24(r1)
}

static inline long __must_check IS_ERR(const void *ptr)
{
	return IS_ERR_VALUE((unsigned long)ptr);
    49d8:	81 21 00 18 	lwz     r9,24(r1)
    49dc:	38 00 f0 00 	li      r0,-4096
    49e0:	7f 89 00 40 	cmplw   cr7,r9,r0
    49e4:	7c 00 00 26 	mfcr    r0
    49e8:	54 00 f7 fe 	rlwinm  r0,r0,30,31,31

	if (IS_ERR(skb))
    49ec:	2f 80 00 00 	cmpwi   cr7,r0,0
    49f0:	41 9e 00 14 	beq-    cr7,4a04 <key_notify_sa+0x6c>
    49f4:	80 01 00 08 	lwz     r0,8(r1)
    49f8:	90 01 00 1c 	stw     r0,28(r1)
	return (void *) error;
}

static inline long __must_check PTR_ERR(const void *ptr)
{
	return (long) ptr;
    49fc:	80 01 00 1c 	lwz     r0,28(r1)
		return PTR_ERR(skb);
    4a00:	48 00 01 54 	b       4b54 <key_notify_sa+0x1bc>

	hdr = (struct sadb_msg *) skb->data;
    4a04:	80 01 00 08 	lwz     r0,8(r1)
    4a08:	7c 09 03 78 	mr      r9,r0
    4a0c:	80 09 00 98 	lwz     r0,152(r9)
    4a10:	90 01 00 0c 	stw     r0,12(r1)
	hdr->sadb_msg_version = PF_KEY_V2;
    4a14:	80 01 00 0c 	lwz     r0,12(r1)
    4a18:	39 20 00 02 	li      r9,2
    4a1c:	7c 0b 03 78 	mr      r11,r0
    4a20:	99 2b 00 00 	stb     r9,0(r11)
	hdr->sadb_msg_type = event2keytype(c->event);
    4a24:	80 01 00 2c 	lwz     r0,44(r1)
    4a28:	7c 09 03 78 	mr      r9,r0
    4a2c:	80 09 00 0c 	lwz     r0,12(r9)
    4a30:	90 01 00 20 	stw     r0,32(r1)
	return 0;
}

static inline int event2keytype(int event)
{
	switch (event) {
    4a34:	80 01 00 20 	lwz     r0,32(r1)
    4a38:	2f 80 00 11 	cmpwi   cr7,r0,17
    4a3c:	41 9e 00 2c 	beq-    cr7,4a68 <key_notify_sa+0xd0>
    4a40:	2f 80 00 11 	cmpwi   cr7,r0,17
    4a44:	41 9d 00 10 	bgt-    cr7,4a54 <key_notify_sa+0xbc>
    4a48:	2f 80 00 10 	cmpwi   cr7,r0,16
    4a4c:	41 9e 00 24 	beq-    cr7,4a70 <key_notify_sa+0xd8>
    4a50:	48 00 00 38 	b       4a88 <key_notify_sa+0xf0>
    4a54:	2f 80 00 18 	cmpwi   cr7,r0,24
    4a58:	41 9e 00 28 	beq-    cr7,4a80 <key_notify_sa+0xe8>
    4a5c:	2f 80 00 1a 	cmpwi   cr7,r0,26
    4a60:	41 9e 00 18 	beq-    cr7,4a78 <key_notify_sa+0xe0>
    4a64:	48 00 00 24 	b       4a88 <key_notify_sa+0xf0>
	case XFRM_MSG_DELSA:
		return SADB_DELETE;
    4a68:	38 00 00 04 	li      r0,4
    4a6c:	48 00 00 30 	b       4a9c <key_notify_sa+0x104>
	case XFRM_MSG_NEWSA:
		return SADB_ADD;
    4a70:	38 00 00 03 	li      r0,3
    4a74:	48 00 00 28 	b       4a9c <key_notify_sa+0x104>
	case XFRM_MSG_UPDSA:
		return SADB_UPDATE;
    4a78:	38 00 00 02 	li      r0,2
    4a7c:	48 00 00 20 	b       4a9c <key_notify_sa+0x104>
	case XFRM_MSG_EXPIRE:
		return SADB_EXPIRE;
    4a80:	38 00 00 08 	li      r0,8
    4a84:	48 00 00 18 	b       4a9c <key_notify_sa+0x104>
	default:
		pr_err("pfkey: Unknown SA event %d\n", event);
    4a88:	3c 00 00 00 	lis     r0,0
    4a8c:	30 60 00 c0 	addic   r3,r0,192
    4a90:	80 81 00 20 	lwz     r4,32(r1)
    4a94:	48 00 00 01 	bl      4a94 <key_notify_sa+0xfc>
		break;
	}

	return 0;
    4a98:	38 00 00 00 	li      r0,0
	if (IS_ERR(skb))
		return PTR_ERR(skb);

	hdr = (struct sadb_msg *) skb->data;
	hdr->sadb_msg_version = PF_KEY_V2;
	hdr->sadb_msg_type = event2keytype(c->event);
    4a9c:	54 09 06 3e 	clrlwi  r9,r0,24
    4aa0:	80 01 00 0c 	lwz     r0,12(r1)
    4aa4:	7c 0b 03 78 	mr      r11,r0
    4aa8:	99 2b 00 01 	stb     r9,1(r11)
	hdr->sadb_msg_satype = pfkey_proto2satype(x->id.proto);
    4aac:	80 01 00 28 	lwz     r0,40(r1)
    4ab0:	7c 09 03 78 	mr      r9,r0
    4ab4:	88 09 00 30 	lbz     r0,48(r9)
    4ab8:	54 00 06 3e 	clrlwi  r0,r0,24
    4abc:	7c 03 03 78 	mr      r3,r0
    4ac0:	4b ff cc ad 	bl      176c <pfkey_proto2satype>
    4ac4:	7c 60 1b 78 	mr      r0,r3
    4ac8:	7c 09 03 78 	mr      r9,r0
    4acc:	80 01 00 0c 	lwz     r0,12(r1)
    4ad0:	7c 0b 03 78 	mr      r11,r0
    4ad4:	99 2b 00 03 	stb     r9,3(r11)
	hdr->sadb_msg_errno = 0;
    4ad8:	80 01 00 0c 	lwz     r0,12(r1)
    4adc:	39 20 00 00 	li      r9,0
    4ae0:	7c 0b 03 78 	mr      r11,r0
    4ae4:	99 2b 00 02 	stb     r9,2(r11)
	hdr->sadb_msg_reserved = 0;
    4ae8:	80 01 00 0c 	lwz     r0,12(r1)
    4aec:	39 20 00 00 	li      r9,0
    4af0:	7c 0b 03 78 	mr      r11,r0
    4af4:	b1 2b 00 06 	sth     r9,6(r11)
	hdr->sadb_msg_seq = c->seq;
    4af8:	80 01 00 2c 	lwz     r0,44(r1)
    4afc:	7c 0b 03 78 	mr      r11,r0
    4b00:	81 2b 00 04 	lwz     r9,4(r11)
    4b04:	80 01 00 0c 	lwz     r0,12(r1)
    4b08:	7c 0b 03 78 	mr      r11,r0
    4b0c:	91 2b 00 08 	stw     r9,8(r11)
	hdr->sadb_msg_pid = c->pid;
    4b10:	80 01 00 2c 	lwz     r0,44(r1)
    4b14:	7c 0b 03 78 	mr      r11,r0
    4b18:	81 2b 00 08 	lwz     r9,8(r11)
    4b1c:	80 01 00 0c 	lwz     r0,12(r1)
    4b20:	7c 0b 03 78 	mr      r11,r0
    4b24:	91 2b 00 0c 	stw     r9,12(r11)
    4b28:	80 01 00 28 	lwz     r0,40(r1)
    4b2c:	90 01 00 24 	stw     r0,36(r1)
	void			*data;
};

static inline struct net *xs_net(struct xfrm_state *x)
{
	return read_pnet(&x->xs_net);
    4b30:	3c 00 00 00 	lis     r0,0
    4b34:	30 00 00 00 	addic   r0,r0,0

	pfkey_broadcast(skb, GFP_ATOMIC, BROADCAST_ALL, NULL, xs_net(x));
    4b38:	80 61 00 08 	lwz     r3,8(r1)
    4b3c:	38 80 00 20 	li      r4,32
    4b40:	38 a0 00 00 	li      r5,0
    4b44:	38 c0 00 00 	li      r6,0
    4b48:	7c 07 03 78 	mr      r7,r0
    4b4c:	4b ff c2 01 	bl      d4c <pfkey_broadcast>

	return 0;
    4b50:	38 00 00 00 	li      r0,0
}
    4b54:	7c 03 03 78 	mr      r3,r0
    4b58:	80 01 00 34 	lwz     r0,52(r1)
    4b5c:	7c 08 03 a6 	mtlr    r0
    4b60:	38 21 00 30 	addi    r1,r1,48
    4b64:	4e 80 00 20 	blr

00004b68 <pfkey_add>:

static int pfkey_add(struct sock *sk, struct sk_buff *skb, struct sadb_msg *hdr, void **ext_hdrs)
{
    4b68:	94 21 ff 70 	stwu    r1,-144(r1)
    4b6c:	7c 08 02 a6 	mflr    r0
    4b70:	90 01 00 94 	stw     r0,148(r1)
    4b74:	93 e1 00 8c 	stw     r31,140(r1)
    4b78:	90 61 00 78 	stw     r3,120(r1)
    4b7c:	90 81 00 7c 	stw     r4,124(r1)
    4b80:	90 a1 00 80 	stw     r5,128(r1)
    4b84:	90 c1 00 84 	stw     r6,132(r1)
    4b88:	80 01 00 78 	lwz     r0,120(r1)
    4b8c:	90 01 00 40 	stw     r0,64(r1)
    4b90:	3c 00 00 00 	lis     r0,0
    4b94:	30 00 00 00 	addic   r0,r0,0
	struct net *net = sock_net(sk);
    4b98:	90 01 00 0c 	stw     r0,12(r1)
	struct xfrm_state *x;
	int err;
	struct km_event c;

	x = pfkey_msg2xfrm_state(net, hdr, ext_hdrs);
    4b9c:	80 61 00 0c 	lwz     r3,12(r1)
    4ba0:	80 81 00 80 	lwz     r4,128(r1)
    4ba4:	80 a1 00 84 	lwz     r5,132(r1)
    4ba8:	4b ff e2 05 	bl      2dac <pfkey_msg2xfrm_state>
    4bac:	90 61 00 10 	stw     r3,16(r1)
    4bb0:	80 01 00 10 	lwz     r0,16(r1)
    4bb4:	90 01 00 14 	stw     r0,20(r1)
}

static inline long __must_check IS_ERR(const void *ptr)
{
	return IS_ERR_VALUE((unsigned long)ptr);
    4bb8:	81 21 00 14 	lwz     r9,20(r1)
    4bbc:	38 00 f0 00 	li      r0,-4096
    4bc0:	7f 89 00 40 	cmplw   cr7,r9,r0
    4bc4:	7c 00 00 26 	mfcr    r0
    4bc8:	54 00 f7 fe 	rlwinm  r0,r0,30,31,31
	if (IS_ERR(x))
    4bcc:	2f 80 00 00 	cmpwi   cr7,r0,0
    4bd0:	41 9e 00 14 	beq-    cr7,4be4 <pfkey_add+0x7c>
    4bd4:	80 01 00 10 	lwz     r0,16(r1)
    4bd8:	90 01 00 18 	stw     r0,24(r1)
	return (void *) error;
}

static inline long __must_check PTR_ERR(const void *ptr)
{
	return (long) ptr;
    4bdc:	80 01 00 18 	lwz     r0,24(r1)
		return PTR_ERR(x);
    4be0:	48 00 01 94 	b       4d74 <pfkey_add+0x20c>
    4be4:	80 01 00 10 	lwz     r0,16(r1)
    4be8:	90 01 00 1c 	stw     r0,28(r1)
		__xfrm_state_destroy(x);
}

static inline void xfrm_state_hold(struct xfrm_state *x)
{
	atomic_inc(&x->refcnt);
    4bec:	80 01 00 1c 	lwz     r0,28(r1)
    4bf0:	30 00 00 18 	addic   r0,r0,24
    4bf4:	90 01 00 20 	stw     r0,32(r1)
	addic	%0,%0,1\n"
	PPC405_ERR77(0,%2)
"	stwcx.	%0,0,%2 \n\
	bne-	1b"
	: "=&r" (t), "+m" (v->counter)
	: "r" (&v->counter)
    4bf8:	80 01 00 20 	lwz     r0,32(r1)
"1:	lwarx	%0,0,%2		# atomic_inc\n\
	addic	%0,%0,1\n"
	PPC405_ERR77(0,%2)
"	stwcx.	%0,0,%2 \n\
	bne-	1b"
	: "=&r" (t), "+m" (v->counter)
    4bfc:	81 61 00 20 	lwz     r11,32(r1)
    4c00:	81 21 00 20 	lwz     r9,32(r1)

static __inline__ void atomic_inc(atomic_t *v)
{
	int t;

	__asm__ __volatile__(
    4c04:	7f e0 00 28 	lwarx   r31,0,r0
    4c08:	33 ff 00 01 	addic   r31,r31,1
    4c0c:	7f e0 01 2d 	stwcx.  r31,0,r0
    4c10:	40 a2 ff f4 	bne-    4c04 <pfkey_add+0x9c>
    4c14:	93 e1 00 24 	stw     r31,36(r1)

	xfrm_state_hold(x);
	if (hdr->sadb_msg_type == SADB_ADD)
    4c18:	80 01 00 80 	lwz     r0,128(r1)
    4c1c:	7c 09 03 78 	mr      r9,r0
    4c20:	88 09 00 01 	lbz     r0,1(r9)
    4c24:	54 00 06 3e 	clrlwi  r0,r0,24
    4c28:	2f 80 00 03 	cmpwi   cr7,r0,3
    4c2c:	40 9e 00 14 	bne-    cr7,4c40 <pfkey_add+0xd8>
		err = xfrm_state_add(x);
    4c30:	80 61 00 10 	lwz     r3,16(r1)
    4c34:	48 00 00 01 	bl      4c34 <pfkey_add+0xcc>
    4c38:	90 61 00 08 	stw     r3,8(r1)
    4c3c:	48 00 00 10 	b       4c4c <pfkey_add+0xe4>
	else
		err = xfrm_state_update(x);
    4c40:	80 61 00 10 	lwz     r3,16(r1)
    4c44:	48 00 00 01 	bl      4c44 <pfkey_add+0xdc>
    4c48:	90 61 00 08 	stw     r3,8(r1)

	xfrm_audit_state_add(x, err ? 0 : 1,
    4c4c:	80 01 00 08 	lwz     r0,8(r1)
    4c50:	2f 80 00 00 	cmpwi   cr7,r0,0
    4c54:	7c 00 00 26 	mfcr    r0
    4c58:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
    4c5c:	81 21 00 10 	lwz     r9,16(r1)
    4c60:	91 21 00 44 	stw     r9,68(r1)
    4c64:	90 01 00 48 	stw     r0,72(r1)
    4c68:	38 00 ff ff 	li      r0,-1
    4c6c:	90 01 00 4c 	stw     r0,76(r1)
    4c70:	38 00 ff ff 	li      r0,-1
    4c74:	90 01 00 50 	stw     r0,80(r1)
    4c78:	38 00 00 00 	li      r0,0
    4c7c:	90 01 00 54 	stw     r0,84(r1)
			     audit_get_loginuid(current),
			     audit_get_sessionid(current), 0);

	if (err < 0) {
    4c80:	80 01 00 08 	lwz     r0,8(r1)
    4c84:	2f 80 00 00 	cmpwi   cr7,r0,0
    4c88:	40 9c 00 4c 	bge-    cr7,4cd4 <pfkey_add+0x16c>
		x->km.state = XFRM_STATE_DEAD;
    4c8c:	80 01 00 10 	lwz     r0,16(r1)
    4c90:	39 20 00 05 	li      r9,5
    4c94:	7c 0b 03 78 	mr      r11,r0
    4c98:	99 2b 00 84 	stb     r9,132(r11)
    4c9c:	80 01 00 10 	lwz     r0,16(r1)
    4ca0:	90 01 00 28 	stw     r0,40(r1)

extern void __xfrm_state_destroy(struct xfrm_state *);

static inline void __xfrm_state_put(struct xfrm_state *x)
{
	atomic_dec(&x->refcnt);
    4ca4:	80 01 00 28 	lwz     r0,40(r1)
    4ca8:	30 00 00 18 	addic   r0,r0,24
    4cac:	90 01 00 2c 	stw     r0,44(r1)
	addic	%0,%0,-1\n"
	PPC405_ERR77(0,%2)\
"	stwcx.	%0,0,%2\n\
	bne-	1b"
	: "=&r" (t), "+m" (v->counter)
	: "r" (&v->counter)
    4cb0:	80 01 00 2c 	lwz     r0,44(r1)
"1:	lwarx	%0,0,%2		# atomic_dec\n\
	addic	%0,%0,-1\n"
	PPC405_ERR77(0,%2)\
"	stwcx.	%0,0,%2\n\
	bne-	1b"
	: "=&r" (t), "+m" (v->counter)
    4cb4:	81 61 00 2c 	lwz     r11,44(r1)
    4cb8:	81 21 00 2c 	lwz     r9,44(r1)

static __inline__ void atomic_dec(atomic_t *v)
{
	int t;

	__asm__ __volatile__(
    4cbc:	7f e0 00 28 	lwarx   r31,0,r0
    4cc0:	33 ff ff ff 	addic   r31,r31,-1
    4cc4:	7f e0 01 2d 	stwcx.  r31,0,r0
    4cc8:	40 a2 ff f4 	bne-    4cbc <pfkey_add+0x154>
    4ccc:	93 e1 00 30 	stw     r31,48(r1)
		__xfrm_state_put(x);
		goto out;
    4cd0:	48 00 00 60 	b       4d30 <pfkey_add+0x1c8>
	}

	if (hdr->sadb_msg_type == SADB_ADD)
    4cd4:	80 01 00 80 	lwz     r0,128(r1)
    4cd8:	7c 09 03 78 	mr      r9,r0
    4cdc:	88 09 00 01 	lbz     r0,1(r9)
    4ce0:	54 00 06 3e 	clrlwi  r0,r0,24
    4ce4:	2f 80 00 03 	cmpwi   cr7,r0,3
    4ce8:	40 9e 00 10 	bne-    cr7,4cf8 <pfkey_add+0x190>
		c.event = XFRM_MSG_NEWSA;
    4cec:	38 00 00 10 	li      r0,16
    4cf0:	90 01 00 64 	stw     r0,100(r1)
    4cf4:	48 00 00 0c 	b       4d00 <pfkey_add+0x198>
	else
		c.event = XFRM_MSG_UPDSA;
    4cf8:	38 00 00 1a 	li      r0,26
    4cfc:	90 01 00 64 	stw     r0,100(r1)
	c.seq = hdr->sadb_msg_seq;
    4d00:	80 01 00 80 	lwz     r0,128(r1)
    4d04:	7c 0b 03 78 	mr      r11,r0
    4d08:	80 0b 00 08 	lwz     r0,8(r11)
    4d0c:	90 01 00 5c 	stw     r0,92(r1)
	c.pid = hdr->sadb_msg_pid;
    4d10:	80 01 00 80 	lwz     r0,128(r1)
    4d14:	7c 09 03 78 	mr      r9,r0
    4d18:	80 09 00 0c 	lwz     r0,12(r9)
    4d1c:	90 01 00 60 	stw     r0,96(r1)
	km_state_notify(x, &c);
    4d20:	38 01 00 58 	addi    r0,r1,88
    4d24:	80 61 00 10 	lwz     r3,16(r1)
    4d28:	7c 04 03 78 	mr      r4,r0
    4d2c:	48 00 00 01 	bl      4d2c <pfkey_add+0x1c4>
    4d30:	80 01 00 10 	lwz     r0,16(r1)
    4d34:	90 01 00 34 	stw     r0,52(r1)
}

static inline void xfrm_state_put(struct xfrm_state *x)
{
	if (atomic_dec_and_test(&x->refcnt))
    4d38:	80 01 00 34 	lwz     r0,52(r1)
    4d3c:	30 00 00 18 	addic   r0,r0,24
    4d40:	90 01 00 38 	stw     r0,56(r1)
	PPC405_ERR77(0,%1)
"	stwcx.	%0,0,%1\n\
	bne-	1b"
	PPC_ACQUIRE_BARRIER
	: "=&r" (t)
	: "r" (&v->counter)
    4d44:	80 01 00 38 	lwz     r0,56(r1)

static __inline__ int atomic_dec_return(atomic_t *v)
{
	int t;

	__asm__ __volatile__(
    4d48:	7f e0 00 28 	lwarx   r31,0,r0
    4d4c:	33 ff ff ff 	addic   r31,r31,-1
    4d50:	7f e0 01 2d 	stwcx.  r31,0,r0
    4d54:	40 a2 ff f4 	bne-    4d48 <pfkey_add+0x1e0>
    4d58:	93 e1 00 3c 	stw     r31,60(r1)
	PPC_ACQUIRE_BARRIER
	: "=&r" (t)
	: "r" (&v->counter)
	: "cc", "xer", "memory");

	return t;
    4d5c:	80 01 00 3c 	lwz     r0,60(r1)
    4d60:	2f 80 00 00 	cmpwi   cr7,r0,0
    4d64:	40 9e 00 0c 	bne-    cr7,4d70 <pfkey_add+0x208>
		__xfrm_state_destroy(x);
    4d68:	80 61 00 34 	lwz     r3,52(r1)
    4d6c:	48 00 00 01 	bl      4d6c <pfkey_add+0x204>
out:
	xfrm_state_put(x);
	return err;
    4d70:	80 01 00 08 	lwz     r0,8(r1)
}
    4d74:	7c 03 03 78 	mr      r3,r0
    4d78:	80 01 00 94 	lwz     r0,148(r1)
    4d7c:	7c 08 03 a6 	mtlr    r0
    4d80:	83 e1 00 8c 	lwz     r31,140(r1)
    4d84:	38 21 00 90 	addi    r1,r1,144
    4d88:	4e 80 00 20 	blr

00004d8c <pfkey_delete>:

static int pfkey_delete(struct sock *sk, struct sk_buff *skb, struct sadb_msg *hdr, void **ext_hdrs)
{
    4d8c:	94 21 ff 80 	stwu    r1,-128(r1)
    4d90:	7c 08 02 a6 	mflr    r0
    4d94:	90 01 00 84 	stw     r0,132(r1)
    4d98:	93 e1 00 7c 	stw     r31,124(r1)
    4d9c:	90 61 00 68 	stw     r3,104(r1)
    4da0:	90 81 00 6c 	stw     r4,108(r1)
    4da4:	90 a1 00 70 	stw     r5,112(r1)
    4da8:	90 c1 00 74 	stw     r6,116(r1)
    4dac:	80 01 00 68 	lwz     r0,104(r1)
    4db0:	90 01 00 2c 	stw     r0,44(r1)
    4db4:	3c 00 00 00 	lis     r0,0
    4db8:	30 00 00 00 	addic   r0,r0,0
	struct net *net = sock_net(sk);
    4dbc:	90 01 00 0c 	stw     r0,12(r1)
	struct xfrm_state *x;
	struct km_event c;
	int err;

	if (!ext_hdrs[SADB_EXT_SA-1] ||
    4dc0:	80 01 00 74 	lwz     r0,116(r1)
    4dc4:	7c 09 03 78 	mr      r9,r0
    4dc8:	80 09 00 00 	lwz     r0,0(r9)
    4dcc:	2f 80 00 00 	cmpwi   cr7,r0,0
    4dd0:	41 9e 00 3c 	beq-    cr7,4e0c <pfkey_delete+0x80>
	    !present_and_same_family(ext_hdrs[SADB_EXT_ADDRESS_SRC-1],
    4dd4:	80 01 00 74 	lwz     r0,116(r1)
    4dd8:	30 00 00 10 	addic   r0,r0,16
    4ddc:	7c 0b 03 78 	mr      r11,r0
    4de0:	81 2b 00 00 	lwz     r9,0(r11)
				     ext_hdrs[SADB_EXT_ADDRESS_DST-1]))
    4de4:	80 01 00 74 	lwz     r0,116(r1)
    4de8:	30 00 00 14 	addic   r0,r0,20
	struct xfrm_state *x;
	struct km_event c;
	int err;

	if (!ext_hdrs[SADB_EXT_SA-1] ||
	    !present_and_same_family(ext_hdrs[SADB_EXT_ADDRESS_SRC-1],
    4dec:	7c 0b 03 78 	mr      r11,r0
    4df0:	80 0b 00 00 	lwz     r0,0(r11)
    4df4:	7d 23 4b 78 	mr      r3,r9
    4df8:	7c 04 03 78 	mr      r4,r0
    4dfc:	4b ff c5 ad 	bl      13a8 <present_and_same_family>
    4e00:	7c 60 1b 78 	mr      r0,r3
	struct net *net = sock_net(sk);
	struct xfrm_state *x;
	struct km_event c;
	int err;

	if (!ext_hdrs[SADB_EXT_SA-1] ||
    4e04:	2f 80 00 00 	cmpwi   cr7,r0,0
    4e08:	40 9e 00 0c 	bne-    cr7,4e14 <pfkey_delete+0x88>
	    !present_and_same_family(ext_hdrs[SADB_EXT_ADDRESS_SRC-1],
				     ext_hdrs[SADB_EXT_ADDRESS_DST-1]))
		return -EINVAL;
    4e0c:	38 00 ff ea 	li      r0,-22
    4e10:	48 00 01 5c 	b       4f6c <pfkey_delete+0x1e0>

	x = pfkey_xfrm_state_lookup(net, hdr, ext_hdrs);
    4e14:	80 61 00 0c 	lwz     r3,12(r1)
    4e18:	80 81 00 70 	lwz     r4,112(r1)
    4e1c:	80 a1 00 74 	lwz     r5,116(r1)
    4e20:	4b ff ca f9 	bl      1918 <pfkey_xfrm_state_lookup>
    4e24:	90 61 00 10 	stw     r3,16(r1)
	if (x == NULL)
    4e28:	80 01 00 10 	lwz     r0,16(r1)
    4e2c:	2f 80 00 00 	cmpwi   cr7,r0,0
    4e30:	40 9e 00 0c 	bne-    cr7,4e3c <pfkey_delete+0xb0>
		return -ESRCH;
    4e34:	38 00 ff fd 	li      r0,-3
    4e38:	48 00 01 34 	b       4f6c <pfkey_delete+0x1e0>
    4e3c:	80 01 00 10 	lwz     r0,16(r1)
    4e40:	90 01 00 30 	stw     r0,48(r1)
{
}

static inline int security_xfrm_state_delete(struct xfrm_state *x)
{
	return 0;
    4e44:	38 00 00 00 	li      r0,0

	if ((err = security_xfrm_state_delete(x)))
    4e48:	90 01 00 08 	stw     r0,8(r1)
    4e4c:	80 01 00 08 	lwz     r0,8(r1)
    4e50:	2f 80 00 00 	cmpwi   cr7,r0,0
    4e54:	40 9e 00 94 	bne-    cr7,4ee8 <pfkey_delete+0x15c>
		goto out;
    4e58:	80 01 00 10 	lwz     r0,16(r1)
    4e5c:	90 01 00 14 	stw     r0,20(r1)
	return 0;
}

static inline int xfrm_state_kern(struct xfrm_state *x)
{
	return atomic_read(&x->tunnel_users);
    4e60:	80 01 00 14 	lwz     r0,20(r1)
    4e64:	30 00 01 0c 	addic   r0,r0,268
    4e68:	90 01 00 18 	stw     r0,24(r1)

static __inline__ int atomic_read(const atomic_t *v)
{
	int t;

	__asm__ __volatile__("lwz%U1%X1 %0,%1" : "=r"(t) : "m"(v->counter));
    4e6c:	80 01 00 18 	lwz     r0,24(r1)
    4e70:	7c 09 03 78 	mr      r9,r0
    4e74:	83 e9 00 00 	lwz     r31,0(r9)
    4e78:	93 e1 00 1c 	stw     r31,28(r1)

	return t;
    4e7c:	80 01 00 1c 	lwz     r0,28(r1)

	if (xfrm_state_kern(x)) {
    4e80:	2f 80 00 00 	cmpwi   cr7,r0,0
    4e84:	41 9e 00 10 	beq-    cr7,4e94 <pfkey_delete+0x108>
		err = -EPERM;
    4e88:	38 00 ff ff 	li      r0,-1
    4e8c:	90 01 00 08 	stw     r0,8(r1)
		goto out;
    4e90:	48 00 00 64 	b       4ef4 <pfkey_delete+0x168>
	}

	err = xfrm_state_delete(x);
    4e94:	80 61 00 10 	lwz     r3,16(r1)
    4e98:	48 00 00 01 	bl      4e98 <pfkey_delete+0x10c>
    4e9c:	90 61 00 08 	stw     r3,8(r1)

	if (err < 0)
    4ea0:	80 01 00 08 	lwz     r0,8(r1)
    4ea4:	2f 80 00 00 	cmpwi   cr7,r0,0
    4ea8:	41 9c 00 48 	blt-    cr7,4ef0 <pfkey_delete+0x164>
		goto out;

	c.seq = hdr->sadb_msg_seq;
    4eac:	80 01 00 70 	lwz     r0,112(r1)
    4eb0:	7c 0b 03 78 	mr      r11,r0
    4eb4:	80 0b 00 08 	lwz     r0,8(r11)
    4eb8:	90 01 00 4c 	stw     r0,76(r1)
	c.pid = hdr->sadb_msg_pid;
    4ebc:	80 01 00 70 	lwz     r0,112(r1)
    4ec0:	7c 09 03 78 	mr      r9,r0
    4ec4:	80 09 00 0c 	lwz     r0,12(r9)
    4ec8:	90 01 00 50 	stw     r0,80(r1)
	c.event = XFRM_MSG_DELSA;
    4ecc:	38 00 00 11 	li      r0,17
    4ed0:	90 01 00 54 	stw     r0,84(r1)
	km_state_notify(x, &c);
    4ed4:	38 01 00 48 	addi    r0,r1,72
    4ed8:	80 61 00 10 	lwz     r3,16(r1)
    4edc:	7c 04 03 78 	mr      r4,r0
    4ee0:	48 00 00 01 	bl      4ee0 <pfkey_delete+0x154>
    4ee4:	48 00 00 10 	b       4ef4 <pfkey_delete+0x168>
	x = pfkey_xfrm_state_lookup(net, hdr, ext_hdrs);
	if (x == NULL)
		return -ESRCH;

	if ((err = security_xfrm_state_delete(x)))
		goto out;
    4ee8:	60 00 00 00 	nop
    4eec:	48 00 00 08 	b       4ef4 <pfkey_delete+0x168>
	}

	err = xfrm_state_delete(x);

	if (err < 0)
		goto out;
    4ef0:	60 00 00 00 	nop
	c.seq = hdr->sadb_msg_seq;
	c.pid = hdr->sadb_msg_pid;
	c.event = XFRM_MSG_DELSA;
	km_state_notify(x, &c);
out:
	xfrm_audit_state_delete(x, err ? 0 : 1,
    4ef4:	80 01 00 08 	lwz     r0,8(r1)
    4ef8:	2f 80 00 00 	cmpwi   cr7,r0,0
    4efc:	7c 00 00 26 	mfcr    r0
    4f00:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
    4f04:	81 21 00 10 	lwz     r9,16(r1)
    4f08:	91 21 00 34 	stw     r9,52(r1)
    4f0c:	90 01 00 38 	stw     r0,56(r1)
    4f10:	38 00 ff ff 	li      r0,-1
    4f14:	90 01 00 3c 	stw     r0,60(r1)
    4f18:	38 00 ff ff 	li      r0,-1
    4f1c:	90 01 00 40 	stw     r0,64(r1)
    4f20:	38 00 00 00 	li      r0,0
    4f24:	90 01 00 44 	stw     r0,68(r1)
    4f28:	80 01 00 10 	lwz     r0,16(r1)
    4f2c:	90 01 00 20 	stw     r0,32(r1)
	atomic_dec(&x->refcnt);
}

static inline void xfrm_state_put(struct xfrm_state *x)
{
	if (atomic_dec_and_test(&x->refcnt))
    4f30:	80 01 00 20 	lwz     r0,32(r1)
    4f34:	30 00 00 18 	addic   r0,r0,24
    4f38:	90 01 00 24 	stw     r0,36(r1)
	PPC405_ERR77(0,%1)
"	stwcx.	%0,0,%1\n\
	bne-	1b"
	PPC_ACQUIRE_BARRIER
	: "=&r" (t)
	: "r" (&v->counter)
    4f3c:	80 01 00 24 	lwz     r0,36(r1)

static __inline__ int atomic_dec_return(atomic_t *v)
{
	int t;

	__asm__ __volatile__(
    4f40:	7f e0 00 28 	lwarx   r31,0,r0
    4f44:	33 ff ff ff 	addic   r31,r31,-1
    4f48:	7f e0 01 2d 	stwcx.  r31,0,r0
    4f4c:	40 a2 ff f4 	bne-    4f40 <pfkey_delete+0x1b4>
    4f50:	93 e1 00 28 	stw     r31,40(r1)
	PPC_ACQUIRE_BARRIER
	: "=&r" (t)
	: "r" (&v->counter)
	: "cc", "xer", "memory");

	return t;
    4f54:	80 01 00 28 	lwz     r0,40(r1)
    4f58:	2f 80 00 00 	cmpwi   cr7,r0,0
    4f5c:	40 9e 00 0c 	bne-    cr7,4f68 <pfkey_delete+0x1dc>
		__xfrm_state_destroy(x);
    4f60:	80 61 00 20 	lwz     r3,32(r1)
    4f64:	48 00 00 01 	bl      4f64 <pfkey_delete+0x1d8>
				audit_get_loginuid(current),
				audit_get_sessionid(current), 0);
	xfrm_state_put(x);

	return err;
    4f68:	80 01 00 08 	lwz     r0,8(r1)
}
    4f6c:	7c 03 03 78 	mr      r3,r0
    4f70:	80 01 00 84 	lwz     r0,132(r1)
    4f74:	7c 08 03 a6 	mtlr    r0
    4f78:	83 e1 00 7c 	lwz     r31,124(r1)
    4f7c:	38 21 00 80 	addi    r1,r1,128
    4f80:	4e 80 00 20 	blr

00004f84 <pfkey_get>:

static int pfkey_get(struct sock *sk, struct sk_buff *skb, struct sadb_msg *hdr, void **ext_hdrs)
{
    4f84:	94 21 ff a0 	stwu    r1,-96(r1)
    4f88:	7c 08 02 a6 	mflr    r0
    4f8c:	90 01 00 64 	stw     r0,100(r1)
    4f90:	93 e1 00 5c 	stw     r31,92(r1)
    4f94:	90 61 00 48 	stw     r3,72(r1)
    4f98:	90 81 00 4c 	stw     r4,76(r1)
    4f9c:	90 a1 00 50 	stw     r5,80(r1)
    4fa0:	90 c1 00 54 	stw     r6,84(r1)
    4fa4:	80 01 00 48 	lwz     r0,72(r1)
    4fa8:	90 01 00 38 	stw     r0,56(r1)
    4fac:	3c 00 00 00 	lis     r0,0
    4fb0:	30 00 00 00 	addic   r0,r0,0
	struct net *net = sock_net(sk);
    4fb4:	90 01 00 08 	stw     r0,8(r1)
	__u8 proto;
	struct sk_buff *out_skb;
	struct sadb_msg *out_hdr;
	struct xfrm_state *x;

	if (!ext_hdrs[SADB_EXT_SA-1] ||
    4fb8:	80 01 00 54 	lwz     r0,84(r1)
    4fbc:	7c 09 03 78 	mr      r9,r0
    4fc0:	80 09 00 00 	lwz     r0,0(r9)
    4fc4:	2f 80 00 00 	cmpwi   cr7,r0,0
    4fc8:	41 9e 00 3c 	beq-    cr7,5004 <pfkey_get+0x80>
	    !present_and_same_family(ext_hdrs[SADB_EXT_ADDRESS_SRC-1],
    4fcc:	80 01 00 54 	lwz     r0,84(r1)
    4fd0:	30 00 00 10 	addic   r0,r0,16
    4fd4:	7c 0b 03 78 	mr      r11,r0
    4fd8:	81 2b 00 00 	lwz     r9,0(r11)
				     ext_hdrs[SADB_EXT_ADDRESS_DST-1]))
    4fdc:	80 01 00 54 	lwz     r0,84(r1)
    4fe0:	30 00 00 14 	addic   r0,r0,20
	struct sk_buff *out_skb;
	struct sadb_msg *out_hdr;
	struct xfrm_state *x;

	if (!ext_hdrs[SADB_EXT_SA-1] ||
	    !present_and_same_family(ext_hdrs[SADB_EXT_ADDRESS_SRC-1],
    4fe4:	7c 0b 03 78 	mr      r11,r0
    4fe8:	80 0b 00 00 	lwz     r0,0(r11)
    4fec:	7d 23 4b 78 	mr      r3,r9
    4ff0:	7c 04 03 78 	mr      r4,r0
    4ff4:	4b ff c3 b5 	bl      13a8 <present_and_same_family>
    4ff8:	7c 60 1b 78 	mr      r0,r3
	__u8 proto;
	struct sk_buff *out_skb;
	struct sadb_msg *out_hdr;
	struct xfrm_state *x;

	if (!ext_hdrs[SADB_EXT_SA-1] ||
    4ffc:	2f 80 00 00 	cmpwi   cr7,r0,0
    5000:	40 9e 00 0c 	bne-    cr7,500c <pfkey_get+0x88>
	    !present_and_same_family(ext_hdrs[SADB_EXT_ADDRESS_SRC-1],
				     ext_hdrs[SADB_EXT_ADDRESS_DST-1]))
		return -EINVAL;
    5004:	38 00 ff ea 	li      r0,-22
    5008:	48 00 01 b4 	b       51bc <pfkey_get+0x238>

	x = pfkey_xfrm_state_lookup(net, hdr, ext_hdrs);
    500c:	80 61 00 08 	lwz     r3,8(r1)
    5010:	80 81 00 50 	lwz     r4,80(r1)
    5014:	80 a1 00 54 	lwz     r5,84(r1)
    5018:	4b ff c9 01 	bl      1918 <pfkey_xfrm_state_lookup>
    501c:	90 61 00 0c 	stw     r3,12(r1)
	if (x == NULL)
    5020:	80 01 00 0c 	lwz     r0,12(r1)
    5024:	2f 80 00 00 	cmpwi   cr7,r0,0
    5028:	40 9e 00 0c 	bne-    cr7,5034 <pfkey_get+0xb0>
		return -ESRCH;
    502c:	38 00 ff fd 	li      r0,-3
    5030:	48 00 01 8c 	b       51bc <pfkey_get+0x238>
    5034:	80 01 00 0c 	lwz     r0,12(r1)
    5038:	90 01 00 1c 	stw     r0,28(r1)

static inline struct sk_buff *pfkey_xfrm_state2msg(struct xfrm_state *x)
{
	struct sk_buff *skb;

	skb = __pfkey_xfrm_state2msg(x, 1, 3);
    503c:	80 61 00 1c 	lwz     r3,28(r1)
    5040:	38 80 00 01 	li      r4,1
    5044:	38 a0 00 03 	li      r5,3
    5048:	4b ff cb d5 	bl      1c1c <__pfkey_xfrm_state2msg>
    504c:	90 61 00 20 	stw     r3,32(r1)

	return skb;
    5050:	80 01 00 20 	lwz     r0,32(r1)

	x = pfkey_xfrm_state_lookup(net, hdr, ext_hdrs);
	if (x == NULL)
		return -ESRCH;

	out_skb = pfkey_xfrm_state2msg(x);
    5054:	90 01 00 10 	stw     r0,16(r1)
	proto = x->id.proto;
    5058:	80 01 00 0c 	lwz     r0,12(r1)
    505c:	7c 09 03 78 	mr      r9,r0
    5060:	88 09 00 30 	lbz     r0,48(r9)
    5064:	98 01 00 14 	stb     r0,20(r1)
    5068:	80 01 00 0c 	lwz     r0,12(r1)
    506c:	90 01 00 24 	stw     r0,36(r1)
	atomic_dec(&x->refcnt);
}

static inline void xfrm_state_put(struct xfrm_state *x)
{
	if (atomic_dec_and_test(&x->refcnt))
    5070:	80 01 00 24 	lwz     r0,36(r1)
    5074:	30 00 00 18 	addic   r0,r0,24
    5078:	90 01 00 28 	stw     r0,40(r1)
	PPC405_ERR77(0,%1)
"	stwcx.	%0,0,%1\n\
	bne-	1b"
	PPC_ACQUIRE_BARRIER
	: "=&r" (t)
	: "r" (&v->counter)
    507c:	80 01 00 28 	lwz     r0,40(r1)

static __inline__ int atomic_dec_return(atomic_t *v)
{
	int t;

	__asm__ __volatile__(
    5080:	7f e0 00 28 	lwarx   r31,0,r0
    5084:	33 ff ff ff 	addic   r31,r31,-1
    5088:	7f e0 01 2d 	stwcx.  r31,0,r0
    508c:	40 a2 ff f4 	bne-    5080 <pfkey_get+0xfc>
    5090:	93 e1 00 2c 	stw     r31,44(r1)
	PPC_ACQUIRE_BARRIER
	: "=&r" (t)
	: "r" (&v->counter)
	: "cc", "xer", "memory");

	return t;
    5094:	80 01 00 2c 	lwz     r0,44(r1)
    5098:	2f 80 00 00 	cmpwi   cr7,r0,0
    509c:	40 9e 00 0c 	bne-    cr7,50a8 <pfkey_get+0x124>
		__xfrm_state_destroy(x);
    50a0:	80 61 00 24 	lwz     r3,36(r1)
    50a4:	48 00 00 01 	bl      50a4 <pfkey_get+0x120>
    50a8:	80 01 00 10 	lwz     r0,16(r1)
    50ac:	90 01 00 30 	stw     r0,48(r1)
}

static inline long __must_check IS_ERR(const void *ptr)
{
	return IS_ERR_VALUE((unsigned long)ptr);
    50b0:	81 21 00 30 	lwz     r9,48(r1)
    50b4:	38 00 f0 00 	li      r0,-4096
    50b8:	7f 89 00 40 	cmplw   cr7,r9,r0
    50bc:	7c 00 00 26 	mfcr    r0
    50c0:	54 00 f7 fe 	rlwinm  r0,r0,30,31,31
	xfrm_state_put(x);
	if (IS_ERR(out_skb))
    50c4:	2f 80 00 00 	cmpwi   cr7,r0,0
    50c8:	41 9e 00 14 	beq-    cr7,50dc <pfkey_get+0x158>
    50cc:	80 01 00 10 	lwz     r0,16(r1)
    50d0:	90 01 00 34 	stw     r0,52(r1)
	return (void *) error;
}

static inline long __must_check PTR_ERR(const void *ptr)
{
	return (long) ptr;
    50d4:	80 01 00 34 	lwz     r0,52(r1)
		return  PTR_ERR(out_skb);
    50d8:	48 00 00 e4 	b       51bc <pfkey_get+0x238>

	out_hdr = (struct sadb_msg *) out_skb->data;
    50dc:	80 01 00 10 	lwz     r0,16(r1)
    50e0:	7c 0b 03 78 	mr      r11,r0
    50e4:	80 0b 00 98 	lwz     r0,152(r11)
    50e8:	90 01 00 18 	stw     r0,24(r1)
	out_hdr->sadb_msg_version = hdr->sadb_msg_version;
    50ec:	80 01 00 50 	lwz     r0,80(r1)
    50f0:	7c 09 03 78 	mr      r9,r0
    50f4:	88 09 00 00 	lbz     r0,0(r9)
    50f8:	54 09 06 3e 	clrlwi  r9,r0,24
    50fc:	80 01 00 18 	lwz     r0,24(r1)
    5100:	7c 0b 03 78 	mr      r11,r0
    5104:	99 2b 00 00 	stb     r9,0(r11)
	out_hdr->sadb_msg_type = SADB_GET;
    5108:	80 01 00 18 	lwz     r0,24(r1)
    510c:	39 20 00 05 	li      r9,5
    5110:	7c 0b 03 78 	mr      r11,r0
    5114:	99 2b 00 01 	stb     r9,1(r11)
	out_hdr->sadb_msg_satype = pfkey_proto2satype(proto);
    5118:	88 01 00 14 	lbz     r0,20(r1)
    511c:	54 00 06 3e 	clrlwi  r0,r0,24
    5120:	54 00 04 3e 	clrlwi  r0,r0,16
    5124:	7c 03 03 78 	mr      r3,r0
    5128:	4b ff c6 45 	bl      176c <pfkey_proto2satype>
    512c:	7c 60 1b 78 	mr      r0,r3
    5130:	7c 09 03 78 	mr      r9,r0
    5134:	80 01 00 18 	lwz     r0,24(r1)
    5138:	7c 0b 03 78 	mr      r11,r0
    513c:	99 2b 00 03 	stb     r9,3(r11)
	out_hdr->sadb_msg_errno = 0;
    5140:	80 01 00 18 	lwz     r0,24(r1)
    5144:	39 20 00 00 	li      r9,0
    5148:	7c 0b 03 78 	mr      r11,r0
    514c:	99 2b 00 02 	stb     r9,2(r11)
	out_hdr->sadb_msg_reserved = 0;
    5150:	80 01 00 18 	lwz     r0,24(r1)
    5154:	39 20 00 00 	li      r9,0
    5158:	7c 0b 03 78 	mr      r11,r0
    515c:	b1 2b 00 06 	sth     r9,6(r11)
	out_hdr->sadb_msg_seq = hdr->sadb_msg_seq;
    5160:	80 01 00 50 	lwz     r0,80(r1)
    5164:	7c 0b 03 78 	mr      r11,r0
    5168:	81 2b 00 08 	lwz     r9,8(r11)
    516c:	80 01 00 18 	lwz     r0,24(r1)
    5170:	7c 0b 03 78 	mr      r11,r0
    5174:	91 2b 00 08 	stw     r9,8(r11)
	out_hdr->sadb_msg_pid = hdr->sadb_msg_pid;
    5178:	80 01 00 50 	lwz     r0,80(r1)
    517c:	7c 0b 03 78 	mr      r11,r0
    5180:	81 2b 00 0c 	lwz     r9,12(r11)
    5184:	80 01 00 18 	lwz     r0,24(r1)
    5188:	7c 0b 03 78 	mr      r11,r0
    518c:	91 2b 00 0c 	stw     r9,12(r11)
    5190:	80 01 00 48 	lwz     r0,72(r1)
    5194:	90 01 00 3c 	stw     r0,60(r1)
    5198:	3c 00 00 00 	lis     r0,0
    519c:	30 00 00 00 	addic   r0,r0,0
	pfkey_broadcast(out_skb, GFP_ATOMIC, BROADCAST_ONE, sk, sock_net(sk));
    51a0:	80 61 00 10 	lwz     r3,16(r1)
    51a4:	38 80 00 20 	li      r4,32
    51a8:	38 a0 00 01 	li      r5,1
    51ac:	80 c1 00 48 	lwz     r6,72(r1)
    51b0:	7c 07 03 78 	mr      r7,r0
    51b4:	4b ff bb 99 	bl      d4c <pfkey_broadcast>

	return 0;
    51b8:	38 00 00 00 	li      r0,0
}
    51bc:	7c 03 03 78 	mr      r3,r0
    51c0:	80 01 00 64 	lwz     r0,100(r1)
    51c4:	7c 08 03 a6 	mtlr    r0
    51c8:	83 e1 00 5c 	lwz     r31,92(r1)
    51cc:	38 21 00 60 	addi    r1,r1,96
    51d0:	4e 80 00 20 	blr

000051d4 <compose_sadb_supported>:

static struct sk_buff *compose_sadb_supported(struct sadb_msg *orig,
					      gfp_t allocation)
{
    51d4:	94 21 ff b0 	stwu    r1,-80(r1)
    51d8:	7c 08 02 a6 	mflr    r0
    51dc:	90 01 00 54 	stw     r0,84(r1)
    51e0:	90 61 00 48 	stw     r3,72(r1)
    51e4:	90 81 00 4c 	stw     r4,76(r1)
	struct sk_buff *skb;
	struct sadb_msg *hdr;
	int len, auth_len, enc_len, i;

	auth_len = xfrm_count_auth_supported();
    51e8:	48 00 00 01 	bl      51e8 <compose_sadb_supported+0x14>
    51ec:	90 61 00 08 	stw     r3,8(r1)
	if (auth_len) {
    51f0:	80 01 00 08 	lwz     r0,8(r1)
    51f4:	2f 80 00 00 	cmpwi   cr7,r0,0
    51f8:	41 9e 00 1c 	beq-    cr7,5214 <compose_sadb_supported+0x40>
		auth_len *= sizeof(struct sadb_alg);
    51fc:	80 01 00 08 	lwz     r0,8(r1)
    5200:	54 00 18 38 	rlwinm  r0,r0,3,0,28
    5204:	90 01 00 08 	stw     r0,8(r1)
		auth_len += sizeof(struct sadb_supported);
    5208:	80 01 00 08 	lwz     r0,8(r1)
    520c:	30 00 00 08 	addic   r0,r0,8
    5210:	90 01 00 08 	stw     r0,8(r1)
	}

	enc_len = xfrm_count_enc_supported();
    5214:	48 00 00 01 	bl      5214 <compose_sadb_supported+0x40>
    5218:	90 61 00 0c 	stw     r3,12(r1)
	if (enc_len) {
    521c:	80 01 00 0c 	lwz     r0,12(r1)
    5220:	2f 80 00 00 	cmpwi   cr7,r0,0
    5224:	41 9e 00 1c 	beq-    cr7,5240 <compose_sadb_supported+0x6c>
		enc_len *= sizeof(struct sadb_alg);
    5228:	80 01 00 0c 	lwz     r0,12(r1)
    522c:	54 00 18 38 	rlwinm  r0,r0,3,0,28
    5230:	90 01 00 0c 	stw     r0,12(r1)
		enc_len += sizeof(struct sadb_supported);
    5234:	80 01 00 0c 	lwz     r0,12(r1)
    5238:	30 00 00 08 	addic   r0,r0,8
    523c:	90 01 00 0c 	stw     r0,12(r1)
	}

	len = enc_len + auth_len + sizeof(struct sadb_msg);
    5240:	81 21 00 0c 	lwz     r9,12(r1)
    5244:	80 01 00 08 	lwz     r0,8(r1)
    5248:	7c 09 02 14 	add     r0,r9,r0
    524c:	30 00 00 10 	addic   r0,r0,16
    5250:	90 01 00 1c 	stw     r0,28(r1)

	skb = alloc_skb(len + 16, allocation);
    5254:	80 01 00 1c 	lwz     r0,28(r1)
    5258:	30 00 00 10 	addic   r0,r0,16
    525c:	90 01 00 38 	stw     r0,56(r1)
    5260:	80 01 00 4c 	lwz     r0,76(r1)
    5264:	90 01 00 3c 	stw     r0,60(r1)
    5268:	80 61 00 38 	lwz     r3,56(r1)
    526c:	80 81 00 3c 	lwz     r4,60(r1)
    5270:	38 a0 00 00 	li      r5,0
    5274:	38 c0 ff ff 	li      r6,-1
    5278:	48 00 00 01 	bl      5278 <compose_sadb_supported+0xa4>
    527c:	7c 60 1b 78 	mr      r0,r3
    5280:	90 01 00 20 	stw     r0,32(r1)
	if (!skb)
    5284:	80 01 00 20 	lwz     r0,32(r1)
    5288:	2f 80 00 00 	cmpwi   cr7,r0,0
    528c:	41 9e 02 20 	beq-    cr7,54ac <compose_sadb_supported+0x2d8>
		goto out_put_algs;

	hdr = (struct sadb_msg *) skb_put(skb, sizeof(*hdr));
    5290:	80 61 00 20 	lwz     r3,32(r1)
    5294:	38 80 00 10 	li      r4,16
    5298:	48 00 00 01 	bl      5298 <compose_sadb_supported+0xc4>
    529c:	90 61 00 24 	stw     r3,36(r1)
    52a0:	80 01 00 24 	lwz     r0,36(r1)
    52a4:	90 01 00 40 	stw     r0,64(r1)
    52a8:	80 01 00 48 	lwz     r0,72(r1)
    52ac:	90 01 00 44 	stw     r0,68(r1)
	return rc;
}

static inline void pfkey_hdr_dup(struct sadb_msg *new, struct sadb_msg *orig)
{
	*new = *orig;
    52b0:	80 01 00 40 	lwz     r0,64(r1)
    52b4:	81 21 00 44 	lwz     r9,68(r1)
    52b8:	81 09 00 00 	lwz     r8,0(r9)
    52bc:	81 49 00 04 	lwz     r10,4(r9)
    52c0:	81 69 00 08 	lwz     r11,8(r9)
    52c4:	81 29 00 0c 	lwz     r9,12(r9)
    52c8:	7c 07 03 78 	mr      r7,r0
    52cc:	91 07 00 00 	stw     r8,0(r7)
    52d0:	7c 08 03 78 	mr      r8,r0
    52d4:	91 48 00 04 	stw     r10,4(r8)
    52d8:	7c 0a 03 78 	mr      r10,r0
    52dc:	91 6a 00 08 	stw     r11,8(r10)
    52e0:	7c 0b 03 78 	mr      r11,r0
    52e4:	91 2b 00 0c 	stw     r9,12(r11)
	if (!skb)
		goto out_put_algs;

	hdr = (struct sadb_msg *) skb_put(skb, sizeof(*hdr));
	pfkey_hdr_dup(hdr, orig);
	hdr->sadb_msg_errno = 0;
    52e8:	80 01 00 24 	lwz     r0,36(r1)
    52ec:	39 20 00 00 	li      r9,0
    52f0:	7c 07 03 78 	mr      r7,r0
    52f4:	99 27 00 02 	stb     r9,2(r7)
	hdr->sadb_msg_len = len / sizeof(uint64_t);
    52f8:	80 01 00 1c 	lwz     r0,28(r1)
    52fc:	54 00 e8 fe 	rlwinm  r0,r0,29,3,31
    5300:	54 09 04 3e 	clrlwi  r9,r0,16
    5304:	80 01 00 24 	lwz     r0,36(r1)
    5308:	7c 08 03 78 	mr      r8,r0
    530c:	b1 28 00 04 	sth     r9,4(r8)

	if (auth_len) {
    5310:	80 01 00 08 	lwz     r0,8(r1)
    5314:	2f 80 00 00 	cmpwi   cr7,r0,0
    5318:	41 9e 00 c8 	beq-    cr7,53e0 <compose_sadb_supported+0x20c>
		struct sadb_supported *sp;
		struct sadb_alg *ap;

		sp = (struct sadb_supported *) skb_put(skb, auth_len);
    531c:	80 01 00 08 	lwz     r0,8(r1)
    5320:	80 61 00 20 	lwz     r3,32(r1)
    5324:	7c 04 03 78 	mr      r4,r0
    5328:	48 00 00 01 	bl      5328 <compose_sadb_supported+0x154>
    532c:	90 61 00 28 	stw     r3,40(r1)
		ap = (struct sadb_alg *) (sp + 1);
    5330:	80 01 00 28 	lwz     r0,40(r1)
    5334:	30 00 00 08 	addic   r0,r0,8
    5338:	90 01 00 14 	stw     r0,20(r1)

		sp->sadb_supported_len = auth_len / sizeof(uint64_t);
    533c:	80 01 00 08 	lwz     r0,8(r1)
    5340:	54 00 e8 fe 	rlwinm  r0,r0,29,3,31
    5344:	54 09 04 3e 	clrlwi  r9,r0,16
    5348:	80 01 00 28 	lwz     r0,40(r1)
    534c:	7c 0a 03 78 	mr      r10,r0
    5350:	b1 2a 00 00 	sth     r9,0(r10)
		sp->sadb_supported_exttype = SADB_EXT_SUPPORTED_AUTH;
    5354:	80 01 00 28 	lwz     r0,40(r1)
    5358:	39 20 00 0e 	li      r9,14
    535c:	7c 0b 03 78 	mr      r11,r0
    5360:	b1 2b 00 02 	sth     r9,2(r11)

		for (i = 0; ; i++) {
    5364:	38 00 00 00 	li      r0,0
    5368:	90 01 00 10 	stw     r0,16(r1)
			struct xfrm_algo_desc *aalg = xfrm_aalg_get_byidx(i);
    536c:	80 01 00 10 	lwz     r0,16(r1)
    5370:	7c 03 03 78 	mr      r3,r0
    5374:	48 00 00 01 	bl      5374 <compose_sadb_supported+0x1a0>
    5378:	90 61 00 2c 	stw     r3,44(r1)
			if (!aalg)
    537c:	80 01 00 2c 	lwz     r0,44(r1)
    5380:	2f 80 00 00 	cmpwi   cr7,r0,0
    5384:	41 9e 00 58 	beq-    cr7,53dc <compose_sadb_supported+0x208>
				break;
			if (aalg->available)
    5388:	80 01 00 2c 	lwz     r0,44(r1)
    538c:	7c 07 03 78 	mr      r7,r0
    5390:	80 07 00 08 	lwz     r0,8(r7)
    5394:	54 00 00 00 	rlwinm  r0,r0,0,0,0
    5398:	2f 80 00 00 	cmpwi   cr7,r0,0
    539c:	41 9e 00 30 	beq-    cr7,53cc <compose_sadb_supported+0x1f8>
				*ap++ = aalg->desc;
    53a0:	80 01 00 14 	lwz     r0,20(r1)
    53a4:	81 21 00 2c 	lwz     r9,44(r1)
    53a8:	81 69 00 0e 	lwz     r11,14(r9)
    53ac:	7c 08 03 78 	mr      r8,r0
    53b0:	91 68 00 00 	stw     r11,0(r8)
    53b4:	81 29 00 12 	lwz     r9,18(r9)
    53b8:	7c 0a 03 78 	mr      r10,r0
    53bc:	91 2a 00 04 	stw     r9,4(r10)
    53c0:	80 01 00 14 	lwz     r0,20(r1)
    53c4:	30 00 00 08 	addic   r0,r0,8
    53c8:	90 01 00 14 	stw     r0,20(r1)
		ap = (struct sadb_alg *) (sp + 1);

		sp->sadb_supported_len = auth_len / sizeof(uint64_t);
		sp->sadb_supported_exttype = SADB_EXT_SUPPORTED_AUTH;

		for (i = 0; ; i++) {
    53cc:	80 01 00 10 	lwz     r0,16(r1)
    53d0:	30 00 00 01 	addic   r0,r0,1
    53d4:	90 01 00 10 	stw     r0,16(r1)
			struct xfrm_algo_desc *aalg = xfrm_aalg_get_byidx(i);
			if (!aalg)
				break;
			if (aalg->available)
				*ap++ = aalg->desc;
		}
    53d8:	4b ff ff 94 	b       536c <compose_sadb_supported+0x198>
		sp->sadb_supported_exttype = SADB_EXT_SUPPORTED_AUTH;

		for (i = 0; ; i++) {
			struct xfrm_algo_desc *aalg = xfrm_aalg_get_byidx(i);
			if (!aalg)
				break;
    53dc:	60 00 00 00 	nop
			if (aalg->available)
				*ap++ = aalg->desc;
		}
	}

	if (enc_len) {
    53e0:	80 01 00 0c 	lwz     r0,12(r1)
    53e4:	2f 80 00 00 	cmpwi   cr7,r0,0
    53e8:	41 9e 00 d0 	beq-    cr7,54b8 <compose_sadb_supported+0x2e4>
		struct sadb_supported *sp;
		struct sadb_alg *ap;

		sp = (struct sadb_supported *) skb_put(skb, enc_len);
    53ec:	80 01 00 0c 	lwz     r0,12(r1)
    53f0:	80 61 00 20 	lwz     r3,32(r1)
    53f4:	7c 04 03 78 	mr      r4,r0
    53f8:	48 00 00 01 	bl      53f8 <compose_sadb_supported+0x224>
    53fc:	90 61 00 30 	stw     r3,48(r1)
		ap = (struct sadb_alg *) (sp + 1);
    5400:	80 01 00 30 	lwz     r0,48(r1)
    5404:	30 00 00 08 	addic   r0,r0,8
    5408:	90 01 00 18 	stw     r0,24(r1)

		sp->sadb_supported_len = enc_len / sizeof(uint64_t);
    540c:	80 01 00 0c 	lwz     r0,12(r1)
    5410:	54 00 e8 fe 	rlwinm  r0,r0,29,3,31
    5414:	54 09 04 3e 	clrlwi  r9,r0,16
    5418:	80 01 00 30 	lwz     r0,48(r1)
    541c:	7c 0b 03 78 	mr      r11,r0
    5420:	b1 2b 00 00 	sth     r9,0(r11)
		sp->sadb_supported_exttype = SADB_EXT_SUPPORTED_ENCRYPT;
    5424:	80 01 00 30 	lwz     r0,48(r1)
    5428:	39 20 00 0f 	li      r9,15
    542c:	7c 07 03 78 	mr      r7,r0
    5430:	b1 27 00 02 	sth     r9,2(r7)

		for (i = 0; ; i++) {
    5434:	38 00 00 00 	li      r0,0
    5438:	90 01 00 10 	stw     r0,16(r1)
			struct xfrm_algo_desc *ealg = xfrm_ealg_get_byidx(i);
    543c:	80 01 00 10 	lwz     r0,16(r1)
    5440:	7c 03 03 78 	mr      r3,r0
    5444:	48 00 00 01 	bl      5444 <compose_sadb_supported+0x270>
    5448:	90 61 00 34 	stw     r3,52(r1)
			if (!ealg)
    544c:	80 01 00 34 	lwz     r0,52(r1)
    5450:	2f 80 00 00 	cmpwi   cr7,r0,0
    5454:	41 9e 00 60 	beq-    cr7,54b4 <compose_sadb_supported+0x2e0>
				break;
			if (ealg->available)
    5458:	80 01 00 34 	lwz     r0,52(r1)
    545c:	7c 08 03 78 	mr      r8,r0
    5460:	80 08 00 08 	lwz     r0,8(r8)
    5464:	54 00 00 00 	rlwinm  r0,r0,0,0,0
    5468:	2f 80 00 00 	cmpwi   cr7,r0,0
    546c:	41 9e 00 30 	beq-    cr7,549c <compose_sadb_supported+0x2c8>
				*ap++ = ealg->desc;
    5470:	80 01 00 18 	lwz     r0,24(r1)
    5474:	81 21 00 34 	lwz     r9,52(r1)
    5478:	81 69 00 0e 	lwz     r11,14(r9)
    547c:	7c 0a 03 78 	mr      r10,r0
    5480:	91 6a 00 00 	stw     r11,0(r10)
    5484:	81 29 00 12 	lwz     r9,18(r9)
    5488:	7c 0b 03 78 	mr      r11,r0
    548c:	91 2b 00 04 	stw     r9,4(r11)
    5490:	80 01 00 18 	lwz     r0,24(r1)
    5494:	30 00 00 08 	addic   r0,r0,8
    5498:	90 01 00 18 	stw     r0,24(r1)
		ap = (struct sadb_alg *) (sp + 1);

		sp->sadb_supported_len = enc_len / sizeof(uint64_t);
		sp->sadb_supported_exttype = SADB_EXT_SUPPORTED_ENCRYPT;

		for (i = 0; ; i++) {
    549c:	80 01 00 10 	lwz     r0,16(r1)
    54a0:	30 00 00 01 	addic   r0,r0,1
    54a4:	90 01 00 10 	stw     r0,16(r1)
			struct xfrm_algo_desc *ealg = xfrm_ealg_get_byidx(i);
			if (!ealg)
				break;
			if (ealg->available)
				*ap++ = ealg->desc;
		}
    54a8:	4b ff ff 94 	b       543c <compose_sadb_supported+0x268>

	len = enc_len + auth_len + sizeof(struct sadb_msg);

	skb = alloc_skb(len + 16, allocation);
	if (!skb)
		goto out_put_algs;
    54ac:	60 00 00 00 	nop
    54b0:	48 00 00 08 	b       54b8 <compose_sadb_supported+0x2e4>
		sp->sadb_supported_exttype = SADB_EXT_SUPPORTED_ENCRYPT;

		for (i = 0; ; i++) {
			struct xfrm_algo_desc *ealg = xfrm_ealg_get_byidx(i);
			if (!ealg)
				break;
    54b4:	60 00 00 00 	nop
				*ap++ = ealg->desc;
		}
	}

out_put_algs:
	return skb;
    54b8:	80 01 00 20 	lwz     r0,32(r1)
}
    54bc:	7c 03 03 78 	mr      r3,r0
    54c0:	80 01 00 54 	lwz     r0,84(r1)
    54c4:	7c 08 03 a6 	mtlr    r0
    54c8:	38 21 00 50 	addi    r1,r1,80
    54cc:	4e 80 00 20 	blr

000054d0 <pfkey_register>:

static int pfkey_register(struct sock *sk, struct sk_buff *skb, struct sadb_msg *hdr, void **ext_hdrs)
{
    54d0:	94 21 ff d0 	stwu    r1,-48(r1)
    54d4:	7c 08 02 a6 	mflr    r0
    54d8:	90 01 00 34 	stw     r0,52(r1)
    54dc:	90 61 00 18 	stw     r3,24(r1)
    54e0:	90 81 00 1c 	stw     r4,28(r1)
    54e4:	90 a1 00 20 	stw     r5,32(r1)
    54e8:	90 c1 00 24 	stw     r6,36(r1)
    54ec:	80 01 00 18 	lwz     r0,24(r1)
    54f0:	90 01 00 10 	stw     r0,16(r1)
	} dump;
};

static inline struct pfkey_sock *pfkey_sk(struct sock *sk)
{
	return (struct pfkey_sock *)sk;
    54f4:	80 01 00 10 	lwz     r0,16(r1)
	return skb;
}

static int pfkey_register(struct sock *sk, struct sk_buff *skb, struct sadb_msg *hdr, void **ext_hdrs)
{
	struct pfkey_sock *pfk = pfkey_sk(sk);
    54f8:	90 01 00 08 	stw     r0,8(r1)
	struct sk_buff *supp_skb;

	if (hdr->sadb_msg_satype > SADB_SATYPE_MAX)
    54fc:	80 01 00 20 	lwz     r0,32(r1)
    5500:	7c 09 03 78 	mr      r9,r0
    5504:	88 09 00 03 	lbz     r0,3(r9)
    5508:	54 00 06 3e 	clrlwi  r0,r0,24
    550c:	2b 80 00 09 	cmplwi  cr7,r0,9
    5510:	40 9d 00 0c 	ble-    cr7,551c <pfkey_register+0x4c>
		return -EINVAL;
    5514:	38 00 ff ea 	li      r0,-22
    5518:	48 00 01 2c 	b       5644 <pfkey_register+0x174>

	if (hdr->sadb_msg_satype != SADB_SATYPE_UNSPEC) {
    551c:	80 01 00 20 	lwz     r0,32(r1)
    5520:	7c 0b 03 78 	mr      r11,r0
    5524:	88 0b 00 03 	lbz     r0,3(r11)
    5528:	54 00 06 3e 	clrlwi  r0,r0,24
    552c:	2f 80 00 00 	cmpwi   cr7,r0,0
    5530:	41 9e 00 70 	beq-    cr7,55a0 <pfkey_register+0xd0>
		if (pfk->registered&(1<<hdr->sadb_msg_satype))
    5534:	80 01 00 08 	lwz     r0,8(r1)
    5538:	7c 0b 03 78 	mr      r11,r0
    553c:	81 2b 01 48 	lwz     r9,328(r11)
    5540:	80 01 00 20 	lwz     r0,32(r1)
    5544:	7c 0b 03 78 	mr      r11,r0
    5548:	88 0b 00 03 	lbz     r0,3(r11)
    554c:	54 00 06 3e 	clrlwi  r0,r0,24
    5550:	7d 20 06 30 	sraw    r0,r9,r0
    5554:	54 00 07 fe 	clrlwi  r0,r0,31
    5558:	54 00 06 3e 	clrlwi  r0,r0,24
    555c:	2f 80 00 00 	cmpwi   cr7,r0,0
    5560:	41 9e 00 0c 	beq-    cr7,556c <pfkey_register+0x9c>
			return -EEXIST;
    5564:	38 00 ff ef 	li      r0,-17
    5568:	48 00 00 dc 	b       5644 <pfkey_register+0x174>
		pfk->registered |= (1<<hdr->sadb_msg_satype);
    556c:	80 01 00 08 	lwz     r0,8(r1)
    5570:	7c 0b 03 78 	mr      r11,r0
    5574:	81 2b 01 48 	lwz     r9,328(r11)
    5578:	80 01 00 20 	lwz     r0,32(r1)
    557c:	7c 0b 03 78 	mr      r11,r0
    5580:	88 0b 00 03 	lbz     r0,3(r11)
    5584:	54 00 06 3e 	clrlwi  r0,r0,24
    5588:	39 60 00 01 	li      r11,1
    558c:	7d 60 00 30 	slw     r0,r11,r0
    5590:	7d 29 03 78 	or      r9,r9,r0
    5594:	80 01 00 08 	lwz     r0,8(r1)
    5598:	7c 0b 03 78 	mr      r11,r0
    559c:	91 2b 01 48 	stw     r9,328(r11)
	}

	xfrm_probe_algs();
    55a0:	48 00 00 01 	bl      55a0 <pfkey_register+0xd0>

	supp_skb = compose_sadb_supported(hdr, GFP_KERNEL);
    55a4:	80 61 00 20 	lwz     r3,32(r1)
    55a8:	38 80 00 d0 	li      r4,208
    55ac:	4b ff fc 29 	bl      51d4 <compose_sadb_supported>
    55b0:	90 61 00 0c 	stw     r3,12(r1)
	if (!supp_skb) {
    55b4:	80 01 00 0c 	lwz     r0,12(r1)
    55b8:	2f 80 00 00 	cmpwi   cr7,r0,0
    55bc:	40 9e 00 5c 	bne-    cr7,5618 <pfkey_register+0x148>
		if (hdr->sadb_msg_satype != SADB_SATYPE_UNSPEC)
    55c0:	80 01 00 20 	lwz     r0,32(r1)
    55c4:	7c 09 03 78 	mr      r9,r0
    55c8:	88 09 00 03 	lbz     r0,3(r9)
    55cc:	54 00 06 3e 	clrlwi  r0,r0,24
    55d0:	2f 80 00 00 	cmpwi   cr7,r0,0
    55d4:	41 9e 00 3c 	beq-    cr7,5610 <pfkey_register+0x140>
			pfk->registered &= ~(1<<hdr->sadb_msg_satype);
    55d8:	80 01 00 08 	lwz     r0,8(r1)
    55dc:	7c 0b 03 78 	mr      r11,r0
    55e0:	81 2b 01 48 	lwz     r9,328(r11)
    55e4:	80 01 00 20 	lwz     r0,32(r1)
    55e8:	7c 0b 03 78 	mr      r11,r0
    55ec:	88 0b 00 03 	lbz     r0,3(r11)
    55f0:	54 00 06 3e 	clrlwi  r0,r0,24
    55f4:	39 60 00 01 	li      r11,1
    55f8:	7d 60 00 30 	slw     r0,r11,r0
    55fc:	7c 00 00 f8 	not     r0,r0
    5600:	7d 29 00 38 	and     r9,r9,r0
    5604:	80 01 00 08 	lwz     r0,8(r1)
    5608:	7c 0b 03 78 	mr      r11,r0
    560c:	91 2b 01 48 	stw     r9,328(r11)

		return -ENOBUFS;
    5610:	38 00 ff 97 	li      r0,-105
    5614:	48 00 00 30 	b       5644 <pfkey_register+0x174>
    5618:	80 01 00 18 	lwz     r0,24(r1)
    561c:	90 01 00 14 	stw     r0,20(r1)
    5620:	3c 00 00 00 	lis     r0,0
    5624:	30 00 00 00 	addic   r0,r0,0
	}

	pfkey_broadcast(supp_skb, GFP_KERNEL, BROADCAST_REGISTERED, sk, sock_net(sk));
    5628:	80 61 00 0c 	lwz     r3,12(r1)
    562c:	38 80 00 d0 	li      r4,208
    5630:	38 a0 00 02 	li      r5,2
    5634:	80 c1 00 18 	lwz     r6,24(r1)
    5638:	7c 07 03 78 	mr      r7,r0
    563c:	4b ff b7 11 	bl      d4c <pfkey_broadcast>

	return 0;
    5640:	38 00 00 00 	li      r0,0
}
    5644:	7c 03 03 78 	mr      r3,r0
    5648:	80 01 00 34 	lwz     r0,52(r1)
    564c:	7c 08 03 a6 	mtlr    r0
    5650:	38 21 00 30 	addi    r1,r1,48
    5654:	4e 80 00 20 	blr

00005658 <unicast_flush_resp>:

static int unicast_flush_resp(struct sock *sk, struct sadb_msg *ihdr)
{
    5658:	94 21 ff d0 	stwu    r1,-48(r1)
    565c:	7c 08 02 a6 	mflr    r0
    5660:	90 01 00 34 	stw     r0,52(r1)
    5664:	90 61 00 28 	stw     r3,40(r1)
    5668:	90 81 00 2c 	stw     r4,44(r1)
    566c:	38 00 00 20 	li      r0,32
    5670:	90 01 00 10 	stw     r0,16(r1)
    5674:	38 00 00 20 	li      r0,32
    5678:	90 01 00 14 	stw     r0,20(r1)
    567c:	80 61 00 10 	lwz     r3,16(r1)
    5680:	80 81 00 14 	lwz     r4,20(r1)
    5684:	38 a0 00 00 	li      r5,0
    5688:	38 c0 ff ff 	li      r6,-1
    568c:	48 00 00 01 	bl      568c <unicast_flush_resp+0x34>
    5690:	7c 60 1b 78 	mr      r0,r3
	struct sk_buff *skb;
	struct sadb_msg *hdr;

	skb = alloc_skb(sizeof(struct sadb_msg) + 16, GFP_ATOMIC);
    5694:	90 01 00 08 	stw     r0,8(r1)
	if (!skb)
    5698:	80 01 00 08 	lwz     r0,8(r1)
    569c:	2f 80 00 00 	cmpwi   cr7,r0,0
    56a0:	40 9e 00 0c 	bne-    cr7,56ac <unicast_flush_resp+0x54>
		return -ENOBUFS;
    56a4:	38 00 ff 97 	li      r0,-105
    56a8:	48 00 00 98 	b       5740 <unicast_flush_resp+0xe8>

	hdr = (struct sadb_msg *) skb_put(skb, sizeof(struct sadb_msg));
    56ac:	80 61 00 08 	lwz     r3,8(r1)
    56b0:	38 80 00 10 	li      r4,16
    56b4:	48 00 00 01 	bl      56b4 <unicast_flush_resp+0x5c>
    56b8:	90 61 00 0c 	stw     r3,12(r1)
	memcpy(hdr, ihdr, sizeof(struct sadb_msg));
    56bc:	80 01 00 0c 	lwz     r0,12(r1)
    56c0:	81 21 00 2c 	lwz     r9,44(r1)
    56c4:	81 09 00 00 	lwz     r8,0(r9)
    56c8:	81 49 00 04 	lwz     r10,4(r9)
    56cc:	81 69 00 08 	lwz     r11,8(r9)
    56d0:	81 29 00 0c 	lwz     r9,12(r9)
    56d4:	7c 07 03 78 	mr      r7,r0
    56d8:	91 07 00 00 	stw     r8,0(r7)
    56dc:	7c 08 03 78 	mr      r8,r0
    56e0:	91 48 00 04 	stw     r10,4(r8)
    56e4:	7c 0a 03 78 	mr      r10,r0
    56e8:	91 6a 00 08 	stw     r11,8(r10)
    56ec:	7c 0b 03 78 	mr      r11,r0
    56f0:	91 2b 00 0c 	stw     r9,12(r11)
	hdr->sadb_msg_errno = (uint8_t) 0;
    56f4:	80 01 00 0c 	lwz     r0,12(r1)
    56f8:	39 20 00 00 	li      r9,0
    56fc:	7c 07 03 78 	mr      r7,r0
    5700:	99 27 00 02 	stb     r9,2(r7)
	hdr->sadb_msg_len = (sizeof(struct sadb_msg) / sizeof(uint64_t));
    5704:	80 01 00 0c 	lwz     r0,12(r1)
    5708:	39 20 00 02 	li      r9,2
    570c:	7c 08 03 78 	mr      r8,r0
    5710:	b1 28 00 04 	sth     r9,4(r8)
    5714:	80 01 00 28 	lwz     r0,40(r1)
    5718:	90 01 00 18 	stw     r0,24(r1)
    571c:	3c 00 00 00 	lis     r0,0
    5720:	30 00 00 00 	addic   r0,r0,0

	return pfkey_broadcast(skb, GFP_ATOMIC, BROADCAST_ONE, sk, sock_net(sk));
    5724:	80 61 00 08 	lwz     r3,8(r1)
    5728:	38 80 00 20 	li      r4,32
    572c:	38 a0 00 01 	li      r5,1
    5730:	80 c1 00 28 	lwz     r6,40(r1)
    5734:	7c 07 03 78 	mr      r7,r0
    5738:	4b ff b6 15 	bl      d4c <pfkey_broadcast>
    573c:	7c 60 1b 78 	mr      r0,r3
}
    5740:	7c 03 03 78 	mr      r3,r0
    5744:	80 01 00 34 	lwz     r0,52(r1)
    5748:	7c 08 03 a6 	mtlr    r0
    574c:	38 21 00 30 	addi    r1,r1,48
    5750:	4e 80 00 20 	blr

00005754 <key_notify_sa_flush>:

static int key_notify_sa_flush(struct km_event *c)
{
    5754:	94 21 ff e0 	stwu    r1,-32(r1)
    5758:	7c 08 02 a6 	mflr    r0
    575c:	90 01 00 24 	stw     r0,36(r1)
    5760:	90 61 00 18 	stw     r3,24(r1)
    5764:	38 00 00 20 	li      r0,32
    5768:	90 01 00 10 	stw     r0,16(r1)
    576c:	38 00 00 20 	li      r0,32
    5770:	90 01 00 14 	stw     r0,20(r1)
    5774:	80 61 00 10 	lwz     r3,16(r1)
    5778:	80 81 00 14 	lwz     r4,20(r1)
    577c:	38 a0 00 00 	li      r5,0
    5780:	38 c0 ff ff 	li      r6,-1
    5784:	48 00 00 01 	bl      5784 <key_notify_sa_flush+0x30>
    5788:	7c 60 1b 78 	mr      r0,r3
	struct sk_buff *skb;
	struct sadb_msg *hdr;

	skb = alloc_skb(sizeof(struct sadb_msg) + 16, GFP_ATOMIC);
    578c:	90 01 00 08 	stw     r0,8(r1)
	if (!skb)
    5790:	80 01 00 08 	lwz     r0,8(r1)
    5794:	2f 80 00 00 	cmpwi   cr7,r0,0
    5798:	40 9e 00 0c 	bne-    cr7,57a4 <key_notify_sa_flush+0x50>
		return -ENOBUFS;
    579c:	38 00 ff 97 	li      r0,-105
    57a0:	48 00 00 d8 	b       5878 <key_notify_sa_flush+0x124>
	hdr = (struct sadb_msg *) skb_put(skb, sizeof(struct sadb_msg));
    57a4:	80 61 00 08 	lwz     r3,8(r1)
    57a8:	38 80 00 10 	li      r4,16
    57ac:	48 00 00 01 	bl      57ac <key_notify_sa_flush+0x58>
    57b0:	90 61 00 0c 	stw     r3,12(r1)
	hdr->sadb_msg_satype = pfkey_proto2satype(c->data.proto);
    57b4:	80 01 00 18 	lwz     r0,24(r1)
    57b8:	7c 09 03 78 	mr      r9,r0
    57bc:	80 09 00 00 	lwz     r0,0(r9)
    57c0:	54 00 04 3e 	clrlwi  r0,r0,16
    57c4:	7c 03 03 78 	mr      r3,r0
    57c8:	4b ff bf a5 	bl      176c <pfkey_proto2satype>
    57cc:	7c 60 1b 78 	mr      r0,r3
    57d0:	7c 09 03 78 	mr      r9,r0
    57d4:	80 01 00 0c 	lwz     r0,12(r1)
    57d8:	7c 0b 03 78 	mr      r11,r0
    57dc:	99 2b 00 03 	stb     r9,3(r11)
	hdr->sadb_msg_type = SADB_FLUSH;
    57e0:	80 01 00 0c 	lwz     r0,12(r1)
    57e4:	39 20 00 09 	li      r9,9
    57e8:	7c 0b 03 78 	mr      r11,r0
    57ec:	99 2b 00 01 	stb     r9,1(r11)
	hdr->sadb_msg_seq = c->seq;
    57f0:	80 01 00 18 	lwz     r0,24(r1)
    57f4:	7c 0b 03 78 	mr      r11,r0
    57f8:	81 2b 00 04 	lwz     r9,4(r11)
    57fc:	80 01 00 0c 	lwz     r0,12(r1)
    5800:	7c 0b 03 78 	mr      r11,r0
    5804:	91 2b 00 08 	stw     r9,8(r11)
	hdr->sadb_msg_pid = c->pid;
    5808:	80 01 00 18 	lwz     r0,24(r1)
    580c:	7c 0b 03 78 	mr      r11,r0
    5810:	81 2b 00 08 	lwz     r9,8(r11)
    5814:	80 01 00 0c 	lwz     r0,12(r1)
    5818:	7c 0b 03 78 	mr      r11,r0
    581c:	91 2b 00 0c 	stw     r9,12(r11)
	hdr->sadb_msg_version = PF_KEY_V2;
    5820:	80 01 00 0c 	lwz     r0,12(r1)
    5824:	39 20 00 02 	li      r9,2
    5828:	7c 0b 03 78 	mr      r11,r0
    582c:	99 2b 00 00 	stb     r9,0(r11)
	hdr->sadb_msg_errno = (uint8_t) 0;
    5830:	80 01 00 0c 	lwz     r0,12(r1)
    5834:	39 20 00 00 	li      r9,0
    5838:	7c 0b 03 78 	mr      r11,r0
    583c:	99 2b 00 02 	stb     r9,2(r11)
	hdr->sadb_msg_len = (sizeof(struct sadb_msg) / sizeof(uint64_t));
    5840:	80 01 00 0c 	lwz     r0,12(r1)
    5844:	39 20 00 02 	li      r9,2
    5848:	7c 0b 03 78 	mr      r11,r0
    584c:	b1 2b 00 04 	sth     r9,4(r11)

	pfkey_broadcast(skb, GFP_ATOMIC, BROADCAST_ALL, NULL, c->net);
    5850:	80 01 00 18 	lwz     r0,24(r1)
    5854:	7c 09 03 78 	mr      r9,r0
    5858:	80 09 00 10 	lwz     r0,16(r9)
    585c:	80 61 00 08 	lwz     r3,8(r1)
    5860:	38 80 00 20 	li      r4,32
    5864:	38 a0 00 00 	li      r5,0
    5868:	38 c0 00 00 	li      r6,0
    586c:	7c 07 03 78 	mr      r7,r0
    5870:	4b ff b4 dd 	bl      d4c <pfkey_broadcast>

	return 0;
    5874:	38 00 00 00 	li      r0,0
}
    5878:	7c 03 03 78 	mr      r3,r0
    587c:	80 01 00 24 	lwz     r0,36(r1)
    5880:	7c 08 03 a6 	mtlr    r0
    5884:	38 21 00 20 	addi    r1,r1,32
    5888:	4e 80 00 20 	blr

0000588c <pfkey_flush>:

static int pfkey_flush(struct sock *sk, struct sk_buff *skb, struct sadb_msg *hdr, void **ext_hdrs)
{
    588c:	94 21 ff a0 	stwu    r1,-96(r1)
    5890:	7c 08 02 a6 	mflr    r0
    5894:	90 01 00 64 	stw     r0,100(r1)
    5898:	90 61 00 48 	stw     r3,72(r1)
    589c:	90 81 00 4c 	stw     r4,76(r1)
    58a0:	90 a1 00 50 	stw     r5,80(r1)
    58a4:	90 c1 00 54 	stw     r6,84(r1)
    58a8:	80 01 00 48 	lwz     r0,72(r1)
    58ac:	90 01 00 18 	stw     r0,24(r1)
    58b0:	3c 00 00 00 	lis     r0,0
    58b4:	30 00 00 00 	addic   r0,r0,0
	struct net *net = sock_net(sk);
    58b8:	90 01 00 0c 	stw     r0,12(r1)
	unsigned proto;
	struct km_event c;
	struct xfrm_audit audit_info;
	int err, err2;

	proto = pfkey_satype2proto(hdr->sadb_msg_satype);
    58bc:	80 01 00 50 	lwz     r0,80(r1)
    58c0:	7c 09 03 78 	mr      r9,r0
    58c4:	88 09 00 03 	lbz     r0,3(r9)
    58c8:	54 00 06 3e 	clrlwi  r0,r0,24
    58cc:	7c 03 03 78 	mr      r3,r0
    58d0:	4b ff be 29 	bl      16f8 <pfkey_satype2proto>
    58d4:	7c 60 1b 78 	mr      r0,r3
    58d8:	90 01 00 10 	stw     r0,16(r1)
	if (proto == 0)
    58dc:	80 01 00 10 	lwz     r0,16(r1)
    58e0:	2f 80 00 00 	cmpwi   cr7,r0,0
    58e4:	40 9e 00 0c 	bne-    cr7,58f0 <pfkey_flush+0x64>
		return -EINVAL;
    58e8:	38 00 ff ea 	li      r0,-22
    58ec:	48 00 00 e4 	b       59d0 <pfkey_flush+0x144>

	audit_info.loginuid = audit_get_loginuid(current);
    58f0:	38 00 ff ff 	li      r0,-1
    58f4:	90 01 00 34 	stw     r0,52(r1)
	audit_info.sessionid = audit_get_sessionid(current);
    58f8:	38 00 ff ff 	li      r0,-1
    58fc:	90 01 00 38 	stw     r0,56(r1)
	audit_info.secid = 0;
    5900:	38 00 00 00 	li      r0,0
    5904:	90 01 00 30 	stw     r0,48(r1)
	err = xfrm_state_flush(net, proto, &audit_info);
    5908:	80 01 00 10 	lwz     r0,16(r1)
    590c:	54 09 06 3e 	clrlwi  r9,r0,24
    5910:	38 01 00 30 	addi    r0,r1,48
    5914:	80 61 00 0c 	lwz     r3,12(r1)
    5918:	7d 24 4b 78 	mr      r4,r9
    591c:	7c 05 03 78 	mr      r5,r0
    5920:	48 00 00 01 	bl      5920 <pfkey_flush+0x94>
    5924:	90 61 00 08 	stw     r3,8(r1)
	err2 = unicast_flush_resp(sk, hdr);
    5928:	80 61 00 48 	lwz     r3,72(r1)
    592c:	80 81 00 50 	lwz     r4,80(r1)
    5930:	4b ff fd 29 	bl      5658 <unicast_flush_resp>
    5934:	90 61 00 14 	stw     r3,20(r1)
	if (err || err2) {
    5938:	80 01 00 08 	lwz     r0,8(r1)
    593c:	2f 80 00 00 	cmpwi   cr7,r0,0
    5940:	40 9e 00 10 	bne-    cr7,5950 <pfkey_flush+0xc4>
    5944:	80 01 00 14 	lwz     r0,20(r1)
    5948:	2f 80 00 00 	cmpwi   cr7,r0,0
    594c:	41 9e 00 38 	beq-    cr7,5984 <pfkey_flush+0xf8>
		if (err == -ESRCH) /* empty table - go quietly */
    5950:	81 21 00 08 	lwz     r9,8(r1)
    5954:	38 00 ff fd 	li      r0,-3
    5958:	7f 89 00 00 	cmpw    cr7,r9,r0
    595c:	40 9e 00 0c 	bne-    cr7,5968 <pfkey_flush+0xdc>
			err = 0;
    5960:	38 00 00 00 	li      r0,0
    5964:	90 01 00 08 	stw     r0,8(r1)
		return err ? err : err2;
    5968:	80 01 00 08 	lwz     r0,8(r1)
    596c:	2f 80 00 00 	cmpwi   cr7,r0,0
    5970:	41 9e 00 0c 	beq-    cr7,597c <pfkey_flush+0xf0>
    5974:	80 01 00 08 	lwz     r0,8(r1)
    5978:	48 00 00 08 	b       5980 <pfkey_flush+0xf4>
    597c:	80 01 00 14 	lwz     r0,20(r1)
    5980:	48 00 00 50 	b       59d0 <pfkey_flush+0x144>
	}

	c.data.proto = proto;
    5984:	80 01 00 10 	lwz     r0,16(r1)
    5988:	90 01 00 1c 	stw     r0,28(r1)
	c.seq = hdr->sadb_msg_seq;
    598c:	80 01 00 50 	lwz     r0,80(r1)
    5990:	7c 09 03 78 	mr      r9,r0
    5994:	80 09 00 08 	lwz     r0,8(r9)
    5998:	90 01 00 20 	stw     r0,32(r1)
	c.pid = hdr->sadb_msg_pid;
    599c:	80 01 00 50 	lwz     r0,80(r1)
    59a0:	7c 09 03 78 	mr      r9,r0
    59a4:	80 09 00 0c 	lwz     r0,12(r9)
    59a8:	90 01 00 24 	stw     r0,36(r1)
	c.event = XFRM_MSG_FLUSHSA;
    59ac:	38 00 00 1c 	li      r0,28
    59b0:	90 01 00 28 	stw     r0,40(r1)
	c.net = net;
    59b4:	80 01 00 0c 	lwz     r0,12(r1)
    59b8:	90 01 00 2c 	stw     r0,44(r1)
	km_state_notify(NULL, &c);
    59bc:	38 01 00 1c 	addi    r0,r1,28
    59c0:	38 60 00 00 	li      r3,0
    59c4:	7c 04 03 78 	mr      r4,r0
    59c8:	48 00 00 01 	bl      59c8 <pfkey_flush+0x13c>

	return 0;
    59cc:	38 00 00 00 	li      r0,0
}
    59d0:	7c 03 03 78 	mr      r3,r0
    59d4:	80 01 00 64 	lwz     r0,100(r1)
    59d8:	7c 08 03 a6 	mtlr    r0
    59dc:	38 21 00 60 	addi    r1,r1,96
    59e0:	4e 80 00 20 	blr

000059e4 <dump_sa>:

static int dump_sa(struct xfrm_state *x, int count, void *ptr)
{
    59e4:	94 21 ff c0 	stwu    r1,-64(r1)
    59e8:	7c 08 02 a6 	mflr    r0
    59ec:	90 01 00 44 	stw     r0,68(r1)
    59f0:	90 61 00 28 	stw     r3,40(r1)
    59f4:	90 81 00 2c 	stw     r4,44(r1)
    59f8:	90 a1 00 30 	stw     r5,48(r1)
	struct pfkey_sock *pfk = ptr;
    59fc:	80 01 00 30 	lwz     r0,48(r1)
    5a00:	90 01 00 08 	stw     r0,8(r1)
	struct sk_buff *out_skb;
	struct sadb_msg *out_hdr;

	if (!pfkey_can_dump(&pfk->sk))
    5a04:	80 01 00 08 	lwz     r0,8(r1)
    5a08:	7c 03 03 78 	mr      r3,r0
    5a0c:	4b ff a5 f5 	bl      0 <pfkey_can_dump>
    5a10:	7c 60 1b 78 	mr      r0,r3
    5a14:	2f 80 00 00 	cmpwi   cr7,r0,0
    5a18:	40 9e 00 0c 	bne-    cr7,5a24 <dump_sa+0x40>
		return -ENOBUFS;
    5a1c:	38 00 ff 97 	li      r0,-105
    5a20:	48 00 01 74 	b       5b94 <dump_sa+0x1b0>
    5a24:	80 01 00 28 	lwz     r0,40(r1)
    5a28:	90 01 00 14 	stw     r0,20(r1)

static inline struct sk_buff *pfkey_xfrm_state2msg(struct xfrm_state *x)
{
	struct sk_buff *skb;

	skb = __pfkey_xfrm_state2msg(x, 1, 3);
    5a2c:	80 61 00 14 	lwz     r3,20(r1)
    5a30:	38 80 00 01 	li      r4,1
    5a34:	38 a0 00 03 	li      r5,3
    5a38:	4b ff c1 e5 	bl      1c1c <__pfkey_xfrm_state2msg>
    5a3c:	90 61 00 18 	stw     r3,24(r1)

	return skb;
    5a40:	80 01 00 18 	lwz     r0,24(r1)
	struct sadb_msg *out_hdr;

	if (!pfkey_can_dump(&pfk->sk))
		return -ENOBUFS;

	out_skb = pfkey_xfrm_state2msg(x);
    5a44:	90 01 00 0c 	stw     r0,12(r1)
    5a48:	80 01 00 0c 	lwz     r0,12(r1)
    5a4c:	90 01 00 1c 	stw     r0,28(r1)
}

static inline long __must_check IS_ERR(const void *ptr)
{
	return IS_ERR_VALUE((unsigned long)ptr);
    5a50:	81 21 00 1c 	lwz     r9,28(r1)
    5a54:	38 00 f0 00 	li      r0,-4096
    5a58:	7f 89 00 40 	cmplw   cr7,r9,r0
    5a5c:	7c 00 00 26 	mfcr    r0
    5a60:	54 00 f7 fe 	rlwinm  r0,r0,30,31,31
	if (IS_ERR(out_skb))
    5a64:	2f 80 00 00 	cmpwi   cr7,r0,0
    5a68:	41 9e 00 14 	beq-    cr7,5a7c <dump_sa+0x98>
    5a6c:	80 01 00 0c 	lwz     r0,12(r1)
    5a70:	90 01 00 20 	stw     r0,32(r1)
	return (void *) error;
}

static inline long __must_check PTR_ERR(const void *ptr)
{
	return (long) ptr;
    5a74:	80 01 00 20 	lwz     r0,32(r1)
		return PTR_ERR(out_skb);
    5a78:	48 00 01 1c 	b       5b94 <dump_sa+0x1b0>

	out_hdr = (struct sadb_msg *) out_skb->data;
    5a7c:	80 01 00 0c 	lwz     r0,12(r1)
    5a80:	7c 09 03 78 	mr      r9,r0
    5a84:	80 09 00 98 	lwz     r0,152(r9)
    5a88:	90 01 00 10 	stw     r0,16(r1)
	out_hdr->sadb_msg_version = pfk->dump.msg_version;
    5a8c:	80 01 00 08 	lwz     r0,8(r1)
    5a90:	7c 0b 03 78 	mr      r11,r0
    5a94:	88 0b 01 50 	lbz     r0,336(r11)
    5a98:	54 09 06 3e 	clrlwi  r9,r0,24
    5a9c:	80 01 00 10 	lwz     r0,16(r1)
    5aa0:	7c 0b 03 78 	mr      r11,r0
    5aa4:	99 2b 00 00 	stb     r9,0(r11)
	out_hdr->sadb_msg_type = SADB_DUMP;
    5aa8:	80 01 00 10 	lwz     r0,16(r1)
    5aac:	39 20 00 0a 	li      r9,10
    5ab0:	7c 0b 03 78 	mr      r11,r0
    5ab4:	99 2b 00 01 	stb     r9,1(r11)
	out_hdr->sadb_msg_satype = pfkey_proto2satype(x->id.proto);
    5ab8:	80 01 00 28 	lwz     r0,40(r1)
    5abc:	7c 09 03 78 	mr      r9,r0
    5ac0:	88 09 00 30 	lbz     r0,48(r9)
    5ac4:	54 00 06 3e 	clrlwi  r0,r0,24
    5ac8:	7c 03 03 78 	mr      r3,r0
    5acc:	4b ff bc a1 	bl      176c <pfkey_proto2satype>
    5ad0:	7c 60 1b 78 	mr      r0,r3
    5ad4:	7c 09 03 78 	mr      r9,r0
    5ad8:	80 01 00 10 	lwz     r0,16(r1)
    5adc:	7c 0b 03 78 	mr      r11,r0
    5ae0:	99 2b 00 03 	stb     r9,3(r11)
	out_hdr->sadb_msg_errno = 0;
    5ae4:	80 01 00 10 	lwz     r0,16(r1)
    5ae8:	39 20 00 00 	li      r9,0
    5aec:	7c 0b 03 78 	mr      r11,r0
    5af0:	99 2b 00 02 	stb     r9,2(r11)
	out_hdr->sadb_msg_reserved = 0;
    5af4:	80 01 00 10 	lwz     r0,16(r1)
    5af8:	39 20 00 00 	li      r9,0
    5afc:	7c 0b 03 78 	mr      r11,r0
    5b00:	b1 2b 00 06 	sth     r9,6(r11)
	out_hdr->sadb_msg_seq = count + 1;
    5b04:	80 01 00 2c 	lwz     r0,44(r1)
    5b08:	30 00 00 01 	addic   r0,r0,1
    5b0c:	7c 09 03 78 	mr      r9,r0
    5b10:	80 01 00 10 	lwz     r0,16(r1)
    5b14:	7c 0b 03 78 	mr      r11,r0
    5b18:	91 2b 00 08 	stw     r9,8(r11)
	out_hdr->sadb_msg_pid = pfk->dump.msg_pid;
    5b1c:	80 01 00 08 	lwz     r0,8(r1)
    5b20:	7c 0b 03 78 	mr      r11,r0
    5b24:	81 2b 01 54 	lwz     r9,340(r11)
    5b28:	80 01 00 10 	lwz     r0,16(r1)
    5b2c:	7c 0b 03 78 	mr      r11,r0
    5b30:	91 2b 00 0c 	stw     r9,12(r11)

	if (pfk->dump.skb)
    5b34:	80 01 00 08 	lwz     r0,8(r1)
    5b38:	7c 09 03 78 	mr      r9,r0
    5b3c:	80 09 01 74 	lwz     r0,372(r9)
    5b40:	2f 80 00 00 	cmpwi   cr7,r0,0
    5b44:	41 9e 00 3c 	beq-    cr7,5b80 <dump_sa+0x19c>
		pfkey_broadcast(pfk->dump.skb, GFP_ATOMIC, BROADCAST_ONE,
    5b48:	80 01 00 08 	lwz     r0,8(r1)
    5b4c:	7c 09 03 78 	mr      r9,r0
    5b50:	81 69 01 74 	lwz     r11,372(r9)
    5b54:	81 21 00 08 	lwz     r9,8(r1)
				&pfk->sk, sock_net(&pfk->sk));
    5b58:	80 01 00 08 	lwz     r0,8(r1)
    5b5c:	90 01 00 24 	stw     r0,36(r1)
    5b60:	3c 00 00 00 	lis     r0,0
    5b64:	30 00 00 00 	addic   r0,r0,0
	out_hdr->sadb_msg_reserved = 0;
	out_hdr->sadb_msg_seq = count + 1;
	out_hdr->sadb_msg_pid = pfk->dump.msg_pid;

	if (pfk->dump.skb)
		pfkey_broadcast(pfk->dump.skb, GFP_ATOMIC, BROADCAST_ONE,
    5b68:	7d 63 5b 78 	mr      r3,r11
    5b6c:	38 80 00 20 	li      r4,32
    5b70:	38 a0 00 01 	li      r5,1
    5b74:	7d 26 4b 78 	mr      r6,r9
    5b78:	7c 07 03 78 	mr      r7,r0
    5b7c:	4b ff b1 d1 	bl      d4c <pfkey_broadcast>
				&pfk->sk, sock_net(&pfk->sk));
	pfk->dump.skb = out_skb;
    5b80:	80 01 00 08 	lwz     r0,8(r1)
    5b84:	81 21 00 0c 	lwz     r9,12(r1)
    5b88:	7c 0b 03 78 	mr      r11,r0
    5b8c:	91 2b 01 74 	stw     r9,372(r11)

	return 0;
    5b90:	38 00 00 00 	li      r0,0
}
    5b94:	7c 03 03 78 	mr      r3,r0
    5b98:	80 01 00 44 	lwz     r0,68(r1)
    5b9c:	7c 08 03 a6 	mtlr    r0
    5ba0:	38 21 00 40 	addi    r1,r1,64
    5ba4:	4e 80 00 20 	blr

00005ba8 <pfkey_dump_sa>:

static int pfkey_dump_sa(struct pfkey_sock *pfk)
{
    5ba8:	94 21 ff e0 	stwu    r1,-32(r1)
    5bac:	7c 08 02 a6 	mflr    r0
    5bb0:	90 01 00 24 	stw     r0,36(r1)
    5bb4:	90 61 00 18 	stw     r3,24(r1)
	struct net *net = sock_net(&pfk->sk);
    5bb8:	80 01 00 18 	lwz     r0,24(r1)
    5bbc:	90 01 00 0c 	stw     r0,12(r1)
    5bc0:	3c 00 00 00 	lis     r0,0
    5bc4:	30 00 00 00 	addic   r0,r0,0
    5bc8:	90 01 00 08 	stw     r0,8(r1)
	return xfrm_state_walk(net, &pfk->dump.u.state, dump_sa, (void *) pfk);
    5bcc:	80 01 00 18 	lwz     r0,24(r1)
    5bd0:	30 00 01 60 	addic   r0,r0,352
    5bd4:	80 61 00 08 	lwz     r3,8(r1)
    5bd8:	7c 04 03 78 	mr      r4,r0
    5bdc:	3c 00 00 00 	lis     r0,0
    5be0:	30 a0 59 e4 	addic   r5,r0,23012
    5be4:	80 c1 00 18 	lwz     r6,24(r1)
    5be8:	48 00 00 01 	bl      5be8 <pfkey_dump_sa+0x40>
    5bec:	7c 60 1b 78 	mr      r0,r3
}
    5bf0:	7c 03 03 78 	mr      r3,r0
    5bf4:	80 01 00 24 	lwz     r0,36(r1)
    5bf8:	7c 08 03 a6 	mtlr    r0
    5bfc:	38 21 00 20 	addi    r1,r1,32
    5c00:	4e 80 00 20 	blr

00005c04 <pfkey_dump_sa_done>:

static void pfkey_dump_sa_done(struct pfkey_sock *pfk)
{
    5c04:	94 21 ff f0 	stwu    r1,-16(r1)
    5c08:	7c 08 02 a6 	mflr    r0
    5c0c:	90 01 00 14 	stw     r0,20(r1)
    5c10:	90 61 00 08 	stw     r3,8(r1)
	xfrm_state_walk_done(&pfk->dump.u.state);
    5c14:	80 01 00 08 	lwz     r0,8(r1)
    5c18:	30 00 01 60 	addic   r0,r0,352
    5c1c:	7c 03 03 78 	mr      r3,r0
    5c20:	48 00 00 01 	bl      5c20 <pfkey_dump_sa_done+0x1c>
}
    5c24:	80 01 00 14 	lwz     r0,20(r1)
    5c28:	7c 08 03 a6 	mtlr    r0
    5c2c:	38 21 00 10 	addi    r1,r1,16
    5c30:	4e 80 00 20 	blr

00005c34 <pfkey_dump>:

static int pfkey_dump(struct sock *sk, struct sk_buff *skb, struct sadb_msg *hdr, void **ext_hdrs)
{
    5c34:	94 21 ff d0 	stwu    r1,-48(r1)
    5c38:	7c 08 02 a6 	mflr    r0
    5c3c:	90 01 00 34 	stw     r0,52(r1)
    5c40:	90 61 00 18 	stw     r3,24(r1)
    5c44:	90 81 00 1c 	stw     r4,28(r1)
    5c48:	90 a1 00 20 	stw     r5,32(r1)
    5c4c:	90 c1 00 24 	stw     r6,36(r1)
    5c50:	80 01 00 18 	lwz     r0,24(r1)
    5c54:	90 01 00 10 	stw     r0,16(r1)
	} dump;
};

static inline struct pfkey_sock *pfkey_sk(struct sock *sk)
{
	return (struct pfkey_sock *)sk;
    5c58:	80 01 00 10 	lwz     r0,16(r1)
}

static int pfkey_dump(struct sock *sk, struct sk_buff *skb, struct sadb_msg *hdr, void **ext_hdrs)
{
	u8 proto;
	struct pfkey_sock *pfk = pfkey_sk(sk);
    5c5c:	90 01 00 08 	stw     r0,8(r1)

	if (pfk->dump.dump != NULL)
    5c60:	80 01 00 08 	lwz     r0,8(r1)
    5c64:	7c 09 03 78 	mr      r9,r0
    5c68:	80 09 01 58 	lwz     r0,344(r9)
    5c6c:	2f 80 00 00 	cmpwi   cr7,r0,0
    5c70:	41 9e 00 0c 	beq-    cr7,5c7c <pfkey_dump+0x48>
		return -EBUSY;
    5c74:	38 00 ff f0 	li      r0,-16
    5c78:	48 00 00 c0 	b       5d38 <pfkey_dump+0x104>

	proto = pfkey_satype2proto(hdr->sadb_msg_satype);
    5c7c:	80 01 00 20 	lwz     r0,32(r1)
    5c80:	7c 0b 03 78 	mr      r11,r0
    5c84:	88 0b 00 03 	lbz     r0,3(r11)
    5c88:	54 00 06 3e 	clrlwi  r0,r0,24
    5c8c:	7c 03 03 78 	mr      r3,r0
    5c90:	4b ff ba 69 	bl      16f8 <pfkey_satype2proto>
    5c94:	7c 60 1b 78 	mr      r0,r3
    5c98:	98 01 00 0c 	stb     r0,12(r1)
	if (proto == 0)
    5c9c:	88 01 00 0c 	lbz     r0,12(r1)
    5ca0:	54 00 06 3e 	clrlwi  r0,r0,24
    5ca4:	2f 80 00 00 	cmpwi   cr7,r0,0
    5ca8:	40 9e 00 0c 	bne-    cr7,5cb4 <pfkey_dump+0x80>
		return -EINVAL;
    5cac:	38 00 ff ea 	li      r0,-22
    5cb0:	48 00 00 88 	b       5d38 <pfkey_dump+0x104>

	pfk->dump.msg_version = hdr->sadb_msg_version;
    5cb4:	80 01 00 20 	lwz     r0,32(r1)
    5cb8:	7c 09 03 78 	mr      r9,r0
    5cbc:	88 09 00 00 	lbz     r0,0(r9)
    5cc0:	54 09 06 3e 	clrlwi  r9,r0,24
    5cc4:	80 01 00 08 	lwz     r0,8(r1)
    5cc8:	7c 0b 03 78 	mr      r11,r0
    5ccc:	99 2b 01 50 	stb     r9,336(r11)
	pfk->dump.msg_pid = hdr->sadb_msg_pid;
    5cd0:	80 01 00 20 	lwz     r0,32(r1)
    5cd4:	7c 0b 03 78 	mr      r11,r0
    5cd8:	81 2b 00 0c 	lwz     r9,12(r11)
    5cdc:	80 01 00 08 	lwz     r0,8(r1)
    5ce0:	7c 0b 03 78 	mr      r11,r0
    5ce4:	91 2b 01 54 	stw     r9,340(r11)
	pfk->dump.dump = pfkey_dump_sa;
    5ce8:	80 01 00 08 	lwz     r0,8(r1)
    5cec:	3d 20 00 00 	lis     r9,0
    5cf0:	39 29 5b a8 	addi    r9,r9,23464
    5cf4:	7c 0b 03 78 	mr      r11,r0
    5cf8:	91 2b 01 58 	stw     r9,344(r11)
	pfk->dump.done = pfkey_dump_sa_done;
    5cfc:	80 01 00 08 	lwz     r0,8(r1)
    5d00:	3d 20 00 00 	lis     r9,0
    5d04:	39 29 5c 04 	addi    r9,r9,23556
    5d08:	7c 0b 03 78 	mr      r11,r0
    5d0c:	91 2b 01 5c 	stw     r9,348(r11)
	xfrm_state_walk_init(&pfk->dump.u.state, proto);
    5d10:	80 01 00 08 	lwz     r0,8(r1)
    5d14:	31 20 01 60 	addic   r9,r0,352
    5d18:	88 01 00 0c 	lbz     r0,12(r1)
    5d1c:	54 00 06 3e 	clrlwi  r0,r0,24
    5d20:	7d 23 4b 78 	mr      r3,r9
    5d24:	7c 04 03 78 	mr      r4,r0
    5d28:	48 00 00 01 	bl      5d28 <pfkey_dump+0xf4>

	return pfkey_do_dump(pfk);
    5d2c:	80 61 00 08 	lwz     r3,8(r1)
    5d30:	4b ff b2 e1 	bl      1010 <pfkey_do_dump>
    5d34:	7c 60 1b 78 	mr      r0,r3
}
    5d38:	7c 03 03 78 	mr      r3,r0
    5d3c:	80 01 00 34 	lwz     r0,52(r1)
    5d40:	7c 08 03 a6 	mtlr    r0
    5d44:	38 21 00 30 	addi    r1,r1,48
    5d48:	4e 80 00 20 	blr

00005d4c <pfkey_promisc>:

static int pfkey_promisc(struct sock *sk, struct sk_buff *skb, struct sadb_msg *hdr, void **ext_hdrs)
{
    5d4c:	94 21 ff d0 	stwu    r1,-48(r1)
    5d50:	7c 08 02 a6 	mflr    r0
    5d54:	90 01 00 34 	stw     r0,52(r1)
    5d58:	90 61 00 18 	stw     r3,24(r1)
    5d5c:	90 81 00 1c 	stw     r4,28(r1)
    5d60:	90 a1 00 20 	stw     r5,32(r1)
    5d64:	90 c1 00 24 	stw     r6,36(r1)
    5d68:	80 01 00 18 	lwz     r0,24(r1)
    5d6c:	90 01 00 10 	stw     r0,16(r1)
	} dump;
};

static inline struct pfkey_sock *pfkey_sk(struct sock *sk)
{
	return (struct pfkey_sock *)sk;
    5d70:	80 01 00 10 	lwz     r0,16(r1)
	return pfkey_do_dump(pfk);
}

static int pfkey_promisc(struct sock *sk, struct sk_buff *skb, struct sadb_msg *hdr, void **ext_hdrs)
{
	struct pfkey_sock *pfk = pfkey_sk(sk);
    5d74:	90 01 00 08 	stw     r0,8(r1)
	int satype = hdr->sadb_msg_satype;
    5d78:	80 01 00 20 	lwz     r0,32(r1)
    5d7c:	7c 09 03 78 	mr      r9,r0
    5d80:	88 09 00 03 	lbz     r0,3(r9)
    5d84:	54 00 06 3e 	clrlwi  r0,r0,24
    5d88:	90 01 00 0c 	stw     r0,12(r1)

	if (hdr->sadb_msg_len == (sizeof(*hdr) / sizeof(uint64_t))) {
    5d8c:	80 01 00 20 	lwz     r0,32(r1)
    5d90:	7c 0b 03 78 	mr      r11,r0
    5d94:	a0 0b 00 04 	lhz     r0,4(r11)
    5d98:	54 00 04 3e 	clrlwi  r0,r0,16
    5d9c:	2f 80 00 02 	cmpwi   cr7,r0,2
    5da0:	40 9e 00 44 	bne-    cr7,5de4 <pfkey_promisc+0x98>
		/* XXX we mangle packet... */
		hdr->sadb_msg_errno = 0;
    5da4:	80 01 00 20 	lwz     r0,32(r1)
    5da8:	39 20 00 00 	li      r9,0
    5dac:	7c 0b 03 78 	mr      r11,r0
    5db0:	99 2b 00 02 	stb     r9,2(r11)
		if (satype != 0 && satype != 1)
    5db4:	80 01 00 0c 	lwz     r0,12(r1)
    5db8:	2f 80 00 00 	cmpwi   cr7,r0,0
    5dbc:	41 9e 00 18 	beq-    cr7,5dd4 <pfkey_promisc+0x88>
    5dc0:	80 01 00 0c 	lwz     r0,12(r1)
    5dc4:	2f 80 00 01 	cmpwi   cr7,r0,1
    5dc8:	41 9e 00 0c 	beq-    cr7,5dd4 <pfkey_promisc+0x88>
			return -EINVAL;
    5dcc:	38 00 ff ea 	li      r0,-22
    5dd0:	48 00 00 50 	b       5e20 <pfkey_promisc+0xd4>
		pfk->promisc = satype;
    5dd4:	80 01 00 08 	lwz     r0,8(r1)
    5dd8:	81 21 00 0c 	lwz     r9,12(r1)
    5ddc:	7c 0b 03 78 	mr      r11,r0
    5de0:	91 2b 01 4c 	stw     r9,332(r11)
	}
	pfkey_broadcast(skb_clone(skb, GFP_KERNEL), GFP_KERNEL, BROADCAST_ALL, NULL, sock_net(sk));
    5de4:	80 61 00 1c 	lwz     r3,28(r1)
    5de8:	38 80 00 d0 	li      r4,208
    5dec:	48 00 00 01 	bl      5dec <pfkey_promisc+0xa0>
    5df0:	7c 69 1b 78 	mr      r9,r3
    5df4:	80 01 00 18 	lwz     r0,24(r1)
    5df8:	90 01 00 14 	stw     r0,20(r1)
    5dfc:	3c 00 00 00 	lis     r0,0
    5e00:	30 00 00 00 	addic   r0,r0,0
    5e04:	7d 23 4b 78 	mr      r3,r9
    5e08:	38 80 00 d0 	li      r4,208
    5e0c:	38 a0 00 00 	li      r5,0
    5e10:	38 c0 00 00 	li      r6,0
    5e14:	7c 07 03 78 	mr      r7,r0
    5e18:	4b ff af 35 	bl      d4c <pfkey_broadcast>
	return 0;
    5e1c:	38 00 00 00 	li      r0,0
}
    5e20:	7c 03 03 78 	mr      r3,r0
    5e24:	80 01 00 34 	lwz     r0,52(r1)
    5e28:	7c 08 03 a6 	mtlr    r0
    5e2c:	38 21 00 30 	addi    r1,r1,48
    5e30:	4e 80 00 20 	blr

00005e34 <check_reqid>:

static int check_reqid(struct xfrm_policy *xp, int dir, int count, void *ptr)
{
    5e34:	94 21 ff d0 	stwu    r1,-48(r1)
    5e38:	90 61 00 18 	stw     r3,24(r1)
    5e3c:	90 81 00 1c 	stw     r4,28(r1)
    5e40:	90 a1 00 20 	stw     r5,32(r1)
    5e44:	90 c1 00 24 	stw     r6,36(r1)
	int i;
	u32 reqid = *(u32*)ptr;
    5e48:	80 01 00 24 	lwz     r0,36(r1)
    5e4c:	7c 09 03 78 	mr      r9,r0
    5e50:	80 09 00 00 	lwz     r0,0(r9)
    5e54:	90 01 00 0c 	stw     r0,12(r1)

	for (i=0; i<xp->xfrm_nr; i++) {
    5e58:	38 00 00 00 	li      r0,0
    5e5c:	90 01 00 08 	stw     r0,8(r1)
    5e60:	48 00 00 40 	b       5ea0 <check_reqid+0x6c>
		if (xp->xfrm_vec[i].reqid == reqid)
    5e64:	81 21 00 18 	lwz     r9,24(r1)
    5e68:	80 01 00 08 	lwz     r0,8(r1)
    5e6c:	54 00 30 32 	rlwinm  r0,r0,6,0,25
    5e70:	7c 09 02 14 	add     r0,r9,r0
    5e74:	30 00 01 10 	addic   r0,r0,272
    5e78:	7c 0b 03 78 	mr      r11,r0
    5e7c:	81 2b 00 14 	lwz     r9,20(r11)
    5e80:	80 01 00 0c 	lwz     r0,12(r1)
    5e84:	7f 89 00 00 	cmpw    cr7,r9,r0
    5e88:	40 9e 00 0c 	bne-    cr7,5e94 <check_reqid+0x60>
			return -EEXIST;
    5e8c:	38 00 ff ef 	li      r0,-17
    5e90:	48 00 00 34 	b       5ec4 <check_reqid+0x90>
static int check_reqid(struct xfrm_policy *xp, int dir, int count, void *ptr)
{
	int i;
	u32 reqid = *(u32*)ptr;

	for (i=0; i<xp->xfrm_nr; i++) {
    5e94:	80 01 00 08 	lwz     r0,8(r1)
    5e98:	30 00 00 01 	addic   r0,r0,1
    5e9c:	90 01 00 08 	stw     r0,8(r1)
    5ea0:	80 01 00 18 	lwz     r0,24(r1)
    5ea4:	7c 09 03 78 	mr      r9,r0
    5ea8:	88 09 00 ef 	lbz     r0,239(r9)
    5eac:	54 00 06 3e 	clrlwi  r0,r0,24
    5eb0:	7c 09 03 78 	mr      r9,r0
    5eb4:	80 01 00 08 	lwz     r0,8(r1)
    5eb8:	7f 89 00 00 	cmpw    cr7,r9,r0
    5ebc:	41 9d ff a8 	bgt+    cr7,5e64 <check_reqid+0x30>
		if (xp->xfrm_vec[i].reqid == reqid)
			return -EEXIST;
	}
	return 0;
    5ec0:	38 00 00 00 	li      r0,0
}
    5ec4:	7c 03 03 78 	mr      r3,r0
    5ec8:	38 21 00 30 	addi    r1,r1,48
    5ecc:	4e 80 00 20 	blr

00005ed0 <gen_reqid>:

static u32 gen_reqid(struct net *net)
{
    5ed0:	94 21 ff d0 	stwu    r1,-48(r1)
    5ed4:	7c 08 02 a6 	mflr    r0
    5ed8:	90 01 00 34 	stw     r0,52(r1)
    5edc:	90 61 00 28 	stw     r3,40(r1)
	struct xfrm_policy_walk walk;
	u32 start;
	int rc;
	static u32 reqid = IPSEC_MANUAL_REQID_MAX;

	start = reqid;
    5ee0:	3c 00 00 00 	lis     r0,0
    5ee4:	7c 09 03 78 	mr      r9,r0
    5ee8:	80 09 01 90 	lwz     r0,400(r9)
    5eec:	90 01 00 08 	stw     r0,8(r1)
	do {
		++reqid;
    5ef0:	3c 00 00 00 	lis     r0,0
    5ef4:	7c 0b 03 78 	mr      r11,r0
    5ef8:	80 0b 01 90 	lwz     r0,400(r11)
    5efc:	31 20 00 01 	addic   r9,r0,1
    5f00:	3c 00 00 00 	lis     r0,0
    5f04:	7c 0b 03 78 	mr      r11,r0
    5f08:	91 2b 01 90 	stw     r9,400(r11)
		if (reqid == 0)
    5f0c:	3c 00 00 00 	lis     r0,0
    5f10:	7c 09 03 78 	mr      r9,r0
    5f14:	80 09 01 90 	lwz     r0,400(r9)
    5f18:	2f 80 00 00 	cmpwi   cr7,r0,0
    5f1c:	40 9e 00 14 	bne-    cr7,5f30 <gen_reqid+0x60>
			reqid = IPSEC_MANUAL_REQID_MAX+1;
    5f20:	3c 00 00 00 	lis     r0,0
    5f24:	39 20 40 00 	li      r9,16384
    5f28:	7c 0b 03 78 	mr      r11,r0
    5f2c:	91 2b 01 90 	stw     r9,400(r11)
		xfrm_policy_walk_init(&walk, XFRM_POLICY_TYPE_MAIN);
    5f30:	38 01 00 10 	addi    r0,r1,16
    5f34:	7c 03 03 78 	mr      r3,r0
    5f38:	38 80 00 00 	li      r4,0
    5f3c:	48 00 00 01 	bl      5f3c <gen_reqid+0x6c>
		rc = xfrm_policy_walk(net, &walk, check_reqid, (void*)&reqid);
    5f40:	38 01 00 10 	addi    r0,r1,16
    5f44:	80 61 00 28 	lwz     r3,40(r1)
    5f48:	7c 04 03 78 	mr      r4,r0
    5f4c:	3c 00 00 00 	lis     r0,0
    5f50:	30 a0 5e 34 	addic   r5,r0,24116
    5f54:	3c 00 00 00 	lis     r0,0
    5f58:	30 c0 01 90 	addic   r6,r0,400
    5f5c:	48 00 00 01 	bl      5f5c <gen_reqid+0x8c>
    5f60:	90 61 00 0c 	stw     r3,12(r1)
		xfrm_policy_walk_done(&walk);
    5f64:	38 01 00 10 	addi    r0,r1,16
    5f68:	7c 03 03 78 	mr      r3,r0
    5f6c:	48 00 00 01 	bl      5f6c <gen_reqid+0x9c>
		if (rc != -EEXIST)
    5f70:	81 21 00 0c 	lwz     r9,12(r1)
    5f74:	38 00 ff ef 	li      r0,-17
    5f78:	7f 89 00 00 	cmpw    cr7,r9,r0
    5f7c:	41 9e 00 14 	beq-    cr7,5f90 <gen_reqid+0xc0>
			return reqid;
    5f80:	3c 00 00 00 	lis     r0,0
    5f84:	7c 09 03 78 	mr      r9,r0
    5f88:	80 09 01 90 	lwz     r0,400(r9)
    5f8c:	48 00 00 20 	b       5fac <gen_reqid+0xdc>
	} while (reqid != start);
    5f90:	3c 00 00 00 	lis     r0,0
    5f94:	7c 0b 03 78 	mr      r11,r0
    5f98:	81 2b 01 90 	lwz     r9,400(r11)
    5f9c:	80 01 00 08 	lwz     r0,8(r1)
    5fa0:	7f 89 00 00 	cmpw    cr7,r9,r0
    5fa4:	40 9e ff 4c 	bne+    cr7,5ef0 <gen_reqid+0x20>
	return 0;
    5fa8:	38 00 00 00 	li      r0,0
}
    5fac:	7c 03 03 78 	mr      r3,r0
    5fb0:	80 01 00 34 	lwz     r0,52(r1)
    5fb4:	7c 08 03 a6 	mtlr    r0
    5fb8:	38 21 00 30 	addi    r1,r1,48
    5fbc:	4e 80 00 20 	blr

00005fc0 <parse_ipsecrequest>:

static int
parse_ipsecrequest(struct xfrm_policy *xp, struct sadb_x_ipsecrequest *rq)
{
    5fc0:	94 21 ff c0 	stwu    r1,-64(r1)
    5fc4:	7c 08 02 a6 	mflr    r0
    5fc8:	90 01 00 44 	stw     r0,68(r1)
    5fcc:	90 61 00 38 	stw     r3,56(r1)
    5fd0:	90 81 00 3c 	stw     r4,60(r1)
    5fd4:	80 01 00 38 	lwz     r0,56(r1)
    5fd8:	90 01 00 28 	stw     r0,40(r1)
	struct xfrm_tmpl       	xfrm_vec[XFRM_MAX_DEPTH];
};

static inline struct net *xp_net(struct xfrm_policy *xp)
{
	return read_pnet(&xp->xp_net);
    5fdc:	3c 00 00 00 	lis     r0,0
    5fe0:	30 00 00 00 	addic   r0,r0,0
	struct net *net = xp_net(xp);
    5fe4:	90 01 00 08 	stw     r0,8(r1)
	struct xfrm_tmpl *t = xp->xfrm_vec + xp->xfrm_nr;
    5fe8:	80 01 00 38 	lwz     r0,56(r1)
    5fec:	31 20 00 f8 	addic   r9,r0,248
    5ff0:	80 01 00 38 	lwz     r0,56(r1)
    5ff4:	7c 0b 03 78 	mr      r11,r0
    5ff8:	88 0b 00 ef 	lbz     r0,239(r11)
    5ffc:	54 00 06 3e 	clrlwi  r0,r0,24
    6000:	54 00 30 32 	rlwinm  r0,r0,6,0,25
    6004:	7c 09 02 14 	add     r0,r9,r0
    6008:	90 01 00 0c 	stw     r0,12(r1)
	int mode;

	if (xp->xfrm_nr >= XFRM_MAX_DEPTH)
    600c:	80 01 00 38 	lwz     r0,56(r1)
    6010:	7c 09 03 78 	mr      r9,r0
    6014:	88 09 00 ef 	lbz     r0,239(r9)
    6018:	54 00 06 3e 	clrlwi  r0,r0,24
    601c:	2b 80 00 05 	cmplwi  cr7,r0,5
    6020:	40 9d 00 0c 	ble-    cr7,602c <parse_ipsecrequest+0x6c>
		return -ELOOP;
    6024:	38 00 ff d8 	li      r0,-40
    6028:	48 00 02 c4 	b       62ec <parse_ipsecrequest+0x32c>

	if (rq->sadb_x_ipsecrequest_mode == 0)
    602c:	80 01 00 3c 	lwz     r0,60(r1)
    6030:	7c 0b 03 78 	mr      r11,r0
    6034:	88 0b 00 04 	lbz     r0,4(r11)
    6038:	54 00 06 3e 	clrlwi  r0,r0,24
    603c:	2f 80 00 00 	cmpwi   cr7,r0,0
    6040:	40 9e 00 0c 	bne-    cr7,604c <parse_ipsecrequest+0x8c>
		return -EINVAL;
    6044:	38 00 ff ea 	li      r0,-22
    6048:	48 00 02 a4 	b       62ec <parse_ipsecrequest+0x32c>

	t->id.proto = rq->sadb_x_ipsecrequest_proto; /* XXX check proto */
    604c:	80 01 00 3c 	lwz     r0,60(r1)
    6050:	7c 09 03 78 	mr      r9,r0
    6054:	a0 09 00 02 	lhz     r0,2(r9)
    6058:	54 00 04 3e 	clrlwi  r0,r0,16
    605c:	54 09 06 3e 	clrlwi  r9,r0,24
    6060:	80 01 00 0c 	lwz     r0,12(r1)
    6064:	7c 0b 03 78 	mr      r11,r0
    6068:	99 2b 00 14 	stb     r9,20(r11)
	if ((mode = pfkey_mode_to_xfrm(rq->sadb_x_ipsecrequest_mode)) < 0)
    606c:	80 01 00 3c 	lwz     r0,60(r1)
    6070:	7c 09 03 78 	mr      r9,r0
    6074:	88 09 00 04 	lbz     r0,4(r9)
    6078:	54 00 06 3e 	clrlwi  r0,r0,24
    607c:	90 01 00 20 	stw     r0,32(r1)
	}
}

static inline int pfkey_mode_to_xfrm(int mode)
{
	switch(mode) {
    6080:	80 01 00 20 	lwz     r0,32(r1)
    6084:	2f 80 00 02 	cmpwi   cr7,r0,2
    6088:	41 9e 00 2c 	beq-    cr7,60b4 <parse_ipsecrequest+0xf4>
    608c:	2f 80 00 02 	cmpwi   cr7,r0,2
    6090:	41 9d 00 10 	bgt-    cr7,60a0 <parse_ipsecrequest+0xe0>
    6094:	2f 80 00 00 	cmpwi   cr7,r0,0
    6098:	41 9c 00 2c 	blt-    cr7,60c4 <parse_ipsecrequest+0x104>
    609c:	48 00 00 10 	b       60ac <parse_ipsecrequest+0xec>
    60a0:	2f 80 00 03 	cmpwi   cr7,r0,3
    60a4:	41 9e 00 18 	beq-    cr7,60bc <parse_ipsecrequest+0xfc>
    60a8:	48 00 00 1c 	b       60c4 <parse_ipsecrequest+0x104>
	case IPSEC_MODE_ANY:	/*XXX*/
	case IPSEC_MODE_TRANSPORT:
		return XFRM_MODE_TRANSPORT;
    60ac:	38 00 00 00 	li      r0,0
    60b0:	48 00 00 18 	b       60c8 <parse_ipsecrequest+0x108>
	case IPSEC_MODE_TUNNEL:
		return XFRM_MODE_TUNNEL;
    60b4:	38 00 00 01 	li      r0,1
    60b8:	48 00 00 10 	b       60c8 <parse_ipsecrequest+0x108>
	case IPSEC_MODE_BEET:
		return XFRM_MODE_BEET;
    60bc:	38 00 00 04 	li      r0,4
    60c0:	48 00 00 08 	b       60c8 <parse_ipsecrequest+0x108>
	default:
		return -1;
    60c4:	38 00 ff ff 	li      r0,-1

	if (rq->sadb_x_ipsecrequest_mode == 0)
		return -EINVAL;

	t->id.proto = rq->sadb_x_ipsecrequest_proto; /* XXX check proto */
	if ((mode = pfkey_mode_to_xfrm(rq->sadb_x_ipsecrequest_mode)) < 0)
    60c8:	90 01 00 10 	stw     r0,16(r1)
    60cc:	80 01 00 10 	lwz     r0,16(r1)
    60d0:	2f 80 00 00 	cmpwi   cr7,r0,0
    60d4:	40 9c 00 0c 	bge-    cr7,60e0 <parse_ipsecrequest+0x120>
		return -EINVAL;
    60d8:	38 00 ff ea 	li      r0,-22
    60dc:	48 00 02 10 	b       62ec <parse_ipsecrequest+0x32c>
	t->mode = mode;
    60e0:	80 01 00 10 	lwz     r0,16(r1)
    60e4:	54 09 06 3e 	clrlwi  r9,r0,24
    60e8:	80 01 00 0c 	lwz     r0,12(r1)
    60ec:	7c 0b 03 78 	mr      r11,r0
    60f0:	99 2b 00 30 	stb     r9,48(r11)
	if (rq->sadb_x_ipsecrequest_level == IPSEC_LEVEL_USE)
    60f4:	80 01 00 3c 	lwz     r0,60(r1)
    60f8:	7c 09 03 78 	mr      r9,r0
    60fc:	88 09 00 05 	lbz     r0,5(r9)
    6100:	54 00 06 3e 	clrlwi  r0,r0,24
    6104:	2f 80 00 01 	cmpwi   cr7,r0,1
    6108:	40 9e 00 18 	bne-    cr7,6120 <parse_ipsecrequest+0x160>
		t->optional = 1;
    610c:	80 01 00 0c 	lwz     r0,12(r1)
    6110:	39 20 00 01 	li      r9,1
    6114:	7c 0b 03 78 	mr      r11,r0
    6118:	99 2b 00 32 	stb     r9,50(r11)
    611c:	48 00 00 a0 	b       61bc <parse_ipsecrequest+0x1fc>
	else if (rq->sadb_x_ipsecrequest_level == IPSEC_LEVEL_UNIQUE) {
    6120:	80 01 00 3c 	lwz     r0,60(r1)
    6124:	7c 09 03 78 	mr      r9,r0
    6128:	88 09 00 05 	lbz     r0,5(r9)
    612c:	54 00 06 3e 	clrlwi  r0,r0,24
    6130:	2f 80 00 03 	cmpwi   cr7,r0,3
    6134:	40 9e 00 88 	bne-    cr7,61bc <parse_ipsecrequest+0x1fc>
		t->reqid = rq->sadb_x_ipsecrequest_reqid;
    6138:	80 01 00 3c 	lwz     r0,60(r1)
    613c:	7c 0b 03 78 	mr      r11,r0
    6140:	81 2b 00 08 	lwz     r9,8(r11)
    6144:	80 01 00 0c 	lwz     r0,12(r1)
    6148:	7c 0b 03 78 	mr      r11,r0
    614c:	91 2b 00 2c 	stw     r9,44(r11)
		if (t->reqid > IPSEC_MANUAL_REQID_MAX)
    6150:	80 01 00 0c 	lwz     r0,12(r1)
    6154:	7c 09 03 78 	mr      r9,r0
    6158:	80 09 00 2c 	lwz     r0,44(r9)
    615c:	2b 80 3f ff 	cmplwi  cr7,r0,16383
    6160:	40 9d 00 14 	ble-    cr7,6174 <parse_ipsecrequest+0x1b4>
			t->reqid = 0;
    6164:	80 01 00 0c 	lwz     r0,12(r1)
    6168:	39 20 00 00 	li      r9,0
    616c:	7c 0b 03 78 	mr      r11,r0
    6170:	91 2b 00 2c 	stw     r9,44(r11)
		if (!t->reqid && !(t->reqid = gen_reqid(net)))
    6174:	80 01 00 0c 	lwz     r0,12(r1)
    6178:	7c 09 03 78 	mr      r9,r0
    617c:	80 09 00 2c 	lwz     r0,44(r9)
    6180:	2f 80 00 00 	cmpwi   cr7,r0,0
    6184:	40 9e 00 38 	bne-    cr7,61bc <parse_ipsecrequest+0x1fc>
    6188:	80 61 00 08 	lwz     r3,8(r1)
    618c:	4b ff fd 45 	bl      5ed0 <gen_reqid>
    6190:	7c 69 1b 78 	mr      r9,r3
    6194:	80 01 00 0c 	lwz     r0,12(r1)
    6198:	7c 0b 03 78 	mr      r11,r0
    619c:	91 2b 00 2c 	stw     r9,44(r11)
    61a0:	80 01 00 0c 	lwz     r0,12(r1)
    61a4:	7c 09 03 78 	mr      r9,r0
    61a8:	80 09 00 2c 	lwz     r0,44(r9)
    61ac:	2f 80 00 00 	cmpwi   cr7,r0,0
    61b0:	40 9e 00 0c 	bne-    cr7,61bc <parse_ipsecrequest+0x1fc>
			return -ENOBUFS;
    61b4:	38 00 ff 97 	li      r0,-105
    61b8:	48 00 01 34 	b       62ec <parse_ipsecrequest+0x32c>
	}

	/* addresses present only in tunnel mode */
	if (t->mode == XFRM_MODE_TUNNEL) {
    61bc:	80 01 00 0c 	lwz     r0,12(r1)
    61c0:	7c 0b 03 78 	mr      r11,r0
    61c4:	88 0b 00 30 	lbz     r0,48(r11)
    61c8:	54 00 06 3e 	clrlwi  r0,r0,24
    61cc:	2f 80 00 01 	cmpwi   cr7,r0,1
    61d0:	40 9e 00 c8 	bne-    cr7,6298 <parse_ipsecrequest+0x2d8>
		u8 *sa = (u8 *) (rq + 1);
    61d4:	80 01 00 3c 	lwz     r0,60(r1)
    61d8:	30 00 00 10 	addic   r0,r0,16
    61dc:	90 01 00 14 	stw     r0,20(r1)
		int family, socklen;

		family = pfkey_sockaddr_extract((struct sockaddr *)sa,
    61e0:	80 01 00 0c 	lwz     r0,12(r1)
    61e4:	30 00 00 18 	addic   r0,r0,24
    61e8:	80 61 00 14 	lwz     r3,20(r1)
    61ec:	7c 04 03 78 	mr      r4,r0
    61f0:	4b ff b6 45 	bl      1834 <pfkey_sockaddr_extract>
    61f4:	90 61 00 18 	stw     r3,24(r1)
						&t->saddr);
		if (!family)
    61f8:	80 01 00 18 	lwz     r0,24(r1)
    61fc:	2f 80 00 00 	cmpwi   cr7,r0,0
    6200:	40 9e 00 0c 	bne-    cr7,620c <parse_ipsecrequest+0x24c>
			return -EINVAL;
    6204:	38 00 ff ea 	li      r0,-22
    6208:	48 00 00 e4 	b       62ec <parse_ipsecrequest+0x32c>

		socklen = pfkey_sockaddr_len(family);
    620c:	80 01 00 18 	lwz     r0,24(r1)
    6210:	54 00 04 3e 	clrlwi  r0,r0,16
    6214:	b0 01 00 24 	sth     r0,36(r1)
	return proto ? proto : IPSEC_PROTO_ANY;
}

static inline int pfkey_sockaddr_len(sa_family_t family)
{
	switch (family) {
    6218:	a0 01 00 24 	lhz     r0,36(r1)
    621c:	54 00 04 3e 	clrlwi  r0,r0,16
    6220:	2f 80 00 02 	cmpwi   cr7,r0,2
    6224:	41 9e 00 10 	beq-    cr7,6234 <parse_ipsecrequest+0x274>
    6228:	2f 80 00 0a 	cmpwi   cr7,r0,10
    622c:	41 9e 00 10 	beq-    cr7,623c <parse_ipsecrequest+0x27c>
    6230:	48 00 00 14 	b       6244 <parse_ipsecrequest+0x284>
	case AF_INET:
		return sizeof(struct sockaddr_in);
    6234:	38 00 00 10 	li      r0,16
    6238:	48 00 00 10 	b       6248 <parse_ipsecrequest+0x288>
#if defined(CONFIG_IPV6) || defined(CONFIG_IPV6_MODULE)
	case AF_INET6:
		return sizeof(struct sockaddr_in6);
    623c:	38 00 00 1c 	li      r0,28
    6240:	48 00 00 08 	b       6248 <parse_ipsecrequest+0x288>
#endif
	}
	return 0;
    6244:	38 00 00 00 	li      r0,0
		family = pfkey_sockaddr_extract((struct sockaddr *)sa,
						&t->saddr);
		if (!family)
			return -EINVAL;

		socklen = pfkey_sockaddr_len(family);
    6248:	90 01 00 1c 	stw     r0,28(r1)
		if (pfkey_sockaddr_extract((struct sockaddr *)(sa + socklen),
    624c:	80 01 00 1c 	lwz     r0,28(r1)
    6250:	81 21 00 14 	lwz     r9,20(r1)
    6254:	7d 29 02 14 	add     r9,r9,r0
    6258:	80 01 00 0c 	lwz     r0,12(r1)
    625c:	7d 23 4b 78 	mr      r3,r9
    6260:	7c 04 03 78 	mr      r4,r0
    6264:	4b ff b5 d1 	bl      1834 <pfkey_sockaddr_extract>
    6268:	7c 69 1b 78 	mr      r9,r3
    626c:	80 01 00 18 	lwz     r0,24(r1)
    6270:	7f 89 00 00 	cmpw    cr7,r9,r0
    6274:	41 9e 00 0c 	beq-    cr7,6280 <parse_ipsecrequest+0x2c0>
					   &t->id.daddr) != family)
			return -EINVAL;
    6278:	38 00 ff ea 	li      r0,-22
    627c:	48 00 00 70 	b       62ec <parse_ipsecrequest+0x32c>
		t->encap_family = family;
    6280:	80 01 00 18 	lwz     r0,24(r1)
    6284:	54 09 04 3e 	clrlwi  r9,r0,16
    6288:	80 01 00 0c 	lwz     r0,12(r1)
    628c:	7c 0b 03 78 	mr      r11,r0
    6290:	b1 2b 00 28 	sth     r9,40(r11)
    6294:	48 00 00 20 	b       62b4 <parse_ipsecrequest+0x2f4>
	} else
		t->encap_family = xp->family;
    6298:	80 01 00 38 	lwz     r0,56(r1)
    629c:	7c 09 03 78 	mr      r9,r0
    62a0:	a0 09 00 f0 	lhz     r0,240(r9)
    62a4:	54 09 04 3e 	clrlwi  r9,r0,16
    62a8:	80 01 00 0c 	lwz     r0,12(r1)
    62ac:	7c 0b 03 78 	mr      r11,r0
    62b0:	b1 2b 00 28 	sth     r9,40(r11)

	/* No way to set this via kame pfkey */
	t->allalgs = 1;
    62b4:	80 01 00 0c 	lwz     r0,12(r1)
    62b8:	39 20 00 01 	li      r9,1
    62bc:	7c 0b 03 78 	mr      r11,r0
    62c0:	99 2b 00 33 	stb     r9,51(r11)
	xp->xfrm_nr++;
    62c4:	80 01 00 38 	lwz     r0,56(r1)
    62c8:	7c 09 03 78 	mr      r9,r0
    62cc:	88 09 00 ef 	lbz     r0,239(r9)
    62d0:	54 00 06 3e 	clrlwi  r0,r0,24
    62d4:	30 00 00 01 	addic   r0,r0,1
    62d8:	54 09 06 3e 	clrlwi  r9,r0,24
    62dc:	80 01 00 38 	lwz     r0,56(r1)
    62e0:	7c 0b 03 78 	mr      r11,r0
    62e4:	99 2b 00 ef 	stb     r9,239(r11)
	return 0;
    62e8:	38 00 00 00 	li      r0,0
}
    62ec:	7c 03 03 78 	mr      r3,r0
    62f0:	80 01 00 44 	lwz     r0,68(r1)
    62f4:	7c 08 03 a6 	mtlr    r0
    62f8:	38 21 00 40 	addi    r1,r1,64
    62fc:	4e 80 00 20 	blr

00006300 <parse_ipsecrequests>:

static int
parse_ipsecrequests(struct xfrm_policy *xp, struct sadb_x_policy *pol)
{
    6300:	94 21 ff e0 	stwu    r1,-32(r1)
    6304:	7c 08 02 a6 	mflr    r0
    6308:	90 01 00 24 	stw     r0,36(r1)
    630c:	90 61 00 18 	stw     r3,24(r1)
    6310:	90 81 00 1c 	stw     r4,28(r1)
	int err;
	int len = pol->sadb_x_policy_len*8 - sizeof(struct sadb_x_policy);
    6314:	80 01 00 1c 	lwz     r0,28(r1)
    6318:	7c 09 03 78 	mr      r9,r0
    631c:	a0 09 00 00 	lhz     r0,0(r9)
    6320:	54 00 04 3e 	clrlwi  r0,r0,16
    6324:	3d 20 20 00 	lis     r9,8192
    6328:	7c 00 4a 14 	add     r0,r0,r9
    632c:	30 00 ff fe 	addic   r0,r0,-2
    6330:	54 00 18 38 	rlwinm  r0,r0,3,0,28
    6334:	90 01 00 08 	stw     r0,8(r1)
	struct sadb_x_ipsecrequest *rq = (void*)(pol+1);
    6338:	80 01 00 1c 	lwz     r0,28(r1)
    633c:	30 00 00 10 	addic   r0,r0,16
    6340:	90 01 00 0c 	stw     r0,12(r1)

	while (len >= sizeof(struct sadb_x_ipsecrequest)) {
    6344:	48 00 00 60 	b       63a4 <parse_ipsecrequests+0xa4>
		if ((err = parse_ipsecrequest(xp, rq)) < 0)
    6348:	80 61 00 18 	lwz     r3,24(r1)
    634c:	80 81 00 0c 	lwz     r4,12(r1)
    6350:	4b ff fc 71 	bl      5fc0 <parse_ipsecrequest>
    6354:	90 61 00 10 	stw     r3,16(r1)
    6358:	80 01 00 10 	lwz     r0,16(r1)
    635c:	2f 80 00 00 	cmpwi   cr7,r0,0
    6360:	40 9c 00 0c 	bge-    cr7,636c <parse_ipsecrequests+0x6c>
			return err;
    6364:	80 01 00 10 	lwz     r0,16(r1)
    6368:	48 00 00 4c 	b       63b4 <parse_ipsecrequests+0xb4>
		len -= rq->sadb_x_ipsecrequest_len;
    636c:	80 01 00 0c 	lwz     r0,12(r1)
    6370:	7c 09 03 78 	mr      r9,r0
    6374:	a0 09 00 00 	lhz     r0,0(r9)
    6378:	54 00 04 3e 	clrlwi  r0,r0,16
    637c:	81 21 00 08 	lwz     r9,8(r1)
    6380:	7c 00 48 50 	subf    r0,r0,r9
    6384:	90 01 00 08 	stw     r0,8(r1)
		rq = (void*)((u8*)rq + rq->sadb_x_ipsecrequest_len);
    6388:	80 01 00 0c 	lwz     r0,12(r1)
    638c:	7c 09 03 78 	mr      r9,r0
    6390:	a0 09 00 00 	lhz     r0,0(r9)
    6394:	54 00 04 3e 	clrlwi  r0,r0,16
    6398:	81 21 00 0c 	lwz     r9,12(r1)
    639c:	7c 09 02 14 	add     r0,r9,r0
    63a0:	90 01 00 0c 	stw     r0,12(r1)
{
	int err;
	int len = pol->sadb_x_policy_len*8 - sizeof(struct sadb_x_policy);
	struct sadb_x_ipsecrequest *rq = (void*)(pol+1);

	while (len >= sizeof(struct sadb_x_ipsecrequest)) {
    63a4:	80 01 00 08 	lwz     r0,8(r1)
    63a8:	2b 80 00 0f 	cmplwi  cr7,r0,15
    63ac:	41 9d ff 9c 	bgt+    cr7,6348 <parse_ipsecrequests+0x48>
		if ((err = parse_ipsecrequest(xp, rq)) < 0)
			return err;
		len -= rq->sadb_x_ipsecrequest_len;
		rq = (void*)((u8*)rq + rq->sadb_x_ipsecrequest_len);
	}
	return 0;
    63b0:	38 00 00 00 	li      r0,0
}
    63b4:	7c 03 03 78 	mr      r3,r0
    63b8:	80 01 00 24 	lwz     r0,36(r1)
    63bc:	7c 08 03 a6 	mtlr    r0
    63c0:	38 21 00 20 	addi    r1,r1,32
    63c4:	4e 80 00 20 	blr

000063c8 <pfkey_xfrm_policy2msg_size>:
	}
	return 0;
}

static int pfkey_xfrm_policy2msg_size(struct xfrm_policy *xp)
{
    63c8:	94 21 ff d0 	stwu    r1,-48(r1)
    63cc:	7c 08 02 a6 	mflr    r0
    63d0:	90 01 00 34 	stw     r0,52(r1)
    63d4:	90 61 00 28 	stw     r3,40(r1)
	struct xfrm_tmpl *t;
	int sockaddr_size = pfkey_sockaddr_size(xp->family);
    63d8:	80 01 00 28 	lwz     r0,40(r1)
    63dc:	7c 09 03 78 	mr      r9,r0
    63e0:	a0 09 00 f0 	lhz     r0,240(r9)
    63e4:	54 00 04 3e 	clrlwi  r0,r0,16
    63e8:	7c 03 03 78 	mr      r3,r0
    63ec:	4b ff b6 89 	bl      1a74 <pfkey_sockaddr_size>
    63f0:	90 61 00 10 	stw     r3,16(r1)
	int socklen = 0;
    63f4:	38 00 00 00 	li      r0,0
    63f8:	90 01 00 08 	stw     r0,8(r1)
	int i;

	for (i=0; i<xp->xfrm_nr; i++) {
    63fc:	38 00 00 00 	li      r0,0
    6400:	90 01 00 0c 	stw     r0,12(r1)
    6404:	48 00 00 78 	b       647c <pfkey_xfrm_policy2msg_size+0xb4>
		t = xp->xfrm_vec + i;
    6408:	80 01 00 28 	lwz     r0,40(r1)
    640c:	31 20 00 f8 	addic   r9,r0,248
    6410:	80 01 00 0c 	lwz     r0,12(r1)
    6414:	54 00 30 32 	rlwinm  r0,r0,6,0,25
    6418:	7c 09 02 14 	add     r0,r9,r0
    641c:	90 01 00 14 	stw     r0,20(r1)
		socklen += pfkey_sockaddr_len(t->encap_family);
    6420:	80 01 00 14 	lwz     r0,20(r1)
    6424:	7c 0b 03 78 	mr      r11,r0
    6428:	a0 0b 00 28 	lhz     r0,40(r11)
    642c:	54 00 04 3e 	clrlwi  r0,r0,16
    6430:	b0 01 00 18 	sth     r0,24(r1)
	return proto ? proto : IPSEC_PROTO_ANY;
}

static inline int pfkey_sockaddr_len(sa_family_t family)
{
	switch (family) {
    6434:	a0 01 00 18 	lhz     r0,24(r1)
    6438:	54 00 04 3e 	clrlwi  r0,r0,16
    643c:	2f 80 00 02 	cmpwi   cr7,r0,2
    6440:	41 9e 00 10 	beq-    cr7,6450 <pfkey_xfrm_policy2msg_size+0x88>
    6444:	2f 80 00 0a 	cmpwi   cr7,r0,10
    6448:	41 9e 00 10 	beq-    cr7,6458 <pfkey_xfrm_policy2msg_size+0x90>
    644c:	48 00 00 14 	b       6460 <pfkey_xfrm_policy2msg_size+0x98>
	case AF_INET:
		return sizeof(struct sockaddr_in);
    6450:	38 00 00 10 	li      r0,16
    6454:	48 00 00 10 	b       6464 <pfkey_xfrm_policy2msg_size+0x9c>
#if defined(CONFIG_IPV6) || defined(CONFIG_IPV6_MODULE)
	case AF_INET6:
		return sizeof(struct sockaddr_in6);
    6458:	38 00 00 1c 	li      r0,28
    645c:	48 00 00 08 	b       6464 <pfkey_xfrm_policy2msg_size+0x9c>
#endif
	}
	return 0;
    6460:	38 00 00 00 	li      r0,0
	int socklen = 0;
	int i;

	for (i=0; i<xp->xfrm_nr; i++) {
		t = xp->xfrm_vec + i;
		socklen += pfkey_sockaddr_len(t->encap_family);
    6464:	81 21 00 08 	lwz     r9,8(r1)
    6468:	7c 09 02 14 	add     r0,r9,r0
    646c:	90 01 00 08 	stw     r0,8(r1)
	struct xfrm_tmpl *t;
	int sockaddr_size = pfkey_sockaddr_size(xp->family);
	int socklen = 0;
	int i;

	for (i=0; i<xp->xfrm_nr; i++) {
    6470:	80 01 00 0c 	lwz     r0,12(r1)
    6474:	30 00 00 01 	addic   r0,r0,1
    6478:	90 01 00 0c 	stw     r0,12(r1)
    647c:	80 01 00 28 	lwz     r0,40(r1)
    6480:	7c 09 03 78 	mr      r9,r0
    6484:	88 09 00 ef 	lbz     r0,239(r9)
    6488:	54 00 06 3e 	clrlwi  r0,r0,24
    648c:	7c 09 03 78 	mr      r9,r0
    6490:	80 01 00 0c 	lwz     r0,12(r1)
    6494:	7f 89 00 00 	cmpw    cr7,r9,r0
    6498:	41 9d ff 70 	bgt+    cr7,6408 <pfkey_xfrm_policy2msg_size+0x40>
	return sizeof(struct sadb_msg) +
		(sizeof(struct sadb_lifetime) * 3) +
		(sizeof(struct sadb_address) * 2) +
		(sockaddr_size * 2) +
		sizeof(struct sadb_x_policy) +
		(xp->xfrm_nr * sizeof(struct sadb_x_ipsecrequest)) +
    649c:	80 01 00 28 	lwz     r0,40(r1)
    64a0:	7c 0b 03 78 	mr      r11,r0
    64a4:	88 0b 00 ef 	lbz     r0,239(r11)
    64a8:	54 00 06 3e 	clrlwi  r0,r0,24

	return sizeof(struct sadb_msg) +
		(sizeof(struct sadb_lifetime) * 3) +
		(sizeof(struct sadb_address) * 2) +
		(sockaddr_size * 2) +
		sizeof(struct sadb_x_policy) +
    64ac:	54 09 18 38 	rlwinm  r9,r0,3,0,28
		socklen += pfkey_sockaddr_len(t->encap_family);
	}

	return sizeof(struct sadb_msg) +
		(sizeof(struct sadb_lifetime) * 3) +
		(sizeof(struct sadb_address) * 2) +
    64b0:	80 01 00 10 	lwz     r0,16(r1)
		(sockaddr_size * 2) +
		sizeof(struct sadb_x_policy) +
    64b4:	7d 29 02 14 	add     r9,r9,r0
		(xp->xfrm_nr * sizeof(struct sadb_x_ipsecrequest)) +
    64b8:	80 01 00 08 	lwz     r0,8(r1)
    64bc:	7c 09 02 14 	add     r0,r9,r0
    64c0:	30 00 00 48 	addic   r0,r0,72
    64c4:	54 09 08 3c 	rlwinm  r9,r0,1,0,30
    64c8:	80 01 00 28 	lwz     r0,40(r1)
    64cc:	90 01 00 1c 	stw     r0,28(r1)
	return 0;
}

static inline int pfkey_xfrm_policy2sec_ctx_size(struct xfrm_policy *xp)
{
  struct xfrm_sec_ctx *xfrm_ctx = xp->security;
    64d0:	80 01 00 1c 	lwz     r0,28(r1)
    64d4:	7c 0b 03 78 	mr      r11,r0
    64d8:	80 0b 00 f4 	lwz     r0,244(r11)
    64dc:	90 01 00 20 	stw     r0,32(r1)

	if (xfrm_ctx) {
    64e0:	80 01 00 20 	lwz     r0,32(r1)
    64e4:	2f 80 00 00 	cmpwi   cr7,r0,0
    64e8:	41 9e 00 3c 	beq-    cr7,6524 <pfkey_xfrm_policy2msg_size+0x15c>
		int len = sizeof(struct sadb_x_sec_ctx);
    64ec:	38 00 00 08 	li      r0,8
    64f0:	90 01 00 24 	stw     r0,36(r1)
		len += xfrm_ctx->ctx_len;
    64f4:	80 01 00 20 	lwz     r0,32(r1)
    64f8:	7c 0b 03 78 	mr      r11,r0
    64fc:	a0 0b 00 02 	lhz     r0,2(r11)
    6500:	54 00 04 3e 	clrlwi  r0,r0,16
    6504:	81 61 00 24 	lwz     r11,36(r1)
    6508:	7c 0b 02 14 	add     r0,r11,r0
    650c:	90 01 00 24 	stw     r0,36(r1)
		return PFKEY_ALIGN8(len);
    6510:	80 01 00 24 	lwz     r0,36(r1)
    6514:	30 00 ff ff 	addic   r0,r0,-1
    6518:	60 00 00 07 	ori     r0,r0,7
    651c:	30 00 00 01 	addic   r0,r0,1
    6520:	48 00 00 08 	b       6528 <pfkey_xfrm_policy2msg_size+0x160>
	}
	return 0;
    6524:	38 00 00 00 	li      r0,0
		(sizeof(struct sadb_lifetime) * 3) +
		(sizeof(struct sadb_address) * 2) +
		(sockaddr_size * 2) +
		sizeof(struct sadb_x_policy) +
		(xp->xfrm_nr * sizeof(struct sadb_x_ipsecrequest)) +
		(socklen * 2) +
    6528:	7c 09 02 14 	add     r0,r9,r0
		pfkey_xfrm_policy2sec_ctx_size(xp);
}
    652c:	7c 03 03 78 	mr      r3,r0
    6530:	80 01 00 34 	lwz     r0,52(r1)
    6534:	7c 08 03 a6 	mtlr    r0
    6538:	38 21 00 30 	addi    r1,r1,48
    653c:	4e 80 00 20 	blr

00006540 <pfkey_xfrm_policy2msg_prep>:

static struct sk_buff * pfkey_xfrm_policy2msg_prep(struct xfrm_policy *xp)
{
    6540:	94 21 ff d0 	stwu    r1,-48(r1)
    6544:	7c 08 02 a6 	mflr    r0
    6548:	90 01 00 34 	stw     r0,52(r1)
    654c:	90 61 00 28 	stw     r3,40(r1)
	struct sk_buff *skb;
	int size;

	size = pfkey_xfrm_policy2msg_size(xp);
    6550:	80 61 00 28 	lwz     r3,40(r1)
    6554:	4b ff fe 75 	bl      63c8 <pfkey_xfrm_policy2msg_size>
    6558:	90 61 00 08 	stw     r3,8(r1)

	skb =  alloc_skb(size + 16, GFP_ATOMIC);
    655c:	80 01 00 08 	lwz     r0,8(r1)
    6560:	30 00 00 10 	addic   r0,r0,16
    6564:	90 01 00 10 	stw     r0,16(r1)
    6568:	38 00 00 20 	li      r0,32
    656c:	90 01 00 14 	stw     r0,20(r1)
    6570:	80 61 00 10 	lwz     r3,16(r1)
    6574:	80 81 00 14 	lwz     r4,20(r1)
    6578:	38 a0 00 00 	li      r5,0
    657c:	38 c0 ff ff 	li      r6,-1
    6580:	48 00 00 01 	bl      6580 <pfkey_xfrm_policy2msg_prep+0x40>
    6584:	7c 60 1b 78 	mr      r0,r3
    6588:	90 01 00 0c 	stw     r0,12(r1)
	if (skb == NULL)
    658c:	80 01 00 0c 	lwz     r0,12(r1)
    6590:	2f 80 00 00 	cmpwi   cr7,r0,0
    6594:	40 9e 00 14 	bne-    cr7,65a8 <pfkey_xfrm_policy2msg_prep+0x68>
    6598:	38 00 ff 97 	li      r0,-105
    659c:	90 01 00 18 	stw     r0,24(r1)

#define IS_ERR_VALUE(x) unlikely((x) >= (unsigned long)-MAX_ERRNO)

static inline void * __must_check ERR_PTR(long error)
{
	return (void *) error;
    65a0:	80 01 00 18 	lwz     r0,24(r1)
		return ERR_PTR(-ENOBUFS);
    65a4:	48 00 00 08 	b       65ac <pfkey_xfrm_policy2msg_prep+0x6c>

	return skb;
    65a8:	80 01 00 0c 	lwz     r0,12(r1)
}
    65ac:	7c 03 03 78 	mr      r3,r0
    65b0:	80 01 00 34 	lwz     r0,52(r1)
    65b4:	7c 08 03 a6 	mtlr    r0
    65b8:	38 21 00 30 	addi    r1,r1,48
    65bc:	4e 80 00 20 	blr

000065c0 <pfkey_xfrm_policy2msg>:

static int pfkey_xfrm_policy2msg(struct sk_buff *skb, struct xfrm_policy *xp, int dir)
{
    65c0:	94 21 ff 80 	stwu    r1,-128(r1)
    65c4:	7c 08 02 a6 	mflr    r0
    65c8:	90 01 00 84 	stw     r0,132(r1)
    65cc:	93 e1 00 7c 	stw     r31,124(r1)
    65d0:	90 61 00 68 	stw     r3,104(r1)
    65d4:	90 81 00 6c 	stw     r4,108(r1)
    65d8:	90 a1 00 70 	stw     r5,112(r1)
	struct sadb_x_policy *pol;
	struct sadb_x_sec_ctx *sec_ctx;
	struct xfrm_sec_ctx *xfrm_ctx;
	int i;
	int size;
	int sockaddr_size = pfkey_sockaddr_size(xp->family);
    65dc:	80 01 00 6c 	lwz     r0,108(r1)
    65e0:	7c 08 03 78 	mr      r8,r0
    65e4:	a0 08 00 f0 	lhz     r0,240(r8)
    65e8:	54 00 04 3e 	clrlwi  r0,r0,16
    65ec:	7c 03 03 78 	mr      r3,r0
    65f0:	4b ff b4 85 	bl      1a74 <pfkey_sockaddr_size>
    65f4:	90 61 00 18 	stw     r3,24(r1)
	int socklen = pfkey_sockaddr_len(xp->family);
    65f8:	80 01 00 6c 	lwz     r0,108(r1)
    65fc:	7c 09 03 78 	mr      r9,r0
    6600:	a0 09 00 f0 	lhz     r0,240(r9)
    6604:	54 00 04 3e 	clrlwi  r0,r0,16
    6608:	b0 01 00 48 	sth     r0,72(r1)
	return proto ? proto : IPSEC_PROTO_ANY;
}

static inline int pfkey_sockaddr_len(sa_family_t family)
{
	switch (family) {
    660c:	a0 01 00 48 	lhz     r0,72(r1)
    6610:	54 00 04 3e 	clrlwi  r0,r0,16
    6614:	2f 80 00 02 	cmpwi   cr7,r0,2
    6618:	41 9e 00 10 	beq-    cr7,6628 <pfkey_xfrm_policy2msg+0x68>
    661c:	2f 80 00 0a 	cmpwi   cr7,r0,10
    6620:	41 9e 00 10 	beq-    cr7,6630 <pfkey_xfrm_policy2msg+0x70>
    6624:	48 00 00 14 	b       6638 <pfkey_xfrm_policy2msg+0x78>
	case AF_INET:
		return sizeof(struct sockaddr_in);
    6628:	38 00 00 10 	li      r0,16
    662c:	48 00 00 10 	b       663c <pfkey_xfrm_policy2msg+0x7c>
#if defined(CONFIG_IPV6) || defined(CONFIG_IPV6_MODULE)
	case AF_INET6:
		return sizeof(struct sockaddr_in6);
    6630:	38 00 00 1c 	li      r0,28
    6634:	48 00 00 08 	b       663c <pfkey_xfrm_policy2msg+0x7c>
#endif
	}
	return 0;
    6638:	38 00 00 00 	li      r0,0
	struct sadb_x_sec_ctx *sec_ctx;
	struct xfrm_sec_ctx *xfrm_ctx;
	int i;
	int size;
	int sockaddr_size = pfkey_sockaddr_size(xp->family);
	int socklen = pfkey_sockaddr_len(xp->family);
    663c:	90 01 00 10 	stw     r0,16(r1)

	size = pfkey_xfrm_policy2msg_size(xp);
    6640:	80 61 00 6c 	lwz     r3,108(r1)
    6644:	4b ff fd 85 	bl      63c8 <pfkey_xfrm_policy2msg_size>
    6648:	90 61 00 0c 	stw     r3,12(r1)

	/* call should fill header later */
	hdr = (struct sadb_msg *) skb_put(skb, sizeof(struct sadb_msg));
    664c:	80 61 00 68 	lwz     r3,104(r1)
    6650:	38 80 00 10 	li      r4,16
    6654:	48 00 00 01 	bl      6654 <pfkey_xfrm_policy2msg+0x94>
    6658:	90 61 00 1c 	stw     r3,28(r1)
	memset(hdr, 0, size);	/* XXX do we need this ? */
    665c:	80 01 00 0c 	lwz     r0,12(r1)
    6660:	81 21 00 1c 	lwz     r9,28(r1)
    6664:	7d 23 4b 78 	mr      r3,r9
    6668:	38 80 00 00 	li      r4,0
    666c:	7c 05 03 78 	mr      r5,r0
    6670:	48 00 00 01 	bl      6670 <pfkey_xfrm_policy2msg+0xb0>

	/* src address */
	addr = (struct sadb_address*) skb_put(skb,
    6674:	80 01 00 18 	lwz     r0,24(r1)
    6678:	30 00 00 08 	addic   r0,r0,8
    667c:	80 61 00 68 	lwz     r3,104(r1)
    6680:	7c 04 03 78 	mr      r4,r0
    6684:	48 00 00 01 	bl      6684 <pfkey_xfrm_policy2msg+0xc4>
    6688:	90 61 00 20 	stw     r3,32(r1)
					      sizeof(struct sadb_address)+sockaddr_size);
	addr->sadb_address_len =
		(sizeof(struct sadb_address)+sockaddr_size)/
    668c:	80 01 00 18 	lwz     r0,24(r1)
    6690:	30 00 00 08 	addic   r0,r0,8
    6694:	54 00 e8 fe 	rlwinm  r0,r0,29,3,31
	memset(hdr, 0, size);	/* XXX do we need this ? */

	/* src address */
	addr = (struct sadb_address*) skb_put(skb,
					      sizeof(struct sadb_address)+sockaddr_size);
	addr->sadb_address_len =
    6698:	54 09 04 3e 	clrlwi  r9,r0,16
    669c:	80 01 00 20 	lwz     r0,32(r1)
    66a0:	7c 0a 03 78 	mr      r10,r0
    66a4:	b1 2a 00 00 	sth     r9,0(r10)
		(sizeof(struct sadb_address)+sockaddr_size)/
			sizeof(uint64_t);
	addr->sadb_address_exttype = SADB_EXT_ADDRESS_SRC;
    66a8:	80 01 00 20 	lwz     r0,32(r1)
    66ac:	39 20 00 05 	li      r9,5
    66b0:	7c 0b 03 78 	mr      r11,r0
    66b4:	b1 2b 00 02 	sth     r9,2(r11)
	addr->sadb_address_proto = pfkey_proto_from_xfrm(xp->selector.proto);
    66b8:	80 01 00 6c 	lwz     r0,108(r1)
    66bc:	7c 08 03 78 	mr      r8,r0
    66c0:	88 08 00 74 	lbz     r0,116(r8)
    66c4:	54 00 06 3e 	clrlwi  r0,r0,24
    66c8:	7c 03 03 78 	mr      r3,r0
    66cc:	4b ff b1 31 	bl      17fc <pfkey_proto_from_xfrm>
    66d0:	7c 60 1b 78 	mr      r0,r3
    66d4:	7c 09 03 78 	mr      r9,r0
    66d8:	80 01 00 20 	lwz     r0,32(r1)
    66dc:	7c 0a 03 78 	mr      r10,r0
    66e0:	99 2a 00 04 	stb     r9,4(r10)
	addr->sadb_address_prefixlen = xp->selector.prefixlen_s;
    66e4:	80 01 00 6c 	lwz     r0,108(r1)
    66e8:	7c 0b 03 78 	mr      r11,r0
    66ec:	88 0b 00 73 	lbz     r0,115(r11)
    66f0:	54 09 06 3e 	clrlwi  r9,r0,24
    66f4:	80 01 00 20 	lwz     r0,32(r1)
    66f8:	7c 08 03 78 	mr      r8,r0
    66fc:	99 28 00 05 	stb     r9,5(r8)
	addr->sadb_address_reserved = 0;
    6700:	80 01 00 20 	lwz     r0,32(r1)
    6704:	39 20 00 00 	li      r9,0
    6708:	7c 0a 03 78 	mr      r10,r0
    670c:	b1 2a 00 06 	sth     r9,6(r10)
	if (!pfkey_sockaddr_fill(&xp->selector.saddr,
    6710:	80 01 00 6c 	lwz     r0,108(r1)
    6714:	31 40 00 58 	addic   r10,r0,88
				 xp->selector.sport,
    6718:	80 01 00 6c 	lwz     r0,108(r1)
			sizeof(uint64_t);
	addr->sadb_address_exttype = SADB_EXT_ADDRESS_SRC;
	addr->sadb_address_proto = pfkey_proto_from_xfrm(xp->selector.proto);
	addr->sadb_address_prefixlen = xp->selector.prefixlen_s;
	addr->sadb_address_reserved = 0;
	if (!pfkey_sockaddr_fill(&xp->selector.saddr,
    671c:	7c 0b 03 78 	mr      r11,r0
    6720:	a0 0b 00 6c 	lhz     r0,108(r11)
    6724:	54 0b 04 3e 	clrlwi  r11,r0,16
    6728:	80 01 00 20 	lwz     r0,32(r1)
    672c:	31 20 00 08 	addic   r9,r0,8
				 xp->selector.sport,
				 (struct sockaddr *) (addr + 1),
				 xp->family))
    6730:	80 01 00 6c 	lwz     r0,108(r1)
			sizeof(uint64_t);
	addr->sadb_address_exttype = SADB_EXT_ADDRESS_SRC;
	addr->sadb_address_proto = pfkey_proto_from_xfrm(xp->selector.proto);
	addr->sadb_address_prefixlen = xp->selector.prefixlen_s;
	addr->sadb_address_reserved = 0;
	if (!pfkey_sockaddr_fill(&xp->selector.saddr,
    6734:	7c 08 03 78 	mr      r8,r0
    6738:	a0 08 00 f0 	lhz     r0,240(r8)
    673c:	54 00 04 3e 	clrlwi  r0,r0,16
    6740:	7d 43 53 78 	mr      r3,r10
    6744:	7d 64 5b 78 	mr      r4,r11
    6748:	7d 25 4b 78 	mr      r5,r9
    674c:	7c 06 03 78 	mr      r6,r0
    6750:	4b ff b3 81 	bl      1ad0 <pfkey_sockaddr_fill>
    6754:	7c 60 1b 78 	mr      r0,r3
    6758:	2f 80 00 00 	cmpwi   cr7,r0,0
    675c:	40 9e 00 08 	bne-    cr7,6764 <pfkey_xfrm_policy2msg+0x1a4>
				 xp->selector.sport,
				 (struct sockaddr *) (addr + 1),
				 xp->family))
		BUG();
    6760:	0f e0 00 00 	twi     31,r0,0

	/* dst address */
	addr = (struct sadb_address*) skb_put(skb,
    6764:	80 01 00 18 	lwz     r0,24(r1)
    6768:	30 00 00 08 	addic   r0,r0,8
    676c:	80 61 00 68 	lwz     r3,104(r1)
    6770:	7c 04 03 78 	mr      r4,r0
    6774:	48 00 00 01 	bl      6774 <pfkey_xfrm_policy2msg+0x1b4>
    6778:	90 61 00 20 	stw     r3,32(r1)
					      sizeof(struct sadb_address)+sockaddr_size);
	addr->sadb_address_len =
		(sizeof(struct sadb_address)+sockaddr_size)/
    677c:	80 01 00 18 	lwz     r0,24(r1)
    6780:	30 00 00 08 	addic   r0,r0,8
    6784:	54 00 e8 fe 	rlwinm  r0,r0,29,3,31
		BUG();

	/* dst address */
	addr = (struct sadb_address*) skb_put(skb,
					      sizeof(struct sadb_address)+sockaddr_size);
	addr->sadb_address_len =
    6788:	54 09 04 3e 	clrlwi  r9,r0,16
    678c:	80 01 00 20 	lwz     r0,32(r1)
    6790:	7c 0a 03 78 	mr      r10,r0
    6794:	b1 2a 00 00 	sth     r9,0(r10)
		(sizeof(struct sadb_address)+sockaddr_size)/
			sizeof(uint64_t);
	addr->sadb_address_exttype = SADB_EXT_ADDRESS_DST;
    6798:	80 01 00 20 	lwz     r0,32(r1)
    679c:	39 20 00 06 	li      r9,6
    67a0:	7c 0b 03 78 	mr      r11,r0
    67a4:	b1 2b 00 02 	sth     r9,2(r11)
	addr->sadb_address_proto = pfkey_proto_from_xfrm(xp->selector.proto);
    67a8:	80 01 00 6c 	lwz     r0,108(r1)
    67ac:	7c 08 03 78 	mr      r8,r0
    67b0:	88 08 00 74 	lbz     r0,116(r8)
    67b4:	54 00 06 3e 	clrlwi  r0,r0,24
    67b8:	7c 03 03 78 	mr      r3,r0
    67bc:	4b ff b0 41 	bl      17fc <pfkey_proto_from_xfrm>
    67c0:	7c 60 1b 78 	mr      r0,r3
    67c4:	7c 09 03 78 	mr      r9,r0
    67c8:	80 01 00 20 	lwz     r0,32(r1)
    67cc:	7c 0a 03 78 	mr      r10,r0
    67d0:	99 2a 00 04 	stb     r9,4(r10)
	addr->sadb_address_prefixlen = xp->selector.prefixlen_d;
    67d4:	80 01 00 6c 	lwz     r0,108(r1)
    67d8:	7c 0b 03 78 	mr      r11,r0
    67dc:	88 0b 00 72 	lbz     r0,114(r11)
    67e0:	54 09 06 3e 	clrlwi  r9,r0,24
    67e4:	80 01 00 20 	lwz     r0,32(r1)
    67e8:	7c 08 03 78 	mr      r8,r0
    67ec:	99 28 00 05 	stb     r9,5(r8)
	addr->sadb_address_reserved = 0;
    67f0:	80 01 00 20 	lwz     r0,32(r1)
    67f4:	39 20 00 00 	li      r9,0
    67f8:	7c 0a 03 78 	mr      r10,r0
    67fc:	b1 2a 00 06 	sth     r9,6(r10)

	pfkey_sockaddr_fill(&xp->selector.daddr, xp->selector.dport,
    6800:	80 01 00 6c 	lwz     r0,108(r1)
    6804:	31 40 00 48 	addic   r10,r0,72
    6808:	80 01 00 6c 	lwz     r0,108(r1)
    680c:	7c 0b 03 78 	mr      r11,r0
    6810:	a0 0b 00 68 	lhz     r0,104(r11)
    6814:	54 0b 04 3e 	clrlwi  r11,r0,16
    6818:	80 01 00 20 	lwz     r0,32(r1)
    681c:	31 20 00 08 	addic   r9,r0,8
			    (struct sockaddr *) (addr + 1),
			    xp->family);
    6820:	80 01 00 6c 	lwz     r0,108(r1)
	addr->sadb_address_exttype = SADB_EXT_ADDRESS_DST;
	addr->sadb_address_proto = pfkey_proto_from_xfrm(xp->selector.proto);
	addr->sadb_address_prefixlen = xp->selector.prefixlen_d;
	addr->sadb_address_reserved = 0;

	pfkey_sockaddr_fill(&xp->selector.daddr, xp->selector.dport,
    6824:	7c 08 03 78 	mr      r8,r0
    6828:	a0 08 00 f0 	lhz     r0,240(r8)
    682c:	54 00 04 3e 	clrlwi  r0,r0,16
    6830:	7d 43 53 78 	mr      r3,r10
    6834:	7d 64 5b 78 	mr      r4,r11
    6838:	7d 25 4b 78 	mr      r5,r9
    683c:	7c 06 03 78 	mr      r6,r0
    6840:	4b ff b2 91 	bl      1ad0 <pfkey_sockaddr_fill>
			    (struct sockaddr *) (addr + 1),
			    xp->family);

	/* hard time */
	lifetime = (struct sadb_lifetime *)  skb_put(skb,
    6844:	80 61 00 68 	lwz     r3,104(r1)
    6848:	38 80 00 20 	li      r4,32
    684c:	48 00 00 01 	bl      684c <pfkey_xfrm_policy2msg+0x28c>
    6850:	90 61 00 24 	stw     r3,36(r1)
						     sizeof(struct sadb_lifetime));
	lifetime->sadb_lifetime_len =
    6854:	80 01 00 24 	lwz     r0,36(r1)
    6858:	39 20 00 04 	li      r9,4
    685c:	7c 0a 03 78 	mr      r10,r0
    6860:	b1 2a 00 00 	sth     r9,0(r10)
		sizeof(struct sadb_lifetime)/sizeof(uint64_t);
	lifetime->sadb_lifetime_exttype = SADB_EXT_LIFETIME_HARD;
    6864:	80 01 00 24 	lwz     r0,36(r1)
    6868:	39 20 00 03 	li      r9,3
    686c:	7c 0b 03 78 	mr      r11,r0
    6870:	b1 2b 00 02 	sth     r9,2(r11)
	lifetime->sadb_lifetime_allocations =  _X2KEY(xp->lft.hard_packet_limit);
    6874:	80 01 00 6c 	lwz     r0,108(r1)
    6878:	7c 08 03 78 	mr      r8,r0
    687c:	81 28 00 98 	lwz     r9,152(r8)
    6880:	81 48 00 9c 	lwz     r10,156(r8)
    6884:	38 00 ff ff 	li      r0,-1
    6888:	7f 89 00 00 	cmpw    cr7,r9,r0
    688c:	40 9e 00 10 	bne-    cr7,689c <pfkey_xfrm_policy2msg+0x2dc>
    6890:	38 00 ff ff 	li      r0,-1
    6894:	7f 8a 00 00 	cmpw    cr7,r10,r0
    6898:	41 9e 00 1c 	beq-    cr7,68b4 <pfkey_xfrm_policy2msg+0x2f4>
    689c:	80 01 00 6c 	lwz     r0,108(r1)
    68a0:	7c 0b 03 78 	mr      r11,r0
    68a4:	81 2b 00 98 	lwz     r9,152(r11)
    68a8:	81 4b 00 9c 	lwz     r10,156(r11)
    68ac:	7d 40 53 78 	mr      r0,r10
    68b0:	48 00 00 08 	b       68b8 <pfkey_xfrm_policy2msg+0x2f8>
    68b4:	38 00 00 00 	li      r0,0
    68b8:	81 21 00 24 	lwz     r9,36(r1)
    68bc:	90 09 00 04 	stw     r0,4(r9)
	lifetime->sadb_lifetime_bytes = _X2KEY(xp->lft.hard_byte_limit);
    68c0:	80 01 00 6c 	lwz     r0,108(r1)
    68c4:	7c 08 03 78 	mr      r8,r0
    68c8:	81 28 00 88 	lwz     r9,136(r8)
    68cc:	81 48 00 8c 	lwz     r10,140(r8)
    68d0:	38 00 ff ff 	li      r0,-1
    68d4:	7f 89 00 00 	cmpw    cr7,r9,r0
    68d8:	40 9e 00 10 	bne-    cr7,68e8 <pfkey_xfrm_policy2msg+0x328>
    68dc:	38 00 ff ff 	li      r0,-1
    68e0:	7f 8a 00 00 	cmpw    cr7,r10,r0
    68e4:	41 9e 00 18 	beq-    cr7,68fc <pfkey_xfrm_policy2msg+0x33c>
    68e8:	80 01 00 6c 	lwz     r0,108(r1)
    68ec:	7c 0b 03 78 	mr      r11,r0
    68f0:	81 2b 00 88 	lwz     r9,136(r11)
    68f4:	81 4b 00 8c 	lwz     r10,140(r11)
    68f8:	48 00 00 0c 	b       6904 <pfkey_xfrm_policy2msg+0x344>
    68fc:	39 20 00 00 	li      r9,0
    6900:	39 40 00 00 	li      r10,0
    6904:	80 01 00 24 	lwz     r0,36(r1)
    6908:	7c 08 03 78 	mr      r8,r0
    690c:	91 48 00 0c 	stw     r10,12(r8)
    6910:	7c 0b 03 78 	mr      r11,r0
    6914:	91 2b 00 08 	stw     r9,8(r11)
	lifetime->sadb_lifetime_addtime = xp->lft.hard_add_expires_seconds;
    6918:	80 01 00 6c 	lwz     r0,108(r1)
    691c:	7c 08 03 78 	mr      r8,r0
    6920:	81 28 00 a8 	lwz     r9,168(r8)
    6924:	81 48 00 ac 	lwz     r10,172(r8)
    6928:	80 01 00 24 	lwz     r0,36(r1)
    692c:	7c 0b 03 78 	mr      r11,r0
    6930:	91 4b 00 14 	stw     r10,20(r11)
    6934:	7c 08 03 78 	mr      r8,r0
    6938:	91 28 00 10 	stw     r9,16(r8)
	lifetime->sadb_lifetime_usetime = xp->lft.hard_use_expires_seconds;
    693c:	80 01 00 6c 	lwz     r0,108(r1)
    6940:	7c 0b 03 78 	mr      r11,r0
    6944:	81 2b 00 b8 	lwz     r9,184(r11)
    6948:	81 4b 00 bc 	lwz     r10,188(r11)
    694c:	80 01 00 24 	lwz     r0,36(r1)
    6950:	7c 08 03 78 	mr      r8,r0
    6954:	91 48 00 1c 	stw     r10,28(r8)
    6958:	7c 0b 03 78 	mr      r11,r0
    695c:	91 2b 00 18 	stw     r9,24(r11)
	/* soft time */
	lifetime = (struct sadb_lifetime *)  skb_put(skb,
    6960:	80 61 00 68 	lwz     r3,104(r1)
    6964:	38 80 00 20 	li      r4,32
    6968:	48 00 00 01 	bl      6968 <pfkey_xfrm_policy2msg+0x3a8>
    696c:	90 61 00 24 	stw     r3,36(r1)
						     sizeof(struct sadb_lifetime));
	lifetime->sadb_lifetime_len =
    6970:	80 01 00 24 	lwz     r0,36(r1)
    6974:	39 20 00 04 	li      r9,4
    6978:	7c 08 03 78 	mr      r8,r0
    697c:	b1 28 00 00 	sth     r9,0(r8)
		sizeof(struct sadb_lifetime)/sizeof(uint64_t);
	lifetime->sadb_lifetime_exttype = SADB_EXT_LIFETIME_SOFT;
    6980:	80 01 00 24 	lwz     r0,36(r1)
    6984:	39 20 00 04 	li      r9,4
    6988:	7c 0a 03 78 	mr      r10,r0
    698c:	b1 2a 00 02 	sth     r9,2(r10)
	lifetime->sadb_lifetime_allocations =  _X2KEY(xp->lft.soft_packet_limit);
    6990:	80 01 00 6c 	lwz     r0,108(r1)
    6994:	7c 0b 03 78 	mr      r11,r0
    6998:	81 2b 00 90 	lwz     r9,144(r11)
    699c:	81 4b 00 94 	lwz     r10,148(r11)
    69a0:	38 00 ff ff 	li      r0,-1
    69a4:	7f 89 00 00 	cmpw    cr7,r9,r0
    69a8:	40 9e 00 10 	bne-    cr7,69b8 <pfkey_xfrm_policy2msg+0x3f8>
    69ac:	38 00 ff ff 	li      r0,-1
    69b0:	7f 8a 00 00 	cmpw    cr7,r10,r0
    69b4:	41 9e 00 1c 	beq-    cr7,69d0 <pfkey_xfrm_policy2msg+0x410>
    69b8:	80 01 00 6c 	lwz     r0,108(r1)
    69bc:	7c 08 03 78 	mr      r8,r0
    69c0:	81 28 00 90 	lwz     r9,144(r8)
    69c4:	81 48 00 94 	lwz     r10,148(r8)
    69c8:	7d 40 53 78 	mr      r0,r10
    69cc:	48 00 00 08 	b       69d4 <pfkey_xfrm_policy2msg+0x414>
    69d0:	38 00 00 00 	li      r0,0
    69d4:	81 21 00 24 	lwz     r9,36(r1)
    69d8:	90 09 00 04 	stw     r0,4(r9)
	lifetime->sadb_lifetime_bytes = _X2KEY(xp->lft.soft_byte_limit);
    69dc:	80 01 00 6c 	lwz     r0,108(r1)
    69e0:	7c 0b 03 78 	mr      r11,r0
    69e4:	81 2b 00 80 	lwz     r9,128(r11)
    69e8:	81 4b 00 84 	lwz     r10,132(r11)
    69ec:	38 00 ff ff 	li      r0,-1
    69f0:	7f 89 00 00 	cmpw    cr7,r9,r0
    69f4:	40 9e 00 10 	bne-    cr7,6a04 <pfkey_xfrm_policy2msg+0x444>
    69f8:	38 00 ff ff 	li      r0,-1
    69fc:	7f 8a 00 00 	cmpw    cr7,r10,r0
    6a00:	41 9e 00 18 	beq-    cr7,6a18 <pfkey_xfrm_policy2msg+0x458>
    6a04:	80 01 00 6c 	lwz     r0,108(r1)
    6a08:	7c 08 03 78 	mr      r8,r0
    6a0c:	81 28 00 80 	lwz     r9,128(r8)
    6a10:	81 48 00 84 	lwz     r10,132(r8)
    6a14:	48 00 00 0c 	b       6a20 <pfkey_xfrm_policy2msg+0x460>
    6a18:	39 20 00 00 	li      r9,0
    6a1c:	39 40 00 00 	li      r10,0
    6a20:	80 01 00 24 	lwz     r0,36(r1)
    6a24:	7c 0b 03 78 	mr      r11,r0
    6a28:	91 4b 00 0c 	stw     r10,12(r11)
    6a2c:	7c 08 03 78 	mr      r8,r0
    6a30:	91 28 00 08 	stw     r9,8(r8)
	lifetime->sadb_lifetime_addtime = xp->lft.soft_add_expires_seconds;
    6a34:	80 01 00 6c 	lwz     r0,108(r1)
    6a38:	7c 0b 03 78 	mr      r11,r0
    6a3c:	81 2b 00 a0 	lwz     r9,160(r11)
    6a40:	81 4b 00 a4 	lwz     r10,164(r11)
    6a44:	80 01 00 24 	lwz     r0,36(r1)
    6a48:	7c 08 03 78 	mr      r8,r0
    6a4c:	91 48 00 14 	stw     r10,20(r8)
    6a50:	7c 0b 03 78 	mr      r11,r0
    6a54:	91 2b 00 10 	stw     r9,16(r11)
	lifetime->sadb_lifetime_usetime = xp->lft.soft_use_expires_seconds;
    6a58:	80 01 00 6c 	lwz     r0,108(r1)
    6a5c:	7c 08 03 78 	mr      r8,r0
    6a60:	81 28 00 b0 	lwz     r9,176(r8)
    6a64:	81 48 00 b4 	lwz     r10,180(r8)
    6a68:	80 01 00 24 	lwz     r0,36(r1)
    6a6c:	7c 0b 03 78 	mr      r11,r0
    6a70:	91 4b 00 1c 	stw     r10,28(r11)
    6a74:	7c 08 03 78 	mr      r8,r0
    6a78:	91 28 00 18 	stw     r9,24(r8)
	/* current time */
	lifetime = (struct sadb_lifetime *)  skb_put(skb,
    6a7c:	80 61 00 68 	lwz     r3,104(r1)
    6a80:	38 80 00 20 	li      r4,32
    6a84:	48 00 00 01 	bl      6a84 <pfkey_xfrm_policy2msg+0x4c4>
    6a88:	90 61 00 24 	stw     r3,36(r1)
						     sizeof(struct sadb_lifetime));
	lifetime->sadb_lifetime_len =
    6a8c:	80 01 00 24 	lwz     r0,36(r1)
    6a90:	39 20 00 04 	li      r9,4
    6a94:	7c 0a 03 78 	mr      r10,r0
    6a98:	b1 2a 00 00 	sth     r9,0(r10)
		sizeof(struct sadb_lifetime)/sizeof(uint64_t);
	lifetime->sadb_lifetime_exttype = SADB_EXT_LIFETIME_CURRENT;
    6a9c:	80 01 00 24 	lwz     r0,36(r1)
    6aa0:	39 20 00 02 	li      r9,2
    6aa4:	7c 0b 03 78 	mr      r11,r0
    6aa8:	b1 2b 00 02 	sth     r9,2(r11)
	lifetime->sadb_lifetime_allocations = xp->curlft.packets;
    6aac:	80 01 00 6c 	lwz     r0,108(r1)
    6ab0:	7c 08 03 78 	mr      r8,r0
    6ab4:	81 28 00 c8 	lwz     r9,200(r8)
    6ab8:	81 48 00 cc 	lwz     r10,204(r8)
    6abc:	7d 49 53 78 	mr      r9,r10
    6ac0:	80 01 00 24 	lwz     r0,36(r1)
    6ac4:	7c 0a 03 78 	mr      r10,r0
    6ac8:	91 2a 00 04 	stw     r9,4(r10)
	lifetime->sadb_lifetime_bytes = xp->curlft.bytes;
    6acc:	80 01 00 6c 	lwz     r0,108(r1)
    6ad0:	7c 0b 03 78 	mr      r11,r0
    6ad4:	81 2b 00 c0 	lwz     r9,192(r11)
    6ad8:	81 4b 00 c4 	lwz     r10,196(r11)
    6adc:	80 01 00 24 	lwz     r0,36(r1)
    6ae0:	7c 08 03 78 	mr      r8,r0
    6ae4:	91 48 00 0c 	stw     r10,12(r8)
    6ae8:	7c 0b 03 78 	mr      r11,r0
    6aec:	91 2b 00 08 	stw     r9,8(r11)
	lifetime->sadb_lifetime_addtime = xp->curlft.add_time;
    6af0:	80 01 00 6c 	lwz     r0,108(r1)
    6af4:	7c 08 03 78 	mr      r8,r0
    6af8:	81 28 00 d0 	lwz     r9,208(r8)
    6afc:	81 48 00 d4 	lwz     r10,212(r8)
    6b00:	80 01 00 24 	lwz     r0,36(r1)
    6b04:	7c 0b 03 78 	mr      r11,r0
    6b08:	91 4b 00 14 	stw     r10,20(r11)
    6b0c:	7c 08 03 78 	mr      r8,r0
    6b10:	91 28 00 10 	stw     r9,16(r8)
	lifetime->sadb_lifetime_usetime = xp->curlft.use_time;
    6b14:	80 01 00 6c 	lwz     r0,108(r1)
    6b18:	7c 0b 03 78 	mr      r11,r0
    6b1c:	81 2b 00 d8 	lwz     r9,216(r11)
    6b20:	81 4b 00 dc 	lwz     r10,220(r11)
    6b24:	80 01 00 24 	lwz     r0,36(r1)
    6b28:	7c 08 03 78 	mr      r8,r0
    6b2c:	91 48 00 1c 	stw     r10,28(r8)
    6b30:	7c 0b 03 78 	mr      r11,r0
    6b34:	91 2b 00 18 	stw     r9,24(r11)

	pol = (struct sadb_x_policy *)  skb_put(skb, sizeof(struct sadb_x_policy));
    6b38:	80 61 00 68 	lwz     r3,104(r1)
    6b3c:	38 80 00 10 	li      r4,16
    6b40:	48 00 00 01 	bl      6b40 <pfkey_xfrm_policy2msg+0x580>
    6b44:	90 61 00 28 	stw     r3,40(r1)
	pol->sadb_x_policy_len = sizeof(struct sadb_x_policy)/sizeof(uint64_t);
    6b48:	80 01 00 28 	lwz     r0,40(r1)
    6b4c:	39 20 00 02 	li      r9,2
    6b50:	7c 08 03 78 	mr      r8,r0
    6b54:	b1 28 00 00 	sth     r9,0(r8)
	pol->sadb_x_policy_exttype = SADB_X_EXT_POLICY;
    6b58:	80 01 00 28 	lwz     r0,40(r1)
    6b5c:	39 20 00 12 	li      r9,18
    6b60:	7c 0a 03 78 	mr      r10,r0
    6b64:	b1 2a 00 02 	sth     r9,2(r10)
	pol->sadb_x_policy_type = IPSEC_POLICY_DISCARD;
    6b68:	80 01 00 28 	lwz     r0,40(r1)
    6b6c:	39 20 00 00 	li      r9,0
    6b70:	7c 0b 03 78 	mr      r11,r0
    6b74:	b1 2b 00 04 	sth     r9,4(r11)
	if (xp->action == XFRM_POLICY_ALLOW) {
    6b78:	80 01 00 6c 	lwz     r0,108(r1)
    6b7c:	7c 08 03 78 	mr      r8,r0
    6b80:	88 08 00 ed 	lbz     r0,237(r8)
    6b84:	54 00 06 3e 	clrlwi  r0,r0,24
    6b88:	2f 80 00 00 	cmpwi   cr7,r0,0
    6b8c:	40 9e 00 40 	bne-    cr7,6bcc <pfkey_xfrm_policy2msg+0x60c>
		if (xp->xfrm_nr)
    6b90:	80 01 00 6c 	lwz     r0,108(r1)
    6b94:	7c 09 03 78 	mr      r9,r0
    6b98:	88 09 00 ef 	lbz     r0,239(r9)
    6b9c:	54 00 06 3e 	clrlwi  r0,r0,24
    6ba0:	2f 80 00 00 	cmpwi   cr7,r0,0
    6ba4:	41 9e 00 18 	beq-    cr7,6bbc <pfkey_xfrm_policy2msg+0x5fc>
			pol->sadb_x_policy_type = IPSEC_POLICY_IPSEC;
    6ba8:	80 01 00 28 	lwz     r0,40(r1)
    6bac:	39 20 00 02 	li      r9,2
    6bb0:	7c 0a 03 78 	mr      r10,r0
    6bb4:	b1 2a 00 04 	sth     r9,4(r10)
    6bb8:	48 00 00 14 	b       6bcc <pfkey_xfrm_policy2msg+0x60c>
		else
			pol->sadb_x_policy_type = IPSEC_POLICY_NONE;
    6bbc:	80 01 00 28 	lwz     r0,40(r1)
    6bc0:	39 20 00 01 	li      r9,1
    6bc4:	7c 0b 03 78 	mr      r11,r0
    6bc8:	b1 2b 00 04 	sth     r9,4(r11)
	}
	pol->sadb_x_policy_dir = dir+1;
    6bcc:	80 01 00 70 	lwz     r0,112(r1)
    6bd0:	54 00 06 3e 	clrlwi  r0,r0,24
    6bd4:	30 00 00 01 	addic   r0,r0,1
    6bd8:	54 09 06 3e 	clrlwi  r9,r0,24
    6bdc:	80 01 00 28 	lwz     r0,40(r1)
    6be0:	7c 08 03 78 	mr      r8,r0
    6be4:	99 28 00 06 	stb     r9,6(r8)
	pol->sadb_x_policy_id = xp->index;
    6be8:	80 01 00 6c 	lwz     r0,108(r1)
    6bec:	7c 0a 03 78 	mr      r10,r0
    6bf0:	81 2a 00 3c 	lwz     r9,60(r10)
    6bf4:	80 01 00 28 	lwz     r0,40(r1)
    6bf8:	7c 0b 03 78 	mr      r11,r0
    6bfc:	91 2b 00 08 	stw     r9,8(r11)
	pol->sadb_x_policy_priority = xp->priority;
    6c00:	80 01 00 6c 	lwz     r0,108(r1)
    6c04:	7c 08 03 78 	mr      r8,r0
    6c08:	81 28 00 38 	lwz     r9,56(r8)
    6c0c:	80 01 00 28 	lwz     r0,40(r1)
    6c10:	7c 0a 03 78 	mr      r10,r0
    6c14:	91 2a 00 0c 	stw     r9,12(r10)

	for (i=0; i<xp->xfrm_nr; i++) {
    6c18:	38 00 00 00 	li      r0,0
    6c1c:	90 01 00 08 	stw     r0,8(r1)
    6c20:	48 00 02 e4 	b       6f04 <pfkey_xfrm_policy2msg+0x944>
		struct sadb_x_ipsecrequest *rq;
		struct xfrm_tmpl *t = xp->xfrm_vec + i;
    6c24:	80 01 00 6c 	lwz     r0,108(r1)
    6c28:	31 20 00 f8 	addic   r9,r0,248
    6c2c:	80 01 00 08 	lwz     r0,8(r1)
    6c30:	54 00 30 32 	rlwinm  r0,r0,6,0,25
    6c34:	7c 09 02 14 	add     r0,r9,r0
    6c38:	90 01 00 2c 	stw     r0,44(r1)
		int req_size;
		int mode;

		req_size = sizeof(struct sadb_x_ipsecrequest);
    6c3c:	38 00 00 10 	li      r0,16
    6c40:	90 01 00 14 	stw     r0,20(r1)
		if (t->mode == XFRM_MODE_TUNNEL) {
    6c44:	80 01 00 2c 	lwz     r0,44(r1)
    6c48:	7c 0b 03 78 	mr      r11,r0
    6c4c:	88 0b 00 30 	lbz     r0,48(r11)
    6c50:	54 00 06 3e 	clrlwi  r0,r0,24
    6c54:	2f 80 00 01 	cmpwi   cr7,r0,1
    6c58:	40 9e 00 64 	bne-    cr7,6cbc <pfkey_xfrm_policy2msg+0x6fc>
			socklen = pfkey_sockaddr_len(t->encap_family);
    6c5c:	80 01 00 2c 	lwz     r0,44(r1)
    6c60:	7c 08 03 78 	mr      r8,r0
    6c64:	a0 08 00 28 	lhz     r0,40(r8)
    6c68:	54 00 04 3e 	clrlwi  r0,r0,16
    6c6c:	b0 01 00 4a 	sth     r0,74(r1)
	return proto ? proto : IPSEC_PROTO_ANY;
}

static inline int pfkey_sockaddr_len(sa_family_t family)
{
	switch (family) {
    6c70:	a0 01 00 4a 	lhz     r0,74(r1)
    6c74:	54 00 04 3e 	clrlwi  r0,r0,16
    6c78:	2f 80 00 02 	cmpwi   cr7,r0,2
    6c7c:	41 9e 00 10 	beq-    cr7,6c8c <pfkey_xfrm_policy2msg+0x6cc>
    6c80:	2f 80 00 0a 	cmpwi   cr7,r0,10
    6c84:	41 9e 00 10 	beq-    cr7,6c94 <pfkey_xfrm_policy2msg+0x6d4>
    6c88:	48 00 00 14 	b       6c9c <pfkey_xfrm_policy2msg+0x6dc>
	case AF_INET:
		return sizeof(struct sockaddr_in);
    6c8c:	38 00 00 10 	li      r0,16
    6c90:	48 00 00 10 	b       6ca0 <pfkey_xfrm_policy2msg+0x6e0>
#if defined(CONFIG_IPV6) || defined(CONFIG_IPV6_MODULE)
	case AF_INET6:
		return sizeof(struct sockaddr_in6);
    6c94:	38 00 00 1c 	li      r0,28
    6c98:	48 00 00 08 	b       6ca0 <pfkey_xfrm_policy2msg+0x6e0>
#endif
	}
	return 0;
    6c9c:	38 00 00 00 	li      r0,0
		int req_size;
		int mode;

		req_size = sizeof(struct sadb_x_ipsecrequest);
		if (t->mode == XFRM_MODE_TUNNEL) {
			socklen = pfkey_sockaddr_len(t->encap_family);
    6ca0:	90 01 00 10 	stw     r0,16(r1)
			req_size += socklen * 2;
    6ca4:	80 01 00 10 	lwz     r0,16(r1)
    6ca8:	54 00 08 3c 	rlwinm  r0,r0,1,0,30
    6cac:	81 21 00 14 	lwz     r9,20(r1)
    6cb0:	7c 09 02 14 	add     r0,r9,r0
    6cb4:	90 01 00 14 	stw     r0,20(r1)
    6cb8:	48 00 00 20 	b       6cd8 <pfkey_xfrm_policy2msg+0x718>
		} else {
			size -= 2*socklen;
    6cbc:	81 21 00 10 	lwz     r9,16(r1)
    6cc0:	38 00 00 00 	li      r0,0
    6cc4:	7c 09 00 50 	subf    r0,r9,r0
    6cc8:	54 00 08 3c 	rlwinm  r0,r0,1,0,30
    6ccc:	81 21 00 0c 	lwz     r9,12(r1)
    6cd0:	7c 09 02 14 	add     r0,r9,r0
    6cd4:	90 01 00 0c 	stw     r0,12(r1)
		}
		rq = (void*)skb_put(skb, req_size);
    6cd8:	80 01 00 14 	lwz     r0,20(r1)
    6cdc:	80 61 00 68 	lwz     r3,104(r1)
    6ce0:	7c 04 03 78 	mr      r4,r0
    6ce4:	48 00 00 01 	bl      6ce4 <pfkey_xfrm_policy2msg+0x724>
    6ce8:	90 61 00 30 	stw     r3,48(r1)
		pol->sadb_x_policy_len += req_size/8;
    6cec:	80 01 00 28 	lwz     r0,40(r1)
    6cf0:	7c 09 03 78 	mr      r9,r0
    6cf4:	a0 09 00 00 	lhz     r0,0(r9)
    6cf8:	54 09 04 3e 	clrlwi  r9,r0,16
    6cfc:	80 01 00 14 	lwz     r0,20(r1)
    6d00:	7c 00 1e 70 	srawi   r0,r0,3
    6d04:	7c 00 01 94 	addze   r0,r0
    6d08:	54 00 04 3e 	clrlwi  r0,r0,16
    6d0c:	7c 09 02 14 	add     r0,r9,r0
    6d10:	54 09 04 3e 	clrlwi  r9,r0,16
    6d14:	80 01 00 28 	lwz     r0,40(r1)
    6d18:	7c 0a 03 78 	mr      r10,r0
    6d1c:	b1 2a 00 00 	sth     r9,0(r10)
		memset(rq, 0, sizeof(*rq));
    6d20:	80 01 00 30 	lwz     r0,48(r1)
    6d24:	39 20 00 00 	li      r9,0
    6d28:	7c 0b 03 78 	mr      r11,r0
    6d2c:	91 2b 00 00 	stw     r9,0(r11)
    6d30:	39 20 00 00 	li      r9,0
    6d34:	7c 08 03 78 	mr      r8,r0
    6d38:	91 28 00 04 	stw     r9,4(r8)
    6d3c:	39 20 00 00 	li      r9,0
    6d40:	7c 0a 03 78 	mr      r10,r0
    6d44:	91 2a 00 08 	stw     r9,8(r10)
    6d48:	39 20 00 00 	li      r9,0
    6d4c:	7c 0b 03 78 	mr      r11,r0
    6d50:	91 2b 00 0c 	stw     r9,12(r11)
		rq->sadb_x_ipsecrequest_len = req_size;
    6d54:	80 01 00 14 	lwz     r0,20(r1)
    6d58:	54 09 04 3e 	clrlwi  r9,r0,16
    6d5c:	80 01 00 30 	lwz     r0,48(r1)
    6d60:	7c 08 03 78 	mr      r8,r0
    6d64:	b1 28 00 00 	sth     r9,0(r8)
		rq->sadb_x_ipsecrequest_proto = t->id.proto;
    6d68:	80 01 00 2c 	lwz     r0,44(r1)
    6d6c:	7c 09 03 78 	mr      r9,r0
    6d70:	88 09 00 14 	lbz     r0,20(r9)
    6d74:	54 00 06 3e 	clrlwi  r0,r0,24
    6d78:	7c 09 03 78 	mr      r9,r0
    6d7c:	80 01 00 30 	lwz     r0,48(r1)
    6d80:	7c 0a 03 78 	mr      r10,r0
    6d84:	b1 2a 00 02 	sth     r9,2(r10)
		if ((mode = pfkey_mode_from_xfrm(t->mode)) < 0)
    6d88:	80 01 00 2c 	lwz     r0,44(r1)
    6d8c:	7c 0b 03 78 	mr      r11,r0
    6d90:	88 0b 00 30 	lbz     r0,48(r11)
    6d94:	54 00 06 3e 	clrlwi  r0,r0,24
    6d98:	90 01 00 4c 	stw     r0,76(r1)
	return PFKEY_ALIGN8(pfkey_sockaddr_len(family));
}

static inline int pfkey_mode_from_xfrm(int mode)
{
	switch(mode) {
    6d9c:	80 01 00 4c 	lwz     r0,76(r1)
    6da0:	2f 80 00 01 	cmpwi   cr7,r0,1
    6da4:	41 9e 00 1c 	beq-    cr7,6dc0 <pfkey_xfrm_policy2msg+0x800>
    6da8:	2f 80 00 04 	cmpwi   cr7,r0,4
    6dac:	41 9e 00 1c 	beq-    cr7,6dc8 <pfkey_xfrm_policy2msg+0x808>
    6db0:	2f 80 00 00 	cmpwi   cr7,r0,0
    6db4:	40 9e 00 1c 	bne-    cr7,6dd0 <pfkey_xfrm_policy2msg+0x810>
	case XFRM_MODE_TRANSPORT:
		return IPSEC_MODE_TRANSPORT;
    6db8:	38 00 00 01 	li      r0,1
    6dbc:	48 00 00 18 	b       6dd4 <pfkey_xfrm_policy2msg+0x814>
	case XFRM_MODE_TUNNEL:
		return IPSEC_MODE_TUNNEL;
    6dc0:	38 00 00 02 	li      r0,2
    6dc4:	48 00 00 10 	b       6dd4 <pfkey_xfrm_policy2msg+0x814>
	case XFRM_MODE_BEET:
		return IPSEC_MODE_BEET;
    6dc8:	38 00 00 03 	li      r0,3
    6dcc:	48 00 00 08 	b       6dd4 <pfkey_xfrm_policy2msg+0x814>
	default:
		return -1;
    6dd0:	38 00 ff ff 	li      r0,-1
		rq = (void*)skb_put(skb, req_size);
		pol->sadb_x_policy_len += req_size/8;
		memset(rq, 0, sizeof(*rq));
		rq->sadb_x_ipsecrequest_len = req_size;
		rq->sadb_x_ipsecrequest_proto = t->id.proto;
		if ((mode = pfkey_mode_from_xfrm(t->mode)) < 0)
    6dd4:	90 01 00 34 	stw     r0,52(r1)
    6dd8:	80 01 00 34 	lwz     r0,52(r1)
    6ddc:	2f 80 00 00 	cmpwi   cr7,r0,0
    6de0:	40 9c 00 0c 	bge-    cr7,6dec <pfkey_xfrm_policy2msg+0x82c>
			return -EINVAL;
    6de4:	38 00 ff ea 	li      r0,-22
    6de8:	48 00 02 c8 	b       70b0 <pfkey_xfrm_policy2msg+0xaf0>
		rq->sadb_x_ipsecrequest_mode = mode;
    6dec:	80 01 00 34 	lwz     r0,52(r1)
    6df0:	54 09 06 3e 	clrlwi  r9,r0,24
    6df4:	80 01 00 30 	lwz     r0,48(r1)
    6df8:	7c 08 03 78 	mr      r8,r0
    6dfc:	99 28 00 04 	stb     r9,4(r8)
		rq->sadb_x_ipsecrequest_level = IPSEC_LEVEL_REQUIRE;
    6e00:	80 01 00 30 	lwz     r0,48(r1)
    6e04:	39 20 00 02 	li      r9,2
    6e08:	7c 0a 03 78 	mr      r10,r0
    6e0c:	99 2a 00 05 	stb     r9,5(r10)
		if (t->reqid)
    6e10:	80 01 00 2c 	lwz     r0,44(r1)
    6e14:	7c 0b 03 78 	mr      r11,r0
    6e18:	80 0b 00 2c 	lwz     r0,44(r11)
    6e1c:	2f 80 00 00 	cmpwi   cr7,r0,0
    6e20:	41 9e 00 14 	beq-    cr7,6e34 <pfkey_xfrm_policy2msg+0x874>
			rq->sadb_x_ipsecrequest_level = IPSEC_LEVEL_UNIQUE;
    6e24:	80 01 00 30 	lwz     r0,48(r1)
    6e28:	39 20 00 03 	li      r9,3
    6e2c:	7c 08 03 78 	mr      r8,r0
    6e30:	99 28 00 05 	stb     r9,5(r8)
		if (t->optional)
    6e34:	80 01 00 2c 	lwz     r0,44(r1)
    6e38:	7c 09 03 78 	mr      r9,r0
    6e3c:	88 09 00 32 	lbz     r0,50(r9)
    6e40:	54 00 06 3e 	clrlwi  r0,r0,24
    6e44:	2f 80 00 00 	cmpwi   cr7,r0,0
    6e48:	41 9e 00 14 	beq-    cr7,6e5c <pfkey_xfrm_policy2msg+0x89c>
			rq->sadb_x_ipsecrequest_level = IPSEC_LEVEL_USE;
    6e4c:	80 01 00 30 	lwz     r0,48(r1)
    6e50:	39 20 00 01 	li      r9,1
    6e54:	7c 0a 03 78 	mr      r10,r0
    6e58:	99 2a 00 05 	stb     r9,5(r10)
		rq->sadb_x_ipsecrequest_reqid = t->reqid;
    6e5c:	80 01 00 2c 	lwz     r0,44(r1)
    6e60:	7c 0b 03 78 	mr      r11,r0
    6e64:	81 2b 00 2c 	lwz     r9,44(r11)
    6e68:	80 01 00 30 	lwz     r0,48(r1)
    6e6c:	7c 08 03 78 	mr      r8,r0
    6e70:	91 28 00 08 	stw     r9,8(r8)

		if (t->mode == XFRM_MODE_TUNNEL) {
    6e74:	80 01 00 2c 	lwz     r0,44(r1)
    6e78:	7c 09 03 78 	mr      r9,r0
    6e7c:	88 09 00 30 	lbz     r0,48(r9)
    6e80:	54 00 06 3e 	clrlwi  r0,r0,24
    6e84:	2f 80 00 01 	cmpwi   cr7,r0,1
    6e88:	40 9e 00 70 	bne-    cr7,6ef8 <pfkey_xfrm_policy2msg+0x938>
			u8 *sa = (void *)(rq + 1);
    6e8c:	80 01 00 30 	lwz     r0,48(r1)
    6e90:	30 00 00 10 	addic   r0,r0,16
    6e94:	90 01 00 38 	stw     r0,56(r1)
			pfkey_sockaddr_fill(&t->saddr, 0,
    6e98:	80 01 00 2c 	lwz     r0,44(r1)
    6e9c:	31 20 00 18 	addic   r9,r0,24
					    (struct sockaddr *)sa,
					    t->encap_family);
    6ea0:	80 01 00 2c 	lwz     r0,44(r1)
			rq->sadb_x_ipsecrequest_level = IPSEC_LEVEL_USE;
		rq->sadb_x_ipsecrequest_reqid = t->reqid;

		if (t->mode == XFRM_MODE_TUNNEL) {
			u8 *sa = (void *)(rq + 1);
			pfkey_sockaddr_fill(&t->saddr, 0,
    6ea4:	7c 0a 03 78 	mr      r10,r0
    6ea8:	a0 0a 00 28 	lhz     r0,40(r10)
    6eac:	54 00 04 3e 	clrlwi  r0,r0,16
    6eb0:	7d 23 4b 78 	mr      r3,r9
    6eb4:	38 80 00 00 	li      r4,0
    6eb8:	80 a1 00 38 	lwz     r5,56(r1)
    6ebc:	7c 06 03 78 	mr      r6,r0
    6ec0:	4b ff ac 11 	bl      1ad0 <pfkey_sockaddr_fill>
					    (struct sockaddr *)sa,
					    t->encap_family);
			pfkey_sockaddr_fill(&t->id.daddr, 0,
    6ec4:	81 61 00 2c 	lwz     r11,44(r1)
    6ec8:	80 01 00 10 	lwz     r0,16(r1)
    6ecc:	81 21 00 38 	lwz     r9,56(r1)
    6ed0:	7d 29 02 14 	add     r9,r9,r0
					    (struct sockaddr *) (sa + socklen),
					    t->encap_family);
    6ed4:	80 01 00 2c 	lwz     r0,44(r1)
		if (t->mode == XFRM_MODE_TUNNEL) {
			u8 *sa = (void *)(rq + 1);
			pfkey_sockaddr_fill(&t->saddr, 0,
					    (struct sockaddr *)sa,
					    t->encap_family);
			pfkey_sockaddr_fill(&t->id.daddr, 0,
    6ed8:	7c 08 03 78 	mr      r8,r0
    6edc:	a0 08 00 28 	lhz     r0,40(r8)
    6ee0:	54 00 04 3e 	clrlwi  r0,r0,16
    6ee4:	7d 63 5b 78 	mr      r3,r11
    6ee8:	38 80 00 00 	li      r4,0
    6eec:	7d 25 4b 78 	mr      r5,r9
    6ef0:	7c 06 03 78 	mr      r6,r0
    6ef4:	4b ff ab dd 	bl      1ad0 <pfkey_sockaddr_fill>
	}
	pol->sadb_x_policy_dir = dir+1;
	pol->sadb_x_policy_id = xp->index;
	pol->sadb_x_policy_priority = xp->priority;

	for (i=0; i<xp->xfrm_nr; i++) {
    6ef8:	80 01 00 08 	lwz     r0,8(r1)
    6efc:	30 00 00 01 	addic   r0,r0,1
    6f00:	90 01 00 08 	stw     r0,8(r1)
    6f04:	80 01 00 6c 	lwz     r0,108(r1)
    6f08:	7c 09 03 78 	mr      r9,r0
    6f0c:	88 09 00 ef 	lbz     r0,239(r9)
    6f10:	54 00 06 3e 	clrlwi  r0,r0,24
    6f14:	7c 09 03 78 	mr      r9,r0
    6f18:	80 01 00 08 	lwz     r0,8(r1)
    6f1c:	7f 89 00 00 	cmpw    cr7,r9,r0
    6f20:	41 9d fd 04 	bgt+    cr7,6c24 <pfkey_xfrm_policy2msg+0x664>
					    t->encap_family);
		}
	}

	/* security context */
	if ((xfrm_ctx = xp->security)) {
    6f24:	80 01 00 6c 	lwz     r0,108(r1)
    6f28:	7c 0a 03 78 	mr      r10,r0
    6f2c:	80 0a 00 f4 	lwz     r0,244(r10)
    6f30:	90 01 00 3c 	stw     r0,60(r1)
    6f34:	80 01 00 3c 	lwz     r0,60(r1)
    6f38:	2f 80 00 00 	cmpwi   cr7,r0,0
    6f3c:	41 9e 01 28 	beq-    cr7,7064 <pfkey_xfrm_policy2msg+0xaa4>
    6f40:	80 01 00 6c 	lwz     r0,108(r1)
    6f44:	90 01 00 50 	stw     r0,80(r1)
	return 0;
}

static inline int pfkey_xfrm_policy2sec_ctx_size(struct xfrm_policy *xp)
{
  struct xfrm_sec_ctx *xfrm_ctx = xp->security;
    6f48:	80 01 00 50 	lwz     r0,80(r1)
    6f4c:	7c 0b 03 78 	mr      r11,r0
    6f50:	80 0b 00 f4 	lwz     r0,244(r11)
    6f54:	90 01 00 54 	stw     r0,84(r1)

	if (xfrm_ctx) {
    6f58:	80 01 00 54 	lwz     r0,84(r1)
    6f5c:	2f 80 00 00 	cmpwi   cr7,r0,0
    6f60:	41 9e 00 3c 	beq-    cr7,6f9c <pfkey_xfrm_policy2msg+0x9dc>
		int len = sizeof(struct sadb_x_sec_ctx);
    6f64:	38 00 00 08 	li      r0,8
    6f68:	90 01 00 58 	stw     r0,88(r1)
		len += xfrm_ctx->ctx_len;
    6f6c:	80 01 00 54 	lwz     r0,84(r1)
    6f70:	7c 08 03 78 	mr      r8,r0
    6f74:	a0 08 00 02 	lhz     r0,2(r8)
    6f78:	54 00 04 3e 	clrlwi  r0,r0,16
    6f7c:	81 21 00 58 	lwz     r9,88(r1)
    6f80:	7c 09 02 14 	add     r0,r9,r0
    6f84:	90 01 00 58 	stw     r0,88(r1)
		return PFKEY_ALIGN8(len);
    6f88:	80 01 00 58 	lwz     r0,88(r1)
    6f8c:	30 00 ff ff 	addic   r0,r0,-1
    6f90:	60 00 00 07 	ori     r0,r0,7
    6f94:	30 00 00 01 	addic   r0,r0,1
    6f98:	48 00 00 08 	b       6fa0 <pfkey_xfrm_policy2msg+0x9e0>
	}
	return 0;
    6f9c:	38 00 00 00 	li      r0,0
		}
	}

	/* security context */
	if ((xfrm_ctx = xp->security)) {
		int ctx_size = pfkey_xfrm_policy2sec_ctx_size(xp);
    6fa0:	90 01 00 40 	stw     r0,64(r1)

		sec_ctx = (struct sadb_x_sec_ctx *) skb_put(skb, ctx_size);
    6fa4:	80 01 00 40 	lwz     r0,64(r1)
    6fa8:	80 61 00 68 	lwz     r3,104(r1)
    6fac:	7c 04 03 78 	mr      r4,r0
    6fb0:	48 00 00 01 	bl      6fb0 <pfkey_xfrm_policy2msg+0x9f0>
    6fb4:	90 61 00 44 	stw     r3,68(r1)
		sec_ctx->sadb_x_sec_len = ctx_size / sizeof(uint64_t);
    6fb8:	80 01 00 40 	lwz     r0,64(r1)
    6fbc:	54 00 e8 fe 	rlwinm  r0,r0,29,3,31
    6fc0:	54 09 04 3e 	clrlwi  r9,r0,16
    6fc4:	80 01 00 44 	lwz     r0,68(r1)
    6fc8:	7c 0a 03 78 	mr      r10,r0
    6fcc:	b1 2a 00 00 	sth     r9,0(r10)
		sec_ctx->sadb_x_sec_exttype = SADB_X_EXT_SEC_CTX;
    6fd0:	80 01 00 44 	lwz     r0,68(r1)
    6fd4:	39 20 00 18 	li      r9,24
    6fd8:	7c 0b 03 78 	mr      r11,r0
    6fdc:	b1 2b 00 02 	sth     r9,2(r11)
		sec_ctx->sadb_x_ctx_doi = xfrm_ctx->ctx_doi;
    6fe0:	80 01 00 3c 	lwz     r0,60(r1)
    6fe4:	7c 08 03 78 	mr      r8,r0
    6fe8:	88 08 00 00 	lbz     r0,0(r8)
    6fec:	54 09 06 3e 	clrlwi  r9,r0,24
    6ff0:	80 01 00 44 	lwz     r0,68(r1)
    6ff4:	7c 0a 03 78 	mr      r10,r0
    6ff8:	99 2a 00 05 	stb     r9,5(r10)
		sec_ctx->sadb_x_ctx_alg = xfrm_ctx->ctx_alg;
    6ffc:	80 01 00 3c 	lwz     r0,60(r1)
    7000:	7c 0b 03 78 	mr      r11,r0
    7004:	88 0b 00 01 	lbz     r0,1(r11)
    7008:	54 09 06 3e 	clrlwi  r9,r0,24
    700c:	80 01 00 44 	lwz     r0,68(r1)
    7010:	7c 08 03 78 	mr      r8,r0
    7014:	99 28 00 04 	stb     r9,4(r8)
		sec_ctx->sadb_x_ctx_len = xfrm_ctx->ctx_len;
    7018:	80 01 00 3c 	lwz     r0,60(r1)
    701c:	7c 09 03 78 	mr      r9,r0
    7020:	a0 09 00 02 	lhz     r0,2(r9)
    7024:	54 09 04 3e 	clrlwi  r9,r0,16
    7028:	80 01 00 44 	lwz     r0,68(r1)
    702c:	7c 0a 03 78 	mr      r10,r0
    7030:	b1 2a 00 06 	sth     r9,6(r10)
		memcpy(sec_ctx + 1, xfrm_ctx->ctx_str,
    7034:	80 01 00 44 	lwz     r0,68(r1)
    7038:	31 60 00 08 	addic   r11,r0,8
    703c:	80 01 00 3c 	lwz     r0,60(r1)
    7040:	31 20 00 08 	addic   r9,r0,8
		       xfrm_ctx->ctx_len);
    7044:	80 01 00 3c 	lwz     r0,60(r1)
    7048:	7c 08 03 78 	mr      r8,r0
    704c:	a0 08 00 02 	lhz     r0,2(r8)
    7050:	54 00 04 3e 	clrlwi  r0,r0,16
		sec_ctx->sadb_x_sec_len = ctx_size / sizeof(uint64_t);
		sec_ctx->sadb_x_sec_exttype = SADB_X_EXT_SEC_CTX;
		sec_ctx->sadb_x_ctx_doi = xfrm_ctx->ctx_doi;
		sec_ctx->sadb_x_ctx_alg = xfrm_ctx->ctx_alg;
		sec_ctx->sadb_x_ctx_len = xfrm_ctx->ctx_len;
		memcpy(sec_ctx + 1, xfrm_ctx->ctx_str,
    7054:	7d 63 5b 78 	mr      r3,r11
    7058:	7d 24 4b 78 	mr      r4,r9
    705c:	7c 05 03 78 	mr      r5,r0
    7060:	48 00 00 01 	bl      7060 <pfkey_xfrm_policy2msg+0xaa0>
		       xfrm_ctx->ctx_len);
	}

	hdr->sadb_msg_len = size / sizeof(uint64_t);
    7064:	80 01 00 0c 	lwz     r0,12(r1)
    7068:	54 00 e8 fe 	rlwinm  r0,r0,29,3,31
    706c:	54 09 04 3e 	clrlwi  r9,r0,16
    7070:	80 01 00 1c 	lwz     r0,28(r1)
    7074:	7c 0a 03 78 	mr      r10,r0
    7078:	b1 2a 00 04 	sth     r9,4(r10)
	hdr->sadb_msg_reserved = atomic_read(&xp->refcnt);
    707c:	80 01 00 6c 	lwz     r0,108(r1)
    7080:	30 00 00 10 	addic   r0,r0,16
    7084:	90 01 00 5c 	stw     r0,92(r1)

static __inline__ int atomic_read(const atomic_t *v)
{
	int t;

	__asm__ __volatile__("lwz%U1%X1 %0,%1" : "=r"(t) : "m"(v->counter));
    7088:	80 01 00 5c 	lwz     r0,92(r1)
    708c:	7c 0b 03 78 	mr      r11,r0
    7090:	83 eb 00 00 	lwz     r31,0(r11)
    7094:	93 e1 00 60 	stw     r31,96(r1)

	return t;
    7098:	80 01 00 60 	lwz     r0,96(r1)
    709c:	54 09 04 3e 	clrlwi  r9,r0,16
    70a0:	80 01 00 1c 	lwz     r0,28(r1)
    70a4:	7c 08 03 78 	mr      r8,r0
    70a8:	b1 28 00 06 	sth     r9,6(r8)

	return 0;
    70ac:	38 00 00 00 	li      r0,0
}
    70b0:	7c 03 03 78 	mr      r3,r0
    70b4:	80 01 00 84 	lwz     r0,132(r1)
    70b8:	7c 08 03 a6 	mtlr    r0
    70bc:	83 e1 00 7c 	lwz     r31,124(r1)
    70c0:	38 21 00 80 	addi    r1,r1,128
    70c4:	4e 80 00 20 	blr

000070c8 <key_notify_policy>:

static int key_notify_policy(struct xfrm_policy *xp, int dir, struct km_event *c)
{
    70c8:	94 21 ff c0 	stwu    r1,-64(r1)
    70cc:	7c 08 02 a6 	mflr    r0
    70d0:	90 01 00 44 	stw     r0,68(r1)
    70d4:	90 61 00 28 	stw     r3,40(r1)
    70d8:	90 81 00 2c 	stw     r4,44(r1)
    70dc:	90 a1 00 30 	stw     r5,48(r1)
	struct sk_buff *out_skb;
	struct sadb_msg *out_hdr;
	int err;

	out_skb = pfkey_xfrm_policy2msg_prep(xp);
    70e0:	80 61 00 28 	lwz     r3,40(r1)
    70e4:	4b ff f4 5d 	bl      6540 <pfkey_xfrm_policy2msg_prep>
    70e8:	90 61 00 08 	stw     r3,8(r1)
    70ec:	80 01 00 08 	lwz     r0,8(r1)
    70f0:	90 01 00 14 	stw     r0,20(r1)
	return (long) ptr;
}

static inline long __must_check IS_ERR(const void *ptr)
{
	return IS_ERR_VALUE((unsigned long)ptr);
    70f4:	81 21 00 14 	lwz     r9,20(r1)
    70f8:	38 00 f0 00 	li      r0,-4096
    70fc:	7f 89 00 40 	cmplw   cr7,r9,r0
    7100:	7c 00 00 26 	mfcr    r0
    7104:	54 00 f7 fe 	rlwinm  r0,r0,30,31,31
	if (IS_ERR(out_skb))
    7108:	2f 80 00 00 	cmpwi   cr7,r0,0
    710c:	41 9e 00 14 	beq-    cr7,7120 <key_notify_policy+0x58>
    7110:	80 01 00 08 	lwz     r0,8(r1)
    7114:	90 01 00 18 	stw     r0,24(r1)
	return (void *) error;
}

static inline long __must_check PTR_ERR(const void *ptr)
{
	return (long) ptr;
    7118:	80 01 00 18 	lwz     r0,24(r1)
		return PTR_ERR(out_skb);
    711c:	48 00 01 60 	b       727c <key_notify_policy+0x1b4>

	err = pfkey_xfrm_policy2msg(out_skb, xp, dir);
    7120:	80 61 00 08 	lwz     r3,8(r1)
    7124:	80 81 00 28 	lwz     r4,40(r1)
    7128:	80 a1 00 2c 	lwz     r5,44(r1)
    712c:	4b ff f4 95 	bl      65c0 <pfkey_xfrm_policy2msg>
    7130:	90 61 00 0c 	stw     r3,12(r1)
	if (err < 0)
    7134:	80 01 00 0c 	lwz     r0,12(r1)
    7138:	2f 80 00 00 	cmpwi   cr7,r0,0
    713c:	40 9c 00 0c 	bge-    cr7,7148 <key_notify_policy+0x80>
		return err;
    7140:	80 01 00 0c 	lwz     r0,12(r1)
    7144:	48 00 01 38 	b       727c <key_notify_policy+0x1b4>

	out_hdr = (struct sadb_msg *) out_skb->data;
    7148:	80 01 00 08 	lwz     r0,8(r1)
    714c:	7c 09 03 78 	mr      r9,r0
    7150:	80 09 00 98 	lwz     r0,152(r9)
    7154:	90 01 00 10 	stw     r0,16(r1)
	out_hdr->sadb_msg_version = PF_KEY_V2;
    7158:	80 01 00 10 	lwz     r0,16(r1)
    715c:	39 20 00 02 	li      r9,2
    7160:	7c 0b 03 78 	mr      r11,r0
    7164:	99 2b 00 00 	stb     r9,0(r11)

	if (c->data.byid && c->event == XFRM_MSG_DELPOLICY)
    7168:	80 01 00 30 	lwz     r0,48(r1)
    716c:	7c 09 03 78 	mr      r9,r0
    7170:	80 09 00 00 	lwz     r0,0(r9)
    7174:	2f 80 00 00 	cmpwi   cr7,r0,0
    7178:	41 9e 00 2c 	beq-    cr7,71a4 <key_notify_policy+0xdc>
    717c:	80 01 00 30 	lwz     r0,48(r1)
    7180:	7c 0b 03 78 	mr      r11,r0
    7184:	80 0b 00 0c 	lwz     r0,12(r11)
    7188:	2f 80 00 14 	cmpwi   cr7,r0,20
    718c:	40 9e 00 18 	bne-    cr7,71a4 <key_notify_policy+0xdc>
		out_hdr->sadb_msg_type = SADB_X_SPDDELETE2;
    7190:	80 01 00 10 	lwz     r0,16(r1)
    7194:	39 20 00 16 	li      r9,22
    7198:	7c 0b 03 78 	mr      r11,r0
    719c:	99 2b 00 01 	stb     r9,1(r11)
    71a0:	48 00 00 70 	b       7210 <key_notify_policy+0x148>
	else
		out_hdr->sadb_msg_type = event2poltype(c->event);
    71a4:	80 01 00 30 	lwz     r0,48(r1)
    71a8:	7c 09 03 78 	mr      r9,r0
    71ac:	80 09 00 0c 	lwz     r0,12(r9)
    71b0:	90 01 00 1c 	stw     r0,28(r1)
	return 0;
}

static inline int event2poltype(int event)
{
	switch (event) {
    71b4:	80 01 00 1c 	lwz     r0,28(r1)
    71b8:	2f 80 00 14 	cmpwi   cr7,r0,20
    71bc:	41 9e 00 18 	beq-    cr7,71d4 <key_notify_policy+0x10c>
    71c0:	2f 80 00 19 	cmpwi   cr7,r0,25
    71c4:	41 9e 00 20 	beq-    cr7,71e4 <key_notify_policy+0x11c>
    71c8:	2f 80 00 13 	cmpwi   cr7,r0,19
    71cc:	41 9e 00 10 	beq-    cr7,71dc <key_notify_policy+0x114>
    71d0:	48 00 00 1c 	b       71ec <key_notify_policy+0x124>
	case XFRM_MSG_DELPOLICY:
		return SADB_X_SPDDELETE;
    71d4:	38 00 00 0f 	li      r0,15
    71d8:	48 00 00 28 	b       7200 <key_notify_policy+0x138>
	case XFRM_MSG_NEWPOLICY:
		return SADB_X_SPDADD;
    71dc:	38 00 00 0e 	li      r0,14
    71e0:	48 00 00 20 	b       7200 <key_notify_policy+0x138>
	case XFRM_MSG_UPDPOLICY:
		return SADB_X_SPDUPDATE;
    71e4:	38 00 00 0d 	li      r0,13
    71e8:	48 00 00 18 	b       7200 <key_notify_policy+0x138>
	case XFRM_MSG_POLEXPIRE:
	//	return SADB_X_SPDEXPIRE;
	default:
		pr_err("pfkey: Unknown policy event %d\n", event);
    71ec:	3c 00 00 00 	lis     r0,0
    71f0:	30 60 00 e0 	addic   r3,r0,224
    71f4:	80 81 00 1c 	lwz     r4,28(r1)
    71f8:	48 00 00 01 	bl      71f8 <key_notify_policy+0x130>
		break;
	}

	return 0;
    71fc:	38 00 00 00 	li      r0,0
	out_hdr->sadb_msg_version = PF_KEY_V2;

	if (c->data.byid && c->event == XFRM_MSG_DELPOLICY)
		out_hdr->sadb_msg_type = SADB_X_SPDDELETE2;
	else
		out_hdr->sadb_msg_type = event2poltype(c->event);
    7200:	54 09 06 3e 	clrlwi  r9,r0,24
    7204:	80 01 00 10 	lwz     r0,16(r1)
    7208:	7c 0b 03 78 	mr      r11,r0
    720c:	99 2b 00 01 	stb     r9,1(r11)
	out_hdr->sadb_msg_errno = 0;
    7210:	80 01 00 10 	lwz     r0,16(r1)
    7214:	39 20 00 00 	li      r9,0
    7218:	7c 0b 03 78 	mr      r11,r0
    721c:	99 2b 00 02 	stb     r9,2(r11)
	out_hdr->sadb_msg_seq = c->seq;
    7220:	80 01 00 30 	lwz     r0,48(r1)
    7224:	7c 0b 03 78 	mr      r11,r0
    7228:	81 2b 00 04 	lwz     r9,4(r11)
    722c:	80 01 00 10 	lwz     r0,16(r1)
    7230:	7c 0b 03 78 	mr      r11,r0
    7234:	91 2b 00 08 	stw     r9,8(r11)
	out_hdr->sadb_msg_pid = c->pid;
    7238:	80 01 00 30 	lwz     r0,48(r1)
    723c:	7c 0b 03 78 	mr      r11,r0
    7240:	81 2b 00 08 	lwz     r9,8(r11)
    7244:	80 01 00 10 	lwz     r0,16(r1)
    7248:	7c 0b 03 78 	mr      r11,r0
    724c:	91 2b 00 0c 	stw     r9,12(r11)
    7250:	80 01 00 28 	lwz     r0,40(r1)
    7254:	90 01 00 20 	stw     r0,32(r1)
    7258:	3c 00 00 00 	lis     r0,0
    725c:	30 00 00 00 	addic   r0,r0,0
	pfkey_broadcast(out_skb, GFP_ATOMIC, BROADCAST_ALL, NULL, xp_net(xp));
    7260:	80 61 00 08 	lwz     r3,8(r1)
    7264:	38 80 00 20 	li      r4,32
    7268:	38 a0 00 00 	li      r5,0
    726c:	38 c0 00 00 	li      r6,0
    7270:	7c 07 03 78 	mr      r7,r0
    7274:	4b ff 9a d9 	bl      d4c <pfkey_broadcast>
	return 0;
    7278:	38 00 00 00 	li      r0,0

}
    727c:	7c 03 03 78 	mr      r3,r0
    7280:	80 01 00 44 	lwz     r0,68(r1)
    7284:	7c 08 03 a6 	mtlr    r0
    7288:	38 21 00 40 	addi    r1,r1,64
    728c:	4e 80 00 20 	blr

00007290 <pfkey_spdadd>:

static int pfkey_spdadd(struct sock *sk, struct sk_buff *skb, struct sadb_msg *hdr, void **ext_hdrs)
{
    7290:	94 21 ff 50 	stwu    r1,-176(r1)
    7294:	7c 08 02 a6 	mflr    r0
    7298:	90 01 00 b4 	stw     r0,180(r1)
    729c:	bf 81 00 a0 	stmw    r28,160(r1)
    72a0:	90 61 00 88 	stw     r3,136(r1)
    72a4:	90 81 00 8c 	stw     r4,140(r1)
    72a8:	90 a1 00 90 	stw     r5,144(r1)
    72ac:	90 c1 00 94 	stw     r6,148(r1)
    72b0:	80 01 00 88 	lwz     r0,136(r1)
    72b4:	90 01 00 4c 	stw     r0,76(r1)
    72b8:	3c 00 00 00 	lis     r0,0
    72bc:	30 00 00 00 	addic   r0,r0,0
	struct net *net = sock_net(sk);
    72c0:	90 01 00 0c 	stw     r0,12(r1)
	int err = 0;
    72c4:	38 00 00 00 	li      r0,0
    72c8:	90 01 00 08 	stw     r0,8(r1)
	struct sadb_x_policy *pol;
	struct xfrm_policy *xp;
	struct km_event c;
	struct sadb_x_sec_ctx *sec_ctx;

	if (!present_and_same_family(ext_hdrs[SADB_EXT_ADDRESS_SRC-1],
    72cc:	80 01 00 94 	lwz     r0,148(r1)
    72d0:	30 00 00 10 	addic   r0,r0,16
    72d4:	7c 07 03 78 	mr      r7,r0
    72d8:	81 27 00 00 	lwz     r9,0(r7)
				     ext_hdrs[SADB_EXT_ADDRESS_DST-1]) ||
    72dc:	80 01 00 94 	lwz     r0,148(r1)
    72e0:	30 00 00 14 	addic   r0,r0,20
	struct sadb_x_policy *pol;
	struct xfrm_policy *xp;
	struct km_event c;
	struct sadb_x_sec_ctx *sec_ctx;

	if (!present_and_same_family(ext_hdrs[SADB_EXT_ADDRESS_SRC-1],
    72e4:	7c 08 03 78 	mr      r8,r0
    72e8:	80 08 00 00 	lwz     r0,0(r8)
    72ec:	7d 23 4b 78 	mr      r3,r9
    72f0:	7c 04 03 78 	mr      r4,r0
    72f4:	4b ff a0 b5 	bl      13a8 <present_and_same_family>
    72f8:	7c 60 1b 78 	mr      r0,r3
    72fc:	2f 80 00 00 	cmpwi   cr7,r0,0
    7300:	41 9e 00 1c 	beq-    cr7,731c <pfkey_spdadd+0x8c>
				     ext_hdrs[SADB_EXT_ADDRESS_DST-1]) ||
	    !ext_hdrs[SADB_X_EXT_POLICY-1])
    7304:	80 01 00 94 	lwz     r0,148(r1)
    7308:	30 00 00 44 	addic   r0,r0,68
    730c:	7c 09 03 78 	mr      r9,r0
    7310:	80 09 00 00 	lwz     r0,0(r9)
	struct xfrm_policy *xp;
	struct km_event c;
	struct sadb_x_sec_ctx *sec_ctx;

	if (!present_and_same_family(ext_hdrs[SADB_EXT_ADDRESS_SRC-1],
				     ext_hdrs[SADB_EXT_ADDRESS_DST-1]) ||
    7314:	2f 80 00 00 	cmpwi   cr7,r0,0
    7318:	40 9e 00 0c 	bne-    cr7,7324 <pfkey_spdadd+0x94>
	    !ext_hdrs[SADB_X_EXT_POLICY-1])
		return -EINVAL;
    731c:	38 00 ff ea 	li      r0,-22
    7320:	48 00 0c ac 	b       7fcc <pfkey_spdadd+0xd3c>

	pol = ext_hdrs[SADB_X_EXT_POLICY-1];
    7324:	80 01 00 94 	lwz     r0,148(r1)
    7328:	7c 0a 03 78 	mr      r10,r0
    732c:	80 0a 00 44 	lwz     r0,68(r10)
    7330:	90 01 00 10 	stw     r0,16(r1)
	if (pol->sadb_x_policy_type > IPSEC_POLICY_IPSEC)
    7334:	80 01 00 10 	lwz     r0,16(r1)
    7338:	7c 0b 03 78 	mr      r11,r0
    733c:	a0 0b 00 04 	lhz     r0,4(r11)
    7340:	54 00 04 3e 	clrlwi  r0,r0,16
    7344:	2b 80 00 02 	cmplwi  cr7,r0,2
    7348:	40 9d 00 0c 	ble-    cr7,7354 <pfkey_spdadd+0xc4>
		return -EINVAL;
    734c:	38 00 ff ea 	li      r0,-22
    7350:	48 00 0c 7c 	b       7fcc <pfkey_spdadd+0xd3c>
	if (!pol->sadb_x_policy_dir || pol->sadb_x_policy_dir >= IPSEC_DIR_MAX)
    7354:	80 01 00 10 	lwz     r0,16(r1)
    7358:	7c 07 03 78 	mr      r7,r0
    735c:	88 07 00 06 	lbz     r0,6(r7)
    7360:	54 00 06 3e 	clrlwi  r0,r0,24
    7364:	2f 80 00 00 	cmpwi   cr7,r0,0
    7368:	41 9e 00 1c 	beq-    cr7,7384 <pfkey_spdadd+0xf4>
    736c:	80 01 00 10 	lwz     r0,16(r1)
    7370:	7c 08 03 78 	mr      r8,r0
    7374:	88 08 00 06 	lbz     r0,6(r8)
    7378:	54 00 06 3e 	clrlwi  r0,r0,24
    737c:	2b 80 00 03 	cmplwi  cr7,r0,3
    7380:	40 9d 00 0c 	ble-    cr7,738c <pfkey_spdadd+0xfc>
		return -EINVAL;
    7384:	38 00 ff ea 	li      r0,-22
    7388:	48 00 0c 44 	b       7fcc <pfkey_spdadd+0xd3c>

	xp = xfrm_policy_alloc(net, GFP_KERNEL);
    738c:	80 61 00 0c 	lwz     r3,12(r1)
    7390:	38 80 00 d0 	li      r4,208
    7394:	48 00 00 01 	bl      7394 <pfkey_spdadd+0x104>
    7398:	90 61 00 14 	stw     r3,20(r1)
	if (xp == NULL)
    739c:	80 01 00 14 	lwz     r0,20(r1)
    73a0:	2f 80 00 00 	cmpwi   cr7,r0,0
    73a4:	40 9e 00 0c 	bne-    cr7,73b0 <pfkey_spdadd+0x120>
		return -ENOBUFS;
    73a8:	38 00 ff 97 	li      r0,-105
    73ac:	48 00 0c 20 	b       7fcc <pfkey_spdadd+0xd3c>

	xp->action = (pol->sadb_x_policy_type == IPSEC_POLICY_DISCARD ?
    73b0:	80 01 00 10 	lwz     r0,16(r1)
    73b4:	7c 09 03 78 	mr      r9,r0
    73b8:	a0 09 00 04 	lhz     r0,4(r9)
    73bc:	54 00 04 3e 	clrlwi  r0,r0,16
		      XFRM_POLICY_BLOCK : XFRM_POLICY_ALLOW);
    73c0:	2f 80 00 00 	cmpwi   cr7,r0,0
    73c4:	7c 00 00 26 	mfcr    r0
    73c8:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
    73cc:	54 09 06 3e 	clrlwi  r9,r0,24

	xp = xfrm_policy_alloc(net, GFP_KERNEL);
	if (xp == NULL)
		return -ENOBUFS;

	xp->action = (pol->sadb_x_policy_type == IPSEC_POLICY_DISCARD ?
    73d0:	80 01 00 14 	lwz     r0,20(r1)
    73d4:	7c 0a 03 78 	mr      r10,r0
    73d8:	99 2a 00 ed 	stb     r9,237(r10)
		      XFRM_POLICY_BLOCK : XFRM_POLICY_ALLOW);
	xp->priority = pol->sadb_x_policy_priority;
    73dc:	80 01 00 10 	lwz     r0,16(r1)
    73e0:	7c 0b 03 78 	mr      r11,r0
    73e4:	81 2b 00 0c 	lwz     r9,12(r11)
    73e8:	80 01 00 14 	lwz     r0,20(r1)
    73ec:	7c 07 03 78 	mr      r7,r0
    73f0:	91 27 00 38 	stw     r9,56(r7)

	sa = ext_hdrs[SADB_EXT_ADDRESS_SRC-1],
    73f4:	80 01 00 94 	lwz     r0,148(r1)
    73f8:	7c 08 03 78 	mr      r8,r0
    73fc:	80 08 00 10 	lwz     r0,16(r8)
    7400:	90 01 00 18 	stw     r0,24(r1)
	xp->family = pfkey_sadb_addr2xfrm_addr(sa, &xp->selector.saddr);
    7404:	80 01 00 14 	lwz     r0,20(r1)
    7408:	30 00 00 58 	addic   r0,r0,88
    740c:	80 61 00 18 	lwz     r3,24(r1)
    7410:	7c 04 03 78 	mr      r4,r0
    7414:	4b ff a4 c5 	bl      18d8 <pfkey_sadb_addr2xfrm_addr>
    7418:	7c 60 1b 78 	mr      r0,r3
    741c:	54 09 04 3e 	clrlwi  r9,r0,16
    7420:	80 01 00 14 	lwz     r0,20(r1)
    7424:	7c 0a 03 78 	mr      r10,r0
    7428:	b1 2a 00 f0 	sth     r9,240(r10)
	if (!xp->family) {
    742c:	80 01 00 14 	lwz     r0,20(r1)
    7430:	7c 0b 03 78 	mr      r11,r0
    7434:	a0 0b 00 f0 	lhz     r0,240(r11)
    7438:	54 00 04 3e 	clrlwi  r0,r0,16
    743c:	2f 80 00 00 	cmpwi   cr7,r0,0
    7440:	40 9e 00 10 	bne-    cr7,7450 <pfkey_spdadd+0x1c0>
		err = -EINVAL;
    7444:	38 00 ff ea 	li      r0,-22
    7448:	90 01 00 08 	stw     r0,8(r1)
		goto out;
    744c:	48 00 0b 64 	b       7fb0 <pfkey_spdadd+0xd20>
	}
	xp->selector.family = xp->family;
    7450:	80 01 00 14 	lwz     r0,20(r1)
    7454:	7c 07 03 78 	mr      r7,r0
    7458:	a0 07 00 f0 	lhz     r0,240(r7)
    745c:	54 09 04 3e 	clrlwi  r9,r0,16
    7460:	80 01 00 14 	lwz     r0,20(r1)
    7464:	7c 08 03 78 	mr      r8,r0
    7468:	b1 28 00 70 	sth     r9,112(r8)
	xp->selector.prefixlen_s = sa->sadb_address_prefixlen;
    746c:	80 01 00 18 	lwz     r0,24(r1)
    7470:	7c 09 03 78 	mr      r9,r0
    7474:	88 09 00 05 	lbz     r0,5(r9)
    7478:	54 09 06 3e 	clrlwi  r9,r0,24
    747c:	80 01 00 14 	lwz     r0,20(r1)
    7480:	7c 0a 03 78 	mr      r10,r0
    7484:	99 2a 00 73 	stb     r9,115(r10)
	xp->selector.proto = pfkey_proto_to_xfrm(sa->sadb_address_proto);
    7488:	80 01 00 18 	lwz     r0,24(r1)
    748c:	7c 0b 03 78 	mr      r11,r0
    7490:	88 0b 00 04 	lbz     r0,4(r11)
    7494:	54 00 06 3e 	clrlwi  r0,r0,24
    7498:	7c 03 03 78 	mr      r3,r0
    749c:	4b ff a3 29 	bl      17c4 <pfkey_proto_to_xfrm>
    74a0:	7c 60 1b 78 	mr      r0,r3
    74a4:	7c 09 03 78 	mr      r9,r0
    74a8:	80 01 00 14 	lwz     r0,20(r1)
    74ac:	7c 07 03 78 	mr      r7,r0
    74b0:	99 27 00 74 	stb     r9,116(r7)
	xp->selector.sport = ((struct sockaddr_in *)(sa+1))->sin_port;
    74b4:	80 01 00 18 	lwz     r0,24(r1)
    74b8:	30 00 00 08 	addic   r0,r0,8
    74bc:	7c 08 03 78 	mr      r8,r0
    74c0:	a0 08 00 02 	lhz     r0,2(r8)
    74c4:	54 09 04 3e 	clrlwi  r9,r0,16
    74c8:	80 01 00 14 	lwz     r0,20(r1)
    74cc:	7c 0a 03 78 	mr      r10,r0
    74d0:	b1 2a 00 6c 	sth     r9,108(r10)
	if (xp->selector.sport)
    74d4:	80 01 00 14 	lwz     r0,20(r1)
    74d8:	7c 0b 03 78 	mr      r11,r0
    74dc:	a0 0b 00 6c 	lhz     r0,108(r11)
    74e0:	54 00 04 3e 	clrlwi  r0,r0,16
    74e4:	2f 80 00 00 	cmpwi   cr7,r0,0
    74e8:	41 9e 00 14 	beq-    cr7,74fc <pfkey_spdadd+0x26c>
		xp->selector.sport_mask = htons(0xffff);
    74ec:	80 01 00 14 	lwz     r0,20(r1)
    74f0:	39 20 ff ff 	li      r9,-1
    74f4:	7c 07 03 78 	mr      r7,r0
    74f8:	b1 27 00 6e 	sth     r9,110(r7)

	sa = ext_hdrs[SADB_EXT_ADDRESS_DST-1],
    74fc:	80 01 00 94 	lwz     r0,148(r1)
    7500:	7c 08 03 78 	mr      r8,r0
    7504:	80 08 00 14 	lwz     r0,20(r8)
    7508:	90 01 00 18 	stw     r0,24(r1)
	pfkey_sadb_addr2xfrm_addr(sa, &xp->selector.daddr);
    750c:	80 01 00 14 	lwz     r0,20(r1)
    7510:	30 00 00 48 	addic   r0,r0,72
    7514:	80 61 00 18 	lwz     r3,24(r1)
    7518:	7c 04 03 78 	mr      r4,r0
    751c:	4b ff a3 bd 	bl      18d8 <pfkey_sadb_addr2xfrm_addr>
	xp->selector.prefixlen_d = sa->sadb_address_prefixlen;
    7520:	80 01 00 18 	lwz     r0,24(r1)
    7524:	7c 09 03 78 	mr      r9,r0
    7528:	88 09 00 05 	lbz     r0,5(r9)
    752c:	54 09 06 3e 	clrlwi  r9,r0,24
    7530:	80 01 00 14 	lwz     r0,20(r1)
    7534:	7c 0a 03 78 	mr      r10,r0
    7538:	99 2a 00 72 	stb     r9,114(r10)

	/* Amusing, we set this twice.  KAME apps appear to set same value
	 * in both addresses.
	 */
	xp->selector.proto = pfkey_proto_to_xfrm(sa->sadb_address_proto);
    753c:	80 01 00 18 	lwz     r0,24(r1)
    7540:	7c 0b 03 78 	mr      r11,r0
    7544:	88 0b 00 04 	lbz     r0,4(r11)
    7548:	54 00 06 3e 	clrlwi  r0,r0,24
    754c:	7c 03 03 78 	mr      r3,r0
    7550:	4b ff a2 75 	bl      17c4 <pfkey_proto_to_xfrm>
    7554:	7c 60 1b 78 	mr      r0,r3
    7558:	7c 09 03 78 	mr      r9,r0
    755c:	80 01 00 14 	lwz     r0,20(r1)
    7560:	7c 07 03 78 	mr      r7,r0
    7564:	99 27 00 74 	stb     r9,116(r7)

	xp->selector.dport = ((struct sockaddr_in *)(sa+1))->sin_port;
    7568:	80 01 00 18 	lwz     r0,24(r1)
    756c:	30 00 00 08 	addic   r0,r0,8
    7570:	7c 08 03 78 	mr      r8,r0
    7574:	a0 08 00 02 	lhz     r0,2(r8)
    7578:	54 09 04 3e 	clrlwi  r9,r0,16
    757c:	80 01 00 14 	lwz     r0,20(r1)
    7580:	7c 0a 03 78 	mr      r10,r0
    7584:	b1 2a 00 68 	sth     r9,104(r10)
	if (xp->selector.dport)
    7588:	80 01 00 14 	lwz     r0,20(r1)
    758c:	7c 0b 03 78 	mr      r11,r0
    7590:	a0 0b 00 68 	lhz     r0,104(r11)
    7594:	54 00 04 3e 	clrlwi  r0,r0,16
    7598:	2f 80 00 00 	cmpwi   cr7,r0,0
    759c:	41 9e 00 14 	beq-    cr7,75b0 <pfkey_spdadd+0x320>
		xp->selector.dport_mask = htons(0xffff);
    75a0:	80 01 00 14 	lwz     r0,20(r1)
    75a4:	39 20 ff ff 	li      r9,-1
    75a8:	7c 07 03 78 	mr      r7,r0
    75ac:	b1 27 00 6a 	sth     r9,106(r7)

	sec_ctx = (struct sadb_x_sec_ctx *) ext_hdrs[SADB_X_EXT_SEC_CTX-1];
    75b0:	80 01 00 94 	lwz     r0,148(r1)
    75b4:	7c 08 03 78 	mr      r8,r0
    75b8:	80 08 00 5c 	lwz     r0,92(r8)
    75bc:	90 01 00 1c 	stw     r0,28(r1)
	if (sec_ctx != NULL) {
    75c0:	80 01 00 1c 	lwz     r0,28(r1)
    75c4:	2f 80 00 00 	cmpwi   cr7,r0,0
    75c8:	41 9e 01 84 	beq-    cr7,774c <pfkey_spdadd+0x4bc>
    75cc:	80 01 00 1c 	lwz     r0,28(r1)
    75d0:	90 01 00 28 	stw     r0,40(r1)
	return 0;
}

static inline struct xfrm_user_sec_ctx *pfkey_sadb2xfrm_user_sec_ctx(struct sadb_x_sec_ctx *sec_ctx)
{
	struct xfrm_user_sec_ctx *uctx = NULL;
    75d4:	38 00 00 00 	li      r0,0
    75d8:	90 01 00 2c 	stw     r0,44(r1)
	int ctx_size = sec_ctx->sadb_x_ctx_len;
    75dc:	80 01 00 28 	lwz     r0,40(r1)
    75e0:	7c 09 03 78 	mr      r9,r0
    75e4:	a0 09 00 06 	lhz     r0,6(r9)
    75e8:	54 00 04 3e 	clrlwi  r0,r0,16
    75ec:	90 01 00 30 	stw     r0,48(r1)

	uctx = kmalloc((sizeof(*uctx)+ctx_size), GFP_KERNEL);
    75f0:	80 01 00 30 	lwz     r0,48(r1)
    75f4:	30 00 00 08 	addic   r0,r0,8
    75f8:	90 01 00 34 	stw     r0,52(r1)
    75fc:	38 00 00 d0 	li      r0,208
    7600:	90 01 00 38 	stw     r0,56(r1)
    7604:	80 61 00 34 	lwz     r3,52(r1)
    7608:	80 81 00 38 	lwz     r4,56(r1)
    760c:	48 00 00 01 	bl      760c <pfkey_spdadd+0x37c>
    7610:	7c 60 1b 78 	mr      r0,r3
    7614:	90 01 00 2c 	stw     r0,44(r1)

	if (!uctx)
    7618:	80 01 00 2c 	lwz     r0,44(r1)
    761c:	2f 80 00 00 	cmpwi   cr7,r0,0
    7620:	40 9e 00 0c 	bne-    cr7,762c <pfkey_spdadd+0x39c>
		return NULL;
    7624:	38 00 00 00 	li      r0,0
    7628:	48 00 00 d8 	b       7700 <pfkey_spdadd+0x470>
    762c:	80 01 00 28 	lwz     r0,40(r1)
    7630:	90 01 00 3c 	stw     r0,60(r1)
	return 0;
}

static inline int pfkey_sec_ctx_len(struct sadb_x_sec_ctx *sec_ctx)
{
	return DIV_ROUND_UP(sizeof(struct sadb_x_sec_ctx) +
    7634:	80 01 00 3c 	lwz     r0,60(r1)
    7638:	7c 0a 03 78 	mr      r10,r0
    763c:	a0 0a 00 06 	lhz     r0,6(r10)
    7640:	54 00 04 3e 	clrlwi  r0,r0,16
    7644:	30 00 00 0f 	addic   r0,r0,15
    7648:	54 00 e8 fe 	rlwinm  r0,r0,29,3,31
	uctx = kmalloc((sizeof(*uctx)+ctx_size), GFP_KERNEL);

	if (!uctx)
		return NULL;

	uctx->len = pfkey_sec_ctx_len(sec_ctx);
    764c:	54 09 04 3e 	clrlwi  r9,r0,16
    7650:	80 01 00 2c 	lwz     r0,44(r1)
    7654:	7c 0b 03 78 	mr      r11,r0
    7658:	b1 2b 00 00 	sth     r9,0(r11)
	uctx->exttype = sec_ctx->sadb_x_sec_exttype;
    765c:	80 01 00 28 	lwz     r0,40(r1)
    7660:	7c 07 03 78 	mr      r7,r0
    7664:	a0 07 00 02 	lhz     r0,2(r7)
    7668:	54 09 04 3e 	clrlwi  r9,r0,16
    766c:	80 01 00 2c 	lwz     r0,44(r1)
    7670:	7c 08 03 78 	mr      r8,r0
    7674:	b1 28 00 02 	sth     r9,2(r8)
	uctx->ctx_doi = sec_ctx->sadb_x_ctx_doi;
    7678:	80 01 00 28 	lwz     r0,40(r1)
    767c:	7c 09 03 78 	mr      r9,r0
    7680:	88 09 00 05 	lbz     r0,5(r9)
    7684:	54 09 06 3e 	clrlwi  r9,r0,24
    7688:	80 01 00 2c 	lwz     r0,44(r1)
    768c:	7c 0a 03 78 	mr      r10,r0
    7690:	99 2a 00 05 	stb     r9,5(r10)
	uctx->ctx_alg = sec_ctx->sadb_x_ctx_alg;
    7694:	80 01 00 28 	lwz     r0,40(r1)
    7698:	7c 0b 03 78 	mr      r11,r0
    769c:	88 0b 00 04 	lbz     r0,4(r11)
    76a0:	54 09 06 3e 	clrlwi  r9,r0,24
    76a4:	80 01 00 2c 	lwz     r0,44(r1)
    76a8:	7c 07 03 78 	mr      r7,r0
    76ac:	99 27 00 04 	stb     r9,4(r7)
	uctx->ctx_len = sec_ctx->sadb_x_ctx_len;
    76b0:	80 01 00 28 	lwz     r0,40(r1)
    76b4:	7c 08 03 78 	mr      r8,r0
    76b8:	a0 08 00 06 	lhz     r0,6(r8)
    76bc:	54 09 04 3e 	clrlwi  r9,r0,16
    76c0:	80 01 00 2c 	lwz     r0,44(r1)
    76c4:	7c 0a 03 78 	mr      r10,r0
    76c8:	b1 2a 00 06 	sth     r9,6(r10)
	memcpy(uctx + 1, sec_ctx + 1,
    76cc:	80 01 00 2c 	lwz     r0,44(r1)
    76d0:	31 60 00 08 	addic   r11,r0,8
    76d4:	80 01 00 28 	lwz     r0,40(r1)
    76d8:	31 20 00 08 	addic   r9,r0,8
	       uctx->ctx_len);
    76dc:	80 01 00 2c 	lwz     r0,44(r1)
    76e0:	7c 07 03 78 	mr      r7,r0
    76e4:	a0 07 00 06 	lhz     r0,6(r7)
    76e8:	54 00 04 3e 	clrlwi  r0,r0,16
	uctx->len = pfkey_sec_ctx_len(sec_ctx);
	uctx->exttype = sec_ctx->sadb_x_sec_exttype;
	uctx->ctx_doi = sec_ctx->sadb_x_ctx_doi;
	uctx->ctx_alg = sec_ctx->sadb_x_ctx_alg;
	uctx->ctx_len = sec_ctx->sadb_x_ctx_len;
	memcpy(uctx + 1, sec_ctx + 1,
    76ec:	7d 63 5b 78 	mr      r3,r11
    76f0:	7d 24 4b 78 	mr      r4,r9
    76f4:	7c 05 03 78 	mr      r5,r0
    76f8:	48 00 00 01 	bl      76f8 <pfkey_spdadd+0x468>
	       uctx->ctx_len);

	return uctx;
    76fc:	80 01 00 2c 	lwz     r0,44(r1)
	if (xp->selector.dport)
		xp->selector.dport_mask = htons(0xffff);

	sec_ctx = (struct sadb_x_sec_ctx *) ext_hdrs[SADB_X_EXT_SEC_CTX-1];
	if (sec_ctx != NULL) {
		struct xfrm_user_sec_ctx *uctx = pfkey_sadb2xfrm_user_sec_ctx(sec_ctx);
    7700:	90 01 00 20 	stw     r0,32(r1)

		if (!uctx) {
    7704:	80 01 00 20 	lwz     r0,32(r1)
    7708:	2f 80 00 00 	cmpwi   cr7,r0,0
    770c:	40 9e 00 10 	bne-    cr7,771c <pfkey_spdadd+0x48c>
			err = -ENOBUFS;
    7710:	38 00 ff 97 	li      r0,-105
    7714:	90 01 00 08 	stw     r0,8(r1)
			goto out;
    7718:	48 00 08 98 	b       7fb0 <pfkey_spdadd+0xd20>
		}

		err = security_xfrm_policy_alloc(&xp->security, uctx);
    771c:	80 01 00 14 	lwz     r0,20(r1)
    7720:	30 00 00 f4 	addic   r0,r0,244
    7724:	90 01 00 50 	stw     r0,80(r1)
    7728:	80 01 00 20 	lwz     r0,32(r1)
    772c:	90 01 00 54 	stw     r0,84(r1)

#else	/* CONFIG_SECURITY_NETWORK_XFRM */

static inline int security_xfrm_policy_alloc(struct xfrm_sec_ctx **ctxp, struct xfrm_user_sec_ctx *sec_ctx)
{
	return 0;
    7730:	38 00 00 00 	li      r0,0
    7734:	90 01 00 08 	stw     r0,8(r1)
		kfree(uctx);
    7738:	80 61 00 20 	lwz     r3,32(r1)
    773c:	48 00 00 01 	bl      773c <pfkey_spdadd+0x4ac>

		if (err)
    7740:	80 01 00 08 	lwz     r0,8(r1)
    7744:	2f 80 00 00 	cmpwi   cr7,r0,0
    7748:	40 9e 08 54 	bne-    cr7,7f9c <pfkey_spdadd+0xd0c>
			goto out;
	}

	xp->lft.soft_byte_limit = XFRM_INF;
    774c:	80 01 00 14 	lwz     r0,20(r1)
    7750:	39 20 ff ff 	li      r9,-1
    7754:	39 40 ff ff 	li      r10,-1
    7758:	7c 08 03 78 	mr      r8,r0
    775c:	39 08 00 80 	addi    r8,r8,128
    7760:	91 28 00 00 	stw     r9,0(r8)
    7764:	91 48 00 04 	stw     r10,4(r8)
	xp->lft.hard_byte_limit = XFRM_INF;
    7768:	80 01 00 14 	lwz     r0,20(r1)
    776c:	39 20 ff ff 	li      r9,-1
    7770:	39 40 ff ff 	li      r10,-1
    7774:	7c 0b 03 78 	mr      r11,r0
    7778:	39 6b 00 88 	addi    r11,r11,136
    777c:	91 2b 00 00 	stw     r9,0(r11)
    7780:	91 4b 00 04 	stw     r10,4(r11)
	xp->lft.soft_packet_limit = XFRM_INF;
    7784:	80 01 00 14 	lwz     r0,20(r1)
    7788:	39 20 ff ff 	li      r9,-1
    778c:	39 40 ff ff 	li      r10,-1
    7790:	7c 07 03 78 	mr      r7,r0
    7794:	38 e7 00 90 	addi    r7,r7,144
    7798:	91 27 00 00 	stw     r9,0(r7)
    779c:	91 47 00 04 	stw     r10,4(r7)
	xp->lft.hard_packet_limit = XFRM_INF;
    77a0:	80 01 00 14 	lwz     r0,20(r1)
    77a4:	39 20 ff ff 	li      r9,-1
    77a8:	39 40 ff ff 	li      r10,-1
    77ac:	7c 08 03 78 	mr      r8,r0
    77b0:	39 08 00 98 	addi    r8,r8,152
    77b4:	91 28 00 00 	stw     r9,0(r8)
    77b8:	91 48 00 04 	stw     r10,4(r8)
	if ((lifetime = ext_hdrs[SADB_EXT_LIFETIME_HARD-1]) != NULL) {
    77bc:	80 01 00 94 	lwz     r0,148(r1)
    77c0:	7c 09 03 78 	mr      r9,r0
    77c4:	80 09 00 08 	lwz     r0,8(r9)
    77c8:	90 01 00 24 	stw     r0,36(r1)
    77cc:	80 01 00 24 	lwz     r0,36(r1)
    77d0:	2f 80 00 00 	cmpwi   cr7,r0,0
    77d4:	41 9e 03 14 	beq-    cr7,7ae8 <pfkey_spdadd+0x858>
		xp->lft.hard_packet_limit = _KEY2X(lifetime->sadb_lifetime_allocations);
    77d8:	80 01 00 24 	lwz     r0,36(r1)
    77dc:	7c 0a 03 78 	mr      r10,r0
    77e0:	80 0a 00 04 	lwz     r0,4(r10)
    77e4:	2f 80 00 00 	cmpwi   cr7,r0,0
    77e8:	41 9e 00 1c 	beq-    cr7,7804 <pfkey_spdadd+0x574>
    77ec:	80 01 00 24 	lwz     r0,36(r1)
    77f0:	7c 0b 03 78 	mr      r11,r0
    77f4:	80 0b 00 04 	lwz     r0,4(r11)
    77f8:	7c 1d 03 78 	mr      r29,r0
    77fc:	3b 80 00 00 	li      r28,0
    7800:	48 00 00 0c 	b       780c <pfkey_spdadd+0x57c>
    7804:	3b 80 ff ff 	li      r28,-1
    7808:	3b a0 ff ff 	li      r29,-1
    780c:	80 01 00 14 	lwz     r0,20(r1)
    7810:	7c 07 03 78 	mr      r7,r0
    7814:	38 e7 00 98 	addi    r7,r7,152
    7818:	93 87 00 00 	stw     r28,0(r7)
    781c:	93 a7 00 04 	stw     r29,4(r7)
		xp->lft.hard_byte_limit = _KEY2X(lifetime->sadb_lifetime_bytes);
    7820:	80 01 00 24 	lwz     r0,36(r1)
    7824:	7c 08 03 78 	mr      r8,r0
    7828:	89 68 00 0c 	lbz     r11,12(r8)
    782c:	55 6b 06 3e 	clrlwi  r11,r11,24
    7830:	55 6b c0 0e 	rlwinm  r11,r11,24,0,7
    7834:	7c 09 03 78 	mr      r9,r0
    7838:	89 09 00 0d 	lbz     r8,13(r9)
    783c:	55 08 06 3e 	clrlwi  r8,r8,24
    7840:	55 08 80 1e 	rlwinm  r8,r8,16,0,15
    7844:	7d 0b 5b 78 	or      r11,r8,r11
    7848:	7c 0a 03 78 	mr      r10,r0
    784c:	89 0a 00 0e 	lbz     r8,14(r10)
    7850:	55 08 06 3e 	clrlwi  r8,r8,24
    7854:	55 08 40 2e 	rlwinm  r8,r8,8,0,23
    7858:	7d 0b 5b 78 	or      r11,r8,r11
    785c:	7c 07 03 78 	mr      r7,r0
    7860:	89 07 00 0f 	lbz     r8,15(r7)
    7864:	55 08 06 3e 	clrlwi  r8,r8,24
    7868:	7d 0b 5b 78 	or      r11,r8,r11
    786c:	7d 6a 5b 78 	mr      r10,r11
    7870:	7c 08 03 78 	mr      r8,r0
    7874:	89 68 00 08 	lbz     r11,8(r8)
    7878:	55 6b 06 3e 	clrlwi  r11,r11,24
    787c:	55 6b c0 0e 	rlwinm  r11,r11,24,0,7
    7880:	7c 07 03 78 	mr      r7,r0
    7884:	89 07 00 09 	lbz     r8,9(r7)
    7888:	55 08 06 3e 	clrlwi  r8,r8,24
    788c:	55 08 80 1e 	rlwinm  r8,r8,16,0,15
    7890:	7d 0b 5b 78 	or      r11,r8,r11
    7894:	7c 07 03 78 	mr      r7,r0
    7898:	89 07 00 0a 	lbz     r8,10(r7)
    789c:	55 08 06 3e 	clrlwi  r8,r8,24
    78a0:	55 08 40 2e 	rlwinm  r8,r8,8,0,23
    78a4:	7d 0b 5b 78 	or      r11,r8,r11
    78a8:	7c 08 03 78 	mr      r8,r0
    78ac:	88 08 00 0b 	lbz     r0,11(r8)
    78b0:	54 00 06 3e 	clrlwi  r0,r0,24
    78b4:	7c 00 5b 78 	or      r0,r0,r11
    78b8:	7c 09 03 78 	mr      r9,r0
    78bc:	7d 20 4b 78 	mr      r0,r9
    78c0:	7c 00 53 78 	or      r0,r0,r10
    78c4:	2f 80 00 00 	cmpwi   cr7,r0,0
    78c8:	41 9e 00 a4 	beq-    cr7,796c <pfkey_spdadd+0x6dc>
    78cc:	80 01 00 24 	lwz     r0,36(r1)
    78d0:	7c 09 03 78 	mr      r9,r0
    78d4:	89 69 00 0c 	lbz     r11,12(r9)
    78d8:	55 6b 06 3e 	clrlwi  r11,r11,24
    78dc:	55 6b c0 0e 	rlwinm  r11,r11,24,0,7
    78e0:	7c 0a 03 78 	mr      r10,r0
    78e4:	89 0a 00 0d 	lbz     r8,13(r10)
    78e8:	55 08 06 3e 	clrlwi  r8,r8,24
    78ec:	55 08 80 1e 	rlwinm  r8,r8,16,0,15
    78f0:	7d 0b 5b 78 	or      r11,r8,r11
    78f4:	7c 07 03 78 	mr      r7,r0
    78f8:	89 07 00 0e 	lbz     r8,14(r7)
    78fc:	55 08 06 3e 	clrlwi  r8,r8,24
    7900:	55 08 40 2e 	rlwinm  r8,r8,8,0,23
    7904:	7d 0b 5b 78 	or      r11,r8,r11
    7908:	7c 09 03 78 	mr      r9,r0
    790c:	89 09 00 0f 	lbz     r8,15(r9)
    7910:	55 08 06 3e 	clrlwi  r8,r8,24
    7914:	7d 0b 5b 78 	or      r11,r8,r11
    7918:	7d 6a 5b 78 	mr      r10,r11
    791c:	7c 07 03 78 	mr      r7,r0
    7920:	89 67 00 08 	lbz     r11,8(r7)
    7924:	55 6b 06 3e 	clrlwi  r11,r11,24
    7928:	55 6b c0 0e 	rlwinm  r11,r11,24,0,7
    792c:	7c 07 03 78 	mr      r7,r0
    7930:	89 07 00 09 	lbz     r8,9(r7)
    7934:	55 08 06 3e 	clrlwi  r8,r8,24
    7938:	55 08 80 1e 	rlwinm  r8,r8,16,0,15
    793c:	7d 0b 5b 78 	or      r11,r8,r11
    7940:	7c 07 03 78 	mr      r7,r0
    7944:	89 07 00 0a 	lbz     r8,10(r7)
    7948:	55 08 06 3e 	clrlwi  r8,r8,24
    794c:	55 08 40 2e 	rlwinm  r8,r8,8,0,23
    7950:	7d 0b 5b 78 	or      r11,r8,r11
    7954:	7c 08 03 78 	mr      r8,r0
    7958:	88 08 00 0b 	lbz     r0,11(r8)
    795c:	54 00 06 3e 	clrlwi  r0,r0,24
    7960:	7c 00 5b 78 	or      r0,r0,r11
    7964:	7c 09 03 78 	mr      r9,r0
    7968:	48 00 00 0c 	b       7974 <pfkey_spdadd+0x6e4>
    796c:	39 20 ff ff 	li      r9,-1
    7970:	39 40 ff ff 	li      r10,-1
    7974:	80 01 00 14 	lwz     r0,20(r1)
    7978:	7c 0b 03 78 	mr      r11,r0
    797c:	39 6b 00 88 	addi    r11,r11,136
    7980:	91 2b 00 00 	stw     r9,0(r11)
    7984:	91 4b 00 04 	stw     r10,4(r11)
		xp->lft.hard_add_expires_seconds = lifetime->sadb_lifetime_addtime;
    7988:	80 01 00 24 	lwz     r0,36(r1)
    798c:	7c 07 03 78 	mr      r7,r0
    7990:	89 67 00 14 	lbz     r11,20(r7)
    7994:	55 6b 06 3e 	clrlwi  r11,r11,24
    7998:	55 6b c0 0e 	rlwinm  r11,r11,24,0,7
    799c:	7c 09 03 78 	mr      r9,r0
    79a0:	89 09 00 15 	lbz     r8,21(r9)
    79a4:	55 08 06 3e 	clrlwi  r8,r8,24
    79a8:	55 08 80 1e 	rlwinm  r8,r8,16,0,15
    79ac:	7d 0b 5b 78 	or      r11,r8,r11
    79b0:	7c 0a 03 78 	mr      r10,r0
    79b4:	89 0a 00 16 	lbz     r8,22(r10)
    79b8:	55 08 06 3e 	clrlwi  r8,r8,24
    79bc:	55 08 40 2e 	rlwinm  r8,r8,8,0,23
    79c0:	7d 0b 5b 78 	or      r11,r8,r11
    79c4:	7c 07 03 78 	mr      r7,r0
    79c8:	89 07 00 17 	lbz     r8,23(r7)
    79cc:	55 08 06 3e 	clrlwi  r8,r8,24
    79d0:	7d 0b 5b 78 	or      r11,r8,r11
    79d4:	7d 6a 5b 78 	mr      r10,r11
    79d8:	7c 08 03 78 	mr      r8,r0
    79dc:	89 68 00 10 	lbz     r11,16(r8)
    79e0:	55 6b 06 3e 	clrlwi  r11,r11,24
    79e4:	55 6b c0 0e 	rlwinm  r11,r11,24,0,7
    79e8:	7c 07 03 78 	mr      r7,r0
    79ec:	89 07 00 11 	lbz     r8,17(r7)
    79f0:	55 08 06 3e 	clrlwi  r8,r8,24
    79f4:	55 08 80 1e 	rlwinm  r8,r8,16,0,15
    79f8:	7d 0b 5b 78 	or      r11,r8,r11
    79fc:	7c 07 03 78 	mr      r7,r0
    7a00:	89 07 00 12 	lbz     r8,18(r7)
    7a04:	55 08 06 3e 	clrlwi  r8,r8,24
    7a08:	55 08 40 2e 	rlwinm  r8,r8,8,0,23
    7a0c:	7d 0b 5b 78 	or      r11,r8,r11
    7a10:	7c 08 03 78 	mr      r8,r0
    7a14:	88 08 00 13 	lbz     r0,19(r8)
    7a18:	54 00 06 3e 	clrlwi  r0,r0,24
    7a1c:	7c 00 5b 78 	or      r0,r0,r11
    7a20:	7c 09 03 78 	mr      r9,r0
    7a24:	80 01 00 14 	lwz     r0,20(r1)
    7a28:	7c 0b 03 78 	mr      r11,r0
    7a2c:	39 6b 00 a8 	addi    r11,r11,168
    7a30:	91 2b 00 00 	stw     r9,0(r11)
    7a34:	91 4b 00 04 	stw     r10,4(r11)
		xp->lft.hard_use_expires_seconds = lifetime->sadb_lifetime_usetime;
    7a38:	80 01 00 24 	lwz     r0,36(r1)
    7a3c:	7c 07 03 78 	mr      r7,r0
    7a40:	89 67 00 1c 	lbz     r11,28(r7)
    7a44:	55 6b 06 3e 	clrlwi  r11,r11,24
    7a48:	55 6b c0 0e 	rlwinm  r11,r11,24,0,7
    7a4c:	7c 09 03 78 	mr      r9,r0
    7a50:	89 09 00 1d 	lbz     r8,29(r9)
    7a54:	55 08 06 3e 	clrlwi  r8,r8,24
    7a58:	55 08 80 1e 	rlwinm  r8,r8,16,0,15
    7a5c:	7d 0b 5b 78 	or      r11,r8,r11
    7a60:	7c 0a 03 78 	mr      r10,r0
    7a64:	89 0a 00 1e 	lbz     r8,30(r10)
    7a68:	55 08 06 3e 	clrlwi  r8,r8,24
    7a6c:	55 08 40 2e 	rlwinm  r8,r8,8,0,23
    7a70:	7d 0b 5b 78 	or      r11,r8,r11
    7a74:	7c 07 03 78 	mr      r7,r0
    7a78:	89 07 00 1f 	lbz     r8,31(r7)
    7a7c:	55 08 06 3e 	clrlwi  r8,r8,24
    7a80:	7d 0b 5b 78 	or      r11,r8,r11
    7a84:	7d 6a 5b 78 	mr      r10,r11
    7a88:	7c 08 03 78 	mr      r8,r0
    7a8c:	89 68 00 18 	lbz     r11,24(r8)
    7a90:	55 6b 06 3e 	clrlwi  r11,r11,24
    7a94:	55 6b c0 0e 	rlwinm  r11,r11,24,0,7
    7a98:	7c 07 03 78 	mr      r7,r0
    7a9c:	89 07 00 19 	lbz     r8,25(r7)
    7aa0:	55 08 06 3e 	clrlwi  r8,r8,24
    7aa4:	55 08 80 1e 	rlwinm  r8,r8,16,0,15
    7aa8:	7d 0b 5b 78 	or      r11,r8,r11
    7aac:	7c 07 03 78 	mr      r7,r0
    7ab0:	89 07 00 1a 	lbz     r8,26(r7)
    7ab4:	55 08 06 3e 	clrlwi  r8,r8,24
    7ab8:	55 08 40 2e 	rlwinm  r8,r8,8,0,23
    7abc:	7d 0b 5b 78 	or      r11,r8,r11
    7ac0:	7c 08 03 78 	mr      r8,r0
    7ac4:	88 08 00 1b 	lbz     r0,27(r8)
    7ac8:	54 00 06 3e 	clrlwi  r0,r0,24
    7acc:	7c 00 5b 78 	or      r0,r0,r11
    7ad0:	7c 09 03 78 	mr      r9,r0
    7ad4:	80 01 00 14 	lwz     r0,20(r1)
    7ad8:	7c 0b 03 78 	mr      r11,r0
    7adc:	39 6b 00 b8 	addi    r11,r11,184
    7ae0:	91 2b 00 00 	stw     r9,0(r11)
    7ae4:	91 4b 00 04 	stw     r10,4(r11)
	}
	if ((lifetime = ext_hdrs[SADB_EXT_LIFETIME_SOFT-1]) != NULL) {
    7ae8:	80 01 00 94 	lwz     r0,148(r1)
    7aec:	7c 07 03 78 	mr      r7,r0
    7af0:	80 07 00 0c 	lwz     r0,12(r7)
    7af4:	90 01 00 24 	stw     r0,36(r1)
    7af8:	80 01 00 24 	lwz     r0,36(r1)
    7afc:	2f 80 00 00 	cmpwi   cr7,r0,0
    7b00:	41 9e 03 14 	beq-    cr7,7e14 <pfkey_spdadd+0xb84>
		xp->lft.soft_packet_limit = _KEY2X(lifetime->sadb_lifetime_allocations);
    7b04:	80 01 00 24 	lwz     r0,36(r1)
    7b08:	7c 08 03 78 	mr      r8,r0
    7b0c:	80 08 00 04 	lwz     r0,4(r8)
    7b10:	2f 80 00 00 	cmpwi   cr7,r0,0
    7b14:	41 9e 00 1c 	beq-    cr7,7b30 <pfkey_spdadd+0x8a0>
    7b18:	80 01 00 24 	lwz     r0,36(r1)
    7b1c:	7c 09 03 78 	mr      r9,r0
    7b20:	80 09 00 04 	lwz     r0,4(r9)
    7b24:	7c 1f 03 78 	mr      r31,r0
    7b28:	3b c0 00 00 	li      r30,0
    7b2c:	48 00 00 0c 	b       7b38 <pfkey_spdadd+0x8a8>
    7b30:	3b c0 ff ff 	li      r30,-1
    7b34:	3b e0 ff ff 	li      r31,-1
    7b38:	80 01 00 14 	lwz     r0,20(r1)
    7b3c:	7c 0a 03 78 	mr      r10,r0
    7b40:	39 4a 00 90 	addi    r10,r10,144
    7b44:	93 ca 00 00 	stw     r30,0(r10)
    7b48:	93 ea 00 04 	stw     r31,4(r10)
		xp->lft.soft_byte_limit = _KEY2X(lifetime->sadb_lifetime_bytes);
    7b4c:	80 01 00 24 	lwz     r0,36(r1)
    7b50:	7c 07 03 78 	mr      r7,r0
    7b54:	89 67 00 0c 	lbz     r11,12(r7)
    7b58:	55 6b 06 3e 	clrlwi  r11,r11,24
    7b5c:	55 6b c0 0e 	rlwinm  r11,r11,24,0,7
    7b60:	7c 09 03 78 	mr      r9,r0
    7b64:	89 09 00 0d 	lbz     r8,13(r9)
    7b68:	55 08 06 3e 	clrlwi  r8,r8,24
    7b6c:	55 08 80 1e 	rlwinm  r8,r8,16,0,15
    7b70:	7d 0b 5b 78 	or      r11,r8,r11
    7b74:	7c 0a 03 78 	mr      r10,r0
    7b78:	89 0a 00 0e 	lbz     r8,14(r10)
    7b7c:	55 08 06 3e 	clrlwi  r8,r8,24
    7b80:	55 08 40 2e 	rlwinm  r8,r8,8,0,23
    7b84:	7d 0b 5b 78 	or      r11,r8,r11
    7b88:	7c 07 03 78 	mr      r7,r0
    7b8c:	89 07 00 0f 	lbz     r8,15(r7)
    7b90:	55 08 06 3e 	clrlwi  r8,r8,24
    7b94:	7d 0b 5b 78 	or      r11,r8,r11
    7b98:	7d 6a 5b 78 	mr      r10,r11
    7b9c:	7c 08 03 78 	mr      r8,r0
    7ba0:	89 68 00 08 	lbz     r11,8(r8)
    7ba4:	55 6b 06 3e 	clrlwi  r11,r11,24
    7ba8:	55 6b c0 0e 	rlwinm  r11,r11,24,0,7
    7bac:	7c 07 03 78 	mr      r7,r0
    7bb0:	89 07 00 09 	lbz     r8,9(r7)
    7bb4:	55 08 06 3e 	clrlwi  r8,r8,24
    7bb8:	55 08 80 1e 	rlwinm  r8,r8,16,0,15
    7bbc:	7d 0b 5b 78 	or      r11,r8,r11
    7bc0:	7c 07 03 78 	mr      r7,r0
    7bc4:	89 07 00 0a 	lbz     r8,10(r7)
    7bc8:	55 08 06 3e 	clrlwi  r8,r8,24
    7bcc:	55 08 40 2e 	rlwinm  r8,r8,8,0,23
    7bd0:	7d 0b 5b 78 	or      r11,r8,r11
    7bd4:	7c 08 03 78 	mr      r8,r0
    7bd8:	88 08 00 0b 	lbz     r0,11(r8)
    7bdc:	54 00 06 3e 	clrlwi  r0,r0,24
    7be0:	7c 00 5b 78 	or      r0,r0,r11
    7be4:	7c 09 03 78 	mr      r9,r0
    7be8:	7d 20 4b 78 	mr      r0,r9
    7bec:	7c 00 53 78 	or      r0,r0,r10
    7bf0:	2f 80 00 00 	cmpwi   cr7,r0,0
    7bf4:	41 9e 00 a4 	beq-    cr7,7c98 <pfkey_spdadd+0xa08>
    7bf8:	80 01 00 24 	lwz     r0,36(r1)
    7bfc:	7c 09 03 78 	mr      r9,r0
    7c00:	89 69 00 0c 	lbz     r11,12(r9)
    7c04:	55 6b 06 3e 	clrlwi  r11,r11,24
    7c08:	55 6b c0 0e 	rlwinm  r11,r11,24,0,7
    7c0c:	7c 0a 03 78 	mr      r10,r0
    7c10:	89 0a 00 0d 	lbz     r8,13(r10)
    7c14:	55 08 06 3e 	clrlwi  r8,r8,24
    7c18:	55 08 80 1e 	rlwinm  r8,r8,16,0,15
    7c1c:	7d 0b 5b 78 	or      r11,r8,r11
    7c20:	7c 07 03 78 	mr      r7,r0
    7c24:	89 07 00 0e 	lbz     r8,14(r7)
    7c28:	55 08 06 3e 	clrlwi  r8,r8,24
    7c2c:	55 08 40 2e 	rlwinm  r8,r8,8,0,23
    7c30:	7d 0b 5b 78 	or      r11,r8,r11
    7c34:	7c 09 03 78 	mr      r9,r0
    7c38:	89 09 00 0f 	lbz     r8,15(r9)
    7c3c:	55 08 06 3e 	clrlwi  r8,r8,24
    7c40:	7d 0b 5b 78 	or      r11,r8,r11
    7c44:	7d 6a 5b 78 	mr      r10,r11
    7c48:	7c 07 03 78 	mr      r7,r0
    7c4c:	89 67 00 08 	lbz     r11,8(r7)
    7c50:	55 6b 06 3e 	clrlwi  r11,r11,24
    7c54:	55 6b c0 0e 	rlwinm  r11,r11,24,0,7
    7c58:	7c 07 03 78 	mr      r7,r0
    7c5c:	89 07 00 09 	lbz     r8,9(r7)
    7c60:	55 08 06 3e 	clrlwi  r8,r8,24
    7c64:	55 08 80 1e 	rlwinm  r8,r8,16,0,15
    7c68:	7d 0b 5b 78 	or      r11,r8,r11
    7c6c:	7c 07 03 78 	mr      r7,r0
    7c70:	89 07 00 0a 	lbz     r8,10(r7)
    7c74:	55 08 06 3e 	clrlwi  r8,r8,24
    7c78:	55 08 40 2e 	rlwinm  r8,r8,8,0,23
    7c7c:	7d 0b 5b 78 	or      r11,r8,r11
    7c80:	7c 08 03 78 	mr      r8,r0
    7c84:	88 08 00 0b 	lbz     r0,11(r8)
    7c88:	54 00 06 3e 	clrlwi  r0,r0,24
    7c8c:	7c 00 5b 78 	or      r0,r0,r11
    7c90:	7c 09 03 78 	mr      r9,r0
    7c94:	48 00 00 0c 	b       7ca0 <pfkey_spdadd+0xa10>
    7c98:	39 20 ff ff 	li      r9,-1
    7c9c:	39 40 ff ff 	li      r10,-1
    7ca0:	80 01 00 14 	lwz     r0,20(r1)
    7ca4:	7c 0b 03 78 	mr      r11,r0
    7ca8:	39 6b 00 80 	addi    r11,r11,128
    7cac:	91 2b 00 00 	stw     r9,0(r11)
    7cb0:	91 4b 00 04 	stw     r10,4(r11)
		xp->lft.soft_add_expires_seconds = lifetime->sadb_lifetime_addtime;
    7cb4:	80 01 00 24 	lwz     r0,36(r1)
    7cb8:	7c 07 03 78 	mr      r7,r0
    7cbc:	89 67 00 14 	lbz     r11,20(r7)
    7cc0:	55 6b 06 3e 	clrlwi  r11,r11,24
    7cc4:	55 6b c0 0e 	rlwinm  r11,r11,24,0,7
    7cc8:	7c 09 03 78 	mr      r9,r0
    7ccc:	89 09 00 15 	lbz     r8,21(r9)
    7cd0:	55 08 06 3e 	clrlwi  r8,r8,24
    7cd4:	55 08 80 1e 	rlwinm  r8,r8,16,0,15
    7cd8:	7d 0b 5b 78 	or      r11,r8,r11
    7cdc:	7c 0a 03 78 	mr      r10,r0
    7ce0:	89 0a 00 16 	lbz     r8,22(r10)
    7ce4:	55 08 06 3e 	clrlwi  r8,r8,24
    7ce8:	55 08 40 2e 	rlwinm  r8,r8,8,0,23
    7cec:	7d 0b 5b 78 	or      r11,r8,r11
    7cf0:	7c 07 03 78 	mr      r7,r0
    7cf4:	89 07 00 17 	lbz     r8,23(r7)
    7cf8:	55 08 06 3e 	clrlwi  r8,r8,24
    7cfc:	7d 0b 5b 78 	or      r11,r8,r11
    7d00:	7d 6a 5b 78 	mr      r10,r11
    7d04:	7c 08 03 78 	mr      r8,r0
    7d08:	89 68 00 10 	lbz     r11,16(r8)
    7d0c:	55 6b 06 3e 	clrlwi  r11,r11,24
    7d10:	55 6b c0 0e 	rlwinm  r11,r11,24,0,7
    7d14:	7c 07 03 78 	mr      r7,r0
    7d18:	89 07 00 11 	lbz     r8,17(r7)
    7d1c:	55 08 06 3e 	clrlwi  r8,r8,24
    7d20:	55 08 80 1e 	rlwinm  r8,r8,16,0,15
    7d24:	7d 0b 5b 78 	or      r11,r8,r11
    7d28:	7c 07 03 78 	mr      r7,r0
    7d2c:	89 07 00 12 	lbz     r8,18(r7)
    7d30:	55 08 06 3e 	clrlwi  r8,r8,24
    7d34:	55 08 40 2e 	rlwinm  r8,r8,8,0,23
    7d38:	7d 0b 5b 78 	or      r11,r8,r11
    7d3c:	7c 08 03 78 	mr      r8,r0
    7d40:	88 08 00 13 	lbz     r0,19(r8)
    7d44:	54 00 06 3e 	clrlwi  r0,r0,24
    7d48:	7c 00 5b 78 	or      r0,r0,r11
    7d4c:	7c 09 03 78 	mr      r9,r0
    7d50:	80 01 00 14 	lwz     r0,20(r1)
    7d54:	7c 0b 03 78 	mr      r11,r0
    7d58:	39 6b 00 a0 	addi    r11,r11,160
    7d5c:	91 2b 00 00 	stw     r9,0(r11)
    7d60:	91 4b 00 04 	stw     r10,4(r11)
		xp->lft.soft_use_expires_seconds = lifetime->sadb_lifetime_usetime;
    7d64:	80 01 00 24 	lwz     r0,36(r1)
    7d68:	7c 07 03 78 	mr      r7,r0
    7d6c:	89 67 00 1c 	lbz     r11,28(r7)
    7d70:	55 6b 06 3e 	clrlwi  r11,r11,24
    7d74:	55 6b c0 0e 	rlwinm  r11,r11,24,0,7
    7d78:	7c 09 03 78 	mr      r9,r0
    7d7c:	89 09 00 1d 	lbz     r8,29(r9)
    7d80:	55 08 06 3e 	clrlwi  r8,r8,24
    7d84:	55 08 80 1e 	rlwinm  r8,r8,16,0,15
    7d88:	7d 0b 5b 78 	or      r11,r8,r11
    7d8c:	7c 0a 03 78 	mr      r10,r0
    7d90:	89 0a 00 1e 	lbz     r8,30(r10)
    7d94:	55 08 06 3e 	clrlwi  r8,r8,24
    7d98:	55 08 40 2e 	rlwinm  r8,r8,8,0,23
    7d9c:	7d 0b 5b 78 	or      r11,r8,r11
    7da0:	7c 07 03 78 	mr      r7,r0
    7da4:	89 07 00 1f 	lbz     r8,31(r7)
    7da8:	55 08 06 3e 	clrlwi  r8,r8,24
    7dac:	7d 0b 5b 78 	or      r11,r8,r11
    7db0:	7d 6a 5b 78 	mr      r10,r11
    7db4:	7c 08 03 78 	mr      r8,r0
    7db8:	89 68 00 18 	lbz     r11,24(r8)
    7dbc:	55 6b 06 3e 	clrlwi  r11,r11,24
    7dc0:	55 6b c0 0e 	rlwinm  r11,r11,24,0,7
    7dc4:	7c 07 03 78 	mr      r7,r0
    7dc8:	89 07 00 19 	lbz     r8,25(r7)
    7dcc:	55 08 06 3e 	clrlwi  r8,r8,24
    7dd0:	55 08 80 1e 	rlwinm  r8,r8,16,0,15
    7dd4:	7d 0b 5b 78 	or      r11,r8,r11
    7dd8:	7c 07 03 78 	mr      r7,r0
    7ddc:	89 07 00 1a 	lbz     r8,26(r7)
    7de0:	55 08 06 3e 	clrlwi  r8,r8,24
    7de4:	55 08 40 2e 	rlwinm  r8,r8,8,0,23
    7de8:	7d 0b 5b 78 	or      r11,r8,r11
    7dec:	7c 08 03 78 	mr      r8,r0
    7df0:	88 08 00 1b 	lbz     r0,27(r8)
    7df4:	54 00 06 3e 	clrlwi  r0,r0,24
    7df8:	7c 00 5b 78 	or      r0,r0,r11
    7dfc:	7c 09 03 78 	mr      r9,r0
    7e00:	80 01 00 14 	lwz     r0,20(r1)
    7e04:	7c 0b 03 78 	mr      r11,r0
    7e08:	39 6b 00 b0 	addi    r11,r11,176
    7e0c:	91 2b 00 00 	stw     r9,0(r11)
    7e10:	91 4b 00 04 	stw     r10,4(r11)
	}
	xp->xfrm_nr = 0;
    7e14:	80 01 00 14 	lwz     r0,20(r1)
    7e18:	39 20 00 00 	li      r9,0
    7e1c:	7c 07 03 78 	mr      r7,r0
    7e20:	99 27 00 ef 	stb     r9,239(r7)
	if (pol->sadb_x_policy_type == IPSEC_POLICY_IPSEC &&
    7e24:	80 01 00 10 	lwz     r0,16(r1)
    7e28:	7c 08 03 78 	mr      r8,r0
    7e2c:	a0 08 00 04 	lhz     r0,4(r8)
    7e30:	54 00 04 3e 	clrlwi  r0,r0,16
    7e34:	2f 80 00 02 	cmpwi   cr7,r0,2
    7e38:	40 9e 00 20 	bne-    cr7,7e58 <pfkey_spdadd+0xbc8>
    7e3c:	80 61 00 14 	lwz     r3,20(r1)
    7e40:	80 81 00 10 	lwz     r4,16(r1)
    7e44:	4b ff e4 bd 	bl      6300 <parse_ipsecrequests>
    7e48:	90 61 00 08 	stw     r3,8(r1)
    7e4c:	80 01 00 08 	lwz     r0,8(r1)
    7e50:	2f 80 00 00 	cmpwi   cr7,r0,0
    7e54:	41 9c 01 50 	blt-    cr7,7fa4 <pfkey_spdadd+0xd14>
	    (err = parse_ipsecrequests(xp, pol)) < 0)
		goto out;

	err = xfrm_policy_insert(pol->sadb_x_policy_dir-1, xp,
    7e58:	80 01 00 10 	lwz     r0,16(r1)
    7e5c:	7c 09 03 78 	mr      r9,r0
    7e60:	88 09 00 06 	lbz     r0,6(r9)
    7e64:	54 00 06 3e 	clrlwi  r0,r0,24
    7e68:	31 20 ff ff 	addic   r9,r0,-1
				 hdr->sadb_msg_type != SADB_X_SPDUPDATE);
    7e6c:	80 01 00 90 	lwz     r0,144(r1)
    7e70:	7c 0a 03 78 	mr      r10,r0
    7e74:	88 0a 00 01 	lbz     r0,1(r10)
    7e78:	54 00 06 3e 	clrlwi  r0,r0,24
	xp->xfrm_nr = 0;
	if (pol->sadb_x_policy_type == IPSEC_POLICY_IPSEC &&
	    (err = parse_ipsecrequests(xp, pol)) < 0)
		goto out;

	err = xfrm_policy_insert(pol->sadb_x_policy_dir-1, xp,
    7e7c:	68 00 00 0d 	xori    r0,r0,13
    7e80:	54 00 06 3e 	clrlwi  r0,r0,24
    7e84:	7c 00 00 d0 	neg     r0,r0
    7e88:	54 00 0f fe 	rlwinm  r0,r0,1,31,31
    7e8c:	7d 23 4b 78 	mr      r3,r9
    7e90:	80 81 00 14 	lwz     r4,20(r1)
    7e94:	7c 05 03 78 	mr      r5,r0
    7e98:	48 00 00 01 	bl      7e98 <pfkey_spdadd+0xc08>
    7e9c:	90 61 00 08 	stw     r3,8(r1)
				 hdr->sadb_msg_type != SADB_X_SPDUPDATE);

	xfrm_audit_policy_add(xp, err ? 0 : 1,
    7ea0:	80 01 00 08 	lwz     r0,8(r1)
    7ea4:	2f 80 00 00 	cmpwi   cr7,r0,0
    7ea8:	7c 00 00 26 	mfcr    r0
    7eac:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
    7eb0:	81 21 00 14 	lwz     r9,20(r1)
    7eb4:	91 21 00 58 	stw     r9,88(r1)
    7eb8:	90 01 00 5c 	stw     r0,92(r1)
    7ebc:	38 00 ff ff 	li      r0,-1
    7ec0:	90 01 00 60 	stw     r0,96(r1)
    7ec4:	38 00 ff ff 	li      r0,-1
    7ec8:	90 01 00 64 	stw     r0,100(r1)
    7ecc:	38 00 00 00 	li      r0,0
    7ed0:	90 01 00 68 	stw     r0,104(r1)
			      audit_get_loginuid(current),
			      audit_get_sessionid(current), 0);

	if (err)
    7ed4:	80 01 00 08 	lwz     r0,8(r1)
    7ed8:	2f 80 00 00 	cmpwi   cr7,r0,0
    7edc:	40 9e 00 d0 	bne-    cr7,7fac <pfkey_spdadd+0xd1c>
		goto out;

	if (hdr->sadb_msg_type == SADB_X_SPDUPDATE)
    7ee0:	80 01 00 90 	lwz     r0,144(r1)
    7ee4:	7c 0b 03 78 	mr      r11,r0
    7ee8:	88 0b 00 01 	lbz     r0,1(r11)
    7eec:	54 00 06 3e 	clrlwi  r0,r0,24
    7ef0:	2f 80 00 0d 	cmpwi   cr7,r0,13
    7ef4:	40 9e 00 10 	bne-    cr7,7f04 <pfkey_spdadd+0xc74>
		c.event = XFRM_MSG_UPDPOLICY;
    7ef8:	38 00 00 19 	li      r0,25
    7efc:	90 01 00 78 	stw     r0,120(r1)
    7f00:	48 00 00 0c 	b       7f0c <pfkey_spdadd+0xc7c>
	else
		c.event = XFRM_MSG_NEWPOLICY;
    7f04:	38 00 00 13 	li      r0,19
    7f08:	90 01 00 78 	stw     r0,120(r1)

	c.seq = hdr->sadb_msg_seq;
    7f0c:	80 01 00 90 	lwz     r0,144(r1)
    7f10:	7c 07 03 78 	mr      r7,r0
    7f14:	80 07 00 08 	lwz     r0,8(r7)
    7f18:	90 01 00 70 	stw     r0,112(r1)
	c.pid = hdr->sadb_msg_pid;
    7f1c:	80 01 00 90 	lwz     r0,144(r1)
    7f20:	7c 08 03 78 	mr      r8,r0
    7f24:	80 08 00 0c 	lwz     r0,12(r8)
    7f28:	90 01 00 74 	stw     r0,116(r1)

	km_policy_notify(xp, pol->sadb_x_policy_dir-1, &c);
    7f2c:	80 01 00 10 	lwz     r0,16(r1)
    7f30:	7c 09 03 78 	mr      r9,r0
    7f34:	88 09 00 06 	lbz     r0,6(r9)
    7f38:	54 00 06 3e 	clrlwi  r0,r0,24
    7f3c:	31 20 ff ff 	addic   r9,r0,-1
    7f40:	38 01 00 6c 	addi    r0,r1,108
    7f44:	80 61 00 14 	lwz     r3,20(r1)
    7f48:	7d 24 4b 78 	mr      r4,r9
    7f4c:	7c 05 03 78 	mr      r5,r0
    7f50:	48 00 00 01 	bl      7f50 <pfkey_spdadd+0xcc0>
    7f54:	80 01 00 14 	lwz     r0,20(r1)
    7f58:	90 01 00 40 	stw     r0,64(r1)

extern void xfrm_policy_destroy(struct xfrm_policy *policy);

static inline void xfrm_pol_put(struct xfrm_policy *policy)
{
	if (atomic_dec_and_test(&policy->refcnt))
    7f5c:	80 01 00 40 	lwz     r0,64(r1)
    7f60:	30 00 00 10 	addic   r0,r0,16
    7f64:	90 01 00 44 	stw     r0,68(r1)
	PPC405_ERR77(0,%1)
"	stwcx.	%0,0,%1\n\
	bne-	1b"
	PPC_ACQUIRE_BARRIER
	: "=&r" (t)
	: "r" (&v->counter)
    7f68:	80 01 00 44 	lwz     r0,68(r1)

static __inline__ int atomic_dec_return(atomic_t *v)
{
	int t;

	__asm__ __volatile__(
    7f6c:	7f e0 00 28 	lwarx   r31,0,r0
    7f70:	33 ff ff ff 	addic   r31,r31,-1
    7f74:	7f e0 01 2d 	stwcx.  r31,0,r0
    7f78:	40 a2 ff f4 	bne-    7f6c <pfkey_spdadd+0xcdc>
    7f7c:	93 e1 00 48 	stw     r31,72(r1)
	PPC_ACQUIRE_BARRIER
	: "=&r" (t)
	: "r" (&v->counter)
	: "cc", "xer", "memory");

	return t;
    7f80:	80 01 00 48 	lwz     r0,72(r1)
    7f84:	2f 80 00 00 	cmpwi   cr7,r0,0
    7f88:	40 9e 00 0c 	bne-    cr7,7f94 <pfkey_spdadd+0xd04>
		xfrm_policy_destroy(policy);
    7f8c:	80 61 00 40 	lwz     r3,64(r1)
    7f90:	48 00 00 01 	bl      7f90 <pfkey_spdadd+0xd00>
	xfrm_pol_put(xp);
	return 0;
    7f94:	38 00 00 00 	li      r0,0
    7f98:	48 00 00 34 	b       7fcc <pfkey_spdadd+0xd3c>

		err = security_xfrm_policy_alloc(&xp->security, uctx);
		kfree(uctx);

		if (err)
			goto out;
    7f9c:	60 00 00 00 	nop
    7fa0:	48 00 00 10 	b       7fb0 <pfkey_spdadd+0xd20>
		xp->lft.soft_use_expires_seconds = lifetime->sadb_lifetime_usetime;
	}
	xp->xfrm_nr = 0;
	if (pol->sadb_x_policy_type == IPSEC_POLICY_IPSEC &&
	    (err = parse_ipsecrequests(xp, pol)) < 0)
		goto out;
    7fa4:	60 00 00 00 	nop
    7fa8:	48 00 00 08 	b       7fb0 <pfkey_spdadd+0xd20>
	xfrm_audit_policy_add(xp, err ? 0 : 1,
			      audit_get_loginuid(current),
			      audit_get_sessionid(current), 0);

	if (err)
		goto out;
    7fac:	60 00 00 00 	nop
	km_policy_notify(xp, pol->sadb_x_policy_dir-1, &c);
	xfrm_pol_put(xp);
	return 0;

out:
	xp->walk.dead = 1;
    7fb0:	80 01 00 14 	lwz     r0,20(r1)
    7fb4:	39 20 00 01 	li      r9,1
    7fb8:	7c 0a 03 78 	mr      r10,r0
    7fbc:	99 2a 00 e8 	stb     r9,232(r10)
	xfrm_policy_destroy(xp);
    7fc0:	80 61 00 14 	lwz     r3,20(r1)
    7fc4:	48 00 00 01 	bl      7fc4 <pfkey_spdadd+0xd34>
	return err;
    7fc8:	80 01 00 08 	lwz     r0,8(r1)
}
    7fcc:	7c 03 03 78 	mr      r3,r0
    7fd0:	80 01 00 b4 	lwz     r0,180(r1)
    7fd4:	7c 08 03 a6 	mtlr    r0
    7fd8:	bb 81 00 a0 	lmw     r28,160(r1)
    7fdc:	38 21 00 b0 	addi    r1,r1,176
    7fe0:	4e 80 00 20 	blr

00007fe4 <pfkey_spddelete>:

static int pfkey_spddelete(struct sock *sk, struct sk_buff *skb, struct sadb_msg *hdr, void **ext_hdrs)
{
    7fe4:	94 21 ff 20 	stwu    r1,-224(r1)
    7fe8:	7c 08 02 a6 	mflr    r0
    7fec:	90 01 00 e4 	stw     r0,228(r1)
    7ff0:	93 e1 00 dc 	stw     r31,220(r1)
    7ff4:	90 61 00 c8 	stw     r3,200(r1)
    7ff8:	90 81 00 cc 	stw     r4,204(r1)
    7ffc:	90 a1 00 d0 	stw     r5,208(r1)
    8000:	90 c1 00 d4 	stw     r6,212(r1)
    8004:	80 01 00 c8 	lwz     r0,200(r1)
    8008:	90 01 00 44 	stw     r0,68(r1)
    800c:	3c 00 00 00 	lis     r0,0
    8010:	30 00 00 00 	addic   r0,r0,0
	struct net *net = sock_net(sk);
    8014:	90 01 00 08 	stw     r0,8(r1)
	struct sadb_x_policy *pol;
	struct xfrm_policy *xp;
	struct xfrm_selector sel;
	struct km_event c;
	struct sadb_x_sec_ctx *sec_ctx;
	struct xfrm_sec_ctx *pol_ctx = NULL;
    8018:	38 00 00 00 	li      r0,0
    801c:	90 01 00 b8 	stw     r0,184(r1)

	if (!present_and_same_family(ext_hdrs[SADB_EXT_ADDRESS_SRC-1],
    8020:	80 01 00 d4 	lwz     r0,212(r1)
    8024:	30 00 00 10 	addic   r0,r0,16
    8028:	7c 0a 03 78 	mr      r10,r0
    802c:	81 2a 00 00 	lwz     r9,0(r10)
				     ext_hdrs[SADB_EXT_ADDRESS_DST-1]) ||
    8030:	80 01 00 d4 	lwz     r0,212(r1)
    8034:	30 00 00 14 	addic   r0,r0,20
	struct xfrm_selector sel;
	struct km_event c;
	struct sadb_x_sec_ctx *sec_ctx;
	struct xfrm_sec_ctx *pol_ctx = NULL;

	if (!present_and_same_family(ext_hdrs[SADB_EXT_ADDRESS_SRC-1],
    8038:	7c 0b 03 78 	mr      r11,r0
    803c:	80 0b 00 00 	lwz     r0,0(r11)
    8040:	7d 23 4b 78 	mr      r3,r9
    8044:	7c 04 03 78 	mr      r4,r0
    8048:	4b ff 93 61 	bl      13a8 <present_and_same_family>
    804c:	7c 60 1b 78 	mr      r0,r3
    8050:	2f 80 00 00 	cmpwi   cr7,r0,0
    8054:	41 9e 00 1c 	beq-    cr7,8070 <pfkey_spddelete+0x8c>
				     ext_hdrs[SADB_EXT_ADDRESS_DST-1]) ||
	    !ext_hdrs[SADB_X_EXT_POLICY-1])
    8058:	80 01 00 d4 	lwz     r0,212(r1)
    805c:	30 00 00 44 	addic   r0,r0,68
    8060:	7c 09 03 78 	mr      r9,r0
    8064:	80 09 00 00 	lwz     r0,0(r9)
	struct km_event c;
	struct sadb_x_sec_ctx *sec_ctx;
	struct xfrm_sec_ctx *pol_ctx = NULL;

	if (!present_and_same_family(ext_hdrs[SADB_EXT_ADDRESS_SRC-1],
				     ext_hdrs[SADB_EXT_ADDRESS_DST-1]) ||
    8068:	2f 80 00 00 	cmpwi   cr7,r0,0
    806c:	40 9e 00 0c 	bne-    cr7,8078 <pfkey_spddelete+0x94>
	    !ext_hdrs[SADB_X_EXT_POLICY-1])
		return -EINVAL;
    8070:	38 00 ff ea 	li      r0,-22
    8074:	48 00 04 64 	b       84d8 <pfkey_spddelete+0x4f4>

	pol = ext_hdrs[SADB_X_EXT_POLICY-1];
    8078:	80 01 00 d4 	lwz     r0,212(r1)
    807c:	7c 0a 03 78 	mr      r10,r0
    8080:	80 0a 00 44 	lwz     r0,68(r10)
    8084:	90 01 00 0c 	stw     r0,12(r1)
	if (!pol->sadb_x_policy_dir || pol->sadb_x_policy_dir >= IPSEC_DIR_MAX)
    8088:	80 01 00 0c 	lwz     r0,12(r1)
    808c:	7c 0b 03 78 	mr      r11,r0
    8090:	88 0b 00 06 	lbz     r0,6(r11)
    8094:	54 00 06 3e 	clrlwi  r0,r0,24
    8098:	2f 80 00 00 	cmpwi   cr7,r0,0
    809c:	41 9e 00 1c 	beq-    cr7,80b8 <pfkey_spddelete+0xd4>
    80a0:	80 01 00 0c 	lwz     r0,12(r1)
    80a4:	7c 09 03 78 	mr      r9,r0
    80a8:	88 09 00 06 	lbz     r0,6(r9)
    80ac:	54 00 06 3e 	clrlwi  r0,r0,24
    80b0:	2b 80 00 03 	cmplwi  cr7,r0,3
    80b4:	40 9d 00 0c 	ble-    cr7,80c0 <pfkey_spddelete+0xdc>
		return -EINVAL;
    80b8:	38 00 ff ea 	li      r0,-22
    80bc:	48 00 04 1c 	b       84d8 <pfkey_spddelete+0x4f4>

	memset(&sel, 0, sizeof(sel));
    80c0:	38 01 00 6c 	addi    r0,r1,108
    80c4:	7c 09 03 78 	mr      r9,r0
    80c8:	38 00 00 38 	li      r0,56
    80cc:	7d 23 4b 78 	mr      r3,r9
    80d0:	38 80 00 00 	li      r4,0
    80d4:	7c 05 03 78 	mr      r5,r0
    80d8:	48 00 00 01 	bl      80d8 <pfkey_spddelete+0xf4>

	sa = ext_hdrs[SADB_EXT_ADDRESS_SRC-1],
    80dc:	80 01 00 d4 	lwz     r0,212(r1)
    80e0:	7c 0a 03 78 	mr      r10,r0
    80e4:	80 0a 00 10 	lwz     r0,16(r10)
    80e8:	90 01 00 10 	stw     r0,16(r1)
	sel.family = pfkey_sadb_addr2xfrm_addr(sa, &sel.saddr);
    80ec:	38 01 00 6c 	addi    r0,r1,108
    80f0:	30 00 00 10 	addic   r0,r0,16
    80f4:	80 61 00 10 	lwz     r3,16(r1)
    80f8:	7c 04 03 78 	mr      r4,r0
    80fc:	4b ff 97 dd 	bl      18d8 <pfkey_sadb_addr2xfrm_addr>
    8100:	7c 60 1b 78 	mr      r0,r3
    8104:	54 00 04 3e 	clrlwi  r0,r0,16
    8108:	b0 01 00 94 	sth     r0,148(r1)
	sel.prefixlen_s = sa->sadb_address_prefixlen;
    810c:	80 01 00 10 	lwz     r0,16(r1)
    8110:	7c 0b 03 78 	mr      r11,r0
    8114:	88 0b 00 05 	lbz     r0,5(r11)
    8118:	54 00 06 3e 	clrlwi  r0,r0,24
    811c:	98 01 00 97 	stb     r0,151(r1)
	sel.proto = pfkey_proto_to_xfrm(sa->sadb_address_proto);
    8120:	80 01 00 10 	lwz     r0,16(r1)
    8124:	7c 09 03 78 	mr      r9,r0
    8128:	88 09 00 04 	lbz     r0,4(r9)
    812c:	54 00 06 3e 	clrlwi  r0,r0,24
    8130:	7c 03 03 78 	mr      r3,r0
    8134:	4b ff 96 91 	bl      17c4 <pfkey_proto_to_xfrm>
    8138:	7c 60 1b 78 	mr      r0,r3
    813c:	98 01 00 98 	stb     r0,152(r1)
	sel.sport = ((struct sockaddr_in *)(sa+1))->sin_port;
    8140:	80 01 00 10 	lwz     r0,16(r1)
    8144:	30 00 00 08 	addic   r0,r0,8
    8148:	7c 0a 03 78 	mr      r10,r0
    814c:	a0 0a 00 02 	lhz     r0,2(r10)
    8150:	54 00 04 3e 	clrlwi  r0,r0,16
    8154:	b0 01 00 90 	sth     r0,144(r1)
	if (sel.sport)
    8158:	a0 01 00 90 	lhz     r0,144(r1)
    815c:	54 00 04 3e 	clrlwi  r0,r0,16
    8160:	2f 80 00 00 	cmpwi   cr7,r0,0
    8164:	41 9e 00 0c 	beq-    cr7,8170 <pfkey_spddelete+0x18c>
		sel.sport_mask = htons(0xffff);
    8168:	38 00 ff ff 	li      r0,-1
    816c:	b0 01 00 92 	sth     r0,146(r1)

	sa = ext_hdrs[SADB_EXT_ADDRESS_DST-1],
    8170:	80 01 00 d4 	lwz     r0,212(r1)
    8174:	7c 0b 03 78 	mr      r11,r0
    8178:	80 0b 00 14 	lwz     r0,20(r11)
    817c:	90 01 00 10 	stw     r0,16(r1)
	pfkey_sadb_addr2xfrm_addr(sa, &sel.daddr);
    8180:	38 01 00 6c 	addi    r0,r1,108
    8184:	80 61 00 10 	lwz     r3,16(r1)
    8188:	7c 04 03 78 	mr      r4,r0
    818c:	4b ff 97 4d 	bl      18d8 <pfkey_sadb_addr2xfrm_addr>
	sel.prefixlen_d = sa->sadb_address_prefixlen;
    8190:	80 01 00 10 	lwz     r0,16(r1)
    8194:	7c 09 03 78 	mr      r9,r0
    8198:	88 09 00 05 	lbz     r0,5(r9)
    819c:	54 00 06 3e 	clrlwi  r0,r0,24
    81a0:	98 01 00 96 	stb     r0,150(r1)
	sel.proto = pfkey_proto_to_xfrm(sa->sadb_address_proto);
    81a4:	80 01 00 10 	lwz     r0,16(r1)
    81a8:	7c 0a 03 78 	mr      r10,r0
    81ac:	88 0a 00 04 	lbz     r0,4(r10)
    81b0:	54 00 06 3e 	clrlwi  r0,r0,24
    81b4:	7c 03 03 78 	mr      r3,r0
    81b8:	4b ff 96 0d 	bl      17c4 <pfkey_proto_to_xfrm>
    81bc:	7c 60 1b 78 	mr      r0,r3
    81c0:	98 01 00 98 	stb     r0,152(r1)
	sel.dport = ((struct sockaddr_in *)(sa+1))->sin_port;
    81c4:	80 01 00 10 	lwz     r0,16(r1)
    81c8:	30 00 00 08 	addic   r0,r0,8
    81cc:	7c 0b 03 78 	mr      r11,r0
    81d0:	a0 0b 00 02 	lhz     r0,2(r11)
    81d4:	54 00 04 3e 	clrlwi  r0,r0,16
    81d8:	b0 01 00 8c 	sth     r0,140(r1)
	if (sel.dport)
    81dc:	a0 01 00 8c 	lhz     r0,140(r1)
    81e0:	54 00 04 3e 	clrlwi  r0,r0,16
    81e4:	2f 80 00 00 	cmpwi   cr7,r0,0
    81e8:	41 9e 00 0c 	beq-    cr7,81f4 <pfkey_spddelete+0x210>
		sel.dport_mask = htons(0xffff);
    81ec:	38 00 ff ff 	li      r0,-1
    81f0:	b0 01 00 8e 	sth     r0,142(r1)

	sec_ctx = (struct sadb_x_sec_ctx *) ext_hdrs[SADB_X_EXT_SEC_CTX-1];
    81f4:	80 01 00 d4 	lwz     r0,212(r1)
    81f8:	7c 09 03 78 	mr      r9,r0
    81fc:	80 09 00 5c 	lwz     r0,92(r9)
    8200:	90 01 00 14 	stw     r0,20(r1)
	if (sec_ctx != NULL) {
    8204:	80 01 00 14 	lwz     r0,20(r1)
    8208:	2f 80 00 00 	cmpwi   cr7,r0,0
    820c:	41 9e 01 84 	beq-    cr7,8390 <pfkey_spddelete+0x3ac>
    8210:	80 01 00 14 	lwz     r0,20(r1)
    8214:	90 01 00 20 	stw     r0,32(r1)
	return 0;
}

static inline struct xfrm_user_sec_ctx *pfkey_sadb2xfrm_user_sec_ctx(struct sadb_x_sec_ctx *sec_ctx)
{
	struct xfrm_user_sec_ctx *uctx = NULL;
    8218:	38 00 00 00 	li      r0,0
    821c:	90 01 00 24 	stw     r0,36(r1)
	int ctx_size = sec_ctx->sadb_x_ctx_len;
    8220:	80 01 00 20 	lwz     r0,32(r1)
    8224:	7c 0a 03 78 	mr      r10,r0
    8228:	a0 0a 00 06 	lhz     r0,6(r10)
    822c:	54 00 04 3e 	clrlwi  r0,r0,16
    8230:	90 01 00 28 	stw     r0,40(r1)

	uctx = kmalloc((sizeof(*uctx)+ctx_size), GFP_KERNEL);
    8234:	80 01 00 28 	lwz     r0,40(r1)
    8238:	30 00 00 08 	addic   r0,r0,8
    823c:	90 01 00 2c 	stw     r0,44(r1)
    8240:	38 00 00 d0 	li      r0,208
    8244:	90 01 00 30 	stw     r0,48(r1)
    8248:	80 61 00 2c 	lwz     r3,44(r1)
    824c:	80 81 00 30 	lwz     r4,48(r1)
    8250:	48 00 00 01 	bl      8250 <pfkey_spddelete+0x26c>
    8254:	7c 60 1b 78 	mr      r0,r3
    8258:	90 01 00 24 	stw     r0,36(r1)

	if (!uctx)
    825c:	80 01 00 24 	lwz     r0,36(r1)
    8260:	2f 80 00 00 	cmpwi   cr7,r0,0
    8264:	40 9e 00 0c 	bne-    cr7,8270 <pfkey_spddelete+0x28c>
		return NULL;
    8268:	38 00 00 00 	li      r0,0
    826c:	48 00 00 d8 	b       8344 <pfkey_spddelete+0x360>
    8270:	80 01 00 20 	lwz     r0,32(r1)
    8274:	90 01 00 34 	stw     r0,52(r1)
	return 0;
}

static inline int pfkey_sec_ctx_len(struct sadb_x_sec_ctx *sec_ctx)
{
	return DIV_ROUND_UP(sizeof(struct sadb_x_sec_ctx) +
    8278:	80 01 00 34 	lwz     r0,52(r1)
    827c:	7c 0b 03 78 	mr      r11,r0
    8280:	a0 0b 00 06 	lhz     r0,6(r11)
    8284:	54 00 04 3e 	clrlwi  r0,r0,16
    8288:	30 00 00 0f 	addic   r0,r0,15
    828c:	54 00 e8 fe 	rlwinm  r0,r0,29,3,31
	uctx = kmalloc((sizeof(*uctx)+ctx_size), GFP_KERNEL);

	if (!uctx)
		return NULL;

	uctx->len = pfkey_sec_ctx_len(sec_ctx);
    8290:	54 09 04 3e 	clrlwi  r9,r0,16
    8294:	80 01 00 24 	lwz     r0,36(r1)
    8298:	7c 0a 03 78 	mr      r10,r0
    829c:	b1 2a 00 00 	sth     r9,0(r10)
	uctx->exttype = sec_ctx->sadb_x_sec_exttype;
    82a0:	80 01 00 20 	lwz     r0,32(r1)
    82a4:	7c 0b 03 78 	mr      r11,r0
    82a8:	a0 0b 00 02 	lhz     r0,2(r11)
    82ac:	54 09 04 3e 	clrlwi  r9,r0,16
    82b0:	80 01 00 24 	lwz     r0,36(r1)
    82b4:	7c 0a 03 78 	mr      r10,r0
    82b8:	b1 2a 00 02 	sth     r9,2(r10)
	uctx->ctx_doi = sec_ctx->sadb_x_ctx_doi;
    82bc:	80 01 00 20 	lwz     r0,32(r1)
    82c0:	7c 0b 03 78 	mr      r11,r0
    82c4:	88 0b 00 05 	lbz     r0,5(r11)
    82c8:	54 09 06 3e 	clrlwi  r9,r0,24
    82cc:	80 01 00 24 	lwz     r0,36(r1)
    82d0:	7c 0a 03 78 	mr      r10,r0
    82d4:	99 2a 00 05 	stb     r9,5(r10)
	uctx->ctx_alg = sec_ctx->sadb_x_ctx_alg;
    82d8:	80 01 00 20 	lwz     r0,32(r1)
    82dc:	7c 0b 03 78 	mr      r11,r0
    82e0:	88 0b 00 04 	lbz     r0,4(r11)
    82e4:	54 09 06 3e 	clrlwi  r9,r0,24
    82e8:	80 01 00 24 	lwz     r0,36(r1)
    82ec:	7c 0a 03 78 	mr      r10,r0
    82f0:	99 2a 00 04 	stb     r9,4(r10)
	uctx->ctx_len = sec_ctx->sadb_x_ctx_len;
    82f4:	80 01 00 20 	lwz     r0,32(r1)
    82f8:	7c 0b 03 78 	mr      r11,r0
    82fc:	a0 0b 00 06 	lhz     r0,6(r11)
    8300:	54 09 04 3e 	clrlwi  r9,r0,16
    8304:	80 01 00 24 	lwz     r0,36(r1)
    8308:	7c 0a 03 78 	mr      r10,r0
    830c:	b1 2a 00 06 	sth     r9,6(r10)
	memcpy(uctx + 1, sec_ctx + 1,
    8310:	80 01 00 24 	lwz     r0,36(r1)
    8314:	31 60 00 08 	addic   r11,r0,8
    8318:	80 01 00 20 	lwz     r0,32(r1)
    831c:	31 20 00 08 	addic   r9,r0,8
	       uctx->ctx_len);
    8320:	80 01 00 24 	lwz     r0,36(r1)
    8324:	7c 0a 03 78 	mr      r10,r0
    8328:	a0 0a 00 06 	lhz     r0,6(r10)
    832c:	54 00 04 3e 	clrlwi  r0,r0,16
	uctx->len = pfkey_sec_ctx_len(sec_ctx);
	uctx->exttype = sec_ctx->sadb_x_sec_exttype;
	uctx->ctx_doi = sec_ctx->sadb_x_ctx_doi;
	uctx->ctx_alg = sec_ctx->sadb_x_ctx_alg;
	uctx->ctx_len = sec_ctx->sadb_x_ctx_len;
	memcpy(uctx + 1, sec_ctx + 1,
    8330:	7d 63 5b 78 	mr      r3,r11
    8334:	7d 24 4b 78 	mr      r4,r9
    8338:	7c 05 03 78 	mr      r5,r0
    833c:	48 00 00 01 	bl      833c <pfkey_spddelete+0x358>
	       uctx->ctx_len);

	return uctx;
    8340:	80 01 00 24 	lwz     r0,36(r1)
	if (sel.dport)
		sel.dport_mask = htons(0xffff);

	sec_ctx = (struct sadb_x_sec_ctx *) ext_hdrs[SADB_X_EXT_SEC_CTX-1];
	if (sec_ctx != NULL) {
		struct xfrm_user_sec_ctx *uctx = pfkey_sadb2xfrm_user_sec_ctx(sec_ctx);
    8344:	90 01 00 18 	stw     r0,24(r1)

		if (!uctx)
    8348:	80 01 00 18 	lwz     r0,24(r1)
    834c:	2f 80 00 00 	cmpwi   cr7,r0,0
    8350:	40 9e 00 0c 	bne-    cr7,835c <pfkey_spddelete+0x378>
			return -ENOMEM;
    8354:	38 00 ff f4 	li      r0,-12
    8358:	48 00 01 80 	b       84d8 <pfkey_spddelete+0x4f4>

		err = security_xfrm_policy_alloc(&pol_ctx, uctx);
    835c:	38 01 00 b8 	addi    r0,r1,184
	sec_ctx = (struct sadb_x_sec_ctx *) ext_hdrs[SADB_X_EXT_SEC_CTX-1];
	if (sec_ctx != NULL) {
		struct xfrm_user_sec_ctx *uctx = pfkey_sadb2xfrm_user_sec_ctx(sec_ctx);

		if (!uctx)
			return -ENOMEM;
    8360:	90 01 00 48 	stw     r0,72(r1)
    8364:	80 01 00 18 	lwz     r0,24(r1)
    8368:	90 01 00 4c 	stw     r0,76(r1)
    836c:	38 00 00 00 	li      r0,0

		err = security_xfrm_policy_alloc(&pol_ctx, uctx);
    8370:	90 01 00 68 	stw     r0,104(r1)
		kfree(uctx);
    8374:	80 61 00 18 	lwz     r3,24(r1)
    8378:	48 00 00 01 	bl      8378 <pfkey_spddelete+0x394>
		if (err)
    837c:	80 01 00 68 	lwz     r0,104(r1)
    8380:	2f 80 00 00 	cmpwi   cr7,r0,0
    8384:	41 9e 00 0c 	beq-    cr7,8390 <pfkey_spddelete+0x3ac>
			return err;
    8388:	80 01 00 68 	lwz     r0,104(r1)
    838c:	48 00 01 4c 	b       84d8 <pfkey_spddelete+0x4f4>
	}

	xp = xfrm_policy_bysel_ctx(net, DUMMY_MARK, XFRM_POLICY_TYPE_MAIN,
				   pol->sadb_x_policy_dir - 1, &sel, pol_ctx,
    8390:	80 01 00 0c 	lwz     r0,12(r1)
    8394:	7c 0b 03 78 	mr      r11,r0
    8398:	88 0b 00 06 	lbz     r0,6(r11)
    839c:	54 00 06 3e 	clrlwi  r0,r0,24
		kfree(uctx);
		if (err)
			return err;
	}

	xp = xfrm_policy_bysel_ctx(net, DUMMY_MARK, XFRM_POLICY_TYPE_MAIN,
    83a0:	31 40 ff ff 	addic   r10,r0,-1
    83a4:	81 21 00 b8 	lwz     r9,184(r1)
    83a8:	39 61 00 6c 	addi    r11,r1,108
    83ac:	38 01 00 68 	addi    r0,r1,104
    83b0:	80 61 00 08 	lwz     r3,8(r1)
    83b4:	38 80 00 00 	li      r4,0
    83b8:	38 a0 00 00 	li      r5,0
    83bc:	7d 46 53 78 	mr      r6,r10
    83c0:	7d 67 5b 78 	mr      r7,r11
    83c4:	7d 28 4b 78 	mr      r8,r9
    83c8:	39 20 00 01 	li      r9,1
    83cc:	7c 0a 03 78 	mr      r10,r0
    83d0:	48 00 00 01 	bl      83d0 <pfkey_spddelete+0x3ec>
    83d4:	90 61 00 1c 	stw     r3,28(r1)
				   pol->sadb_x_policy_dir - 1, &sel, pol_ctx,
				   1, &err);
	security_xfrm_policy_free(pol_ctx);
    83d8:	80 01 00 b8 	lwz     r0,184(r1)
    83dc:	90 01 00 50 	stw     r0,80(r1)
	if (xp == NULL)
    83e0:	80 01 00 1c 	lwz     r0,28(r1)
    83e4:	2f 80 00 00 	cmpwi   cr7,r0,0
    83e8:	40 9e 00 0c 	bne-    cr7,83f4 <pfkey_spddelete+0x410>
		return -ENOENT;
    83ec:	38 00 ff fe 	li      r0,-2
    83f0:	48 00 00 e8 	b       84d8 <pfkey_spddelete+0x4f4>

	xfrm_audit_policy_delete(xp, err ? 0 : 1,
    83f4:	80 01 00 68 	lwz     r0,104(r1)
    83f8:	2f 80 00 00 	cmpwi   cr7,r0,0
    83fc:	7c 00 00 26 	mfcr    r0
    8400:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
    8404:	81 21 00 1c 	lwz     r9,28(r1)
    8408:	91 21 00 54 	stw     r9,84(r1)
    840c:	90 01 00 58 	stw     r0,88(r1)
    8410:	38 00 ff ff 	li      r0,-1
    8414:	90 01 00 5c 	stw     r0,92(r1)
    8418:	38 00 ff ff 	li      r0,-1
    841c:	90 01 00 60 	stw     r0,96(r1)
    8420:	38 00 00 00 	li      r0,0
    8424:	90 01 00 64 	stw     r0,100(r1)
				 audit_get_loginuid(current),
				 audit_get_sessionid(current), 0);

	if (err)
    8428:	80 01 00 68 	lwz     r0,104(r1)
    842c:	2f 80 00 00 	cmpwi   cr7,r0,0
    8430:	40 9e 00 60 	bne-    cr7,8490 <pfkey_spddelete+0x4ac>
		goto out;

	c.seq = hdr->sadb_msg_seq;
    8434:	80 01 00 d0 	lwz     r0,208(r1)
    8438:	7c 09 03 78 	mr      r9,r0
    843c:	80 09 00 08 	lwz     r0,8(r9)
    8440:	90 01 00 a8 	stw     r0,168(r1)
	c.pid = hdr->sadb_msg_pid;
    8444:	80 01 00 d0 	lwz     r0,208(r1)
    8448:	7c 0a 03 78 	mr      r10,r0
    844c:	80 0a 00 0c 	lwz     r0,12(r10)
    8450:	90 01 00 ac 	stw     r0,172(r1)
	c.data.byid = 0;
    8454:	38 00 00 00 	li      r0,0
    8458:	90 01 00 a4 	stw     r0,164(r1)
	c.event = XFRM_MSG_DELPOLICY;
    845c:	38 00 00 14 	li      r0,20
    8460:	90 01 00 b0 	stw     r0,176(r1)
	km_policy_notify(xp, pol->sadb_x_policy_dir-1, &c);
    8464:	80 01 00 0c 	lwz     r0,12(r1)
    8468:	7c 0b 03 78 	mr      r11,r0
    846c:	88 0b 00 06 	lbz     r0,6(r11)
    8470:	54 00 06 3e 	clrlwi  r0,r0,24
    8474:	31 20 ff ff 	addic   r9,r0,-1
    8478:	38 01 00 a4 	addi    r0,r1,164
    847c:	80 61 00 1c 	lwz     r3,28(r1)
    8480:	7d 24 4b 78 	mr      r4,r9
    8484:	7c 05 03 78 	mr      r5,r0
    8488:	48 00 00 01 	bl      8488 <pfkey_spddelete+0x4a4>
    848c:	48 00 00 08 	b       8494 <pfkey_spddelete+0x4b0>
	xfrm_audit_policy_delete(xp, err ? 0 : 1,
				 audit_get_loginuid(current),
				 audit_get_sessionid(current), 0);

	if (err)
		goto out;
    8490:	60 00 00 00 	nop

	c.seq = hdr->sadb_msg_seq;
	c.pid = hdr->sadb_msg_pid;
	c.data.byid = 0;
	c.event = XFRM_MSG_DELPOLICY;
	km_policy_notify(xp, pol->sadb_x_policy_dir-1, &c);
    8494:	80 01 00 1c 	lwz     r0,28(r1)
    8498:	90 01 00 38 	stw     r0,56(r1)

extern void xfrm_policy_destroy(struct xfrm_policy *policy);

static inline void xfrm_pol_put(struct xfrm_policy *policy)
{
	if (atomic_dec_and_test(&policy->refcnt))
    849c:	80 01 00 38 	lwz     r0,56(r1)
    84a0:	30 00 00 10 	addic   r0,r0,16
    84a4:	90 01 00 3c 	stw     r0,60(r1)
	PPC405_ERR77(0,%1)
"	stwcx.	%0,0,%1\n\
	bne-	1b"
	PPC_ACQUIRE_BARRIER
	: "=&r" (t)
	: "r" (&v->counter)
    84a8:	80 01 00 3c 	lwz     r0,60(r1)

static __inline__ int atomic_dec_return(atomic_t *v)
{
	int t;

	__asm__ __volatile__(
    84ac:	7f e0 00 28 	lwarx   r31,0,r0
    84b0:	33 ff ff ff 	addic   r31,r31,-1
    84b4:	7f e0 01 2d 	stwcx.  r31,0,r0
    84b8:	40 a2 ff f4 	bne-    84ac <pfkey_spddelete+0x4c8>
    84bc:	93 e1 00 40 	stw     r31,64(r1)
	PPC_ACQUIRE_BARRIER
	: "=&r" (t)
	: "r" (&v->counter)
	: "cc", "xer", "memory");

	return t;
    84c0:	80 01 00 40 	lwz     r0,64(r1)
    84c4:	2f 80 00 00 	cmpwi   cr7,r0,0
    84c8:	40 9e 00 0c 	bne-    cr7,84d4 <pfkey_spddelete+0x4f0>
		xfrm_policy_destroy(policy);
    84cc:	80 61 00 38 	lwz     r3,56(r1)
    84d0:	48 00 00 01 	bl      84d0 <pfkey_spddelete+0x4ec>

out:
	xfrm_pol_put(xp);
	return err;
    84d4:	80 01 00 68 	lwz     r0,104(r1)
}
    84d8:	7c 03 03 78 	mr      r3,r0
    84dc:	80 01 00 e4 	lwz     r0,228(r1)
    84e0:	7c 08 03 a6 	mtlr    r0
    84e4:	83 e1 00 dc 	lwz     r31,220(r1)
    84e8:	38 21 00 e0 	addi    r1,r1,224
    84ec:	4e 80 00 20 	blr

000084f0 <key_pol_get_resp>:

static int key_pol_get_resp(struct sock *sk, struct xfrm_policy *xp, struct sadb_msg *hdr, int dir)
{
    84f0:	94 21 ff c0 	stwu    r1,-64(r1)
    84f4:	7c 08 02 a6 	mflr    r0
    84f8:	90 01 00 44 	stw     r0,68(r1)
    84fc:	90 61 00 28 	stw     r3,40(r1)
    8500:	90 81 00 2c 	stw     r4,44(r1)
    8504:	90 a1 00 30 	stw     r5,48(r1)
    8508:	90 c1 00 34 	stw     r6,52(r1)
	int err;
	struct sk_buff *out_skb;
	struct sadb_msg *out_hdr;
	err = 0;
    850c:	38 00 00 00 	li      r0,0
    8510:	90 01 00 08 	stw     r0,8(r1)

	out_skb = pfkey_xfrm_policy2msg_prep(xp);
    8514:	80 61 00 2c 	lwz     r3,44(r1)
    8518:	4b ff e0 29 	bl      6540 <pfkey_xfrm_policy2msg_prep>
    851c:	90 61 00 0c 	stw     r3,12(r1)
    8520:	80 01 00 0c 	lwz     r0,12(r1)
    8524:	90 01 00 14 	stw     r0,20(r1)
}

static inline long __must_check IS_ERR(const void *ptr)
{
	return IS_ERR_VALUE((unsigned long)ptr);
    8528:	81 21 00 14 	lwz     r9,20(r1)
    852c:	38 00 f0 00 	li      r0,-4096
    8530:	7f 89 00 40 	cmplw   cr7,r9,r0
    8534:	7c 00 00 26 	mfcr    r0
    8538:	54 00 f7 fe 	rlwinm  r0,r0,30,31,31
	if (IS_ERR(out_skb)) {
    853c:	2f 80 00 00 	cmpwi   cr7,r0,0
    8540:	41 9e 00 18 	beq-    cr7,8558 <key_pol_get_resp+0x68>
    8544:	80 01 00 0c 	lwz     r0,12(r1)
    8548:	90 01 00 18 	stw     r0,24(r1)
	return (void *) error;
}

static inline long __must_check PTR_ERR(const void *ptr)
{
	return (long) ptr;
    854c:	80 01 00 18 	lwz     r0,24(r1)
		err =  PTR_ERR(out_skb);
    8550:	90 01 00 08 	stw     r0,8(r1)
		goto out;
    8554:	48 00 00 f4 	b       8648 <key_pol_get_resp+0x158>
	}
	err = pfkey_xfrm_policy2msg(out_skb, xp, dir);
    8558:	80 61 00 0c 	lwz     r3,12(r1)
    855c:	80 81 00 2c 	lwz     r4,44(r1)
    8560:	80 a1 00 34 	lwz     r5,52(r1)
    8564:	4b ff e0 5d 	bl      65c0 <pfkey_xfrm_policy2msg>
    8568:	90 61 00 08 	stw     r3,8(r1)
	if (err < 0)
    856c:	80 01 00 08 	lwz     r0,8(r1)
    8570:	2f 80 00 00 	cmpwi   cr7,r0,0
    8574:	41 9c 00 d0 	blt-    cr7,8644 <key_pol_get_resp+0x154>
		goto out;

	out_hdr = (struct sadb_msg *) out_skb->data;
    8578:	80 01 00 0c 	lwz     r0,12(r1)
    857c:	7c 09 03 78 	mr      r9,r0
    8580:	80 09 00 98 	lwz     r0,152(r9)
    8584:	90 01 00 10 	stw     r0,16(r1)
	out_hdr->sadb_msg_version = hdr->sadb_msg_version;
    8588:	80 01 00 30 	lwz     r0,48(r1)
    858c:	7c 0b 03 78 	mr      r11,r0
    8590:	88 0b 00 00 	lbz     r0,0(r11)
    8594:	54 09 06 3e 	clrlwi  r9,r0,24
    8598:	80 01 00 10 	lwz     r0,16(r1)
    859c:	7c 0b 03 78 	mr      r11,r0
    85a0:	99 2b 00 00 	stb     r9,0(r11)
	out_hdr->sadb_msg_type = hdr->sadb_msg_type;
    85a4:	80 01 00 30 	lwz     r0,48(r1)
    85a8:	7c 09 03 78 	mr      r9,r0
    85ac:	88 09 00 01 	lbz     r0,1(r9)
    85b0:	54 09 06 3e 	clrlwi  r9,r0,24
    85b4:	80 01 00 10 	lwz     r0,16(r1)
    85b8:	7c 0b 03 78 	mr      r11,r0
    85bc:	99 2b 00 01 	stb     r9,1(r11)
	out_hdr->sadb_msg_satype = 0;
    85c0:	80 01 00 10 	lwz     r0,16(r1)
    85c4:	39 20 00 00 	li      r9,0
    85c8:	7c 0b 03 78 	mr      r11,r0
    85cc:	99 2b 00 03 	stb     r9,3(r11)
	out_hdr->sadb_msg_errno = 0;
    85d0:	80 01 00 10 	lwz     r0,16(r1)
    85d4:	39 20 00 00 	li      r9,0
    85d8:	7c 0b 03 78 	mr      r11,r0
    85dc:	99 2b 00 02 	stb     r9,2(r11)
	out_hdr->sadb_msg_seq = hdr->sadb_msg_seq;
    85e0:	80 01 00 30 	lwz     r0,48(r1)
    85e4:	7c 0b 03 78 	mr      r11,r0
    85e8:	81 2b 00 08 	lwz     r9,8(r11)
    85ec:	80 01 00 10 	lwz     r0,16(r1)
    85f0:	7c 0b 03 78 	mr      r11,r0
    85f4:	91 2b 00 08 	stw     r9,8(r11)
	out_hdr->sadb_msg_pid = hdr->sadb_msg_pid;
    85f8:	80 01 00 30 	lwz     r0,48(r1)
    85fc:	7c 0b 03 78 	mr      r11,r0
    8600:	81 2b 00 0c 	lwz     r9,12(r11)
    8604:	80 01 00 10 	lwz     r0,16(r1)
    8608:	7c 0b 03 78 	mr      r11,r0
    860c:	91 2b 00 0c 	stw     r9,12(r11)
    8610:	80 01 00 2c 	lwz     r0,44(r1)
    8614:	90 01 00 1c 	stw     r0,28(r1)
	struct xfrm_tmpl       	xfrm_vec[XFRM_MAX_DEPTH];
};

static inline struct net *xp_net(struct xfrm_policy *xp)
{
	return read_pnet(&xp->xp_net);
    8618:	3c 00 00 00 	lis     r0,0
    861c:	30 00 00 00 	addic   r0,r0,0
	pfkey_broadcast(out_skb, GFP_ATOMIC, BROADCAST_ONE, sk, xp_net(xp));
    8620:	80 61 00 0c 	lwz     r3,12(r1)
    8624:	38 80 00 20 	li      r4,32
    8628:	38 a0 00 01 	li      r5,1
    862c:	80 c1 00 28 	lwz     r6,40(r1)
    8630:	7c 07 03 78 	mr      r7,r0
    8634:	4b ff 87 19 	bl      d4c <pfkey_broadcast>
	err = 0;
    8638:	38 00 00 00 	li      r0,0
    863c:	90 01 00 08 	stw     r0,8(r1)
    8640:	48 00 00 08 	b       8648 <key_pol_get_resp+0x158>
		err =  PTR_ERR(out_skb);
		goto out;
	}
	err = pfkey_xfrm_policy2msg(out_skb, xp, dir);
	if (err < 0)
		goto out;
    8644:	60 00 00 00 	nop
	out_hdr->sadb_msg_pid = hdr->sadb_msg_pid;
	pfkey_broadcast(out_skb, GFP_ATOMIC, BROADCAST_ONE, sk, xp_net(xp));
	err = 0;

out:
	return err;
    8648:	80 01 00 08 	lwz     r0,8(r1)
}
    864c:	7c 03 03 78 	mr      r3,r0
    8650:	80 01 00 44 	lwz     r0,68(r1)
    8654:	7c 08 03 a6 	mtlr    r0
    8658:	38 21 00 40 	addi    r1,r1,64
    865c:	4e 80 00 20 	blr

00008660 <pfkey_migrate>:
	return err;
}
#else
static int pfkey_migrate(struct sock *sk, struct sk_buff *skb,
			 struct sadb_msg *hdr, void **ext_hdrs)
{
    8660:	94 21 ff e0 	stwu    r1,-32(r1)
    8664:	90 61 00 08 	stw     r3,8(r1)
    8668:	90 81 00 0c 	stw     r4,12(r1)
    866c:	90 a1 00 10 	stw     r5,16(r1)
    8670:	90 c1 00 14 	stw     r6,20(r1)
	return -ENOPROTOOPT;
    8674:	38 00 ff a4 	li      r0,-92
}
    8678:	7c 03 03 78 	mr      r3,r0
    867c:	38 21 00 20 	addi    r1,r1,32
    8680:	4e 80 00 20 	blr

00008684 <pfkey_spdget>:
#endif


static int pfkey_spdget(struct sock *sk, struct sk_buff *skb, struct sadb_msg *hdr, void **ext_hdrs)
{
    8684:	94 21 ff 80 	stwu    r1,-128(r1)
    8688:	7c 08 02 a6 	mflr    r0
    868c:	90 01 00 84 	stw     r0,132(r1)
    8690:	93 e1 00 7c 	stw     r31,124(r1)
    8694:	90 61 00 68 	stw     r3,104(r1)
    8698:	90 81 00 6c 	stw     r4,108(r1)
    869c:	90 a1 00 70 	stw     r5,112(r1)
    86a0:	90 c1 00 74 	stw     r6,116(r1)
    86a4:	80 01 00 68 	lwz     r0,104(r1)
    86a8:	90 01 00 2c 	stw     r0,44(r1)
    86ac:	3c 00 00 00 	lis     r0,0
    86b0:	30 00 00 00 	addic   r0,r0,0
	struct net *net = sock_net(sk);
    86b4:	90 01 00 08 	stw     r0,8(r1)
	unsigned int dir;
	int err = 0, delete;
    86b8:	38 00 00 00 	li      r0,0
    86bc:	90 01 00 44 	stw     r0,68(r1)
	struct sadb_x_policy *pol;
	struct xfrm_policy *xp;
	struct km_event c;

	if ((pol = ext_hdrs[SADB_X_EXT_POLICY-1]) == NULL)
    86c0:	80 01 00 74 	lwz     r0,116(r1)
    86c4:	7c 09 03 78 	mr      r9,r0
    86c8:	80 09 00 44 	lwz     r0,68(r9)
    86cc:	90 01 00 0c 	stw     r0,12(r1)
    86d0:	80 01 00 0c 	lwz     r0,12(r1)
    86d4:	2f 80 00 00 	cmpwi   cr7,r0,0
    86d8:	40 9e 00 0c 	bne-    cr7,86e4 <pfkey_spdget+0x60>
		return -EINVAL;
    86dc:	38 00 ff ea 	li      r0,-22
    86e0:	48 00 01 a4 	b       8884 <pfkey_spdget+0x200>

	dir = xfrm_policy_id2dir(pol->sadb_x_policy_id);
    86e4:	80 01 00 0c 	lwz     r0,12(r1)
    86e8:	7c 0a 03 78 	mr      r10,r0
    86ec:	80 0a 00 08 	lwz     r0,8(r10)
    86f0:	90 01 00 1c 	stw     r0,28(r1)
	}
}

static inline int xfrm_policy_id2dir(u32 index)
{
	return index & 7;
    86f4:	80 01 00 1c 	lwz     r0,28(r1)
    86f8:	54 00 07 7e 	clrlwi  r0,r0,29
    86fc:	90 01 00 10 	stw     r0,16(r1)
	if (dir >= XFRM_POLICY_MAX)
    8700:	80 01 00 10 	lwz     r0,16(r1)
    8704:	2b 80 00 02 	cmplwi  cr7,r0,2
    8708:	40 9d 00 0c 	ble-    cr7,8714 <pfkey_spdget+0x90>
		return -EINVAL;
    870c:	38 00 ff ea 	li      r0,-22
    8710:	48 00 01 74 	b       8884 <pfkey_spdget+0x200>

	delete = (hdr->sadb_msg_type == SADB_X_SPDDELETE2);
    8714:	80 01 00 70 	lwz     r0,112(r1)
    8718:	7c 09 03 78 	mr      r9,r0
    871c:	88 09 00 01 	lbz     r0,1(r9)
    8720:	54 00 06 3e 	clrlwi  r0,r0,24
    8724:	2f 80 00 16 	cmpwi   cr7,r0,22
    8728:	7c 00 00 26 	mfcr    r0
    872c:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
    8730:	90 01 00 14 	stw     r0,20(r1)
	xp = xfrm_policy_byid(net, DUMMY_MARK, XFRM_POLICY_TYPE_MAIN,
    8734:	81 61 00 10 	lwz     r11,16(r1)
			      dir, pol->sadb_x_policy_id, delete, &err);
    8738:	80 01 00 0c 	lwz     r0,12(r1)
	dir = xfrm_policy_id2dir(pol->sadb_x_policy_id);
	if (dir >= XFRM_POLICY_MAX)
		return -EINVAL;

	delete = (hdr->sadb_msg_type == SADB_X_SPDDELETE2);
	xp = xfrm_policy_byid(net, DUMMY_MARK, XFRM_POLICY_TYPE_MAIN,
    873c:	7c 0a 03 78 	mr      r10,r0
    8740:	81 2a 00 08 	lwz     r9,8(r10)
    8744:	38 01 00 44 	addi    r0,r1,68
    8748:	80 61 00 08 	lwz     r3,8(r1)
    874c:	38 80 00 00 	li      r4,0
    8750:	38 a0 00 00 	li      r5,0
    8754:	7d 66 5b 78 	mr      r6,r11
    8758:	7d 27 4b 78 	mr      r7,r9
    875c:	81 01 00 14 	lwz     r8,20(r1)
    8760:	7c 09 03 78 	mr      r9,r0
    8764:	48 00 00 01 	bl      8764 <pfkey_spdget+0xe0>
    8768:	90 61 00 18 	stw     r3,24(r1)
			      dir, pol->sadb_x_policy_id, delete, &err);
	if (xp == NULL)
    876c:	80 01 00 18 	lwz     r0,24(r1)
    8770:	2f 80 00 00 	cmpwi   cr7,r0,0
    8774:	40 9e 00 0c 	bne-    cr7,8780 <pfkey_spdget+0xfc>
		return -ENOENT;
    8778:	38 00 ff fe 	li      r0,-2
    877c:	48 00 01 08 	b       8884 <pfkey_spdget+0x200>

	if (delete) {
    8780:	80 01 00 14 	lwz     r0,20(r1)
    8784:	2f 80 00 00 	cmpwi   cr7,r0,0
    8788:	41 9e 00 90 	beq-    cr7,8818 <pfkey_spdget+0x194>
		xfrm_audit_policy_delete(xp, err ? 0 : 1,
    878c:	80 01 00 44 	lwz     r0,68(r1)
    8790:	2f 80 00 00 	cmpwi   cr7,r0,0
    8794:	7c 00 00 26 	mfcr    r0
    8798:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
    879c:	81 21 00 18 	lwz     r9,24(r1)
    87a0:	91 21 00 30 	stw     r9,48(r1)
    87a4:	90 01 00 34 	stw     r0,52(r1)
    87a8:	38 00 ff ff 	li      r0,-1
    87ac:	90 01 00 38 	stw     r0,56(r1)
    87b0:	38 00 ff ff 	li      r0,-1
    87b4:	90 01 00 3c 	stw     r0,60(r1)
    87b8:	38 00 00 00 	li      r0,0
    87bc:	90 01 00 40 	stw     r0,64(r1)
				audit_get_loginuid(current),
				audit_get_sessionid(current), 0);

		if (err)
    87c0:	80 01 00 44 	lwz     r0,68(r1)
    87c4:	2f 80 00 00 	cmpwi   cr7,r0,0
    87c8:	40 9e 00 74 	bne-    cr7,883c <pfkey_spdget+0x1b8>
			goto out;
		c.seq = hdr->sadb_msg_seq;
    87cc:	80 01 00 70 	lwz     r0,112(r1)
    87d0:	7c 09 03 78 	mr      r9,r0
    87d4:	80 09 00 08 	lwz     r0,8(r9)
    87d8:	90 01 00 4c 	stw     r0,76(r1)
		c.pid = hdr->sadb_msg_pid;
    87dc:	80 01 00 70 	lwz     r0,112(r1)
    87e0:	7c 0a 03 78 	mr      r10,r0
    87e4:	80 0a 00 0c 	lwz     r0,12(r10)
    87e8:	90 01 00 50 	stw     r0,80(r1)
		c.data.byid = 1;
    87ec:	38 00 00 01 	li      r0,1
    87f0:	90 01 00 48 	stw     r0,72(r1)
		c.event = XFRM_MSG_DELPOLICY;
    87f4:	38 00 00 14 	li      r0,20
    87f8:	90 01 00 54 	stw     r0,84(r1)
		km_policy_notify(xp, dir, &c);
    87fc:	81 21 00 10 	lwz     r9,16(r1)
    8800:	38 01 00 48 	addi    r0,r1,72
    8804:	80 61 00 18 	lwz     r3,24(r1)
    8808:	7d 24 4b 78 	mr      r4,r9
    880c:	7c 05 03 78 	mr      r5,r0
    8810:	48 00 00 01 	bl      8810 <pfkey_spdget+0x18c>
    8814:	48 00 00 2c 	b       8840 <pfkey_spdget+0x1bc>
	} else {
		err = key_pol_get_resp(sk, xp, hdr, dir);
    8818:	80 01 00 10 	lwz     r0,16(r1)
    881c:	80 61 00 68 	lwz     r3,104(r1)
    8820:	80 81 00 18 	lwz     r4,24(r1)
    8824:	80 a1 00 70 	lwz     r5,112(r1)
    8828:	7c 06 03 78 	mr      r6,r0
    882c:	4b ff fc c5 	bl      84f0 <key_pol_get_resp>
    8830:	7c 60 1b 78 	mr      r0,r3
    8834:	90 01 00 44 	stw     r0,68(r1)
    8838:	48 00 00 08 	b       8840 <pfkey_spdget+0x1bc>
		xfrm_audit_policy_delete(xp, err ? 0 : 1,
				audit_get_loginuid(current),
				audit_get_sessionid(current), 0);

		if (err)
			goto out;
    883c:	60 00 00 00 	nop
		c.pid = hdr->sadb_msg_pid;
		c.data.byid = 1;
		c.event = XFRM_MSG_DELPOLICY;
		km_policy_notify(xp, dir, &c);
	} else {
		err = key_pol_get_resp(sk, xp, hdr, dir);
    8840:	80 01 00 18 	lwz     r0,24(r1)
    8844:	90 01 00 20 	stw     r0,32(r1)

extern void xfrm_policy_destroy(struct xfrm_policy *policy);

static inline void xfrm_pol_put(struct xfrm_policy *policy)
{
	if (atomic_dec_and_test(&policy->refcnt))
    8848:	80 01 00 20 	lwz     r0,32(r1)
    884c:	30 00 00 10 	addic   r0,r0,16
    8850:	90 01 00 24 	stw     r0,36(r1)
	PPC405_ERR77(0,%1)
"	stwcx.	%0,0,%1\n\
	bne-	1b"
	PPC_ACQUIRE_BARRIER
	: "=&r" (t)
	: "r" (&v->counter)
    8854:	80 01 00 24 	lwz     r0,36(r1)

static __inline__ int atomic_dec_return(atomic_t *v)
{
	int t;

	__asm__ __volatile__(
    8858:	7f e0 00 28 	lwarx   r31,0,r0
    885c:	33 ff ff ff 	addic   r31,r31,-1
    8860:	7f e0 01 2d 	stwcx.  r31,0,r0
    8864:	40 a2 ff f4 	bne-    8858 <pfkey_spdget+0x1d4>
    8868:	93 e1 00 28 	stw     r31,40(r1)
	PPC_ACQUIRE_BARRIER
	: "=&r" (t)
	: "r" (&v->counter)
	: "cc", "xer", "memory");

	return t;
    886c:	80 01 00 28 	lwz     r0,40(r1)
    8870:	2f 80 00 00 	cmpwi   cr7,r0,0
    8874:	40 9e 00 0c 	bne-    cr7,8880 <pfkey_spdget+0x1fc>
		xfrm_policy_destroy(policy);
    8878:	80 61 00 20 	lwz     r3,32(r1)
    887c:	48 00 00 01 	bl      887c <pfkey_spdget+0x1f8>
	}

out:
	xfrm_pol_put(xp);
	return err;
    8880:	80 01 00 44 	lwz     r0,68(r1)
}
    8884:	7c 03 03 78 	mr      r3,r0
    8888:	80 01 00 84 	lwz     r0,132(r1)
    888c:	7c 08 03 a6 	mtlr    r0
    8890:	83 e1 00 7c 	lwz     r31,124(r1)
    8894:	38 21 00 80 	addi    r1,r1,128
    8898:	4e 80 00 20 	blr

0000889c <dump_sp>:

static int dump_sp(struct xfrm_policy *xp, int dir, int count, void *ptr)
{
    889c:	94 21 ff c0 	stwu    r1,-64(r1)
    88a0:	7c 08 02 a6 	mflr    r0
    88a4:	90 01 00 44 	stw     r0,68(r1)
    88a8:	90 61 00 28 	stw     r3,40(r1)
    88ac:	90 81 00 2c 	stw     r4,44(r1)
    88b0:	90 a1 00 30 	stw     r5,48(r1)
    88b4:	90 c1 00 34 	stw     r6,52(r1)
	struct pfkey_sock *pfk = ptr;
    88b8:	80 01 00 34 	lwz     r0,52(r1)
    88bc:	90 01 00 08 	stw     r0,8(r1)
	struct sk_buff *out_skb;
	struct sadb_msg *out_hdr;
	int err;

	if (!pfkey_can_dump(&pfk->sk))
    88c0:	80 01 00 08 	lwz     r0,8(r1)
    88c4:	7c 03 03 78 	mr      r3,r0
    88c8:	4b ff 77 39 	bl      0 <pfkey_can_dump>
    88cc:	7c 60 1b 78 	mr      r0,r3
    88d0:	2f 80 00 00 	cmpwi   cr7,r0,0
    88d4:	40 9e 00 0c 	bne-    cr7,88e0 <dump_sp+0x44>
		return -ENOBUFS;
    88d8:	38 00 ff 97 	li      r0,-105
    88dc:	48 00 01 58 	b       8a34 <dump_sp+0x198>

	out_skb = pfkey_xfrm_policy2msg_prep(xp);
    88e0:	80 61 00 28 	lwz     r3,40(r1)
    88e4:	4b ff dc 5d 	bl      6540 <pfkey_xfrm_policy2msg_prep>
    88e8:	90 61 00 0c 	stw     r3,12(r1)
    88ec:	80 01 00 0c 	lwz     r0,12(r1)
    88f0:	90 01 00 18 	stw     r0,24(r1)
}

static inline long __must_check IS_ERR(const void *ptr)
{
	return IS_ERR_VALUE((unsigned long)ptr);
    88f4:	81 21 00 18 	lwz     r9,24(r1)
    88f8:	38 00 f0 00 	li      r0,-4096
    88fc:	7f 89 00 40 	cmplw   cr7,r9,r0
    8900:	7c 00 00 26 	mfcr    r0
    8904:	54 00 f7 fe 	rlwinm  r0,r0,30,31,31
	if (IS_ERR(out_skb))
    8908:	2f 80 00 00 	cmpwi   cr7,r0,0
    890c:	41 9e 00 14 	beq-    cr7,8920 <dump_sp+0x84>
    8910:	80 01 00 0c 	lwz     r0,12(r1)
    8914:	90 01 00 1c 	stw     r0,28(r1)
	return (void *) error;
}

static inline long __must_check PTR_ERR(const void *ptr)
{
	return (long) ptr;
    8918:	80 01 00 1c 	lwz     r0,28(r1)
		return PTR_ERR(out_skb);
    891c:	48 00 01 18 	b       8a34 <dump_sp+0x198>

	err = pfkey_xfrm_policy2msg(out_skb, xp, dir);
    8920:	80 61 00 0c 	lwz     r3,12(r1)
    8924:	80 81 00 28 	lwz     r4,40(r1)
    8928:	80 a1 00 2c 	lwz     r5,44(r1)
    892c:	4b ff dc 95 	bl      65c0 <pfkey_xfrm_policy2msg>
    8930:	90 61 00 10 	stw     r3,16(r1)
	if (err < 0)
    8934:	80 01 00 10 	lwz     r0,16(r1)
    8938:	2f 80 00 00 	cmpwi   cr7,r0,0
    893c:	40 9c 00 0c 	bge-    cr7,8948 <dump_sp+0xac>
		return err;
    8940:	80 01 00 10 	lwz     r0,16(r1)
    8944:	48 00 00 f0 	b       8a34 <dump_sp+0x198>

	out_hdr = (struct sadb_msg *) out_skb->data;
    8948:	80 01 00 0c 	lwz     r0,12(r1)
    894c:	7c 09 03 78 	mr      r9,r0
    8950:	80 09 00 98 	lwz     r0,152(r9)
    8954:	90 01 00 14 	stw     r0,20(r1)
	out_hdr->sadb_msg_version = pfk->dump.msg_version;
    8958:	80 01 00 08 	lwz     r0,8(r1)
    895c:	7c 0b 03 78 	mr      r11,r0
    8960:	88 0b 01 50 	lbz     r0,336(r11)
    8964:	54 09 06 3e 	clrlwi  r9,r0,24
    8968:	80 01 00 14 	lwz     r0,20(r1)
    896c:	7c 0b 03 78 	mr      r11,r0
    8970:	99 2b 00 00 	stb     r9,0(r11)
	out_hdr->sadb_msg_type = SADB_X_SPDDUMP;
    8974:	80 01 00 14 	lwz     r0,20(r1)
    8978:	39 20 00 12 	li      r9,18
    897c:	7c 0b 03 78 	mr      r11,r0
    8980:	99 2b 00 01 	stb     r9,1(r11)
	out_hdr->sadb_msg_satype = SADB_SATYPE_UNSPEC;
    8984:	80 01 00 14 	lwz     r0,20(r1)
    8988:	39 20 00 00 	li      r9,0
    898c:	7c 0b 03 78 	mr      r11,r0
    8990:	99 2b 00 03 	stb     r9,3(r11)
	out_hdr->sadb_msg_errno = 0;
    8994:	80 01 00 14 	lwz     r0,20(r1)
    8998:	39 20 00 00 	li      r9,0
    899c:	7c 0b 03 78 	mr      r11,r0
    89a0:	99 2b 00 02 	stb     r9,2(r11)
	out_hdr->sadb_msg_seq = count + 1;
    89a4:	80 01 00 30 	lwz     r0,48(r1)
    89a8:	30 00 00 01 	addic   r0,r0,1
    89ac:	7c 09 03 78 	mr      r9,r0
    89b0:	80 01 00 14 	lwz     r0,20(r1)
    89b4:	7c 0b 03 78 	mr      r11,r0
    89b8:	91 2b 00 08 	stw     r9,8(r11)
	out_hdr->sadb_msg_pid = pfk->dump.msg_pid;
    89bc:	80 01 00 08 	lwz     r0,8(r1)
    89c0:	7c 0b 03 78 	mr      r11,r0
    89c4:	81 2b 01 54 	lwz     r9,340(r11)
    89c8:	80 01 00 14 	lwz     r0,20(r1)
    89cc:	7c 0b 03 78 	mr      r11,r0
    89d0:	91 2b 00 0c 	stw     r9,12(r11)

	if (pfk->dump.skb)
    89d4:	80 01 00 08 	lwz     r0,8(r1)
    89d8:	7c 09 03 78 	mr      r9,r0
    89dc:	80 09 01 74 	lwz     r0,372(r9)
    89e0:	2f 80 00 00 	cmpwi   cr7,r0,0
    89e4:	41 9e 00 3c 	beq-    cr7,8a20 <dump_sp+0x184>
		pfkey_broadcast(pfk->dump.skb, GFP_ATOMIC, BROADCAST_ONE,
    89e8:	80 01 00 08 	lwz     r0,8(r1)
    89ec:	7c 09 03 78 	mr      r9,r0
    89f0:	81 69 01 74 	lwz     r11,372(r9)
    89f4:	81 21 00 08 	lwz     r9,8(r1)
				&pfk->sk, sock_net(&pfk->sk));
    89f8:	80 01 00 08 	lwz     r0,8(r1)
    89fc:	90 01 00 20 	stw     r0,32(r1)
    8a00:	3c 00 00 00 	lis     r0,0
    8a04:	30 00 00 00 	addic   r0,r0,0
	out_hdr->sadb_msg_errno = 0;
	out_hdr->sadb_msg_seq = count + 1;
	out_hdr->sadb_msg_pid = pfk->dump.msg_pid;

	if (pfk->dump.skb)
		pfkey_broadcast(pfk->dump.skb, GFP_ATOMIC, BROADCAST_ONE,
    8a08:	7d 63 5b 78 	mr      r3,r11
    8a0c:	38 80 00 20 	li      r4,32
    8a10:	38 a0 00 01 	li      r5,1
    8a14:	7d 26 4b 78 	mr      r6,r9
    8a18:	7c 07 03 78 	mr      r7,r0
    8a1c:	4b ff 83 31 	bl      d4c <pfkey_broadcast>
				&pfk->sk, sock_net(&pfk->sk));
	pfk->dump.skb = out_skb;
    8a20:	80 01 00 08 	lwz     r0,8(r1)
    8a24:	81 21 00 0c 	lwz     r9,12(r1)
    8a28:	7c 0b 03 78 	mr      r11,r0
    8a2c:	91 2b 01 74 	stw     r9,372(r11)

	return 0;
    8a30:	38 00 00 00 	li      r0,0
}
    8a34:	7c 03 03 78 	mr      r3,r0
    8a38:	80 01 00 44 	lwz     r0,68(r1)
    8a3c:	7c 08 03 a6 	mtlr    r0
    8a40:	38 21 00 40 	addi    r1,r1,64
    8a44:	4e 80 00 20 	blr

00008a48 <pfkey_dump_sp>:

static int pfkey_dump_sp(struct pfkey_sock *pfk)
{
    8a48:	94 21 ff e0 	stwu    r1,-32(r1)
    8a4c:	7c 08 02 a6 	mflr    r0
    8a50:	90 01 00 24 	stw     r0,36(r1)
    8a54:	90 61 00 18 	stw     r3,24(r1)
	struct net *net = sock_net(&pfk->sk);
    8a58:	80 01 00 18 	lwz     r0,24(r1)
    8a5c:	90 01 00 0c 	stw     r0,12(r1)
    8a60:	3c 00 00 00 	lis     r0,0
    8a64:	30 00 00 00 	addic   r0,r0,0
    8a68:	90 01 00 08 	stw     r0,8(r1)
	return xfrm_policy_walk(net, &pfk->dump.u.policy, dump_sp, (void *) pfk);
    8a6c:	80 01 00 18 	lwz     r0,24(r1)
    8a70:	30 00 01 60 	addic   r0,r0,352
    8a74:	80 61 00 08 	lwz     r3,8(r1)
    8a78:	7c 04 03 78 	mr      r4,r0
    8a7c:	3c 00 00 01 	lis     r0,1
    8a80:	30 a0 88 9c 	addic   r5,r0,-30564
    8a84:	80 c1 00 18 	lwz     r6,24(r1)
    8a88:	48 00 00 01 	bl      8a88 <pfkey_dump_sp+0x40>
    8a8c:	7c 60 1b 78 	mr      r0,r3
}
    8a90:	7c 03 03 78 	mr      r3,r0
    8a94:	80 01 00 24 	lwz     r0,36(r1)
    8a98:	7c 08 03 a6 	mtlr    r0
    8a9c:	38 21 00 20 	addi    r1,r1,32
    8aa0:	4e 80 00 20 	blr

00008aa4 <pfkey_dump_sp_done>:

static void pfkey_dump_sp_done(struct pfkey_sock *pfk)
{
    8aa4:	94 21 ff f0 	stwu    r1,-16(r1)
    8aa8:	7c 08 02 a6 	mflr    r0
    8aac:	90 01 00 14 	stw     r0,20(r1)
    8ab0:	90 61 00 08 	stw     r3,8(r1)
	xfrm_policy_walk_done(&pfk->dump.u.policy);
    8ab4:	80 01 00 08 	lwz     r0,8(r1)
    8ab8:	30 00 01 60 	addic   r0,r0,352
    8abc:	7c 03 03 78 	mr      r3,r0
    8ac0:	48 00 00 01 	bl      8ac0 <pfkey_dump_sp_done+0x1c>
}
    8ac4:	80 01 00 14 	lwz     r0,20(r1)
    8ac8:	7c 08 03 a6 	mtlr    r0
    8acc:	38 21 00 10 	addi    r1,r1,16
    8ad0:	4e 80 00 20 	blr

00008ad4 <pfkey_spddump>:

static int pfkey_spddump(struct sock *sk, struct sk_buff *skb, struct sadb_msg *hdr, void **ext_hdrs)
{
    8ad4:	94 21 ff d0 	stwu    r1,-48(r1)
    8ad8:	7c 08 02 a6 	mflr    r0
    8adc:	90 01 00 34 	stw     r0,52(r1)
    8ae0:	90 61 00 18 	stw     r3,24(r1)
    8ae4:	90 81 00 1c 	stw     r4,28(r1)
    8ae8:	90 a1 00 20 	stw     r5,32(r1)
    8aec:	90 c1 00 24 	stw     r6,36(r1)
    8af0:	80 01 00 18 	lwz     r0,24(r1)
    8af4:	90 01 00 0c 	stw     r0,12(r1)
	} dump;
};

static inline struct pfkey_sock *pfkey_sk(struct sock *sk)
{
	return (struct pfkey_sock *)sk;
    8af8:	80 01 00 0c 	lwz     r0,12(r1)
	xfrm_policy_walk_done(&pfk->dump.u.policy);
}

static int pfkey_spddump(struct sock *sk, struct sk_buff *skb, struct sadb_msg *hdr, void **ext_hdrs)
{
	struct pfkey_sock *pfk = pfkey_sk(sk);
    8afc:	90 01 00 08 	stw     r0,8(r1)

	if (pfk->dump.dump != NULL)
    8b00:	80 01 00 08 	lwz     r0,8(r1)
    8b04:	7c 09 03 78 	mr      r9,r0
    8b08:	80 09 01 58 	lwz     r0,344(r9)
    8b0c:	2f 80 00 00 	cmpwi   cr7,r0,0
    8b10:	41 9e 00 0c 	beq-    cr7,8b1c <pfkey_spddump+0x48>
		return -EBUSY;
    8b14:	38 00 ff f0 	li      r0,-16
    8b18:	48 00 00 80 	b       8b98 <pfkey_spddump+0xc4>

	pfk->dump.msg_version = hdr->sadb_msg_version;
    8b1c:	80 01 00 20 	lwz     r0,32(r1)
    8b20:	7c 0b 03 78 	mr      r11,r0
    8b24:	88 0b 00 00 	lbz     r0,0(r11)
    8b28:	54 09 06 3e 	clrlwi  r9,r0,24
    8b2c:	80 01 00 08 	lwz     r0,8(r1)
    8b30:	7c 0b 03 78 	mr      r11,r0
    8b34:	99 2b 01 50 	stb     r9,336(r11)
	pfk->dump.msg_pid = hdr->sadb_msg_pid;
    8b38:	80 01 00 20 	lwz     r0,32(r1)
    8b3c:	7c 0b 03 78 	mr      r11,r0
    8b40:	81 2b 00 0c 	lwz     r9,12(r11)
    8b44:	80 01 00 08 	lwz     r0,8(r1)
    8b48:	7c 0b 03 78 	mr      r11,r0
    8b4c:	91 2b 01 54 	stw     r9,340(r11)
	pfk->dump.dump = pfkey_dump_sp;
    8b50:	80 01 00 08 	lwz     r0,8(r1)
    8b54:	3d 20 00 01 	lis     r9,1
    8b58:	39 29 8a 48 	addi    r9,r9,-30136
    8b5c:	7c 0b 03 78 	mr      r11,r0
    8b60:	91 2b 01 58 	stw     r9,344(r11)
	pfk->dump.done = pfkey_dump_sp_done;
    8b64:	80 01 00 08 	lwz     r0,8(r1)
    8b68:	3d 20 00 01 	lis     r9,1
    8b6c:	39 29 8a a4 	addi    r9,r9,-30044
    8b70:	7c 0b 03 78 	mr      r11,r0
    8b74:	91 2b 01 5c 	stw     r9,348(r11)
	xfrm_policy_walk_init(&pfk->dump.u.policy, XFRM_POLICY_TYPE_MAIN);
    8b78:	80 01 00 08 	lwz     r0,8(r1)
    8b7c:	30 00 01 60 	addic   r0,r0,352
    8b80:	7c 03 03 78 	mr      r3,r0
    8b84:	38 80 00 00 	li      r4,0
    8b88:	48 00 00 01 	bl      8b88 <pfkey_spddump+0xb4>

	return pfkey_do_dump(pfk);
    8b8c:	80 61 00 08 	lwz     r3,8(r1)
    8b90:	4b ff 84 81 	bl      1010 <pfkey_do_dump>
    8b94:	7c 60 1b 78 	mr      r0,r3
}
    8b98:	7c 03 03 78 	mr      r3,r0
    8b9c:	80 01 00 34 	lwz     r0,52(r1)
    8ba0:	7c 08 03 a6 	mtlr    r0
    8ba4:	38 21 00 30 	addi    r1,r1,48
    8ba8:	4e 80 00 20 	blr

00008bac <key_notify_policy_flush>:

static int key_notify_policy_flush(struct km_event *c)
{
    8bac:	94 21 ff e0 	stwu    r1,-32(r1)
    8bb0:	7c 08 02 a6 	mflr    r0
    8bb4:	90 01 00 24 	stw     r0,36(r1)
    8bb8:	90 61 00 18 	stw     r3,24(r1)
    8bbc:	38 00 00 20 	li      r0,32
    8bc0:	90 01 00 10 	stw     r0,16(r1)
    8bc4:	38 00 00 20 	li      r0,32
    8bc8:	90 01 00 14 	stw     r0,20(r1)
    8bcc:	80 61 00 10 	lwz     r3,16(r1)
    8bd0:	80 81 00 14 	lwz     r4,20(r1)
    8bd4:	38 a0 00 00 	li      r5,0
    8bd8:	38 c0 ff ff 	li      r6,-1
    8bdc:	48 00 00 01 	bl      8bdc <key_notify_policy_flush+0x30>
    8be0:	7c 60 1b 78 	mr      r0,r3
	struct sk_buff *skb_out;
	struct sadb_msg *hdr;

	skb_out = alloc_skb(sizeof(struct sadb_msg) + 16, GFP_ATOMIC);
    8be4:	90 01 00 08 	stw     r0,8(r1)
	if (!skb_out)
    8be8:	80 01 00 08 	lwz     r0,8(r1)
    8bec:	2f 80 00 00 	cmpwi   cr7,r0,0
    8bf0:	40 9e 00 0c 	bne-    cr7,8bfc <key_notify_policy_flush+0x50>
		return -ENOBUFS;
    8bf4:	38 00 ff 97 	li      r0,-105
    8bf8:	48 00 00 ac 	b       8ca4 <key_notify_policy_flush+0xf8>
	hdr = (struct sadb_msg *) skb_put(skb_out, sizeof(struct sadb_msg));
    8bfc:	80 61 00 08 	lwz     r3,8(r1)
    8c00:	38 80 00 10 	li      r4,16
    8c04:	48 00 00 01 	bl      8c04 <key_notify_policy_flush+0x58>
    8c08:	90 61 00 0c 	stw     r3,12(r1)
	hdr->sadb_msg_type = SADB_X_SPDFLUSH;
    8c0c:	80 01 00 0c 	lwz     r0,12(r1)
    8c10:	39 20 00 13 	li      r9,19
    8c14:	7c 0b 03 78 	mr      r11,r0
    8c18:	99 2b 00 01 	stb     r9,1(r11)
	hdr->sadb_msg_seq = c->seq;
    8c1c:	80 01 00 18 	lwz     r0,24(r1)
    8c20:	7c 0b 03 78 	mr      r11,r0
    8c24:	81 2b 00 04 	lwz     r9,4(r11)
    8c28:	80 01 00 0c 	lwz     r0,12(r1)
    8c2c:	7c 0b 03 78 	mr      r11,r0
    8c30:	91 2b 00 08 	stw     r9,8(r11)
	hdr->sadb_msg_pid = c->pid;
    8c34:	80 01 00 18 	lwz     r0,24(r1)
    8c38:	7c 0b 03 78 	mr      r11,r0
    8c3c:	81 2b 00 08 	lwz     r9,8(r11)
    8c40:	80 01 00 0c 	lwz     r0,12(r1)
    8c44:	7c 0b 03 78 	mr      r11,r0
    8c48:	91 2b 00 0c 	stw     r9,12(r11)
	hdr->sadb_msg_version = PF_KEY_V2;
    8c4c:	80 01 00 0c 	lwz     r0,12(r1)
    8c50:	39 20 00 02 	li      r9,2
    8c54:	7c 0b 03 78 	mr      r11,r0
    8c58:	99 2b 00 00 	stb     r9,0(r11)
	hdr->sadb_msg_errno = (uint8_t) 0;
    8c5c:	80 01 00 0c 	lwz     r0,12(r1)
    8c60:	39 20 00 00 	li      r9,0
    8c64:	7c 0b 03 78 	mr      r11,r0
    8c68:	99 2b 00 02 	stb     r9,2(r11)
	hdr->sadb_msg_len = (sizeof(struct sadb_msg) / sizeof(uint64_t));
    8c6c:	80 01 00 0c 	lwz     r0,12(r1)
    8c70:	39 20 00 02 	li      r9,2
    8c74:	7c 0b 03 78 	mr      r11,r0
    8c78:	b1 2b 00 04 	sth     r9,4(r11)
	pfkey_broadcast(skb_out, GFP_ATOMIC, BROADCAST_ALL, NULL, c->net);
    8c7c:	80 01 00 18 	lwz     r0,24(r1)
    8c80:	7c 09 03 78 	mr      r9,r0
    8c84:	80 09 00 10 	lwz     r0,16(r9)
    8c88:	80 61 00 08 	lwz     r3,8(r1)
    8c8c:	38 80 00 20 	li      r4,32
    8c90:	38 a0 00 00 	li      r5,0
    8c94:	38 c0 00 00 	li      r6,0
    8c98:	7c 07 03 78 	mr      r7,r0
    8c9c:	4b ff 80 b1 	bl      d4c <pfkey_broadcast>
	return 0;
    8ca0:	38 00 00 00 	li      r0,0

}
    8ca4:	7c 03 03 78 	mr      r3,r0
    8ca8:	80 01 00 24 	lwz     r0,36(r1)
    8cac:	7c 08 03 a6 	mtlr    r0
    8cb0:	38 21 00 20 	addi    r1,r1,32
    8cb4:	4e 80 00 20 	blr

00008cb8 <pfkey_spdflush>:

static int pfkey_spdflush(struct sock *sk, struct sk_buff *skb, struct sadb_msg *hdr, void **ext_hdrs)
{
    8cb8:	94 21 ff b0 	stwu    r1,-80(r1)
    8cbc:	7c 08 02 a6 	mflr    r0
    8cc0:	90 01 00 54 	stw     r0,84(r1)
    8cc4:	90 61 00 38 	stw     r3,56(r1)
    8cc8:	90 81 00 3c 	stw     r4,60(r1)
    8ccc:	90 a1 00 40 	stw     r5,64(r1)
    8cd0:	90 c1 00 44 	stw     r6,68(r1)
    8cd4:	80 01 00 38 	lwz     r0,56(r1)
    8cd8:	90 01 00 14 	stw     r0,20(r1)
    8cdc:	3c 00 00 00 	lis     r0,0
    8ce0:	30 00 00 00 	addic   r0,r0,0
	struct net *net = sock_net(sk);
    8ce4:	90 01 00 08 	stw     r0,8(r1)
	struct km_event c;
	struct xfrm_audit audit_info;
	int err, err2;

	audit_info.loginuid = audit_get_loginuid(current);
    8ce8:	38 00 ff ff 	li      r0,-1
    8cec:	90 01 00 30 	stw     r0,48(r1)
	audit_info.sessionid = audit_get_sessionid(current);
    8cf0:	38 00 ff ff 	li      r0,-1
    8cf4:	90 01 00 34 	stw     r0,52(r1)
	audit_info.secid = 0;
    8cf8:	38 00 00 00 	li      r0,0
    8cfc:	90 01 00 2c 	stw     r0,44(r1)
	err = xfrm_policy_flush(net, XFRM_POLICY_TYPE_MAIN, &audit_info);
    8d00:	38 01 00 2c 	addi    r0,r1,44
    8d04:	80 61 00 08 	lwz     r3,8(r1)
    8d08:	38 80 00 00 	li      r4,0
    8d0c:	7c 05 03 78 	mr      r5,r0
    8d10:	48 00 00 01 	bl      8d10 <pfkey_spdflush+0x58>
    8d14:	90 61 00 0c 	stw     r3,12(r1)
	err2 = unicast_flush_resp(sk, hdr);
    8d18:	80 61 00 38 	lwz     r3,56(r1)
    8d1c:	80 81 00 40 	lwz     r4,64(r1)
    8d20:	4b ff c9 39 	bl      5658 <unicast_flush_resp>
    8d24:	90 61 00 10 	stw     r3,16(r1)
	if (err || err2) {
    8d28:	80 01 00 0c 	lwz     r0,12(r1)
    8d2c:	2f 80 00 00 	cmpwi   cr7,r0,0
    8d30:	40 9e 00 10 	bne-    cr7,8d40 <pfkey_spdflush+0x88>
    8d34:	80 01 00 10 	lwz     r0,16(r1)
    8d38:	2f 80 00 00 	cmpwi   cr7,r0,0
    8d3c:	41 9e 00 24 	beq-    cr7,8d60 <pfkey_spdflush+0xa8>
		if (err == -ESRCH) /* empty table - old silent behavior */
    8d40:	81 21 00 0c 	lwz     r9,12(r1)
    8d44:	38 00 ff fd 	li      r0,-3
    8d48:	7f 89 00 00 	cmpw    cr7,r9,r0
    8d4c:	40 9e 00 0c 	bne-    cr7,8d58 <pfkey_spdflush+0xa0>
			return 0;
    8d50:	38 00 00 00 	li      r0,0
    8d54:	48 00 00 5c 	b       8db0 <pfkey_spdflush+0xf8>
		return err;
    8d58:	80 01 00 0c 	lwz     r0,12(r1)
    8d5c:	48 00 00 54 	b       8db0 <pfkey_spdflush+0xf8>
	}

	c.data.type = XFRM_POLICY_TYPE_MAIN;
    8d60:	38 00 00 00 	li      r0,0
    8d64:	90 01 00 18 	stw     r0,24(r1)
	c.event = XFRM_MSG_FLUSHPOLICY;
    8d68:	38 00 00 1d 	li      r0,29
    8d6c:	90 01 00 24 	stw     r0,36(r1)
	c.pid = hdr->sadb_msg_pid;
    8d70:	80 01 00 40 	lwz     r0,64(r1)
    8d74:	7c 09 03 78 	mr      r9,r0
    8d78:	80 09 00 0c 	lwz     r0,12(r9)
    8d7c:	90 01 00 20 	stw     r0,32(r1)
	c.seq = hdr->sadb_msg_seq;
    8d80:	80 01 00 40 	lwz     r0,64(r1)
    8d84:	7c 09 03 78 	mr      r9,r0
    8d88:	80 09 00 08 	lwz     r0,8(r9)
    8d8c:	90 01 00 1c 	stw     r0,28(r1)
	c.net = net;
    8d90:	80 01 00 08 	lwz     r0,8(r1)
    8d94:	90 01 00 28 	stw     r0,40(r1)
	km_policy_notify(NULL, 0, &c);
    8d98:	38 01 00 18 	addi    r0,r1,24
    8d9c:	38 60 00 00 	li      r3,0
    8da0:	38 80 00 00 	li      r4,0
    8da4:	7c 05 03 78 	mr      r5,r0
    8da8:	48 00 00 01 	bl      8da8 <pfkey_spdflush+0xf0>

	return 0;
    8dac:	38 00 00 00 	li      r0,0
}
    8db0:	7c 03 03 78 	mr      r3,r0
    8db4:	80 01 00 54 	lwz     r0,84(r1)
    8db8:	7c 08 03 a6 	mtlr    r0
    8dbc:	38 21 00 50 	addi    r1,r1,80
    8dc0:	4e 80 00 20 	blr

00008dc4 <pfkey_process>:
	[SADB_X_SPDDELETE2]	= pfkey_spdget,
	[SADB_X_MIGRATE]	= pfkey_migrate,
};

static int pfkey_process(struct sock *sk, struct sk_buff *skb, struct sadb_msg *hdr)
{
    8dc4:	94 21 ff 70 	stwu    r1,-144(r1)
    8dc8:	7c 08 02 a6 	mflr    r0
    8dcc:	90 01 00 94 	stw     r0,148(r1)
    8dd0:	90 61 00 78 	stw     r3,120(r1)
    8dd4:	90 81 00 7c 	stw     r4,124(r1)
    8dd8:	90 a1 00 80 	stw     r5,128(r1)
	void *ext_hdrs[SADB_EXT_MAX];
	int err;

	pfkey_broadcast(skb_clone(skb, GFP_KERNEL), GFP_KERNEL,
    8ddc:	80 61 00 7c 	lwz     r3,124(r1)
    8de0:	38 80 00 d0 	li      r4,208
    8de4:	48 00 00 01 	bl      8de4 <pfkey_process+0x20>
    8de8:	7c 69 1b 78 	mr      r9,r3
    8dec:	80 01 00 78 	lwz     r0,120(r1)
    8df0:	90 01 00 0c 	stw     r0,12(r1)
    8df4:	3c 00 00 00 	lis     r0,0
    8df8:	30 00 00 00 	addic   r0,r0,0
    8dfc:	7d 23 4b 78 	mr      r3,r9
    8e00:	38 80 00 d0 	li      r4,208
    8e04:	38 a0 00 04 	li      r5,4
    8e08:	38 c0 00 00 	li      r6,0
    8e0c:	7c 07 03 78 	mr      r7,r0
    8e10:	4b ff 7f 3d 	bl      d4c <pfkey_broadcast>
			BROADCAST_PROMISC_ONLY, NULL, sock_net(sk));

	memset(ext_hdrs, 0, sizeof(ext_hdrs));
    8e14:	38 01 00 10 	addi    r0,r1,16
    8e18:	7c 09 03 78 	mr      r9,r0
    8e1c:	38 00 00 64 	li      r0,100
    8e20:	7d 23 4b 78 	mr      r3,r9
    8e24:	38 80 00 00 	li      r4,0
    8e28:	7c 05 03 78 	mr      r5,r0
    8e2c:	48 00 00 01 	bl      8e2c <pfkey_process+0x68>
	err = parse_exthdrs(skb, hdr, ext_hdrs);
    8e30:	38 01 00 10 	addi    r0,r1,16
    8e34:	80 61 00 7c 	lwz     r3,124(r1)
    8e38:	80 81 00 80 	lwz     r4,128(r1)
    8e3c:	7c 05 03 78 	mr      r5,r0
    8e40:	4b ff 86 25 	bl      1464 <parse_exthdrs>
    8e44:	90 61 00 08 	stw     r3,8(r1)
	if (!err) {
    8e48:	80 01 00 08 	lwz     r0,8(r1)
    8e4c:	2f 80 00 00 	cmpwi   cr7,r0,0
    8e50:	40 9e 00 84 	bne-    cr7,8ed4 <pfkey_process+0x110>
		err = -EOPNOTSUPP;
    8e54:	38 00 ff a1 	li      r0,-95
    8e58:	90 01 00 08 	stw     r0,8(r1)
		if (pfkey_funcs[hdr->sadb_msg_type])
    8e5c:	80 01 00 80 	lwz     r0,128(r1)
    8e60:	7c 09 03 78 	mr      r9,r0
    8e64:	88 09 00 01 	lbz     r0,1(r9)
    8e68:	54 00 06 3e 	clrlwi  r0,r0,24
    8e6c:	3d 20 00 00 	lis     r9,0
    8e70:	39 29 00 e8 	addi    r9,r9,232
    8e74:	54 00 10 3a 	rlwinm  r0,r0,2,0,29
    8e78:	7c 09 02 14 	add     r0,r9,r0
    8e7c:	7c 09 03 78 	mr      r9,r0
    8e80:	80 09 00 00 	lwz     r0,0(r9)
    8e84:	2f 80 00 00 	cmpwi   cr7,r0,0
    8e88:	41 9e 00 4c 	beq-    cr7,8ed4 <pfkey_process+0x110>
			err = pfkey_funcs[hdr->sadb_msg_type](sk, skb, hdr, ext_hdrs);
    8e8c:	80 01 00 80 	lwz     r0,128(r1)
    8e90:	7c 09 03 78 	mr      r9,r0
    8e94:	88 09 00 01 	lbz     r0,1(r9)
    8e98:	54 00 06 3e 	clrlwi  r0,r0,24
    8e9c:	3d 20 00 00 	lis     r9,0
    8ea0:	39 29 00 e8 	addi    r9,r9,232
    8ea4:	54 00 10 3a 	rlwinm  r0,r0,2,0,29
    8ea8:	7c 09 02 14 	add     r0,r9,r0
    8eac:	7c 09 03 78 	mr      r9,r0
    8eb0:	80 09 00 00 	lwz     r0,0(r9)
    8eb4:	39 21 00 10 	addi    r9,r1,16
    8eb8:	80 61 00 78 	lwz     r3,120(r1)
    8ebc:	80 81 00 7c 	lwz     r4,124(r1)
    8ec0:	80 a1 00 80 	lwz     r5,128(r1)
    8ec4:	7d 26 4b 78 	mr      r6,r9
    8ec8:	7c 09 03 a6 	mtctr   r0
    8ecc:	4e 80 04 21 	bctrl
    8ed0:	90 61 00 08 	stw     r3,8(r1)
	}
	return err;
    8ed4:	80 01 00 08 	lwz     r0,8(r1)
}
    8ed8:	7c 03 03 78 	mr      r3,r0
    8edc:	80 01 00 94 	lwz     r0,148(r1)
    8ee0:	7c 08 03 a6 	mtlr    r0
    8ee4:	38 21 00 90 	addi    r1,r1,144
    8ee8:	4e 80 00 20 	blr

00008eec <pfkey_get_base_msg>:

static struct sadb_msg *pfkey_get_base_msg(struct sk_buff *skb, int *errp)
{
    8eec:	94 21 ff e0 	stwu    r1,-32(r1)
    8ef0:	90 61 00 18 	stw     r3,24(r1)
    8ef4:	90 81 00 1c 	stw     r4,28(r1)
	struct sadb_msg *hdr = NULL;
    8ef8:	38 00 00 00 	li      r0,0
    8efc:	90 01 00 08 	stw     r0,8(r1)

	if (skb->len < sizeof(*hdr)) {
    8f00:	80 01 00 18 	lwz     r0,24(r1)
    8f04:	7c 09 03 78 	mr      r9,r0
    8f08:	80 09 00 50 	lwz     r0,80(r9)
    8f0c:	2b 80 00 0f 	cmplwi  cr7,r0,15
    8f10:	41 9d 00 18 	bgt-    cr7,8f28 <pfkey_get_base_msg+0x3c>
		*errp = -EMSGSIZE;
    8f14:	80 01 00 1c 	lwz     r0,28(r1)
    8f18:	39 20 ff a6 	li      r9,-90
    8f1c:	7c 0b 03 78 	mr      r11,r0
    8f20:	91 2b 00 00 	stw     r9,0(r11)
    8f24:	48 00 01 00 	b       9024 <pfkey_get_base_msg+0x138>
	} else {
		hdr = (struct sadb_msg *) skb->data;
    8f28:	80 01 00 18 	lwz     r0,24(r1)
    8f2c:	7c 09 03 78 	mr      r9,r0
    8f30:	80 09 00 98 	lwz     r0,152(r9)
    8f34:	90 01 00 08 	stw     r0,8(r1)
		if (hdr->sadb_msg_version != PF_KEY_V2 ||
    8f38:	80 01 00 08 	lwz     r0,8(r1)
    8f3c:	7c 0b 03 78 	mr      r11,r0
    8f40:	88 0b 00 00 	lbz     r0,0(r11)
    8f44:	54 00 06 3e 	clrlwi  r0,r0,24
    8f48:	2f 80 00 02 	cmpwi   cr7,r0,2
    8f4c:	40 9e 00 4c 	bne-    cr7,8f98 <pfkey_get_base_msg+0xac>
		    hdr->sadb_msg_reserved != 0 ||
    8f50:	80 01 00 08 	lwz     r0,8(r1)
    8f54:	7c 09 03 78 	mr      r9,r0
    8f58:	a0 09 00 06 	lhz     r0,6(r9)
    8f5c:	54 00 04 3e 	clrlwi  r0,r0,16

	if (skb->len < sizeof(*hdr)) {
		*errp = -EMSGSIZE;
	} else {
		hdr = (struct sadb_msg *) skb->data;
		if (hdr->sadb_msg_version != PF_KEY_V2 ||
    8f60:	2f 80 00 00 	cmpwi   cr7,r0,0
    8f64:	40 9e 00 34 	bne-    cr7,8f98 <pfkey_get_base_msg+0xac>
		    hdr->sadb_msg_reserved != 0 ||
		    (hdr->sadb_msg_type <= SADB_RESERVED ||
    8f68:	80 01 00 08 	lwz     r0,8(r1)
    8f6c:	7c 0b 03 78 	mr      r11,r0
    8f70:	88 0b 00 01 	lbz     r0,1(r11)
    8f74:	54 00 06 3e 	clrlwi  r0,r0,24
	if (skb->len < sizeof(*hdr)) {
		*errp = -EMSGSIZE;
	} else {
		hdr = (struct sadb_msg *) skb->data;
		if (hdr->sadb_msg_version != PF_KEY_V2 ||
		    hdr->sadb_msg_reserved != 0 ||
    8f78:	2f 80 00 00 	cmpwi   cr7,r0,0
    8f7c:	41 9e 00 1c 	beq-    cr7,8f98 <pfkey_get_base_msg+0xac>
		    (hdr->sadb_msg_type <= SADB_RESERVED ||
		     hdr->sadb_msg_type > SADB_MAX)) {
    8f80:	80 01 00 08 	lwz     r0,8(r1)
    8f84:	7c 09 03 78 	mr      r9,r0
    8f88:	88 09 00 01 	lbz     r0,1(r9)
    8f8c:	54 00 06 3e 	clrlwi  r0,r0,24
		*errp = -EMSGSIZE;
	} else {
		hdr = (struct sadb_msg *) skb->data;
		if (hdr->sadb_msg_version != PF_KEY_V2 ||
		    hdr->sadb_msg_reserved != 0 ||
		    (hdr->sadb_msg_type <= SADB_RESERVED ||
    8f90:	2b 80 00 18 	cmplwi  cr7,r0,24
    8f94:	40 9d 00 20 	ble-    cr7,8fb4 <pfkey_get_base_msg+0xc8>
		     hdr->sadb_msg_type > SADB_MAX)) {
			hdr = NULL;
    8f98:	38 00 00 00 	li      r0,0
    8f9c:	90 01 00 08 	stw     r0,8(r1)
			*errp = -EINVAL;
    8fa0:	80 01 00 1c 	lwz     r0,28(r1)
    8fa4:	39 20 ff ea 	li      r9,-22
    8fa8:	7c 0b 03 78 	mr      r11,r0
    8fac:	91 2b 00 00 	stw     r9,0(r11)
    8fb0:	48 00 00 74 	b       9024 <pfkey_get_base_msg+0x138>
		} else if (hdr->sadb_msg_len != (skb->len /
    8fb4:	80 01 00 08 	lwz     r0,8(r1)
    8fb8:	7c 09 03 78 	mr      r9,r0
    8fbc:	a0 09 00 04 	lhz     r0,4(r9)
    8fc0:	54 00 04 3e 	clrlwi  r0,r0,16
    8fc4:	7c 09 03 78 	mr      r9,r0
    8fc8:	80 01 00 18 	lwz     r0,24(r1)
    8fcc:	7c 0b 03 78 	mr      r11,r0
    8fd0:	80 0b 00 50 	lwz     r0,80(r11)
    8fd4:	54 00 e8 fe 	rlwinm  r0,r0,29,3,31
    8fd8:	7f 89 00 00 	cmpw    cr7,r9,r0
    8fdc:	40 9e 00 1c 	bne-    cr7,8ff8 <pfkey_get_base_msg+0x10c>
						 sizeof(uint64_t)) ||
			   hdr->sadb_msg_len < (sizeof(struct sadb_msg) /
    8fe0:	80 01 00 08 	lwz     r0,8(r1)
    8fe4:	7c 09 03 78 	mr      r9,r0
    8fe8:	a0 09 00 04 	lhz     r0,4(r9)
    8fec:	54 00 04 3e 	clrlwi  r0,r0,16
		    (hdr->sadb_msg_type <= SADB_RESERVED ||
		     hdr->sadb_msg_type > SADB_MAX)) {
			hdr = NULL;
			*errp = -EINVAL;
		} else if (hdr->sadb_msg_len != (skb->len /
						 sizeof(uint64_t)) ||
    8ff0:	2b 80 00 01 	cmplwi  cr7,r0,1
    8ff4:	41 9d 00 20 	bgt-    cr7,9014 <pfkey_get_base_msg+0x128>
			   hdr->sadb_msg_len < (sizeof(struct sadb_msg) /
						sizeof(uint64_t))) {
			hdr = NULL;
    8ff8:	38 00 00 00 	li      r0,0
    8ffc:	90 01 00 08 	stw     r0,8(r1)
			*errp = -EMSGSIZE;
    9000:	80 01 00 1c 	lwz     r0,28(r1)
    9004:	39 20 ff a6 	li      r9,-90
    9008:	7c 0b 03 78 	mr      r11,r0
    900c:	91 2b 00 00 	stw     r9,0(r11)
    9010:	48 00 00 14 	b       9024 <pfkey_get_base_msg+0x138>
		} else {
			*errp = 0;
    9014:	80 01 00 1c 	lwz     r0,28(r1)
    9018:	39 20 00 00 	li      r9,0
    901c:	7c 0b 03 78 	mr      r11,r0
    9020:	91 2b 00 00 	stw     r9,0(r11)
		}
	}
	return hdr;
    9024:	80 01 00 08 	lwz     r0,8(r1)
}
    9028:	7c 03 03 78 	mr      r3,r0
    902c:	38 21 00 20 	addi    r1,r1,32
    9030:	4e 80 00 20 	blr

00009034 <count_ah_combs>:

	return (t->ealgos >> id) & 1;
}

static int count_ah_combs(struct xfrm_tmpl *t)
{
    9034:	94 21 ff d0 	stwu    r1,-48(r1)
    9038:	7c 08 02 a6 	mflr    r0
    903c:	90 01 00 34 	stw     r0,52(r1)
    9040:	90 61 00 28 	stw     r3,40(r1)
	int i, sz = 0;
    9044:	38 00 00 00 	li      r0,0
    9048:	90 01 00 0c 	stw     r0,12(r1)

	for (i = 0; ; i++) {
    904c:	38 00 00 00 	li      r0,0
    9050:	90 01 00 08 	stw     r0,8(r1)
		struct xfrm_algo_desc *aalg = xfrm_aalg_get_byidx(i);
    9054:	80 01 00 08 	lwz     r0,8(r1)
    9058:	7c 03 03 78 	mr      r3,r0
    905c:	48 00 00 01 	bl      905c <count_ah_combs+0x28>
    9060:	90 61 00 10 	stw     r3,16(r1)
		if (!aalg)
    9064:	80 01 00 10 	lwz     r0,16(r1)
    9068:	2f 80 00 00 	cmpwi   cr7,r0,0
    906c:	41 9e 00 90 	beq-    cr7,90fc <count_ah_combs+0xc8>
			break;
    9070:	80 01 00 28 	lwz     r0,40(r1)
    9074:	90 01 00 14 	stw     r0,20(r1)
    9078:	80 01 00 10 	lwz     r0,16(r1)
    907c:	90 01 00 18 	stw     r0,24(r1)
	return hdr;
}

static inline int aalg_tmpl_set(struct xfrm_tmpl *t, struct xfrm_algo_desc *d)
{
	unsigned int id = d->desc.sadb_alg_id;
    9080:	80 01 00 18 	lwz     r0,24(r1)
    9084:	7c 09 03 78 	mr      r9,r0
    9088:	88 09 00 0e 	lbz     r0,14(r9)
    908c:	54 00 06 3e 	clrlwi  r0,r0,24
    9090:	90 01 00 1c 	stw     r0,28(r1)

	if (id >= sizeof(t->aalgos) * 8)
    9094:	80 01 00 1c 	lwz     r0,28(r1)
    9098:	2b 80 00 1f 	cmplwi  cr7,r0,31
    909c:	40 9d 00 0c 	ble-    cr7,90a8 <count_ah_combs+0x74>
		return 0;
    90a0:	38 00 00 00 	li      r0,0
    90a4:	48 00 00 1c 	b       90c0 <count_ah_combs+0x8c>

	return (t->aalgos >> id) & 1;
    90a8:	80 01 00 14 	lwz     r0,20(r1)
    90ac:	7c 0b 03 78 	mr      r11,r0
    90b0:	81 2b 00 34 	lwz     r9,52(r11)
    90b4:	80 01 00 1c 	lwz     r0,28(r1)
    90b8:	7d 20 04 30 	srw     r0,r9,r0
    90bc:	54 00 07 fe 	clrlwi  r0,r0,31

	for (i = 0; ; i++) {
		struct xfrm_algo_desc *aalg = xfrm_aalg_get_byidx(i);
		if (!aalg)
			break;
		if (aalg_tmpl_set(t, aalg) && aalg->available)
    90c0:	2f 80 00 00 	cmpwi   cr7,r0,0
    90c4:	41 9e 00 28 	beq-    cr7,90ec <count_ah_combs+0xb8>
    90c8:	80 01 00 10 	lwz     r0,16(r1)
    90cc:	7c 09 03 78 	mr      r9,r0
    90d0:	80 09 00 08 	lwz     r0,8(r9)
    90d4:	54 00 00 00 	rlwinm  r0,r0,0,0,0
    90d8:	2f 80 00 00 	cmpwi   cr7,r0,0
    90dc:	41 9e 00 10 	beq-    cr7,90ec <count_ah_combs+0xb8>
			sz += sizeof(struct sadb_comb);
    90e0:	80 01 00 0c 	lwz     r0,12(r1)
    90e4:	30 00 00 48 	addic   r0,r0,72
    90e8:	90 01 00 0c 	stw     r0,12(r1)

static int count_ah_combs(struct xfrm_tmpl *t)
{
	int i, sz = 0;

	for (i = 0; ; i++) {
    90ec:	80 01 00 08 	lwz     r0,8(r1)
    90f0:	30 00 00 01 	addic   r0,r0,1
    90f4:	90 01 00 08 	stw     r0,8(r1)
		struct xfrm_algo_desc *aalg = xfrm_aalg_get_byidx(i);
		if (!aalg)
			break;
		if (aalg_tmpl_set(t, aalg) && aalg->available)
			sz += sizeof(struct sadb_comb);
	}
    90f8:	4b ff ff 5c 	b       9054 <count_ah_combs+0x20>
	int i, sz = 0;

	for (i = 0; ; i++) {
		struct xfrm_algo_desc *aalg = xfrm_aalg_get_byidx(i);
		if (!aalg)
			break;
    90fc:	60 00 00 00 	nop
		if (aalg_tmpl_set(t, aalg) && aalg->available)
			sz += sizeof(struct sadb_comb);
	}
	return sz + sizeof(struct sadb_prop);
    9100:	80 01 00 0c 	lwz     r0,12(r1)
    9104:	30 00 00 08 	addic   r0,r0,8
}
    9108:	7c 03 03 78 	mr      r3,r0
    910c:	80 01 00 34 	lwz     r0,52(r1)
    9110:	7c 08 03 a6 	mtlr    r0
    9114:	38 21 00 30 	addi    r1,r1,48
    9118:	4e 80 00 20 	blr

0000911c <count_esp_combs>:

static int count_esp_combs(struct xfrm_tmpl *t)
{
    911c:	94 21 ff c0 	stwu    r1,-64(r1)
    9120:	7c 08 02 a6 	mflr    r0
    9124:	90 01 00 44 	stw     r0,68(r1)
    9128:	90 61 00 38 	stw     r3,56(r1)
	int i, k, sz = 0;
    912c:	38 00 00 00 	li      r0,0
    9130:	90 01 00 10 	stw     r0,16(r1)

	for (i = 0; ; i++) {
    9134:	38 00 00 00 	li      r0,0
    9138:	90 01 00 08 	stw     r0,8(r1)
		struct xfrm_algo_desc *ealg = xfrm_ealg_get_byidx(i);
    913c:	80 01 00 08 	lwz     r0,8(r1)
    9140:	7c 03 03 78 	mr      r3,r0
    9144:	48 00 00 01 	bl      9144 <count_esp_combs+0x28>
    9148:	90 61 00 14 	stw     r3,20(r1)
		if (!ealg)
    914c:	80 01 00 14 	lwz     r0,20(r1)
    9150:	2f 80 00 00 	cmpwi   cr7,r0,0
    9154:	41 9e 01 40 	beq-    cr7,9294 <count_esp_combs+0x178>
			break;
    9158:	80 01 00 38 	lwz     r0,56(r1)
    915c:	90 01 00 1c 	stw     r0,28(r1)
    9160:	80 01 00 14 	lwz     r0,20(r1)
    9164:	90 01 00 20 	stw     r0,32(r1)
	return (t->aalgos >> id) & 1;
}

static inline int ealg_tmpl_set(struct xfrm_tmpl *t, struct xfrm_algo_desc *d)
{
	unsigned int id = d->desc.sadb_alg_id;
    9168:	80 01 00 20 	lwz     r0,32(r1)
    916c:	7c 09 03 78 	mr      r9,r0
    9170:	88 09 00 0e 	lbz     r0,14(r9)
    9174:	54 00 06 3e 	clrlwi  r0,r0,24
    9178:	90 01 00 24 	stw     r0,36(r1)

	if (id >= sizeof(t->ealgos) * 8)
    917c:	80 01 00 24 	lwz     r0,36(r1)
    9180:	2b 80 00 1f 	cmplwi  cr7,r0,31
    9184:	40 9d 00 0c 	ble-    cr7,9190 <count_esp_combs+0x74>
		return 0;
    9188:	38 00 00 00 	li      r0,0
    918c:	48 00 00 1c 	b       91a8 <count_esp_combs+0x8c>

	return (t->ealgos >> id) & 1;
    9190:	80 01 00 1c 	lwz     r0,28(r1)
    9194:	7c 0b 03 78 	mr      r11,r0
    9198:	81 2b 00 38 	lwz     r9,56(r11)
    919c:	80 01 00 24 	lwz     r0,36(r1)
    91a0:	7d 20 04 30 	srw     r0,r9,r0
    91a4:	54 00 07 fe 	clrlwi  r0,r0,31
	for (i = 0; ; i++) {
		struct xfrm_algo_desc *ealg = xfrm_ealg_get_byidx(i);
		if (!ealg)
			break;

		if (!(ealg_tmpl_set(t, ealg) && ealg->available))
    91a8:	2f 80 00 00 	cmpwi   cr7,r0,0
    91ac:	41 9e 00 cc 	beq-    cr7,9278 <count_esp_combs+0x15c>
    91b0:	80 01 00 14 	lwz     r0,20(r1)
    91b4:	7c 09 03 78 	mr      r9,r0
    91b8:	80 09 00 08 	lwz     r0,8(r9)
    91bc:	54 00 00 00 	rlwinm  r0,r0,0,0,0
    91c0:	2f 80 00 00 	cmpwi   cr7,r0,0
    91c4:	41 9e 00 b4 	beq-    cr7,9278 <count_esp_combs+0x15c>
			continue;

		for (k = 1; ; k++) {
    91c8:	38 00 00 01 	li      r0,1
    91cc:	90 01 00 0c 	stw     r0,12(r1)
			struct xfrm_algo_desc *aalg = xfrm_aalg_get_byidx(k);
    91d0:	80 01 00 0c 	lwz     r0,12(r1)
    91d4:	7c 03 03 78 	mr      r3,r0
    91d8:	48 00 00 01 	bl      91d8 <count_esp_combs+0xbc>
    91dc:	90 61 00 18 	stw     r3,24(r1)
			if (!aalg)
    91e0:	80 01 00 18 	lwz     r0,24(r1)
    91e4:	2f 80 00 00 	cmpwi   cr7,r0,0
    91e8:	41 9e 00 98 	beq-    cr7,9280 <count_esp_combs+0x164>
				break;
    91ec:	80 01 00 38 	lwz     r0,56(r1)
    91f0:	90 01 00 28 	stw     r0,40(r1)
    91f4:	80 01 00 18 	lwz     r0,24(r1)
    91f8:	90 01 00 2c 	stw     r0,44(r1)
	return hdr;
}

static inline int aalg_tmpl_set(struct xfrm_tmpl *t, struct xfrm_algo_desc *d)
{
	unsigned int id = d->desc.sadb_alg_id;
    91fc:	80 01 00 2c 	lwz     r0,44(r1)
    9200:	7c 0b 03 78 	mr      r11,r0
    9204:	88 0b 00 0e 	lbz     r0,14(r11)
    9208:	54 00 06 3e 	clrlwi  r0,r0,24
    920c:	90 01 00 30 	stw     r0,48(r1)

	if (id >= sizeof(t->aalgos) * 8)
    9210:	80 01 00 30 	lwz     r0,48(r1)
    9214:	2b 80 00 1f 	cmplwi  cr7,r0,31
    9218:	40 9d 00 0c 	ble-    cr7,9224 <count_esp_combs+0x108>
		return 0;
    921c:	38 00 00 00 	li      r0,0
    9220:	48 00 00 1c 	b       923c <count_esp_combs+0x120>

	return (t->aalgos >> id) & 1;
    9224:	80 01 00 28 	lwz     r0,40(r1)
    9228:	7c 0b 03 78 	mr      r11,r0
    922c:	81 2b 00 34 	lwz     r9,52(r11)
    9230:	80 01 00 30 	lwz     r0,48(r1)
    9234:	7d 20 04 30 	srw     r0,r9,r0
    9238:	54 00 07 fe 	clrlwi  r0,r0,31
		for (k = 1; ; k++) {
			struct xfrm_algo_desc *aalg = xfrm_aalg_get_byidx(k);
			if (!aalg)
				break;

			if (aalg_tmpl_set(t, aalg) && aalg->available)
    923c:	2f 80 00 00 	cmpwi   cr7,r0,0
    9240:	41 9e 00 28 	beq-    cr7,9268 <count_esp_combs+0x14c>
    9244:	80 01 00 18 	lwz     r0,24(r1)
    9248:	7c 09 03 78 	mr      r9,r0
    924c:	80 09 00 08 	lwz     r0,8(r9)
    9250:	54 00 00 00 	rlwinm  r0,r0,0,0,0
    9254:	2f 80 00 00 	cmpwi   cr7,r0,0
    9258:	41 9e 00 10 	beq-    cr7,9268 <count_esp_combs+0x14c>
				sz += sizeof(struct sadb_comb);
    925c:	80 01 00 10 	lwz     r0,16(r1)
    9260:	30 00 00 48 	addic   r0,r0,72
    9264:	90 01 00 10 	stw     r0,16(r1)
			break;

		if (!(ealg_tmpl_set(t, ealg) && ealg->available))
			continue;

		for (k = 1; ; k++) {
    9268:	80 01 00 0c 	lwz     r0,12(r1)
    926c:	30 00 00 01 	addic   r0,r0,1
    9270:	90 01 00 0c 	stw     r0,12(r1)
			if (!aalg)
				break;

			if (aalg_tmpl_set(t, aalg) && aalg->available)
				sz += sizeof(struct sadb_comb);
		}
    9274:	4b ff ff 5c 	b       91d0 <count_esp_combs+0xb4>
		struct xfrm_algo_desc *ealg = xfrm_ealg_get_byidx(i);
		if (!ealg)
			break;

		if (!(ealg_tmpl_set(t, ealg) && ealg->available))
			continue;
    9278:	60 00 00 00 	nop
    927c:	48 00 00 08 	b       9284 <count_esp_combs+0x168>

		for (k = 1; ; k++) {
			struct xfrm_algo_desc *aalg = xfrm_aalg_get_byidx(k);
			if (!aalg)
				break;
    9280:	60 00 00 00 	nop

static int count_esp_combs(struct xfrm_tmpl *t)
{
	int i, k, sz = 0;

	for (i = 0; ; i++) {
    9284:	80 01 00 08 	lwz     r0,8(r1)
    9288:	30 00 00 01 	addic   r0,r0,1
    928c:	90 01 00 08 	stw     r0,8(r1)
				break;

			if (aalg_tmpl_set(t, aalg) && aalg->available)
				sz += sizeof(struct sadb_comb);
		}
	}
    9290:	4b ff fe ac 	b       913c <count_esp_combs+0x20>
	int i, k, sz = 0;

	for (i = 0; ; i++) {
		struct xfrm_algo_desc *ealg = xfrm_ealg_get_byidx(i);
		if (!ealg)
			break;
    9294:	60 00 00 00 	nop

			if (aalg_tmpl_set(t, aalg) && aalg->available)
				sz += sizeof(struct sadb_comb);
		}
	}
	return sz + sizeof(struct sadb_prop);
    9298:	80 01 00 10 	lwz     r0,16(r1)
    929c:	30 00 00 08 	addic   r0,r0,8
}
    92a0:	7c 03 03 78 	mr      r3,r0
    92a4:	80 01 00 44 	lwz     r0,68(r1)
    92a8:	7c 08 03 a6 	mtlr    r0
    92ac:	38 21 00 40 	addi    r1,r1,64
    92b0:	4e 80 00 20 	blr

000092b4 <dump_ah_combs>:

static void dump_ah_combs(struct sk_buff *skb, struct xfrm_tmpl *t)
{
    92b4:	94 21 ff d0 	stwu    r1,-48(r1)
    92b8:	7c 08 02 a6 	mflr    r0
    92bc:	90 01 00 34 	stw     r0,52(r1)
    92c0:	90 61 00 28 	stw     r3,40(r1)
    92c4:	90 81 00 2c 	stw     r4,44(r1)
	struct sadb_prop *p;
	int i;

	p = (struct sadb_prop*)skb_put(skb, sizeof(struct sadb_prop));
    92c8:	80 61 00 28 	lwz     r3,40(r1)
    92cc:	38 80 00 08 	li      r4,8
    92d0:	48 00 00 01 	bl      92d0 <dump_ah_combs+0x1c>
    92d4:	90 61 00 0c 	stw     r3,12(r1)
	p->sadb_prop_len = sizeof(struct sadb_prop)/8;
    92d8:	80 01 00 0c 	lwz     r0,12(r1)
    92dc:	39 20 00 01 	li      r9,1
    92e0:	7c 0b 03 78 	mr      r11,r0
    92e4:	b1 2b 00 00 	sth     r9,0(r11)
	p->sadb_prop_exttype = SADB_EXT_PROPOSAL;
    92e8:	80 01 00 0c 	lwz     r0,12(r1)
    92ec:	39 20 00 0d 	li      r9,13
    92f0:	7c 0b 03 78 	mr      r11,r0
    92f4:	b1 2b 00 02 	sth     r9,2(r11)
	p->sadb_prop_replay = 32;
    92f8:	80 01 00 0c 	lwz     r0,12(r1)
    92fc:	39 20 00 20 	li      r9,32
    9300:	7c 0b 03 78 	mr      r11,r0
    9304:	99 2b 00 04 	stb     r9,4(r11)
	memset(p->sadb_prop_reserved, 0, sizeof(p->sadb_prop_reserved));
    9308:	80 01 00 0c 	lwz     r0,12(r1)
    930c:	30 00 00 05 	addic   r0,r0,5
    9310:	39 20 00 00 	li      r9,0
    9314:	7c 0b 03 78 	mr      r11,r0
    9318:	b1 2b 00 00 	sth     r9,0(r11)
    931c:	39 20 00 00 	li      r9,0
    9320:	7c 0b 03 78 	mr      r11,r0
    9324:	99 2b 00 02 	stb     r9,2(r11)

	for (i = 0; ; i++) {
    9328:	38 00 00 00 	li      r0,0
    932c:	90 01 00 08 	stw     r0,8(r1)
		struct xfrm_algo_desc *aalg = xfrm_aalg_get_byidx(i);
    9330:	80 01 00 08 	lwz     r0,8(r1)
    9334:	7c 03 03 78 	mr      r3,r0
    9338:	48 00 00 01 	bl      9338 <dump_ah_combs+0x84>
    933c:	90 61 00 10 	stw     r3,16(r1)
		if (!aalg)
    9340:	80 01 00 10 	lwz     r0,16(r1)
    9344:	2f 80 00 00 	cmpwi   cr7,r0,0
    9348:	41 9e 01 a0 	beq-    cr7,94e8 <dump_ah_combs+0x234>
			break;
    934c:	80 01 00 2c 	lwz     r0,44(r1)
    9350:	90 01 00 18 	stw     r0,24(r1)
    9354:	80 01 00 10 	lwz     r0,16(r1)
    9358:	90 01 00 1c 	stw     r0,28(r1)
	return hdr;
}

static inline int aalg_tmpl_set(struct xfrm_tmpl *t, struct xfrm_algo_desc *d)
{
	unsigned int id = d->desc.sadb_alg_id;
    935c:	80 01 00 1c 	lwz     r0,28(r1)
    9360:	7c 09 03 78 	mr      r9,r0
    9364:	88 09 00 0e 	lbz     r0,14(r9)
    9368:	54 00 06 3e 	clrlwi  r0,r0,24
    936c:	90 01 00 20 	stw     r0,32(r1)

	if (id >= sizeof(t->aalgos) * 8)
    9370:	80 01 00 20 	lwz     r0,32(r1)
    9374:	2b 80 00 1f 	cmplwi  cr7,r0,31
    9378:	40 9d 00 0c 	ble-    cr7,9384 <dump_ah_combs+0xd0>
		return 0;
    937c:	38 00 00 00 	li      r0,0
    9380:	48 00 00 1c 	b       939c <dump_ah_combs+0xe8>

	return (t->aalgos >> id) & 1;
    9384:	80 01 00 18 	lwz     r0,24(r1)
    9388:	7c 0b 03 78 	mr      r11,r0
    938c:	81 2b 00 34 	lwz     r9,52(r11)
    9390:	80 01 00 20 	lwz     r0,32(r1)
    9394:	7d 20 04 30 	srw     r0,r9,r0
    9398:	54 00 07 fe 	clrlwi  r0,r0,31
	for (i = 0; ; i++) {
		struct xfrm_algo_desc *aalg = xfrm_aalg_get_byidx(i);
		if (!aalg)
			break;

		if (aalg_tmpl_set(t, aalg) && aalg->available) {
    939c:	2f 80 00 00 	cmpwi   cr7,r0,0
    93a0:	41 9e 01 38 	beq-    cr7,94d8 <dump_ah_combs+0x224>
    93a4:	80 01 00 10 	lwz     r0,16(r1)
    93a8:	7c 09 03 78 	mr      r9,r0
    93ac:	80 09 00 08 	lwz     r0,8(r9)
    93b0:	54 00 00 00 	rlwinm  r0,r0,0,0,0
    93b4:	2f 80 00 00 	cmpwi   cr7,r0,0
    93b8:	41 9e 01 20 	beq-    cr7,94d8 <dump_ah_combs+0x224>
			struct sadb_comb *c;
			c = (struct sadb_comb*)skb_put(skb, sizeof(struct sadb_comb));
    93bc:	80 61 00 28 	lwz     r3,40(r1)
    93c0:	38 80 00 48 	li      r4,72
    93c4:	48 00 00 01 	bl      93c4 <dump_ah_combs+0x110>
    93c8:	90 61 00 14 	stw     r3,20(r1)
			memset(c, 0, sizeof(*c));
    93cc:	80 01 00 14 	lwz     r0,20(r1)
    93d0:	7c 09 03 78 	mr      r9,r0
    93d4:	38 00 00 48 	li      r0,72
    93d8:	7d 23 4b 78 	mr      r3,r9
    93dc:	38 80 00 00 	li      r4,0
    93e0:	7c 05 03 78 	mr      r5,r0
    93e4:	48 00 00 01 	bl      93e4 <dump_ah_combs+0x130>
			p->sadb_prop_len += sizeof(struct sadb_comb)/8;
    93e8:	80 01 00 0c 	lwz     r0,12(r1)
    93ec:	7c 0b 03 78 	mr      r11,r0
    93f0:	a0 0b 00 00 	lhz     r0,0(r11)
    93f4:	54 00 04 3e 	clrlwi  r0,r0,16
    93f8:	30 00 00 09 	addic   r0,r0,9
    93fc:	54 09 04 3e 	clrlwi  r9,r0,16
    9400:	80 01 00 0c 	lwz     r0,12(r1)
    9404:	7c 0b 03 78 	mr      r11,r0
    9408:	b1 2b 00 00 	sth     r9,0(r11)
			c->sadb_comb_auth = aalg->desc.sadb_alg_id;
    940c:	80 01 00 10 	lwz     r0,16(r1)
    9410:	7c 09 03 78 	mr      r9,r0
    9414:	88 09 00 0e 	lbz     r0,14(r9)
    9418:	54 09 06 3e 	clrlwi  r9,r0,24
    941c:	80 01 00 14 	lwz     r0,20(r1)
    9420:	7c 0b 03 78 	mr      r11,r0
    9424:	99 2b 00 00 	stb     r9,0(r11)
			c->sadb_comb_auth_minbits = aalg->desc.sadb_alg_minbits;
    9428:	80 01 00 10 	lwz     r0,16(r1)
    942c:	7c 09 03 78 	mr      r9,r0
    9430:	a0 09 00 10 	lhz     r0,16(r9)
    9434:	54 09 04 3e 	clrlwi  r9,r0,16
    9438:	80 01 00 14 	lwz     r0,20(r1)
    943c:	7c 0b 03 78 	mr      r11,r0
    9440:	b1 2b 00 04 	sth     r9,4(r11)
			c->sadb_comb_auth_maxbits = aalg->desc.sadb_alg_maxbits;
    9444:	80 01 00 10 	lwz     r0,16(r1)
    9448:	7c 09 03 78 	mr      r9,r0
    944c:	a0 09 00 12 	lhz     r0,18(r9)
    9450:	54 09 04 3e 	clrlwi  r9,r0,16
    9454:	80 01 00 14 	lwz     r0,20(r1)
    9458:	7c 0b 03 78 	mr      r11,r0
    945c:	b1 2b 00 06 	sth     r9,6(r11)
			c->sadb_comb_hard_addtime = 24*60*60;
    9460:	80 01 00 14 	lwz     r0,20(r1)
    9464:	3d 20 00 01 	lis     r9,1
    9468:	61 29 51 80 	ori     r9,r9,20864
    946c:	7c 0b 03 78 	mr      r11,r0
    9470:	91 2b 00 34 	stw     r9,52(r11)
    9474:	39 20 00 00 	li      r9,0
    9478:	7c 0b 03 78 	mr      r11,r0
    947c:	91 2b 00 30 	stw     r9,48(r11)
			c->sadb_comb_soft_addtime = 20*60*60;
    9480:	80 01 00 14 	lwz     r0,20(r1)
    9484:	3d 20 00 01 	lis     r9,1
    9488:	61 29 19 40 	ori     r9,r9,6464
    948c:	7c 0b 03 78 	mr      r11,r0
    9490:	91 2b 00 2c 	stw     r9,44(r11)
    9494:	39 20 00 00 	li      r9,0
    9498:	7c 0b 03 78 	mr      r11,r0
    949c:	91 2b 00 28 	stw     r9,40(r11)
			c->sadb_comb_hard_usetime = 8*60*60;
    94a0:	80 01 00 14 	lwz     r0,20(r1)
    94a4:	39 20 70 80 	li      r9,28800
    94a8:	7c 0b 03 78 	mr      r11,r0
    94ac:	91 2b 00 44 	stw     r9,68(r11)
    94b0:	39 20 00 00 	li      r9,0
    94b4:	7c 0b 03 78 	mr      r11,r0
    94b8:	91 2b 00 40 	stw     r9,64(r11)
			c->sadb_comb_soft_usetime = 7*60*60;
    94bc:	80 01 00 14 	lwz     r0,20(r1)
    94c0:	39 20 62 70 	li      r9,25200
    94c4:	7c 0b 03 78 	mr      r11,r0
    94c8:	91 2b 00 3c 	stw     r9,60(r11)
    94cc:	39 20 00 00 	li      r9,0
    94d0:	7c 0b 03 78 	mr      r11,r0
    94d4:	91 2b 00 38 	stw     r9,56(r11)
	p->sadb_prop_len = sizeof(struct sadb_prop)/8;
	p->sadb_prop_exttype = SADB_EXT_PROPOSAL;
	p->sadb_prop_replay = 32;
	memset(p->sadb_prop_reserved, 0, sizeof(p->sadb_prop_reserved));

	for (i = 0; ; i++) {
    94d8:	80 01 00 08 	lwz     r0,8(r1)
    94dc:	30 00 00 01 	addic   r0,r0,1
    94e0:	90 01 00 08 	stw     r0,8(r1)
			c->sadb_comb_hard_addtime = 24*60*60;
			c->sadb_comb_soft_addtime = 20*60*60;
			c->sadb_comb_hard_usetime = 8*60*60;
			c->sadb_comb_soft_usetime = 7*60*60;
		}
	}
    94e4:	4b ff fe 4c 	b       9330 <dump_ah_combs+0x7c>
	memset(p->sadb_prop_reserved, 0, sizeof(p->sadb_prop_reserved));

	for (i = 0; ; i++) {
		struct xfrm_algo_desc *aalg = xfrm_aalg_get_byidx(i);
		if (!aalg)
			break;
    94e8:	60 00 00 00 	nop
			c->sadb_comb_soft_addtime = 20*60*60;
			c->sadb_comb_hard_usetime = 8*60*60;
			c->sadb_comb_soft_usetime = 7*60*60;
		}
	}
}
    94ec:	80 01 00 34 	lwz     r0,52(r1)
    94f0:	7c 08 03 a6 	mtlr    r0
    94f4:	38 21 00 30 	addi    r1,r1,48
    94f8:	4e 80 00 20 	blr

000094fc <dump_esp_combs>:

static void dump_esp_combs(struct sk_buff *skb, struct xfrm_tmpl *t)
{
    94fc:	94 21 ff c0 	stwu    r1,-64(r1)
    9500:	7c 08 02 a6 	mflr    r0
    9504:	90 01 00 44 	stw     r0,68(r1)
    9508:	90 61 00 38 	stw     r3,56(r1)
    950c:	90 81 00 3c 	stw     r4,60(r1)
	struct sadb_prop *p;
	int i, k;

	p = (struct sadb_prop*)skb_put(skb, sizeof(struct sadb_prop));
    9510:	80 61 00 38 	lwz     r3,56(r1)
    9514:	38 80 00 08 	li      r4,8
    9518:	48 00 00 01 	bl      9518 <dump_esp_combs+0x1c>
    951c:	90 61 00 10 	stw     r3,16(r1)
	p->sadb_prop_len = sizeof(struct sadb_prop)/8;
    9520:	80 01 00 10 	lwz     r0,16(r1)
    9524:	39 20 00 01 	li      r9,1
    9528:	7c 0b 03 78 	mr      r11,r0
    952c:	b1 2b 00 00 	sth     r9,0(r11)
	p->sadb_prop_exttype = SADB_EXT_PROPOSAL;
    9530:	80 01 00 10 	lwz     r0,16(r1)
    9534:	39 20 00 0d 	li      r9,13
    9538:	7c 0b 03 78 	mr      r11,r0
    953c:	b1 2b 00 02 	sth     r9,2(r11)
	p->sadb_prop_replay = 32;
    9540:	80 01 00 10 	lwz     r0,16(r1)
    9544:	39 20 00 20 	li      r9,32
    9548:	7c 0b 03 78 	mr      r11,r0
    954c:	99 2b 00 04 	stb     r9,4(r11)
	memset(p->sadb_prop_reserved, 0, sizeof(p->sadb_prop_reserved));
    9550:	80 01 00 10 	lwz     r0,16(r1)
    9554:	30 00 00 05 	addic   r0,r0,5
    9558:	39 20 00 00 	li      r9,0
    955c:	7c 0b 03 78 	mr      r11,r0
    9560:	b1 2b 00 00 	sth     r9,0(r11)
    9564:	39 20 00 00 	li      r9,0
    9568:	7c 0b 03 78 	mr      r11,r0
    956c:	99 2b 00 02 	stb     r9,2(r11)

	for (i=0; ; i++) {
    9570:	38 00 00 00 	li      r0,0
    9574:	90 01 00 08 	stw     r0,8(r1)
		struct xfrm_algo_desc *ealg = xfrm_ealg_get_byidx(i);
    9578:	80 01 00 08 	lwz     r0,8(r1)
    957c:	7c 03 03 78 	mr      r3,r0
    9580:	48 00 00 01 	bl      9580 <dump_esp_combs+0x84>
    9584:	90 61 00 14 	stw     r3,20(r1)
		if (!ealg)
    9588:	80 01 00 14 	lwz     r0,20(r1)
    958c:	2f 80 00 00 	cmpwi   cr7,r0,0
    9590:	41 9e 02 ac 	beq-    cr7,983c <dump_esp_combs+0x340>
			break;
    9594:	80 01 00 3c 	lwz     r0,60(r1)
    9598:	90 01 00 20 	stw     r0,32(r1)
    959c:	80 01 00 14 	lwz     r0,20(r1)
    95a0:	90 01 00 24 	stw     r0,36(r1)
	return (t->aalgos >> id) & 1;
}

static inline int ealg_tmpl_set(struct xfrm_tmpl *t, struct xfrm_algo_desc *d)
{
	unsigned int id = d->desc.sadb_alg_id;
    95a4:	80 01 00 24 	lwz     r0,36(r1)
    95a8:	7c 09 03 78 	mr      r9,r0
    95ac:	88 09 00 0e 	lbz     r0,14(r9)
    95b0:	54 00 06 3e 	clrlwi  r0,r0,24
    95b4:	90 01 00 28 	stw     r0,40(r1)

	if (id >= sizeof(t->ealgos) * 8)
    95b8:	80 01 00 28 	lwz     r0,40(r1)
    95bc:	2b 80 00 1f 	cmplwi  cr7,r0,31
    95c0:	40 9d 00 0c 	ble-    cr7,95cc <dump_esp_combs+0xd0>
		return 0;
    95c4:	38 00 00 00 	li      r0,0
    95c8:	48 00 00 1c 	b       95e4 <dump_esp_combs+0xe8>

	return (t->ealgos >> id) & 1;
    95cc:	80 01 00 20 	lwz     r0,32(r1)
    95d0:	7c 0b 03 78 	mr      r11,r0
    95d4:	81 2b 00 38 	lwz     r9,56(r11)
    95d8:	80 01 00 28 	lwz     r0,40(r1)
    95dc:	7d 20 04 30 	srw     r0,r9,r0
    95e0:	54 00 07 fe 	clrlwi  r0,r0,31
	for (i=0; ; i++) {
		struct xfrm_algo_desc *ealg = xfrm_ealg_get_byidx(i);
		if (!ealg)
			break;

		if (!(ealg_tmpl_set(t, ealg) && ealg->available))
    95e4:	2f 80 00 00 	cmpwi   cr7,r0,0
    95e8:	41 9e 02 38 	beq-    cr7,9820 <dump_esp_combs+0x324>
    95ec:	80 01 00 14 	lwz     r0,20(r1)
    95f0:	7c 09 03 78 	mr      r9,r0
    95f4:	80 09 00 08 	lwz     r0,8(r9)
    95f8:	54 00 00 00 	rlwinm  r0,r0,0,0,0
    95fc:	2f 80 00 00 	cmpwi   cr7,r0,0
    9600:	41 9e 02 20 	beq-    cr7,9820 <dump_esp_combs+0x324>
			continue;

		for (k = 1; ; k++) {
    9604:	38 00 00 01 	li      r0,1
    9608:	90 01 00 0c 	stw     r0,12(r1)
			struct sadb_comb *c;
			struct xfrm_algo_desc *aalg = xfrm_aalg_get_byidx(k);
    960c:	80 01 00 0c 	lwz     r0,12(r1)
    9610:	7c 03 03 78 	mr      r3,r0
    9614:	48 00 00 01 	bl      9614 <dump_esp_combs+0x118>
    9618:	90 61 00 18 	stw     r3,24(r1)
			if (!aalg)
    961c:	80 01 00 18 	lwz     r0,24(r1)
    9620:	2f 80 00 00 	cmpwi   cr7,r0,0
    9624:	41 9e 02 04 	beq-    cr7,9828 <dump_esp_combs+0x32c>
				break;
    9628:	80 01 00 3c 	lwz     r0,60(r1)
    962c:	90 01 00 2c 	stw     r0,44(r1)
    9630:	80 01 00 18 	lwz     r0,24(r1)
    9634:	90 01 00 30 	stw     r0,48(r1)
	return hdr;
}

static inline int aalg_tmpl_set(struct xfrm_tmpl *t, struct xfrm_algo_desc *d)
{
	unsigned int id = d->desc.sadb_alg_id;
    9638:	80 01 00 30 	lwz     r0,48(r1)
    963c:	7c 0b 03 78 	mr      r11,r0
    9640:	88 0b 00 0e 	lbz     r0,14(r11)
    9644:	54 00 06 3e 	clrlwi  r0,r0,24
    9648:	90 01 00 34 	stw     r0,52(r1)

	if (id >= sizeof(t->aalgos) * 8)
    964c:	80 01 00 34 	lwz     r0,52(r1)
    9650:	2b 80 00 1f 	cmplwi  cr7,r0,31
    9654:	40 9d 00 0c 	ble-    cr7,9660 <dump_esp_combs+0x164>
		return 0;
    9658:	38 00 00 00 	li      r0,0
    965c:	48 00 00 1c 	b       9678 <dump_esp_combs+0x17c>

	return (t->aalgos >> id) & 1;
    9660:	80 01 00 2c 	lwz     r0,44(r1)
    9664:	7c 0b 03 78 	mr      r11,r0
    9668:	81 2b 00 34 	lwz     r9,52(r11)
    966c:	80 01 00 34 	lwz     r0,52(r1)
    9670:	7d 20 04 30 	srw     r0,r9,r0
    9674:	54 00 07 fe 	clrlwi  r0,r0,31
		for (k = 1; ; k++) {
			struct sadb_comb *c;
			struct xfrm_algo_desc *aalg = xfrm_aalg_get_byidx(k);
			if (!aalg)
				break;
			if (!(aalg_tmpl_set(t, aalg) && aalg->available))
    9678:	2f 80 00 00 	cmpwi   cr7,r0,0
    967c:	41 9e 01 90 	beq-    cr7,980c <dump_esp_combs+0x310>
    9680:	80 01 00 18 	lwz     r0,24(r1)
    9684:	7c 09 03 78 	mr      r9,r0
    9688:	80 09 00 08 	lwz     r0,8(r9)
    968c:	54 00 00 00 	rlwinm  r0,r0,0,0,0
    9690:	2f 80 00 00 	cmpwi   cr7,r0,0
    9694:	41 9e 01 78 	beq-    cr7,980c <dump_esp_combs+0x310>
				continue;
			c = (struct sadb_comb*)skb_put(skb, sizeof(struct sadb_comb));
    9698:	80 61 00 38 	lwz     r3,56(r1)
    969c:	38 80 00 48 	li      r4,72
    96a0:	48 00 00 01 	bl      96a0 <dump_esp_combs+0x1a4>
    96a4:	90 61 00 1c 	stw     r3,28(r1)
			memset(c, 0, sizeof(*c));
    96a8:	80 01 00 1c 	lwz     r0,28(r1)
    96ac:	7c 09 03 78 	mr      r9,r0
    96b0:	38 00 00 48 	li      r0,72
    96b4:	7d 23 4b 78 	mr      r3,r9
    96b8:	38 80 00 00 	li      r4,0
    96bc:	7c 05 03 78 	mr      r5,r0
    96c0:	48 00 00 01 	bl      96c0 <dump_esp_combs+0x1c4>
			p->sadb_prop_len += sizeof(struct sadb_comb)/8;
    96c4:	80 01 00 10 	lwz     r0,16(r1)
    96c8:	7c 0b 03 78 	mr      r11,r0
    96cc:	a0 0b 00 00 	lhz     r0,0(r11)
    96d0:	54 00 04 3e 	clrlwi  r0,r0,16
    96d4:	30 00 00 09 	addic   r0,r0,9
    96d8:	54 09 04 3e 	clrlwi  r9,r0,16
    96dc:	80 01 00 10 	lwz     r0,16(r1)
    96e0:	7c 0b 03 78 	mr      r11,r0
    96e4:	b1 2b 00 00 	sth     r9,0(r11)
			c->sadb_comb_auth = aalg->desc.sadb_alg_id;
    96e8:	80 01 00 18 	lwz     r0,24(r1)
    96ec:	7c 09 03 78 	mr      r9,r0
    96f0:	88 09 00 0e 	lbz     r0,14(r9)
    96f4:	54 09 06 3e 	clrlwi  r9,r0,24
    96f8:	80 01 00 1c 	lwz     r0,28(r1)
    96fc:	7c 0b 03 78 	mr      r11,r0
    9700:	99 2b 00 00 	stb     r9,0(r11)
			c->sadb_comb_auth_minbits = aalg->desc.sadb_alg_minbits;
    9704:	80 01 00 18 	lwz     r0,24(r1)
    9708:	7c 09 03 78 	mr      r9,r0
    970c:	a0 09 00 10 	lhz     r0,16(r9)
    9710:	54 09 04 3e 	clrlwi  r9,r0,16
    9714:	80 01 00 1c 	lwz     r0,28(r1)
    9718:	7c 0b 03 78 	mr      r11,r0
    971c:	b1 2b 00 04 	sth     r9,4(r11)
			c->sadb_comb_auth_maxbits = aalg->desc.sadb_alg_maxbits;
    9720:	80 01 00 18 	lwz     r0,24(r1)
    9724:	7c 09 03 78 	mr      r9,r0
    9728:	a0 09 00 12 	lhz     r0,18(r9)
    972c:	54 09 04 3e 	clrlwi  r9,r0,16
    9730:	80 01 00 1c 	lwz     r0,28(r1)
    9734:	7c 0b 03 78 	mr      r11,r0
    9738:	b1 2b 00 06 	sth     r9,6(r11)
			c->sadb_comb_encrypt = ealg->desc.sadb_alg_id;
    973c:	80 01 00 14 	lwz     r0,20(r1)
    9740:	7c 09 03 78 	mr      r9,r0
    9744:	88 09 00 0e 	lbz     r0,14(r9)
    9748:	54 09 06 3e 	clrlwi  r9,r0,24
    974c:	80 01 00 1c 	lwz     r0,28(r1)
    9750:	7c 0b 03 78 	mr      r11,r0
    9754:	99 2b 00 01 	stb     r9,1(r11)
			c->sadb_comb_encrypt_minbits = ealg->desc.sadb_alg_minbits;
    9758:	80 01 00 14 	lwz     r0,20(r1)
    975c:	7c 09 03 78 	mr      r9,r0
    9760:	a0 09 00 10 	lhz     r0,16(r9)
    9764:	54 09 04 3e 	clrlwi  r9,r0,16
    9768:	80 01 00 1c 	lwz     r0,28(r1)
    976c:	7c 0b 03 78 	mr      r11,r0
    9770:	b1 2b 00 08 	sth     r9,8(r11)
			c->sadb_comb_encrypt_maxbits = ealg->desc.sadb_alg_maxbits;
    9774:	80 01 00 14 	lwz     r0,20(r1)
    9778:	7c 09 03 78 	mr      r9,r0
    977c:	a0 09 00 12 	lhz     r0,18(r9)
    9780:	54 09 04 3e 	clrlwi  r9,r0,16
    9784:	80 01 00 1c 	lwz     r0,28(r1)
    9788:	7c 0b 03 78 	mr      r11,r0
    978c:	b1 2b 00 0a 	sth     r9,10(r11)
			c->sadb_comb_hard_addtime = 24*60*60;
    9790:	80 01 00 1c 	lwz     r0,28(r1)
    9794:	3d 20 00 01 	lis     r9,1
    9798:	61 29 51 80 	ori     r9,r9,20864
    979c:	7c 0b 03 78 	mr      r11,r0
    97a0:	91 2b 00 34 	stw     r9,52(r11)
    97a4:	39 20 00 00 	li      r9,0
    97a8:	7c 0b 03 78 	mr      r11,r0
    97ac:	91 2b 00 30 	stw     r9,48(r11)
			c->sadb_comb_soft_addtime = 20*60*60;
    97b0:	80 01 00 1c 	lwz     r0,28(r1)
    97b4:	3d 20 00 01 	lis     r9,1
    97b8:	61 29 19 40 	ori     r9,r9,6464
    97bc:	7c 0b 03 78 	mr      r11,r0
    97c0:	91 2b 00 2c 	stw     r9,44(r11)
    97c4:	39 20 00 00 	li      r9,0
    97c8:	7c 0b 03 78 	mr      r11,r0
    97cc:	91 2b 00 28 	stw     r9,40(r11)
			c->sadb_comb_hard_usetime = 8*60*60;
    97d0:	80 01 00 1c 	lwz     r0,28(r1)
    97d4:	39 20 70 80 	li      r9,28800
    97d8:	7c 0b 03 78 	mr      r11,r0
    97dc:	91 2b 00 44 	stw     r9,68(r11)
    97e0:	39 20 00 00 	li      r9,0
    97e4:	7c 0b 03 78 	mr      r11,r0
    97e8:	91 2b 00 40 	stw     r9,64(r11)
			c->sadb_comb_soft_usetime = 7*60*60;
    97ec:	80 01 00 1c 	lwz     r0,28(r1)
    97f0:	39 20 62 70 	li      r9,25200
    97f4:	7c 0b 03 78 	mr      r11,r0
    97f8:	91 2b 00 3c 	stw     r9,60(r11)
    97fc:	39 20 00 00 	li      r9,0
    9800:	7c 0b 03 78 	mr      r11,r0
    9804:	91 2b 00 38 	stw     r9,56(r11)
    9808:	48 00 00 08 	b       9810 <dump_esp_combs+0x314>
			struct sadb_comb *c;
			struct xfrm_algo_desc *aalg = xfrm_aalg_get_byidx(k);
			if (!aalg)
				break;
			if (!(aalg_tmpl_set(t, aalg) && aalg->available))
				continue;
    980c:	60 00 00 00 	nop
			break;

		if (!(ealg_tmpl_set(t, ealg) && ealg->available))
			continue;

		for (k = 1; ; k++) {
    9810:	80 01 00 0c 	lwz     r0,12(r1)
    9814:	30 00 00 01 	addic   r0,r0,1
    9818:	90 01 00 0c 	stw     r0,12(r1)
			c->sadb_comb_encrypt_maxbits = ealg->desc.sadb_alg_maxbits;
			c->sadb_comb_hard_addtime = 24*60*60;
			c->sadb_comb_soft_addtime = 20*60*60;
			c->sadb_comb_hard_usetime = 8*60*60;
			c->sadb_comb_soft_usetime = 7*60*60;
		}
    981c:	4b ff fd f0 	b       960c <dump_esp_combs+0x110>
		struct xfrm_algo_desc *ealg = xfrm_ealg_get_byidx(i);
		if (!ealg)
			break;

		if (!(ealg_tmpl_set(t, ealg) && ealg->available))
			continue;
    9820:	60 00 00 00 	nop
    9824:	48 00 00 08 	b       982c <dump_esp_combs+0x330>

		for (k = 1; ; k++) {
			struct sadb_comb *c;
			struct xfrm_algo_desc *aalg = xfrm_aalg_get_byidx(k);
			if (!aalg)
				break;
    9828:	60 00 00 00 	nop
	p->sadb_prop_len = sizeof(struct sadb_prop)/8;
	p->sadb_prop_exttype = SADB_EXT_PROPOSAL;
	p->sadb_prop_replay = 32;
	memset(p->sadb_prop_reserved, 0, sizeof(p->sadb_prop_reserved));

	for (i=0; ; i++) {
    982c:	80 01 00 08 	lwz     r0,8(r1)
    9830:	30 00 00 01 	addic   r0,r0,1
    9834:	90 01 00 08 	stw     r0,8(r1)
			c->sadb_comb_hard_addtime = 24*60*60;
			c->sadb_comb_soft_addtime = 20*60*60;
			c->sadb_comb_hard_usetime = 8*60*60;
			c->sadb_comb_soft_usetime = 7*60*60;
		}
	}
    9838:	4b ff fd 40 	b       9578 <dump_esp_combs+0x7c>
	memset(p->sadb_prop_reserved, 0, sizeof(p->sadb_prop_reserved));

	for (i=0; ; i++) {
		struct xfrm_algo_desc *ealg = xfrm_ealg_get_byidx(i);
		if (!ealg)
			break;
    983c:	60 00 00 00 	nop
			c->sadb_comb_soft_addtime = 20*60*60;
			c->sadb_comb_hard_usetime = 8*60*60;
			c->sadb_comb_soft_usetime = 7*60*60;
		}
	}
}
    9840:	80 01 00 44 	lwz     r0,68(r1)
    9844:	7c 08 03 a6 	mtlr    r0
    9848:	38 21 00 40 	addi    r1,r1,64
    984c:	4e 80 00 20 	blr

00009850 <key_notify_policy_expire>:

static int key_notify_policy_expire(struct xfrm_policy *xp, struct km_event *c)
{
    9850:	94 21 ff f0 	stwu    r1,-16(r1)
    9854:	90 61 00 08 	stw     r3,8(r1)
    9858:	90 81 00 0c 	stw     r4,12(r1)
	return 0;
    985c:	38 00 00 00 	li      r0,0
}
    9860:	7c 03 03 78 	mr      r3,r0
    9864:	38 21 00 10 	addi    r1,r1,16
    9868:	4e 80 00 20 	blr

0000986c <key_notify_sa_expire>:

static int key_notify_sa_expire(struct xfrm_state *x, struct km_event *c)
{
    986c:	94 21 ff c0 	stwu    r1,-64(r1)
    9870:	7c 08 02 a6 	mflr    r0
    9874:	90 01 00 44 	stw     r0,68(r1)
    9878:	90 61 00 38 	stw     r3,56(r1)
    987c:	90 81 00 3c 	stw     r4,60(r1)
	struct sk_buff *out_skb;
	struct sadb_msg *out_hdr;
	int hard;
	int hsc;

	hard = c->data.hard;
    9880:	80 01 00 3c 	lwz     r0,60(r1)
    9884:	7c 09 03 78 	mr      r9,r0
    9888:	80 09 00 00 	lwz     r0,0(r9)
    988c:	90 01 00 0c 	stw     r0,12(r1)
	if (hard)
    9890:	80 01 00 0c 	lwz     r0,12(r1)
    9894:	2f 80 00 00 	cmpwi   cr7,r0,0
    9898:	41 9e 00 10 	beq-    cr7,98a8 <key_notify_sa_expire+0x3c>
		hsc = 2;
    989c:	38 00 00 02 	li      r0,2
    98a0:	90 01 00 08 	stw     r0,8(r1)
    98a4:	48 00 00 0c 	b       98b0 <key_notify_sa_expire+0x44>
	else
		hsc = 1;
    98a8:	38 00 00 01 	li      r0,1
    98ac:	90 01 00 08 	stw     r0,8(r1)
    98b0:	80 01 00 38 	lwz     r0,56(r1)
    98b4:	90 01 00 18 	stw     r0,24(r1)
    98b8:	80 01 00 08 	lwz     r0,8(r1)
    98bc:	90 01 00 1c 	stw     r0,28(r1)
}

static inline struct sk_buff *pfkey_xfrm_state2msg_expire(struct xfrm_state *x,
							  int hsc)
{
	return __pfkey_xfrm_state2msg(x, 0, hsc);
    98c0:	80 61 00 18 	lwz     r3,24(r1)
    98c4:	38 80 00 00 	li      r4,0
    98c8:	80 a1 00 1c 	lwz     r5,28(r1)
    98cc:	4b ff 83 51 	bl      1c1c <__pfkey_xfrm_state2msg>
    98d0:	7c 60 1b 78 	mr      r0,r3
	if (hard)
		hsc = 2;
	else
		hsc = 1;

	out_skb = pfkey_xfrm_state2msg_expire(x, hsc);
    98d4:	90 01 00 10 	stw     r0,16(r1)
    98d8:	80 01 00 10 	lwz     r0,16(r1)
    98dc:	90 01 00 20 	stw     r0,32(r1)
}

static inline long __must_check IS_ERR(const void *ptr)
{
	return IS_ERR_VALUE((unsigned long)ptr);
    98e0:	81 21 00 20 	lwz     r9,32(r1)
    98e4:	38 00 f0 00 	li      r0,-4096
    98e8:	7f 89 00 40 	cmplw   cr7,r9,r0
    98ec:	7c 00 00 26 	mfcr    r0
    98f0:	54 00 f7 fe 	rlwinm  r0,r0,30,31,31
	if (IS_ERR(out_skb))
    98f4:	2f 80 00 00 	cmpwi   cr7,r0,0
    98f8:	41 9e 00 14 	beq-    cr7,990c <key_notify_sa_expire+0xa0>
    98fc:	80 01 00 10 	lwz     r0,16(r1)
    9900:	90 01 00 24 	stw     r0,36(r1)
	return (void *) error;
}

static inline long __must_check PTR_ERR(const void *ptr)
{
	return (long) ptr;
    9904:	80 01 00 24 	lwz     r0,36(r1)
		return PTR_ERR(out_skb);
    9908:	48 00 00 cc 	b       99d4 <key_notify_sa_expire+0x168>

	out_hdr = (struct sadb_msg *) out_skb->data;
    990c:	80 01 00 10 	lwz     r0,16(r1)
    9910:	7c 0b 03 78 	mr      r11,r0
    9914:	80 0b 00 98 	lwz     r0,152(r11)
    9918:	90 01 00 14 	stw     r0,20(r1)
	out_hdr->sadb_msg_version = PF_KEY_V2;
    991c:	80 01 00 14 	lwz     r0,20(r1)
    9920:	39 20 00 02 	li      r9,2
    9924:	7c 0b 03 78 	mr      r11,r0
    9928:	99 2b 00 00 	stb     r9,0(r11)
	out_hdr->sadb_msg_type = SADB_EXPIRE;
    992c:	80 01 00 14 	lwz     r0,20(r1)
    9930:	39 20 00 08 	li      r9,8
    9934:	7c 0b 03 78 	mr      r11,r0
    9938:	99 2b 00 01 	stb     r9,1(r11)
	out_hdr->sadb_msg_satype = pfkey_proto2satype(x->id.proto);
    993c:	80 01 00 38 	lwz     r0,56(r1)
    9940:	7c 09 03 78 	mr      r9,r0
    9944:	88 09 00 30 	lbz     r0,48(r9)
    9948:	54 00 06 3e 	clrlwi  r0,r0,24
    994c:	7c 03 03 78 	mr      r3,r0
    9950:	4b ff 7e 1d 	bl      176c <pfkey_proto2satype>
    9954:	7c 60 1b 78 	mr      r0,r3
    9958:	7c 09 03 78 	mr      r9,r0
    995c:	80 01 00 14 	lwz     r0,20(r1)
    9960:	7c 0b 03 78 	mr      r11,r0
    9964:	99 2b 00 03 	stb     r9,3(r11)
	out_hdr->sadb_msg_errno = 0;
    9968:	80 01 00 14 	lwz     r0,20(r1)
    996c:	39 20 00 00 	li      r9,0
    9970:	7c 0b 03 78 	mr      r11,r0
    9974:	99 2b 00 02 	stb     r9,2(r11)
	out_hdr->sadb_msg_reserved = 0;
    9978:	80 01 00 14 	lwz     r0,20(r1)
    997c:	39 20 00 00 	li      r9,0
    9980:	7c 0b 03 78 	mr      r11,r0
    9984:	b1 2b 00 06 	sth     r9,6(r11)
	out_hdr->sadb_msg_seq = 0;
    9988:	80 01 00 14 	lwz     r0,20(r1)
    998c:	39 20 00 00 	li      r9,0
    9990:	7c 0b 03 78 	mr      r11,r0
    9994:	91 2b 00 08 	stw     r9,8(r11)
	out_hdr->sadb_msg_pid = 0;
    9998:	80 01 00 14 	lwz     r0,20(r1)
    999c:	39 20 00 00 	li      r9,0
    99a0:	7c 0b 03 78 	mr      r11,r0
    99a4:	91 2b 00 0c 	stw     r9,12(r11)
    99a8:	80 01 00 38 	lwz     r0,56(r1)
    99ac:	90 01 00 28 	stw     r0,40(r1)
	void			*data;
};

static inline struct net *xs_net(struct xfrm_state *x)
{
	return read_pnet(&x->xs_net);
    99b0:	3c 00 00 00 	lis     r0,0
    99b4:	30 00 00 00 	addic   r0,r0,0

	pfkey_broadcast(out_skb, GFP_ATOMIC, BROADCAST_REGISTERED, NULL, xs_net(x));
    99b8:	80 61 00 10 	lwz     r3,16(r1)
    99bc:	38 80 00 20 	li      r4,32
    99c0:	38 a0 00 02 	li      r5,2
    99c4:	38 c0 00 00 	li      r6,0
    99c8:	7c 07 03 78 	mr      r7,r0
    99cc:	4b ff 73 81 	bl      d4c <pfkey_broadcast>
	return 0;
    99d0:	38 00 00 00 	li      r0,0
}
    99d4:	7c 03 03 78 	mr      r3,r0
    99d8:	80 01 00 44 	lwz     r0,68(r1)
    99dc:	7c 08 03 a6 	mtlr    r0
    99e0:	38 21 00 40 	addi    r1,r1,64
    99e4:	4e 80 00 20 	blr

000099e8 <pfkey_send_notify>:

static int pfkey_send_notify(struct xfrm_state *x, struct km_event *c)
{
    99e8:	94 21 ff b0 	stwu    r1,-80(r1)
    99ec:	7c 08 02 a6 	mflr    r0
    99f0:	90 01 00 54 	stw     r0,84(r1)
    99f4:	93 e1 00 4c 	stw     r31,76(r1)
    99f8:	90 61 00 38 	stw     r3,56(r1)
    99fc:	90 81 00 3c 	stw     r4,60(r1)
	struct net *net = x ? xs_net(x) : c->net;
    9a00:	80 01 00 38 	lwz     r0,56(r1)
    9a04:	2f 80 00 00 	cmpwi   cr7,r0,0
    9a08:	41 9e 00 18 	beq-    cr7,9a20 <pfkey_send_notify+0x38>
    9a0c:	80 01 00 38 	lwz     r0,56(r1)
    9a10:	90 01 00 2c 	stw     r0,44(r1)
    9a14:	3c 00 00 00 	lis     r0,0
    9a18:	30 00 00 00 	addic   r0,r0,0
    9a1c:	48 00 00 10 	b       9a2c <pfkey_send_notify+0x44>
    9a20:	80 01 00 3c 	lwz     r0,60(r1)
    9a24:	7c 09 03 78 	mr      r9,r0
    9a28:	80 09 00 10 	lwz     r0,16(r9)
    9a2c:	90 01 00 08 	stw     r0,8(r1)
	struct netns_pfkey *net_pfkey = net_generic(net, pfkey_net_id);
    9a30:	3c 00 00 00 	lis     r0,0
    9a34:	7c 0b 03 78 	mr      r11,r0
    9a38:	80 0b 00 00 	lwz     r0,0(r11)
    9a3c:	81 21 00 08 	lwz     r9,8(r1)
    9a40:	91 21 00 10 	stw     r9,16(r1)
    9a44:	90 01 00 14 	stw     r0,20(r1)
{
	struct net_generic *ng;
	void *ptr;

	rcu_read_lock();
	ng = rcu_dereference(net->gen);
    9a48:	80 01 00 10 	lwz     r0,16(r1)
    9a4c:	7c 09 03 78 	mr      r9,r0
    9a50:	80 09 02 20 	lwz     r0,544(r9)
    9a54:	90 01 00 18 	stw     r0,24(r1)
    9a58:	80 01 00 18 	lwz     r0,24(r1)
    9a5c:	90 01 00 1c 	stw     r0,28(r1)
	BUG_ON(id == 0 || id > ng->len);
    9a60:	80 01 00 14 	lwz     r0,20(r1)
    9a64:	2f 80 00 00 	cmpwi   cr7,r0,0
    9a68:	41 9e 00 1c 	beq-    cr7,9a84 <pfkey_send_notify+0x9c>
    9a6c:	81 21 00 14 	lwz     r9,20(r1)
    9a70:	80 01 00 1c 	lwz     r0,28(r1)
    9a74:	7c 0b 03 78 	mr      r11,r0
    9a78:	80 0b 00 00 	lwz     r0,0(r11)
    9a7c:	7f 89 00 40 	cmplw   cr7,r9,r0
    9a80:	40 9d 00 0c 	ble-    cr7,9a8c <pfkey_send_notify+0xa4>
    9a84:	38 00 00 01 	li      r0,1
    9a88:	48 00 00 08 	b       9a90 <pfkey_send_notify+0xa8>
    9a8c:	38 00 00 00 	li      r0,0
    9a90:	0f 00 00 00 	twnei   r0,0
	ptr = ng->ptr[id - 1];
    9a94:	80 01 00 14 	lwz     r0,20(r1)
    9a98:	30 00 ff ff 	addic   r0,r0,-1
    9a9c:	81 21 00 1c 	lwz     r9,28(r1)
    9aa0:	54 00 10 3a 	rlwinm  r0,r0,2,0,29
    9aa4:	7c 09 02 14 	add     r0,r9,r0
    9aa8:	30 00 00 0c 	addic   r0,r0,12
    9aac:	7c 09 03 78 	mr      r9,r0
    9ab0:	80 09 00 00 	lwz     r0,0(r9)
    9ab4:	90 01 00 20 	stw     r0,32(r1)
	rcu_read_unlock();

	return ptr;
    9ab8:	80 01 00 20 	lwz     r0,32(r1)
    9abc:	90 01 00 0c 	stw     r0,12(r1)

	if (atomic_read(&net_pfkey->socks_nr) == 0)
    9ac0:	80 01 00 0c 	lwz     r0,12(r1)
    9ac4:	30 00 00 04 	addic   r0,r0,4
    9ac8:	90 01 00 24 	stw     r0,36(r1)

static __inline__ int atomic_read(const atomic_t *v)
{
	int t;

	__asm__ __volatile__("lwz%U1%X1 %0,%1" : "=r"(t) : "m"(v->counter));
    9acc:	80 01 00 24 	lwz     r0,36(r1)
    9ad0:	7c 0b 03 78 	mr      r11,r0
    9ad4:	83 eb 00 00 	lwz     r31,0(r11)
    9ad8:	93 e1 00 28 	stw     r31,40(r1)

	return t;
    9adc:	80 01 00 28 	lwz     r0,40(r1)
    9ae0:	2f 80 00 00 	cmpwi   cr7,r0,0
    9ae4:	40 9e 00 0c 	bne-    cr7,9af0 <pfkey_send_notify+0x108>
		return 0;
    9ae8:	38 00 00 00 	li      r0,0
    9aec:	48 00 00 a8 	b       9b94 <pfkey_send_notify+0x1ac>

	switch (c->event) {
    9af0:	80 01 00 3c 	lwz     r0,60(r1)
    9af4:	7c 09 03 78 	mr      r9,r0
    9af8:	80 09 00 0c 	lwz     r0,12(r9)
    9afc:	30 00 ff f0 	addic   r0,r0,-16
    9b00:	2b 80 00 0e 	cmplwi  cr7,r0,14
    9b04:	41 9d 00 68 	bgt-    cr7,9b6c <pfkey_send_notify+0x184>
    9b08:	54 09 10 3a 	rlwinm  r9,r0,2,0,29
    9b0c:	3c 00 00 00 	lis     r0,0
    9b10:	30 00 01 04 	addic   r0,r0,260
    9b14:	7c 09 02 14 	add     r0,r9,r0
    9b18:	7c 0b 03 78 	mr      r11,r0
    9b1c:	81 2b 00 00 	lwz     r9,0(r11)
    9b20:	3c 00 00 00 	lis     r0,0
    9b24:	30 00 01 04 	addic   r0,r0,260
    9b28:	7c 09 02 14 	add     r0,r9,r0
    9b2c:	7c 09 03 a6 	mtctr   r0
    9b30:	4e 80 04 20 	bctr
	case XFRM_MSG_EXPIRE:
		return key_notify_sa_expire(x, c);
    9b34:	80 61 00 38 	lwz     r3,56(r1)
    9b38:	80 81 00 3c 	lwz     r4,60(r1)
    9b3c:	4b ff fd 31 	bl      986c <key_notify_sa_expire>
    9b40:	7c 60 1b 78 	mr      r0,r3
    9b44:	48 00 00 50 	b       9b94 <pfkey_send_notify+0x1ac>
	case XFRM_MSG_DELSA:
	case XFRM_MSG_NEWSA:
	case XFRM_MSG_UPDSA:
		return key_notify_sa(x, c);
    9b48:	80 61 00 38 	lwz     r3,56(r1)
    9b4c:	80 81 00 3c 	lwz     r4,60(r1)
    9b50:	4b ff ae 49 	bl      4998 <key_notify_sa>
    9b54:	7c 60 1b 78 	mr      r0,r3
    9b58:	48 00 00 3c 	b       9b94 <pfkey_send_notify+0x1ac>
	case XFRM_MSG_FLUSHSA:
		return key_notify_sa_flush(c);
    9b5c:	80 61 00 3c 	lwz     r3,60(r1)
    9b60:	4b ff bb f5 	bl      5754 <key_notify_sa_flush>
    9b64:	7c 60 1b 78 	mr      r0,r3
    9b68:	48 00 00 2c 	b       9b94 <pfkey_send_notify+0x1ac>
	case XFRM_MSG_NEWAE: /* not yet supported */
		break;
	default:
		pr_err("pfkey: Unknown SA event %d\n", c->event);
    9b6c:	80 01 00 3c 	lwz     r0,60(r1)
    9b70:	7c 09 03 78 	mr      r9,r0
    9b74:	80 09 00 0c 	lwz     r0,12(r9)
    9b78:	3d 20 00 00 	lis     r9,0
    9b7c:	38 69 00 c0 	addi    r3,r9,192
    9b80:	7c 04 03 78 	mr      r4,r0
    9b84:	48 00 00 01 	bl      9b84 <pfkey_send_notify+0x19c>
		break;
    9b88:	48 00 00 08 	b       9b90 <pfkey_send_notify+0x1a8>
	case XFRM_MSG_UPDSA:
		return key_notify_sa(x, c);
	case XFRM_MSG_FLUSHSA:
		return key_notify_sa_flush(c);
	case XFRM_MSG_NEWAE: /* not yet supported */
		break;
    9b8c:	60 00 00 00 	nop
	default:
		pr_err("pfkey: Unknown SA event %d\n", c->event);
		break;
	}

	return 0;
    9b90:	38 00 00 00 	li      r0,0
}
    9b94:	7c 03 03 78 	mr      r3,r0
    9b98:	80 01 00 54 	lwz     r0,84(r1)
    9b9c:	7c 08 03 a6 	mtlr    r0
    9ba0:	83 e1 00 4c 	lwz     r31,76(r1)
    9ba4:	38 21 00 50 	addi    r1,r1,80
    9ba8:	4e 80 00 20 	blr

00009bac <pfkey_send_policy_notify>:

static int pfkey_send_policy_notify(struct xfrm_policy *xp, int dir, struct km_event *c)
{
    9bac:	94 21 ff e0 	stwu    r1,-32(r1)
    9bb0:	7c 08 02 a6 	mflr    r0
    9bb4:	90 01 00 24 	stw     r0,36(r1)
    9bb8:	90 61 00 08 	stw     r3,8(r1)
    9bbc:	90 81 00 0c 	stw     r4,12(r1)
    9bc0:	90 a1 00 10 	stw     r5,16(r1)
	if (xp && xp->type != XFRM_POLICY_TYPE_MAIN)
    9bc4:	80 01 00 08 	lwz     r0,8(r1)
    9bc8:	2f 80 00 00 	cmpwi   cr7,r0,0
    9bcc:	41 9e 00 24 	beq-    cr7,9bf0 <pfkey_send_policy_notify+0x44>
    9bd0:	80 01 00 08 	lwz     r0,8(r1)
    9bd4:	7c 09 03 78 	mr      r9,r0
    9bd8:	88 09 00 ec 	lbz     r0,236(r9)
    9bdc:	54 00 06 3e 	clrlwi  r0,r0,24
    9be0:	2f 80 00 00 	cmpwi   cr7,r0,0
    9be4:	41 9e 00 0c 	beq-    cr7,9bf0 <pfkey_send_policy_notify+0x44>
		return 0;
    9be8:	38 00 00 00 	li      r0,0
    9bec:	48 00 00 c0 	b       9cac <pfkey_send_policy_notify+0x100>

	switch (c->event) {
    9bf0:	80 01 00 10 	lwz     r0,16(r1)
    9bf4:	7c 0b 03 78 	mr      r11,r0
    9bf8:	80 0b 00 0c 	lwz     r0,12(r11)
    9bfc:	30 00 ff ed 	addic   r0,r0,-19
    9c00:	2b 80 00 0a 	cmplwi  cr7,r0,10
    9c04:	41 9d 00 80 	bgt-    cr7,9c84 <pfkey_send_policy_notify+0xd8>
    9c08:	54 09 10 3a 	rlwinm  r9,r0,2,0,29
    9c0c:	3c 00 00 00 	lis     r0,0
    9c10:	30 00 01 40 	addic   r0,r0,320
    9c14:	7c 09 02 14 	add     r0,r9,r0
    9c18:	7c 0b 03 78 	mr      r11,r0
    9c1c:	81 2b 00 00 	lwz     r9,0(r11)
    9c20:	3c 00 00 00 	lis     r0,0
    9c24:	30 00 01 40 	addic   r0,r0,320
    9c28:	7c 09 02 14 	add     r0,r9,r0
    9c2c:	7c 09 03 a6 	mtctr   r0
    9c30:	4e 80 04 20 	bctr
	case XFRM_MSG_POLEXPIRE:
		return key_notify_policy_expire(xp, c);
    9c34:	80 61 00 08 	lwz     r3,8(r1)
    9c38:	80 81 00 10 	lwz     r4,16(r1)
    9c3c:	4b ff fc 15 	bl      9850 <key_notify_policy_expire>
    9c40:	7c 60 1b 78 	mr      r0,r3
    9c44:	48 00 00 68 	b       9cac <pfkey_send_policy_notify+0x100>
	case XFRM_MSG_DELPOLICY:
	case XFRM_MSG_NEWPOLICY:
	case XFRM_MSG_UPDPOLICY:
		return key_notify_policy(xp, dir, c);
    9c48:	80 61 00 08 	lwz     r3,8(r1)
    9c4c:	80 81 00 0c 	lwz     r4,12(r1)
    9c50:	80 a1 00 10 	lwz     r5,16(r1)
    9c54:	4b ff d4 75 	bl      70c8 <key_notify_policy>
    9c58:	7c 60 1b 78 	mr      r0,r3
    9c5c:	48 00 00 50 	b       9cac <pfkey_send_policy_notify+0x100>
	case XFRM_MSG_FLUSHPOLICY:
		if (c->data.type != XFRM_POLICY_TYPE_MAIN)
    9c60:	80 01 00 10 	lwz     r0,16(r1)
    9c64:	7c 09 03 78 	mr      r9,r0
    9c68:	80 09 00 00 	lwz     r0,0(r9)
    9c6c:	2f 80 00 00 	cmpwi   cr7,r0,0
    9c70:	40 9e 00 34 	bne-    cr7,9ca4 <pfkey_send_policy_notify+0xf8>
			break;
		return key_notify_policy_flush(c);
    9c74:	80 61 00 10 	lwz     r3,16(r1)
    9c78:	4b ff ef 35 	bl      8bac <key_notify_policy_flush>
    9c7c:	7c 60 1b 78 	mr      r0,r3
    9c80:	48 00 00 2c 	b       9cac <pfkey_send_policy_notify+0x100>
	default:
		pr_err("pfkey: Unknown policy event %d\n", c->event);
    9c84:	80 01 00 10 	lwz     r0,16(r1)
    9c88:	7c 0b 03 78 	mr      r11,r0
    9c8c:	80 0b 00 0c 	lwz     r0,12(r11)
    9c90:	3d 20 00 00 	lis     r9,0
    9c94:	38 69 00 e0 	addi    r3,r9,224
    9c98:	7c 04 03 78 	mr      r4,r0
    9c9c:	48 00 00 01 	bl      9c9c <pfkey_send_policy_notify+0xf0>
		break;
    9ca0:	48 00 00 08 	b       9ca8 <pfkey_send_policy_notify+0xfc>
	case XFRM_MSG_NEWPOLICY:
	case XFRM_MSG_UPDPOLICY:
		return key_notify_policy(xp, dir, c);
	case XFRM_MSG_FLUSHPOLICY:
		if (c->data.type != XFRM_POLICY_TYPE_MAIN)
			break;
    9ca4:	60 00 00 00 	nop
	default:
		pr_err("pfkey: Unknown policy event %d\n", c->event);
		break;
	}

	return 0;
    9ca8:	38 00 00 00 	li      r0,0
}
    9cac:	7c 03 03 78 	mr      r3,r0
    9cb0:	80 01 00 24 	lwz     r0,36(r1)
    9cb4:	7c 08 03 a6 	mtlr    r0
    9cb8:	38 21 00 20 	addi    r1,r1,32
    9cbc:	4e 80 00 20 	blr

00009cc0 <get_acqseq>:

static u32 get_acqseq(void)
{
    9cc0:	94 21 ff e0 	stwu    r1,-32(r1)
    9cc4:	93 e1 00 1c 	stw     r31,28(r1)
    9cc8:	3c 00 00 00 	lis     r0,0
    9ccc:	30 00 00 08 	addic   r0,r0,8
    9cd0:	90 01 00 0c 	stw     r0,12(r1)
	PPC405_ERR77(0,%1)
"	stwcx.	%0,0,%1 \n\
	bne-	1b"
	PPC_ACQUIRE_BARRIER
	: "=&r" (t)
	: "r" (&v->counter)
    9cd4:	80 01 00 0c 	lwz     r0,12(r1)

static __inline__ int atomic_inc_return(atomic_t *v)
{
	int t;

	__asm__ __volatile__(
    9cd8:	7f e0 00 28 	lwarx   r31,0,r0
    9cdc:	33 ff 00 01 	addic   r31,r31,1
    9ce0:	7f e0 01 2d 	stwcx.  r31,0,r0
    9ce4:	40 a2 ff f4 	bne-    9cd8 <get_acqseq+0x18>
    9ce8:	93 e1 00 10 	stw     r31,16(r1)
	PPC_ACQUIRE_BARRIER
	: "=&r" (t)
	: "r" (&v->counter)
	: "cc", "xer", "memory");

	return t;
    9cec:	80 01 00 10 	lwz     r0,16(r1)
	u32 res;
	static atomic_t acqseq;

	do {
		res = atomic_inc_return(&acqseq);
    9cf0:	90 01 00 08 	stw     r0,8(r1)
	} while (!res);
    9cf4:	80 01 00 08 	lwz     r0,8(r1)
    9cf8:	2f 80 00 00 	cmpwi   cr7,r0,0
    9cfc:	41 9e ff cc 	beq+    cr7,9cc8 <get_acqseq+0x8>
	return res;
    9d00:	80 01 00 08 	lwz     r0,8(r1)
}
    9d04:	7c 03 03 78 	mr      r3,r0
    9d08:	83 e1 00 1c 	lwz     r31,28(r1)
    9d0c:	38 21 00 20 	addi    r1,r1,32
    9d10:	4e 80 00 20 	blr

00009d14 <pfkey_send_acquire>:

static int pfkey_send_acquire(struct xfrm_state *x, struct xfrm_tmpl *t, struct xfrm_policy *xp, int dir)
{
    9d14:	94 21 ff b0 	stwu    r1,-80(r1)
    9d18:	7c 08 02 a6 	mflr    r0
    9d1c:	90 01 00 54 	stw     r0,84(r1)
    9d20:	90 61 00 38 	stw     r3,56(r1)
    9d24:	90 81 00 3c 	stw     r4,60(r1)
    9d28:	90 a1 00 40 	stw     r5,64(r1)
    9d2c:	90 c1 00 44 	stw     r6,68(r1)
	struct sadb_x_policy *pol;
	int sockaddr_size;
	int size;
	struct sadb_x_sec_ctx *sec_ctx;
	struct xfrm_sec_ctx *xfrm_ctx;
	int ctx_size = 0;
    9d30:	38 00 00 00 	li      r0,0
    9d34:	90 01 00 0c 	stw     r0,12(r1)

	sockaddr_size = pfkey_sockaddr_size(x->props.family);
    9d38:	80 01 00 38 	lwz     r0,56(r1)
    9d3c:	7c 09 03 78 	mr      r9,r0
    9d40:	a0 09 00 96 	lhz     r0,150(r9)
    9d44:	54 00 04 3e 	clrlwi  r0,r0,16
    9d48:	7c 03 03 78 	mr      r3,r0
    9d4c:	4b ff 7d 29 	bl      1a74 <pfkey_sockaddr_size>
    9d50:	90 61 00 10 	stw     r3,16(r1)
	if (!sockaddr_size)
    9d54:	80 01 00 10 	lwz     r0,16(r1)
    9d58:	2f 80 00 00 	cmpwi   cr7,r0,0
    9d5c:	40 9e 00 0c 	bne-    cr7,9d68 <pfkey_send_acquire+0x54>
		return -EINVAL;
    9d60:	38 00 ff ea 	li      r0,-22
    9d64:	48 00 05 2c 	b       a290 <pfkey_send_acquire+0x57c>

	size = sizeof(struct sadb_msg) +
		(sizeof(struct sadb_address) * 2) +
    9d68:	80 01 00 10 	lwz     r0,16(r1)
		(sockaddr_size * 2) +
    9d6c:	30 00 00 18 	addic   r0,r0,24
    9d70:	54 00 08 3c 	rlwinm  r0,r0,1,0,30

	sockaddr_size = pfkey_sockaddr_size(x->props.family);
	if (!sockaddr_size)
		return -EINVAL;

	size = sizeof(struct sadb_msg) +
    9d74:	90 01 00 08 	stw     r0,8(r1)
		(sizeof(struct sadb_address) * 2) +
		(sockaddr_size * 2) +
		sizeof(struct sadb_x_policy);

	if (x->id.proto == IPPROTO_AH)
    9d78:	80 01 00 38 	lwz     r0,56(r1)
    9d7c:	7c 0a 03 78 	mr      r10,r0
    9d80:	88 0a 00 30 	lbz     r0,48(r10)
    9d84:	54 00 06 3e 	clrlwi  r0,r0,24
    9d88:	2f 80 00 33 	cmpwi   cr7,r0,51
    9d8c:	40 9e 00 20 	bne-    cr7,9dac <pfkey_send_acquire+0x98>
		size += count_ah_combs(t);
    9d90:	80 61 00 3c 	lwz     r3,60(r1)
    9d94:	4b ff f2 a1 	bl      9034 <count_ah_combs>
    9d98:	7c 60 1b 78 	mr      r0,r3
    9d9c:	81 21 00 08 	lwz     r9,8(r1)
    9da0:	7c 09 02 14 	add     r0,r9,r0
    9da4:	90 01 00 08 	stw     r0,8(r1)
    9da8:	48 00 00 34 	b       9ddc <pfkey_send_acquire+0xc8>
	else if (x->id.proto == IPPROTO_ESP)
    9dac:	80 01 00 38 	lwz     r0,56(r1)
    9db0:	7c 0b 03 78 	mr      r11,r0
    9db4:	88 0b 00 30 	lbz     r0,48(r11)
    9db8:	54 00 06 3e 	clrlwi  r0,r0,24
    9dbc:	2f 80 00 32 	cmpwi   cr7,r0,50
    9dc0:	40 9e 00 1c 	bne-    cr7,9ddc <pfkey_send_acquire+0xc8>
		size += count_esp_combs(t);
    9dc4:	80 61 00 3c 	lwz     r3,60(r1)
    9dc8:	4b ff f3 55 	bl      911c <count_esp_combs>
    9dcc:	7c 60 1b 78 	mr      r0,r3
    9dd0:	81 21 00 08 	lwz     r9,8(r1)
    9dd4:	7c 09 02 14 	add     r0,r9,r0
    9dd8:	90 01 00 08 	stw     r0,8(r1)

	if ((xfrm_ctx = x->security)) {
    9ddc:	80 01 00 38 	lwz     r0,56(r1)
    9de0:	7c 09 03 78 	mr      r9,r0
    9de4:	80 09 01 dc 	lwz     r0,476(r9)
    9de8:	90 01 00 14 	stw     r0,20(r1)
    9dec:	80 01 00 14 	lwz     r0,20(r1)
    9df0:	2f 80 00 00 	cmpwi   cr7,r0,0
    9df4:	41 9e 00 38 	beq-    cr7,9e2c <pfkey_send_acquire+0x118>
		ctx_size = PFKEY_ALIGN8(xfrm_ctx->ctx_len);
    9df8:	80 01 00 14 	lwz     r0,20(r1)
    9dfc:	7c 0a 03 78 	mr      r10,r0
    9e00:	a0 0a 00 02 	lhz     r0,2(r10)
    9e04:	54 00 04 3e 	clrlwi  r0,r0,16
    9e08:	30 00 ff ff 	addic   r0,r0,-1
    9e0c:	60 00 00 07 	ori     r0,r0,7
    9e10:	30 00 00 01 	addic   r0,r0,1
    9e14:	90 01 00 0c 	stw     r0,12(r1)
		size +=  sizeof(struct sadb_x_sec_ctx) + ctx_size;
    9e18:	81 21 00 0c 	lwz     r9,12(r1)
    9e1c:	80 01 00 08 	lwz     r0,8(r1)
    9e20:	7c 09 02 14 	add     r0,r9,r0
    9e24:	30 00 00 08 	addic   r0,r0,8
    9e28:	90 01 00 08 	stw     r0,8(r1)
	}

	skb =  alloc_skb(size + 16, GFP_ATOMIC);
    9e2c:	80 01 00 08 	lwz     r0,8(r1)
    9e30:	30 00 00 10 	addic   r0,r0,16
    9e34:	90 01 00 2c 	stw     r0,44(r1)
    9e38:	38 00 00 20 	li      r0,32
    9e3c:	90 01 00 30 	stw     r0,48(r1)
    9e40:	80 61 00 2c 	lwz     r3,44(r1)
    9e44:	80 81 00 30 	lwz     r4,48(r1)
    9e48:	38 a0 00 00 	li      r5,0
    9e4c:	38 c0 ff ff 	li      r6,-1
    9e50:	48 00 00 01 	bl      9e50 <pfkey_send_acquire+0x13c>
    9e54:	7c 60 1b 78 	mr      r0,r3
    9e58:	90 01 00 18 	stw     r0,24(r1)
	if (skb == NULL)
    9e5c:	80 01 00 18 	lwz     r0,24(r1)
    9e60:	2f 80 00 00 	cmpwi   cr7,r0,0
    9e64:	40 9e 00 0c 	bne-    cr7,9e70 <pfkey_send_acquire+0x15c>
		return -ENOMEM;
    9e68:	38 00 ff f4 	li      r0,-12
    9e6c:	48 00 04 24 	b       a290 <pfkey_send_acquire+0x57c>

	hdr = (struct sadb_msg *) skb_put(skb, sizeof(struct sadb_msg));
    9e70:	80 61 00 18 	lwz     r3,24(r1)
    9e74:	38 80 00 10 	li      r4,16
    9e78:	48 00 00 01 	bl      9e78 <pfkey_send_acquire+0x164>
    9e7c:	90 61 00 1c 	stw     r3,28(r1)
	hdr->sadb_msg_version = PF_KEY_V2;
    9e80:	80 01 00 1c 	lwz     r0,28(r1)
    9e84:	39 20 00 02 	li      r9,2
    9e88:	7c 0b 03 78 	mr      r11,r0
    9e8c:	99 2b 00 00 	stb     r9,0(r11)
	hdr->sadb_msg_type = SADB_ACQUIRE;
    9e90:	80 01 00 1c 	lwz     r0,28(r1)
    9e94:	39 20 00 06 	li      r9,6
    9e98:	7c 0a 03 78 	mr      r10,r0
    9e9c:	99 2a 00 01 	stb     r9,1(r10)
	hdr->sadb_msg_satype = pfkey_proto2satype(x->id.proto);
    9ea0:	80 01 00 38 	lwz     r0,56(r1)
    9ea4:	7c 0b 03 78 	mr      r11,r0
    9ea8:	88 0b 00 30 	lbz     r0,48(r11)
    9eac:	54 00 06 3e 	clrlwi  r0,r0,24
    9eb0:	7c 03 03 78 	mr      r3,r0
    9eb4:	4b ff 78 b9 	bl      176c <pfkey_proto2satype>
    9eb8:	7c 60 1b 78 	mr      r0,r3
    9ebc:	7c 09 03 78 	mr      r9,r0
    9ec0:	80 01 00 1c 	lwz     r0,28(r1)
    9ec4:	7c 0a 03 78 	mr      r10,r0
    9ec8:	99 2a 00 03 	stb     r9,3(r10)
	hdr->sadb_msg_len = size / sizeof(uint64_t);
    9ecc:	80 01 00 08 	lwz     r0,8(r1)
    9ed0:	54 00 e8 fe 	rlwinm  r0,r0,29,3,31
    9ed4:	54 09 04 3e 	clrlwi  r9,r0,16
    9ed8:	80 01 00 1c 	lwz     r0,28(r1)
    9edc:	7c 0b 03 78 	mr      r11,r0
    9ee0:	b1 2b 00 04 	sth     r9,4(r11)
	hdr->sadb_msg_errno = 0;
    9ee4:	80 01 00 1c 	lwz     r0,28(r1)
    9ee8:	39 20 00 00 	li      r9,0
    9eec:	7c 0a 03 78 	mr      r10,r0
    9ef0:	99 2a 00 02 	stb     r9,2(r10)
	hdr->sadb_msg_reserved = 0;
    9ef4:	80 01 00 1c 	lwz     r0,28(r1)
    9ef8:	39 20 00 00 	li      r9,0
    9efc:	7c 0b 03 78 	mr      r11,r0
    9f00:	b1 2b 00 06 	sth     r9,6(r11)
	hdr->sadb_msg_seq = x->km.seq = get_acqseq();
    9f04:	4b ff fd bd 	bl      9cc0 <get_acqseq>
    9f08:	7c 69 1b 78 	mr      r9,r3
    9f0c:	80 01 00 38 	lwz     r0,56(r1)
    9f10:	7c 0a 03 78 	mr      r10,r0
    9f14:	91 2a 00 88 	stw     r9,136(r10)
    9f18:	80 01 00 38 	lwz     r0,56(r1)
    9f1c:	7c 0b 03 78 	mr      r11,r0
    9f20:	81 2b 00 88 	lwz     r9,136(r11)
    9f24:	80 01 00 1c 	lwz     r0,28(r1)
    9f28:	7c 0a 03 78 	mr      r10,r0
    9f2c:	91 2a 00 08 	stw     r9,8(r10)
	hdr->sadb_msg_pid = 0;
    9f30:	80 01 00 1c 	lwz     r0,28(r1)
    9f34:	39 20 00 00 	li      r9,0
    9f38:	7c 0b 03 78 	mr      r11,r0
    9f3c:	91 2b 00 0c 	stw     r9,12(r11)

	/* src address */
	addr = (struct sadb_address*) skb_put(skb,
    9f40:	80 01 00 10 	lwz     r0,16(r1)
    9f44:	30 00 00 08 	addic   r0,r0,8
    9f48:	80 61 00 18 	lwz     r3,24(r1)
    9f4c:	7c 04 03 78 	mr      r4,r0
    9f50:	48 00 00 01 	bl      9f50 <pfkey_send_acquire+0x23c>
    9f54:	90 61 00 20 	stw     r3,32(r1)
					      sizeof(struct sadb_address)+sockaddr_size);
	addr->sadb_address_len =
		(sizeof(struct sadb_address)+sockaddr_size)/
    9f58:	80 01 00 10 	lwz     r0,16(r1)
    9f5c:	30 00 00 08 	addic   r0,r0,8
    9f60:	54 00 e8 fe 	rlwinm  r0,r0,29,3,31
	hdr->sadb_msg_pid = 0;

	/* src address */
	addr = (struct sadb_address*) skb_put(skb,
					      sizeof(struct sadb_address)+sockaddr_size);
	addr->sadb_address_len =
    9f64:	54 09 04 3e 	clrlwi  r9,r0,16
    9f68:	80 01 00 20 	lwz     r0,32(r1)
    9f6c:	7c 0a 03 78 	mr      r10,r0
    9f70:	b1 2a 00 00 	sth     r9,0(r10)
		(sizeof(struct sadb_address)+sockaddr_size)/
			sizeof(uint64_t);
	addr->sadb_address_exttype = SADB_EXT_ADDRESS_SRC;
    9f74:	80 01 00 20 	lwz     r0,32(r1)
    9f78:	39 20 00 05 	li      r9,5
    9f7c:	7c 0b 03 78 	mr      r11,r0
    9f80:	b1 2b 00 02 	sth     r9,2(r11)
	addr->sadb_address_proto = 0;
    9f84:	80 01 00 20 	lwz     r0,32(r1)
    9f88:	39 20 00 00 	li      r9,0
    9f8c:	7c 0a 03 78 	mr      r10,r0
    9f90:	99 2a 00 04 	stb     r9,4(r10)
	addr->sadb_address_reserved = 0;
    9f94:	80 01 00 20 	lwz     r0,32(r1)
    9f98:	39 20 00 00 	li      r9,0
    9f9c:	7c 0b 03 78 	mr      r11,r0
    9fa0:	b1 2b 00 06 	sth     r9,6(r11)
	addr->sadb_address_prefixlen =
		pfkey_sockaddr_fill(&x->props.saddr, 0,
    9fa4:	80 01 00 38 	lwz     r0,56(r1)
    9fa8:	31 60 00 98 	addic   r11,r0,152
    9fac:	80 01 00 20 	lwz     r0,32(r1)
    9fb0:	31 20 00 08 	addic   r9,r0,8
				    (struct sockaddr *) (addr + 1),
				    x->props.family);
    9fb4:	80 01 00 38 	lwz     r0,56(r1)
			sizeof(uint64_t);
	addr->sadb_address_exttype = SADB_EXT_ADDRESS_SRC;
	addr->sadb_address_proto = 0;
	addr->sadb_address_reserved = 0;
	addr->sadb_address_prefixlen =
		pfkey_sockaddr_fill(&x->props.saddr, 0,
    9fb8:	7c 0a 03 78 	mr      r10,r0
    9fbc:	a0 0a 00 96 	lhz     r0,150(r10)
    9fc0:	54 00 04 3e 	clrlwi  r0,r0,16
    9fc4:	7d 63 5b 78 	mr      r3,r11
    9fc8:	38 80 00 00 	li      r4,0
    9fcc:	7d 25 4b 78 	mr      r5,r9
    9fd0:	7c 06 03 78 	mr      r6,r0
    9fd4:	4b ff 7a fd 	bl      1ad0 <pfkey_sockaddr_fill>
    9fd8:	7c 60 1b 78 	mr      r0,r3
		(sizeof(struct sadb_address)+sockaddr_size)/
			sizeof(uint64_t);
	addr->sadb_address_exttype = SADB_EXT_ADDRESS_SRC;
	addr->sadb_address_proto = 0;
	addr->sadb_address_reserved = 0;
	addr->sadb_address_prefixlen =
    9fdc:	54 09 06 3e 	clrlwi  r9,r0,24
    9fe0:	80 01 00 20 	lwz     r0,32(r1)
    9fe4:	7c 0b 03 78 	mr      r11,r0
    9fe8:	99 2b 00 05 	stb     r9,5(r11)
		pfkey_sockaddr_fill(&x->props.saddr, 0,
				    (struct sockaddr *) (addr + 1),
				    x->props.family);
	if (!addr->sadb_address_prefixlen)
    9fec:	80 01 00 20 	lwz     r0,32(r1)
    9ff0:	7c 09 03 78 	mr      r9,r0
    9ff4:	88 09 00 05 	lbz     r0,5(r9)
    9ff8:	54 00 06 3e 	clrlwi  r0,r0,24
    9ffc:	2f 80 00 00 	cmpwi   cr7,r0,0
    a000:	40 9e 00 08 	bne-    cr7,a008 <pfkey_send_acquire+0x2f4>
		BUG();
    a004:	0f e0 00 00 	twi     31,r0,0

	/* dst address */
	addr = (struct sadb_address*) skb_put(skb,
    a008:	80 01 00 10 	lwz     r0,16(r1)
    a00c:	30 00 00 08 	addic   r0,r0,8
    a010:	80 61 00 18 	lwz     r3,24(r1)
    a014:	7c 04 03 78 	mr      r4,r0
    a018:	48 00 00 01 	bl      a018 <pfkey_send_acquire+0x304>
    a01c:	90 61 00 20 	stw     r3,32(r1)
					      sizeof(struct sadb_address)+sockaddr_size);
	addr->sadb_address_len =
		(sizeof(struct sadb_address)+sockaddr_size)/
    a020:	80 01 00 10 	lwz     r0,16(r1)
    a024:	30 00 00 08 	addic   r0,r0,8
    a028:	54 00 e8 fe 	rlwinm  r0,r0,29,3,31
		BUG();

	/* dst address */
	addr = (struct sadb_address*) skb_put(skb,
					      sizeof(struct sadb_address)+sockaddr_size);
	addr->sadb_address_len =
    a02c:	54 09 04 3e 	clrlwi  r9,r0,16
    a030:	80 01 00 20 	lwz     r0,32(r1)
    a034:	7c 0a 03 78 	mr      r10,r0
    a038:	b1 2a 00 00 	sth     r9,0(r10)
		(sizeof(struct sadb_address)+sockaddr_size)/
			sizeof(uint64_t);
	addr->sadb_address_exttype = SADB_EXT_ADDRESS_DST;
    a03c:	80 01 00 20 	lwz     r0,32(r1)
    a040:	39 20 00 06 	li      r9,6
    a044:	7c 0b 03 78 	mr      r11,r0
    a048:	b1 2b 00 02 	sth     r9,2(r11)
	addr->sadb_address_proto = 0;
    a04c:	80 01 00 20 	lwz     r0,32(r1)
    a050:	39 20 00 00 	li      r9,0
    a054:	7c 0a 03 78 	mr      r10,r0
    a058:	99 2a 00 04 	stb     r9,4(r10)
	addr->sadb_address_reserved = 0;
    a05c:	80 01 00 20 	lwz     r0,32(r1)
    a060:	39 20 00 00 	li      r9,0
    a064:	7c 0b 03 78 	mr      r11,r0
    a068:	b1 2b 00 06 	sth     r9,6(r11)
	addr->sadb_address_prefixlen =
		pfkey_sockaddr_fill(&x->id.daddr, 0,
    a06c:	80 01 00 38 	lwz     r0,56(r1)
    a070:	31 60 00 1c 	addic   r11,r0,28
    a074:	80 01 00 20 	lwz     r0,32(r1)
    a078:	31 20 00 08 	addic   r9,r0,8
				    (struct sockaddr *) (addr + 1),
				    x->props.family);
    a07c:	80 01 00 38 	lwz     r0,56(r1)
			sizeof(uint64_t);
	addr->sadb_address_exttype = SADB_EXT_ADDRESS_DST;
	addr->sadb_address_proto = 0;
	addr->sadb_address_reserved = 0;
	addr->sadb_address_prefixlen =
		pfkey_sockaddr_fill(&x->id.daddr, 0,
    a080:	7c 0a 03 78 	mr      r10,r0
    a084:	a0 0a 00 96 	lhz     r0,150(r10)
    a088:	54 00 04 3e 	clrlwi  r0,r0,16
    a08c:	7d 63 5b 78 	mr      r3,r11
    a090:	38 80 00 00 	li      r4,0
    a094:	7d 25 4b 78 	mr      r5,r9
    a098:	7c 06 03 78 	mr      r6,r0
    a09c:	4b ff 7a 35 	bl      1ad0 <pfkey_sockaddr_fill>
    a0a0:	7c 60 1b 78 	mr      r0,r3
		(sizeof(struct sadb_address)+sockaddr_size)/
			sizeof(uint64_t);
	addr->sadb_address_exttype = SADB_EXT_ADDRESS_DST;
	addr->sadb_address_proto = 0;
	addr->sadb_address_reserved = 0;
	addr->sadb_address_prefixlen =
    a0a4:	54 09 06 3e 	clrlwi  r9,r0,24
    a0a8:	80 01 00 20 	lwz     r0,32(r1)
    a0ac:	7c 0b 03 78 	mr      r11,r0
    a0b0:	99 2b 00 05 	stb     r9,5(r11)
		pfkey_sockaddr_fill(&x->id.daddr, 0,
				    (struct sockaddr *) (addr + 1),
				    x->props.family);
	if (!addr->sadb_address_prefixlen)
    a0b4:	80 01 00 20 	lwz     r0,32(r1)
    a0b8:	7c 09 03 78 	mr      r9,r0
    a0bc:	88 09 00 05 	lbz     r0,5(r9)
    a0c0:	54 00 06 3e 	clrlwi  r0,r0,24
    a0c4:	2f 80 00 00 	cmpwi   cr7,r0,0
    a0c8:	40 9e 00 08 	bne-    cr7,a0d0 <pfkey_send_acquire+0x3bc>
		BUG();
    a0cc:	0f e0 00 00 	twi     31,r0,0

	pol = (struct sadb_x_policy *)  skb_put(skb, sizeof(struct sadb_x_policy));
    a0d0:	80 61 00 18 	lwz     r3,24(r1)
    a0d4:	38 80 00 10 	li      r4,16
    a0d8:	48 00 00 01 	bl      a0d8 <pfkey_send_acquire+0x3c4>
    a0dc:	90 61 00 24 	stw     r3,36(r1)
	pol->sadb_x_policy_len = sizeof(struct sadb_x_policy)/sizeof(uint64_t);
    a0e0:	80 01 00 24 	lwz     r0,36(r1)
    a0e4:	39 20 00 02 	li      r9,2
    a0e8:	7c 0a 03 78 	mr      r10,r0
    a0ec:	b1 2a 00 00 	sth     r9,0(r10)
	pol->sadb_x_policy_exttype = SADB_X_EXT_POLICY;
    a0f0:	80 01 00 24 	lwz     r0,36(r1)
    a0f4:	39 20 00 12 	li      r9,18
    a0f8:	7c 0b 03 78 	mr      r11,r0
    a0fc:	b1 2b 00 02 	sth     r9,2(r11)
	pol->sadb_x_policy_type = IPSEC_POLICY_IPSEC;
    a100:	80 01 00 24 	lwz     r0,36(r1)
    a104:	39 20 00 02 	li      r9,2
    a108:	7c 0a 03 78 	mr      r10,r0
    a10c:	b1 2a 00 04 	sth     r9,4(r10)
	pol->sadb_x_policy_dir = dir+1;
    a110:	80 01 00 44 	lwz     r0,68(r1)
    a114:	54 00 06 3e 	clrlwi  r0,r0,24
    a118:	30 00 00 01 	addic   r0,r0,1
    a11c:	54 09 06 3e 	clrlwi  r9,r0,24
    a120:	80 01 00 24 	lwz     r0,36(r1)
    a124:	7c 0b 03 78 	mr      r11,r0
    a128:	99 2b 00 06 	stb     r9,6(r11)
	pol->sadb_x_policy_id = xp->index;
    a12c:	80 01 00 40 	lwz     r0,64(r1)
    a130:	7c 0a 03 78 	mr      r10,r0
    a134:	81 2a 00 3c 	lwz     r9,60(r10)
    a138:	80 01 00 24 	lwz     r0,36(r1)
    a13c:	7c 0b 03 78 	mr      r11,r0
    a140:	91 2b 00 08 	stw     r9,8(r11)

	/* Set sadb_comb's. */
	if (x->id.proto == IPPROTO_AH)
    a144:	80 01 00 38 	lwz     r0,56(r1)
    a148:	7c 09 03 78 	mr      r9,r0
    a14c:	88 09 00 30 	lbz     r0,48(r9)
    a150:	54 00 06 3e 	clrlwi  r0,r0,24
    a154:	2f 80 00 33 	cmpwi   cr7,r0,51
    a158:	40 9e 00 14 	bne-    cr7,a16c <pfkey_send_acquire+0x458>
		dump_ah_combs(skb, t);
    a15c:	80 61 00 18 	lwz     r3,24(r1)
    a160:	80 81 00 3c 	lwz     r4,60(r1)
    a164:	4b ff f1 51 	bl      92b4 <dump_ah_combs>
    a168:	48 00 00 28 	b       a190 <pfkey_send_acquire+0x47c>
	else if (x->id.proto == IPPROTO_ESP)
    a16c:	80 01 00 38 	lwz     r0,56(r1)
    a170:	7c 0a 03 78 	mr      r10,r0
    a174:	88 0a 00 30 	lbz     r0,48(r10)
    a178:	54 00 06 3e 	clrlwi  r0,r0,24
    a17c:	2f 80 00 32 	cmpwi   cr7,r0,50
    a180:	40 9e 00 10 	bne-    cr7,a190 <pfkey_send_acquire+0x47c>
		dump_esp_combs(skb, t);
    a184:	80 61 00 18 	lwz     r3,24(r1)
    a188:	80 81 00 3c 	lwz     r4,60(r1)
    a18c:	4b ff f3 71 	bl      94fc <dump_esp_combs>

	/* security context */
	if (xfrm_ctx) {
    a190:	80 01 00 14 	lwz     r0,20(r1)
    a194:	2f 80 00 00 	cmpwi   cr7,r0,0
    a198:	41 9e 00 cc 	beq-    cr7,a264 <pfkey_send_acquire+0x550>
		sec_ctx = (struct sadb_x_sec_ctx *) skb_put(skb,
    a19c:	80 01 00 0c 	lwz     r0,12(r1)
    a1a0:	30 00 00 08 	addic   r0,r0,8
    a1a4:	80 61 00 18 	lwz     r3,24(r1)
    a1a8:	7c 04 03 78 	mr      r4,r0
    a1ac:	48 00 00 01 	bl      a1ac <pfkey_send_acquire+0x498>
    a1b0:	90 61 00 28 	stw     r3,40(r1)
				sizeof(struct sadb_x_sec_ctx) + ctx_size);
		sec_ctx->sadb_x_sec_len =
		  (sizeof(struct sadb_x_sec_ctx) + ctx_size) / sizeof(uint64_t);
    a1b4:	80 01 00 0c 	lwz     r0,12(r1)
    a1b8:	30 00 00 08 	addic   r0,r0,8
    a1bc:	54 00 e8 fe 	rlwinm  r0,r0,29,3,31

	/* security context */
	if (xfrm_ctx) {
		sec_ctx = (struct sadb_x_sec_ctx *) skb_put(skb,
				sizeof(struct sadb_x_sec_ctx) + ctx_size);
		sec_ctx->sadb_x_sec_len =
    a1c0:	54 09 04 3e 	clrlwi  r9,r0,16
    a1c4:	80 01 00 28 	lwz     r0,40(r1)
    a1c8:	7c 0b 03 78 	mr      r11,r0
    a1cc:	b1 2b 00 00 	sth     r9,0(r11)
		  (sizeof(struct sadb_x_sec_ctx) + ctx_size) / sizeof(uint64_t);
		sec_ctx->sadb_x_sec_exttype = SADB_X_EXT_SEC_CTX;
    a1d0:	80 01 00 28 	lwz     r0,40(r1)
    a1d4:	39 20 00 18 	li      r9,24
    a1d8:	7c 0a 03 78 	mr      r10,r0
    a1dc:	b1 2a 00 02 	sth     r9,2(r10)
		sec_ctx->sadb_x_ctx_doi = xfrm_ctx->ctx_doi;
    a1e0:	80 01 00 14 	lwz     r0,20(r1)
    a1e4:	7c 0b 03 78 	mr      r11,r0
    a1e8:	88 0b 00 00 	lbz     r0,0(r11)
    a1ec:	54 09 06 3e 	clrlwi  r9,r0,24
    a1f0:	80 01 00 28 	lwz     r0,40(r1)
    a1f4:	7c 0a 03 78 	mr      r10,r0
    a1f8:	99 2a 00 05 	stb     r9,5(r10)
		sec_ctx->sadb_x_ctx_alg = xfrm_ctx->ctx_alg;
    a1fc:	80 01 00 14 	lwz     r0,20(r1)
    a200:	7c 0b 03 78 	mr      r11,r0
    a204:	88 0b 00 01 	lbz     r0,1(r11)
    a208:	54 09 06 3e 	clrlwi  r9,r0,24
    a20c:	80 01 00 28 	lwz     r0,40(r1)
    a210:	7c 0a 03 78 	mr      r10,r0
    a214:	99 2a 00 04 	stb     r9,4(r10)
		sec_ctx->sadb_x_ctx_len = xfrm_ctx->ctx_len;
    a218:	80 01 00 14 	lwz     r0,20(r1)
    a21c:	7c 0b 03 78 	mr      r11,r0
    a220:	a0 0b 00 02 	lhz     r0,2(r11)
    a224:	54 09 04 3e 	clrlwi  r9,r0,16
    a228:	80 01 00 28 	lwz     r0,40(r1)
    a22c:	7c 0a 03 78 	mr      r10,r0
    a230:	b1 2a 00 06 	sth     r9,6(r10)
		memcpy(sec_ctx + 1, xfrm_ctx->ctx_str,
    a234:	80 01 00 28 	lwz     r0,40(r1)
    a238:	31 60 00 08 	addic   r11,r0,8
    a23c:	80 01 00 14 	lwz     r0,20(r1)
    a240:	31 20 00 08 	addic   r9,r0,8
		       xfrm_ctx->ctx_len);
    a244:	80 01 00 14 	lwz     r0,20(r1)
    a248:	7c 0a 03 78 	mr      r10,r0
    a24c:	a0 0a 00 02 	lhz     r0,2(r10)
    a250:	54 00 04 3e 	clrlwi  r0,r0,16
		  (sizeof(struct sadb_x_sec_ctx) + ctx_size) / sizeof(uint64_t);
		sec_ctx->sadb_x_sec_exttype = SADB_X_EXT_SEC_CTX;
		sec_ctx->sadb_x_ctx_doi = xfrm_ctx->ctx_doi;
		sec_ctx->sadb_x_ctx_alg = xfrm_ctx->ctx_alg;
		sec_ctx->sadb_x_ctx_len = xfrm_ctx->ctx_len;
		memcpy(sec_ctx + 1, xfrm_ctx->ctx_str,
    a254:	7d 63 5b 78 	mr      r3,r11
    a258:	7d 24 4b 78 	mr      r4,r9
    a25c:	7c 05 03 78 	mr      r5,r0
    a260:	48 00 00 01 	bl      a260 <pfkey_send_acquire+0x54c>
    a264:	80 01 00 38 	lwz     r0,56(r1)
    a268:	90 01 00 34 	stw     r0,52(r1)
    a26c:	3c 00 00 00 	lis     r0,0
    a270:	30 00 00 00 	addic   r0,r0,0
		       xfrm_ctx->ctx_len);
	}

	return pfkey_broadcast(skb, GFP_ATOMIC, BROADCAST_REGISTERED, NULL, xs_net(x));
    a274:	80 61 00 18 	lwz     r3,24(r1)
    a278:	38 80 00 20 	li      r4,32
    a27c:	38 a0 00 02 	li      r5,2
    a280:	38 c0 00 00 	li      r6,0
    a284:	7c 07 03 78 	mr      r7,r0
    a288:	4b ff 6a c5 	bl      d4c <pfkey_broadcast>
    a28c:	7c 60 1b 78 	mr      r0,r3
}
    a290:	7c 03 03 78 	mr      r3,r0
    a294:	80 01 00 54 	lwz     r0,84(r1)
    a298:	7c 08 03 a6 	mtlr    r0
    a29c:	38 21 00 50 	addi    r1,r1,80
    a2a0:	4e 80 00 20 	blr

0000a2a4 <pfkey_compile_policy>:

static struct xfrm_policy *pfkey_compile_policy(struct sock *sk, int opt,
						u8 *data, int len, int *dir)
{
    a2a4:	94 21 ff 90 	stwu    r1,-112(r1)
    a2a8:	7c 08 02 a6 	mflr    r0
    a2ac:	90 01 00 74 	stw     r0,116(r1)
    a2b0:	90 61 00 58 	stw     r3,88(r1)
    a2b4:	90 81 00 5c 	stw     r4,92(r1)
    a2b8:	90 a1 00 60 	stw     r5,96(r1)
    a2bc:	90 c1 00 64 	stw     r6,100(r1)
    a2c0:	90 e1 00 68 	stw     r7,104(r1)
    a2c4:	80 01 00 58 	lwz     r0,88(r1)
    a2c8:	90 01 00 48 	stw     r0,72(r1)
    a2cc:	3c 00 00 00 	lis     r0,0
    a2d0:	30 00 00 00 	addic   r0,r0,0
	struct net *net = sock_net(sk);
    a2d4:	90 01 00 08 	stw     r0,8(r1)
	struct xfrm_policy *xp;
	struct sadb_x_policy *pol = (struct sadb_x_policy*)data;
    a2d8:	80 01 00 60 	lwz     r0,96(r1)
    a2dc:	90 01 00 0c 	stw     r0,12(r1)
	struct sadb_x_sec_ctx *sec_ctx;

	switch (sk->sk_family) {
    a2e0:	80 01 00 58 	lwz     r0,88(r1)
    a2e4:	7c 09 03 78 	mr      r9,r0
    a2e8:	a0 09 00 0c 	lhz     r0,12(r9)
    a2ec:	54 00 04 3e 	clrlwi  r0,r0,16
    a2f0:	2f 80 00 02 	cmpwi   cr7,r0,2
    a2f4:	41 9e 00 10 	beq-    cr7,a304 <pfkey_compile_policy+0x60>
    a2f8:	2f 80 00 0a 	cmpwi   cr7,r0,10
    a2fc:	41 9e 00 2c 	beq-    cr7,a328 <pfkey_compile_policy+0x84>
    a300:	48 00 00 4c 	b       a34c <pfkey_compile_policy+0xa8>
	case AF_INET:
		if (opt != IP_IPSEC_POLICY) {
    a304:	80 01 00 5c 	lwz     r0,92(r1)
    a308:	2f 80 00 10 	cmpwi   cr7,r0,16
    a30c:	41 9e 00 58 	beq-    cr7,a364 <pfkey_compile_policy+0xc0>
			*dir = -EOPNOTSUPP;
    a310:	80 01 00 68 	lwz     r0,104(r1)
    a314:	39 20 ff a1 	li      r9,-95
    a318:	7c 0a 03 78 	mr      r10,r0
    a31c:	91 2a 00 00 	stw     r9,0(r10)
			return NULL;
    a320:	38 00 00 00 	li      r0,0
    a324:	48 00 05 34 	b       a858 <pfkey_compile_policy+0x5b4>
		}
		break;
#if defined(CONFIG_IPV6) || defined(CONFIG_IPV6_MODULE)
	case AF_INET6:
		if (opt != IPV6_IPSEC_POLICY) {
    a328:	80 01 00 5c 	lwz     r0,92(r1)
    a32c:	2f 80 00 22 	cmpwi   cr7,r0,34
    a330:	41 9e 00 3c 	beq-    cr7,a36c <pfkey_compile_policy+0xc8>
			*dir = -EOPNOTSUPP;
    a334:	80 01 00 68 	lwz     r0,104(r1)
    a338:	39 20 ff a1 	li      r9,-95
    a33c:	7c 0b 03 78 	mr      r11,r0
    a340:	91 2b 00 00 	stw     r9,0(r11)
			return NULL;
    a344:	38 00 00 00 	li      r0,0
    a348:	48 00 05 10 	b       a858 <pfkey_compile_policy+0x5b4>
		}
		break;
#endif
	default:
		*dir = -EINVAL;
    a34c:	80 01 00 68 	lwz     r0,104(r1)
    a350:	39 20 ff ea 	li      r9,-22
    a354:	7c 0a 03 78 	mr      r10,r0
    a358:	91 2a 00 00 	stw     r9,0(r10)
		return NULL;
    a35c:	38 00 00 00 	li      r0,0
    a360:	48 00 04 f8 	b       a858 <pfkey_compile_policy+0x5b4>
	case AF_INET:
		if (opt != IP_IPSEC_POLICY) {
			*dir = -EOPNOTSUPP;
			return NULL;
		}
		break;
    a364:	60 00 00 00 	nop
    a368:	48 00 00 08 	b       a370 <pfkey_compile_policy+0xcc>
	case AF_INET6:
		if (opt != IPV6_IPSEC_POLICY) {
			*dir = -EOPNOTSUPP;
			return NULL;
		}
		break;
    a36c:	60 00 00 00 	nop
	default:
		*dir = -EINVAL;
		return NULL;
	}

	*dir = -EINVAL;
    a370:	80 01 00 68 	lwz     r0,104(r1)
    a374:	39 20 ff ea 	li      r9,-22
    a378:	7c 0b 03 78 	mr      r11,r0
    a37c:	91 2b 00 00 	stw     r9,0(r11)

	if (len < sizeof(struct sadb_x_policy) ||
    a380:	80 01 00 64 	lwz     r0,100(r1)
    a384:	2b 80 00 0f 	cmplwi  cr7,r0,15
    a388:	40 9d 00 6c 	ble-    cr7,a3f4 <pfkey_compile_policy+0x150>
	    pol->sadb_x_policy_len*8 > len ||
    a38c:	80 01 00 0c 	lwz     r0,12(r1)
    a390:	7c 09 03 78 	mr      r9,r0
    a394:	a0 09 00 00 	lhz     r0,0(r9)
    a398:	54 00 04 3e 	clrlwi  r0,r0,16
    a39c:	54 09 18 38 	rlwinm  r9,r0,3,0,28
		return NULL;
	}

	*dir = -EINVAL;

	if (len < sizeof(struct sadb_x_policy) ||
    a3a0:	80 01 00 64 	lwz     r0,100(r1)
    a3a4:	7f 89 00 00 	cmpw    cr7,r9,r0
    a3a8:	41 9d 00 4c 	bgt-    cr7,a3f4 <pfkey_compile_policy+0x150>
	    pol->sadb_x_policy_len*8 > len ||
	    pol->sadb_x_policy_type > IPSEC_POLICY_BYPASS ||
    a3ac:	80 01 00 0c 	lwz     r0,12(r1)
    a3b0:	7c 0a 03 78 	mr      r10,r0
    a3b4:	a0 0a 00 04 	lhz     r0,4(r10)
    a3b8:	54 00 04 3e 	clrlwi  r0,r0,16
	}

	*dir = -EINVAL;

	if (len < sizeof(struct sadb_x_policy) ||
	    pol->sadb_x_policy_len*8 > len ||
    a3bc:	2b 80 00 04 	cmplwi  cr7,r0,4
    a3c0:	41 9d 00 34 	bgt-    cr7,a3f4 <pfkey_compile_policy+0x150>
	    pol->sadb_x_policy_type > IPSEC_POLICY_BYPASS ||
	    (!pol->sadb_x_policy_dir || pol->sadb_x_policy_dir > IPSEC_DIR_OUTBOUND))
    a3c4:	80 01 00 0c 	lwz     r0,12(r1)
    a3c8:	7c 0b 03 78 	mr      r11,r0
    a3cc:	88 0b 00 06 	lbz     r0,6(r11)
    a3d0:	54 00 06 3e 	clrlwi  r0,r0,24

	*dir = -EINVAL;

	if (len < sizeof(struct sadb_x_policy) ||
	    pol->sadb_x_policy_len*8 > len ||
	    pol->sadb_x_policy_type > IPSEC_POLICY_BYPASS ||
    a3d4:	2f 80 00 00 	cmpwi   cr7,r0,0
    a3d8:	41 9e 00 1c 	beq-    cr7,a3f4 <pfkey_compile_policy+0x150>
	    (!pol->sadb_x_policy_dir || pol->sadb_x_policy_dir > IPSEC_DIR_OUTBOUND))
    a3dc:	80 01 00 0c 	lwz     r0,12(r1)
    a3e0:	7c 09 03 78 	mr      r9,r0
    a3e4:	88 09 00 06 	lbz     r0,6(r9)
    a3e8:	54 00 06 3e 	clrlwi  r0,r0,24
    a3ec:	2b 80 00 02 	cmplwi  cr7,r0,2
    a3f0:	40 9d 00 0c 	ble-    cr7,a3fc <pfkey_compile_policy+0x158>
		return NULL;
    a3f4:	38 00 00 00 	li      r0,0
    a3f8:	48 00 04 60 	b       a858 <pfkey_compile_policy+0x5b4>

	xp = xfrm_policy_alloc(net, GFP_ATOMIC);
    a3fc:	80 61 00 08 	lwz     r3,8(r1)
    a400:	38 80 00 20 	li      r4,32
    a404:	48 00 00 01 	bl      a404 <pfkey_compile_policy+0x160>
    a408:	90 61 00 10 	stw     r3,16(r1)
	if (xp == NULL) {
    a40c:	80 01 00 10 	lwz     r0,16(r1)
    a410:	2f 80 00 00 	cmpwi   cr7,r0,0
    a414:	40 9e 00 1c 	bne-    cr7,a430 <pfkey_compile_policy+0x18c>
		*dir = -ENOBUFS;
    a418:	80 01 00 68 	lwz     r0,104(r1)
    a41c:	39 20 ff 97 	li      r9,-105
    a420:	7c 0a 03 78 	mr      r10,r0
    a424:	91 2a 00 00 	stw     r9,0(r10)
		return NULL;
    a428:	38 00 00 00 	li      r0,0
    a42c:	48 00 04 2c 	b       a858 <pfkey_compile_policy+0x5b4>
	}

	xp->action = (pol->sadb_x_policy_type == IPSEC_POLICY_DISCARD ?
    a430:	80 01 00 0c 	lwz     r0,12(r1)
    a434:	7c 0b 03 78 	mr      r11,r0
    a438:	a0 0b 00 04 	lhz     r0,4(r11)
    a43c:	54 00 04 3e 	clrlwi  r0,r0,16
		      XFRM_POLICY_BLOCK : XFRM_POLICY_ALLOW);
    a440:	2f 80 00 00 	cmpwi   cr7,r0,0
    a444:	7c 00 00 26 	mfcr    r0
    a448:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
    a44c:	54 09 06 3e 	clrlwi  r9,r0,24
	if (xp == NULL) {
		*dir = -ENOBUFS;
		return NULL;
	}

	xp->action = (pol->sadb_x_policy_type == IPSEC_POLICY_DISCARD ?
    a450:	80 01 00 10 	lwz     r0,16(r1)
    a454:	7c 0a 03 78 	mr      r10,r0
    a458:	99 2a 00 ed 	stb     r9,237(r10)
		      XFRM_POLICY_BLOCK : XFRM_POLICY_ALLOW);

	xp->lft.soft_byte_limit = XFRM_INF;
    a45c:	80 01 00 10 	lwz     r0,16(r1)
    a460:	39 20 ff ff 	li      r9,-1
    a464:	39 40 ff ff 	li      r10,-1
    a468:	7c 0b 03 78 	mr      r11,r0
    a46c:	39 6b 00 80 	addi    r11,r11,128
    a470:	91 2b 00 00 	stw     r9,0(r11)
    a474:	91 4b 00 04 	stw     r10,4(r11)
	xp->lft.hard_byte_limit = XFRM_INF;
    a478:	80 01 00 10 	lwz     r0,16(r1)
    a47c:	39 20 ff ff 	li      r9,-1
    a480:	39 40 ff ff 	li      r10,-1
    a484:	7c 0b 03 78 	mr      r11,r0
    a488:	39 6b 00 88 	addi    r11,r11,136
    a48c:	91 2b 00 00 	stw     r9,0(r11)
    a490:	91 4b 00 04 	stw     r10,4(r11)
	xp->lft.soft_packet_limit = XFRM_INF;
    a494:	80 01 00 10 	lwz     r0,16(r1)
    a498:	39 20 ff ff 	li      r9,-1
    a49c:	39 40 ff ff 	li      r10,-1
    a4a0:	7c 0b 03 78 	mr      r11,r0
    a4a4:	39 6b 00 90 	addi    r11,r11,144
    a4a8:	91 2b 00 00 	stw     r9,0(r11)
    a4ac:	91 4b 00 04 	stw     r10,4(r11)
	xp->lft.hard_packet_limit = XFRM_INF;
    a4b0:	80 01 00 10 	lwz     r0,16(r1)
    a4b4:	39 20 ff ff 	li      r9,-1
    a4b8:	39 40 ff ff 	li      r10,-1
    a4bc:	7c 0b 03 78 	mr      r11,r0
    a4c0:	39 6b 00 98 	addi    r11,r11,152
    a4c4:	91 2b 00 00 	stw     r9,0(r11)
    a4c8:	91 4b 00 04 	stw     r10,4(r11)
	xp->family = sk->sk_family;
    a4cc:	80 01 00 58 	lwz     r0,88(r1)
    a4d0:	7c 09 03 78 	mr      r9,r0
    a4d4:	a0 09 00 0c 	lhz     r0,12(r9)
    a4d8:	54 09 04 3e 	clrlwi  r9,r0,16
    a4dc:	80 01 00 10 	lwz     r0,16(r1)
    a4e0:	7c 0a 03 78 	mr      r10,r0
    a4e4:	b1 2a 00 f0 	sth     r9,240(r10)

	xp->xfrm_nr = 0;
    a4e8:	80 01 00 10 	lwz     r0,16(r1)
    a4ec:	39 20 00 00 	li      r9,0
    a4f0:	7c 0b 03 78 	mr      r11,r0
    a4f4:	99 2b 00 ef 	stb     r9,239(r11)
	if (pol->sadb_x_policy_type == IPSEC_POLICY_IPSEC &&
    a4f8:	80 01 00 0c 	lwz     r0,12(r1)
    a4fc:	7c 09 03 78 	mr      r9,r0
    a500:	a0 09 00 04 	lhz     r0,4(r9)
    a504:	54 00 04 3e 	clrlwi  r0,r0,16
    a508:	2f 80 00 02 	cmpwi   cr7,r0,2
    a50c:	40 9e 00 34 	bne-    cr7,a540 <pfkey_compile_policy+0x29c>
	    (*dir = parse_ipsecrequests(xp, pol)) < 0)
    a510:	80 61 00 10 	lwz     r3,16(r1)
    a514:	80 81 00 0c 	lwz     r4,12(r1)
    a518:	4b ff bd e9 	bl      6300 <parse_ipsecrequests>
    a51c:	7c 69 1b 78 	mr      r9,r3
    a520:	80 01 00 68 	lwz     r0,104(r1)
    a524:	7c 0a 03 78 	mr      r10,r0
    a528:	91 2a 00 00 	stw     r9,0(r10)
    a52c:	80 01 00 68 	lwz     r0,104(r1)
    a530:	7c 0b 03 78 	mr      r11,r0
    a534:	80 0b 00 00 	lwz     r0,0(r11)
	xp->lft.soft_packet_limit = XFRM_INF;
	xp->lft.hard_packet_limit = XFRM_INF;
	xp->family = sk->sk_family;

	xp->xfrm_nr = 0;
	if (pol->sadb_x_policy_type == IPSEC_POLICY_IPSEC &&
    a538:	2f 80 00 00 	cmpwi   cr7,r0,0
    a53c:	41 9c 02 ec 	blt-    cr7,a828 <pfkey_compile_policy+0x584>
	    (*dir = parse_ipsecrequests(xp, pol)) < 0)
		goto out;

	/* security context too */
	if (len >= (pol->sadb_x_policy_len*8 +
    a540:	81 21 00 64 	lwz     r9,100(r1)
    a544:	80 01 00 0c 	lwz     r0,12(r1)
    a548:	7c 0a 03 78 	mr      r10,r0
    a54c:	a0 0a 00 00 	lhz     r0,0(r10)
    a550:	54 00 04 3e 	clrlwi  r0,r0,16
    a554:	30 00 00 01 	addic   r0,r0,1
    a558:	54 00 18 38 	rlwinm  r0,r0,3,0,28
    a55c:	7f 89 00 40 	cmplw   cr7,r9,r0
    a560:	41 9c 02 a0 	blt-    cr7,a800 <pfkey_compile_policy+0x55c>
	    sizeof(struct sadb_x_sec_ctx))) {
		char *p = (char *)pol;
    a564:	80 01 00 0c 	lwz     r0,12(r1)
    a568:	90 01 00 14 	stw     r0,20(r1)
		struct xfrm_user_sec_ctx *uctx;

		p += pol->sadb_x_policy_len*8;
    a56c:	80 01 00 0c 	lwz     r0,12(r1)
    a570:	7c 0b 03 78 	mr      r11,r0
    a574:	a0 0b 00 00 	lhz     r0,0(r11)
    a578:	54 00 04 3e 	clrlwi  r0,r0,16
    a57c:	54 00 18 38 	rlwinm  r0,r0,3,0,28
    a580:	81 21 00 14 	lwz     r9,20(r1)
    a584:	7c 09 02 14 	add     r0,r9,r0
    a588:	90 01 00 14 	stw     r0,20(r1)
		sec_ctx = (struct sadb_x_sec_ctx *)p;
    a58c:	80 01 00 14 	lwz     r0,20(r1)
    a590:	90 01 00 18 	stw     r0,24(r1)
		if (len < pol->sadb_x_policy_len*8 +
    a594:	80 01 00 0c 	lwz     r0,12(r1)
    a598:	7c 09 03 78 	mr      r9,r0
    a59c:	a0 09 00 00 	lhz     r0,0(r9)
    a5a0:	54 00 04 3e 	clrlwi  r0,r0,16
    a5a4:	54 09 18 38 	rlwinm  r9,r0,3,0,28
		    sec_ctx->sadb_x_sec_len) {
    a5a8:	80 01 00 18 	lwz     r0,24(r1)
    a5ac:	7c 0a 03 78 	mr      r10,r0
    a5b0:	a0 0a 00 00 	lhz     r0,0(r10)
    a5b4:	54 00 04 3e 	clrlwi  r0,r0,16
		char *p = (char *)pol;
		struct xfrm_user_sec_ctx *uctx;

		p += pol->sadb_x_policy_len*8;
		sec_ctx = (struct sadb_x_sec_ctx *)p;
		if (len < pol->sadb_x_policy_len*8 +
    a5b8:	7d 29 02 14 	add     r9,r9,r0
    a5bc:	80 01 00 64 	lwz     r0,100(r1)
    a5c0:	7f 89 00 00 	cmpw    cr7,r9,r0
    a5c4:	40 9d 00 18 	ble-    cr7,a5dc <pfkey_compile_policy+0x338>
		    sec_ctx->sadb_x_sec_len) {
			*dir = -EINVAL;
    a5c8:	80 01 00 68 	lwz     r0,104(r1)
    a5cc:	39 20 ff ea 	li      r9,-22
    a5d0:	7c 0b 03 78 	mr      r11,r0
    a5d4:	91 2b 00 00 	stw     r9,0(r11)
			goto out;
    a5d8:	48 00 02 64 	b       a83c <pfkey_compile_policy+0x598>
    a5dc:	80 01 00 14 	lwz     r0,20(r1)
    a5e0:	90 01 00 20 	stw     r0,32(r1)
			    sizeof(uint64_t));
}

static inline int verify_sec_ctx_len(void *p)
{
	struct sadb_x_sec_ctx *sec_ctx = (struct sadb_x_sec_ctx *)p;
    a5e4:	80 01 00 20 	lwz     r0,32(r1)
    a5e8:	90 01 00 24 	stw     r0,36(r1)
	int len = sec_ctx->sadb_x_ctx_len;
    a5ec:	80 01 00 24 	lwz     r0,36(r1)
    a5f0:	7c 09 03 78 	mr      r9,r0
    a5f4:	a0 09 00 06 	lhz     r0,6(r9)
    a5f8:	54 00 04 3e 	clrlwi  r0,r0,16
    a5fc:	90 01 00 28 	stw     r0,40(r1)

	if (len > PAGE_SIZE)
    a600:	80 01 00 28 	lwz     r0,40(r1)
    a604:	2b 80 10 00 	cmplwi  cr7,r0,4096
    a608:	40 9d 00 0c 	ble-    cr7,a614 <pfkey_compile_policy+0x370>
		return -EINVAL;
    a60c:	38 00 ff ea 	li      r0,-22
    a610:	48 00 00 50 	b       a660 <pfkey_compile_policy+0x3bc>
    a614:	80 01 00 24 	lwz     r0,36(r1)
    a618:	90 01 00 2c 	stw     r0,44(r1)
	return 0;
}

static inline int pfkey_sec_ctx_len(struct sadb_x_sec_ctx *sec_ctx)
{
	return DIV_ROUND_UP(sizeof(struct sadb_x_sec_ctx) +
    a61c:	80 01 00 2c 	lwz     r0,44(r1)
    a620:	7c 0a 03 78 	mr      r10,r0
    a624:	a0 0a 00 06 	lhz     r0,6(r10)
    a628:	54 00 04 3e 	clrlwi  r0,r0,16
    a62c:	30 00 00 0f 	addic   r0,r0,15
    a630:	54 00 e8 fe 	rlwinm  r0,r0,29,3,31
	int len = sec_ctx->sadb_x_ctx_len;

	if (len > PAGE_SIZE)
		return -EINVAL;

	len = pfkey_sec_ctx_len(sec_ctx);
    a634:	90 01 00 28 	stw     r0,40(r1)

	if (sec_ctx->sadb_x_sec_len != len)
    a638:	80 01 00 24 	lwz     r0,36(r1)
    a63c:	7c 0b 03 78 	mr      r11,r0
    a640:	a0 0b 00 00 	lhz     r0,0(r11)
    a644:	54 00 04 3e 	clrlwi  r0,r0,16
    a648:	81 21 00 28 	lwz     r9,40(r1)
    a64c:	7f 89 00 00 	cmpw    cr7,r9,r0
    a650:	41 9e 00 0c 	beq-    cr7,a65c <pfkey_compile_policy+0x3b8>
		return -EINVAL;
    a654:	38 00 ff ea 	li      r0,-22
    a658:	48 00 00 08 	b       a660 <pfkey_compile_policy+0x3bc>

	return 0;
    a65c:	38 00 00 00 	li      r0,0
		if (len < pol->sadb_x_policy_len*8 +
		    sec_ctx->sadb_x_sec_len) {
			*dir = -EINVAL;
			goto out;
		}
		if ((*dir = verify_sec_ctx_len(p)))
    a660:	7c 09 03 78 	mr      r9,r0
    a664:	80 01 00 68 	lwz     r0,104(r1)
    a668:	7c 0a 03 78 	mr      r10,r0
    a66c:	91 2a 00 00 	stw     r9,0(r10)
    a670:	80 01 00 68 	lwz     r0,104(r1)
    a674:	7c 0b 03 78 	mr      r11,r0
    a678:	80 0b 00 00 	lwz     r0,0(r11)
    a67c:	2f 80 00 00 	cmpwi   cr7,r0,0
    a680:	40 9e 01 b0 	bne-    cr7,a830 <pfkey_compile_policy+0x58c>
			goto out;
    a684:	80 01 00 18 	lwz     r0,24(r1)
    a688:	90 01 00 30 	stw     r0,48(r1)
	return 0;
}

static inline struct xfrm_user_sec_ctx *pfkey_sadb2xfrm_user_sec_ctx(struct sadb_x_sec_ctx *sec_ctx)
{
	struct xfrm_user_sec_ctx *uctx = NULL;
    a68c:	38 00 00 00 	li      r0,0
    a690:	90 01 00 34 	stw     r0,52(r1)
	int ctx_size = sec_ctx->sadb_x_ctx_len;
    a694:	80 01 00 30 	lwz     r0,48(r1)
    a698:	7c 09 03 78 	mr      r9,r0
    a69c:	a0 09 00 06 	lhz     r0,6(r9)
    a6a0:	54 00 04 3e 	clrlwi  r0,r0,16
    a6a4:	90 01 00 38 	stw     r0,56(r1)

	uctx = kmalloc((sizeof(*uctx)+ctx_size), GFP_KERNEL);
    a6a8:	80 01 00 38 	lwz     r0,56(r1)
    a6ac:	30 00 00 08 	addic   r0,r0,8
    a6b0:	90 01 00 3c 	stw     r0,60(r1)
    a6b4:	38 00 00 d0 	li      r0,208
    a6b8:	90 01 00 40 	stw     r0,64(r1)
    a6bc:	80 61 00 3c 	lwz     r3,60(r1)
    a6c0:	80 81 00 40 	lwz     r4,64(r1)
    a6c4:	48 00 00 01 	bl      a6c4 <pfkey_compile_policy+0x420>
    a6c8:	7c 60 1b 78 	mr      r0,r3
    a6cc:	90 01 00 34 	stw     r0,52(r1)

	if (!uctx)
    a6d0:	80 01 00 34 	lwz     r0,52(r1)
    a6d4:	2f 80 00 00 	cmpwi   cr7,r0,0
    a6d8:	40 9e 00 0c 	bne-    cr7,a6e4 <pfkey_compile_policy+0x440>
		return NULL;
    a6dc:	38 00 00 00 	li      r0,0
    a6e0:	48 00 00 d8 	b       a7b8 <pfkey_compile_policy+0x514>
    a6e4:	80 01 00 30 	lwz     r0,48(r1)
    a6e8:	90 01 00 44 	stw     r0,68(r1)
	return 0;
}

static inline int pfkey_sec_ctx_len(struct sadb_x_sec_ctx *sec_ctx)
{
	return DIV_ROUND_UP(sizeof(struct sadb_x_sec_ctx) +
    a6ec:	80 01 00 44 	lwz     r0,68(r1)
    a6f0:	7c 0a 03 78 	mr      r10,r0
    a6f4:	a0 0a 00 06 	lhz     r0,6(r10)
    a6f8:	54 00 04 3e 	clrlwi  r0,r0,16
    a6fc:	30 00 00 0f 	addic   r0,r0,15
    a700:	54 00 e8 fe 	rlwinm  r0,r0,29,3,31
	uctx = kmalloc((sizeof(*uctx)+ctx_size), GFP_KERNEL);

	if (!uctx)
		return NULL;

	uctx->len = pfkey_sec_ctx_len(sec_ctx);
    a704:	54 09 04 3e 	clrlwi  r9,r0,16
    a708:	80 01 00 34 	lwz     r0,52(r1)
    a70c:	7c 0b 03 78 	mr      r11,r0
    a710:	b1 2b 00 00 	sth     r9,0(r11)
	uctx->exttype = sec_ctx->sadb_x_sec_exttype;
    a714:	80 01 00 30 	lwz     r0,48(r1)
    a718:	7c 09 03 78 	mr      r9,r0
    a71c:	a0 09 00 02 	lhz     r0,2(r9)
    a720:	54 09 04 3e 	clrlwi  r9,r0,16
    a724:	80 01 00 34 	lwz     r0,52(r1)
    a728:	7c 0a 03 78 	mr      r10,r0
    a72c:	b1 2a 00 02 	sth     r9,2(r10)
	uctx->ctx_doi = sec_ctx->sadb_x_ctx_doi;
    a730:	80 01 00 30 	lwz     r0,48(r1)
    a734:	7c 0b 03 78 	mr      r11,r0
    a738:	88 0b 00 05 	lbz     r0,5(r11)
    a73c:	54 09 06 3e 	clrlwi  r9,r0,24
    a740:	80 01 00 34 	lwz     r0,52(r1)
    a744:	7c 0a 03 78 	mr      r10,r0
    a748:	99 2a 00 05 	stb     r9,5(r10)
	uctx->ctx_alg = sec_ctx->sadb_x_ctx_alg;
    a74c:	80 01 00 30 	lwz     r0,48(r1)
    a750:	7c 0b 03 78 	mr      r11,r0
    a754:	88 0b 00 04 	lbz     r0,4(r11)
    a758:	54 09 06 3e 	clrlwi  r9,r0,24
    a75c:	80 01 00 34 	lwz     r0,52(r1)
    a760:	7c 0a 03 78 	mr      r10,r0
    a764:	99 2a 00 04 	stb     r9,4(r10)
	uctx->ctx_len = sec_ctx->sadb_x_ctx_len;
    a768:	80 01 00 30 	lwz     r0,48(r1)
    a76c:	7c 0b 03 78 	mr      r11,r0
    a770:	a0 0b 00 06 	lhz     r0,6(r11)
    a774:	54 09 04 3e 	clrlwi  r9,r0,16
    a778:	80 01 00 34 	lwz     r0,52(r1)
    a77c:	7c 0a 03 78 	mr      r10,r0
    a780:	b1 2a 00 06 	sth     r9,6(r10)
	memcpy(uctx + 1, sec_ctx + 1,
    a784:	80 01 00 34 	lwz     r0,52(r1)
    a788:	31 60 00 08 	addic   r11,r0,8
    a78c:	80 01 00 30 	lwz     r0,48(r1)
    a790:	31 20 00 08 	addic   r9,r0,8
	       uctx->ctx_len);
    a794:	80 01 00 34 	lwz     r0,52(r1)
    a798:	7c 0a 03 78 	mr      r10,r0
    a79c:	a0 0a 00 06 	lhz     r0,6(r10)
    a7a0:	54 00 04 3e 	clrlwi  r0,r0,16
	uctx->len = pfkey_sec_ctx_len(sec_ctx);
	uctx->exttype = sec_ctx->sadb_x_sec_exttype;
	uctx->ctx_doi = sec_ctx->sadb_x_ctx_doi;
	uctx->ctx_alg = sec_ctx->sadb_x_ctx_alg;
	uctx->ctx_len = sec_ctx->sadb_x_ctx_len;
	memcpy(uctx + 1, sec_ctx + 1,
    a7a4:	7d 63 5b 78 	mr      r3,r11
    a7a8:	7d 24 4b 78 	mr      r4,r9
    a7ac:	7c 05 03 78 	mr      r5,r0
    a7b0:	48 00 00 01 	bl      a7b0 <pfkey_compile_policy+0x50c>
	       uctx->ctx_len);

	return uctx;
    a7b4:	80 01 00 34 	lwz     r0,52(r1)
			*dir = -EINVAL;
			goto out;
		}
		if ((*dir = verify_sec_ctx_len(p)))
			goto out;
		uctx = pfkey_sadb2xfrm_user_sec_ctx(sec_ctx);
    a7b8:	90 01 00 1c 	stw     r0,28(r1)
		*dir = security_xfrm_policy_alloc(&xp->security, uctx);
    a7bc:	80 01 00 10 	lwz     r0,16(r1)
    a7c0:	30 00 00 f4 	addic   r0,r0,244
    a7c4:	90 01 00 4c 	stw     r0,76(r1)
    a7c8:	80 01 00 1c 	lwz     r0,28(r1)
    a7cc:	90 01 00 50 	stw     r0,80(r1)
    a7d0:	38 00 00 00 	li      r0,0
    a7d4:	7c 09 03 78 	mr      r9,r0
    a7d8:	80 01 00 68 	lwz     r0,104(r1)
    a7dc:	7c 0b 03 78 	mr      r11,r0
    a7e0:	91 2b 00 00 	stw     r9,0(r11)
		kfree(uctx);
    a7e4:	80 61 00 1c 	lwz     r3,28(r1)
    a7e8:	48 00 00 01 	bl      a7e8 <pfkey_compile_policy+0x544>

		if (*dir)
    a7ec:	80 01 00 68 	lwz     r0,104(r1)
    a7f0:	7c 09 03 78 	mr      r9,r0
    a7f4:	80 09 00 00 	lwz     r0,0(r9)
    a7f8:	2f 80 00 00 	cmpwi   cr7,r0,0
    a7fc:	40 9e 00 3c 	bne-    cr7,a838 <pfkey_compile_policy+0x594>
			goto out;
	}

	*dir = pol->sadb_x_policy_dir-1;
    a800:	80 01 00 0c 	lwz     r0,12(r1)
    a804:	7c 0a 03 78 	mr      r10,r0
    a808:	88 0a 00 06 	lbz     r0,6(r10)
    a80c:	54 00 06 3e 	clrlwi  r0,r0,24
    a810:	31 20 ff ff 	addic   r9,r0,-1
    a814:	80 01 00 68 	lwz     r0,104(r1)
    a818:	7c 0b 03 78 	mr      r11,r0
    a81c:	91 2b 00 00 	stw     r9,0(r11)
	return xp;
    a820:	80 01 00 10 	lwz     r0,16(r1)
    a824:	48 00 00 34 	b       a858 <pfkey_compile_policy+0x5b4>
	xp->family = sk->sk_family;

	xp->xfrm_nr = 0;
	if (pol->sadb_x_policy_type == IPSEC_POLICY_IPSEC &&
	    (*dir = parse_ipsecrequests(xp, pol)) < 0)
		goto out;
    a828:	60 00 00 00 	nop
    a82c:	48 00 00 10 	b       a83c <pfkey_compile_policy+0x598>
		    sec_ctx->sadb_x_sec_len) {
			*dir = -EINVAL;
			goto out;
		}
		if ((*dir = verify_sec_ctx_len(p)))
			goto out;
    a830:	60 00 00 00 	nop
    a834:	48 00 00 08 	b       a83c <pfkey_compile_policy+0x598>
		uctx = pfkey_sadb2xfrm_user_sec_ctx(sec_ctx);
		*dir = security_xfrm_policy_alloc(&xp->security, uctx);
		kfree(uctx);

		if (*dir)
			goto out;
    a838:	60 00 00 00 	nop

	*dir = pol->sadb_x_policy_dir-1;
	return xp;

out:
	xp->walk.dead = 1;
    a83c:	80 01 00 10 	lwz     r0,16(r1)
    a840:	39 20 00 01 	li      r9,1
    a844:	7c 0a 03 78 	mr      r10,r0
    a848:	99 2a 00 e8 	stb     r9,232(r10)
	xfrm_policy_destroy(xp);
    a84c:	80 61 00 10 	lwz     r3,16(r1)
    a850:	48 00 00 01 	bl      a850 <pfkey_compile_policy+0x5ac>
	return NULL;
    a854:	38 00 00 00 	li      r0,0
}
    a858:	7c 03 03 78 	mr      r3,r0
    a85c:	80 01 00 74 	lwz     r0,116(r1)
    a860:	7c 08 03 a6 	mtlr    r0
    a864:	38 21 00 70 	addi    r1,r1,112
    a868:	4e 80 00 20 	blr

0000a86c <pfkey_send_new_mapping>:

static int pfkey_send_new_mapping(struct xfrm_state *x, xfrm_address_t *ipaddr, __be16 sport)
{
    a86c:	94 21 ff b0 	stwu    r1,-80(r1)
    a870:	7c 08 02 a6 	mflr    r0
    a874:	90 01 00 54 	stw     r0,84(r1)
    a878:	90 61 00 38 	stw     r3,56(r1)
    a87c:	90 81 00 3c 	stw     r4,60(r1)
    a880:	7c a0 2b 78 	mr      r0,r5
    a884:	b0 01 00 40 	sth     r0,64(r1)
	struct sadb_sa *sa;
	struct sadb_address *addr;
	struct sadb_x_nat_t_port *n_port;
	int sockaddr_size;
	int size;
	__u8 satype = (x->id.proto == IPPROTO_ESP ? SADB_SATYPE_ESP : 0);
    a888:	80 01 00 38 	lwz     r0,56(r1)
    a88c:	7c 09 03 78 	mr      r9,r0
    a890:	88 09 00 30 	lbz     r0,48(r9)
    a894:	54 00 06 3e 	clrlwi  r0,r0,24
    a898:	2f 80 00 32 	cmpwi   cr7,r0,50
    a89c:	40 9e 00 0c 	bne-    cr7,a8a8 <pfkey_send_new_mapping+0x3c>
    a8a0:	38 00 00 03 	li      r0,3
    a8a4:	48 00 00 08 	b       a8ac <pfkey_send_new_mapping+0x40>
    a8a8:	38 00 00 00 	li      r0,0
    a8ac:	98 01 00 08 	stb     r0,8(r1)
	struct xfrm_encap_tmpl *natt = NULL;
    a8b0:	38 00 00 00 	li      r0,0
    a8b4:	90 01 00 0c 	stw     r0,12(r1)

	sockaddr_size = pfkey_sockaddr_size(x->props.family);
    a8b8:	80 01 00 38 	lwz     r0,56(r1)
    a8bc:	7c 0a 03 78 	mr      r10,r0
    a8c0:	a0 0a 00 96 	lhz     r0,150(r10)
    a8c4:	54 00 04 3e 	clrlwi  r0,r0,16
    a8c8:	7c 03 03 78 	mr      r3,r0
    a8cc:	4b ff 71 a9 	bl      1a74 <pfkey_sockaddr_size>
    a8d0:	90 61 00 10 	stw     r3,16(r1)
	if (!sockaddr_size)
    a8d4:	80 01 00 10 	lwz     r0,16(r1)
    a8d8:	2f 80 00 00 	cmpwi   cr7,r0,0
    a8dc:	40 9e 00 0c 	bne-    cr7,a8e8 <pfkey_send_new_mapping+0x7c>
		return -EINVAL;
    a8e0:	38 00 ff ea 	li      r0,-22
    a8e4:	48 00 04 48 	b       ad2c <pfkey_send_new_mapping+0x4c0>

	if (!satype)
    a8e8:	88 01 00 08 	lbz     r0,8(r1)
    a8ec:	54 00 06 3e 	clrlwi  r0,r0,24
    a8f0:	2f 80 00 00 	cmpwi   cr7,r0,0
    a8f4:	40 9e 00 0c 	bne-    cr7,a900 <pfkey_send_new_mapping+0x94>
		return -EINVAL;
    a8f8:	38 00 ff ea 	li      r0,-22
    a8fc:	48 00 04 30 	b       ad2c <pfkey_send_new_mapping+0x4c0>

	if (!x->encap)
    a900:	80 01 00 38 	lwz     r0,56(r1)
    a904:	7c 0b 03 78 	mr      r11,r0
    a908:	80 0b 01 00 	lwz     r0,256(r11)
    a90c:	2f 80 00 00 	cmpwi   cr7,r0,0
    a910:	40 9e 00 0c 	bne-    cr7,a91c <pfkey_send_new_mapping+0xb0>
		return -EINVAL;
    a914:	38 00 ff ea 	li      r0,-22
    a918:	48 00 04 14 	b       ad2c <pfkey_send_new_mapping+0x4c0>

	natt = x->encap;
    a91c:	80 01 00 38 	lwz     r0,56(r1)
    a920:	7c 09 03 78 	mr      r9,r0
    a924:	80 09 01 00 	lwz     r0,256(r9)
    a928:	90 01 00 0c 	stw     r0,12(r1)
	 * ADDRESS_DST (new addr) | NAT_T_DPORT (new port)
	 */

	size = sizeof(struct sadb_msg) +
		sizeof(struct sadb_sa) +
		(sizeof(struct sadb_address) * 2) +
    a92c:	80 01 00 10 	lwz     r0,16(r1)
		(sockaddr_size * 2) +
    a930:	30 00 00 20 	addic   r0,r0,32
    a934:	54 00 08 3c 	rlwinm  r0,r0,1,0,30
	 *
	 * HDR | SA | ADDRESS_SRC (old addr) | NAT_T_SPORT (old port) |
	 * ADDRESS_DST (new addr) | NAT_T_DPORT (new port)
	 */

	size = sizeof(struct sadb_msg) +
    a938:	90 01 00 14 	stw     r0,20(r1)
		sizeof(struct sadb_sa) +
		(sizeof(struct sadb_address) * 2) +
		(sockaddr_size * 2) +
		(sizeof(struct sadb_x_nat_t_port) * 2);

	skb =  alloc_skb(size + 16, GFP_ATOMIC);
    a93c:	80 01 00 14 	lwz     r0,20(r1)
    a940:	30 00 00 10 	addic   r0,r0,16
    a944:	90 01 00 2c 	stw     r0,44(r1)
    a948:	38 00 00 20 	li      r0,32
    a94c:	90 01 00 30 	stw     r0,48(r1)
    a950:	80 61 00 2c 	lwz     r3,44(r1)
    a954:	80 81 00 30 	lwz     r4,48(r1)
    a958:	38 a0 00 00 	li      r5,0
    a95c:	38 c0 ff ff 	li      r6,-1
    a960:	48 00 00 01 	bl      a960 <pfkey_send_new_mapping+0xf4>
    a964:	7c 60 1b 78 	mr      r0,r3
    a968:	90 01 00 18 	stw     r0,24(r1)
	if (skb == NULL)
    a96c:	80 01 00 18 	lwz     r0,24(r1)
    a970:	2f 80 00 00 	cmpwi   cr7,r0,0
    a974:	40 9e 00 0c 	bne-    cr7,a980 <pfkey_send_new_mapping+0x114>
		return -ENOMEM;
    a978:	38 00 ff f4 	li      r0,-12
    a97c:	48 00 03 b0 	b       ad2c <pfkey_send_new_mapping+0x4c0>

	hdr = (struct sadb_msg *) skb_put(skb, sizeof(struct sadb_msg));
    a980:	80 61 00 18 	lwz     r3,24(r1)
    a984:	38 80 00 10 	li      r4,16
    a988:	48 00 00 01 	bl      a988 <pfkey_send_new_mapping+0x11c>
    a98c:	90 61 00 1c 	stw     r3,28(r1)
	hdr->sadb_msg_version = PF_KEY_V2;
    a990:	80 01 00 1c 	lwz     r0,28(r1)
    a994:	39 20 00 02 	li      r9,2
    a998:	7c 0a 03 78 	mr      r10,r0
    a99c:	99 2a 00 00 	stb     r9,0(r10)
	hdr->sadb_msg_type = SADB_X_NAT_T_NEW_MAPPING;
    a9a0:	80 01 00 1c 	lwz     r0,28(r1)
    a9a4:	39 20 00 17 	li      r9,23
    a9a8:	7c 0b 03 78 	mr      r11,r0
    a9ac:	99 2b 00 01 	stb     r9,1(r11)
	hdr->sadb_msg_satype = satype;
    a9b0:	80 01 00 1c 	lwz     r0,28(r1)
    a9b4:	89 21 00 08 	lbz     r9,8(r1)
    a9b8:	7c 0a 03 78 	mr      r10,r0
    a9bc:	99 2a 00 03 	stb     r9,3(r10)
	hdr->sadb_msg_len = size / sizeof(uint64_t);
    a9c0:	80 01 00 14 	lwz     r0,20(r1)
    a9c4:	54 00 e8 fe 	rlwinm  r0,r0,29,3,31
    a9c8:	54 09 04 3e 	clrlwi  r9,r0,16
    a9cc:	80 01 00 1c 	lwz     r0,28(r1)
    a9d0:	7c 0b 03 78 	mr      r11,r0
    a9d4:	b1 2b 00 04 	sth     r9,4(r11)
	hdr->sadb_msg_errno = 0;
    a9d8:	80 01 00 1c 	lwz     r0,28(r1)
    a9dc:	39 20 00 00 	li      r9,0
    a9e0:	7c 0a 03 78 	mr      r10,r0
    a9e4:	99 2a 00 02 	stb     r9,2(r10)
	hdr->sadb_msg_reserved = 0;
    a9e8:	80 01 00 1c 	lwz     r0,28(r1)
    a9ec:	39 20 00 00 	li      r9,0
    a9f0:	7c 0b 03 78 	mr      r11,r0
    a9f4:	b1 2b 00 06 	sth     r9,6(r11)
	hdr->sadb_msg_seq = x->km.seq = get_acqseq();
    a9f8:	4b ff f2 c9 	bl      9cc0 <get_acqseq>
    a9fc:	7c 69 1b 78 	mr      r9,r3
    aa00:	80 01 00 38 	lwz     r0,56(r1)
    aa04:	7c 0a 03 78 	mr      r10,r0
    aa08:	91 2a 00 88 	stw     r9,136(r10)
    aa0c:	80 01 00 38 	lwz     r0,56(r1)
    aa10:	7c 0b 03 78 	mr      r11,r0
    aa14:	81 2b 00 88 	lwz     r9,136(r11)
    aa18:	80 01 00 1c 	lwz     r0,28(r1)
    aa1c:	7c 0a 03 78 	mr      r10,r0
    aa20:	91 2a 00 08 	stw     r9,8(r10)
	hdr->sadb_msg_pid = 0;
    aa24:	80 01 00 1c 	lwz     r0,28(r1)
    aa28:	39 20 00 00 	li      r9,0
    aa2c:	7c 0b 03 78 	mr      r11,r0
    aa30:	91 2b 00 0c 	stw     r9,12(r11)

	/* SA */
	sa = (struct sadb_sa *) skb_put(skb, sizeof(struct sadb_sa));
    aa34:	80 61 00 18 	lwz     r3,24(r1)
    aa38:	38 80 00 10 	li      r4,16
    aa3c:	48 00 00 01 	bl      aa3c <pfkey_send_new_mapping+0x1d0>
    aa40:	90 61 00 20 	stw     r3,32(r1)
	sa->sadb_sa_len = sizeof(struct sadb_sa)/sizeof(uint64_t);
    aa44:	80 01 00 20 	lwz     r0,32(r1)
    aa48:	39 20 00 02 	li      r9,2
    aa4c:	7c 0a 03 78 	mr      r10,r0
    aa50:	b1 2a 00 00 	sth     r9,0(r10)
	sa->sadb_sa_exttype = SADB_EXT_SA;
    aa54:	80 01 00 20 	lwz     r0,32(r1)
    aa58:	39 20 00 01 	li      r9,1
    aa5c:	7c 0b 03 78 	mr      r11,r0
    aa60:	b1 2b 00 02 	sth     r9,2(r11)
	sa->sadb_sa_spi = x->id.spi;
    aa64:	80 01 00 38 	lwz     r0,56(r1)
    aa68:	7c 0a 03 78 	mr      r10,r0
    aa6c:	81 2a 00 2c 	lwz     r9,44(r10)
    aa70:	80 01 00 20 	lwz     r0,32(r1)
    aa74:	7c 0b 03 78 	mr      r11,r0
    aa78:	91 2b 00 04 	stw     r9,4(r11)
	sa->sadb_sa_replay = 0;
    aa7c:	80 01 00 20 	lwz     r0,32(r1)
    aa80:	39 20 00 00 	li      r9,0
    aa84:	7c 0a 03 78 	mr      r10,r0
    aa88:	99 2a 00 08 	stb     r9,8(r10)
	sa->sadb_sa_state = 0;
    aa8c:	80 01 00 20 	lwz     r0,32(r1)
    aa90:	39 20 00 00 	li      r9,0
    aa94:	7c 0b 03 78 	mr      r11,r0
    aa98:	99 2b 00 09 	stb     r9,9(r11)
	sa->sadb_sa_auth = 0;
    aa9c:	80 01 00 20 	lwz     r0,32(r1)
    aaa0:	39 20 00 00 	li      r9,0
    aaa4:	7c 0a 03 78 	mr      r10,r0
    aaa8:	99 2a 00 0a 	stb     r9,10(r10)
	sa->sadb_sa_encrypt = 0;
    aaac:	80 01 00 20 	lwz     r0,32(r1)
    aab0:	39 20 00 00 	li      r9,0
    aab4:	7c 0b 03 78 	mr      r11,r0
    aab8:	99 2b 00 0b 	stb     r9,11(r11)
	sa->sadb_sa_flags = 0;
    aabc:	80 01 00 20 	lwz     r0,32(r1)
    aac0:	39 20 00 00 	li      r9,0
    aac4:	7c 0a 03 78 	mr      r10,r0
    aac8:	91 2a 00 0c 	stw     r9,12(r10)

	/* ADDRESS_SRC (old addr) */
	addr = (struct sadb_address*)
		skb_put(skb, sizeof(struct sadb_address)+sockaddr_size);
    aacc:	80 01 00 10 	lwz     r0,16(r1)
    aad0:	30 00 00 08 	addic   r0,r0,8
	sa->sadb_sa_auth = 0;
	sa->sadb_sa_encrypt = 0;
	sa->sadb_sa_flags = 0;

	/* ADDRESS_SRC (old addr) */
	addr = (struct sadb_address*)
    aad4:	80 61 00 18 	lwz     r3,24(r1)
    aad8:	7c 04 03 78 	mr      r4,r0
    aadc:	48 00 00 01 	bl      aadc <pfkey_send_new_mapping+0x270>
    aae0:	90 61 00 24 	stw     r3,36(r1)
		skb_put(skb, sizeof(struct sadb_address)+sockaddr_size);
	addr->sadb_address_len =
		(sizeof(struct sadb_address)+sockaddr_size)/
    aae4:	80 01 00 10 	lwz     r0,16(r1)
    aae8:	30 00 00 08 	addic   r0,r0,8
    aaec:	54 00 e8 fe 	rlwinm  r0,r0,29,3,31
	sa->sadb_sa_flags = 0;

	/* ADDRESS_SRC (old addr) */
	addr = (struct sadb_address*)
		skb_put(skb, sizeof(struct sadb_address)+sockaddr_size);
	addr->sadb_address_len =
    aaf0:	54 09 04 3e 	clrlwi  r9,r0,16
    aaf4:	80 01 00 24 	lwz     r0,36(r1)
    aaf8:	7c 0b 03 78 	mr      r11,r0
    aafc:	b1 2b 00 00 	sth     r9,0(r11)
		(sizeof(struct sadb_address)+sockaddr_size)/
			sizeof(uint64_t);
	addr->sadb_address_exttype = SADB_EXT_ADDRESS_SRC;
    ab00:	80 01 00 24 	lwz     r0,36(r1)
    ab04:	39 20 00 05 	li      r9,5
    ab08:	7c 0a 03 78 	mr      r10,r0
    ab0c:	b1 2a 00 02 	sth     r9,2(r10)
	addr->sadb_address_proto = 0;
    ab10:	80 01 00 24 	lwz     r0,36(r1)
    ab14:	39 20 00 00 	li      r9,0
    ab18:	7c 0b 03 78 	mr      r11,r0
    ab1c:	99 2b 00 04 	stb     r9,4(r11)
	addr->sadb_address_reserved = 0;
    ab20:	80 01 00 24 	lwz     r0,36(r1)
    ab24:	39 20 00 00 	li      r9,0
    ab28:	7c 0a 03 78 	mr      r10,r0
    ab2c:	b1 2a 00 06 	sth     r9,6(r10)
	addr->sadb_address_prefixlen =
		pfkey_sockaddr_fill(&x->props.saddr, 0,
    ab30:	80 01 00 38 	lwz     r0,56(r1)
    ab34:	31 60 00 98 	addic   r11,r0,152
    ab38:	80 01 00 24 	lwz     r0,36(r1)
    ab3c:	31 20 00 08 	addic   r9,r0,8
				    (struct sockaddr *) (addr + 1),
				    x->props.family);
    ab40:	80 01 00 38 	lwz     r0,56(r1)
			sizeof(uint64_t);
	addr->sadb_address_exttype = SADB_EXT_ADDRESS_SRC;
	addr->sadb_address_proto = 0;
	addr->sadb_address_reserved = 0;
	addr->sadb_address_prefixlen =
		pfkey_sockaddr_fill(&x->props.saddr, 0,
    ab44:	7c 0a 03 78 	mr      r10,r0
    ab48:	a0 0a 00 96 	lhz     r0,150(r10)
    ab4c:	54 00 04 3e 	clrlwi  r0,r0,16
    ab50:	7d 63 5b 78 	mr      r3,r11
    ab54:	38 80 00 00 	li      r4,0
    ab58:	7d 25 4b 78 	mr      r5,r9
    ab5c:	7c 06 03 78 	mr      r6,r0
    ab60:	4b ff 6f 71 	bl      1ad0 <pfkey_sockaddr_fill>
    ab64:	7c 60 1b 78 	mr      r0,r3
		(sizeof(struct sadb_address)+sockaddr_size)/
			sizeof(uint64_t);
	addr->sadb_address_exttype = SADB_EXT_ADDRESS_SRC;
	addr->sadb_address_proto = 0;
	addr->sadb_address_reserved = 0;
	addr->sadb_address_prefixlen =
    ab68:	54 09 06 3e 	clrlwi  r9,r0,24
    ab6c:	80 01 00 24 	lwz     r0,36(r1)
    ab70:	7c 0b 03 78 	mr      r11,r0
    ab74:	99 2b 00 05 	stb     r9,5(r11)
		pfkey_sockaddr_fill(&x->props.saddr, 0,
				    (struct sockaddr *) (addr + 1),
				    x->props.family);
	if (!addr->sadb_address_prefixlen)
    ab78:	80 01 00 24 	lwz     r0,36(r1)
    ab7c:	7c 09 03 78 	mr      r9,r0
    ab80:	88 09 00 05 	lbz     r0,5(r9)
    ab84:	54 00 06 3e 	clrlwi  r0,r0,24
    ab88:	2f 80 00 00 	cmpwi   cr7,r0,0
    ab8c:	40 9e 00 08 	bne-    cr7,ab94 <pfkey_send_new_mapping+0x328>
		BUG();
    ab90:	0f e0 00 00 	twi     31,r0,0

	/* NAT_T_SPORT (old port) */
	n_port = (struct sadb_x_nat_t_port*) skb_put(skb, sizeof (*n_port));
    ab94:	80 61 00 18 	lwz     r3,24(r1)
    ab98:	38 80 00 08 	li      r4,8
    ab9c:	48 00 00 01 	bl      ab9c <pfkey_send_new_mapping+0x330>
    aba0:	90 61 00 28 	stw     r3,40(r1)
	n_port->sadb_x_nat_t_port_len = sizeof(*n_port)/sizeof(uint64_t);
    aba4:	80 01 00 28 	lwz     r0,40(r1)
    aba8:	39 20 00 01 	li      r9,1
    abac:	7c 0a 03 78 	mr      r10,r0
    abb0:	b1 2a 00 00 	sth     r9,0(r10)
	n_port->sadb_x_nat_t_port_exttype = SADB_X_EXT_NAT_T_SPORT;
    abb4:	80 01 00 28 	lwz     r0,40(r1)
    abb8:	39 20 00 15 	li      r9,21
    abbc:	7c 0b 03 78 	mr      r11,r0
    abc0:	b1 2b 00 02 	sth     r9,2(r11)
	n_port->sadb_x_nat_t_port_port = natt->encap_sport;
    abc4:	80 01 00 0c 	lwz     r0,12(r1)
    abc8:	7c 09 03 78 	mr      r9,r0
    abcc:	a0 09 00 02 	lhz     r0,2(r9)
    abd0:	54 09 04 3e 	clrlwi  r9,r0,16
    abd4:	80 01 00 28 	lwz     r0,40(r1)
    abd8:	7c 0a 03 78 	mr      r10,r0
    abdc:	b1 2a 00 04 	sth     r9,4(r10)
	n_port->sadb_x_nat_t_port_reserved = 0;
    abe0:	80 01 00 28 	lwz     r0,40(r1)
    abe4:	39 20 00 00 	li      r9,0
    abe8:	7c 0b 03 78 	mr      r11,r0
    abec:	b1 2b 00 06 	sth     r9,6(r11)

	/* ADDRESS_DST (new addr) */
	addr = (struct sadb_address*)
		skb_put(skb, sizeof(struct sadb_address)+sockaddr_size);
    abf0:	80 01 00 10 	lwz     r0,16(r1)
    abf4:	30 00 00 08 	addic   r0,r0,8
	n_port->sadb_x_nat_t_port_exttype = SADB_X_EXT_NAT_T_SPORT;
	n_port->sadb_x_nat_t_port_port = natt->encap_sport;
	n_port->sadb_x_nat_t_port_reserved = 0;

	/* ADDRESS_DST (new addr) */
	addr = (struct sadb_address*)
    abf8:	80 61 00 18 	lwz     r3,24(r1)
    abfc:	7c 04 03 78 	mr      r4,r0
    ac00:	48 00 00 01 	bl      ac00 <pfkey_send_new_mapping+0x394>
    ac04:	90 61 00 24 	stw     r3,36(r1)
		skb_put(skb, sizeof(struct sadb_address)+sockaddr_size);
	addr->sadb_address_len =
		(sizeof(struct sadb_address)+sockaddr_size)/
    ac08:	80 01 00 10 	lwz     r0,16(r1)
    ac0c:	30 00 00 08 	addic   r0,r0,8
    ac10:	54 00 e8 fe 	rlwinm  r0,r0,29,3,31
	n_port->sadb_x_nat_t_port_reserved = 0;

	/* ADDRESS_DST (new addr) */
	addr = (struct sadb_address*)
		skb_put(skb, sizeof(struct sadb_address)+sockaddr_size);
	addr->sadb_address_len =
    ac14:	54 09 04 3e 	clrlwi  r9,r0,16
    ac18:	80 01 00 24 	lwz     r0,36(r1)
    ac1c:	7c 0a 03 78 	mr      r10,r0
    ac20:	b1 2a 00 00 	sth     r9,0(r10)
		(sizeof(struct sadb_address)+sockaddr_size)/
			sizeof(uint64_t);
	addr->sadb_address_exttype = SADB_EXT_ADDRESS_DST;
    ac24:	80 01 00 24 	lwz     r0,36(r1)
    ac28:	39 20 00 06 	li      r9,6
    ac2c:	7c 0b 03 78 	mr      r11,r0
    ac30:	b1 2b 00 02 	sth     r9,2(r11)
	addr->sadb_address_proto = 0;
    ac34:	80 01 00 24 	lwz     r0,36(r1)
    ac38:	39 20 00 00 	li      r9,0
    ac3c:	7c 0a 03 78 	mr      r10,r0
    ac40:	99 2a 00 04 	stb     r9,4(r10)
	addr->sadb_address_reserved = 0;
    ac44:	80 01 00 24 	lwz     r0,36(r1)
    ac48:	39 20 00 00 	li      r9,0
    ac4c:	7c 0b 03 78 	mr      r11,r0
    ac50:	b1 2b 00 06 	sth     r9,6(r11)
	addr->sadb_address_prefixlen =
		pfkey_sockaddr_fill(ipaddr, 0,
    ac54:	80 01 00 24 	lwz     r0,36(r1)
    ac58:	31 20 00 08 	addic   r9,r0,8
				    (struct sockaddr *) (addr + 1),
				    x->props.family);
    ac5c:	80 01 00 38 	lwz     r0,56(r1)
			sizeof(uint64_t);
	addr->sadb_address_exttype = SADB_EXT_ADDRESS_DST;
	addr->sadb_address_proto = 0;
	addr->sadb_address_reserved = 0;
	addr->sadb_address_prefixlen =
		pfkey_sockaddr_fill(ipaddr, 0,
    ac60:	7c 0a 03 78 	mr      r10,r0
    ac64:	a0 0a 00 96 	lhz     r0,150(r10)
    ac68:	54 00 04 3e 	clrlwi  r0,r0,16
    ac6c:	80 61 00 3c 	lwz     r3,60(r1)
    ac70:	38 80 00 00 	li      r4,0
    ac74:	7d 25 4b 78 	mr      r5,r9
    ac78:	7c 06 03 78 	mr      r6,r0
    ac7c:	4b ff 6e 55 	bl      1ad0 <pfkey_sockaddr_fill>
    ac80:	7c 60 1b 78 	mr      r0,r3
		(sizeof(struct sadb_address)+sockaddr_size)/
			sizeof(uint64_t);
	addr->sadb_address_exttype = SADB_EXT_ADDRESS_DST;
	addr->sadb_address_proto = 0;
	addr->sadb_address_reserved = 0;
	addr->sadb_address_prefixlen =
    ac84:	54 09 06 3e 	clrlwi  r9,r0,24
    ac88:	80 01 00 24 	lwz     r0,36(r1)
    ac8c:	7c 0b 03 78 	mr      r11,r0
    ac90:	99 2b 00 05 	stb     r9,5(r11)
		pfkey_sockaddr_fill(ipaddr, 0,
				    (struct sockaddr *) (addr + 1),
				    x->props.family);
	if (!addr->sadb_address_prefixlen)
    ac94:	80 01 00 24 	lwz     r0,36(r1)
    ac98:	7c 09 03 78 	mr      r9,r0
    ac9c:	88 09 00 05 	lbz     r0,5(r9)
    aca0:	54 00 06 3e 	clrlwi  r0,r0,24
    aca4:	2f 80 00 00 	cmpwi   cr7,r0,0
    aca8:	40 9e 00 08 	bne-    cr7,acb0 <pfkey_send_new_mapping+0x444>
		BUG();
    acac:	0f e0 00 00 	twi     31,r0,0

	/* NAT_T_DPORT (new port) */
	n_port = (struct sadb_x_nat_t_port*) skb_put(skb, sizeof (*n_port));
    acb0:	80 61 00 18 	lwz     r3,24(r1)
    acb4:	38 80 00 08 	li      r4,8
    acb8:	48 00 00 01 	bl      acb8 <pfkey_send_new_mapping+0x44c>
    acbc:	90 61 00 28 	stw     r3,40(r1)
	n_port->sadb_x_nat_t_port_len = sizeof(*n_port)/sizeof(uint64_t);
    acc0:	80 01 00 28 	lwz     r0,40(r1)
    acc4:	39 20 00 01 	li      r9,1
    acc8:	7c 0a 03 78 	mr      r10,r0
    accc:	b1 2a 00 00 	sth     r9,0(r10)
	n_port->sadb_x_nat_t_port_exttype = SADB_X_EXT_NAT_T_DPORT;
    acd0:	80 01 00 28 	lwz     r0,40(r1)
    acd4:	39 20 00 16 	li      r9,22
    acd8:	7c 0b 03 78 	mr      r11,r0
    acdc:	b1 2b 00 02 	sth     r9,2(r11)
	n_port->sadb_x_nat_t_port_port = sport;
    ace0:	80 01 00 28 	lwz     r0,40(r1)
    ace4:	a1 21 00 40 	lhz     r9,64(r1)
    ace8:	7c 0a 03 78 	mr      r10,r0
    acec:	b1 2a 00 04 	sth     r9,4(r10)
	n_port->sadb_x_nat_t_port_reserved = 0;
    acf0:	80 01 00 28 	lwz     r0,40(r1)
    acf4:	39 20 00 00 	li      r9,0
    acf8:	7c 0b 03 78 	mr      r11,r0
    acfc:	b1 2b 00 06 	sth     r9,6(r11)
    ad00:	80 01 00 38 	lwz     r0,56(r1)
    ad04:	90 01 00 34 	stw     r0,52(r1)
    ad08:	3c 00 00 00 	lis     r0,0
    ad0c:	30 00 00 00 	addic   r0,r0,0

	return pfkey_broadcast(skb, GFP_ATOMIC, BROADCAST_REGISTERED, NULL, xs_net(x));
    ad10:	80 61 00 18 	lwz     r3,24(r1)
    ad14:	38 80 00 20 	li      r4,32
    ad18:	38 a0 00 02 	li      r5,2
    ad1c:	38 c0 00 00 	li      r6,0
    ad20:	7c 07 03 78 	mr      r7,r0
    ad24:	4b ff 60 29 	bl      d4c <pfkey_broadcast>
    ad28:	7c 60 1b 78 	mr      r0,r3
}
    ad2c:	7c 03 03 78 	mr      r3,r0
    ad30:	80 01 00 54 	lwz     r0,84(r1)
    ad34:	7c 08 03 a6 	mtlr    r0
    ad38:	38 21 00 50 	addi    r1,r1,80
    ad3c:	4e 80 00 20 	blr

0000ad40 <pfkey_send_migrate>:
}
#else
static int pfkey_send_migrate(struct xfrm_selector *sel, u8 dir, u8 type,
			      struct xfrm_migrate *m, int num_bundles,
			      struct xfrm_kmaddress *k)
{
    ad40:	94 21 ff e0 	stwu    r1,-32(r1)
    ad44:	90 61 00 08 	stw     r3,8(r1)
    ad48:	7c 89 23 78 	mr      r9,r4
    ad4c:	7c a0 2b 78 	mr      r0,r5
    ad50:	90 c1 00 10 	stw     r6,16(r1)
    ad54:	90 e1 00 14 	stw     r7,20(r1)
    ad58:	91 01 00 18 	stw     r8,24(r1)
    ad5c:	99 21 00 0c 	stb     r9,12(r1)
    ad60:	98 01 00 0d 	stb     r0,13(r1)
	return -ENOPROTOOPT;
    ad64:	38 00 ff a4 	li      r0,-92
}
    ad68:	7c 03 03 78 	mr      r3,r0
    ad6c:	38 21 00 20 	addi    r1,r1,32
    ad70:	4e 80 00 20 	blr

0000ad74 <pfkey_sendmsg>:
#endif

static int pfkey_sendmsg(struct kiocb *kiocb,
			 struct socket *sock, struct msghdr *msg, size_t len)
{
    ad74:	94 21 ff c0 	stwu    r1,-64(r1)
    ad78:	7c 08 02 a6 	mflr    r0
    ad7c:	90 01 00 44 	stw     r0,68(r1)
    ad80:	90 61 00 28 	stw     r3,40(r1)
    ad84:	90 81 00 2c 	stw     r4,44(r1)
    ad88:	90 a1 00 30 	stw     r5,48(r1)
    ad8c:	90 c1 00 34 	stw     r6,52(r1)
	struct sock *sk = sock->sk;
    ad90:	80 01 00 2c 	lwz     r0,44(r1)
    ad94:	7c 09 03 78 	mr      r9,r0
    ad98:	80 09 00 14 	lwz     r0,20(r9)
    ad9c:	90 01 00 10 	stw     r0,16(r1)
	struct sk_buff *skb = NULL;
    ada0:	38 00 00 00 	li      r0,0
    ada4:	90 01 00 08 	stw     r0,8(r1)
	struct sadb_msg *hdr = NULL;
    ada8:	38 00 00 00 	li      r0,0
    adac:	90 01 00 0c 	stw     r0,12(r1)
	int err;

	err = -EOPNOTSUPP;
    adb0:	38 00 ff a1 	li      r0,-95
    adb4:	90 01 00 1c 	stw     r0,28(r1)
	if (msg->msg_flags & MSG_OOB)
    adb8:	80 01 00 30 	lwz     r0,48(r1)
    adbc:	7c 0a 03 78 	mr      r10,r0
    adc0:	80 0a 00 18 	lwz     r0,24(r10)
    adc4:	54 00 07 fe 	clrlwi  r0,r0,31
    adc8:	54 00 06 3e 	clrlwi  r0,r0,24
    adcc:	2f 80 00 00 	cmpwi   cr7,r0,0
    add0:	40 9e 01 04 	bne-    cr7,aed4 <pfkey_sendmsg+0x160>
		goto out;

	err = -EMSGSIZE;
    add4:	38 00 ff a6 	li      r0,-90
    add8:	90 01 00 1c 	stw     r0,28(r1)
	if ((unsigned)len > sk->sk_sndbuf - 32)
    addc:	80 01 00 10 	lwz     r0,16(r1)
    ade0:	7c 09 03 78 	mr      r9,r0
    ade4:	80 09 00 84 	lwz     r0,132(r9)
    ade8:	30 00 ff e0 	addic   r0,r0,-32
    adec:	7c 09 03 78 	mr      r9,r0
    adf0:	80 01 00 34 	lwz     r0,52(r1)
    adf4:	7f 89 00 40 	cmplw   cr7,r9,r0
    adf8:	41 9c 00 e4 	blt-    cr7,aedc <pfkey_sendmsg+0x168>
		goto out;

	err = -ENOBUFS;
    adfc:	38 00 ff 97 	li      r0,-105
    ae00:	90 01 00 1c 	stw     r0,28(r1)
    ae04:	80 01 00 34 	lwz     r0,52(r1)
    ae08:	90 01 00 14 	stw     r0,20(r1)
    ae0c:	38 00 00 d0 	li      r0,208
    ae10:	90 01 00 18 	stw     r0,24(r1)
    ae14:	80 61 00 14 	lwz     r3,20(r1)
    ae18:	80 81 00 18 	lwz     r4,24(r1)
    ae1c:	38 a0 00 00 	li      r5,0
    ae20:	38 c0 ff ff 	li      r6,-1
    ae24:	48 00 00 01 	bl      ae24 <pfkey_sendmsg+0xb0>
    ae28:	7c 60 1b 78 	mr      r0,r3
	skb = alloc_skb(len, GFP_KERNEL);
    ae2c:	90 01 00 08 	stw     r0,8(r1)
	if (skb == NULL)
    ae30:	80 01 00 08 	lwz     r0,8(r1)
    ae34:	2f 80 00 00 	cmpwi   cr7,r0,0
    ae38:	41 9e 00 ac 	beq-    cr7,aee4 <pfkey_sendmsg+0x170>
		goto out;

	err = -EFAULT;
    ae3c:	38 00 ff f2 	li      r0,-14
    ae40:	90 01 00 1c 	stw     r0,28(r1)
	if (memcpy_fromiovec(skb_put(skb,len), msg->msg_iov, len))
    ae44:	80 61 00 08 	lwz     r3,8(r1)
    ae48:	80 81 00 34 	lwz     r4,52(r1)
    ae4c:	48 00 00 01 	bl      ae4c <pfkey_sendmsg+0xd8>
    ae50:	7c 6b 1b 78 	mr      r11,r3
    ae54:	80 01 00 30 	lwz     r0,48(r1)
    ae58:	7c 0a 03 78 	mr      r10,r0
    ae5c:	81 2a 00 08 	lwz     r9,8(r10)
    ae60:	80 01 00 34 	lwz     r0,52(r1)
    ae64:	7d 63 5b 78 	mr      r3,r11
    ae68:	7d 24 4b 78 	mr      r4,r9
    ae6c:	7c 05 03 78 	mr      r5,r0
    ae70:	48 00 00 01 	bl      ae70 <pfkey_sendmsg+0xfc>
    ae74:	7c 60 1b 78 	mr      r0,r3
    ae78:	2f 80 00 00 	cmpwi   cr7,r0,0
    ae7c:	40 9e 00 70 	bne-    cr7,aeec <pfkey_sendmsg+0x178>
		goto out;

	hdr = pfkey_get_base_msg(skb, &err);
    ae80:	38 01 00 1c 	addi    r0,r1,28
    ae84:	80 61 00 08 	lwz     r3,8(r1)
    ae88:	7c 04 03 78 	mr      r4,r0
    ae8c:	4b ff e0 61 	bl      8eec <pfkey_get_base_msg>
    ae90:	90 61 00 0c 	stw     r3,12(r1)
	if (!hdr)
    ae94:	80 01 00 0c 	lwz     r0,12(r1)
    ae98:	2f 80 00 00 	cmpwi   cr7,r0,0
    ae9c:	41 9e 00 58 	beq-    cr7,aef4 <pfkey_sendmsg+0x180>
		goto out;

	mutex_lock(&xfrm_cfg_mutex);
    aea0:	3c 00 00 00 	lis     r0,0
    aea4:	30 60 00 00 	addic   r3,r0,0
    aea8:	48 00 00 01 	bl      aea8 <pfkey_sendmsg+0x134>
	err = pfkey_process(sk, skb, hdr);
    aeac:	80 61 00 10 	lwz     r3,16(r1)
    aeb0:	80 81 00 08 	lwz     r4,8(r1)
    aeb4:	80 a1 00 0c 	lwz     r5,12(r1)
    aeb8:	4b ff df 0d 	bl      8dc4 <pfkey_process>
    aebc:	7c 60 1b 78 	mr      r0,r3
    aec0:	90 01 00 1c 	stw     r0,28(r1)
	mutex_unlock(&xfrm_cfg_mutex);
    aec4:	3c 00 00 00 	lis     r0,0
    aec8:	30 60 00 00 	addic   r3,r0,0
    aecc:	48 00 00 01 	bl      aecc <pfkey_sendmsg+0x158>
    aed0:	48 00 00 28 	b       aef8 <pfkey_sendmsg+0x184>
	struct sadb_msg *hdr = NULL;
	int err;

	err = -EOPNOTSUPP;
	if (msg->msg_flags & MSG_OOB)
		goto out;
    aed4:	60 00 00 00 	nop
    aed8:	48 00 00 20 	b       aef8 <pfkey_sendmsg+0x184>

	err = -EMSGSIZE;
	if ((unsigned)len > sk->sk_sndbuf - 32)
		goto out;
    aedc:	60 00 00 00 	nop
    aee0:	48 00 00 18 	b       aef8 <pfkey_sendmsg+0x184>

	err = -ENOBUFS;
	skb = alloc_skb(len, GFP_KERNEL);
	if (skb == NULL)
		goto out;
    aee4:	60 00 00 00 	nop
    aee8:	48 00 00 10 	b       aef8 <pfkey_sendmsg+0x184>

	err = -EFAULT;
	if (memcpy_fromiovec(skb_put(skb,len), msg->msg_iov, len))
		goto out;
    aeec:	60 00 00 00 	nop
    aef0:	48 00 00 08 	b       aef8 <pfkey_sendmsg+0x184>

	hdr = pfkey_get_base_msg(skb, &err);
	if (!hdr)
		goto out;
    aef4:	60 00 00 00 	nop
	mutex_lock(&xfrm_cfg_mutex);
	err = pfkey_process(sk, skb, hdr);
	mutex_unlock(&xfrm_cfg_mutex);

out:
	if (err && hdr && pfkey_error(hdr, err, sk) == 0)
    aef8:	80 01 00 1c 	lwz     r0,28(r1)
    aefc:	2f 80 00 00 	cmpwi   cr7,r0,0
    af00:	41 9e 00 38 	beq-    cr7,af38 <pfkey_sendmsg+0x1c4>
    af04:	80 01 00 0c 	lwz     r0,12(r1)
    af08:	2f 80 00 00 	cmpwi   cr7,r0,0
    af0c:	41 9e 00 2c 	beq-    cr7,af38 <pfkey_sendmsg+0x1c4>
    af10:	80 01 00 1c 	lwz     r0,28(r1)
    af14:	80 61 00 0c 	lwz     r3,12(r1)
    af18:	7c 04 03 78 	mr      r4,r0
    af1c:	80 a1 00 10 	lwz     r5,16(r1)
    af20:	4b ff 62 0d 	bl      112c <pfkey_error>
    af24:	7c 60 1b 78 	mr      r0,r3
    af28:	2f 80 00 00 	cmpwi   cr7,r0,0
    af2c:	40 9e 00 0c 	bne-    cr7,af38 <pfkey_sendmsg+0x1c4>
		err = 0;
    af30:	38 00 00 00 	li      r0,0
    af34:	90 01 00 1c 	stw     r0,28(r1)
	kfree_skb(skb);
    af38:	80 61 00 08 	lwz     r3,8(r1)
    af3c:	48 00 00 01 	bl      af3c <pfkey_sendmsg+0x1c8>

	return err ? : len;
    af40:	80 01 00 1c 	lwz     r0,28(r1)
    af44:	2f 80 00 00 	cmpwi   cr7,r0,0
    af48:	41 9e 00 08 	beq-    cr7,af50 <pfkey_sendmsg+0x1dc>
    af4c:	48 00 00 08 	b       af54 <pfkey_sendmsg+0x1e0>
    af50:	80 01 00 34 	lwz     r0,52(r1)
}
    af54:	7c 03 03 78 	mr      r3,r0
    af58:	80 01 00 44 	lwz     r0,68(r1)
    af5c:	7c 08 03 a6 	mtlr    r0
    af60:	38 21 00 40 	addi    r1,r1,64
    af64:	4e 80 00 20 	blr

0000af68 <pfkey_recvmsg>:

static int pfkey_recvmsg(struct kiocb *kiocb,
			 struct socket *sock, struct msghdr *msg, size_t len,
			 int flags)
{
    af68:	94 21 ff a0 	stwu    r1,-96(r1)
    af6c:	7c 08 02 a6 	mflr    r0
    af70:	90 01 00 64 	stw     r0,100(r1)
    af74:	93 e1 00 5c 	stw     r31,92(r1)
    af78:	90 61 00 38 	stw     r3,56(r1)
    af7c:	90 81 00 3c 	stw     r4,60(r1)
    af80:	90 a1 00 40 	stw     r5,64(r1)
    af84:	90 c1 00 44 	stw     r6,68(r1)
    af88:	90 e1 00 48 	stw     r7,72(r1)
	struct sock *sk = sock->sk;
    af8c:	80 01 00 3c 	lwz     r0,60(r1)
    af90:	7c 09 03 78 	mr      r9,r0
    af94:	80 09 00 14 	lwz     r0,20(r9)
    af98:	90 01 00 0c 	stw     r0,12(r1)
    af9c:	80 01 00 0c 	lwz     r0,12(r1)
    afa0:	90 01 00 18 	stw     r0,24(r1)
	} dump;
};

static inline struct pfkey_sock *pfkey_sk(struct sock *sk)
{
	return (struct pfkey_sock *)sk;
    afa4:	80 01 00 18 	lwz     r0,24(r1)
static int pfkey_recvmsg(struct kiocb *kiocb,
			 struct socket *sock, struct msghdr *msg, size_t len,
			 int flags)
{
	struct sock *sk = sock->sk;
	struct pfkey_sock *pfk = pfkey_sk(sk);
    afa8:	90 01 00 10 	stw     r0,16(r1)
	struct sk_buff *skb;
	int copied, err;

	err = -EINVAL;
    afac:	38 00 ff ea 	li      r0,-22
    afb0:	90 01 00 34 	stw     r0,52(r1)
	if (flags & ~(MSG_PEEK|MSG_DONTWAIT|MSG_TRUNC|MSG_CMSG_COMPAT))
    afb4:	81 21 00 48 	lwz     r9,72(r1)
    afb8:	38 00 ff 9d 	li      r0,-99
    afbc:	7d 20 00 38 	and     r0,r9,r0
    afc0:	2f 80 00 00 	cmpwi   cr7,r0,0
    afc4:	40 9e 01 ec 	bne-    cr7,b1b0 <pfkey_recvmsg+0x248>
		goto out;

	msg->msg_namelen = 0;
    afc8:	80 01 00 40 	lwz     r0,64(r1)
    afcc:	39 20 00 00 	li      r9,0
    afd0:	7c 0b 03 78 	mr      r11,r0
    afd4:	91 2b 00 04 	stw     r9,4(r11)
	skb = skb_recv_datagram(sk, flags, flags & MSG_DONTWAIT, &err);
    afd8:	81 61 00 48 	lwz     r11,72(r1)
    afdc:	80 01 00 48 	lwz     r0,72(r1)
    afe0:	54 09 06 72 	rlwinm  r9,r0,0,25,25
    afe4:	38 01 00 34 	addi    r0,r1,52
    afe8:	80 61 00 0c 	lwz     r3,12(r1)
    afec:	7d 64 5b 78 	mr      r4,r11
    aff0:	7d 25 4b 78 	mr      r5,r9
    aff4:	7c 06 03 78 	mr      r6,r0
    aff8:	48 00 00 01 	bl      aff8 <pfkey_recvmsg+0x90>
    affc:	90 61 00 14 	stw     r3,20(r1)
	if (skb == NULL)
    b000:	80 01 00 14 	lwz     r0,20(r1)
    b004:	2f 80 00 00 	cmpwi   cr7,r0,0
    b008:	41 9e 01 b0 	beq-    cr7,b1b8 <pfkey_recvmsg+0x250>
		goto out;

	copied = skb->len;
    b00c:	80 01 00 14 	lwz     r0,20(r1)
    b010:	7c 09 03 78 	mr      r9,r0
    b014:	80 09 00 50 	lwz     r0,80(r9)
    b018:	90 01 00 08 	stw     r0,8(r1)
	if (copied > len) {
    b01c:	81 21 00 08 	lwz     r9,8(r1)
    b020:	80 01 00 44 	lwz     r0,68(r1)
    b024:	7f 89 00 40 	cmplw   cr7,r9,r0
    b028:	40 9d 00 28 	ble-    cr7,b050 <pfkey_recvmsg+0xe8>
		msg->msg_flags |= MSG_TRUNC;
    b02c:	80 01 00 40 	lwz     r0,64(r1)
    b030:	7c 0b 03 78 	mr      r11,r0
    b034:	80 0b 00 18 	lwz     r0,24(r11)
    b038:	60 09 00 20 	ori     r9,r0,32
    b03c:	80 01 00 40 	lwz     r0,64(r1)
    b040:	7c 0b 03 78 	mr      r11,r0
    b044:	91 2b 00 18 	stw     r9,24(r11)
		copied = len;
    b048:	80 01 00 44 	lwz     r0,68(r1)
    b04c:	90 01 00 08 	stw     r0,8(r1)
    b050:	80 01 00 14 	lwz     r0,20(r1)
    b054:	90 01 00 1c 	stw     r0,28(r1)
	return skb->transport_header;
}

static inline void skb_reset_transport_header(struct sk_buff *skb)
{
	skb->transport_header = skb->data;
    b058:	80 01 00 1c 	lwz     r0,28(r1)
    b05c:	7c 0b 03 78 	mr      r11,r0
    b060:	81 2b 00 98 	lwz     r9,152(r11)
    b064:	80 01 00 1c 	lwz     r0,28(r1)
    b068:	7c 0b 03 78 	mr      r11,r0
    b06c:	91 2b 00 80 	stw     r9,128(r11)
	}

	skb_reset_transport_header(skb);
	err = skb_copy_datagram_iovec(skb, 0, msg->msg_iov, copied);
    b070:	80 01 00 40 	lwz     r0,64(r1)
    b074:	7c 09 03 78 	mr      r9,r0
    b078:	80 09 00 08 	lwz     r0,8(r9)
    b07c:	80 61 00 14 	lwz     r3,20(r1)
    b080:	38 80 00 00 	li      r4,0
    b084:	7c 05 03 78 	mr      r5,r0
    b088:	80 c1 00 08 	lwz     r6,8(r1)
    b08c:	48 00 00 01 	bl      b08c <pfkey_recvmsg+0x124>
    b090:	7c 60 1b 78 	mr      r0,r3
    b094:	90 01 00 34 	stw     r0,52(r1)
	if (err)
    b098:	80 01 00 34 	lwz     r0,52(r1)
    b09c:	2f 80 00 00 	cmpwi   cr7,r0,0
    b0a0:	40 9e 00 fc 	bne-    cr7,b19c <pfkey_recvmsg+0x234>
		goto out_free;
    b0a4:	80 01 00 40 	lwz     r0,64(r1)
    b0a8:	90 01 00 20 	stw     r0,32(r1)
    b0ac:	80 01 00 0c 	lwz     r0,12(r1)
    b0b0:	90 01 00 24 	stw     r0,36(r1)
    b0b4:	80 01 00 14 	lwz     r0,20(r1)
    b0b8:	90 01 00 28 	stw     r0,40(r1)
			   (1UL << SOCK_TIMESTAMPING_RX_SOFTWARE)	| \
			   (1UL << SOCK_TIMESTAMPING_SOFTWARE)		| \
			   (1UL << SOCK_TIMESTAMPING_RAW_HARDWARE) 	| \
			   (1UL << SOCK_TIMESTAMPING_SYS_HARDWARE))

	if (sk->sk_flags & FLAGS_TS_OR_DROPS)
    b0bc:	80 01 00 24 	lwz     r0,36(r1)
    b0c0:	7c 0b 03 78 	mr      r11,r0
    b0c4:	81 2b 00 74 	lwz     r9,116(r11)
    b0c8:	3c 00 00 bc 	lis     r0,188
    b0cc:	60 00 08 00 	ori     r0,r0,2048
    b0d0:	7d 20 00 38 	and     r0,r9,r0
    b0d4:	2f 80 00 00 	cmpwi   cr7,r0,0
    b0d8:	41 9e 00 18 	beq-    cr7,b0f0 <pfkey_recvmsg+0x188>
		__sock_recv_ts_and_drops(msg, sk, skb);
    b0dc:	80 61 00 20 	lwz     r3,32(r1)
    b0e0:	80 81 00 24 	lwz     r4,36(r1)
    b0e4:	80 a1 00 28 	lwz     r5,40(r1)
    b0e8:	48 00 00 01 	bl      b0e8 <pfkey_recvmsg+0x180>
    b0ec:	48 00 00 24 	b       b110 <pfkey_recvmsg+0x1a8>
	else
		sk->sk_stamp = skb->tstamp;
    b0f0:	80 01 00 24 	lwz     r0,36(r1)
    b0f4:	81 21 00 28 	lwz     r9,40(r1)
    b0f8:	81 49 00 0c 	lwz     r10,12(r9)
    b0fc:	81 29 00 08 	lwz     r9,8(r9)
    b100:	7c 0b 03 78 	mr      r11,r0
    b104:	39 6b 01 08 	addi    r11,r11,264
    b108:	91 2b 00 00 	stw     r9,0(r11)
    b10c:	91 4b 00 04 	stw     r10,4(r11)

	sock_recv_ts_and_drops(msg, sk, skb);

	err = (flags & MSG_TRUNC) ? skb->len : copied;
    b110:	80 01 00 48 	lwz     r0,72(r1)
    b114:	54 00 06 b4 	rlwinm  r0,r0,0,26,26
    b118:	2f 80 00 00 	cmpwi   cr7,r0,0
    b11c:	41 9e 00 14 	beq-    cr7,b130 <pfkey_recvmsg+0x1c8>
    b120:	80 01 00 14 	lwz     r0,20(r1)
    b124:	7c 09 03 78 	mr      r9,r0
    b128:	80 09 00 50 	lwz     r0,80(r9)
    b12c:	48 00 00 08 	b       b134 <pfkey_recvmsg+0x1cc>
    b130:	80 01 00 08 	lwz     r0,8(r1)
    b134:	90 01 00 34 	stw     r0,52(r1)

	if (pfk->dump.dump != NULL &&
    b138:	80 01 00 10 	lwz     r0,16(r1)
    b13c:	7c 0b 03 78 	mr      r11,r0
    b140:	80 0b 01 58 	lwz     r0,344(r11)
    b144:	2f 80 00 00 	cmpwi   cr7,r0,0
    b148:	41 9e 00 58 	beq-    cr7,b1a0 <pfkey_recvmsg+0x238>
	    3 * atomic_read(&sk->sk_rmem_alloc) <= sk->sk_rcvbuf)
    b14c:	80 01 00 0c 	lwz     r0,12(r1)
    b150:	30 00 00 48 	addic   r0,r0,72
    b154:	90 01 00 2c 	stw     r0,44(r1)

static __inline__ int atomic_read(const atomic_t *v)
{
	int t;

	__asm__ __volatile__("lwz%U1%X1 %0,%1" : "=r"(t) : "m"(v->counter));
    b158:	80 01 00 2c 	lwz     r0,44(r1)
    b15c:	7c 09 03 78 	mr      r9,r0
    b160:	83 e9 00 00 	lwz     r31,0(r9)
    b164:	93 e1 00 30 	stw     r31,48(r1)

	return t;
    b168:	80 01 00 30 	lwz     r0,48(r1)
    b16c:	7c 09 03 78 	mr      r9,r0
    b170:	7d 20 4b 78 	mr      r0,r9
    b174:	54 00 08 3c 	rlwinm  r0,r0,1,0,30
    b178:	7d 20 4a 14 	add     r9,r0,r9
    b17c:	80 01 00 0c 	lwz     r0,12(r1)
    b180:	7c 0b 03 78 	mr      r11,r0
    b184:	80 0b 00 60 	lwz     r0,96(r11)

	sock_recv_ts_and_drops(msg, sk, skb);

	err = (flags & MSG_TRUNC) ? skb->len : copied;

	if (pfk->dump.dump != NULL &&
    b188:	7f 89 00 00 	cmpw    cr7,r9,r0
    b18c:	41 9d 00 14 	bgt-    cr7,b1a0 <pfkey_recvmsg+0x238>
	    3 * atomic_read(&sk->sk_rmem_alloc) <= sk->sk_rcvbuf)
		pfkey_do_dump(pfk);
    b190:	80 61 00 10 	lwz     r3,16(r1)
    b194:	4b ff 5e 7d 	bl      1010 <pfkey_do_dump>
    b198:	48 00 00 08 	b       b1a0 <pfkey_recvmsg+0x238>
	}

	skb_reset_transport_header(skb);
	err = skb_copy_datagram_iovec(skb, 0, msg->msg_iov, copied);
	if (err)
		goto out_free;
    b19c:	60 00 00 00 	nop
	if (pfk->dump.dump != NULL &&
	    3 * atomic_read(&sk->sk_rmem_alloc) <= sk->sk_rcvbuf)
		pfkey_do_dump(pfk);

out_free:
	skb_free_datagram(sk, skb);
    b1a0:	80 61 00 0c 	lwz     r3,12(r1)
    b1a4:	80 81 00 14 	lwz     r4,20(r1)
    b1a8:	48 00 00 01 	bl      b1a8 <pfkey_recvmsg+0x240>
    b1ac:	48 00 00 10 	b       b1bc <pfkey_recvmsg+0x254>
	struct sk_buff *skb;
	int copied, err;

	err = -EINVAL;
	if (flags & ~(MSG_PEEK|MSG_DONTWAIT|MSG_TRUNC|MSG_CMSG_COMPAT))
		goto out;
    b1b0:	60 00 00 00 	nop
    b1b4:	48 00 00 08 	b       b1bc <pfkey_recvmsg+0x254>

	msg->msg_namelen = 0;
	skb = skb_recv_datagram(sk, flags, flags & MSG_DONTWAIT, &err);
	if (skb == NULL)
		goto out;
    b1b8:	60 00 00 00 	nop
		pfkey_do_dump(pfk);

out_free:
	skb_free_datagram(sk, skb);
out:
	return err;
    b1bc:	80 01 00 34 	lwz     r0,52(r1)
}
    b1c0:	7c 03 03 78 	mr      r3,r0
    b1c4:	80 01 00 64 	lwz     r0,100(r1)
    b1c8:	7c 08 03 a6 	mtlr    r0
    b1cc:	83 e1 00 5c 	lwz     r31,92(r1)
    b1d0:	38 21 00 60 	addi    r1,r1,96
    b1d4:	4e 80 00 20 	blr

0000b1d8 <pfkey_seq_show>:
	.owner	=	THIS_MODULE,
};

#ifdef CONFIG_PROC_FS
static int pfkey_seq_show(struct seq_file *f, void *v)
{
    b1d8:	94 21 ff b0 	stwu    r1,-80(r1)
    b1dc:	7c 08 02 a6 	mflr    r0
    b1e0:	90 01 00 54 	stw     r0,84(r1)
    b1e4:	bf 81 00 40 	stmw    r28,64(r1)
    b1e8:	90 61 00 38 	stw     r3,56(r1)
    b1ec:	90 81 00 3c 	stw     r4,60(r1)
    b1f0:	80 01 00 3c 	lwz     r0,60(r1)
    b1f4:	90 01 00 0c 	stw     r0,12(r1)
/*
 * Hashed lists helper routines
 */
static inline struct sock *sk_entry(const struct hlist_node *node)
{
	return hlist_entry(node, struct sock, sk_node);
    b1f8:	80 01 00 0c 	lwz     r0,12(r1)
    b1fc:	90 01 00 10 	stw     r0,16(r1)
    b200:	80 01 00 10 	lwz     r0,16(r1)
    b204:	30 00 ff e0 	addic   r0,r0,-32
	struct sock *s = sk_entry(v);
    b208:	90 01 00 08 	stw     r0,8(r1)

	if (v == SEQ_START_TOKEN)
    b20c:	80 01 00 3c 	lwz     r0,60(r1)
    b210:	2f 80 00 01 	cmpwi   cr7,r0,1
    b214:	40 9e 00 18 	bne-    cr7,b22c <pfkey_seq_show+0x54>
		seq_printf(f ,"sk       RefCnt Rmem   Wmem   User   Inode\n");
    b218:	80 61 00 38 	lwz     r3,56(r1)
    b21c:	3c 00 00 00 	lis     r0,0
    b220:	30 80 01 78 	addic   r4,r0,376
    b224:	48 00 00 01 	bl      b224 <pfkey_seq_show+0x4c>
    b228:	48 00 00 c4 	b       b2ec <pfkey_seq_show+0x114>
	else
		seq_printf(f ,"%p %-6d %-6u %-6u %-6u %-6lu\n",
			       s,
			       atomic_read(&s->sk_refcnt),
    b22c:	80 01 00 08 	lwz     r0,8(r1)
    b230:	30 00 00 2c 	addic   r0,r0,44
    b234:	90 01 00 14 	stw     r0,20(r1)

static __inline__ int atomic_read(const atomic_t *v)
{
	int t;

	__asm__ __volatile__("lwz%U1%X1 %0,%1" : "=r"(t) : "m"(v->counter));
    b238:	80 01 00 14 	lwz     r0,20(r1)
    b23c:	7c 09 03 78 	mr      r9,r0
    b240:	83 e9 00 00 	lwz     r31,0(r9)
    b244:	93 e1 00 18 	stw     r31,24(r1)

	return t;
    b248:	80 01 00 18 	lwz     r0,24(r1)
	struct sock *s = sk_entry(v);

	if (v == SEQ_START_TOKEN)
		seq_printf(f ,"sk       RefCnt Rmem   Wmem   User   Inode\n");
	else
		seq_printf(f ,"%p %-6d %-6u %-6u %-6u %-6lu\n",
    b24c:	7c 1c 03 78 	mr      r28,r0
    b250:	80 01 00 08 	lwz     r0,8(r1)
    b254:	90 01 00 1c 	stw     r0,28(r1)
 *
 * Returns sk_rmem_alloc
 */
static inline int sk_rmem_alloc_get(const struct sock *sk)
{
	return atomic_read(&sk->sk_rmem_alloc);
    b258:	80 01 00 1c 	lwz     r0,28(r1)
    b25c:	30 00 00 48 	addic   r0,r0,72
    b260:	90 01 00 20 	stw     r0,32(r1)

static __inline__ int atomic_read(const atomic_t *v)
{
	int t;

	__asm__ __volatile__("lwz%U1%X1 %0,%1" : "=r"(t) : "m"(v->counter));
    b264:	80 01 00 20 	lwz     r0,32(r1)
    b268:	7c 09 03 78 	mr      r9,r0
    b26c:	83 e9 00 00 	lwz     r31,0(r9)
    b270:	93 e1 00 24 	stw     r31,36(r1)

	return t;
    b274:	80 01 00 24 	lwz     r0,36(r1)
    b278:	7c 1d 03 78 	mr      r29,r0
    b27c:	80 01 00 08 	lwz     r0,8(r1)
    b280:	90 01 00 28 	stw     r0,40(r1)
 *
 * Returns sk_wmem_alloc minus initial offset of one
 */
static inline int sk_wmem_alloc_get(const struct sock *sk)
{
	return atomic_read(&sk->sk_wmem_alloc) - 1;
    b284:	80 01 00 28 	lwz     r0,40(r1)
    b288:	30 00 00 7c 	addic   r0,r0,124
    b28c:	90 01 00 2c 	stw     r0,44(r1)

static __inline__ int atomic_read(const atomic_t *v)
{
	int t;

	__asm__ __volatile__("lwz%U1%X1 %0,%1" : "=r"(t) : "m"(v->counter));
    b290:	80 01 00 2c 	lwz     r0,44(r1)
    b294:	7c 09 03 78 	mr      r9,r0
    b298:	83 e9 00 00 	lwz     r31,0(r9)
    b29c:	93 e1 00 30 	stw     r31,48(r1)

	return t;
    b2a0:	80 01 00 30 	lwz     r0,48(r1)
    b2a4:	30 00 ff ff 	addic   r0,r0,-1
    b2a8:	7c 1e 03 78 	mr      r30,r0
    b2ac:	80 61 00 08 	lwz     r3,8(r1)
    b2b0:	48 00 00 01 	bl      b2b0 <pfkey_seq_show+0xd8>
    b2b4:	7c 7f 1b 78 	mr      r31,r3
    b2b8:	80 61 00 08 	lwz     r3,8(r1)
    b2bc:	48 00 00 01 	bl      b2bc <pfkey_seq_show+0xe4>
    b2c0:	7c 60 1b 78 	mr      r0,r3
    b2c4:	80 61 00 38 	lwz     r3,56(r1)
    b2c8:	3d 20 00 00 	lis     r9,0
    b2cc:	38 89 01 a4 	addi    r4,r9,420
    b2d0:	80 a1 00 08 	lwz     r5,8(r1)
    b2d4:	7f 86 e3 78 	mr      r6,r28
    b2d8:	7f a7 eb 78 	mr      r7,r29
    b2dc:	7f c8 f3 78 	mr      r8,r30
    b2e0:	7f e9 fb 78 	mr      r9,r31
    b2e4:	7c 0a 03 78 	mr      r10,r0
    b2e8:	48 00 00 01 	bl      b2e8 <pfkey_seq_show+0x110>
			       sk_rmem_alloc_get(s),
			       sk_wmem_alloc_get(s),
			       sock_i_uid(s),
			       sock_i_ino(s)
			       );
	return 0;
    b2ec:	38 00 00 00 	li      r0,0
}
    b2f0:	7c 03 03 78 	mr      r3,r0
    b2f4:	80 01 00 54 	lwz     r0,84(r1)
    b2f8:	7c 08 03 a6 	mtlr    r0
    b2fc:	bb 81 00 40 	lmw     r28,64(r1)
    b300:	38 21 00 50 	addi    r1,r1,80
    b304:	4e 80 00 20 	blr

0000b308 <pfkey_seq_start>:

static void *pfkey_seq_start(struct seq_file *f, loff_t *ppos)
{
    b308:	94 21 ff d0 	stwu    r1,-48(r1)
    b30c:	7c 08 02 a6 	mflr    r0
    b310:	90 01 00 34 	stw     r0,52(r1)
    b314:	90 61 00 28 	stw     r3,40(r1)
    b318:	90 81 00 2c 	stw     r4,44(r1)
    b31c:	80 01 00 28 	lwz     r0,40(r1)
    b320:	90 01 00 24 	stw     r0,36(r1)
static inline struct net *seq_file_net(struct seq_file *seq)
{
#ifdef CONFIG_NET_NS
	return ((struct seq_net_private *)seq->private)->net;
#else
	return &init_net;
    b324:	3c 00 00 00 	lis     r0,0
    b328:	30 00 00 00 	addic   r0,r0,0
	struct net *net = seq_file_net(f);
    b32c:	90 01 00 08 	stw     r0,8(r1)
	struct netns_pfkey *net_pfkey = net_generic(net, pfkey_net_id);
    b330:	3c 00 00 00 	lis     r0,0
    b334:	7c 09 03 78 	mr      r9,r0
    b338:	80 09 00 00 	lwz     r0,0(r9)
    b33c:	81 21 00 08 	lwz     r9,8(r1)
    b340:	91 21 00 10 	stw     r9,16(r1)
    b344:	90 01 00 14 	stw     r0,20(r1)
{
	struct net_generic *ng;
	void *ptr;

	rcu_read_lock();
	ng = rcu_dereference(net->gen);
    b348:	80 01 00 10 	lwz     r0,16(r1)
    b34c:	7c 0b 03 78 	mr      r11,r0
    b350:	80 0b 02 20 	lwz     r0,544(r11)
    b354:	90 01 00 18 	stw     r0,24(r1)
    b358:	80 01 00 18 	lwz     r0,24(r1)
    b35c:	90 01 00 1c 	stw     r0,28(r1)
	BUG_ON(id == 0 || id > ng->len);
    b360:	80 01 00 14 	lwz     r0,20(r1)
    b364:	2f 80 00 00 	cmpwi   cr7,r0,0
    b368:	41 9e 00 1c 	beq-    cr7,b384 <pfkey_seq_start+0x7c>
    b36c:	81 21 00 14 	lwz     r9,20(r1)
    b370:	80 01 00 1c 	lwz     r0,28(r1)
    b374:	7c 0b 03 78 	mr      r11,r0
    b378:	80 0b 00 00 	lwz     r0,0(r11)
    b37c:	7f 89 00 40 	cmplw   cr7,r9,r0
    b380:	40 9d 00 0c 	ble-    cr7,b38c <pfkey_seq_start+0x84>
    b384:	38 00 00 01 	li      r0,1
    b388:	48 00 00 08 	b       b390 <pfkey_seq_start+0x88>
    b38c:	38 00 00 00 	li      r0,0
    b390:	0f 00 00 00 	twnei   r0,0
	ptr = ng->ptr[id - 1];
    b394:	80 01 00 14 	lwz     r0,20(r1)
    b398:	30 00 ff ff 	addic   r0,r0,-1
    b39c:	81 21 00 1c 	lwz     r9,28(r1)
    b3a0:	54 00 10 3a 	rlwinm  r0,r0,2,0,29
    b3a4:	7c 09 02 14 	add     r0,r9,r0
    b3a8:	30 00 00 0c 	addic   r0,r0,12
    b3ac:	7c 09 03 78 	mr      r9,r0
    b3b0:	80 09 00 00 	lwz     r0,0(r9)
    b3b4:	90 01 00 20 	stw     r0,32(r1)
	rcu_read_unlock();

	return ptr;
    b3b8:	80 01 00 20 	lwz     r0,32(r1)
    b3bc:	90 01 00 0c 	stw     r0,12(r1)

	rcu_read_lock();
	return seq_hlist_start_head_rcu(&net_pfkey->table, *ppos);
    b3c0:	80 01 00 0c 	lwz     r0,12(r1)
    b3c4:	81 21 00 2c 	lwz     r9,44(r1)
    b3c8:	81 49 00 04 	lwz     r10,4(r9)
    b3cc:	81 29 00 00 	lwz     r9,0(r9)
    b3d0:	7c 03 03 78 	mr      r3,r0
    b3d4:	7d 25 4b 78 	mr      r5,r9
    b3d8:	7d 46 53 78 	mr      r6,r10
    b3dc:	48 00 00 01 	bl      b3dc <pfkey_seq_start+0xd4>
    b3e0:	7c 60 1b 78 	mr      r0,r3
}
    b3e4:	7c 03 03 78 	mr      r3,r0
    b3e8:	80 01 00 34 	lwz     r0,52(r1)
    b3ec:	7c 08 03 a6 	mtlr    r0
    b3f0:	38 21 00 30 	addi    r1,r1,48
    b3f4:	4e 80 00 20 	blr

0000b3f8 <pfkey_seq_next>:

static void *pfkey_seq_next(struct seq_file *f, void *v, loff_t *ppos)
{
    b3f8:	94 21 ff c0 	stwu    r1,-64(r1)
    b3fc:	7c 08 02 a6 	mflr    r0
    b400:	90 01 00 44 	stw     r0,68(r1)
    b404:	90 61 00 28 	stw     r3,40(r1)
    b408:	90 81 00 2c 	stw     r4,44(r1)
    b40c:	90 a1 00 30 	stw     r5,48(r1)
    b410:	80 01 00 28 	lwz     r0,40(r1)
    b414:	90 01 00 24 	stw     r0,36(r1)
    b418:	3c 00 00 00 	lis     r0,0
    b41c:	30 00 00 00 	addic   r0,r0,0
	struct net *net = seq_file_net(f);
    b420:	90 01 00 08 	stw     r0,8(r1)
	struct netns_pfkey *net_pfkey = net_generic(net, pfkey_net_id);
    b424:	3c 00 00 00 	lis     r0,0
    b428:	7c 09 03 78 	mr      r9,r0
    b42c:	80 09 00 00 	lwz     r0,0(r9)
    b430:	81 21 00 08 	lwz     r9,8(r1)
    b434:	91 21 00 10 	stw     r9,16(r1)
    b438:	90 01 00 14 	stw     r0,20(r1)
{
	struct net_generic *ng;
	void *ptr;

	rcu_read_lock();
	ng = rcu_dereference(net->gen);
    b43c:	80 01 00 10 	lwz     r0,16(r1)
    b440:	7c 0b 03 78 	mr      r11,r0
    b444:	80 0b 02 20 	lwz     r0,544(r11)
    b448:	90 01 00 18 	stw     r0,24(r1)
    b44c:	80 01 00 18 	lwz     r0,24(r1)
    b450:	90 01 00 1c 	stw     r0,28(r1)
	BUG_ON(id == 0 || id > ng->len);
    b454:	80 01 00 14 	lwz     r0,20(r1)
    b458:	2f 80 00 00 	cmpwi   cr7,r0,0
    b45c:	41 9e 00 1c 	beq-    cr7,b478 <pfkey_seq_next+0x80>
    b460:	81 21 00 14 	lwz     r9,20(r1)
    b464:	80 01 00 1c 	lwz     r0,28(r1)
    b468:	7c 0b 03 78 	mr      r11,r0
    b46c:	80 0b 00 00 	lwz     r0,0(r11)
    b470:	7f 89 00 40 	cmplw   cr7,r9,r0
    b474:	40 9d 00 0c 	ble-    cr7,b480 <pfkey_seq_next+0x88>
    b478:	38 00 00 01 	li      r0,1
    b47c:	48 00 00 08 	b       b484 <pfkey_seq_next+0x8c>
    b480:	38 00 00 00 	li      r0,0
    b484:	0f 00 00 00 	twnei   r0,0
	ptr = ng->ptr[id - 1];
    b488:	80 01 00 14 	lwz     r0,20(r1)
    b48c:	30 00 ff ff 	addic   r0,r0,-1
    b490:	81 21 00 1c 	lwz     r9,28(r1)
    b494:	54 00 10 3a 	rlwinm  r0,r0,2,0,29
    b498:	7c 09 02 14 	add     r0,r9,r0
    b49c:	30 00 00 0c 	addic   r0,r0,12
    b4a0:	7c 09 03 78 	mr      r9,r0
    b4a4:	80 09 00 00 	lwz     r0,0(r9)
    b4a8:	90 01 00 20 	stw     r0,32(r1)
	rcu_read_unlock();

	return ptr;
    b4ac:	80 01 00 20 	lwz     r0,32(r1)
    b4b0:	90 01 00 0c 	stw     r0,12(r1)

	return seq_hlist_next_rcu(v, &net_pfkey->table, ppos);
    b4b4:	80 01 00 0c 	lwz     r0,12(r1)
    b4b8:	80 61 00 2c 	lwz     r3,44(r1)
    b4bc:	7c 04 03 78 	mr      r4,r0
    b4c0:	80 a1 00 30 	lwz     r5,48(r1)
    b4c4:	48 00 00 01 	bl      b4c4 <pfkey_seq_next+0xcc>
    b4c8:	7c 60 1b 78 	mr      r0,r3
}
    b4cc:	7c 03 03 78 	mr      r3,r0
    b4d0:	80 01 00 44 	lwz     r0,68(r1)
    b4d4:	7c 08 03 a6 	mtlr    r0
    b4d8:	38 21 00 40 	addi    r1,r1,64
    b4dc:	4e 80 00 20 	blr

0000b4e0 <pfkey_seq_stop>:

static void pfkey_seq_stop(struct seq_file *f, void *v)
{
    b4e0:	94 21 ff f0 	stwu    r1,-16(r1)
    b4e4:	90 61 00 08 	stw     r3,8(r1)
    b4e8:	90 81 00 0c 	stw     r4,12(r1)
	rcu_read_unlock();
}
    b4ec:	38 21 00 10 	addi    r1,r1,16
    b4f0:	4e 80 00 20 	blr

0000b4f4 <pfkey_seq_open>:
	.stop	= pfkey_seq_stop,
	.show	= pfkey_seq_show,
};

static int pfkey_seq_open(struct inode *inode, struct file *file)
{
    b4f4:	94 21 ff f0 	stwu    r1,-16(r1)
    b4f8:	7c 08 02 a6 	mflr    r0
    b4fc:	90 01 00 14 	stw     r0,20(r1)
    b500:	90 61 00 08 	stw     r3,8(r1)
    b504:	90 81 00 0c 	stw     r4,12(r1)
	return seq_open_net(inode, file, &pfkey_seq_ops,
    b508:	80 61 00 08 	lwz     r3,8(r1)
    b50c:	80 81 00 0c 	lwz     r4,12(r1)
    b510:	3c 00 00 00 	lis     r0,0
    b514:	30 a0 01 c4 	addic   r5,r0,452
    b518:	38 c0 00 00 	li      r6,0
    b51c:	48 00 00 01 	bl      b51c <pfkey_seq_open+0x28>
    b520:	7c 60 1b 78 	mr      r0,r3
			    sizeof(struct seq_net_private));
}
    b524:	7c 03 03 78 	mr      r3,r0
    b528:	80 01 00 14 	lwz     r0,20(r1)
    b52c:	7c 08 03 a6 	mtlr    r0
    b530:	38 21 00 10 	addi    r1,r1,16
    b534:	4e 80 00 20 	blr

Disassembly of section .init.text:

00000000 <pfkey_init_proc>:
	.llseek	 = seq_lseek,
	.release = seq_release_net,
};

static int __net_init pfkey_init_proc(struct net *net)
{
   0:	94 21 ff e0 	stwu    r1,-32(r1)
   4:	7c 08 02 a6 	mflr    r0
   8:	90 01 00 24 	stw     r0,36(r1)
   c:	90 61 00 18 	stw     r3,24(r1)
	struct proc_dir_entry *e;

	e = proc_net_fops_create(net, "pfkey", 0, &pfkey_proc_ops);
  10:	80 61 00 18 	lwz     r3,24(r1)
  14:	3c 00 00 00 	lis     r0,0
  18:	30 80 02 3c 	addic   r4,r0,572
  1c:	38 a0 00 00 	li      r5,0
  20:	3c 00 00 00 	lis     r0,0
  24:	30 c0 01 d4 	addic   r6,r0,468
  28:	48 00 00 01 	bl      28 <pfkey_init_proc+0x28>
  2c:	90 61 00 08 	stw     r3,8(r1)
	if (e == NULL)
  30:	80 01 00 08 	lwz     r0,8(r1)
  34:	2f 80 00 00 	cmpwi   cr7,r0,0
  38:	40 9e 00 0c 	bne-    cr7,44 <pfkey_init_proc+0x44>
		return -ENOMEM;
  3c:	38 00 ff f4 	li      r0,-12
  40:	48 00 00 08 	b       48 <pfkey_init_proc+0x48>

	return 0;
  44:	38 00 00 00 	li      r0,0
}
  48:	7c 03 03 78 	mr      r3,r0
  4c:	80 01 00 24 	lwz     r0,36(r1)
  50:	7c 08 03 a6 	mtlr    r0
  54:	38 21 00 20 	addi    r1,r1,32
  58:	4e 80 00 20 	blr

0000005c <pfkey_net_init>:
	.notify_policy	= pfkey_send_policy_notify,
	.migrate	= pfkey_send_migrate,
};

static int __net_init pfkey_net_init(struct net *net)
{
  5c:	94 21 ff c0 	stwu    r1,-64(r1)
  60:	7c 08 02 a6 	mflr    r0
  64:	90 01 00 44 	stw     r0,68(r1)
  68:	90 61 00 38 	stw     r3,56(r1)
	struct netns_pfkey *net_pfkey = net_generic(net, pfkey_net_id);
  6c:	3c 00 00 00 	lis     r0,0
  70:	7c 09 03 78 	mr      r9,r0
  74:	80 09 00 00 	lwz     r0,0(r9)
  78:	81 21 00 38 	lwz     r9,56(r1)
  7c:	91 21 00 10 	stw     r9,16(r1)
  80:	90 01 00 14 	stw     r0,20(r1)
{
	struct net_generic *ng;
	void *ptr;

	rcu_read_lock();
	ng = rcu_dereference(net->gen);
  84:	80 01 00 10 	lwz     r0,16(r1)
  88:	7c 0b 03 78 	mr      r11,r0
  8c:	80 0b 02 20 	lwz     r0,544(r11)
  90:	90 01 00 18 	stw     r0,24(r1)
  94:	80 01 00 18 	lwz     r0,24(r1)
  98:	90 01 00 1c 	stw     r0,28(r1)
	BUG_ON(id == 0 || id > ng->len);
  9c:	80 01 00 14 	lwz     r0,20(r1)
  a0:	2f 80 00 00 	cmpwi   cr7,r0,0
  a4:	41 9e 00 1c 	beq-    cr7,c0 <pfkey_net_init+0x64>
  a8:	81 21 00 14 	lwz     r9,20(r1)
  ac:	80 01 00 1c 	lwz     r0,28(r1)
  b0:	7c 0b 03 78 	mr      r11,r0
  b4:	80 0b 00 00 	lwz     r0,0(r11)
  b8:	7f 89 00 40 	cmplw   cr7,r9,r0
  bc:	40 9d 00 0c 	ble-    cr7,c8 <pfkey_net_init+0x6c>
  c0:	38 00 00 01 	li      r0,1
  c4:	48 00 00 08 	b       cc <pfkey_net_init+0x70>
  c8:	38 00 00 00 	li      r0,0
  cc:	0f 00 00 00 	twnei   r0,0
	ptr = ng->ptr[id - 1];
  d0:	80 01 00 14 	lwz     r0,20(r1)
  d4:	30 00 ff ff 	addic   r0,r0,-1
  d8:	81 21 00 1c 	lwz     r9,28(r1)
  dc:	54 00 10 3a 	rlwinm  r0,r0,2,0,29
  e0:	7c 09 02 14 	add     r0,r9,r0
  e4:	30 00 00 0c 	addic   r0,r0,12
  e8:	7c 09 03 78 	mr      r9,r0
  ec:	80 09 00 00 	lwz     r0,0(r9)
  f0:	90 01 00 20 	stw     r0,32(r1)
	rcu_read_unlock();

	return ptr;
  f4:	80 01 00 20 	lwz     r0,32(r1)
  f8:	90 01 00 08 	stw     r0,8(r1)
	int rv;

	INIT_HLIST_HEAD(&net_pfkey->table);
  fc:	80 01 00 08 	lwz     r0,8(r1)
 100:	39 20 00 00 	li      r9,0
 104:	7c 0b 03 78 	mr      r11,r0
 108:	91 2b 00 00 	stw     r9,0(r11)
	atomic_set(&net_pfkey->socks_nr, 0);
 10c:	80 01 00 08 	lwz     r0,8(r1)
 110:	30 00 00 04 	addic   r0,r0,4
 114:	90 01 00 24 	stw     r0,36(r1)
 118:	38 00 00 00 	li      r0,0
 11c:	90 01 00 28 	stw     r0,40(r1)
}

static __inline__ void atomic_set(atomic_t *v, int i)
{
	__asm__ __volatile__("stw%U0%X0 %1,%0" : "=m"(v->counter) : "r"(i));
 120:	80 01 00 24 	lwz     r0,36(r1)
 124:	81 21 00 28 	lwz     r9,40(r1)
 128:	7c 0b 03 78 	mr      r11,r0
 12c:	91 2b 00 00 	stw     r9,0(r11)

	rv = pfkey_init_proc(net);
 130:	80 61 00 38 	lwz     r3,56(r1)
 134:	4b ff fe cd 	bl      0 <pfkey_init_proc>
 138:	90 61 00 0c 	stw     r3,12(r1)

	return rv;
 13c:	80 01 00 0c 	lwz     r0,12(r1)
}
 140:	7c 03 03 78 	mr      r3,r0
 144:	80 01 00 44 	lwz     r0,68(r1)
 148:	7c 08 03 a6 	mtlr    r0
 14c:	38 21 00 40 	addi    r1,r1,64
 150:	4e 80 00 20 	blr

00000154 <ipsec_pfkey_init>:
	unregister_pernet_subsys(&pfkey_net_ops);
	proto_unregister(&key_proto);
}

static int __init ipsec_pfkey_init(void)
{
 154:	94 21 ff e0 	stwu    r1,-32(r1)
 158:	7c 08 02 a6 	mflr    r0
 15c:	90 01 00 24 	stw     r0,36(r1)
	int err = proto_register(&key_proto, 0);
 160:	3c 00 00 00 	lis     r0,0
 164:	30 60 00 0c 	addic   r3,r0,12
 168:	38 80 00 00 	li      r4,0
 16c:	48 00 00 01 	bl      16c <ipsec_pfkey_init+0x18>
 170:	90 61 00 08 	stw     r3,8(r1)

	if (err != 0)
 174:	80 01 00 08 	lwz     r0,8(r1)
 178:	2f 80 00 00 	cmpwi   cr7,r0,0
 17c:	40 9e 00 5c 	bne-    cr7,1d8 <ipsec_pfkey_init+0x84>
		goto out;

	err = register_pernet_subsys(&pfkey_net_ops);
 180:	3c 00 00 00 	lis     r0,0
 184:	30 60 01 74 	addic   r3,r0,372
 188:	48 00 00 01 	bl      188 <ipsec_pfkey_init+0x34>
 18c:	90 61 00 08 	stw     r3,8(r1)
	if (err != 0)
 190:	80 01 00 08 	lwz     r0,8(r1)
 194:	2f 80 00 00 	cmpwi   cr7,r0,0
 198:	40 9e 00 80 	bne-    cr7,218 <ipsec_pfkey_init+0xc4>
		goto out_unregister_key_proto;
	err = sock_register(&pfkey_family_ops);
 19c:	3c 00 00 00 	lis     r0,0
 1a0:	30 60 01 6c 	addic   r3,r0,364
 1a4:	48 00 00 01 	bl      1a4 <ipsec_pfkey_init+0x50>
 1a8:	90 61 00 08 	stw     r3,8(r1)
	if (err != 0)
 1ac:	80 01 00 08 	lwz     r0,8(r1)
 1b0:	2f 80 00 00 	cmpwi   cr7,r0,0
 1b4:	40 9e 00 50 	bne-    cr7,204 <ipsec_pfkey_init+0xb0>
		goto out_unregister_pernet;
	err = xfrm_register_km(&pfkeyv2_mgr);
 1b8:	3c 00 00 00 	lis     r0,0
 1bc:	30 60 01 4c 	addic   r3,r0,332
 1c0:	48 00 00 01 	bl      1c0 <ipsec_pfkey_init+0x6c>
 1c4:	90 61 00 08 	stw     r3,8(r1)
	if (err != 0)
 1c8:	80 01 00 08 	lwz     r0,8(r1)
 1cc:	2f 80 00 00 	cmpwi   cr7,r0,0
 1d0:	40 9e 00 24 	bne-    cr7,1f4 <ipsec_pfkey_init+0xa0>
 1d4:	48 00 00 08 	b       1dc <ipsec_pfkey_init+0x88>
static int __init ipsec_pfkey_init(void)
{
	int err = proto_register(&key_proto, 0);

	if (err != 0)
		goto out;
 1d8:	60 00 00 00 	nop
		goto out_unregister_pernet;
	err = xfrm_register_km(&pfkeyv2_mgr);
	if (err != 0)
		goto out_sock_unregister;
out:
	return err;
 1dc:	80 01 00 08 	lwz     r0,8(r1)
out_unregister_pernet:
	unregister_pernet_subsys(&pfkey_net_ops);
out_unregister_key_proto:
	proto_unregister(&key_proto);
	goto out;
}
 1e0:	7c 03 03 78 	mr      r3,r0
 1e4:	80 01 00 24 	lwz     r0,36(r1)
 1e8:	7c 08 03 a6 	mtlr    r0
 1ec:	38 21 00 20 	addi    r1,r1,32
 1f0:	4e 80 00 20 	blr
	err = sock_register(&pfkey_family_ops);
	if (err != 0)
		goto out_unregister_pernet;
	err = xfrm_register_km(&pfkeyv2_mgr);
	if (err != 0)
		goto out_sock_unregister;
 1f4:	60 00 00 00 	nop
out:
	return err;

out_sock_unregister:
	sock_unregister(PF_KEY);
 1f8:	38 60 00 0f 	li      r3,15
 1fc:	48 00 00 01 	bl      1fc <ipsec_pfkey_init+0xa8>
 200:	48 00 00 08 	b       208 <ipsec_pfkey_init+0xb4>
	err = register_pernet_subsys(&pfkey_net_ops);
	if (err != 0)
		goto out_unregister_key_proto;
	err = sock_register(&pfkey_family_ops);
	if (err != 0)
		goto out_unregister_pernet;
 204:	60 00 00 00 	nop
	return err;

out_sock_unregister:
	sock_unregister(PF_KEY);
out_unregister_pernet:
	unregister_pernet_subsys(&pfkey_net_ops);
 208:	3c 00 00 00 	lis     r0,0
 20c:	30 60 01 74 	addic   r3,r0,372
 210:	48 00 00 01 	bl      210 <ipsec_pfkey_init+0xbc>
 214:	48 00 00 08 	b       21c <ipsec_pfkey_init+0xc8>
	if (err != 0)
		goto out;

	err = register_pernet_subsys(&pfkey_net_ops);
	if (err != 0)
		goto out_unregister_key_proto;
 218:	60 00 00 00 	nop
out_sock_unregister:
	sock_unregister(PF_KEY);
out_unregister_pernet:
	unregister_pernet_subsys(&pfkey_net_ops);
out_unregister_key_proto:
	proto_unregister(&key_proto);
 21c:	3c 00 00 00 	lis     r0,0
 220:	30 60 00 0c 	addic   r3,r0,12
 224:	48 00 00 01 	bl      224 <ipsec_pfkey_init+0xd0>
	goto out;
 228:	4b ff ff b4 	b       1dc <ipsec_pfkey_init+0x88>

Disassembly of section .ref.text:

00000000 <pfkey_exit_proc>:

	return 0;
}

static void __net_exit pfkey_exit_proc(struct net *net)
{
   0:	94 21 ff f0 	stwu    r1,-16(r1)
   4:	7c 08 02 a6 	mflr    r0
   8:	90 01 00 14 	stw     r0,20(r1)
   c:	90 61 00 08 	stw     r3,8(r1)
	proc_net_remove(net, "pfkey");
  10:	80 61 00 08 	lwz     r3,8(r1)
  14:	3c 00 00 00 	lis     r0,0
  18:	30 80 02 3c 	addic   r4,r0,572
  1c:	48 00 00 01 	bl      1c <pfkey_exit_proc+0x1c>
}
  20:	80 01 00 14 	lwz     r0,20(r1)
  24:	7c 08 03 a6 	mtlr    r0
  28:	38 21 00 10 	addi    r1,r1,16
  2c:	4e 80 00 20 	blr

00000030 <pfkey_net_exit>:

	return rv;
}

static void __net_exit pfkey_net_exit(struct net *net)
{
  30:	94 21 ff d0 	stwu    r1,-48(r1)
  34:	7c 08 02 a6 	mflr    r0
  38:	90 01 00 34 	stw     r0,52(r1)
  3c:	90 61 00 28 	stw     r3,40(r1)
	struct netns_pfkey *net_pfkey = net_generic(net, pfkey_net_id);
  40:	3c 00 00 00 	lis     r0,0
  44:	7c 09 03 78 	mr      r9,r0
  48:	80 09 00 00 	lwz     r0,0(r9)
  4c:	81 21 00 28 	lwz     r9,40(r1)
  50:	91 21 00 0c 	stw     r9,12(r1)
  54:	90 01 00 10 	stw     r0,16(r1)
{
	struct net_generic *ng;
	void *ptr;

	rcu_read_lock();
	ng = rcu_dereference(net->gen);
  58:	80 01 00 0c 	lwz     r0,12(r1)
  5c:	7c 0b 03 78 	mr      r11,r0
  60:	80 0b 02 20 	lwz     r0,544(r11)
  64:	90 01 00 14 	stw     r0,20(r1)
  68:	80 01 00 14 	lwz     r0,20(r1)
  6c:	90 01 00 18 	stw     r0,24(r1)
	BUG_ON(id == 0 || id > ng->len);
  70:	80 01 00 10 	lwz     r0,16(r1)
  74:	2f 80 00 00 	cmpwi   cr7,r0,0
  78:	41 9e 00 1c 	beq-    cr7,94 <pfkey_net_exit+0x64>
  7c:	81 21 00 10 	lwz     r9,16(r1)
  80:	80 01 00 18 	lwz     r0,24(r1)
  84:	7c 0b 03 78 	mr      r11,r0
  88:	80 0b 00 00 	lwz     r0,0(r11)
  8c:	7f 89 00 40 	cmplw   cr7,r9,r0
  90:	40 9d 00 0c 	ble-    cr7,9c <pfkey_net_exit+0x6c>
  94:	38 00 00 01 	li      r0,1
  98:	48 00 00 08 	b       a0 <pfkey_net_exit+0x70>
  9c:	38 00 00 00 	li      r0,0
  a0:	0f 00 00 00 	twnei   r0,0
	ptr = ng->ptr[id - 1];
  a4:	80 01 00 10 	lwz     r0,16(r1)
  a8:	30 00 ff ff 	addic   r0,r0,-1
  ac:	81 21 00 18 	lwz     r9,24(r1)
  b0:	54 00 10 3a 	rlwinm  r0,r0,2,0,29
  b4:	7c 09 02 14 	add     r0,r9,r0
  b8:	30 00 00 0c 	addic   r0,r0,12
  bc:	7c 09 03 78 	mr      r9,r0
  c0:	80 09 00 00 	lwz     r0,0(r9)
  c4:	90 01 00 1c 	stw     r0,28(r1)
	rcu_read_unlock();

	return ptr;
  c8:	80 01 00 1c 	lwz     r0,28(r1)
  cc:	90 01 00 08 	stw     r0,8(r1)

	pfkey_exit_proc(net);
  d0:	80 61 00 28 	lwz     r3,40(r1)
  d4:	4b ff ff 2d 	bl      0 <pfkey_exit_proc>
	BUG_ON(!hlist_empty(&net_pfkey->table));
  d8:	80 01 00 08 	lwz     r0,8(r1)
  dc:	90 01 00 20 	stw     r0,32(r1)
	return !h->pprev;
}

static inline int hlist_empty(const struct hlist_head *h)
{
	return !h->first;
  e0:	80 01 00 20 	lwz     r0,32(r1)
  e4:	7c 0b 03 78 	mr      r11,r0
  e8:	80 0b 00 00 	lwz     r0,0(r11)
  ec:	2f 80 00 00 	cmpwi   cr7,r0,0
  f0:	7c 00 00 26 	mfcr    r0
  f4:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
  f8:	2f 80 00 00 	cmpwi   cr7,r0,0
  fc:	7c 00 00 26 	mfcr    r0
 100:	54 00 ff fe 	rlwinm  r0,r0,31,31,31
 104:	0f 00 00 00 	twnei   r0,0
}
 108:	80 01 00 34 	lwz     r0,52(r1)
 10c:	7c 08 03 a6 	mtlr    r0
 110:	38 21 00 30 	addi    r1,r1,48
 114:	4e 80 00 20 	blr

Disassembly of section .exit.text:

00000000 <ipsec_pfkey_exit>:
	.id   = &pfkey_net_id,
	.size = sizeof(struct netns_pfkey),
};

static void __exit ipsec_pfkey_exit(void)
{
   0:	94 21 ff f0 	stwu    r1,-16(r1)
   4:	7c 08 02 a6 	mflr    r0
   8:	90 01 00 14 	stw     r0,20(r1)
	xfrm_unregister_km(&pfkeyv2_mgr);
   c:	3c 00 00 00 	lis     r0,0
  10:	30 60 01 4c 	addic   r3,r0,332
  14:	48 00 00 01 	bl      14 <ipsec_pfkey_exit+0x14>
	sock_unregister(PF_KEY);
  18:	38 60 00 0f 	li      r3,15
  1c:	48 00 00 01 	bl      1c <ipsec_pfkey_exit+0x1c>
	unregister_pernet_subsys(&pfkey_net_ops);
  20:	3c 00 00 00 	lis     r0,0
  24:	30 60 01 74 	addic   r3,r0,372
  28:	48 00 00 01 	bl      28 <ipsec_pfkey_exit+0x28>
	proto_unregister(&key_proto);
  2c:	3c 00 00 00 	lis     r0,0
  30:	30 60 00 0c 	addic   r3,r0,12
  34:	48 00 00 01 	bl      34 <ipsec_pfkey_exit+0x34>
}
  38:	80 01 00 14 	lwz     r0,20(r1)
  3c:	7c 08 03 a6 	mtlr    r0
  40:	38 21 00 10 	addi    r1,r1,16
  44:	4e 80 00 20 	blr
